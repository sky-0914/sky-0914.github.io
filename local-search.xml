<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【SpringCloud】SpringCloud 集成 STC（腾讯北极星）</title>
    <link href="/20230215/8a7fe802d0b3.html"/>
    <url>/20230215/8a7fe802d0b3.html</url>
    
    <content type="html"><![CDATA[<h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><p><a href="https://github.com/Tencent/spring-cloud-tencent/wiki/Spring-Cloud-Tencent-Discovery-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3">官方文档-注册中心</a></p><h3 id="1-第一步-引入依赖"><a href="#1-第一步-引入依赖" class="headerlink" title="1. 第一步-引入依赖"></a>1. 第一步-引入依赖</h3><h4 id="方式一：-只引入-spring-cloud-starter-tencent-polaris-discovery"><a href="#方式一：-只引入-spring-cloud-starter-tencent-polaris-discovery" class="headerlink" title="方式一： 只引入 spring-cloud-starter-tencent-polaris-discovery"></a>方式一： 只引入 spring-cloud-starter-tencent-polaris-discovery</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-polaris-discovery&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="方式二：通过-spring-cloud-starter-tencent-all-引入-sct-所有-starters"><a href="#方式二：通过-spring-cloud-starter-tencent-all-引入-sct-所有-starters" class="headerlink" title="方式二：通过 spring-cloud-starter-tencent-all 引入 sct 所有 starters"></a>方式二：通过 spring-cloud-starter-tencent-all 引入 sct 所有 starters</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-all&lt;/artifactId&gt;<br>    &lt;!-- 注意需要指定 type=pom--&gt;<br>    &lt;type&gt;pom&lt;/type&gt; <br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>如果使用 Spring Cloud 2021 版本，还需要添加如下依赖：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-第二步-配置"><a href="#2-第二步-配置" class="headerlink" title="2.第二步-配置"></a>2.第二步-配置</h3><p>在 bootstrap.yml 配置文件中加入以下配置内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;application.name&#125;</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">polaris:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-string">grpc://$&#123;修改为第一步部署的</span> <span class="hljs-string">Polaris</span> <span class="hljs-string">服务地址&#125;:8091</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure><p><strong>完整的的配置列表如下</strong></p><table><thead><tr><th>配置项Key</th><th>默认值</th><th>是否必填</th><th>初始版本</th><th>配置项说明</th></tr></thead><tbody><tr><td>spring.cloud.polaris.address</td><td>无</td><td>是</td><td></td><td>Polaris 后端地址</td></tr><tr><td>spring.cloud.polaris.namespace</td><td>default</td><td>否</td><td></td><td>服务所在的命名空间名称</td></tr><tr><td>spring.cloud.polaris.service</td><td>${spring.application.name}</td><td>否</td><td></td><td>服务名称</td></tr><tr><td>spring.cloud.polaris.local-ip-address</td><td>无</td><td>否</td><td></td><td>注册的 IP 地址，默认情况下 Spring Boot 会自动获取 IP 地址无需指定 IP 地址，当需要自定义 IP 地址时才需要设置</td></tr><tr><td>spring.cloud.polaris.discovery.enabled</td><td>true</td><td>否</td><td></td><td>是否开启服务发现</td></tr><tr><td>spring.cloud.polaris.discovery.register</td><td>true</td><td>否</td><td></td><td>是否开启服务注册</td></tr><tr><td>spring.cloud.polaris.discovery.instance-enabled</td><td>true</td><td>否</td><td></td><td>当前微服务实例是否可以被访问</td></tr><tr><td>spring.cloud.polaris.discovery.health-check-url</td><td>无</td><td>否</td><td></td><td>健康检查 url，向北极星服务端发送心跳前回调健康检查 url 判断当前服务是否健康，只有健康才会发送心跳</td></tr><tr><td>spring.cloud.polaris.discovery.token</td><td>无</td><td>否</td><td></td><td>鉴权 Token</td></tr><tr><td>spring.cloud.polaris.discovery.version</td><td>null</td><td>否</td><td></td><td>微服务版本</td></tr><tr><td>spring.cloud.polaris.discovery.protocol</td><td>null</td><td>否</td><td></td><td>微服务协议类型</td></tr><tr><td>spring.cloud.polaris.discovery.weight</td><td>100</td><td>否</td><td></td><td>微服务权重</td></tr><tr><td>spring.cloud.polaris.discovery.service-list-refresh-interval</td><td>60000</td><td>否</td><td></td><td>服务列表刷新间隔（毫秒）</td></tr><tr><td>spring.cloud.polaris.discovery.heartbeat-interval</td><td>5000</td><td>否</td><td>1.7.0</td><td>心跳间隔（毫秒）</td></tr></tbody></table><h3 id="3-第三步-服务调用"><a href="#3-第三步-服务调用" class="headerlink" title="3.第三步-服务调用"></a>3.第三步-服务调用</h3><p>在 Spring Cloud 中可通过 <code>RestTemplate</code> 或者 <code>Feign</code> 发起服务调用。无论通过哪种方式，都需要引入 <code>spring-cloud-starter-tencent-polaris-discovery</code> 依赖，才能从北极星获取服务提供者的地址信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tencent.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-tencent-polaris-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>RestTemplate</strong></p><p>只需要在实例化 <code>RestTemplate</code> 的地方加上 <code>@LoadBalanced</code> 注解即可。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Bean</span><br><span class="hljs-variable">@LoadBalanced</span><br>public RestTemplate <span class="hljs-built_in">restTemplate</span>() &#123;<br><span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Feign</strong></p><p>通过 <code>Feign</code> 框架调用，无需做任何适配工作，按照标准的 <code>Feign</code> 方式即可。</p><h3 id="4-第四步-前往控制台查看"><a href="#4-第四步-前往控制台查看" class="headerlink" title="4.第四步-前往控制台查看"></a>4.第四步-前往控制台查看</h3><p>可以前往北极星服务端控制台查看实例信息，可以在控制台上对实例进行一系列管控操作，例如隔离实例，调整实例权重等</p><p><img src="https://user-images.githubusercontent.com/4991116/161026971-f57814fc-6e26-47ad-aa6d-16ff1e8d57ad.png" alt="img"></p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><p><a href="https://github.com/Tencent/spring-cloud-tencent/wiki/Spring-Cloud-Tencent-Config-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3">官方文档-配置中心，如何在北极星控制台添加配置文件，拓展使用，北极星配置中心原理介绍</a></p><p>配置中心模块是 Spring Cloud Tencent 最核心的模块之一，实现了 Spring Cloud PropertySourceLocator SPI 接口(PolarisConfigFileLocator.java)。</p><p>在应用启动 Bootstrap 阶段，Spring Cloud 会调用 PolarisConfigFileLocator 从 Polaris 服务端获取配置文件并加载到 Spring 上下文里。通过 Spring Boot 标准的 @Value，@ConfigurationProperties 注解即可获取配置内容。</p><p>动态配置刷新能力，1.6.0 版本之前通过 Spring Cloud 标准的 @RefreshScope 机制实现。 1.6.0 版本之后，通过反射的方式实现。反射的方式不用重新构建 bean 对象，影响面更小、性能更优。</p><blockquote><p>注意：</p><ol><li>由于 Spring Cloud PropertySourceLoader SPI 是在 Bootstrap 阶段调用，所以 Polaris Config 相关的配置内容（例如Polaris 服务地址）需要放在 bootstrap.yml 文件里，而不能放在 application.yml 文件里，否则会初始化失败。</li><li>如果开发者原本的服务名（ spring.application.name ）配置在 application.yml 、application-<em>.yml 、application.properties 或 application-</em>.properties 内，使用 Spring Cloud Tencent Config 的功能时，需要将 spring.application.name 配置在 bootstrap.yml 内，或者在 bootstrap.yml 手动配置 spring.cloud.polaris.service 以指定文件分组名。</li></ol></blockquote><h3 id="1-第一步-引入依赖-1"><a href="#1-第一步-引入依赖-1" class="headerlink" title="1. 第一步-引入依赖"></a>1. 第一步-引入依赖</h3><h4 id="方式一：只引入-spring-cloud-starter-tencent-polaris-config"><a href="#方式一：只引入-spring-cloud-starter-tencent-polaris-config" class="headerlink" title="方式一：只引入 spring-cloud-starter-tencent-polaris-config"></a>方式一：只引入 spring-cloud-starter-tencent-polaris-config</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-polaris-config&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="方式二：通过-spring-cloud-starter-tencent-all-引入-sct-所有-starters-1"><a href="#方式二：通过-spring-cloud-starter-tencent-all-引入-sct-所有-starters-1" class="headerlink" title="方式二：通过 spring-cloud-starter-tencent-all 引入 sct 所有 starters"></a>方式二：通过 spring-cloud-starter-tencent-all 引入 sct 所有 starters</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-all&lt;/artifactId&gt;<br>    &lt;!-- 注意需要指定 type=pom--&gt;<br>    &lt;type&gt;pom&lt;/type&gt; <br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>如果使用 Spring Cloud 2021 版本，还需要添加如下依赖：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-第二步-配置-1"><a href="#2-第二步-配置-1" class="headerlink" title="2.第二步-配置"></a>2.第二步-配置</h3><blockquote><p>在您项目的 bootstrap.yml 配置文件中加入以下配置内容，注意一定要放在 bootstrap.yml 里。因为应用启动强依赖配置，所以 Spring Cloud Config 是在 Bootstrap 阶段加载配置文件，所以需要把北极星相关的配置放在 bootstrap.yml 里。</br><br>bootstrap.yml 核心配置内容为配置北极星服务端地址以及注入的配置文件信息。</p></blockquote><h4 id="1-配置-Polaris-配置中心地址"><a href="#1-配置-Polaris-配置中心地址" class="headerlink" title="1. 配置 Polaris 配置中心地址"></a>1. 配置 Polaris 配置中心地址</h4><p>如果您使用的北极星配置中心和注册中心是同一套北极星集群，则只需配置 spring.cloud.polaris.address 即可。</p><p>如果您部署了两套北极星集群，分别用于注册中心和配置中心，则 spring.cloud.polaris.address 用于指定注册中心集群的地址，spring.cloud.polaris.config.address 用于指定配置中心的地址。</p><p>如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;application.name&#125;</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">polaris:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-string">grpc://$&#123;修改为第一步部署的</span> <span class="hljs-string">Polaris</span> <span class="hljs-string">服务地址&#125;:8091</span> <span class="hljs-comment"># 必填</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span> <span class="hljs-comment"># 全局 namespace 参数</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">address:</span> <span class="hljs-string">grpc://$&#123;独立的配置中心&#125;:8093</span> <span class="hljs-comment"># 选填，只有在配置中心和注册中心是两个不同的地址时才需要配置</span><br>        <span class="hljs-attr">auto-refresh:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 选填，当配置发布后，动态刷新 Spring 上下文，默认值为 true</span><br></code></pre></td></tr></table></figure><h4 id="2-注入配置文件"><a href="#2-注入配置文件" class="headerlink" title="2. 注入配置文件"></a>2. 注入配置文件</h4><p>我们推荐的最佳实践是在北极星管控端创建一个名为当前应用名（ ${spring.application.name}） 的配置分组，Spring Cloud Tencent Config 会自动注入当前应用名分组下的</p><blockquote><ul><li>application-${activeProfile}.properties </li><li>application-${activeProfile}.yml </li><li>application.properties </li><li>application.yml </li><li>bootstrap-${activeProfile}.properties </li><li>bootstrap-${activeProfile}.yml </li><li>bootstrap.properties </li><li>bootstrap.yml</li></ul><p>优先级从上到下依次降低</p><p><strong>注意：是 yml 后缀，而不是 yaml</strong></p></blockquote><p>自动注入以上配置文件符合 Spring Boot 的规范，能够满足绝大部分应用场景了。</p><p>只有当您需要注入额外自定义的配置文件时，才需要在 bootstrap.yml 里配置 spring.cloud.polaris.config.groups，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">polaris:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">groups:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span> <span class="hljs-comment"># 选填，注入自定义配置的配置分组</span><br>            <span class="hljs-attr">files:</span> [ <span class="hljs-string">&quot;config/application.properties&quot;</span>, <span class="hljs-string">&quot;config/bootstrap.yml&quot;</span> ] <span class="hljs-comment"># 注入自定义配置文件列表，当 key 冲突时，排在前面的配置文件优先级高于后面</span><br></code></pre></td></tr></table></figure><p><strong>完整的配置参数</strong></p><table><thead><tr><th>配置项Key</th><th>起始版本</th><th>默认值</th><th>是否必填</th><th>配置项说明</th></tr></thead><tbody><tr><td>spring.cloud.polaris.config.enabled</td><td></td><td>true</td><td>否</td><td>是否开启配置模块</td></tr><tr><td>spring.cloud.polaris.config.address</td><td></td><td>无</td><td>否</td><td>北极星服务端地址，可不填。当配置中心和注册中心为不同的地址时候才需要填写</td></tr><tr><td>spring.cloud.polaris.config.port</td><td></td><td>8093</td><td>否</td><td>北极星配置中心的端口号，默认为 8093</td></tr><tr><td>spring.cloud.polaris.config.auto-refresh</td><td></td><td>true</td><td>否</td><td>是否动态更新配置</td></tr><tr><td>spring.cloud.polaris.config.groups</td><td></td><td>无</td><td>否</td><td>从北极星服务端获取自定义的配置文件</td></tr><tr><td>spring.cloud.polaris.config.connect-remote-server</td><td></td><td>true</td><td>否</td><td>是否连接到远程北极星配置中心服务端，当没有网络环境或者无北极星服务端时可关闭</td></tr><tr><td>spring.cloud.polaris.config.refresh-type</td><td>1.7.0</td><td>refresh_context</td><td>否</td><td>动态刷新配置的实现方式。 <code>refresh_context</code> 为 Spring Cloud 默认的方式, <code>reflect</code> 为 SCT 实现的通过反射的机制实现的，优点是无需重建 Bean</td></tr><tr><td>spring.cloud.polaris.config.shutdown-if-connect-to-config-server-failed</td><td>1.7.0</td><td>true</td><td>否</td><td>应用启动时检查配置中心的后端连接，如果连接配置中心失败，是否需要终止应用启动（true 为终止启动）</td></tr><tr><td>spring.cloud.polaris.config.data-source</td><td>1.8.0</td><td>polaris</td><td>否</td><td>动态配置数据源类型，当前支持 polaris 和 local 两种模式，默认为 polaris。 - polaris: 从北极星服务端获取配置文件。 - local: 从本地磁盘读取配置文件</td></tr><tr><td>spring.cloud.polaris.config.local-file-root-path</td><td>1.8.0</td><td>.&#x2F;polaris&#x2F;backup&#x2F;config</td><td>否</td><td>当 <code>spring.cloud.polaris.config.data-source=local</code> 时，可设置本地磁盘读取配置文件根目录</td></tr></tbody></table><h3 id="3-第三步-代码里使用配置"><a href="#3-第三步-代码里使用配置" class="headerlink" title="3.第三步-代码里使用配置"></a>3.第三步-代码里使用配置</h3><h4 id="1-通过-Value-注入"><a href="#1-通过-Value-注入" class="headerlink" title="1. 通过 @Value 注入"></a>1. 通过 <code>@Value</code> 注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;name:张三&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> name;<br></code></pre></td></tr></table></figure><h4 id="2-通过-ConfigurationProperties-注入"><a href="#2-通过-ConfigurationProperties-注入" class="headerlink" title="2. 通过 @ConfigurationProperties 注入"></a>2. 通过 <code>@ConfigurationProperties</code> 注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;teacher&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProperties</span> &#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-第四步-控制台发布配置"><a href="#4-第四步-控制台发布配置" class="headerlink" title="4.第四步-控制台发布配置"></a>4.第四步-控制台发布配置</h3><h3 id="创建并发布配置文件"><a href="#创建并发布配置文件" class="headerlink" title="创建并发布配置文件"></a>创建并发布配置文件</h3><p>北极星配置中心的控制台，配置文件名可以通过 &#x2F; 来按树状目录结构展示，树状结构可以清晰的管理配置文件。例如一个应用下分不同的模块，每个模块都有独立的一组配置文件，则可以创建 <code> module1/file1.properties</code>, <code>module1/file2.yaml</code>, <code>module2/file3.yaml</code>。</p><blockquote><p>注意：配置文件名强烈建议带文件后缀，例如 <code>.properties</code> <code>.yaml</code> <code>.yml</code> <code>.json</code> 等。因为客户端会通过文件名后缀来解析文件内容，如果客户端发现不认识的后缀名则默认当做 <code>.properties</code> 文件处理。</p></blockquote><p>配置好的实例如下图所示：</p><p><img src="https://user-images.githubusercontent.com/4991116/170200088-b4a4a1c0-a550-4400-8f17-923565f7b4ec.png" alt="image"></p><h3 id="北极星配置中心原理介绍"><a href="#北极星配置中心原理介绍" class="headerlink" title="北极星配置中心原理介绍"></a>北极星配置中心原理介绍</h3><p><img src="https://user-images.githubusercontent.com/4991116/171319787-278ac349-da99-4cc1-a264-6e91c150fbe0.png" alt="image"></p><p><strong>客户端端视角</strong></p><ol><li>应用启动时，同步从服务端拉取一次配置，获取最新的配置内容</li><li>把第一步拉取到的所有的配置文件生成 <code>List&lt;File-&gt;Version&gt;</code> 的数据 ，并向服务端发送订阅配置请求，请求内容为 <code>List&lt;File-&gt;Version&gt;</code></li><li>当收到配置文件的推送消息时，向服务端拉取最新的配置文件</li></ol><p><strong>订阅配置服务端视角</strong></p><ol><li>先检查客户端 <code>List&lt;File-&gt;Version&gt;</code> 的请求里是否存在 File 版本号落后，如果存在，则立马响应 <code>File -&gt; NewVersion</code> 内容给客户端</li><li>如果客户端配置文件版本号都是最新的，则在内存里维护 <code>File -&gt; List&lt;Client&gt;</code> 的数据结构并 Hold 请求 30s。如果 30s 内有配置文件发布，则立马响应请求，返回 <code>File -&gt; NewVersion</code> 给所有客户端</li></ol><p><strong>发布推送配置简化流程</strong></p><ol><li>用户在界面点击发布按钮，服务端更新数据库里配置发布表的数据。配置发布表的核心字段：<code>file, version, content, mtime</code></li><li>每个北极星服务端实例，都会定时1s扫描配置发布表，根据 mtime 捞出最近 1s 内变更过的数据</li><li>北极星服务端实例扫描到最新变更的数据之后</li></ol><ul><li>重新加载内存缓存</li><li>向内存里的消息发布管道里写入一条消息</li></ul><ol><li>推送协程从消息发布管道里获取到消息，并消费消息。通过 <code>File -&gt; List&lt;Client&gt;</code> 信息，获取所有订阅配置文件的客户端信息，并响应客户端 Hold 的请求。</li></ol><h2 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h2><p><a href="https://github.com/Tencent/spring-cloud-tencent/wiki/Spring-Cloud-Tencent-Rate-Limit-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3">官方文档</a></p><h3 id="1-第一步-引入依赖-2"><a href="#1-第一步-引入依赖-2" class="headerlink" title="1.第一步-引入依赖"></a>1.第一步-引入依赖</h3><h4 id="方式一：只引入spring-cloud-starter-tencent-polaris-ratelimit"><a href="#方式一：只引入spring-cloud-starter-tencent-polaris-ratelimit" class="headerlink" title="方式一：只引入spring-cloud-starter-tencent-polaris-ratelimit"></a>方式一：只引入<code>spring-cloud-starter-tencent-polaris-ratelimit</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-polaris-ratelimit&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="方式二：通过-spring-cloud-starter-tencent-all-引入-sct-所有-starters-2"><a href="#方式二：通过-spring-cloud-starter-tencent-all-引入-sct-所有-starters-2" class="headerlink" title="方式二：通过 spring-cloud-starter-tencent-all 引入 sct 所有 starters"></a><strong>方式二：通过 <code>spring-cloud-starter-tencent-all</code> 引入 sct 所有 starters</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-all&lt;/artifactId&gt;<br>    &lt;!-- 注意需要指定 type=pom--&gt;<br>    &lt;type&gt;pom&lt;/type&gt; <br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>如果使用 <code>Spring Cloud 2021</code> 版本，还需要添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-第二步-配置-2"><a href="#2-第二步-配置-2" class="headerlink" title="2.第二步-配置"></a>2.第二步-配置</h3><p>在您的 <code>bootstrap.yml</code> 配置文件中加入以下配置内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;application.name&#125;</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">polaris:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-string">grpc://$&#123;修改为第一步部署的</span> <span class="hljs-string">Polaris</span> <span class="hljs-string">服务地址&#125;:8091</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure><p><strong>配置列表</strong></p><table><thead><tr><th>配置项Key</th><th>默认值</th><th>是否必填</th><th>配置项说明</th></tr></thead><tbody><tr><td>spring.cloud.polaris.ratelimit.enabled</td><td>true</td><td>否</td><td>是否开启服务限流</td></tr><tr><td>spring.cloud.polaris.ratelimit.rejectRequestTips</td><td></td><td>否</td><td>自定义拒绝请求响应的文本内容</td></tr><tr><td>spring.cloud.polaris.ratelimit.rejectRequestTipsFilePath</td><td></td><td>否</td><td>自定义拒绝请求响应内容的文件地址，常用于返回 html 文件内容等。目前仅支持 classpath 下的文件，放在 resources 目录。</td></tr><tr><td>spring.cloud.polaris.ratelimit.rejectHttpCode</td><td>429(Too Many Request)</td><td>否</td><td>自定义拒绝请求响应的 Http 状态码</td></tr><tr><td>spring.cloud.polaris.ratelimit.maxQueuingTime</td><td>1000</td><td>否</td><td>匀速排队限流最大排队时间</td></tr></tbody></table><h3 id="4-第四步-控制台配置限流规则"><a href="#4-第四步-控制台配置限流规则" class="headerlink" title="4.第四步-控制台配置限流规则"></a>4.第四步-控制台配置限流规则</h3><p>可以在北极星控制台动态配置限流规则。</p><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p><a href="https://github.com/Tencent/spring-cloud-tencent/wiki/Spring-Cloud-Tencent-Circuitbreaker-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3">官方文档</a></p><p>故障实例熔断是常见的一种容错保护机制。故障实例熔断能实现主调方迅速自动屏蔽错误率高或故障的服务实例，并启动定时任务对熔断实例进行探活。在达到恢复条件后对其进行半开恢复。在半开恢复后，释放少量请求去进行真实业务探测。并根据真实业务探测结果去判断是否完全恢复正常。</p><p>如下图所示当被调端 <code>Instance3</code> 出现异常时，主调端会自动的把请求只打到 <code>Instance1</code>，<code>Instance2</code>，通过这种方式保证主调端能够正常的调用服务。</p><p><img src="https://user-images.githubusercontent.com/4991116/161234560-ad9fb472-29da-41ff-95fc-3c805cd86357.png" alt="image"></p><p><strong>熔断策略</strong></p><ul><li>故障比例熔断：当服务实例在上一个时间窗（默认1分钟）内，通过的请求量达到或超过最小请求阈值（默认10个），且错误率达到或超过故障比率阈值（默认<code>50%</code>），实例会进入隔离状态。故障比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 <code>0% - 100%</code>。</li><li>连续故障熔断：当实例在上一个时间窗（默认1分钟）内，连续失败的请求数达到或者超过连续故障阈值（默认10个），实例会进入隔离状态。</li><li>熔断隔离时间：默认隔离<code>30s</code>，支持可配置。</li></ul><h3 id="1-第一步-引入服务注册与发现和熔断依赖"><a href="#1-第一步-引入服务注册与发现和熔断依赖" class="headerlink" title="1.第一步-引入服务注册与发现和熔断依赖"></a>1.第一步-引入服务注册与发现和熔断依赖</h3><h4 id="1-主调方和被调方都引入服务注册与发现依赖"><a href="#1-主调方和被调方都引入服务注册与发现依赖" class="headerlink" title="1. 主调方和被调方都引入服务注册与发现依赖"></a>1. 主调方和被调方都引入服务注册与发现依赖</h4><p>因为熔断能力依赖服务发现能力，所以需要主调方和被调方都引入服务注册与发现依赖。</p><h5 id="1-1-引入-Spring-Cloud-Tencent-Discovery-Starter"><a href="#1-1-引入-Spring-Cloud-Tencent-Discovery-Starter" class="headerlink" title="1.1 引入 Spring Cloud Tencent Discovery Starter"></a>1.1 引入 Spring Cloud Tencent Discovery Starter</h5><p><strong>方式一：只引入<code>spring-cloud-starter-tencent-polaris-discovery</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-polaris-discovery&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>方式二：通过 <code>spring-cloud-starter-tencent-all</code> 引入 sct 所有 starters</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-all&lt;/artifactId&gt;<br>    &lt;!-- 注意需要指定 type=pom--&gt;<br>    &lt;type&gt;pom&lt;/type&gt; <br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>如果使用 <code>Spring Cloud 2021</code> 版本，还需要添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="2-主调方引入熔断依赖"><a href="#2-主调方引入熔断依赖" class="headerlink" title="2. 主调方引入熔断依赖"></a>2. 主调方引入熔断依赖</h4><p><strong>方式一：只引入 <code>spring-cloud-starter-tencent-polaris-circuitbreaker</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-polaris-circuitbreaker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>方式二：通过 <code>spring-cloud-starter-tencent-all</code> 引入 sct 所有 starters</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.tencent.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-tencent-all&lt;/artifactId&gt;<br>    &lt;!-- 注意需要指定 type=pom--&gt;<br>    &lt;type&gt;pom&lt;/type&gt; <br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-第二步：增加相关配置文件"><a href="#2-第二步：增加相关配置文件" class="headerlink" title="2.第二步：增加相关配置文件"></a>2.第二步：增加相关配置文件</h3><p>在您的 <code>bootstrap.yml</code> 配置文件中加入以下配置内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;application.name&#125;</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">polaris:</span><br>      <span class="hljs-attr">address:</span> <span class="hljs-string">grpc://$&#123;修改为第一步部署的</span> <span class="hljs-string">Polaris</span> <span class="hljs-string">服务地址&#125;:8091</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">loadbalancer:</span><br>      <span class="hljs-attr">configurations:</span> <span class="hljs-string">polaris</span> <span class="hljs-comment"># 2020.0.x SDK需要添加这个配置</span><br></code></pre></td></tr></table></figure><p><strong>配置列表</strong></p><table><thead><tr><th>配置项Key</th><th>默认值</th><th>是否必填</th><th>配置项说明</th></tr></thead><tbody><tr><td>spring.cloud.polaris.circuitbreaker.enabled</td><td>true</td><td>否</td><td>是否开启故障熔断</td></tr></tbody></table><h3 id="3-第三步-控制台配置熔断"><a href="#3-第三步-控制台配置熔断" class="headerlink" title="3.第三步-控制台配置熔断"></a>3.第三步-控制台配置熔断</h3><p>控制台提供了动态下发熔断配置的能力，如下图所示可以根据自身业务的实际场景调整参数。</p><p><img src="https://user-images.githubusercontent.com/4991116/161363924-49d8988b-cf25-485c-a5c4-075f1075f7d9.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>腾讯</tag>
      
      <tag>北极星</tag>
      
      <tag>polaris</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础入门</title>
    <link href="/20221214/7fcdb2119ba7.html"/>
    <url>/20221214/7fcdb2119ba7.html</url>
    
    <content type="html"><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><p><strong>编写代码 Hello world</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Hello world&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code><ul><li>通常放在一行代码的上方，或者一条语句的末尾，&#x3D;&#x3D;对该行代码说明&#x3D;&#x3D;</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，&#x3D;&#x3D;对该段代码做整体说明&#x3D;&#x3D;</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//变量的定义</span><br><span class="hljs-comment">//语法：数据类型  变量名 = 初始值</span><br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>&#x3D;&#x3D;通常在文件上方定义&#x3D;&#x3D;，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>&#x3D;&#x3D;通常在变量定义前加关键字const&#x3D;&#x3D;，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、宏常量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> day 7</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="hljs-string">&quot; 天&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//day = 8;  //报错，宏常量不可以修改</span><br><br><span class="hljs-comment">//2、const修饰变量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> month = <span class="hljs-number">12</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="hljs-string">&quot; 个月份&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//month = 24; //报错，常量是不可以修改的</span><br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是&#x3D;&#x3D;整数类型&#x3D;&#x3D;的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以&#x3D;&#x3D;统计数据类型所占内存大小&#x3D;&#x3D;</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">short</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span>) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>整型结论</strong>：&#x3D;&#x3D;short &lt; int &lt;&#x3D; long &lt;&#x3D; long long&#x3D;&#x3D;</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于&#x3D;&#x3D;表示小数&#x3D;&#x3D;</p><p>浮点型变量分为两种：</p><ol><li>单精度float</li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">float</span> f1 = <span class="hljs-number">3.14f</span>;<br><span class="hljs-type">double</span> d1 = <span class="hljs-number">3.14</span>;<br><br>cout &lt;&lt; f1 &lt;&lt; endl;<br>cout &lt;&lt; d1&lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(f1) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(d1) &lt;&lt; endl;<br><br><span class="hljs-comment">//科学计数法</span><br><span class="hljs-type">float</span> f2 = <span class="hljs-number">3e2</span>; <span class="hljs-comment">// 3 * 10 ^ 2 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;<br><br><span class="hljs-type">float</span> f3 = <span class="hljs-number">3e-2</span>;  <span class="hljs-comment">// 3 * 0.1 ^ 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用&#x3D;&#x3D;1个字节&#x3D;&#x3D;。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br>cout &lt;&lt; ch &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) &lt;&lt; endl;<br><br><span class="hljs-comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span><br><span class="hljs-comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span><br><br>cout &lt;&lt; (<span class="hljs-type">int</span>)ch &lt;&lt; endl;  <span class="hljs-comment">//查看字符a对应的ASCII码</span><br>ch = <span class="hljs-number">97</span>; <span class="hljs-comment">//可以直接用ASCII给字符型变量赋值</span><br>cout &lt;&lt; ch &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>&#x2F;</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>&#x2F;</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>&#x3D;</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>&#96;</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些&#x3D;&#x3D;不能显示出来的ASCII字符&#x3D;&#x3D;</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>*<em>\\*</em></td><td><strong>代表一个反斜线字符”&quot;</strong></td><td><strong>092</strong></td></tr><tr><td>&#39;</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;\\&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;\tHello&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br>cout &lt;&lt; str1 &lt;&lt; endl;<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>string str = <span class="hljs-string">&quot;hello world&quot;</span>;<br>cout &lt;&lt; str &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件&#x3D;&#x3D;#include&lt;string&gt;&#x3D;&#x3D;</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值</p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占&#x3D;&#x3D;1个字节&#x3D;&#x3D;大小</strong></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>cout &lt;&lt; flag &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>flag = <span class="hljs-literal">false</span>;<br>cout &lt;&lt; flag &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">bool</span>) &lt;&lt; endl; <span class="hljs-comment">//1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//整型输入</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; a;<br>cout &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">//浮点型输入</span><br><span class="hljs-type">double</span> d = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; d;<br>cout &lt;&lt; d &lt;&lt; endl;<br><br><span class="hljs-comment">//字符型输入</span><br><span class="hljs-type">char</span> ch = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; ch;<br>cout &lt;&lt; ch &lt;&lt; endl;<br><br><span class="hljs-comment">//字符串型输入</span><br>string str;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; str;<br>cout &lt;&lt; str &lt;&lt; endl;<br><br><span class="hljs-comment">//布尔类型输入</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; flag;<br>cout &lt;&lt; flag &lt;&lt; endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算</p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10 &#x2F; 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a&#x3D;2; b&#x3D;++a;</td><td>a&#x3D;3; b&#x3D;3;</td></tr><tr><td>++</td><td>后置递增</td><td>a&#x3D;2; b&#x3D;a++;</td><td>a&#x3D;3; b&#x3D;2;</td></tr><tr><td>–</td><td>前置递减</td><td>a&#x3D;2; b&#x3D;–a;</td><td>a&#x3D;1; b&#x3D;1;</td></tr><tr><td>–</td><td>后置递减</td><td>a&#x3D;2; b&#x3D;a–;</td><td>a&#x3D;1; b&#x3D;2;</td></tr></tbody></table><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//加减乘除</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b1 = <span class="hljs-number">3</span>;<br><br>cout &lt;&lt; a1 + b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 - b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 * b1 &lt;&lt; endl;<br>cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="hljs-comment">//两个整数相除结果依然是整数</span><br><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = <span class="hljs-number">20</span>;<br>cout &lt;&lt; a2 / b2 &lt;&lt; endl; <br><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span><br><br><br><span class="hljs-comment">//两个小数可以相除</span><br><span class="hljs-type">double</span> d1 = <span class="hljs-number">0.5</span>;<br><span class="hljs-type">double</span> d2 = <span class="hljs-number">0.25</span>;<br>cout &lt;&lt; d1 / d2 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//取模</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b1 = <span class="hljs-number">3</span>;<br><br>cout &lt;&lt; <span class="hljs-number">10</span> % <span class="hljs-number">3</span> &lt;&lt; endl;<br><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = <span class="hljs-number">20</span>;<br><br>cout &lt;&lt; a2 % b2 &lt;&lt; endl;<br><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span><br><br><span class="hljs-comment">//两个小数不可以取模</span><br><span class="hljs-type">double</span> d1 = <span class="hljs-number">3.14</span>;<br><span class="hljs-type">double</span> d2 = <span class="hljs-number">1.1</span>;<br><br><span class="hljs-comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//递增</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//后置递增</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>a++; <span class="hljs-comment">//等价于a = a + 1</span><br>cout &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">//前置递增</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br>++b;<br>cout &lt;&lt; b &lt;&lt; endl; <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">//区别</span><br><span class="hljs-comment">//前置递增先对变量进行++，再计算表达式</span><br><span class="hljs-type">int</span> a2 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b2 = ++a2 * <span class="hljs-number">10</span>;<br>cout &lt;&lt; b2 &lt;&lt; endl;<br><br><span class="hljs-comment">//后置递增先计算表达式，后对变量进行++</span><br><span class="hljs-type">int</span> a3 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b3 = a3++ * <span class="hljs-number">10</span>;<br>cout &lt;&lt; b3 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;2; b&#x3D;3;</td><td>a&#x3D;2; b&#x3D;3;</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a&#x3D;0; a+&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a&#x3D;5; a-&#x3D;3;</td><td>a&#x3D;2;</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a&#x3D;2; a*&#x3D;2;</td><td>a&#x3D;4;</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a&#x3D;4; a&#x2F;&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>%&#x3D;</td><td>模等于</td><td>a&#x3D;3; a%2;</td><td>a&#x3D;1;</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//赋值运算符</span><br><br><span class="hljs-comment">// =</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">100</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// +=</span><br>a = <span class="hljs-number">10</span>;<br>a += <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a + 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// -=</span><br>a = <span class="hljs-number">10</span>;<br>a -= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a - 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// *=</span><br>a = <span class="hljs-number">10</span>;<br>a *= <span class="hljs-number">2</span>; <span class="hljs-comment">// a = a * 2</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// /=</span><br>a = <span class="hljs-number">10</span>;<br>a /= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a / 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-comment">// %=</span><br>a = <span class="hljs-number">10</span>;<br>a %= <span class="hljs-number">2</span>;  <span class="hljs-comment">// a = a % 2;</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>4 &#x3D;&#x3D; 3</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>4 !&#x3D; 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4 &lt;&#x3D; 3</td><td>0</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4 &gt;&#x3D; 1</td><td>1</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br>cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="hljs-comment">// 0 </span><br><br>cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br>cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：C和C++ 语言的比较运算中， &#x3D;&#x3D;“真”用数字“1”来表示， “假”用数字“0”来表示。&#x3D;&#x3D;</p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 非</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; !a &lt;&lt; endl; <span class="hljs-comment">// 0</span><br><br>cout &lt;&lt; !!a &lt;&lt; endl; <span class="hljs-comment">// 1</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逻辑运算符  --- 与</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 1</span><br><br>a = <span class="hljs-number">10</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 0 </span><br><br>a = <span class="hljs-number">0</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="hljs-comment">// 0</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：逻辑&#x3D;&#x3D;与&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同真为真，其余为假&#x3D;&#x3D;</p></blockquote><p><strong>示例3：</strong>逻辑或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//逻辑运算符  --- 或</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 1</span><br><br>a = <span class="hljs-number">10</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 1 </span><br><br>a = <span class="hljs-number">0</span>;<br>b = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="hljs-comment">// 0</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>逻辑&#x3D;&#x3D;或&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同假为假，其余为真&#x3D;&#x3D;</p></blockquote><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C&#x2F;C++支持最基本的三种程序运行结构：&#x3D;&#x3D;顺序结构、选择结构、循环结构&#x3D;&#x3D;</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p><p><img src="/assets/clip_image002.png" alt="img"></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//选择结构-单行if语句</span><br><span class="hljs-comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span><br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; score;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;<br><br><span class="hljs-comment">//if语句</span><br><span class="hljs-comment">//注意事项，在if判断语句后面，不要加分号</span><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li></ol><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li></ol><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;<br><br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">700</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了北大&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">650</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了清华&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了人大&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">500</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">400</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><br>c = a &gt; b ? a : b;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-comment">//C++中三目运算符返回的是变量,可以继续赋值</span><br><br>(a &gt; b ? a : b) = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">switch</span>(表达式)<br><br>&#123;<br><br><span class="hljs-keyword">case</span> 结果<span class="hljs-number">1</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> 结果<span class="hljs-number">2</span>：执行语句;<span class="hljs-keyword">break</span>;<br><br>...<br><br><span class="hljs-keyword">default</span>:执行语句;<span class="hljs-keyword">break</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//请给电影评分 </span><br><span class="hljs-comment">//10 ~ 9   经典   </span><br><span class="hljs-comment">// 8 ~ 7   非常好</span><br><span class="hljs-comment">// 6 ~ 5   一般</span><br><span class="hljs-comment">// 5分以下 烂片</span><br><br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;请给电影打分&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; score;<br><br><span class="hljs-keyword">switch</span> (score)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;经典&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;非常好&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;一般&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;烂片&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p><p><strong>解释：</strong>&#x3D;&#x3D;只要循环条件的结果为真，就执行循环语句&#x3D;&#x3D;</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;<br>num++;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于&#x3D;&#x3D;do…while会先执行一次循环语句&#x3D;&#x3D;，再判断循环条件</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span><br>&#123;<br>cout &lt;&lt; num &lt;&lt; endl;<br>num++;<br><br>&#125; <span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>);<br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>详解：</strong></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//外层循环执行1次，内层循环执行1轮</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出&#x3D;&#x3D;选择结构&#x3D;&#x3D;或者&#x3D;&#x3D;循环结构&#x3D;&#x3D;</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//1、在switch 语句中使用break</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;1、普通&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;2、中等&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;3、困难&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><br>cin &gt;&gt; num;<br><br><span class="hljs-keyword">switch</span> (num)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//2、在循环语句中用break</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出循环语句</span><br>&#125;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//在嵌套循环语句中使用break，退出内层循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (j == <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在&#x3D;&#x3D;循环语句&#x3D;&#x3D;中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;1&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">goto</span> FLAG;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;2&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;3&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;4&quot;</span> &lt;&lt; endl;<br><br>FLAG:<br><br>cout &lt;&lt; <span class="hljs-string">&quot;5&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个&#x3D;&#x3D;数据元素都是相同的数据类型&#x3D;&#x3D;</p><p><strong>特点2：</strong>数组是由&#x3D;&#x3D;连续的内存&#x3D;&#x3D;位置组成的</p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li><li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li></ol><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//定义方式1</span><br><span class="hljs-comment">//数据类型 数组名[元素个数];</span><br><span class="hljs-type">int</span> score[<span class="hljs-number">10</span>];<br><br><span class="hljs-comment">//利用下标赋值</span><br>score[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>score[<span class="hljs-number">1</span>] = <span class="hljs-number">99</span>;<br>score[<span class="hljs-number">2</span>] = <span class="hljs-number">85</span>;<br><br><span class="hljs-comment">//利用下标输出</span><br>cout &lt;&lt; score[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; score[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>cout &lt;&lt; score[<span class="hljs-number">2</span>] &lt;&lt; endl;<br><br><br><span class="hljs-comment">//第二种定义方式</span><br><span class="hljs-comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span><br><span class="hljs-comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span><br><span class="hljs-type">int</span> score2[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">100</span>, <span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-comment">//逐个输出</span><br><span class="hljs-comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span><br><br><span class="hljs-comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; score2[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//定义方式3</span><br><span class="hljs-comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span><br><span class="hljs-type">int</span> score3[] = &#123; <span class="hljs-number">100</span>,<span class="hljs-number">90</span>,<span class="hljs-number">80</span>,<span class="hljs-number">70</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; score3[i] &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//数组名用途</span><br><span class="hljs-comment">//1、可以获取整个数组占用内存空间大小</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br><span class="hljs-comment">//2、可以通过数组名获取到数组首地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)arr &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;arr[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br><span class="hljs-comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span><br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="/assets/1541905327273.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">9</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br>    <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li></ol><blockquote><p>建议：以上4种定义方式，利用&#x3D;&#x3D;第二种更加直观，提高代码的可读性&#x3D;&#x3D;</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//方式1  </span><br><span class="hljs-comment">//数组类型 数组名 [行数][列数]</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>;<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">6</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br>cout &lt;&lt; arr[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//方式2 </span><br><span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span><br><span class="hljs-type">int</span> arr2[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;;<br><br><span class="hljs-comment">//方式3</span><br><span class="hljs-comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br><span class="hljs-type">int</span> arr3[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;; <br><br><span class="hljs-comment">//方式4 </span><br><span class="hljs-comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span><br><span class="hljs-type">int</span> arr4[][<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span> &#125;;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//二维数组数组名</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><br><span class="hljs-comment">//地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> scores[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] =<br>&#123;<br>&#123;<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>&#125;,<br>&#123;<span class="hljs-number">90</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>&#125;,<br>&#123;<span class="hljs-number">60</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>&#125;,<br>&#125;;<br><br>string names[<span class="hljs-number">3</span>] = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br>sum += scores[i][j];<br>&#125;<br>cout &lt;&lt; names[i] &lt;&lt; <span class="hljs-string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型</p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句</p><p>5、return 表达式</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">返回值类型 函数名 （参数列表）<br>&#123;<br><br>       函数体语句<br><br>       <span class="hljs-keyword">return</span>表达式<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> <span class="hljs-comment">//定义中的num1,num2称为形式参数，简称形参</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = num1 + num2;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//调用add函数</span><br><span class="hljs-type">int</span> sum = <span class="hljs-built_in">add</span>(a, b);<span class="hljs-comment">//调用时的a，b称为实际参数，简称实参</span><br>cout &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br>a = <span class="hljs-number">100</span>;<br>b = <span class="hljs-number">100</span>;<br><br>sum = <span class="hljs-built_in">add</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，&#x3D;&#x3D;如果形参发生，并不会影响实参&#x3D;&#x3D;</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;交换前：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br><br><span class="hljs-type">int</span> temp = num1;<br>num1 = num2;<br>num2 = temp;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;交换后：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;<br><br><span class="hljs-comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">swap</span>(a, b);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数常见样式</span><br><span class="hljs-comment">//1、 无参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span><br>cout &lt;&lt; <span class="hljs-string">&quot;this is test01&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//test01(); 函数调用</span><br>&#125;<br><br><span class="hljs-comment">//2、 有参无返</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test02&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//3、无参有返</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test03 &quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-comment">//4、有参有返</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test04</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is test04 &quot;</span> &lt;&lt; endl;<br><span class="hljs-type">int</span> sum = a + b;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//声明可以多次，定义只能一次</span><br><span class="hljs-comment">//声明</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-comment">//定义</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><br>cout &lt;&lt; <span class="hljs-built_in">max</span>(a, b) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件</li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.h文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//实现两个数字交换的函数声明</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//swap.cpp文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//main函数文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;swap.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><span class="hljs-built_in">swap</span>(a, b);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p></li><li><p>可以利用指针变量保存地址</p></li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//1、指针的定义</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//定义整型变量a</span><br><br><span class="hljs-comment">//指针定义语法： 数据类型 * 变量名 ;</span><br><span class="hljs-type">int</span> * p;<br><br><span class="hljs-comment">//指针变量赋值</span><br>p = &amp;a; <span class="hljs-comment">//指针指向变量a的地址</span><br>cout &lt;&lt; &amp;a &lt;&lt; endl; <span class="hljs-comment">//打印数据a的地址</span><br>cout &lt;&lt; p &lt;&lt; endl;  <span class="hljs-comment">//打印指针变量p</span><br><br><span class="hljs-comment">//2、指针的使用</span><br><span class="hljs-comment">//通过*操作指针变量指向的内存</span><br>cout &lt;&lt; <span class="hljs-string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> * p;<br>p = &amp;a; <span class="hljs-comment">//指针指向数据a的地址</span><br><br>cout &lt;&lt; *p &lt;&lt; endl; <span class="hljs-comment">//* 解引用</span><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(p) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span> *) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span> *) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">double</span> *) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//指针变量p指向内存地址编号为0的空间</span><br><span class="hljs-type">int</span> * p = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//访问空指针报错 </span><br><span class="hljs-comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span><br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//指针变量p指向内存地址编号为0x1100的空间</span><br><span class="hljs-type">int</span> * p = (<span class="hljs-type">int</span> *)<span class="hljs-number">0x1100</span>;<br><br><span class="hljs-comment">//访问野指针报错 </span><br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * p1 = &amp;a; <br>p1 = &amp;b; <span class="hljs-comment">//正确</span><br><span class="hljs-comment">//*p1 = 100;  报错</span><br><br><br><span class="hljs-comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span><br><span class="hljs-type">int</span> * <span class="hljs-type">const</span> p2 = &amp;a;<br><span class="hljs-comment">//p2 = &amp;b; //错误</span><br>*p2 = <span class="hljs-number">100</span>; <span class="hljs-comment">//正确</span><br><br>    <span class="hljs-comment">//const既修饰指针又修饰常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p3 = &amp;a;<br><span class="hljs-comment">//p3 = &amp;b; //错误</span><br><span class="hljs-comment">//*p3 = 100; //错误</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-type">int</span> * p = arr;  <span class="hljs-comment">//指向数组的指针</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-comment">//利用指针遍历数组</span><br>cout &lt;&lt; *p &lt;&lt; endl;<br>p++;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap1</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b; <br>b = temp;<br>&#125;<br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> * p1, <span class="hljs-type">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp = *p1;<br>*p1 = *p2;<br>*p2 = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">swap1</span>(a, b); <span class="hljs-comment">// 值传递不会改变实参</span><br><br><span class="hljs-built_in">swap2</span>(&amp;a, &amp;b); <span class="hljs-comment">//地址传递会改变实参</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] &#x3D; { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//冒泡排序函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> * arr, <span class="hljs-type">int</span> len)</span>  <span class="hljs-comment">//int * arr 也可以写为int arr[]</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//打印数组函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>);<br><br><span class="hljs-built_in">bubbleSort</span>(arr, len);<br><br><span class="hljs-built_in">printArray</span>(arr, len);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户&#x3D;&#x3D;自定义的数据类型&#x3D;&#x3D;，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 &#x3D; { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;stu3; <span class="hljs-comment">//结构体变量创建方式3 </span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//结构体变量创建方式1</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu1; <span class="hljs-comment">//struct 关键字可以省略</span><br><br>stu1.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>stu1.age = <span class="hljs-number">18</span>;<br>stu1.score = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; endl;<br><br><span class="hljs-comment">//结构体变量创建方式2</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu2 = &#123; <span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; endl;<br><br><br>stu3.name = <span class="hljs-string">&quot;王五&quot;</span>;<br>stu3.age = <span class="hljs-number">18</span>;<br>stu3.score = <span class="hljs-number">80</span>;<br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//结构体数组</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> arr[<span class="hljs-number">3</span>]=<br>&#123;<br>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">80</span> &#125;,<br>&#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">60</span> &#125;,<br>&#123;<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">70</span> &#125;<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>, &#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> * p = &amp;stu;<br><br>p-&gt;score = <span class="hljs-number">80</span>; <span class="hljs-comment">//指针通过 -&gt; 操作符可以访问成员</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//教师结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">teacher</span><br>&#123;<br>    <span class="hljs-comment">//成员列表</span><br><span class="hljs-type">int</span> id; <span class="hljs-comment">//职工编号</span><br>string name;  <span class="hljs-comment">//教师姓名</span><br><span class="hljs-type">int</span> age;   <span class="hljs-comment">//教师年龄</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> stu; <span class="hljs-comment">//子结构体 学生</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">teacher</span> t1;<br>t1.id = <span class="hljs-number">10000</span>;<br>t1.name = <span class="hljs-string">&quot;老王&quot;</span>;<br>t1.age = <span class="hljs-number">40</span>;<br><br>t1.stu.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>t1.stu.age = <span class="hljs-number">18</span>;<br>t1.stu.score = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="hljs-string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="hljs-string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(student stu )</span></span><br><span class="hljs-function"></span>&#123;<br>stu.age = <span class="hljs-number">28</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent2</span><span class="hljs-params">(student *stu)</span></span><br><span class="hljs-function"></span>&#123;<br>stu-&gt;age = <span class="hljs-number">28</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span>&#125;;<br><span class="hljs-comment">//值传递</span><br><span class="hljs-built_in">printStudent</span>(stu);<br>cout &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br><br>cout &lt;&lt; endl;<br><br><span class="hljs-comment">//地址传递</span><br><span class="hljs-built_in">printStudent2</span>(&amp;stu);<br>cout &lt;&lt; <span class="hljs-string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生结构体定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-comment">//成员列表</span><br>string name;  <span class="hljs-comment">//姓名</span><br><span class="hljs-type">int</span> age;      <span class="hljs-comment">//年龄</span><br><span class="hljs-type">int</span> score;    <span class="hljs-comment">//分数</span><br>&#125;;<br><br><span class="hljs-comment">//const使用场景</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printStudent</span><span class="hljs-params">(<span class="hljs-type">const</span> student *stu)</span> <span class="hljs-comment">//加const防止函数体中的误操作</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="hljs-string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>student stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">100</span> &#125;;<br><br><span class="hljs-built_in">printStudent</span>(&amp;stu);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span><br>&#123;<br>string name;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span><br>&#123;<br>string name;<br>Student sArray[<span class="hljs-number">5</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">allocateSpace</span><span class="hljs-params">(Teacher tArray[] , <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>string tName = <span class="hljs-string">&quot;教师&quot;</span>;<br>string sName = <span class="hljs-string">&quot;学生&quot;</span>;<br>string nameSeed = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>tArray[i].name = tName + nameSeed[i];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>tArray[i].sArray[j].name = sName + nameSeed[j];<br>tArray[i].sArray[j].score = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">61</span> + <span class="hljs-number">40</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printTeachers</span><span class="hljs-params">(Teacher tArray[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; tArray[i].name &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="hljs-string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">//随机数种子 头文件 #include &lt;ctime&gt;</span><br><br>Teacher tArray[<span class="hljs-number">3</span>]; <span class="hljs-comment">//老师数组</span><br><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(tArray) / <span class="hljs-built_in">sizeof</span>(Teacher);<br><br><span class="hljs-built_in">allocateSpace</span>(tArray, len); <span class="hljs-comment">//创建数据</span><br><br><span class="hljs-built_in">printTeachers</span>(tArray, len); <span class="hljs-comment">//打印数据</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//英雄结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hero</span><br>&#123;<br>string name;<br><span class="hljs-type">int</span> age;<br>string sex;<br>&#125;;<br><span class="hljs-comment">//冒泡排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(hero arr[] , <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[j].age &gt; arr[j + <span class="hljs-number">1</span>].age)<br>&#123;<br>hero temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//打印数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printHeros</span><span class="hljs-params">(hero arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="hljs-string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hero</span> arr[<span class="hljs-number">5</span>] =<br>&#123;<br>&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;女&quot;</span>&#125;,<br>&#125;;<br><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(hero); <span class="hljs-comment">//获取数组元素个数</span><br><br><span class="hljs-built_in">bubbleSort</span>(arr, len); <span class="hljs-comment">//排序</span><br><br><span class="hljs-built_in">printHeros</span>(arr, len); <span class="hljs-comment">//打印</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringCloud】Ribbon组成和负载均衡规则</title>
    <link href="/20221128/a49b129b0c4a.html"/>
    <url>/20221128/a49b129b0c4a.html</url>
    
    <content type="html"><![CDATA[<h3 id="Ribbon饥饿加载"><a href="#Ribbon饥饿加载" class="headerlink" title="Ribbon饥饿加载"></a>Ribbon饥饿加载</h3><blockquote><p>默认情况下Ribbon是懒加载的。当服务起动好之后，第一次请求是非常慢的，第二次之后就快很多。</p></blockquote><h4 id="解决方式：开启饥饿加载"><a href="#解决方式：开启饥饿加载" class="headerlink" title="解决方式：开启饥饿加载"></a>解决方式：开启饥饿加载</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">ribbon:</span><br> <span class="hljs-attr">eager-load:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启饥饿加载</span><br>  <span class="hljs-attr">clients:</span> <span class="hljs-string">server-1,server-2,server-3</span> <span class="hljs-comment">#为哪些服务的名称开启饥饿加载,多个用逗号分隔</span><br></code></pre></td></tr></table></figure><h3 id="Ribbon组成"><a href="#Ribbon组成" class="headerlink" title="Ribbon组成"></a>Ribbon组成</h3><p>| 接口     | 作用  | 默认值  |<br>| ———— | ———— | ———— |<br>| <code>IclientConfig</code>  | 读取配置  | <code>DefaultClientConfigImpl</code>  |<br>| <code>IRule</code>     | 负载均衡规则，选择实例   | <code>ZoneAvoidanceRule</code>  |<br>| <code>IPing</code>  | 筛选掉ping不通的实例   | <code>DumyPing</code>（该类什么不干，认为每个实例都可用，都能ping通）  |<br>| <code>ServerList&lt;Server&gt;</code>  | 交给Ribbon的实例列表   | <strong>Ribbon:</strong><code>ConfigurationBasedServerList</code><br><strong>Spring Cloud Alibaba:</strong><code>NacosServerList</code> |<br>| <code>ServerListFilter&lt;Server&gt;</code>  | 过滤掉不符合条件的实例   | <code>ZonePreferenceServerListFilter</code>  |<br>| <code>ILoadBalancer</code> | Ribbon的入口  | <code>ZoneAwareLoadBalancer</code>  |<br>| <code>ServerListUpdater</code>  | 更新交给Ribbon的List的策略  | <code>PollingServerListUpdater</code>  |</p><p><strong>这里的每一项都可以自定义</strong><br><code>IclientConfig</code>Ribbon支持非常灵活的配置就是由该组件提供的<br><code>IRule</code>为Ribbon提供规则，从而选择实例、该组件是最核心的组件<br><strong>举例：</strong><br>代码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonRuleConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">ribbonRulr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>    &#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IPing <span class="hljs-title function_">iPing</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PingUrl</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置属性方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">&lt;clientName&gt;:</span><br> <span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">NFLoadBalancerClassName:</span> <span class="hljs-comment">#ILoadBalancer该接口实现类</span><br>  <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-comment">#IRule该接口实现类</span><br>  <span class="hljs-attr">NFLoadBalancerPingClassName:</span> <span class="hljs-comment">#Iping该接口实现类</span><br>  <span class="hljs-attr">NIWSServerListClassName:</span> <span class="hljs-comment">#ServerList该接口实现类</span><br>  <span class="hljs-attr">NIWSServerListFilterClassName:</span> <span class="hljs-comment">#ServiceListFilter该接口实现类</span><br></code></pre></td></tr></table></figure><p><strong>在这些属性中定义的类优先于使用<code>@RibbonClient(configuration=RibbonConfig.class)</code>Spring 定义的bean 以及由Spring Cloud Netflix提供的默认值。描述：配置文件中定义ribbon优先代码定义</strong></p><h3 id="Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除"><a href="#Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除" class="headerlink" title="Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除"></a>Ribbon负载均衡的八种算法，其中<del><code>ResponseTimeWeightedRule</code></del>已废除</h3><table><thead><tr><th>规则名称</th><th>特点</th></tr></thead><tbody><tr><td><code>AvailabilityFilteringRule</code></td><td>过滤掉一直连接失败的被标记为circuit tripped（电路跳闸）的后端Service，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤Server的逻辑，其实就是检查status的记录的各个Server的运行状态</td></tr><tr><td><code>BestAvailableRule</code></td><td>选择一个最小的并发请求的Server，逐个考察Server，如果Server被tripped了，则跳过</td></tr><tr><td><code>RandomRule</code></td><td>随机选择一个Server</td></tr><tr><td><del><code>ResponseTimeWeightedRule</code></del></td><td>已废弃，作用同WeightedResponseTimeRule</td></tr><tr><td><code>RetryRule</code></td><td>对选定的负责均衡策略机上充值机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的Server</td></tr><tr><td><code>RoundRobinRule</code></td><td>轮询选择，轮询index，选择index对应位置Server</td></tr><tr><td><code>WeightedResponseTimeRule</code></td><td>根据相应时间加权，相应时间越长，权重越小，被选中的可能性越低</td></tr><tr><td><code>ZoneAvoidanceRule</code></td><td>（默认是这个）负责判断Server所Zone的性能和Server的可用性选择Server，在没有Zone的环境下，类似于轮询（<code>RoundRobinRule</code>）</td></tr></tbody></table><h3 id="实现负载均衡-lt-细粒度-gt-配置-随机"><a href="#实现负载均衡-lt-细粒度-gt-配置-随机" class="headerlink" title="实现负载均衡&lt;细粒度&gt;配置-随机"></a>实现负载均衡&lt;细粒度&gt;配置-随机</h3><h4 id="方式一：JAVA代码方式"><a href="#方式一：JAVA代码方式" class="headerlink" title="方式一：JAVA代码方式"></a>方式一：JAVA代码方式</h4><p>首先定义RestTemplate，并且添加注解<code>@LoadBalanced</code>，这样RestTemplate就实现了负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//template.getMessageConverters().set(1, new StringHttpMessageConverter(StandardCharsets.UTF_8));//解决中文乱码</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在SpringBootApplication主类下添加配置类。该类主要作用于为哪个服务做负载均衡。默认的是轮训</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@RibbonClient(name = &quot;$&#123;服务名称&#125;&quot;, configuration = GoodsRibbonRuleConfig.class)</span><span class="hljs-comment">//configuration: 指向负载均衡规则的配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodsRibbonConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加Ribbon的配置类，注意该类必须配置在<code>@SpringBootApplication</code>主类以外的包下。不然的话所有的服务都会按照这个规则来实现。会被所有的RibbonClient共享。主要是主类的主上下文和Ribbon的子上下文起冲突了。父子上下文不能重叠。相关连接：<a href="https://blog.csdn.net/qq_32588349/article/details/52097943">https://blog.csdn.net/qq_32588349/article/details/52097943</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodsRibbonRuleConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">ribbonRulr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者使用自定义注解排除该类</p><h4 id="方式一：配置属性方式"><a href="#方式一：配置属性方式" class="headerlink" title="方式一：配置属性方式"></a>方式一：配置属性方式</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server-1:</span> <span class="hljs-comment"># 服务名称 Service-ID</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-comment"># 属性配置方式【推荐】</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment">#  配置文件配置负载均衡算法-我这里使用的是自定义的Ribbon的负载均衡算法，默认</span><br></code></pre></td></tr></table></figure><p><strong>优先级：配置（不会影响其他服务）&gt;(大于) 硬编码（类得写在SpringBoot启动类包外，不然会影响其他服务）</strong></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><table><thead><tr><th>配置方式</th><th>有点</th><th>缺点</th></tr></thead><tbody><tr><td>代码配置</td><td>基于代码，更加灵活</td><td>有坑（父子上下文）<br> 线上修改得重新打包，发布</td></tr><tr><td>属性配置</td><td>易上手 配置更加直观 <br> 线上修改无需重新打包，发布 <br> <strong>优先级更高</strong></td><td>极端场景下没有配置配置方式灵活</td></tr></tbody></table><h3 id="实现负载均衡-lt-全局-gt-配置-随机"><a href="#实现负载均衡-lt-全局-gt-配置-随机" class="headerlink" title="实现负载均衡&lt;全局&gt;配置-随机"></a>实现负载均衡&lt;全局&gt;配置-随机</h3><h4 id="方式一：Ribbon的配置类定义在主类下"><a href="#方式一：Ribbon的配置类定义在主类下" class="headerlink" title="方式一：Ribbon的配置类定义在主类下"></a>方式一：Ribbon的配置类定义在主类下</h4><p><del>让ComponentScan上下文重叠（<strong>强烈不建议使用</strong>）</del></p><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@RibbonClients(defaultConfiguration = GoodsRibbonRuleConfig.class)</span><span class="hljs-comment">//Ribbon负载均衡全局粒度配置（所有服务都按照这个配置）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RibbonConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Ribbon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringCloud】Feign组成和配置</title>
    <link href="/20221128/74c687698b2d.html"/>
    <url>/20221128/74c687698b2d.html</url>
    
    <content type="html"><![CDATA[<h3 id="Feign的组成"><a href="#Feign的组成" class="headerlink" title="Feign的组成"></a>Feign的组成</h3><table><thead><tr><th>接口</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td><code>Feign.Builder</code></td><td>Feign的入口</td><td><code>Feign.Builder</code></td></tr><tr><td><code>Client</code></td><td>Feign底层用什么去请求</td><td><strong>和Ribbon配合时：</strong><code>LoadBalancerFeignClient</code><br> <strong>不和Ribbon配合时：</strong><code>Fgien.Client.Default</code></td></tr><tr><td><code>Contract</code></td><td>契约，注解支持</td><td><code>SpringMVCContract</code></td></tr><tr><td><code>Encoder</code></td><td>解码器，用于将独享转换成HTTP请求消息体</td><td><code>SpringEncoder</code></td></tr><tr><td><code>Decoder</code></td><td>编码器，将相应消息体转成对象</td><td><code>ResponseEntityDecoder</code></td></tr><tr><td><code>Logger</code></td><td>日志管理器</td><td><code>Slf4jLogger</code></td></tr><tr><td><code>RequestInterceptor</code></td><td>用于为每个请求添加通用逻辑（拦截器，例子：比如想给每个请求都带上heared）</td><td>无</td></tr></tbody></table><h3 id="Feign的日记级别"><a href="#Feign的日记级别" class="headerlink" title="Feign的日记级别"></a>Feign的日记级别</h3><table><thead><tr><th>日志级别</th><th>打印内容</th></tr></thead><tbody><tr><td>NONE（默认）</td><td>不记录任何日志</td></tr><tr><td>BASIC</td><td>仅记录请求方法，URL，响应状态代码以及执行时间（适合生产环境）</td></tr><tr><td>HEADERS</td><td>记录BASIC级别的基础上，记录请求和响应的header</td></tr><tr><td>FULL</td><td>记录请求和弦ineader，body和元数据</td></tr></tbody></table><h3 id="首先如何整合Feign"><a href="#首先如何整合Feign" class="headerlink" title="首先如何整合Feign"></a>首先如何整合Feign</h3><p><strong>遵循SpringBoot的三板斧</strong><br><strong>第一步：加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二步：写注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">//在启动类上加</span><br></code></pre></td></tr></table></figure><p><strong>第三步：写配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#没有配置</span><br></code></pre></td></tr></table></figure><hr><h3 id="如何给Feign添加日志级别"><a href="#如何给Feign添加日志级别" class="headerlink" title="如何给Feign添加日志级别"></a>如何给Feign添加日志级别</h3><h4 id="细粒度"><a href="#细粒度" class="headerlink" title="细粒度"></a>细粒度</h4><p><strong>方式一：代码实现</strong><br>第一步：添加Feign配置类，可以添加在主类下，但是不用添加<code>@Configuration</code>。如果添加了<code>@Configuration</code>而且又放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；如果一定添加<code>@Configuration</code>，就放在主类加载之外的包。建议还是不用加<code>@Configuration</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">Logger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：给<code>@FeignClient</code>添加配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@FeignClient configuration = GoodsFeignConfig.class 细粒度配置，指定配置类</span><br><span class="hljs-meta">@FeignClient(name = &quot;goods&quot;, configuration = FeignConfig.class)</span><br></code></pre></td></tr></table></figure><p>第四步：写配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.xxx.xxx.FeignAPI:</span> <span class="hljs-string">DEBUG</span> <span class="hljs-comment">#需要将FeignClient接口全路径写上# 开启日志 格式为logging.level.+Feign客户端路径</span><br></code></pre></td></tr></table></figure><p><strong>方式二：配置属性实现</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-comment">#想要调用的微服务名称</span><br>      <span class="hljs-attr">server-1:</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span><br></code></pre></td></tr></table></figure><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p><strong>方式一：代码实现</strong><br><del>添加了<code>@Configuration</code>放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；让父子上下文ComponentScan重叠（强烈不建议）</del><br><strong>唯一正确方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在启动类上为@EnableFeignClients注解添加defaultConfiguration配置</span><br><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = FeignConfig.class)</span><br></code></pre></td></tr></table></figure><p><strong>方式二：配置属性实现</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-comment">#将调用的微服务名称改成default就配置成全局的了</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span><br></code></pre></td></tr></table></figure><h3 id="Feign支持的配置项"><a href="#Feign支持的配置项" class="headerlink" title="Feign支持的配置项"></a>Feign支持的配置项</h3><h4 id="代码方式"><a href="#代码方式" class="headerlink" title="代码方式"></a>代码方式</h4><table><thead><tr><th>配置项</th><th>作用</th></tr></thead><tbody><tr><td><code>Logger.Level</code></td><td>指定日志级别</td></tr><tr><td><code>Retryer</code></td><td>指定重试策略</td></tr><tr><td><code>ErrorDecoder</code></td><td>指定错误解码器</td></tr><tr><td><code>Request.Options</code></td><td>超时时间</td></tr><tr><td><code>Collection&lt;RequestInterceptor&gt;</code></td><td>拦截器</td></tr><tr><td><code>SetterFactory</code></td><td>用于设置Hystrix的配置属性，Fgien整合Hystrix才会用</td></tr></tbody></table><h4 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">feignName:</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">5000</span>  <span class="hljs-comment"># 相当于Request.Optionsn 连接超时时间</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">5000</span>     <span class="hljs-comment"># 相当于Request.Options 读取超时时间</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">full</span>     <span class="hljs-comment"># 配置Feign的日志级别，相当于代码配置方式中的Logger</span><br>        <span class="hljs-attr">errorDecoder:</span> <span class="hljs-string">com.example.SimpleErrorDecoder</span>  <span class="hljs-comment"># Feign的错误解码器，相当于代码配置方式中的ErrorDecoder</span><br>        <span class="hljs-attr">retryer:</span> <span class="hljs-string">com.example.SimpleRetryer</span>  <span class="hljs-comment"># 配置重试，相当于代码配置方式中的Retryer</span><br>        <span class="hljs-attr">requestInterceptors:</span> <span class="hljs-comment"># 配置拦截器，相当于代码配置方式中的RequestInterceptor</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">com.example.FooRequestInterceptor</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">com.example.BarRequestInterceptor</span><br><span class="hljs-comment"># 是否对404错误解码</span><br>        <span class="hljs-attr">decode404:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">encode:</span> <span class="hljs-string">com.example.SimpleEncoder</span><br><span class="hljs-attr">decoder:</span> <span class="hljs-string">com.example.SimpleDecoder</span><br><span class="hljs-attr">contract:</span> <span class="hljs-string">com.example.SimpleContract</span><br></code></pre></td></tr></table></figure><p><strong>Feign还支持对请求和响应进行GZIP压缩，以提高通信效率，配置方式如下：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 配置请求GZIP压缩</span><br><span class="hljs-string">feign.compression.request.enabled=true</span><br><span class="hljs-comment"># 配置响应GZIP压缩</span><br><span class="hljs-string">feign.compression.response.enabled=true</span><br><span class="hljs-comment"># 配置压缩支持的MIME TYPE</span><br><span class="hljs-string">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class="hljs-comment"># 配置压缩数据大小的下限</span><br><span class="hljs-string">feign.compression.request.min-request-size=2048</span><br></code></pre></td></tr></table></figure><h3 id="Ribbon配置-VS-Feign配置"><a href="#Ribbon配置-VS-Feign配置" class="headerlink" title="Ribbon配置 VS Feign配置"></a>Ribbon配置 VS Feign配置</h3><table><thead><tr><th>粒度</th><th>Ribbon</th><th>Feign</th></tr></thead><tbody><tr><td>代码局部</td><td><code> @RibbonClient(configuration=RibbonConfig.class)</code>，<code>RibbonConfig</code>类必须加<code>@Configuration</code>,且必须放在父上下文无法扫到的包下</td><td><code>@FeignClient(configuration=FeignConfig.class)</code>，<code>FeignConfig</code>类的<code>@Configuration</code>可以不加（可选），如果有，必须放在父上下文无法扫到的包下</td></tr><tr><td>代码全局</td><td><code>@RibbonClients(defaultConfigurtion=RibbonConfig.class)</code></td><td><code>@EnableFeignClients(defaultConfiguration = FeignConfig.class)</code><br>…</td></tr><tr><td>配置属性局部</td><td>&lt;clientName(服务名称)&gt;.ribbon.NFLoadBalancerClassName<br>…</td><td>feign.client.config.&lt;clientName(服务名称)&gt;.loggerLevel <br>…</td></tr><tr><td>配置属性全局</td><td>无</td><td>feign.client.config.default.loggerLevel</td></tr></tbody></table><h3 id="Feign-代码方式-VS-配置属性方式"><a href="#Feign-代码方式-VS-配置属性方式" class="headerlink" title="Feign 代码方式 VS 配置属性方式"></a>Feign 代码方式 VS 配置属性方式</h3><table><thead><tr><th>配置方式</th><th>有点</th><th>缺点</th></tr></thead><tbody><tr><td>代码配置</td><td>基于代码，更加灵活</td><td>如果Feign的配置类加了<code>@Configuration</code>注解，需注意父子上下文，线上修改需要重打包，发布</td></tr><tr><td>属性配置</td><td>易上手<br> 配置更加直观<br> 线上修改无需重新打包，发布<br> <strong>优先级更高</strong></td><td>极端场景下没有代码配置更加灵活</td></tr></tbody></table><p><strong>优先级：细粒度属性配置 &gt; 细粒度代码配置 &gt; 全局属性配置 &gt; 全局代码配置</strong></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringCloud】Feign 总结问题，注意点，性能调优，切换okhttp3</title>
    <link href="/20221128/b36ebc5f1af0.html"/>
    <url>/20221128/b36ebc5f1af0.html</url>
    
    <content type="html"><![CDATA[<h3 id="Feign常见问题总结"><a href="#Feign常见问题总结" class="headerlink" title="Feign常见问题总结"></a>Feign常见问题总结</h3><p><strong>FeignClient接口如使用<code>@PathVariable</code> ，必须指定value属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在一些早期版本中， @PathVariable(&quot;id&quot;) 中的 &quot;id&quot; ，也就是value属性，必须指定，不能省略。</span><br><span class="hljs-meta">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeignClient</span> &#123;<br>  <span class="hljs-meta">@RequestMapping(value = &quot;/simple/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Java代码自定义Feign Client的注意点与坑</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;microservice-provider-user&quot;, configuration = UserFeignConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeignClient</span> &#123;<br>  <span class="hljs-meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span><br>  User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该Feign Client的配置类，注意：</span><br><span class="hljs-comment"> * 1. 该类可以独立出去；</span><br><span class="hljs-comment"> * 2. 该类上也可添加<span class="hljs-doctag">@Configuration</span>声明是一个配置类；</span><br><span class="hljs-comment"> * 配置类上也可添加<span class="hljs-doctag">@Configuration</span>注解，声明这是一个配置类；</span><br><span class="hljs-comment"> * 但此时千万别将该放置在主应用程序上下文<span class="hljs-doctag">@ComponentScan</span>所扫描的包中，</span><br><span class="hljs-comment"> * 否则，该配置将会被所有Feign Client共享，无法实现细粒度配置！</span><br><span class="hljs-comment"> * 个人建议：像我一样，不加<span class="hljs-doctag">@Configuration</span>注解</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhouli</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFeignConfig</span> &#123;<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">logger</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置类上也可添加@Configuraiton 注解，声明这是一个配置类；但此时千万别将该放置在主应用程序上下文@ComponentScan 所扫描的包中，否则，该配置将会被所有Feign Client共享（相当于变成了通用配置，其实本质还是Spring父子上下文扫描包重叠导致的问题），无法实现细粒度配置！</li><li><strong>个人建议：</strong>像我一样，不加@Configuration注解，省得进坑。</li><li><strong>最佳实践：</strong>尽量用配置属性自定义Feign的配置！！！</li></ul><p><strong>@FeignClient 注解属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class="hljs-comment">//在早期的Spring Cloud版本中，无需提供name属性，从Brixton版开始，@FeignClient必须提供name属性，否则应用将无法正常启动！</span><br><span class="hljs-comment">//另外，name、url等属性支持占位符。例如：</span><br><span class="hljs-meta">@FeignClient(name = &quot;$&#123;feign.name&#125;&quot;, url = &quot;$&#123;feign.url&#125;&quot;)</span><br></code></pre></td></tr></table></figure><p><strong>类级别的@RequestMapping会被Spring MVC加载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-meta">@FeignClient(name = &quot;microservice-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFeignClient</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>类上的<code>@RequestMapping</code> 注解也会被Spring MVC加载。该问题现已经被解决，早期的版本有两种解决方案：<br><strong>方案1：</strong>不在类上加@RequestMapping 注解；<br><strong>方案2：</strong>添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Feign.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignMappingDefaultConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcRegistrations <span class="hljs-title function_">feignWebRegistrations</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcRegistrationsAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> RequestMappingHandlerMapping <span class="hljs-title function_">getRequestMappingHandlerMapping</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeignFilterRequestMappingHandlerMapping</span>();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignFilterRequestMappingHandlerMapping</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequestMappingHandlerMapping</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHandler</span><span class="hljs-params">(Class&lt;?&gt; beanType)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.isHandler(beanType) &amp;&amp; !beanType.isInterface();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>首次请求失败</strong><br>Ribbon的饥饿加载(eager-load)模式</p><p><strong>如需产生Hystrix Stream监控信息，需要做一些额外操作</strong><br>Feign本身已经整合了Hystrix，可直接使用<code>@FeignClient(value = &quot;microservice-provider-user&quot;, fallback = XXX.class)</code> 来指定fallback类，fallback类继承<code>@FeignClient</code>所标注的接口即可。</p><p>但是假设如需使用Hystrix Stream进行监控，默认情况下，访问<a href="http://IP:PORT/actuator/hystrix.stream">http://IP:PORT/actuator/hystrix.stream</a> 是会返回404，这是因为Feign虽然整合了Hystrix，但并没有整合Hystrix的监控。如何添加监控支持呢？需要以下几步：</p><p>第一步：添加依赖，示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!-- 整合hystrix，其实feign中自带了hystrix，引入该依赖主要是为了使用其中的hystrix-metrics-event-stream，用于dashboard --&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>第二步：在启动类上添加@EnableCircuitBreaker 注解，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@EnableCircuitBreaker</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieFeignHystrixApplication</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    SpringApplication.run(MovieFeignHystrixApplication.class, args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第三步：在application.yml中添加如下内容，暴露hystrix.stream端点：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;hystrix.stream&#x27;</span><br></code></pre></td></tr></table></figure><p>这样，访问任意Feign Client接口的API后，再访问<a href="http://IP:PORT/actuator/hystrix.stream">http://IP:PORT/actuator/hystrix.stream</a> ，就会展示一大堆Hystrix监控数据了。</p><p>原文链接：<a href="http://www.itmuch.com/spring-cloud-sum/feign-problems/">http://www.itmuch.com/spring-cloud-sum/feign-problems/</a></p><h4 id="Feign-上传文件"><a href="#Feign-上传文件" class="headerlink" title="Feign 上传文件"></a>Feign 上传文件</h4><p><strong>加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>    &lt;artifactId&gt;feign-form&lt;/artifactId&gt;<br>&lt;version&gt;3.0.3&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>&lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;<br>&lt;version&gt;3.0.3&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>编写Feign Client</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;ms-content-sample&quot;, configuration = UploadFeignClient.MultipartSupportConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UploadFeignClient</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST,</span><br><span class="hljs-meta">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;,</span><br><span class="hljs-meta">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    String <span class="hljs-title function_">handleFileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(value = &quot;file&quot;)</span> MultipartFile file)</span>;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultipartSupportConfig</span> &#123;<br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-keyword">public</span> Encoder <span class="hljs-title function_">feignFormEncoder</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringFormEncoder</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如代码所示，在这个Feign Client中，我们引用了配置类<code>MultipartSupportConfig</code> ，在<code>MultipartSupportConfig</code> 中，我们实例化了<code>SpringFormEncoder</code> 。这样这个Feign Client就能够上传啦。<br><strong>注意点</strong><br>-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RequestMapping注解中的produeces 、consumes 不能少；</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST,</span><br><span class="hljs-meta">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;,</span><br><span class="hljs-meta">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br></code></pre></td></tr></table></figure><ul><li>接口定义中的注解<code>@RequestPart(value = &quot;file&quot;)</code> 不能写成<code>@RequestParam(value = &quot;file&quot;）</code> 。</li><li>最好将Hystrix的超时时间设长一点，例如5秒，否则可能文件还没上传完，Hystrix就超时了，从而导致客户端侧的报错。</li></ul><p>原文链接：<a href="http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/">http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/</a></p><h4 id="Feign实现Form表单提交"><a href="#Feign实现Form表单提交" class="headerlink" title="Feign实现Form表单提交"></a>Feign实现Form表单提交</h4><p><strong>添加依赖：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>  &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>  &lt;artifactId&gt;feign-form&lt;/artifactId&gt;<br>  &lt;version&gt;3.2.2&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>  &lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;<br>  &lt;version&gt;3.2.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>Feign Client示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;xxx&quot;, url = &quot;http://www.itmuch.com/&quot;, configuration = TestFeignClient.FormSupportConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestFeignClient</span> &#123;<br>    <span class="hljs-meta">@PostMapping(value = &quot;/test&quot;,</span><br><span class="hljs-meta">            consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;,</span><br><span class="hljs-meta">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;</span><br><span class="hljs-meta">            )</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(Map&lt;String, ?&gt; queryParam)</span>;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormSupportConfig</span> &#123;<br>        <span class="hljs-meta">@Autowired</span><br>        <span class="hljs-keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;<br>        <span class="hljs-comment">// new一个form编码器，实现支持form表单提交</span><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-keyword">public</span> Encoder <span class="hljs-title function_">feignFormEncoder</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringFormEncoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringEncoder</span>(messageConverters));<br>        &#125;<br>        <span class="hljs-comment">// 开启Feign的日志</span><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">logger</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>调用示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>  HashMap&lt;String, String&gt; param = Maps.newHashMap();<br>  param.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>  param.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;pwd&quot;</span>);<br>  <span class="hljs-built_in">this</span>.testFeignClient.post(param);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>日志：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs code">...[TestFeignClient#post] ---&gt; POST http://www.baidu.com/test HTTP/1.1<br>...[TestFeignClient#post] Accept: application/json;charset=UTF-8<br>...[TestFeignClient#post] Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>...[TestFeignClient#post] Content-Length: 30<br>...[TestFeignClient#post]<br>...[TestFeignClient#post] password=pwd&amp;username=zhangsan<br>...[TestFeignClient#post] ---&gt; END HTTP (30-byte body)<br></code></pre></td></tr></table></figure><p>由日志可知，此时Feign已能使用Form表单方式提交数据。</p><p>原文链接：<a href="http://www.itmuch.com/spring-cloud-sum/feign-form-params/">http://www.itmuch.com/spring-cloud-sum/feign-form-params/</a></p><h3 id="Feign-GET请求如何构造多参数"><a href="#Feign-GET请求如何构造多参数" class="headerlink" title="Feign GET请求如何构造多参数"></a>Feign GET请求如何构造多参数</h3><p>假设需请求的URL包含多个参数，例如<a href="http://microservice-provider-user/get?id=1&amp;username=%E5%BC%A0%E4%B8%89">http://microservice-provider-user/get?id=1&amp;username=张三</a> ，该如何使用Feign构造呢？<br>我们知道，Spring Cloud为Feign添加了Spring MVC的注解支持，那么我们不妨按照Spring MVC的写法尝试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeignClient</span> &#123;<br>  <span class="hljs-meta">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> User <span class="hljs-title function_">get0</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，这种写法并不正确，控制台会输出类似如下的异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs code">feign.FeignException: status 405 reading UserFeignClient#get0(User); content:<br>&#123;&quot;timestamp&quot;:1482676142940,&quot;status&quot;:405,&quot;error&quot;:&quot;Method Not Allowed&quot;,&quot;exception&quot;:&quot;org.springframework.web.HttpRequestMethodNotSupportedException&quot;,&quot;message&quot;:&quot;Request method &#x27;POST&#x27; not supported&quot;,&quot;path&quot;:&quot;/get&quot;&#125;<br></code></pre></td></tr></table></figure><p>由异常可知，尽管我们指定了GET方法，Feign依然会使用POST方法发送请求。于是导致了异常。正确写法如下</p><p><strong>方法一[推荐]</strong><br><strong>注意:使用该方法无法使用Fegin的继承模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeignClient</span> &#123;<br>  <span class="hljs-meta">@GetMapping(&quot;/get&quot;)</span><br>  <span class="hljs-keyword">public</span> User <span class="hljs-title function_">get0</span><span class="hljs-params">(<span class="hljs-meta">@SpringQueryMap</span> User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二[推荐]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeignClient</span> &#123;<br>  <span class="hljs-meta">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> User <span class="hljs-title function_">get1</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是最为直观的方式，URL有几个参数，Feign接口中的方法就有几个参数。使用@RequestParam注解指定请求的参数是什么。</p><p><strong>方法三[不推荐]</strong><br>多参数的URL也可使用Map来构建。当目标URL参数非常多的时候，可使用这种方式简化Feign接口的编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserFeignClient</span> &#123;<br>  <span class="hljs-meta">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class="hljs-keyword">public</span> User <span class="hljs-title function_">get2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, Object&gt; map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在调用时，可使用类似以下的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> User <span class="hljs-title function_">get</span><span class="hljs-params">(String username, String password)</span> &#123;<br>  HashMap&lt;String, Object&gt; map = Maps.newHashMap();<br>  map.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>  map.put(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userFeignClient.get2(map);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>这种方式不建议使用。主要是因为可读性不好，而且如果参数为空的时候会有一些问题，例如<code>map.put(&quot;username&quot;, null);</code> 会导致服务调用方（消费者服务）接收到的username是”” ，而不是null。</p><p>原文链接：<a href="http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/">http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/</a></p><h3 id="切换为-Okhttp3-提升-QPS-性能优化"><a href="#切换为-Okhttp3-提升-QPS-性能优化" class="headerlink" title="切换为 Okhttp3 提升 QPS 性能优化"></a>切换为 Okhttp3 提升 QPS 性能优化</h3><p><strong>加依赖引入okhttp3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>&lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;<br>&lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;<br>&lt;version&gt;$&#123;version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>写配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-comment"># feign启用hystrix，才能熔断、降级</span><br>  <span class="hljs-comment"># hystrix:</span><br>  <span class="hljs-comment"># enabled: true</span><br>  <span class="hljs-comment"># 启用 okhttp 关闭默认 httpclient</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#关闭httpclient</span><br><span class="hljs-comment"># 配置连接池</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment">#feign的最大连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment">#fegin单个路径的最大连接数</span><br>  <span class="hljs-attr">okhttp:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 请求与响应的压缩以提高通信效率</span><br>  <span class="hljs-attr">compression:</span><br>    <span class="hljs-attr">request:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">min-request-size:</span> <span class="hljs-number">2048</span><br>      <span class="hljs-attr">mime-types:</span> <span class="hljs-string">text/xml,application/xml,application/json</span><br>    <span class="hljs-attr">response:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>参数配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置 okhttp 与连接池</span><br><span class="hljs-comment"> * ConnectionPool 默认创建5个线程，保持5分钟长连接</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnClass(Feign.class)</span><br><span class="hljs-meta">@AutoConfigureBefore(FeignAutoConfiguration.class)</span> <span class="hljs-comment">//SpringBoot自动配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OkHttpConfig</span> &#123;<br><br>    <span class="hljs-comment">// 默认老外留给你彩蛋中文乱码，加上它就 OK</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Encoder <span class="hljs-title function_">encoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> okhttp3.OkHttpClient <span class="hljs-title function_">okHttpClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">okhttp3</span>.OkHttpClient.Builder()<br>                <span class="hljs-comment">//设置连接超时</span><br>                .connectTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS)<br>                <span class="hljs-comment">//设置读超时</span><br>                .readTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS)<br>                <span class="hljs-comment">//设置写超时</span><br>                .writeTimeout(<span class="hljs-number">10</span>, TimeUnit.SECONDS)<br>                <span class="hljs-comment">//是否自动重连</span><br>                .retryOnConnectionFailure(<span class="hljs-literal">true</span>)<br>                .connectionPool(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionPool</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5L</span>, TimeUnit.MINUTES))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ">https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Feign</tag>
      
      <tag>okhttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringCloud】Feign性能优化</title>
    <link href="/20221128/d0397353a18f.html"/>
    <url>/20221128/d0397353a18f.html</url>
    
    <content type="html"><![CDATA[<h4 id="1、替换-tomcat"><a href="#1、替换-tomcat" class="headerlink" title="1、替换 tomcat"></a>1、替换 tomcat</h4><p>首先，把 tomcat 换成 undertow，这个性能在 Jmeter 的压测下，undertow 比 tomcat 高一倍<br><strong>第一步，pom 修改去除tomcat</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;exclusions&gt;<br>&lt;exclusion&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>&lt;/exclusion&gt;<br>&lt;/exclusions&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二步，配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">undertow:</span><br>    <span class="hljs-attr">max-http-post-size:</span> <span class="hljs-number">0</span><br><span class="hljs-comment"># 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可</span><br>    <span class="hljs-attr">io-threads:</span> <span class="hljs-number">4</span><br><span class="hljs-comment"># 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8</span><br>    <span class="hljs-attr">worker-threads:</span> <span class="hljs-number">32</span><br><span class="hljs-comment"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理</span><br><span class="hljs-comment"># 每块buffer的空间大小,越小的空间被利用越充分</span><br>    <span class="hljs-attr">buffer-size:</span> <span class="hljs-number">1024</span><br><span class="hljs-comment"># 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region</span><br><span class="hljs-comment">#   buffers-per-region: 1024 # 这个参数不需要写了</span><br><span class="hljs-comment"># 是否分配的直接内存</span><br>    <span class="hljs-attr">direct-buffers:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2、替换-HTTPClient"><a href="#2、替换-HTTPClient" class="headerlink" title="2、替换 HTTPClient"></a>2、替换 HTTPClient</h4><p><strong>第一步，加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>&lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;<br>&lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二部，在 application.yml或者 bootstrap.yml 里面配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># feign配置</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-comment"># 在feign中开启hystrix功能，默认情况下feign不开启hystrix功能</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">## 配置httpclient线程池</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">okhttp:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>第三步，配置 HTTPClient Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">import</span> org.apache.http.client.HttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.client.config.RequestConfig;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;<br><span class="hljs-keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpPool</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HttpClient <span class="hljs-title function_">httpClient</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===== Apache httpclient 初始化连接池开始===&quot;</span> );<br>        <span class="hljs-comment">// 生成默认请求配置</span><br>        RequestConfig.<span class="hljs-type">Builder</span> <span class="hljs-variable">requestConfigBuilder</span> <span class="hljs-operator">=</span> RequestConfig.custom();<br>        <span class="hljs-comment">// 超时时间</span><br>        requestConfigBuilder.setSocketTimeout(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 连接时间</span><br>        requestConfigBuilder.setConnectTimeout(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-type">RequestConfig</span> <span class="hljs-variable">defaultRequestConfig</span> <span class="hljs-operator">=</span> requestConfigBuilder.build();<br>        <span class="hljs-comment">// 连接池配置</span><br>        <span class="hljs-comment">// 长连接保持30秒</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">PoolingHttpClientConnectionManager</span> <span class="hljs-variable">pollingConnectionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolingHttpClientConnectionManager</span>(<span class="hljs-number">30</span>, TimeUnit.MILLISECONDS);<br>        <span class="hljs-comment">// 总连接数</span><br>        pollingConnectionManager.setMaxTotal(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 同路由的并发数</span><br>        pollingConnectionManager.setDefaultMaxPerRoute(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// httpclient 配置</span><br>        <span class="hljs-type">HttpClientBuilder</span> <span class="hljs-variable">httpClientBuilder</span> <span class="hljs-operator">=</span> HttpClientBuilder.create();<br>        <span class="hljs-comment">// 保持长连接配置，需要在头添加Keep-Alive</span><br>        httpClientBuilder.setKeepAliveStrategy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionKeepAliveStrategy</span>());<br>        httpClientBuilder.setConnectionManager(pollingConnectionManager);<br>        httpClientBuilder.setDefaultRequestConfig(defaultRequestConfig);<br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> httpClientBuilder.build();<br><br>        <span class="hljs-comment">// 启动定时器，定时回收过期的连接</span><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;=====closeIdleConnections===&quot;</span>);<br>                pollingConnectionManager.closeExpiredConnections();<br>                pollingConnectionManager.closeIdleConnections(<span class="hljs-number">5</span>, TimeUnit.SECONDS);<br>            &#125;<br>        &#125;, <span class="hljs-number">10</span> * <span class="hljs-number">1000</span>, <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;===== Apache httpclient 初始化连接池完毕===&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、配置-Hystrix"><a href="#3、配置-Hystrix" class="headerlink" title="3、配置 Hystrix"></a>3、配置 Hystrix</h4><p><strong>第一步，依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二步，配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 配置hystrix的参数</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">threadpool:</span><br>    <span class="hljs-comment"># default: 默认参数，作用的所有的hystrix的客户端,如果需要对某个具体的接口，可以写接口+方法名称</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">coreSize:</span> <span class="hljs-number">500</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">fallback:</span><br>        <span class="hljs-comment"># 是否开启回退方法</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">thread:</span><br>            <span class="hljs-attr">timeoutInMilliseconds:</span> <span class="hljs-number">30000</span> <span class="hljs-comment">#缺省为1000</span><br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://www.jianshu.com/p/fe1c4412de7f" title="https://www.jianshu.com/p/fe1c4412de7f">https://www.jianshu.com/p/fe1c4412de7f</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringCloud】Eureka整合使用和配置</title>
    <link href="/20221128/5a89e4a62e37.html"/>
    <url>/20221128/5a89e4a62e37.html</url>
    
    <content type="html"><![CDATA[<p><strong>遵循SpringBoot三板斧</strong></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p><strong>第一步加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二步加注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在启动类上加注解</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第三步写配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka</span><br><span class="hljs-comment"># 详见EurekaServerConfigBean，需要注意与Client和Instance在client的jar包不同，Server是在server的jar包。</span><br><span class="hljs-comment"># eureka的各项配置可见EurekaXXXConfigBean。</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">datacenter:</span> <span class="hljs-string">cloud</span>           <span class="hljs-comment"># 修改Eureka监控页面的System Status Data center</span><br>  <span class="hljs-attr">environment:</span> <span class="hljs-string">test</span>            <span class="hljs-comment"># 修改Eureka监控页面的System Status Environment</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">leaseRenewalIntervalInSeconds:</span>  <span class="hljs-number">5</span> <span class="hljs-comment"># 心跳间隔，5秒</span><br>    <span class="hljs-attr">leaseExpirationDurationInSeconds:</span> <span class="hljs-number">10</span>  <span class="hljs-comment"># 没有心跳的淘汰时间，10秒</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span> <span class="hljs-comment">#SpringCloud 2.0 已经改成 $&#123;spring.cloud.client.ip-address&#125; 了，于是修改</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 默认情况下，eureka server同时也是eureka client，用于相互注册形成高可用eureka服务。</span><br>    <span class="hljs-comment"># 单点时，如果registerWithEureka配置为true，则eureka server会报错Cannot execute request on any known server</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否注册到eureka服务，默认为true，当前已为eureka server，且单点eureka，故配置为false</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># eureka之间如果网络不稳定，客户端一般也会缓存了注册列表，因此eureka服务可以不缓存，我觉得更能确保eureka之间的一致。</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-comment"># registerWithEureka关闭后，defaultZone没有配置的必要。如果打开，即使配置为本机一样报错。</span><br>      <span class="hljs-comment"># 也就是说defaultZone任何时候都没有配置为localhost的必要。这点上John的配置更好，永超和周立包括志朋的配置有点多余。</span><br>      <span class="hljs-comment"># 但是周立说的对，这个属性默认配置是http://localhost:8761/eureka，也就是当你没有用户名密码安全认证时，本机调试时，客户端可以不配置，</span><br>      <span class="hljs-comment"># 但对于server来说，这个默认没有什么作用。对于client来说，也只有调试的时候有点作用。</span><br>      <span class="hljs-comment"># 但有一点很奇怪，既然默认了8761端口，为什么eureka server的默认端口要用8080而不是8761呢？</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="hljs-comment">#应用的主机名称</span><br>  <span class="hljs-comment">#      defaultZone: http://$&#123;security.user.name&#125;:$&#123;security.user.password&#125;@localhost:$&#123;server.port&#125;/eureka # 本配置应删除。</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-comment"># 自我保护机制，默认true。打开后，心跳失败在15分钟内低于85%(renewalPercentThreshold)的服务，也不进行剔除。</span><br>    <span class="hljs-comment"># 关闭后，主页提示：RENEWALS ARE LESSER THAN THE THRESHOLD. THE SELF PRESERVATION MODE IS TURNED OFF.</span><br>    <span class="hljs-comment"># THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</span><br>    <span class="hljs-attr">enableSelfPreservation:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 本地调试时可fasle关闭。但生产建议打开，可防止因网络不稳定等原因导致误剔除服务。</span><br>    <span class="hljs-attr">renewalPercentThreshold:</span> <span class="hljs-number">0.85</span> <span class="hljs-comment"># 默认85%</span><br>    <span class="hljs-comment"># 在服务器接收请求之前等待的初始时间，默认等待5min（John Carnell）</span><br>    <span class="hljs-attr">waitTimeInMsWhenSyncEmpty:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># John说开发时最好注释此配置，服务注册需要3次心跳，每次10s，也就是30s才能显示在eureka。但是为什么我这里马上就显示呢？</span><br>    <span class="hljs-comment"># eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上</span><br>    <span class="hljs-comment"># 默认30秒，eclipse提示默认0应该是错误的，源代码中responseCacheUpdateIntervalMs = 30 * 1000。</span><br>    <span class="hljs-attr">response-cache-update-interval-ms:</span> <span class="hljs-number">3000</span> <span class="hljs-comment"># 网上很多专家的博客错误写成responseCacheUpdateInvervalMs，请注意。这里配置为3秒。</span><br>    <span class="hljs-comment"># eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，</span><br>    <span class="hljs-comment"># 过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。</span><br>    <span class="hljs-comment"># 由于启用了evict其实就用不太上改这个配置了，默认180s</span><br>    <span class="hljs-attr">responseCacheAutoExpirationInSeconds:</span> <span class="hljs-number">180</span><br>    <span class="hljs-comment"># 启用主动失效，并且每次主动失效检测间隔为3s。源码evictionIntervalTimerInMs = 60 * 1000，默认一分钟。</span><br>    <span class="hljs-comment"># 需要注意的是该配置会打印INFO日志，增加info日志量，修改后从每60秒打印一次变成3秒打印一次。</span><br>    <span class="hljs-attr">evictionIntervalTimerInMs:</span> <span class="hljs-number">3000</span> <span class="hljs-comment"># 注意不要写成EvictionIntervalTimerInMs，yml大小写敏感。</span><br></code></pre></td></tr></table></figure><p>如果是多实例高可用修改下列配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否注册到eureka服务</span><br>    <span class="hljs-attr">serviceUrl:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://peer2:1112/eureka/,http://peer3:1112/eureka/</span> <span class="hljs-comment">#应用的主机名称</span><br></code></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><strong>第一步加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二步加注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@EnableEurekaClient</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ClientApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第三步写配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br><span class="hljs-comment">#    ip-address: #指定ip地址</span><br>    <span class="hljs-comment"># 是否以IP注册到Eureka Server上，如果false则不是IP而是服务器名称</span><br>    <span class="hljs-comment"># 但我设置了false，eureka主页仍显示192.168.100.16:client-microservice:8010</span><br>    <span class="hljs-attr">preferIpAddress:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 将IP注册到Eureka Server上，而如果不配置就是机器的主机名。默认false。应该始终设置为true。如果基于Docker等容器的部署，容器会生成一个随机的主机名，此时DNS不存在该名，无法解析 - John Carnell</span><br>    <span class="hljs-comment"># 实例名。SpringCloud体系里的，服务实体向eureka注册时，注册名默认是“IP名:应用名:应用端口名”$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;random.int&#125;&#125;</span><br>    <span class="hljs-comment"># 如果服务名，ip，端口都一致的话，eureka只显示一个服务</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;random.int[1,9]&#125;&#125;-@project.version@</span><br>    <span class="hljs-comment"># 服务续约的两个重要属性</span><br>    <span class="hljs-attr">leaseRenewalIntervalInSeconds:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># 服务续约间隔时间。默认每隔30秒，客户端会向服务端发送心跳。见DiscoveryClient.initScheduledTasks</span><br>    <span class="hljs-attr">leaseExpirationDurationInSeconds:</span> <span class="hljs-number">90</span> <span class="hljs-comment"># 服务失效时间。缺省为90秒服务端接收不到客户端的心跳，则剔除该客户端服务实例。</span><br>    <span class="hljs-comment"># 端点配置。若配置了context-path，actuator的监控端点会增加前缀，此时eureka也需要相应增加</span><br>    <span class="hljs-comment">#status-page-url-path: $&#123;server.servlet.context-path&#125;/actuator/info</span><br>    <span class="hljs-comment">#health-check-url-path: $&#123;server.servlet.context-path&#125;/actuator/health</span><br><br>    <span class="hljs-comment">#    Eureka 的元数据</span><br>    <span class="hljs-attr">metadata-map:</span><br>      <span class="hljs-attr">zc-data:</span> <span class="hljs-string">Current</span> <span class="hljs-string">services</span> <span class="hljs-string">are</span> <span class="hljs-string">goods</span> <span class="hljs-string">services</span>  <span class="hljs-comment"># 不会影响客户端</span><br>      <span class="hljs-attr">zone:</span> <span class="hljs-string">ABD</span>               <span class="hljs-comment"># Eureka可以理解的元数据，可以影响客户端</span><br><span class="hljs-comment">#    appname: AAAAA            # 填坑 Swagger：配置和spring.application.name 冲突</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment"># eureka服务的位置，如配置错误，则：Cannot execute request on any known server</span><br>    <span class="hljs-comment"># 详见：com.netflix.discovery.endpoint.EndpointUtils</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka/</span> <span class="hljs-comment">#应用的主机名称</span><br>    <span class="hljs-comment"># 是否启用eureka客户端。默认true</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 本地调试时，若不想启动eureka，可配置false即可，而不需要注释掉@EnableDiscoveryClient这么麻烦。感谢永超，从他的书知道这个属性。</span><br>    <span class="hljs-comment"># 支持registerWithEureka(John、周立)和register-with-eureka(翟永超)两种写法，eclipse的STS默认使用后者。</span><br>    <span class="hljs-comment"># 基本所有配置使用横杠或者驼峰都可以，鼠标放在上面，eclipse都可以显示详细注解和默认值（如果有）。</span><br>    <span class="hljs-attr">registerWithEureka:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 默认true，因此也可省略。</span><br>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 默认true，此处可不配置。</span><br>    <span class="hljs-comment"># 缓存清单更新时间，默认30秒。见EurekaClientConfigBean，其中DefaultEurekaClientConfig可不看（前者spring实现，后者Netflix实现）</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># 如果想eureka server剔除服务后尽快在client体现，我觉得可缩短此时间。</span><br>    <span class="hljs-comment"># 周立在Camden SR4（对应eureka-client.jar1.2.6）中说有该属性，但我在SR6（对应1.2.4）和SR4中都找不到；</span><br>    <span class="hljs-comment"># 又查找了Brixton SR7（对应1.1.7，其实不光eureka-client，整个spring-cloud-netflix都是这个版本），也是没有。</span><br>    <span class="hljs-comment"># 这是因为该属性IDE确实不能提示，但写法是正确的。作用是修改eureka的健康检查方式（心跳），改为用actuator，详见HealthCheckHandler HealthIndicator。</span><br>    <span class="hljs-comment"># 周立写的不是太详细，可详见这博客：https://blog.csdn.net/xiao_jun_0820/article/details/77991963</span><br>    <span class="hljs-comment"># 若配置healthcheck，需引入actuator。</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 我建议配置为true。心跳机制有个问题，如当客户端的数据库连接出现问题导致不可用时，心跳机制不能反映，但actuator的health可以。</span><br></code></pre></td></tr></table></figure><p>最后可以通过<code>DiscoveryClient</code>对象，在日志中打印出服务实例的相关内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getDiscoveryClient&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;ServiceInstance&gt; <span class="hljs-title function_">getDiscoveryClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> discoveryClient.getInstances(<span class="hljs-string">&quot;server-1&quot;</span>);<span class="hljs-comment">//获取客户端实例服务</span><br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getServices&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getServices</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> discoveryClient.getServices();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>注册中心</tag>
      
      <tag>Eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringBoot2】整合Redis多数据源</title>
    <link href="/20221128/36806b7469c8.html"/>
    <url>/20221128/36806b7469c8.html</url>
    
    <content type="html"><![CDATA[<p><strong>配置文件属性</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.50</span><span class="hljs-number">.144</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">600</span> <span class="hljs-comment">#Springboot2.0 不能设置为0</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">redis2:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.50</span><span class="hljs-number">.144</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">600</span><br></code></pre></td></tr></table></figure><p><strong>配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisDevConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean(name = &quot;redisDevTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(<span class="hljs-meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span> String hostName,</span><br><span class="hljs-params">                                             <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span> <span class="hljs-type">int</span> port, <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span> String password,</span><br><span class="hljs-params">                                             <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-idle&#125;&quot;)</span> <span class="hljs-type">int</span> maxIdle, <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-active&#125;&quot;)</span> <span class="hljs-type">int</span> maxTotal,</span><br><span class="hljs-params">                                             <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.database&#125;&quot;)</span> <span class="hljs-type">int</span> index, <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-wait&#125;&quot;)</span> <span class="hljs-type">long</span> maxWaitMillis,<span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.min-idle&#125;&quot;)</span> <span class="hljs-type">int</span> minIdle)</span> &#123;<br>        <span class="hljs-type">StringRedisTemplate</span> <span class="hljs-variable">temple</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>();<br>        temple.setConnectionFactory(<br>                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));<br><br>        <span class="hljs-keyword">return</span> temple;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean(name = &quot;redisUatTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title function_">redisUatTemplate</span><span class="hljs-params">(<span class="hljs-meta">@Value(&quot;$&#123;spring.redis2.host&#125;&quot;)</span> String hostName,</span><br><span class="hljs-params">                                             <span class="hljs-meta">@Value(&quot;$&#123;spring.redis2.port&#125;&quot;)</span> <span class="hljs-type">int</span> port, <span class="hljs-meta">@Value(&quot;$&#123;spring.redis2.password&#125;&quot;)</span> String password,</span><br><span class="hljs-params">                                             <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-idle&#125;&quot;)</span> <span class="hljs-type">int</span> maxIdle, <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-active&#125;&quot;)</span> <span class="hljs-type">int</span> maxTotal,</span><br><span class="hljs-params">                                             <span class="hljs-meta">@Value(&quot;$&#123;spring.redis2.database&#125;&quot;)</span> <span class="hljs-type">int</span> index, <span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-wait&#125;&quot;)</span> <span class="hljs-type">long</span> maxWaitMillis,<span class="hljs-meta">@Value(&quot;$&#123;spring.redis.lettuce.pool.min-idle&#125;&quot;)</span> <span class="hljs-type">int</span> minIdle)</span> &#123;<br>        <span class="hljs-type">StringRedisTemplate</span> <span class="hljs-variable">temple</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>();<br>        temple.setConnectionFactory(<br>                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));<br><br>        <span class="hljs-keyword">return</span> temple;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> RedisConnectionFactory <span class="hljs-title function_">connectionFactory</span><span class="hljs-params">(String hostName, <span class="hljs-type">int</span> port, String password, <span class="hljs-type">int</span> maxIdle,</span><br><span class="hljs-params">                                                    <span class="hljs-type">int</span> maxTotal, <span class="hljs-type">int</span> index, <span class="hljs-type">long</span> maxWaitMillis,<span class="hljs-type">int</span> minIdle)</span> &#123;<br>        <span class="hljs-type">JedisConnectionFactory</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisConnectionFactory</span>();<br>        jedis.setHostName(hostName);<br>        jedis.setPort(port);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(password)) &#123;<br>            jedis.setPassword(password);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index != <span class="hljs-number">0</span>) &#123;<br>            jedis.setDatabase(index);<br>        &#125;<br>        jedis.setPoolConfig(poolCofig(maxIdle, maxTotal, maxWaitMillis,minIdle));<br>        <span class="hljs-comment">// 初始化连接pool</span><br>        jedis.afterPropertiesSet();<br>        <span class="hljs-type">RedisConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> jedis;<br><br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> JedisPoolConfig <span class="hljs-title function_">poolCofig</span><span class="hljs-params">(<span class="hljs-type">int</span> maxIdle, <span class="hljs-type">int</span> maxTotal, <span class="hljs-type">long</span> maxWaitMillis,<span class="hljs-type">int</span> minIdle)</span> &#123;<br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolCofig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolCofig.setMaxIdle(maxIdle);<br>        poolCofig.setMaxTotal(maxTotal);<br>        poolCofig.setMaxWaitMillis(maxWaitMillis);<br>        poolCofig.setMinIdle(minIdle);<br>        <span class="hljs-keyword">return</span> poolCofig;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如何使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource(name = &quot;redisDevTemplate&quot;)</span><br><span class="hljs-keyword">private</span> StringRedisTemplate template;<br><br><span class="hljs-meta">@Resource(name = &quot;redisUatTemplate&quot;)</span><br><span class="hljs-keyword">private</span> StringRedisTemplate lockTemplate;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringBoot2】整合Redis缓存</title>
    <link href="/20221128/187e0f792751.html"/>
    <url>/20221128/187e0f792751.html</url>
    
    <content type="html"><![CDATA[<p>遵循SpringBoot三板斧<br><strong>第一步加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!-- Redis --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;!-- redis依赖commons-pool 这个依赖一定要添加 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;<br>&lt;version&gt;2.6.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二步写注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCaching</span><span class="hljs-comment">//开启缓存支持</span><br></code></pre></td></tr></table></figure><p><strong>第三步写配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.11</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">600</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>编写Redis配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/11/3 14:12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: SpringBoot2.0 Redis缓存配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@EnableCaching</span>:开启缓存支持</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;sys.dataCaching.expireTime:0&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> expireTime;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> LettuceConnectionFactory lettuceConnectionFactory;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">keyGenerator</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//设置自定义key&#123;ClassName + methodName + params&#125;</span><br>        <span class="hljs-keyword">return</span> (target, method, params) -&gt; &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class="hljs-string">&quot;,Method:&quot;</span>);<br>            sb.append(method.getName());<br>            sb.append(<span class="hljs-string">&quot;,Params[&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>                sb.append(params[i].toString());<br>                <span class="hljs-keyword">if</span> (i != (params.length - <span class="hljs-number">1</span>)) &#123;<br>                    sb.append(<span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>            log.debug(<span class="hljs-string">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br><span class="hljs-comment">//自定义keyGenerator，Key生成器</span><br><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">updateByIdkeyGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (target, method, params) -&gt; &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class="hljs-string">&quot;,Method:&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;getById&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;,Params[&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>].getClass().getDeclaredField(<span class="hljs-string">&quot;id&quot;</span>);<br>                id.setAccessible(<span class="hljs-literal">true</span>);<br>                sb.append(id.get(params[<span class="hljs-number">0</span>]).toString());<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>            log.debug(<span class="hljs-string">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br><span class="hljs-comment">//自定义keyGenerator，Key生成器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">deleteByIdkeyGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (target, method, params) -&gt; &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class="hljs-string">&quot;,Method:&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;getById&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;,Params[&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>                sb.append(params[i].toString());<br>                <span class="hljs-keyword">if</span> (i != (params.length - <span class="hljs-number">1</span>)) &#123;<br>                    sb.append(<span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>            log.debug(<span class="hljs-string">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">redisCacheConfiguration</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        <span class="hljs-comment">//设置缓存过期时间</span><br>        <span class="hljs-keyword">if</span> (expireTime &gt; <span class="hljs-number">0</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;Redis 缓存过期时间 : &#123;&#125;&quot;</span>, expireTime);<br>            <span class="hljs-comment">//设置缓存有效期 秒</span><br>            redisCacheConfiguration.entryTtl(Duration.ofSeconds(expireTime));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Redis 未设置缓存过期时间&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> RedisCacheManager<br>                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))<br>                .cacheDefaults(redisCacheConfiguration).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<span class="hljs-comment">//创建RedisTemplate</span><br>        <span class="hljs-comment">// 设置序列化</span><br>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(<br>                Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-comment">// 配置redisTemplate</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;String, Object&gt;();<br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        RedisSerializer&lt;?&gt; stringSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-comment">// key序列化</span><br>        redisTemplate.setKeySerializer(stringSerializer);<br>        <span class="hljs-comment">// value序列化</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">// Hash key序列化</span><br>        redisTemplate.setHashKeySerializer(stringSerializer);<br>        <span class="hljs-comment">// Hash value序列化</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如何使用查询缓存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheConfig(cacheNames = &quot;demoDao&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IDemoDAO</span>&lt;&gt; &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    DemoMapper mapper;<br><br><span class="hljs-comment">//用默认配置的keyGenerator</span><br>    <span class="hljs-meta">@Cacheable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Demo <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> mapper.getById(id);<br>    &#125;<br><span class="hljs-comment">//使用配置的keyGenerator，清空缓存</span><br><span class="hljs-meta">@CacheEvict(keyGenerator = &quot;updateByIdkeyGenerator&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(T entity)</span> &#123;<br>        <span class="hljs-keyword">return</span> mapper.update(entity);<br>    &#125;<br><span class="hljs-comment">//使用配置的keyGenerator，清空缓存</span><br><span class="hljs-meta">@CacheEvict(keyGenerator = &quot;deleteByIdkeyGenerator&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> mapper.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Redis</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA转换树结构数据</title>
    <link href="/20221128/02a986c2604f.html"/>
    <url>/20221128/02a986c2604f.html</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-转换-树结构数据"><a href="#JAVA-转换-树结构数据" class="headerlink" title="JAVA 转换 树结构数据"></a>JAVA 转换 树结构数据</h1><p><strong>第一步：引入fastjson</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二步：用到了工具内的JSONPath</strong></p><p><a href="https://blog.csdn.net/lwg_1540652358/article/details/84111339">JSONPath使用教程</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 树转换</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> obj                  需要转换的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentCodeFieldName  父标识字段名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> parentCode           父标识值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentCodeFieldName 当前标识字段名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> childrenFiledName    子树的字段名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> c                    需要转换的Class类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;                  泛型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回List&lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">tree</span><span class="hljs-params">(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class&lt;T&gt; c)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(obj);<br>    log.debug(<span class="hljs-string">&quot;树转换开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, JSON.toJSONString(obj));<br>    <span class="hljs-comment">//获取第一层级的数据</span><br>    <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> (JSONArray) JSONPath.read(jsonStr, <span class="hljs-string">&quot;$[&quot;</span> + parentCodeFieldName + <span class="hljs-string">&quot;=&quot;</span> + parentCode + <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class="hljs-comment">//为空的话直接返回空集合</span><br>        <span class="hljs-keyword">return</span> Lists.newArrayList();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> jsonArray.getJSONObject(i);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>    List&lt;T&gt; list = JSONArray.parseArray(jsonArray.toString(), c);<br>    log.debug(<span class="hljs-string">&quot;树转换结束, 转换时间: &#123;&#125; ms . &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, (System.currentTimeMillis() - t1), JSON.toJSONString(list));<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeChildren</span><span class="hljs-params">(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName)</span> &#123;<br>    <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> (JSONArray) JSONPath.read(jsonStr, <span class="hljs-string">&quot;$[&quot;</span> + parentCodeFieldName + <span class="hljs-string">&quot;=&quot;</span> + parentCode + <span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    currentJsonObj.put(childrenFiledName, jsonArray);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> jsonArray.getJSONObject(i);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>fastjson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql 查询天、周，月，季度、年的数据</title>
    <link href="/20221128/fb1ac39b6320.html"/>
    <url>/20221128/fb1ac39b6320.html</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql-查询天、周，月，季度、年的数据"><a href="#Mysql-查询天、周，月，季度、年的数据" class="headerlink" title="Mysql 查询天、周，月，季度、年的数据"></a>Mysql 查询天、周，月，季度、年的数据</h1><p><strong>今天</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from 表名 where to_days(时间字段名) = to_days(now());<br></code></pre></td></tr></table></figure><p><strong>昨天</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1<br></code></pre></td></tr></table></figure><p><strong>近7天</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure><p><strong>近30天</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure><p><strong>本月</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, &#x27;%Y%m&#x27; ) = DATE_FORMAT( CURDATE( ) , &#x27;%Y%m&#x27; )<br></code></pre></td></tr></table></figure><p><strong>上一月</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &#x27;%Y%m&#x27; ) , date_format( 时间字段名, &#x27;%Y%m&#x27; ) ) =1<br></code></pre></td></tr></table></figure><p><strong>查询本季度数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());<br></code></pre></td></tr></table></figure><p><strong>查询上季度数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));<br></code></pre></td></tr></table></figure><p><strong>查询本年数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());<br></code></pre></td></tr></table></figure><p><strong>查询上年数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));<br></code></pre></td></tr></table></figure><p><strong>查询当前这周的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now());<br></code></pre></td></tr></table></figure><p><strong>查询上周的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now())-1;<br></code></pre></td></tr></table></figure><p><strong>查询上个月的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name,submittime from enterprise where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),&#x27;%Y-%m&#x27;)<br><br>select * from user where DATE_FORMAT(pudate,&#x27;%Y%m&#x27;) = DATE_FORMAT(CURDATE(),&#x27;%Y%m&#x27;) ; <br><br>select * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = WEEKOFYEAR(now()) <br><br>select * from user where MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where YEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where pudate between  上月最后一天  and 下月第一天 <br></code></pre></td></tr></table></figure><p><strong>查询当前月份的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name,submittime from enterprise   where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(now(),&#x27;%Y-%m&#x27;)<br></code></pre></td></tr></table></figure><p><strong>查询距离当前现在6个月的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/benefitworld/p/5832897.html">参考原文</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错</title>
    <link href="/20221128/57eb02bc63e9.html"/>
    <url>/20221128/57eb02bc63e9.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。</p></blockquote><p>原因分析：MySQL5.7版本默认设置了 mysql sql_mode &#x3D; only_full_group_by 属性，导致报错。</p><blockquote><p>其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode&#x3D;only_full_group_by的数据库,在使用group by时就会报错。</p><p>测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。</p><p>一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了</p><p>only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。</p></blockquote><p><strong>1、查看sql_mode</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@sql_mode;<br></code></pre></td></tr></table></figure><p>查询出来的值为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><p><strong>2、去掉ONLY_FULL_GROUP_BY，重新设置值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysq">SET @@global.sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure><p><strong>3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysq">SET sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure><h3 id="以上方法mysql数据库重启后依然无效，下列方式重启后依然生效"><a href="#以上方法mysql数据库重启后依然无效，下列方式重启后依然生效" class="headerlink" title="以上方法mysql数据库重启后依然无效，下列方式重启后依然生效"></a>以上方法mysql数据库重启后依然无效，下列方式重启后依然生效</h3><p><strong>找到MySQL的配置文件,在linux系统上&#x2F;etc&#x2F;my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">sql_mode</span> = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><p><strong>需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service mysqld restart<br></code></pre></td></tr></table></figure><p><strong>刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure><p><strong>成功</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 学习笔记</title>
    <link href="/20221128/54c88a5904d4.html"/>
    <url>/20221128/54c88a5904d4.html</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-学习笔记"><a href="#MySQL-学习笔记" class="headerlink" title="MySQL 学习笔记"></a>MySQL 学习笔记</h1><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查看当前数据库<br>    SELECT DATABASE();<br>-- 显示当前时间、用户名、数据库版本<br>    SELECT now(), user(), version();<br>-- 创建库<br>    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项<br>    数据库选项：<br>        CHARACTER SET charset_name<br>        COLLATE collation_name<br>-- 查看已有库<br>    SHOW DATABASES[ LIKE &#x27;PATTERN&#x27;]<br>-- 查看当前库信息<br>    SHOW CREATE DATABASE 数据库名<br>-- 修改库的选项信息<br>    ALTER DATABASE 库名 选项信息<br>-- 删除库<br>    DROP DATABASE[ IF EXISTS] 数据库名<br>        同时删除该数据库相关的目录及其目录内容<br></code></pre></td></tr></table></figure><h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建表<br>    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]<br>        每个字段必须有数据类型<br>        最后一个字段后不能有逗号<br>        TEMPORARY 临时表，会话结束时表自动消失<br>        对于字段的定义：<br>            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &#x27;string&#x27;]<br>-- 表选项<br>    -- 字符集<br>        CHARSET = charset_name<br>        如果表没有设定，则使用数据库字符集<br>    -- 存储引擎<br>        ENGINE = engine_name<br>        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同<br>        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive<br>        不同的引擎在保存表的结构和数据时采用不同的方式<br>        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引<br>        InnoDB表文件含义：.frm表定义，表空间数据和日志文件<br>        SHOW ENGINES -- 显示存储引擎的状态信息<br>        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息<br>    -- 自增起始数<br>    AUTO_INCREMENT = 行数<br>    -- 数据文件目录<br>        DATA DIRECTORY = &#x27;目录&#x27;<br>    -- 索引文件目录<br>        INDEX DIRECTORY = &#x27;目录&#x27;<br>    -- 表注释<br>        COMMENT = &#x27;string&#x27;<br>    -- 分区选项<br>        PARTITION BY ... (详细见手册)<br>-- 查看所有表<br>    SHOW TABLES[ LIKE &#x27;pattern&#x27;]<br>    SHOW TABLES FROM 表名<br>-- 查看表机构<br>    SHOW CREATE TABLE 表名 （信息更详细）<br>    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &#x27;PATTERN&#x27;]<br>    SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;]<br>-- 修改表<br>    -- 修改表本身的选项<br>        ALTER TABLE 表名 表的选项<br>        eg: ALTER TABLE 表名 ENGINE=MYISAM;<br>    -- 对表进行重命名<br>        RENAME TABLE 原表名 TO 新表名<br>        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）<br>        -- RENAME可以交换两个表名<br>    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）<br>        ALTER TABLE 表名 操作名<br>        -- 操作名<br>            ADD[ COLUMN] 字段定义       -- 增加字段<br>                AFTER 字段名          -- 表示增加在该字段名后面<br>                FIRST               -- 表示增加在第一个<br>            ADD PRIMARY KEY(字段名)   -- 创建主键<br>            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引<br>            ADD INDEX [索引名] (字段名) -- 创建普通索引<br>            DROP[ COLUMN] 字段名      -- 删除字段<br>            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)<br>            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改<br>            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)<br>            DROP INDEX 索引名 -- 删除索引<br>            DROP FOREIGN KEY 外键    -- 删除外键<br><br>-- 删除表<br>    DROP TABLE[ IF EXISTS] 表名 ...<br>-- 清空表数据<br>    TRUNCATE [TABLE] 表名<br>-- 复制表结构<br>    CREATE TABLE 表名 LIKE 要复制的表名<br>-- 复制表结构和数据<br>    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名<br>-- 检查表是否有错误<br>    CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>-- 优化表<br>    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br>-- 修复表<br>    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]<br>-- 分析表<br>    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 增<br>    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]<br>        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。<br>        -- 可同时插入多条数据记录！<br>        REPLACE 与 INSERT 完全一样，可互换。<br>    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]<br>-- 查<br>    SELECT 字段列表 FROM 表名[ 其他子句]<br>        -- 可来自多个表的多个字段<br>        -- 其他子句可以不使用<br>        -- 字段列表可以用*代替，表示所有字段<br>-- 删<br>    DELETE FROM 表名[ 删除条件子句]<br>        没有条件子句，则会删除全部<br>-- 改<br>    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]<br></code></pre></td></tr></table></figure><h3 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- MySQL、数据库、表、字段均可设置编码<br>-- 数据编码与客户端编码不需一致<br>SHOW VARIABLES LIKE &#x27;character_set_%&#x27;   -- 查看所有字符集编码项<br>    character_set_client        客户端向服务器发送数据时使用的编码<br>    character_set_results       服务器端将结果返回给客户端所使用的编码<br>    character_set_connection    连接层编码<br>SET 变量名 = 变量值<br>    SET character_set_client = gbk;<br>    SET character_set_results = gbk;<br>    SET character_set_connection = gbk;<br>SET NAMES GBK;  -- 相当于完成以上三个设置<br>-- 校对集<br>    校对集用以排序<br>    SHOW CHARACTER SET [LIKE &#x27;pattern&#x27;]/SHOW CHARSET [LIKE &#x27;pattern&#x27;]   查看所有字符集<br>    SHOW COLLATION [LIKE &#x27;pattern&#x27;]     查看所有校对集<br>    CHARSET 字符集编码     设置字符集编码<br>    COLLATE 校对集编码     设置校对集编码<br></code></pre></td></tr></table></figure><h3 id="数据类型（列类型）"><a href="#数据类型（列类型）" class="headerlink" title="数据类型（列类型）"></a>数据类型（列类型）</h3><p><strong>1. 数值类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- a. 整型 ----------<br>    类型         字节     范围（有符号位）<br>    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255<br>    smallint    2字节    -32768 ~ 32767<br>    mediumint   3字节    -8388608 ~ 8388607<br>    int         4字节<br>    bigint      8字节<br><br>    int(M)  M表示总位数<br>    - 默认存在符号位，unsigned 属性修改<br>    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改<br>        例：int(5)   插入一个数&#x27;123&#x27;，补填后为&#x27;00123&#x27;<br>    - 在满足要求的情况下，越小越好。<br>    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。<br><br>-- b. 浮点型 ----------<br>    类型             字节     范围<br>    float(单精度)     4字节<br>    double(双精度)    8字节<br>    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。<br>        不同于整型，前后均会补填0.<br>    定义浮点型时，需指定总位数和小数位数。<br>        float(M, D)     double(M, D)<br>        M表示总位数，D表示小数位数。<br>        M和D的大小会决定浮点数的范围。不同于整型的固定范围。<br>        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。<br>        支持科学计数法表示。<br>        浮点数表示近似值。<br><br>-- c. 定点数 ----------<br>    decimal -- 可变长度<br>    decimal(M, D)   M也表示总位数，D表示小数位数。<br>    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。<br>    将浮点数转换为字符串来保存，每9位数字保存为4个字节。<br></code></pre></td></tr></table></figure><p><strong>2. 字符串类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- a. char, varchar ----------<br>    char    定长字符串，速度快，但浪费空间<br>    varchar 变长字符串，速度慢，但节省空间<br>    M表示能存储的最大长度，此长度是字符数，非字节数。<br>    不同的编码，所占用的空间不同。<br>    char,最多255个字符，与编码无关。<br>    varchar,最多65535字符，与编码有关。<br>    一条有效记录最大不能超过65535个字节。<br>        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符<br>    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。<br>    varchar 的最大有效长度由最大行大小和使用的字符集确定。<br>    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。<br>    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3<br><br>-- b. blob, text ----------<br>    blob 二进制字符串（字节字符串）<br>        tinyblob, blob, mediumblob, longblob<br>    text 非二进制字符串（字符字符串）<br>        tinytext, text, mediumtext, longtext<br>    text 在定义时，不需要定义长度，也不会计算总长度。<br>    text 类型在定义时，不可给default值<br><br>-- c. binary, varbinary ----------<br>    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。<br>    char, varchar, text 对应 binary, varbinary, blob.<br></code></pre></td></tr></table></figure><p><strong>3. 日期时间类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。<br>datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59<br>date        3字节    日期         1000-01-01 到 9999-12-31<br>timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07<br>time        3字节    时间         -838:59:59 到 838:59:59<br>year        1字节    年份         1901 - 2155<br><br>datetime    YYYY-MM-DD hh:mm:ss<br>timestamp   YY-MM-DD hh:mm:ss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>date        YYYY-MM-DD<br>            YY-MM-DD<br>            YYYYMMDD<br>            YYMMDD<br>            YYYYMMDD<br>            YYMMDD<br>time        hh:mm:ss<br>            hhmmss<br>            hhmmss<br>year        YYYY<br>            YY<br>            YYYY<br>            YY<br></code></pre></td></tr></table></figure><p><strong>4. 枚举和集合</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 枚举(enum) ----------<br>enum(val1, val2, val3...)<br>    在已知的值中进行单选。最大数量为65535.<br>    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。<br>    表现为字符串类型，存储却是整型。<br>    NULL值的索引是NULL。<br>    空字符串错误值的索引值是0。<br><br>-- 集合（set） ----------<br>set(val1, val2, val3...)<br>    create table tab ( gender set(&#x27;男&#x27;, &#x27;女&#x27;, &#x27;无&#x27;) );<br>    insert into tab values (&#x27;男, 女&#x27;);<br>    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。<br>    当创建表时，SET成员值的尾部空格将自动被删除。<br><br>/* 选择类型 */<br>-- PHP角度<br>1. 功能满足<br>2. 存储空间尽量小，处理效率更高<br>3. 考虑兼容问题<br></code></pre></td></tr></table></figure><p><strong>IP存储</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1. 只需存储，可用字符串<br>2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned<br>    1) PHP函数转换<br>        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。<br>        利用sprintf函数格式化字符串<br>        sprintf(&quot;%u&quot;, ip2long(&#x27;192.168.3.134&#x27;));<br>        然后用long2ip将整型转回IP字符串<br>    2) MySQL函数转换(无符号整型，UNSIGNED)<br>        INET_ATON(&#x27;127.0.0.1&#x27;) 将IP转为整型<br>        INET_NTOA(2130706433) 将整型转为IP<br></code></pre></td></tr></table></figure><h3 id="列属性（列约束）"><a href="#列属性（列约束）" class="headerlink" title="列属性（列约束）"></a>列属性（列约束）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1. PRIMARY 主键<br>    - 能唯一标识记录的字段，可以作为主键。<br>    - 一个表只能有一个主键。<br>    - 主键具有唯一性。<br>    - 声明字段时，用 primary key 标识。<br>        也可以在字段列表之后声明<br>            例：create table tab ( id int, stu varchar(10), primary key (id));<br>    - 主键字段的值不能为null。<br>    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。<br>        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));<br><br>2. UNIQUE 唯一索引（唯一约束）<br>    使得某字段的值也不能重复。<br><br>3. NULL 约束<br>    null不是数据类型，是列的一个属性。<br>    表示当前列是否可以为null，表示什么都没有。<br>    null, 允许为空。默认。<br>    not null, 不允许为空。<br>    insert into tab values (null, &#x27;val&#x27;);<br>        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null<br><br>4. DEFAULT 默认值属性<br>    当前字段的默认值。<br>    insert into tab values (default, &#x27;val&#x27;);    -- 此时表示强制使用默认值。<br>    create table tab ( add_time timestamp default current_timestamp );<br>        -- 表示将当前时间的时间戳设为默认值。<br>        current_date, current_time<br><br>5. AUTO_INCREMENT 自动增长约束<br>    自动增长必须为索引（主键或unique）<br>    只能存在一个字段为自动增长。<br>    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;<br><br>6. COMMENT 注释<br>    例：create table tab ( id int ) comment &#x27;注释内容&#x27;;<br><br>7. FOREIGN KEY 外键约束<br>    用于限制主表与从表数据完整性。<br>    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);<br>        -- 将表t1的t1_id外键关联到表t2的id字段。<br>        -- 每个外键都有一个名字，可以通过 constraint 指定<br><br>    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。<br><br>    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。<br><br>    MySQL中，可以对InnoDB引擎使用外键约束：<br>    语法：<br>    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]<br>    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。<br><br>    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。<br>    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：<br>    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。<br>    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。<br>    3. restrict，拒绝父表删除和更新。<br><br>    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。<br></code></pre></td></tr></table></figure><h3 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- Normal Format, NF<br>    - 每个表保存一个实体信息<br>    - 每个具有一个ID字段作为主键<br>    - ID主键 + 原子表<br>-- 1NF, 第一范式<br>    字段不能再分，就满足第一范式。<br>-- 2NF, 第二范式<br>    满足第一范式的前提下，不能出现部分依赖。<br>    消除符合主键就可以避免部分依赖。增加单列关键字。<br>-- 3NF, 第三范式<br>    满足第二范式的前提下，不能出现传递依赖。<br>    某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。<br>    将一个实体信息的数据放在一个表内实现。<br></code></pre></td></tr></table></figure><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT<br><br>a. select_expr<br>    -- 可以用 * 表示所有字段。<br>        select * from tb;<br>    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）<br>        select stu, 29+25, now() from tb;<br>    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。<br>        - 使用 as 关键字，也可省略 as.<br>        select stu+10 as add10 from tb;<br><br>b. FROM 子句<br>    用于标识查询来源。<br>    -- 可以为表起别名。使用as关键字。<br>        SELECT * FROM tb1 AS tt, tb2 AS bb;<br>    -- from子句后，可以同时出现多个表。<br>        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。<br>        SELECT * FROM tb1, tb2;<br>    -- 向优化符提示如何选择索引<br>        USE INDEX、IGNORE INDEX、FORCE INDEX<br>        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;<br>        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;<br><br>c. WHERE 子句<br>    -- 从from获得的数据源中进行筛选。<br>    -- 整型1表示真，0表示假。<br>    -- 表达式由运算符和运算数组成。<br>        -- 运算数：变量（字段）、值、函数返回值<br>        -- 运算符：<br>            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,<br>            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor<br>            is/is not 加上ture/false/unknown，检验某个值的真假<br>            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较<br><br>d. GROUP BY 子句, 分组子句<br>    GROUP BY 字段/别名 [排序方式]<br>    分组后会进行排序。升序：ASC，降序：DESC<br><br>    以下[合计函数]需配合 GROUP BY 使用：<br>    count 返回不同的非NULL值数目  count(*)、count(字段)<br>    sum 求和<br>    max 求最大值<br>    min 求最小值<br>    avg 求平均值<br>    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。<br><br>e. HAVING 子句，条件子句<br>    与 where 功能、用法相同，执行时机不同。<br>    where 在开始时执行检测数据，对原数据进行过滤。<br>    having 对筛选出的结果再次进行过滤。<br>    having 字段必须是查询出来的，where 字段必须是数据表存在的。<br>    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。<br>    where 不可以使用合计函数。一般需用合计函数才会用 having<br>    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。<br><br>f. ORDER BY 子句，排序子句<br>    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...<br>    升序：ASC，降序：DESC<br>    支持多个字段的排序。<br><br>g. LIMIT 子句，限制结果数量子句<br>    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。<br>    limit 起始位置, 获取条数<br>    省略第一个参数，表示从索引0开始。limit 获取条数<br><br>h. DISTINCT, ALL 选项<br>    distinct 去除重复记录<br>    默认为 all, 全部记录<br></code></pre></td></tr></table></figure><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><blockquote><p>将多个select查询的结果组合成一个结果集合。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT ... UNION [ALL|DISTINCT] SELECT ...<br>默认 DISTINCT 方式，即所有返回的行都是唯一的<br>建议，对每个SELECT查询加上小括号包裹。<br>ORDER BY 排序时，需加上 LIMIT 进行结合。<br>需要各select查询的字段数量一样。<br>每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>子查询需用括号包裹。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- from型<br>    from后要求是一个表，必须给子查询结果取个别名。<br>    - 简化每个查询内的条件。<br>    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。<br>    - 子查询返回一个表，表型子查询。<br>    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;<br>-- where型<br>    - 子查询返回一个值，标量子查询。<br>    - 不需要给子查询取别名。<br>    - where子查询内的表，不能直接用以更新。<br>    select * from tb where money = (select max(money) from tb);<br>    -- 列子查询<br>        如果子查询结果返回的是一列。<br>        使用 in 或 not in 完成查询<br>        exists 和 not exists 条件<br>            如果子查询返回数据，则返回1或0。常用于判断条件。<br>            select column1 from t1 where exists (select * from t2);<br>    -- 行子查询<br>        查询条件是一个行。<br>        select * from t1 where (id, gender) in (select id, gender from t2);<br>        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)<br>        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。<br><br>    -- 特殊运算符<br>    != all()    相当于 not in<br>    = some()    相当于 in。any 是 some 的别名<br>    != some()   不等同于 not in，不等于其中某一个。<br>    all, some 可以配合其他运算符一起使用。<br></code></pre></td></tr></table></figure><h3 id="连接查询-join-96-96-96-mysql"><a href="#连接查询-join-96-96-96-mysql" class="headerlink" title="连接查询(join)&#96;&#96;&#96;mysql"></a>连接查询(join)&#96;&#96;&#96;mysql</h3><blockquote><p>将多个表的字段进行连接，可以指定连接条件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 内连接(inner join)<br>    - 默认就是内连接，可省略inner。<br>    - 只有数据存在时才能发送连接。即连接结果不能出现空行。<br>    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）<br>    也可用where表示连接条件。<br>    还有 using, 但需字段名相同。 using(字段名)<br><br>-- 交叉连接 cross join<br>   即，没有条件的内连接。<br>   select * from tb1 cross join tb2;<br>-- 外连接(outer join)<br>    - 如果数据不存在，也会出现在连接结果中。<br>    -- 左外连接 left join<br>        如果数据不存在，左表记录会出现，而右表为null填充<br>    -- 右外连接 right join<br>        如果数据不存在，右表记录会出现，而左表为null填充<br>-- 自然连接(natural join)<br>    自动判断连接条件完成连接。<br>    相当于省略了using，会自动查找相同字段名。<br>    natural join<br>    natural left join<br>    natural right join<br><br>select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;<br></code></pre></td></tr></table></figure><h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据<br>load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据<br>    生成的数据默认的分隔符是制表符<br>    local未指定，则数据文件必须在服务器上<br>    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理<br>-- 控制格式<br>fields  控制字段格式<br>默认：fields terminated by &#x27;\t&#x27; enclosed by &#x27;&#x27; escaped by &#x27;\\&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br>    enclosed by &#x27;char&#x27;      -- 包裹<br>    escaped by &#x27;char&#x27;       -- 转义<br>    -- 示例：<br>        SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27;<br>        FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;<br>        LINES TERMINATED BY &#x27;\n&#x27;<br>        FROM test_table;<br>lines   控制行格式<br>默认：lines terminated by &#x27;\n&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br></code></pre></td></tr></table></figure><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select语句获得的数据可以用insert插入。<br><br>可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。<br>    或者使用set语法。<br>    INSERT INTO tbl_name SET field=value,...；<br><br>可以一次性使用多个值，采用(), (), ();的形式。<br>    INSERT INTO tbl_name VALUES (), (), ();<br><br>可以在列值指定时，使用表达式。<br>    INSERT INTO tbl_name VALUES (field_value, 10+10, now());<br>可以使用一个特殊值 DEFAULT，表示该列使用默认值。<br>    INSERT INTO tbl_name VALUES (field_value, DEFAULT);<br><br>可以通过一个查询的结果，作为需要插入的值。<br>    INSERT INTO tbl_name SELECT ...;<br><br>可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。<br>    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;<br></code></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]<br><br>按照条件删除。where<br><br>指定删除的最多记录数。limit<br><br>可以通过排序条件删除。order by + limit<br><br>支持多表删除，使用类似连接语法。<br>delete from 需要删除数据多表1，表2 using 表连接操作 条件。<br></code></pre></td></tr></table></figure><h3 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">TRUNCATE [TABLE] tbl_name<br>清空数据<br>删除重建表<br><br>区别：<br>1，truncate 是删除表再创建，delete 是逐条删除<br>2，truncate 重置auto_increment的值。而delete不会<br>3，truncate 不知道删除了几条，而delete知道。<br>4，当被用于带分区的表时，truncate 会保留分区<br></code></pre></td></tr></table></figure><h3 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h3><blockquote><p>备份，将数据的结构与表内数据保存起来。<br>利用 mysqldump 指令完成。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 导出<br>mysqldump [options] db_name [tables]<br>mysqldump [options] ---database DB1 [DB2 DB3...]<br>mysqldump [options] --all--database<br><br><br>1. 导出一张表<br>　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)<br>2. 导出多张表<br>　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)<br>3. 导出所有表<br>　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)<br>4. 导出一个库<br>　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)<br><br>可以-w携带WHERE条件<br><br>-- 导入<br>1. 在登录mysql的情况下：<br>　　source  备份文件<br>2. 在不登录的情况下<br>　　mysql -u用户名 -p密码 库名 &lt; 备份文件<br></code></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><blockquote><p>什么是视图：<br>    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>    视图具有表结构文件，但不存在数据文件。<br>    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建视图<br>CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement<br>    - 视图名必须唯一，同时不能与表重名。<br>    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。<br>    - 可以指定视图执行的算法，通过ALGORITHM指定。<br>    - column_list如果存在，则数目必须等于SELECT语句检索的列数<br><br>-- 查看结构<br>    SHOW CREATE VIEW view_name<br><br>-- 删除视图<br>    - 删除视图后，数据依然存在。<br>    - 可同时删除多个视图。<br>    DROP VIEW [IF EXISTS] view_name ...<br><br>-- 修改视图结构<br>    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。<br>    ALTER VIEW view_name [(column_list)] AS select_statement<br><br>-- 视图作用<br>    1. 简化业务逻辑<br>    2. 对客户端隐藏真实的表结构<br><br>-- 视图算法(ALGORITHM)<br>    MERGE       合并<br>        将视图的查询语句，与外部查询需要先合并再执行！<br>    TEMPTABLE   临时表<br>        将视图执行完毕后，形成临时表，再做外层查询！<br>    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。<br></code></pre></td></tr></table></figure><h3 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h3><blockquote><p>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs mysql">- 支持连续SQL的集体成功或集体撤销。<br>- 事务是数据库在数据晚自习方面的一个功能。<br>- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。<br>- InnoDB被称为事务安全型引擎。<br><br>-- 事务开启<br>    START TRANSACTION; 或者 BEGIN;<br>    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。<br>-- 事务提交<br>    COMMIT;<br>-- 事务回滚<br>    ROLLBACK;<br>    如果部分操作发生问题，映射到事务开启前。<br><br>-- 事务的特性<br>    1. 原子性（Atomicity）<br>        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。<br>    2. 一致性（Consistency）<br>        事务前后数据的完整性必须保持一致。<br>        - 事务开始和结束时，外部数据一致<br>        - 在整个事务过程中，操作是连续的<br>    3. 隔离性（Isolation）<br>        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。<br>    4. 持久性（Durability）<br>        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。<br><br>-- 事务的实现<br>    1. 要求是事务支持的表类型<br>    2. 执行一组相关的操作前开启事务<br>    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。<br><br>-- 事务的原理<br>    利用InnoDB的自动提交(autocommit)特性完成。<br>    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。<br>    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。<br><br>-- 注意<br>    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。<br>    2. 事务不能被嵌套<br><br>-- 保存点<br>    SAVEPOINT 保存点名称 -- 设置一个事务保存点<br>    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点<br>    RELEASE SAVEPOINT 保存点名称 -- 删除保存点<br><br>-- InnoDB自动提交特性设置<br>    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。<br>    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。<br>    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，<br>        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)<br>        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)<br></code></pre></td></tr></table></figure><h3 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h3><blockquote><p>表锁定只用于防止其它客户端进行不正当地读取和写入<br>MyISAM 支持表锁，InnoDB 支持行锁</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 锁定<br>    LOCK TABLES tbl_name [AS alias]<br>-- 解锁<br>    UNLOCK TABLES<br></code></pre></td></tr></table></figure><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><blockquote><p>触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象<br>监听：记录的增加、修改、删除。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建触发器<br>CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt<br>    参数：<br>    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。<br>    trigger_event指明了激活触发程序的语句的类型<br>        INSERT：将新行插入表时激活触发程序<br>        UPDATE：更改某一行时激活触发程序<br>        DELETE：从表中删除某一行时激活触发程序<br>    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。<br>    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构<br><br>-- 删除<br>DROP TRIGGER [schema_name.]trigger_name<br><br>可以使用old和new代替旧的和新的数据<br>    更新操作，更新前是old，更新后是new.<br>    删除操作，只有old.<br>    增加操作，只有new.<br><br>-- 注意<br>    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。<br><br><br>-- 字符连接函数<br>concat(str1,str2,...])<br>concat_ws(separator,str1,str2,...)<br><br>-- 分支语句<br>if 条件 then<br>    执行语句<br>elseif 条件 then<br>    执行语句<br>else<br>    执行语句<br>end if;<br><br>-- 修改最外层语句结束符<br>delimiter 自定义结束符号<br>    SQL语句<br>自定义结束符号<br><br>delimiter ;     -- 修改回原来的分号<br><br>-- 语句块包裹<br>begin<br>    语句块<br>end<br><br>-- 特殊的执行<br>1. 只要添加记录，就会触发程序。<br>2. Insert into on duplicate key update 语法会触发：<br>    如果没有重复记录，会触发 before insert, after insert;<br>    如果有重复记录并更新，会触发 before insert, before update, after update;<br>    如果有重复记录但是没有发生更新，则触发 before insert, before update<br>3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert<br></code></pre></td></tr></table></figure><h3 id="SQL编程"><a href="#SQL编程" class="headerlink" title="SQL编程"></a>SQL编程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs mysql">--// 局部变量 ----------<br>-- 变量声明<br>    declare var_name[,...] type [default value]<br>    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。<br><br>-- 赋值<br>    使用 set 和 select into 语句为变量赋值。<br><br>    - 注意：在函数内是可以使用全局变量（用户自定义的变量）<br><br><br>--// 全局变量 ----------<br>-- 定义、赋值<br>set 语句可以定义并为变量赋值。<br>set @var = value;<br>也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。<br>还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。<br>select @var:=20;<br>select @v1:=id, @v2=name from t1 limit 1;<br>select * from tbl_name where @var:=30;<br><br>select into 可以将表中查询获得的数据赋给变量。<br>    -| select max(height) into @max_height from tb;<br><br>-- 自定义变量名<br>为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。<br>@var=10;<br><br>    - 变量被定义后，在整个会话周期都有效（登录到退出）<br><br><br>--// 控制结构 ----------<br>-- if语句<br>if search_condition then<br>    statement_list   <br>[elseif search_condition then<br>    statement_list]<br>...<br>[else<br>    statement_list]<br>end if;<br><br>-- case语句<br>CASE value WHEN [compare-value] THEN result<br>[WHEN [compare-value] THEN result ...]<br>[ELSE result]<br>END<br><br><br>-- while循环<br>[begin_label:] while search_condition do<br>    statement_list<br>end while [end_label];<br><br>- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。<br><br>    -- 退出循环<br>        退出整个循环 leave<br>        退出当前循环 iterate<br>        通过退出的标签决定退出哪个循环<br><br><br>--// 内置函数 ----------<br>-- 数值函数<br>abs(x)          -- 绝对值 abs(-10.9) = 10<br>format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46<br>ceil(x)         -- 向上取整 ceil(10.1) = 11<br>floor(x)        -- 向下取整 floor (10.1) = 10<br>round(x)        -- 四舍五入去整<br>mod(m, n)       -- m%n m mod n 求余 10%3=1<br>pi()            -- 获得圆周率<br>pow(m, n)       -- m^n<br>sqrt(x)         -- 算术平方根<br>rand()          -- 随机数<br>truncate(x, d)  -- 截取d位小数<br><br>-- 时间日期函数<br>now(), current_timestamp();     -- 当前日期时间<br>current_date();                 -- 当前日期<br>current_time();                 -- 当前时间<br>date(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取日期部分<br>time(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取时间部分<br>date_format(&#x27;yyyy-mm-dd hh:ii:ss&#x27;, &#x27;%d %y %a %d %m %b %j&#x27;); -- 格式化时间<br>unix_timestamp();               -- 获得unix时间戳<br>from_unixtime();                -- 从时间戳获得时间<br><br>-- 字符串函数<br>length(string)          -- string长度，字节<br>char_length(string)     -- string的字符个数<br>substring(str, position [,length])      -- 从str的position开始,取length个字符<br>replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str<br>instr(string ,substring)    -- 返回substring首次在string中出现的位置<br>concat(string [,...])   -- 连接字串<br>charset(str)            -- 返回字串字符集<br>lcase(string)           -- 转换成小写<br>left(string, length)    -- 从string2中的左边起取length个字符<br>load_file(file_name)    -- 从文件读取内容<br>locate(substring, string [,start_position]) -- 同instr,但可指定开始位置<br>lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length<br>ltrim(string)           -- 去除前端空格<br>repeat(string, count)   -- 重复count次<br>rpad(string, length, pad)   --在str后用pad补充,直到长度为length<br>rtrim(string)           -- 去除后端空格<br>strcmp(string1 ,string2)    -- 逐字符比较两字串大小<br><br>-- 流程函数<br>case when [condition] then result [when [condition] then result ...] [else result] end   多分支<br>if(expr1,expr2,expr3)  双分支。<br><br>-- 聚合函数<br>count()<br>sum();<br>max();<br>min();<br>avg();<br>group_concat()<br><br>-- 其他常用函数<br>md5();<br>default();<br><br>--// 存储函数，自定义函数 ----------<br>-- 新建<br>    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型<br>        函数体<br><br>    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。<br>    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。<br>    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。<br>    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。<br>    - 多条语句应该使用 begin...end 语句块包含。<br>    - 一定要有 return 返回值语句。<br><br>-- 删除<br>    DROP FUNCTION [IF EXISTS] function_name;<br><br>-- 查看<br>    SHOW FUNCTION STATUS LIKE &#x27;partten&#x27;<br>    SHOW CREATE FUNCTION function_name;<br><br>-- 修改<br>    ALTER FUNCTION function_name 函数选项<br><br><br>--// 存储过程，自定义功能 ----------<br>-- 定义<br>存储存储过程 是一段代码（过程），存储在数据库中的sql组成。<br>一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。<br>而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。<br><br>-- 创建<br>CREATE PROCEDURE sp_name (参数列表)<br>    过程体<br><br>参数列表：不同于函数的参数列表，需要指明参数类型<br>IN，表示输入型<br>OUT，表示输出型<br>INOUT，表示混合型<br><br>注意，没有返回值。<br></code></pre></td></tr></table></figure><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><blockquote><p>存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。<br>调用：CALL 过程名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 注意<br>- 没有返回值。<br>- 只能单独调用，不可夹杂在其他语句中<br><br>-- 参数<br>IN|OUT|INOUT 参数名 数据类型<br>IN      输入：在调用过程中，将数据输入到过程体内部的参数<br>OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端<br>INOUT   输入输出：既可输入，也可输出<br><br>-- 语法<br>CREATE PROCEDURE 过程名 (参数列表)<br>BEGIN<br>    过程体<br>END<br></code></pre></td></tr></table></figure><h3 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- root密码重置<br>1. 停止MySQL服务<br>2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;<br>    [Windows] mysqld --skip-grant-tables<br>3. use mysql;<br>4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;<br>5. FLUSH PRIVILEGES;<br><br>用户信息表：mysql.user<br>-- 刷新权限<br>FLUSH PRIVILEGES;<br>-- 增加用户<br>CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)<br>    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。<br>    - 只能创建用户，不能赋予权限。<br>    - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;<br>    - 密码也需引号，纯数字密码也要加引号<br>    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD<br>-- 重命名用户<br>RENAME USER old_user TO new_user<br>-- 设置密码<br>SET PASSWORD = PASSWORD(&#x27;密码&#x27;)  -- 为当前用户设置密码<br>SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;) -- 为指定用户设置密码<br>-- 删除用户<br>DROP USER 用户名<br>-- 分配权限/添加用户<br>GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#x27;password&#x27;]<br>    - all privileges 表示所有权限<br>    - *.* 表示所有库的所有表<br>    - 库名.表名 表示某库下面的某表<br>    GRANT ALL PRIVILEGES ON `pms`.* TO &#x27;pms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;pms0817&#x27;;<br>-- 查看权限<br>SHOW GRANTS FOR 用户名<br>    -- 查看当前用户权限<br>    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();<br>-- 撤消权限<br>REVOKE 权限列表 ON 表名 FROM 用户名<br>REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限<br>-- 权限层级<br>-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。<br>全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user<br>    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。<br>数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host<br>    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。<br>表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv<br>    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。<br>列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv<br>    当使用REVOKE时，您必须指定与被授权列相同的列。<br>-- 权限列表<br>ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限<br>ALTER   -- 允许使用ALTER TABLE<br>ALTER ROUTINE   -- 更改或取消已存储的子程序<br>CREATE  -- 允许使用CREATE TABLE<br>CREATE ROUTINE  -- 创建已存储的子程序<br>CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE<br>CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。<br>CREATE VIEW     -- 允许使用CREATE VIEW<br>DELETE  -- 允许使用DELETE<br>DROP    -- 允许使用DROP TABLE<br>EXECUTE     -- 允许用户运行已存储的子程序<br>FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE<br>INDEX   -- 允许使用CREATE INDEX和DROP INDEX<br>INSERT  -- 允许使用INSERT<br>LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES<br>PROCESS     -- 允许使用SHOW FULL PROCESSLIST<br>REFERENCES  -- 未被实施<br>RELOAD  -- 允许使用FLUSH<br>REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址<br>REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）<br>SELECT  -- 允许使用SELECT<br>SHOW DATABASES  -- 显示所有数据库<br>SHOW VIEW   -- 允许使用SHOW CREATE VIEW<br>SHUTDOWN    -- 允许使用mysqladmin shutdown<br>SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。<br>UPDATE  -- 允许使用UPDATE<br>USAGE   -- “无权限”的同义词<br>GRANT OPTION    -- 允许授予权限<br></code></pre></td></tr></table></figure><h3 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 分析和存储表的关键字分布<br>ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...<br>-- 检查一个或多个表是否有错误<br>CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;<br>-- 整理数据文件的碎片<br>OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！<br>2. 每个库目录存在一个保存当前数据库的选项文件db.opt。<br>3. 注释：<br>    单行注释 # 注释内容<br>    多行注释 /* 注释内容 */<br>    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)<br>4. 模式通配符：<br>    _   任意单个字符<br>    %   任意多个字符，甚至包括零字符<br>    单引号需要进行转义 \&#x27;<br>5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。<br>6. SQL对大小写不敏感<br>7. 清除已有语句：\c<br></code></pre></td></tr></table></figure><p>原文连接：<a href="https://shockerli.net/post/1000-line-mysql-note/">https://shockerli.net/post/1000-line-mysql-note/</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库设计规范</title>
    <link href="/20221128/98e49fdd16a6.html"/>
    <url>/20221128/98e49fdd16a6.html</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据库设计规范"><a href="#MySQL数据库设计规范" class="headerlink" title="MySQL数据库设计规范"></a>MySQL数据库设计规范</h1><p>转载原文：<a href="https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95">https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95</a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 规范背景与目的<br><br><span class="hljs-attribute">2</span>. 设计规范<br><br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span> 数据库设计<br><br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> 库名<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span> 表结构<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span> 列数据类型优化<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span> 索引设计<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">5</span> 分库分表、分区表<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">6</span> 字符集<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">7</span> 程序DAO层设计建议<br><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">8</span> 一个规范的建表语句示例<br><br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span> SQL编写<br><br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> DML语句<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> 多表连接<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span> 事务<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span> 排序和分组<br><span class="hljs-attribute">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">5</span> 线上禁止使用的SQL语句<br></code></pre></td></tr></table></figure><h2 id="1-规范背景与目的"><a href="#1-规范背景与目的" class="headerlink" title="1. 规范背景与目的"></a>1. 规范背景与目的</h2><p>MySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p><h2 id="2-设计规范"><a href="#2-设计规范" class="headerlink" title="2. 设计规范"></a>2. 设计规范</h2><h3 id="2-1-数据库设计"><a href="#2-1-数据库设计" class="headerlink" title="2.1 数据库设计"></a>2.1 数据库设计</h3><p>以下所有规范会按照<strong>【高危】</strong>、<strong>【强制】</strong>、<strong>【建议】</strong>三个级别进行标注，遵守优先级从高到低。</p><p>对于不满足<strong>【高危】</strong>和<strong>【强制】</strong>两个级别的设计，DBA会强制打回要求修改。</p><h3 id="2-1-1-库名"><a href="#2-1-1-库名" class="headerlink" title="2.1.1 库名"></a>2.1.1 库名</h3><ol><li><strong>【强制】</strong>库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</li><li><strong>【强制】</strong>库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</li><li><strong>【强制】</strong>一般分库名称命名格式是<code>库通配名_编号</code>，编号从0开始递增，比如<code>wenda_001</code>以时间进行分库的名称格式是“库通配名_时间”</li><li><strong>【强制】</strong>创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：<code>create database db1 default character set utf8;</code>。</li></ol><h3 id="2-1-2-表结构"><a href="#2-1-2-表结构" class="headerlink" title="2.1.2 表结构"></a>2.1.2 表结构</h3><ol><li><strong>【强制】</strong>表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</li><li><strong>【强制】</strong>表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。</li><li><strong>【强制】</strong>创建表时必须显式指定字符集为utf8或utf8mb4。</li><li><strong>【强制】</strong>创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB&#x2F;MyISAM&#x2F;Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</li><li><strong>【强制】</strong>建表必须有comment</li><li><strong>【建议】</strong>建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为<code>auto_increment(2)</code>标识表里每一行主体的字段不要设为主键，建议设为其他字段如<code>user_id</code>，<code>order_id</code>等，并建立unique key索引（可参考<code>cdb.teacher</code>表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I&#x2F;O，性能下降。</li><li><strong>【建议】</strong>核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段<code>create_time</code>和最后更新时间字段<code>update_time</code>，便于查问题。</li><li><strong>【建议】</strong>表中所有字段必须都是<code>NOT NULL</code>属性，业务可以根据需要定义<code>DEFAULT</code>值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li><li><strong>【建议】</strong>建议对表里的<code>blob</code>、<code>text</code>等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</li><li><strong>【建议】</strong>反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如<code>user_name</code>属性在<code>user_account</code>，<code>user_login_log</code>等表里冗余一份，减少join查询。</li><li><strong>【强制】</strong>中间表用于保留中间结果集，名称必须以<code>tmp_</code>开头。备份表用于备份或抓取源表快照，名称必须以<code>bak_</code>开头。中间表和备份表定期清理。</li><li><strong>【强制】</strong>对于超过100W行的大表进行<code>alter table</code>，必须经过DBA审核，并在业务低峰期执行。因为<code>alter table</code>会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li></ol><h3 id="2-1-3-列数据类型优化"><a href="#2-1-3-列数据类型优化" class="headerlink" title="2.1.3 列数据类型优化"></a>2.1.3 列数据类型优化</h3><ol><li><strong>【建议】</strong>表中的自增列（<code>auto_increment</code>属性），推荐使用<code>bigint</code>类型。因为无符号<code>int</code>存储范围为<code>-2147483648~2147483647</code>（大约21亿左右），溢出后会导致报错。</li><li><strong>【建议】</strong>业务中选择性很少的状态<code>status</code>、类型<code>type</code>等字段推荐使用<code>tinytint</code>或者<code>smallint</code>类型节省存储空间。</li><li><strong>【建议】</strong>业务中IP地址字段推荐使用<code>int</code>类型，不推荐用<code>char(15)</code>。因为<code>int</code>只占4字节，可以用如下函数相互转换，而<code>char(15)</code>占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：<code>select inet_aton(&#39;192.168.2.12&#39;); select inet_ntoa(3232236044);</code> PHP: <code>ip2long(‘192.168.2.12’); long2ip(3530427185);</code></li><li><strong>【建议】</strong>不推荐使用<code>enum</code>，<code>set</code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用<code>tinyint</code>或<code>smallint</code>。</li><li><strong>【建议】</strong>不推荐使用<code>blob</code>，<code>text</code>等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在<code>overflow-page</code>里。不幸的是在<code>compact</code>行格式下，原始<code>page</code>和<code>overflow-page</code>都会加载。</li><li><strong>【建议】</strong>存储金钱的字段，建议用<code>int</code>，程序端乘以100和除以100进行存取。因为<code>int</code>占用4字节，而<code>double</code>占用8字节，空间浪费。</li><li><strong>【建议】</strong>文本数据尽量用<code>varchar</code>存储。因为<code>varchar</code>是变长存储，比<code>char</code>更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为<code>mediumtext</code>字段。而<code>text</code>在utf8字符集下最多存21844个字符，<code>mediumtext</code>最多存2^24&#x2F;3个字符，<code>longtext</code>最多存2^32个字符。一般建议用<code>varchar</code>类型，字符数不要超过2700。</li><li><strong>【建议】</strong>时间类型尽量选取<code>timestamp</code>。因为<code>datetime</code>占用8字节，<code>timestamp</code>仅占用4字节，但是范围为<code>1970-01-01 00:00:01</code>到<code>2038-01-01 00:00:00</code>。更为高阶的方法，选用<code>int</code>来存储时间，使用SQL函数<code>unix_timestamp()</code>和<code>from_unixtime()</code>来进行转换。</li></ol><p>详细存储大小参考原文：<a href="https://blog.csdn.net/HXNLYW/article/details/100104768">https://blog.csdn.net/HXNLYW/article/details/100104768</a></p><h4 id="整数型数据类型"><a href="#整数型数据类型" class="headerlink" title="整数型数据类型"></a>整数型数据类型</h4><table><thead><tr><th align="center">类型名称</th><th align="center">说明</th><th align="center">存储大小</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">很小的正数（一般用于boolean存储）</td><td align="center">1个字节</td><td align="center">-128<del>127<br />unsigned：0</del>255</td></tr><tr><td align="center">SMALLINT</td><td align="center">小正数</td><td align="center">2个字节</td><td align="center">-32768<del>32767<br />unsigned：0</del>65535</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">中等大小的正数</td><td align="center">3个字节</td><td align="center">-2^23 ~2^23-1<br/>unsigned: 2^24 -1</td></tr><tr><td align="center">INT(INTEGER)</td><td align="center">普通大小的正数</td><td align="center">4个字节</td><td align="center">-2^31 ~2^31-1<br />unsigned: 2^32 -1</td></tr><tr><td align="center">BIGINT</td><td align="center">大正数(一般用于主键)</td><td align="center">8个字节</td><td align="center">-2^63 ~2^63-1<br/>unsigned: 2^64 -1</td></tr></tbody></table><h4 id="小数型数据类型"><a href="#小数型数据类型" class="headerlink" title="小数型数据类型"></a>小数型数据类型</h4><table><thead><tr><th align="center">类型名称</th><th align="center">说明</th><th align="center">存储大小</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">FLOAT(M,N)</td><td align="center">M表示总共位数，N表示小数位数（单精度浮点数）</td><td align="center">4个字节</td><td align="center">±1.175494351E – 38</td></tr><tr><td align="center">DOUBLE(M,N)</td><td align="center">双精度浮点数</td><td align="center">8个字节</td><td align="center">±2.2250738585072014E – 308</td></tr><tr><td align="center">DECIMAL(M,D)</td><td align="center">压缩的“严格”定点数</td><td align="center">M+2个字节</td><td align="center">可变；其值的范围依赖于M 和D</td></tr></tbody></table><h4 id="字符串数据类型"><a href="#字符串数据类型" class="headerlink" title="字符串数据类型"></a>字符串数据类型</h4><table><thead><tr><th align="center">类型名称</th><th align="center">说明</th><th align="center">存储大小</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">CHAR(N)</td><td align="center">固定长度</td><td align="center">N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2）</td><td align="center">0~255字符</td></tr><tr><td align="center">VARCHAR(N)</td><td align="center">可变长度</td><td align="center">实际存储大小</td><td align="center">0~65535字节</td></tr><tr><td align="center">TEXT</td><td align="center">文本</td><td align="center">实际存储大小</td><td align="center">0~65535字节</td></tr><tr><td align="center">LONGTEXT</td><td align="center">长文本</td><td align="center">实际存储大小</td><td align="center">0~2^32-1字节</td></tr></tbody></table><h4 id="日期数据类型"><a href="#日期数据类型" class="headerlink" title="日期数据类型"></a>日期数据类型</h4><table><thead><tr><th>类型名称</th><th>说明</th><th>存储大小</th><th>取值范围</th></tr></thead><tbody><tr><td>DATE</td><td>存储日期值(yyyy-MM-dd)</td><td>3个字节</td><td>1000-01-01~9999-12-31</td></tr><tr><td>TIME</td><td>存储时分秒(HH:mm:ss)</td><td>3个字节</td><td>00:00:00~23:59:59</td></tr><tr><td>DATETIME</td><td>存储日期+时间(yyyy-MM-dd HH:mm:ss)</td><td>8个字节</td><td>1000-01-01 00:00:00~9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss)</td><td>4个字节</td><td>1970-01-01 00:00:01~2038-01-19 03:14:07</td></tr></tbody></table><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><blockquote><p> UTF-8   ： 一个英文&#x2F;数字字符占1个字节，一个中文（含繁体）字符占3个字节。<br>Unicode： 一个英文&#x2F;数字字符占2个字节，一个中文（含繁体）字符占2个字节。<br>符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。</p></blockquote><blockquote><p>char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。<br>varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。</p><p>1）char的存取速度优于varchar<br>2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间<br>   varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间<br>3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。</p></blockquote><h3 id="2-1-4-索引设计"><a href="#2-1-4-索引设计" class="headerlink" title="2.1.4 索引设计"></a>2.1.4 索引设计</h3><ol><li><strong>【强制】</strong>InnoDB表必须主键为<code>id int/bigint auto_increment</code>,且主键值禁止被更新。</li><li><strong>【建议】</strong>主键的名称以“<code>pk_</code>”开头，唯一键以“<code>uk_</code>”或“<code>uq_</code>”开头，普通索引以“<code>idx_</code>”开头，一律使用小写格式，以表名&#x2F;字段的名称或缩写作为后缀。</li><li><strong>【强制】</strong>InnoDB和MyISAM存储引擎表，索引类型必须为<code>BTREE</code>；MEMORY表可以根据需要选择<code>HASH</code>或者<code>BTREE</code>类型索引。</li><li><strong>【强制】</strong>单个索引中每个索引记录的长度不能超过64KB。</li><li><strong>【建议】</strong>单个表上的索引个数不能超过7个。</li><li><strong>【建议】</strong>在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列<code>userid</code>的区分度可由<code>select count(distinct userid)</code>计算出来。</li><li><strong>【建议】</strong>在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</li><li><strong>【建议】</strong>建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在<code>key(a,b)</code>，则<code>key(a)</code>为冗余索引，需要删除。</li></ol><h3 id="2-1-5-分库分表、分区表"><a href="#2-1-5-分库分表、分区表" class="headerlink" title="2.1.5 分库分表、分区表"></a>2.1.5 分库分表、分区表</h3><ol><li><strong>【强制】</strong>分区表的分区字段（<code>partition-key</code>）必须有索引，或者是组合索引的首列。</li><li><strong>【强制】</strong>单个分区表中的分区（包括子分区）个数不能超过1024。</li><li><strong>【强制】</strong>上线前RD或者DBA必须指定分区表的创建、清理策略。</li><li><strong>【强制】</strong>访问分区表的SQL必须包含分区键。</li><li><strong>【建议】</strong>单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</li><li><strong>【强制】</strong>对于分区表执行<code>alter table</code>操作，必须在业务低峰期执行。</li><li><strong>【强制】</strong>采用分库策略的，库的数量不能超过1024</li><li><strong>【强制】</strong>采用分表策略的，表的数量不能超过4096</li><li><strong>【建议】</strong>单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</li><li><strong>【建议】</strong>水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li></ol><h3 id="2-1-6-字符集"><a href="#2-1-6-字符集" class="headerlink" title="2.1.6 字符集"></a>2.1.6 字符集</h3><ol><li><strong>【强制】</strong>数据库本身库、表、列所有字符集必须保持一致，为<code>utf8</code>或<code>utf8mb4</code>。</li><li><strong>【强制】</strong>前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为<code>utf8</code>。</li></ol><h3 id="2-1-7-程序层DAO设计建议"><a href="#2-1-7-程序层DAO设计建议" class="headerlink" title="2.1.7 程序层DAO设计建议"></a>2.1.7 程序层DAO设计建议</h3><ol><li><strong>【建议】</strong>新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li><li><strong>【建议】</strong>前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li><li><strong>【建议】</strong>前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</li><li><strong>【建议】</strong>对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li><li><strong>【建议】</strong>对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</li><li><strong>【建议】</strong>在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li><li><strong>【建议】</strong>多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</li><li><strong>【建议】</strong>业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li><li><strong>【建议】</strong>对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</li></ol><h3 id="2-1-8-一个规范的建表语句示例"><a href="#2-1-8-一个规范的建表语句示例" class="headerlink" title="2.1.8 一个规范的建表语句示例"></a>2.1.8 一个规范的建表语句示例</h3><p>一个较为规范的建表语句为：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-keyword">user</span> (<br>  <span class="hljs-symbol">`id`</span> bigint(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-symbol">`user_id`</span> bigint(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT ‘用户id’<br>  <span class="hljs-symbol">`username`</span> varchar(<span class="hljs-number">45</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;真实姓名&#x27;</span>,<br>  <span class="hljs-symbol">`email`</span> varchar(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT ‘用户邮箱’,<br>  <span class="hljs-symbol">`nickname`</span> varchar(<span class="hljs-number">45</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;昵称&#x27;</span>,<br>  <span class="hljs-symbol">`avatar`</span> int(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;头像&#x27;</span>,<br>  <span class="hljs-symbol">`birthday`</span> date <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;生日&#x27;</span>,<br>  <span class="hljs-symbol">`sex`</span> tinyint(<span class="hljs-number">4</span>) DEFAULT <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span>,<br>  <span class="hljs-symbol">`short_introduce`</span> varchar(<span class="hljs-number">150</span>) DEFAULT <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;一句话介绍自己，最多50个汉字&#x27;</span>,<br>  <span class="hljs-symbol">`user_resume`</span> varchar(<span class="hljs-number">300</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT <span class="hljs-string">&#x27;用户提交的简历存放地址&#x27;</span>,<br>  <span class="hljs-symbol">`user_register_ip`</span> int <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT ‘用户注册时的源ip’,<br>  <span class="hljs-symbol">`create_time`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT ‘用户记录创建的时间’,<br>  <span class="hljs-symbol">`update_time`</span> timestamp <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT ‘用户资料修改的时间’,<br>  <span class="hljs-symbol">`user_review_status`</span> tinyint <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> COMMENT ‘用户资料审核状态，<span class="hljs-number">1</span>为通过，<span class="hljs-number">2</span>为审核中，<span class="hljs-number">3</span>为未通过，<span class="hljs-number">4</span>为还未提交审核’,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_user_id`</span> (<span class="hljs-symbol">`user_id`</span>),<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_username`</span>(<span class="hljs-symbol">`username`</span>),<br>  <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`idx_create_time`</span>(<span class="hljs-symbol">`create_time`</span>,<span class="hljs-symbol">`user_review_status`</span>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class="hljs-string">&#x27;网站用户基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="2-2-SQL编写"><a href="#2-2-SQL编写" class="headerlink" title="2.2 SQL编写"></a>2.2 SQL编写</h2><h3 id="2-2-1-DML语句"><a href="#2-2-1-DML语句" class="headerlink" title="2.2.1 DML语句"></a>2.2.1 DML语句</h3><ol><li><strong>【强制】</strong>SELECT语句必须指定具体字段名称，禁止写成<code>*</code>。因为<code>select *</code>会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</li><li><strong>【强制】</strong>insert语句指定具体字段名称，不要写成<code>insert into t1 values(…)</code>，道理同上。</li><li><strong>【建议】</strong><code>insert into…values(XX),(XX),(XX)…</code>。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。</li><li><strong>【建议】</strong>SELECT语句不要使用<code>UNION</code>，推荐使用<code>UNION ALL</code>，并且<code>UNION</code>子句个数限制在5个以内。因为<code>union all</code>不需要去重，节省数据库资源，提高性能。</li><li><strong>【建议】</strong>in值列表限制在500以内。例如<code>select… where userid in(….500个以内…)</code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li><li><strong>【建议】</strong>事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</li><li><strong>【强制】</strong>事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</li><li><strong>【强制】</strong>写入和事务发往主库，只读SQL发往从库。</li><li><strong>【强制】</strong>除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</li><li><strong>【强制】</strong>生产环境禁止使用<code>hint</code>，如<code>sql_no_cache</code>，<code>force index</code>，<code>ignore key</code>，<code>straight join</code>等。因为<code>hint</code>是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</li><li><strong>【强制】</strong>where条件里等号左右字段类型必须一致，否则无法利用索引。</li><li><strong>【建议】</strong><code>SELECT|UPDATE|DELETE|REPLACE</code>要有WHERE子句，且WHERE子句的条件必需使用索引查找。</li><li><strong>【强制】</strong>生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</li><li><strong>【强制】</strong>WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</li><li><strong>【建议】</strong>索引列不要使用函数或表达式，否则无法利用索引。如<code>where length(name)=&#39;Admin&#39;</code>或<code>where user_id+2=10023</code>。</li><li><strong>【建议】</strong>减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如<code>where a=1 or b=2</code>优化为<code>where a=1… union …where b=2, key(a),key(b)</code>。</li><li><strong>【建议】</strong>分页查询，当limit起点较高时，可先用过滤条件进行过滤。如<code>select a,b,c from t1 limit 10000,20;</code>优化为: <code>select a,b,c from t1 where id&gt;10000 limit 20;</code>。</li></ol><h3 id="2-2-2-多表连接"><a href="#2-2-2-多表连接" class="headerlink" title="2.2.2 多表连接"></a>2.2.2 多表连接</h3><ol><li><strong>【强制】</strong>禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li><li><strong>【强制】</strong>禁止在业务的更新类SQL语句中使用join，比如<code>update t1 join t2…</code>。</li><li><strong>【建议】</strong>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</li><li><strong>【建议】</strong>线上环境，多表join不要超过3个表。</li><li><strong>【建议】</strong>多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如<code>select a from db1.table1 alias1 where …</code>。</li><li><strong>【建议】</strong>在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</li></ol><h3 id="2-2-3-事务"><a href="#2-2-3-事务" class="headerlink" title="2.2.3 事务"></a>2.2.3 事务</h3><ol><li><strong>【建议】</strong>事务中<code>INSERT|UPDATE|DELETE|REPLACE</code>语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</li><li><strong>【建议】</strong>批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</li><li><strong>【建议】</strong>对于有<code>auto_increment</code>属性字段的表的插入操作，并发需要控制在200以内。</li><li><strong>【强制】</strong>程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为<code>repeatable-read</code>。</li><li><strong>【建议】</strong>事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</li><li><strong>【建议】</strong>事务里更新语句尽量基于主键或<code>unique key</code>，如<code>update … where id=XX</code>; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li><li><strong>【建议】</strong>尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</li><li><strong>【建议】</strong>对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</li></ol><h3 id="2-2-4-排序和分组"><a href="#2-2-4-排序和分组" class="headerlink" title="2.2.4 排序和分组"></a>2.2.4 排序和分组</h3><ol><li><strong>【建议】</strong>减少使用<code>order by</code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>order by</code>、<code>group by</code>、<code>distinct</code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li><li><strong>【建议】</strong><code>order by</code>、<code>group by</code>、<code>distinct</code>这些SQL尽量利用索引直接检索出排序好的数据。如<code>where a=1 order by</code>可以利用<code>key(a,b)</code>。</li><li><strong>【建议】</strong>包含了<code>order by</code>、<code>group by</code>、<code>distinct</code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li></ol><h3 id="2-2-5-线上禁止使用的SQL语句"><a href="#2-2-5-线上禁止使用的SQL语句" class="headerlink" title="2.2.5 线上禁止使用的SQL语句"></a>2.2.5 线上禁止使用的SQL语句</h3><ol><li><strong>【高危】</strong>禁用<code>update|delete t1 … where a=XX limit XX;</code> 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上<code>order by PK</code>。</li><li><strong>【高危】</strong>禁止使用关联子查询，如<code>update t1 set … where name in(select name from user where…);</code>效率极其低下。</li><li><strong>【强制】</strong>禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li><li><strong>【强制】</strong>禁用<code>insert into …on duplicate key update…</code>在高并发环境下，会造成主从不一致。</li><li><strong>【强制】</strong>禁止联表更新语句，如<code>update t1,t2 where t1.id=t2.id…</code>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据和索引占用空间查询</title>
    <link href="/20221128/2630fef0426e.html"/>
    <url>/20221128/2630fef0426e.html</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据和索引占用空间查询"><a href="#MySQL数据和索引占用空间查询" class="headerlink" title="MySQL数据和索引占用空间查询"></a>MySQL数据和索引占用空间查询</h1><h2 id="查询所有数据库占用磁盘空间大小的SQL语句"><a href="#查询所有数据库占用磁盘空间大小的SQL语句" class="headerlink" title="查询所有数据库占用磁盘空间大小的SQL语句"></a>查询所有数据库占用磁盘空间大小的SQL语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>table_schema, -- 数据库名称<br>concat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>concat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>information_schema.TABLES <br>GROUP BY<br>table_schema <br>ORDER BY<br>sum( data_length ) DESC;<br></code></pre></td></tr></table></figure><h2 id="查询单个库中所有表磁盘占用大小的SQL语句"><a href="#查询单个库中所有表磁盘占用大小的SQL语句" class="headerlink" title="查询单个库中所有表磁盘占用大小的SQL语句"></a>查询单个库中所有表磁盘占用大小的SQL语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>table_name, -- 表名称<br>concat( TRUNCATE ( data_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>concat( TRUNCATE ( index_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>information_schema.TABLES <br>WHERE<br>table_schema = &#x27;数据库名称&#x27; <br>ORDER BY<br>data_length DESC;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【环境搭建】Nexus搭建Maven私服</title>
    <link href="/20221127/42466bcec765.html"/>
    <url>/20221127/42466bcec765.html</url>
    
    <content type="html"><![CDATA[<h1 id="【环境搭建】Nexus搭建Maven私服"><a href="#【环境搭建】Nexus搭建Maven私服" class="headerlink" title="【环境搭建】Nexus搭建Maven私服"></a>【环境搭建】Nexus搭建Maven私服</h1><p><strong>Nexus官方下载地址：<a href="https://help.sonatype.com/repomanager3/download">https://help.sonatype.com/repomanager3/download</a></strong></p><h3 id="Docker启动"><a href="#Docker启动" class="headerlink" title="Docker启动"></a>Docker启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3</span><br>docker search nexus<br><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取镜像</span><br>docker pull sonatype/nexus3<br></code></pre></td></tr></table></figure><p><strong>简单方式启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。</span><br>docker run -p 8081:8081 --name nexus sonatype/nexus3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果有容器和下面要创建的容器同名的话，先删除</span><br>docker rm &lt;container_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定虚拟机与容器共享的文件夹</span><br>mkdir /usr/local/docker/nexus/nexus-data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动容器</span><br>docker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限</span><br>chmod 777 /usr/local/docker/nexus/nexus-data<br></code></pre></td></tr></table></figure><h3 id="利用docker-compose启动"><a href="#利用docker-compose启动" class="headerlink" title="利用docker-compose启动"></a>利用docker-compose启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建docker-compose.yml</span><br>mkdir /usr/local/docker<br>cd /usr/local/docker<br>vi docker-compose.yml<br></code></pre></td></tr></table></figure><p><strong>docker-compose.yml内容如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">version: &quot;3.7&quot;<br>services:<br>  nexus:<br>    restart: &quot;no&quot; <br>    image: sonatype/nexus3<br>    container_name: nexus<br>    ports:<br>      - 8081:8081 <br>    volumes:<br>      - /usr/local/docker/nexus/nexus-data:/nexus-data<br></code></pre></td></tr></table></figure><blockquote><p>version : 指定docker-compose语法版本，版本不同，支持的docker也不同</p></blockquote><blockquote><p>restart</p></blockquote><blockquote><p>services : 多种服务的根节点</p></blockquote><blockquote><p>nexus : 服务名随意起，代表要创建的服务</p></blockquote><blockquote><p>restart : 容器的重启策略，有no、always、on-failure、<br>unless-stopped四种可选值。</p></blockquote><blockquote><p>image : 容器依据的镜像</p></blockquote><blockquote><p>container_name : 容器名</p></blockquote><blockquote><p>ports : 端口</p></blockquote><blockquote><p>volumes : 数据卷</p></blockquote><p>启动后访问地址：<a href="http://ip:port/">http://ip:port/</a></p><p><strong>默认账号：admin</strong></p><p><strong>管理员登录密码在 <code>nexus/nexus-data</code> 中<code>admin</code> 开头的文件中，将其拷贝输入即可。</strong></p><p><strong>登录之后会要求修改密码，按要求修改即可。</strong></p><h2 id="Nexus-配置"><a href="#Nexus-配置" class="headerlink" title="Nexus 配置"></a>Nexus 配置</h2><p><strong>在Maven的conf下的setting.xml文件中配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置仓库地址</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置远程仓库、阿里云代理镜像 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--镜像名称 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>在项目pom.xml文件里配置私服仓库地址</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>maven-nexus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>发布私有jar包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 私服仓库地址、该id对应的是setting.xml文件里的&lt;server&gt;里id配置。名称必须一样 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Releases<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Snapshot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 发布私有包时的maven打包插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="私服工作原理："><a href="#私服工作原理：" class="headerlink" title="私服工作原理："></a>私服工作原理：</h4><p>配置Nexus之前，需要先了解一下私服的工作原理，如下图：</p><p><img src="https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png"></p><p>找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；</p><h4 id="Nexus仓库类型介绍"><a href="#Nexus仓库类型介绍" class="headerlink" title="Nexus仓库类型介绍"></a>Nexus仓库类型介绍</h4><p>默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。</p><ul><li>hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）</li><li>proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包</li><li>group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）</li></ul>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot2 整合 Swagger2</title>
    <link href="/20221123/a71082abf1bd.html"/>
    <url>/20221123/a71082abf1bd.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot2-整合-Swagger2"><a href="#SpringBoot2-整合-Swagger2" class="headerlink" title="SpringBoot2 整合 Swagger2"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p><h3 id="第一步、引入pom"><a href="#第一步、引入pom" class="headerlink" title="第一步、引入pom"></a>第一步、引入pom</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p><p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p><p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.NumberFormatException: For input string: <span class="hljs-string">&quot;&quot;</span><br>at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="hljs-number">65</span>)<br>at java.lang.Long.parseLong(Long.java:<span class="hljs-number">601</span>)<br>at java.lang.Long.valueOf(Long.java:<span class="hljs-number">803</span>)<br>at io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class="hljs-number">412</span>)<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="hljs-number">62</span>)<br>at......<br></code></pre></td></tr></table></figure><p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getExample</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.example == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;integer&quot;</span>.equals(<span class="hljs-built_in">this</span>.type)) &#123;<br>                <span class="hljs-keyword">return</span> Long.valueOf(<span class="hljs-built_in">this</span>.example);<br>            &#125;<br>        <br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;number&quot;</span>.equals(<span class="hljs-built_in">this</span>.type)) &#123;<br>                <span class="hljs-keyword">return</span> Double.valueOf(<span class="hljs-built_in">this</span>.example);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;boolean&quot;</span>.equals(<span class="hljs-built_in">this</span>.type) &amp;&amp; (<span class="hljs-string">&quot;true&quot;</span>.equalsIgnoreCase(<span class="hljs-built_in">this</span>.example) || <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(<span class="hljs-built_in">this</span>.defaultValue))) &#123;<br>                <span class="hljs-keyword">return</span> Boolean.valueOf(<span class="hljs-built_in">this</span>.example);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class="hljs-string">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class="hljs-built_in">this</span>.defaultValue, <span class="hljs-built_in">this</span>.type), var2);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getExample</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.example != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.example.isEmpty()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;integer&quot;</span>.equals(<span class="hljs-built_in">this</span>.type)) &#123;<br>                <span class="hljs-keyword">return</span> Long.valueOf(<span class="hljs-built_in">this</span>.example);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;number&quot;</span>.equals(<span class="hljs-built_in">this</span>.type)) &#123;<br>                <span class="hljs-keyword">return</span> Double.valueOf(<span class="hljs-built_in">this</span>.example);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;boolean&quot;</span>.equals(<span class="hljs-built_in">this</span>.type) &amp;&amp; (<span class="hljs-string">&quot;true&quot;</span>.equalsIgnoreCase(<span class="hljs-built_in">this</span>.example) || <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(<span class="hljs-built_in">this</span>.defaultValue))) &#123;<br>                <span class="hljs-keyword">return</span> Boolean.valueOf(<span class="hljs-built_in">this</span>.example);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class="hljs-string">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class="hljs-built_in">this</span>.defaultValue, <span class="hljs-built_in">this</span>.type), var2);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.example;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p><h3 id="第二部、配置"><a href="#第二部、配置" class="headerlink" title="第二部、配置"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p><ul><li>源码地址<ul><li>GitHub：<a href="https://github.com/dyc87112/spring-boot-starter-swagger">https://github.com/dyc87112/spring-boot-starter-swagger</a></li><li>码云：<a href="https://gitee.com/didispace/spring-boot-starter-swagger">https://gitee.com/didispace/spring-boot-starter-swagger</a></li></ul></li><li>使用样例：<a href="https://github.com/dyc87112/swagger-starter-demo">https://github.com/dyc87112/swagger-starter-demo</a></li><li>博客：<a href="http://blog.didispace.com/">http://blog.didispace.com</a></li><li>社区：<a href="http://www.spring4all.com/">http://www.spring4all.com</a></li></ul><p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p><p>官方地址：<a href="https://doc.xiaominfo.com/guide/">https://doc.xiaominfo.com/guide/</a></p><blockquote><p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p><p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p><p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">swagger:</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">1.</span><span class="hljs-string">0v</span> <span class="hljs-comment"># 版本号</span><br>  <span class="hljs-attr">authorization:</span> <span class="hljs-comment"># 全局参数</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Authorization</span> <span class="hljs-comment"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">ApiKey</span> <span class="hljs-comment"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class="hljs-attr">key-name:</span> <span class="hljs-string">X-Token</span> <span class="hljs-comment"># 鉴权传递的Header参数</span><br>  <span class="hljs-comment">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class="hljs-attr">ui-config:</span> <span class="hljs-comment"># 排序规则</span><br>    <span class="hljs-attr">operations-sorter:</span> <span class="hljs-string">method</span> <span class="hljs-comment"># 按方法定义顺序排序</span><br>    <span class="hljs-attr">tags-sorter:</span> <span class="hljs-string">alpha</span> <span class="hljs-comment"># 按字母表排序</span><br>  <span class="hljs-attr">docket:</span> <span class="hljs-comment"># 分组配置</span><br>    <span class="hljs-attr">common:</span><br>      <span class="hljs-attr">base-package:</span> <span class="hljs-string">com.xxxx.a</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">API接口文档</span><br>      <span class="hljs-attr">title:</span> <span class="hljs-string">xxx接口</span><br>      <span class="hljs-attr">contact:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">xxx</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">https://cn.bing.com/</span><br>    <span class="hljs-attr">hq:</span><br>      <span class="hljs-attr">base-package:</span> <span class="hljs-string">com.xxxx.b</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">API接口文档</span><br>      <span class="hljs-attr">title:</span> <span class="hljs-string">xxx接口</span><br>      <span class="hljs-attr">contact:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">xxx</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class="hljs-attr">shop:</span><br>      <span class="hljs-attr">base-package:</span> <span class="hljs-string">com.xxxx.c</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">API接口文档</span><br>      <span class="hljs-attr">title:</span> <span class="hljs-string">xxx接口</span><br>      <span class="hljs-attr">contact:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">xxx</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure><h3 id="第三步、注解"><a href="#第三步、注解" class="headerlink" title="第三步、注解"></a>第三步、注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableSwagger2Doc</span> <span class="hljs-comment">// 启用Swagger2</span><br><span class="hljs-meta">@EnableSwaggerBootstrapUI</span> <span class="hljs-comment">//启用swagger-bootstrap-ui</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoOneController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DemoOneService service;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DemoOneController</span><span class="hljs-params">(DemoOneService service)</span> &#123;<br>        <span class="hljs-built_in">this</span>.service = service;<br>    &#125;<br><br>    <span class="hljs-comment">//=====================================================================================DELETE=====================================================================================</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ApiMessage <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-meta">@Min(1)</span> <span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class="hljs-comment">//=====================================================================================GET========================================================================================</span><br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class="hljs-title function_">getAllList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> service.getAllList();<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class="hljs-meta">@ApiImplicitParams(value = &#123;</span><br><span class="hljs-meta">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-meta">@Min(1)</span> <span class="hljs-type">int</span> id, <span class="hljs-meta">@PathVariable</span> <span class="hljs-meta">@AssertFalse</span> <span class="hljs-type">boolean</span> name)</span> &#123;<br>        <span class="hljs-keyword">return</span> service.getById(id);<br>    &#125;<br><br>    <span class="hljs-comment">//=====================================================================================POST=======================================================================================</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class="hljs-keyword">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class="hljs-comment">//=====================================================================================PUT========================================================================================</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class="hljs-keyword">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="大功告成！！！启动访问如下地址："><a href="#大功告成！！！启动访问如下地址：" class="headerlink" title="大功告成！！！启动访问如下地址："></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p><p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p><p><strong>swagger-bootstrap-ui地址：</strong></p><p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Swagger2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot2 线程池的定义和使用</title>
    <link href="/20221123/40dba990c09b.html"/>
    <url>/20221123/40dba990c09b.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot2-线程池的定义和使用"><a href="#SpringBoot2-线程池的定义和使用" class="headerlink" title="SpringBoot2 线程池的定义和使用"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@EnableAsync</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncExecutorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AsyncConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ThreadPoolTaskExecutor <span class="hljs-title function_">asyncServiceExecutor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cpu</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class="hljs-string">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class="hljs-type">ThreadPoolTaskExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskExecutor</span>();<br>        <span class="hljs-comment">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class="hljs-comment">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class="hljs-comment">//配置队列大小</span><br>        executor.setQueueCapacity(<span class="hljs-number">50</span>);<br>        <span class="hljs-comment">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class="hljs-number">60</span>);<br>        <span class="hljs-comment">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class="hljs-string">&quot;async-service-&quot;</span>);<br>        <span class="hljs-comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class="hljs-comment">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class="hljs-comment">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class="hljs-comment">//执行初始化</span><br>        executor.initialize();<br>        <span class="hljs-keyword">return</span> executor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">getAsyncExecutor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AsyncUncaughtExceptionHandler <span class="hljs-title function_">getAsyncUncaughtExceptionHandler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class="hljs-string">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如何使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>    <br><span class="hljs-keyword">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class="hljs-number">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot AOP处理请求日志处理打印</title>
    <link href="/20221123/ede4d722a64c.html"/>
    <url>/20221123/ede4d722a64c.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-AOP处理请求日志处理打印"><a href="#SpringBoot-AOP处理请求日志处理打印" class="headerlink" title="SpringBoot AOP处理请求日志处理打印"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestAopConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HttpServletRequest request;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class="hljs-meta">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class="hljs-meta">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class="hljs-meta">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class="hljs-meta">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">controllerMethodPointcut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">logTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;--------------- 执行成功 ---------------\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">logTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;--------------- 执行失败 ---------------\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>AOP</tag>
      
      <tag>切面</tag>
      
      <tag>日志处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自动配置与@Enable方式配置</title>
    <link href="/20221123/af4853386d96.html"/>
    <url>/20221123/af4853386d96.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot自动配置与-Enable方式配置"><a href="#SpringBoot自动配置与-Enable方式配置" class="headerlink" title="SpringBoot自动配置与@Enable方式配置"></a>SpringBoot自动配置与@Enable方式配置</h1><h2 id="SpringBoot自动配置："><a href="#SpringBoot自动配置：" class="headerlink" title="SpringBoot自动配置："></a>SpringBoot自动配置：</h2><p>在<code>resources</code>目录下新建<code>META-INF</code>目录，创建<code>spring.factories</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/12/22 00:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAutoConfig</span> &#123;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Test <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        log.error(<span class="hljs-string">&quot;=======&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此种方式就可以实现SpringBoot的自动配置加载。</p><h2 id="通过-Enable注解方式实现自动配置"><a href="#通过-Enable注解方式实现自动配置" class="headerlink" title="通过@Enable注解方式实现自动配置"></a>通过<code>@Enable</code>注解方式实现自动配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 启用注解：<span class="hljs-doctag">@EnableTest</span></span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/6/8-22:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Import(&#123;TestAutoConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>不要在<code>spring.factories</code>文件里配置加载类，不然SpringBoot就自动加载配置了</strong></p><p>此时只需要在启动类上加上<code>@EnableTest</code>就可以实现加载配置类了</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>自动配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot中时间类型 序列化、反序列化、格式处理</title>
    <link href="/20221123/e91f888d1c7e.html"/>
    <url>/20221123/e91f888d1c7e.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot中时间类型-序列化、反序列化、格式处理"><a href="#SpringBoot中时间类型-序列化、反序列化、格式处理" class="headerlink" title="SpringBoot中时间类型 序列化、反序列化、格式处理"></a>SpringBoot中时间类型 序列化、反序列化、格式处理</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p><strong>yml全局配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">jackson:</span><br>    <span class="hljs-attr">time-zone:</span> <span class="hljs-string">GMT+8</span><br>    <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss</span> <span class="hljs-comment">#配置POST请求Body中Date时间类型序列化格式处理，并返回</span><br></code></pre></td></tr></table></figure><p><strong>请求参数类型转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 时间Date转换</span><br><span class="hljs-comment"> * 配置GET请求，Query查询Date时间类型参数转换</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isBlank(source)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (source.matches(<span class="hljs-string">&quot;^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> parseDate(source.trim(), <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (source.matches(<span class="hljs-string">&quot;^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125; &#123;1&#125;\\d&#123;1,2&#125;:\\d&#123;1,2&#125;:\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class="hljs-keyword">return</span> parseDate(source.trim(), <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid value &#x27;&quot;</span> + source + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">parseDate</span><span class="hljs-params">(String dateStr, String format)</span> &#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(format).parse(dateStr);<br>    &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>      log.warn(<span class="hljs-string">&quot;转换&#123;&#125;为日期(pattern=&#123;&#125;)错误！&quot;</span>, dateStr, format);<br>    &#125;<br>    <span class="hljs-keyword">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDK8-时间类型-LocalDateTime、LocalDate、LocalTime"><a href="#JDK8-时间类型-LocalDateTime、LocalDate、LocalTime" class="headerlink" title="JDK8-时间类型-LocalDateTime、LocalDate、LocalTime"></a>JDK8-时间类型-LocalDateTime、LocalDate、LocalTime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 序列化,反序列化,格式处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/7/9 01:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonCustomizerConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String localDateTimePattern;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.jackson.local-date-format:yyyy-MM-dd&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String localDatePattern;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.jackson.local-time-format:HH:mm:ss&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String localTimePattern;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="hljs-title function_">jackson2ObjectMapperBuilderCustomizer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> builder -&gt; &#123;<br>            builder.serializerByType(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.serializerByType(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.serializerByType(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>            builder.deserializerByType(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.deserializerByType(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.deserializerByType(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>        &#125;;<br>    &#125;<br>  <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 时间LocalDateTime转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Component</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalDateTimeConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> LocalDateTime <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>            <span class="hljs-keyword">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (source.matches(<span class="hljs-string">&quot;^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125; &#123;1&#125;\\d&#123;1,2&#125;:\\d&#123;1,2&#125;:\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid value &#x27;&quot;</span> + source + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 时间LocalDate转换</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Component</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalDateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, LocalDate&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> LocalDate <span class="hljs-title function_">convert</span><span class="hljs-params">(String source)</span> &#123;<br>            <span class="hljs-keyword">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (source.matches(<span class="hljs-string">&quot;^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>));<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid value &#x27;&quot;</span> + source + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>序列化</tag>
      
      <tag>时间格式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 全局异常处理</title>
    <link href="/20221123/f2126e09480c.html"/>
    <url>/20221123/f2126e09480c.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-全局异常处理"><a href="#SpringBoot-全局异常处理" class="headerlink" title="SpringBoot 全局异常处理"></a>SpringBoot 全局异常处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验错误拦截处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     * StringBuilder sb = new StringBuilder();</span><br><span class="hljs-comment">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class="hljs-comment">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class="hljs-comment">     * &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">methodArgumentNotValidHandler</span><span class="hljs-params">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class="hljs-comment">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class="hljs-meta">@ExceptionHandler(value = BindException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">bindExceptionHandler</span><span class="hljs-params">(BindException ex)</span> &#123;<br>        <span class="hljs-comment">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HTTP请求方式不正确</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">httpRequestMethodNotSupportedException</span><span class="hljs-params">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求参数不全</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">missingServletRequestParameterException</span><span class="hljs-params">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求参数类型不正确</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">typeMismatchException</span><span class="hljs-params">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据格式不正确</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">dataFormatException</span><span class="hljs-params">(DataFormatException ex)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 非法输入或断言错误</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">illegalArgumentException</span><span class="hljs-params">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求参数错误</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">constraintViolationException</span><span class="hljs-params">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作数据库出现异常</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">dataDoException</span><span class="hljs-params">(DataAccessException ex)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统异常</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex 异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">apiExceptionHandler</span><span class="hljs-params">(Exception ex)</span> &#123;<br>        <span class="hljs-comment">//只打印15行的错误堆栈</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class="hljs-comment">//            if (count++ &gt;= 30) &#123;</span><br><span class="hljs-comment">//                break;</span><br><span class="hljs-comment">//            &#125;</span><br>            sb.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        log.error(<span class="hljs-string">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义异常</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apiException 自定义异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExceptionHandler(ApiException.class)</span><br>    <span class="hljs-keyword">public</span> ApiMessage&lt;Object&gt; <span class="hljs-title function_">apiException</span><span class="hljs-params">(ApiException apiException)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@NoArgsConstructor</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArgumentInvalid</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 字段</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> String field;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 字段值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> Object rejectedValue;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 默认值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>全局异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringBoot】ShardingSphere读写分离</title>
    <link href="/20220831/aace438dc544.html"/>
    <url>/20220831/aace438dc544.html</url>
    
    <content type="html"><![CDATA[<h1 id="ShardingSphere读写分离"><a href="#ShardingSphere读写分离" class="headerlink" title="ShardingSphere读写分离"></a>ShardingSphere读写分离</h1><p><strong>第一步：添加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;<br>    &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;&#123;last.version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第一步：配置信息</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br>      <span class="hljs-attr">naming:</span><br>        <span class="hljs-attr">physical-strategy:</span> <span class="hljs-string">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">shardingsphere:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-attr">names:</span> <span class="hljs-string">master,slave0</span> <span class="hljs-comment"># 配置真实数据源</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span> <span class="hljs-comment"># 连接池配置</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">jdbc-url:</span> <span class="hljs-string">jdbc:mysql://114.116.69.230:13036/sharding_db_1?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true&amp;serverTimezone=Asia/Shanghai</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">fyzq_scm_test</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">r7XNMpwfHffT44Lz</span><br>        <span class="hljs-attr">hikari:</span><br>          <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span>           <span class="hljs-comment"># 最小连接数</span><br>          <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">15</span>     <span class="hljs-comment"># 最大连接数</span><br>          <span class="hljs-attr">auto-commit:</span> <span class="hljs-literal">true</span>         <span class="hljs-comment"># 此属性控制从池返回的连接的默认自动提交行为,默认值：true</span><br>          <span class="hljs-attr">idle-timeout:</span> <span class="hljs-number">30000</span>       <span class="hljs-comment"># 连接允许在池中闲置的最长时间，默认600000（10分钟），单位ms</span><br>          <span class="hljs-attr">pool-name:</span> <span class="hljs-string">UserHikariCP</span>   <span class="hljs-comment"># 连接池名称</span><br>          <span class="hljs-attr">max-lifetime:</span> <span class="hljs-number">1800000</span>     <span class="hljs-comment"># 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟，单位ms</span><br>          <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">30000</span> <span class="hljs-comment"># 数据库连接超时时间,默认30秒，即30000，单位ms</span><br>          <span class="hljs-attr">connection-test-query:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">slave0:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span> <span class="hljs-comment"># 连接池配置</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">jdbc-url:</span> <span class="hljs-string">jdbc:mysql://114.116.69.230:13036/sharding_db_2?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true&amp;serverTimezone=Asia/Shanghai</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">fyzq_scm_test</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">r7XNMpwfHffT44Lz</span><br>        <span class="hljs-attr">hikari:</span><br>          <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span>           <span class="hljs-comment"># 最小连接数</span><br>          <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">15</span>     <span class="hljs-comment"># 最大连接数</span><br>          <span class="hljs-attr">auto-commit:</span> <span class="hljs-literal">true</span>         <span class="hljs-comment"># 此属性控制从池返回的连接的默认自动提交行为,默认值：true</span><br>          <span class="hljs-attr">idle-timeout:</span> <span class="hljs-number">30000</span>       <span class="hljs-comment"># 连接允许在池中闲置的最长时间，默认600000（10分钟），单位ms</span><br>          <span class="hljs-attr">pool-name:</span> <span class="hljs-string">UserHikariCP</span>   <span class="hljs-comment"># 连接池名称</span><br>          <span class="hljs-attr">max-lifetime:</span> <span class="hljs-number">1800000</span>     <span class="hljs-comment"># 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟，单位ms</span><br>          <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">30000</span> <span class="hljs-comment"># 数据库连接超时时间,默认30秒，即30000，单位ms</span><br>          <span class="hljs-attr">connection-test-query:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">masterslave:</span> <span class="hljs-comment">#读写配置</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">ms</span><br>      <span class="hljs-comment"># 从库的读取规则为round_robin（轮询策略），除了轮询策略，还有支持random（随机策略）</span><br>      <span class="hljs-attr">load-balance-algorithm-type:</span> <span class="hljs-string">round_robin</span><br>      <span class="hljs-attr">master-data-source-name:</span> <span class="hljs-string">master</span><br>      <span class="hljs-attr">slave-data-source-names:</span> <span class="hljs-string">slave0</span><br>    <span class="hljs-attr">props:</span> <span class="hljs-comment">#打印sql</span><br>      <span class="hljs-attr">sql:</span><br>        <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>编写代码:</strong></p><blockquote><p>实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/17 17:22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;account&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1132915818521200568L</span>;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String no;<br>    <span class="hljs-keyword">private</span> String phone;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>DAO</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/17 17:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/17 17:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/account&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    AccountRepository accountRepository;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Account account)</span> &#123;<br>        accountRepository.save(account);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getAll&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountRepository.findAll();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> Account <span class="hljs-title function_">getAccount</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Account account)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        List&lt;Account&gt; all = accountRepository.findAll();<br>        System.out.println(<span class="hljs-string">&quot;查询所有:&quot;</span> + all);<br>        accountRepository.save(account);<br>        <span class="hljs-keyword">if</span> (account.getAge() &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异常信息&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;年龄小于0&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> account;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>JPA</tag>
      
      <tag>ShardingSphere</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 管道 Pipeline</title>
    <link href="/20220831/8ef2129f9c66.html"/>
    <url>/20220831/8ef2129f9c66.html</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-管道-Pipeline"><a href="#Redis-管道-Pipeline" class="headerlink" title="Redis 管道 Pipeline"></a>Redis 管道 Pipeline</h1><p><strong>JAVA代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 管道，批量操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/15 18:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PipelineService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pipeline</span><span class="hljs-params">()</span> &#123;<br>        redisTemplate.executePipelined((RedisCallback&lt;String&gt;) connection -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                connection.set((<span class="hljs-string">&quot;pipeline:&quot;</span> + i).getBytes(), <span class="hljs-string">&quot;123&quot;</span>.getBytes());<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">common</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;common:&quot;</span> + i, <span class="hljs-string">&quot;123&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisPipelineApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    PipelineService pipelineService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试管道和普通的速度</span><br><span class="hljs-comment">     * pipeline: 272ms</span><br><span class="hljs-comment">     * common: 6859ms</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisPipeline</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        pipelineService.pipeline();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        pipelineService.common();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;pipeline: &quot;</span> + (t2 - t1) + <span class="hljs-string">&quot;ms&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;common: &quot;</span> + (t3 - t2) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis配合SpringBoot Cache注解使用</title>
    <link href="/20220831/2a2b3594c1cf.html"/>
    <url>/20220831/2a2b3594c1cf.html</url>
    
    <content type="html"><![CDATA[<h2 id="Cache配置类"><a href="#Cache配置类" class="headerlink" title="Cache配置类"></a>Cache配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Cache配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/14 20:10</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@EnableCaching</span><span class="hljs-comment">//开启注解缓存</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomKeyGenerator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CachingConfigurerSupport</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置自定义key&#123;ClassName + methodName + params&#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">keyGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (target, method, params) -&gt; &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class="hljs-string">&quot;:Method:&quot;</span>);<br><span class="hljs-comment">//            sb.append(&quot;Method:&quot;);</span><br>            sb.append(method.getName());<br>            <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;:Params[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Object param : params) &#123;<br>                <span class="hljs-keyword">if</span> (param <span class="hljs-keyword">instanceof</span> Array) &#123;<br>                    sj.add(param.toString());<br>                &#125;<br>                sj.add(param.toString());<br>            &#125;<br>            sb.append(sj.toString());<br>            log.debug(<span class="hljs-string">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">saveGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (target, method, params) -&gt; &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class="hljs-string">&quot;:Method:&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;getOne&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;:Params[&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>].getClass().getDeclaredField(<span class="hljs-string">&quot;id&quot;</span>);<br>                id.setAccessible(<span class="hljs-literal">true</span>);<br>                sb.append(id.get(params[<span class="hljs-number">0</span>]).toString());<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>            log.debug(<span class="hljs-string">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">deleteByIdGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (target, method, params) -&gt; &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class="hljs-string">&quot;:Method:&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;getById&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;:Params[&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>                sb.append(params[i].toString());<br>                <span class="hljs-keyword">if</span> (i != (params.length - <span class="hljs-number">1</span>)) &#123;<br>                    sb.append(<span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>            log.debug(<span class="hljs-string">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class="hljs-keyword">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">redisCacheConfiguration</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//设置缓存过期时间</span><br>        <span class="hljs-keyword">if</span> (expireTime &gt; <span class="hljs-number">0</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;Redis 缓存过期时间 : &#123;&#125;&quot;</span>, expireTime);<br>            <span class="hljs-comment">//设置缓存有效期 秒</span><br>            redisCacheConfiguration = redisCacheConfiguration.entryTtl(Duration.ofSeconds(expireTime));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;Redis 未设置缓存过期时间&quot;</span>);<br>        &#125;<br>        redisCacheConfiguration = redisCacheConfiguration.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>()))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>()))<br>                .disableCachingNullValues();<br>        <span class="hljs-keyword">return</span> RedisCacheManager.builder(redisConnectionFactory).cacheDefaults(redisCacheConfiguration).build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/14 19:49</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@CacheConfig(cacheNames = &#123;&quot;cache&quot;&#125;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;StudentDTO&gt; list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheService</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;实例化数组&quot;</span>);<br>        <span class="hljs-built_in">this</span>.list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(StudentDTO.builder()<br>                .id(<span class="hljs-number">1L</span>)<br>                .age(<span class="hljs-number">18</span>)<br>                .name(<span class="hljs-string">&quot;张三&quot;</span>)<br>                .build());<br>        list.add(StudentDTO.builder()<br>                .id(<span class="hljs-number">2L</span>)<br>                .age(<span class="hljs-number">20</span>)<br>                .name(<span class="hljs-string">&quot;李四&quot;</span>)<br>                .build());<br>    &#125;<br><br>    <span class="hljs-meta">@Cacheable</span><br>    <span class="hljs-keyword">public</span> List&lt;StudentDTO&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;查询数据&quot;</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@Cacheable</span><br>    <span class="hljs-keyword">public</span> List&lt;StudentDTO&gt; <span class="hljs-title function_">getOne</span><span class="hljs-params">(Long id)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;查询单条数据&quot;</span>);<br>        <span class="hljs-keyword">return</span> list.stream().filter(s -&gt; s.getId().equals(id)).collect(Collectors.toList());<br>    &#125;<br><br>    <span class="hljs-meta">@CacheEvict(keyGenerator = &quot;saveGenerator&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;StudentDTO&gt; <span class="hljs-title function_">save</span><span class="hljs-params">(StudentDTO dto)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;保存数据&quot;</span>);<br>        List&lt;StudentDTO&gt; newList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.forEach(s -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (s.getId().equals(dto.getId())) &#123;<br>                newList.add(dto);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                newList.add(s);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-built_in">this</span>.list = newList;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCacheApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    CacheService cacheService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询数据</span><br><span class="hljs-comment">     * 2020-09-14 20:50:10.650  INFO 57271 --- [           main] cn.happyloves.redis.cache.CacheService   : 查询数据</span><br><span class="hljs-comment">     * [StudentDTO(id=1, name=张三, age=18), StudentDTO(id=2, name=李四, age=20)]</span><br><span class="hljs-comment">     * 2020-09-14 20:50:10.819  INFO 57271 --- [           main] cn.happyloves.redis.cache.CacheService   : 查询单条数据</span><br><span class="hljs-comment">     * [StudentDTO(id=1, name=张三, age=18)]</span><br><span class="hljs-comment">     * 2020-09-14 20:50:10.886  INFO 57271 --- [           main] cn.happyloves.redis.cache.CacheService   : 查询单条数据</span><br><span class="hljs-comment">     * [StudentDTO(id=2, name=李四, age=20)]</span><br><span class="hljs-comment">     * [StudentDTO(id=1, name=张三, age=18), StudentDTO(id=2, name=李四, age=20)]</span><br><span class="hljs-comment">     * [StudentDTO(id=1, name=张三, age=18)]</span><br><span class="hljs-comment">     * [StudentDTO(id=2, name=李四, age=20)]</span><br><span class="hljs-comment">     * 2020-09-14 20:50:11.118  INFO 57271 --- [           main] cn.happyloves.redis.cache.CacheService   : 保存数据</span><br><span class="hljs-comment">     * [StudentDTO(id=1, name=张三, age=18), StudentDTO(id=2, name=李四, age=22)]</span><br><span class="hljs-comment">     * 2020-09-14 20:50:11.205  INFO 57271 --- [           main] cn.happyloves.redis.cache.CacheService   : 查询单条数据</span><br><span class="hljs-comment">     * [StudentDTO(id=2, name=李四, age=22)]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisCache</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(cacheService.getAll());<br>        System.out.println(cacheService.getOne(<span class="hljs-number">1L</span>));<br>        System.out.println(cacheService.getOne(<span class="hljs-number">2L</span>));<br><br>        System.out.println(cacheService.getAll());<br>        System.out.println(cacheService.getOne(<span class="hljs-number">1L</span>));<br>        System.out.println(cacheService.getOne(<span class="hljs-number">2L</span>));<br><br><br>        System.out.println(cacheService.save(StudentDTO.builder()<br>                .id(<span class="hljs-number">2L</span>)<br>                .age(<span class="hljs-number">22</span>)<br>                .name(<span class="hljs-string">&quot;李四&quot;</span>)<br>                .build()));<br>        System.out.println(cacheService.getOne(<span class="hljs-number">2L</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 发布订阅模式MQ</title>
    <link href="/20220831/a2d3e757e817.html"/>
    <url>/20220831/a2d3e757e817.html</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-发布订阅模式MQ"><a href="#Redis-发布订阅模式MQ" class="headerlink" title="Redis 发布订阅模式MQ"></a>Redis 发布订阅模式MQ</h1><p><strong>常量主题名称</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/16 00:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constant</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MQ_TOPIC_TEST1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-test1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MQ_TOPIC_TEST2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-test2&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MQ_TOPIC_TEST3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-test3&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MQ_TOPIC_TEST4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-test4&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MQ_TOPIC_TEST5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic-test5&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>处理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/16 00:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReceiverRedisMessage</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1Listener</span><span class="hljs-params">(String msg)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;[1====开始消费REDIS消息队列TOPIC_TEST1数据...],消息数据[&#123;&#125;]&quot;</span>, msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2Listener</span><span class="hljs-params">(String msg)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;[2====开始消费REDIS消息队列TOPIC_TEST2数据...],消息数据[&#123;&#125;]&quot;</span>, msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3Listener</span><span class="hljs-params">(Object msg)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;[3====开始消费REDIS消息队列TOPIC_TEST3数据...],消息数据[&#123;&#125;]&quot;</span>, msg.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4Listener</span><span class="hljs-params">(Object msg)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;[4====开始消费REDIS消息队列TOPIC_TEST4数据...],消息数据[&#123;&#125;]&quot;</span>, msg.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5Listener</span><span class="hljs-params">(Object msg)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;[5====开始消费REDIS消息队列TOPIC_TEST5数据...],消息数据[&#123;&#125;]&quot;</span>, msg.toString());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/16 00:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqBeanConfig</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * redis消息监听器容器</span><br><span class="hljs-comment">     * 可以添加多个监听不同话题的redis监听器，只需要把消息监听器和相应的消息订阅处理器绑定，该消息监听器</span><br><span class="hljs-comment">     * 通过反射技术调用消息订阅处理器的相关方法进行一些业务处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connectionFactory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> test1ListenerAdapter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> test2ListenerAdapter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> test3ListenerAdapter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> test4ListenerAdapter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(&quot;container&quot;)</span><br>    RedisMessageListenerContainer <span class="hljs-title function_">container</span><span class="hljs-params">(RedisConnectionFactory connectionFactory,</span><br><span class="hljs-params">                                            MessageListenerAdapter test1ListenerAdapter,</span><br><span class="hljs-params">                                            MessageListenerAdapter test2ListenerAdapter,</span><br><span class="hljs-params">                                            MessageListenerAdapter test3ListenerAdapter,</span><br><span class="hljs-params">                                            MessageListenerAdapter test4ListenerAdapter,</span><br><span class="hljs-params">                                            MessageListenerAdapter test5ListenerAdapter)</span> &#123;<br>        <span class="hljs-type">RedisMessageListenerContainer</span> <span class="hljs-variable">container</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisMessageListenerContainer</span>();<br>        container.setConnectionFactory(connectionFactory);<br>        <span class="hljs-comment">//监听TEST1情况主题并绑定消息订阅处理器</span><br>        container.addMessageListener(test1ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST1));<br>        <span class="hljs-comment">//监听TEST2主题并绑定消息订阅处理器</span><br>        container.addMessageListener(test2ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST2));<br>        <span class="hljs-comment">//监听TEST3主题并绑定消息订阅处理器</span><br>        container.addMessageListener(test3ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST3));<br>        <span class="hljs-comment">//监听TEST4主题并绑定消息订阅处理器</span><br>        container.addMessageListener(test4ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST4));<br>        <span class="hljs-comment">//监听TEST5主题并绑定消息订阅处理器,监听器同时订阅多个主题</span><br>        container.addMessageListener(test5ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST1));<br>        container.addMessageListener(test5ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST2));<br>        container.addMessageListener(test5ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST3));<br>        container.addMessageListener(test5ListenerAdapter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(Constant.MQ_TOPIC_TEST4));<br>        <span class="hljs-keyword">return</span> container;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    MessageListenerAdapter <span class="hljs-title function_">test1ListenerAdapter</span><span class="hljs-params">(ReceiverRedisMessage receiver)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerAdapter</span>(receiver, <span class="hljs-string">&quot;test1Listener&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    MessageListenerAdapter <span class="hljs-title function_">test2ListenerAdapter</span><span class="hljs-params">(ReceiverRedisMessage receiver)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerAdapter</span>(receiver, <span class="hljs-string">&quot;test2Listener&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    MessageListenerAdapter <span class="hljs-title function_">test3ListenerAdapter</span><span class="hljs-params">(ReceiverRedisMessage receiver)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerAdapter</span>(receiver, <span class="hljs-string">&quot;test3Listener&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    MessageListenerAdapter <span class="hljs-title function_">test4ListenerAdapter</span><span class="hljs-params">(ReceiverRedisMessage receiver)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerAdapter</span>(receiver, <span class="hljs-string">&quot;test4Listener&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    MessageListenerAdapter <span class="hljs-title function_">test5ListenerAdapter</span><span class="hljs-params">(ReceiverRedisMessage receiver)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerAdapter</span>(receiver, <span class="hljs-string">&quot;test5Listener&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisMqApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisMq</span><span class="hljs-params">()</span> &#123;<br>        redisTemplate.convertAndSend(Constant.MQ_TOPIC_TEST1, <span class="hljs-string">&quot;111111&quot;</span>);<br>        redisTemplate.convertAndSend(Constant.MQ_TOPIC_TEST2, <span class="hljs-string">&quot;222222&quot;</span>);<br>        <span class="hljs-type">TestVO</span> <span class="hljs-variable">tvo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestVO</span>();<br>        tvo1.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        redisTemplate.convertAndSend(Constant.MQ_TOPIC_TEST3, tvo1);<br>        <span class="hljs-type">TestVO</span> <span class="hljs-variable">tvo2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestVO</span>();<br>        tvo2.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>        redisTemplate.convertAndSend(Constant.MQ_TOPIC_TEST4, tvo2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.317</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-2]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[1====开始消费REDIS消息队列TOPIC_TEST1数据...]</span>,消息数据<span class="hljs-selector-attr">[<span class="hljs-string">&quot;111111&quot;</span>]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.317</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-3]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[5====开始消费REDIS消息队列TOPIC_TEST5数据...]</span>,消息数据<span class="hljs-selector-attr">[<span class="hljs-string">&quot;111111&quot;</span>]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.343</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-4]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[2====开始消费REDIS消息队列TOPIC_TEST2数据...]</span>,消息数据<span class="hljs-selector-attr">[<span class="hljs-string">&quot;222222&quot;</span>]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.344</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-5]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[5====开始消费REDIS消息队列TOPIC_TEST5数据...]</span>,消息数据<span class="hljs-selector-attr">[<span class="hljs-string">&quot;222222&quot;</span>]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.425</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-6]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[3====开始消费REDIS消息队列TOPIC_TEST3数据...]</span>,消息数据<span class="hljs-selector-attr">[&#123;<span class="hljs-string">&quot;@class&quot;</span>:<span class="hljs-string">&quot;cn.happyloves.redis.TestVO&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>&#125;]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.425</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-7]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[5====开始消费REDIS消息队列TOPIC_TEST5数据...]</span>,消息数据<span class="hljs-selector-attr">[&#123;<span class="hljs-string">&quot;@class&quot;</span>:<span class="hljs-string">&quot;cn.happyloves.redis.TestVO&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>&#125;]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.455</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-8]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[4====开始消费REDIS消息队列TOPIC_TEST4数据...]</span>,消息数据<span class="hljs-selector-attr">[&#123;<span class="hljs-string">&quot;@class&quot;</span>:<span class="hljs-string">&quot;cn.happyloves.redis.TestVO&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;李四&quot;</span>&#125;]</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">01</span>:<span class="hljs-number">04</span>:<span class="hljs-number">10.455</span>  INFO <span class="hljs-number">9741</span> --- <span class="hljs-selector-attr">[    container-9]</span> c<span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.r</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.subscribe</span><span class="hljs-selector-class">.ReceiverRedisMessage</span>   : <span class="hljs-selector-attr">[5====开始消费REDIS消息队列TOPIC_TEST5数据...]</span>,消息数据<span class="hljs-selector-attr">[&#123;<span class="hljs-string">&quot;@class&quot;</span>:<span class="hljs-string">&quot;cn.happyloves.redis.TestVO&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;李四&quot;</span>&#125;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis命令和RedisTemplate操作对应表</title>
    <link href="/20220831/32896235df21.html"/>
    <url>/20220831/32896235df21.html</url>
    
    <content type="html"><![CDATA[<h1 id="redis命令和RedisTemplate操作对应表"><a href="#redis命令和RedisTemplate操作对应表" class="headerlink" title="redis命令和RedisTemplate操作对应表"></a>redis命令和RedisTemplate操作对应表</h1><ul><li><a herf="#string">redisTemplate.opsForValue();&#x2F;&#x2F;操作字符串</a></li><li><a herf="#hash">redisTemplate.opsForHash();&#x2F;&#x2F;操作hash</a></li><li><a herf="#set">redisTemplate.opsForedisTemplateet();&#x2F;&#x2F;操作set</a></li><li><a herf="#list">redisTemplate.opsForList();&#x2F;&#x2F;操作list</a></li><li>redisTemplate.opsForZSet();&#x2F;&#x2F;操作有序set</li></ul><h2 id="Key相关的"><a href="#Key相关的" class="headerlink" title="Key相关的"></a>Key相关的</h2><table><thead><tr><th align="left">Redis命令</th><th align="left">RedisTemplate redisTemplate</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left"><code>KEYS *、KEYS *key*、KEYS *key、KEYS key*</code></td><td align="left"><code>redisTemplate.keys(key);</code></td><td align="center">获取所有key，模糊查询<em>key</em>（支持通配符*）</td></tr><tr><td align="left"><code>EXPIRE key 10</code><br /><code>EXPIREAT key 1293840000</code></td><td align="left"><code>redisTemplate.expire(key, time, TimeUnit.SECONDS);</code><br /><code>redisTemplate.expireAt(key, date);</code></td><td align="center">指定key缓存失效时间<br />指定key缓存到期时间</td></tr><tr><td align="left"><code>TTL key</code></td><td align="left"><code>redisTemplate.getExpire(key, TimeUnit.SECONDS);</code></td><td align="center">根据key获取过期时间</td></tr><tr><td align="left"><code>EXISTS key</code><br /><code>EXISTS key1 key2 key3</code></td><td align="left"><code>redisTemplate.hasKey(key);</code><br /><code>redisTemplate.countExistingKeys(Arrays.asList(key));</code></td><td align="center">判断key是否存在<br />检查key存在的数量</td></tr><tr><td align="left"><code>DEL key</code><br /><code>DEL key1 key2 key3</code></td><td align="left"><code>redisTemplate.delete(key);</code><br /><code>redisTemplate.delete(Arrays.asList(keys));</code></td><td align="center">删除指定key缓存<br />批量删除key</td></tr></tbody></table><h2 id="string">String相关的</h2><p><strong>redisTemplate.opsForValue();&#x2F;&#x2F;操作字符串</strong></p><table><thead><tr><th>Redis命令</th><th>RedisTemplate redisTemplate</th><th>说明</th></tr></thead><tbody><tr><td><code>SET key value</code><br /><code>SET key value time</code></td><td><code>redisTemplate.opsForValue().set(key,value);</code><br /><code>redisTemplate.opsForValue().set(key,value,time);</code></td><td>设置普通缓存<br />设置普通缓存过期时间</td></tr><tr><td><code>GET key</code></td><td><code>redisTemplate.opsForValue().get(key);</code></td><td>获取普通缓存</td></tr><tr><td><code>INCE key</code></td><td><code>redisTemplate.opsForValue().increment(key, delta);</code></td><td>递增</td></tr><tr><td><code>DECR key</code></td><td><code>redisTemplate.opsForValue().increment(key, -delta);</code></td><td>递减</td></tr><tr><td><code>SETNX key value</code></td><td><code>redisTemplate.opsForValue().setIfAbsent(key,value);</code></td><td>将 key 的值设为 value ，当且仅当 key 不存在</td></tr><tr><td><code>SETEX key value</code></td><td><code>redisTemplate.opsForValue().setIfPresent(key,value);</code></td><td>判断当前的键的值是否为v，是的话不作操作，不实的话进行替换。如果没有这个键也不会做任何操作。</td></tr><tr><td><code>GETSET key value</code></td><td><code>redisTemplate.opsForValue().getAndSet(key, value);</code></td><td>key存在设置新值，并返回旧值</td></tr></tbody></table><h2 id="hash">Hash相关的</h2><p><strong>redisTemplate.opsForHash();&#x2F;&#x2F;操作字符串</strong></p><table><thead><tr><th>Redis命令</th><th>RedisTemplate redisTemplate</th><th>说明</th></tr></thead><tbody><tr><td><code>HMSET key key1 value1 key2 value2</code></td><td><code>redisTemplate.opsForHash().putAll(key, map);</code></td><td>设置缓存</td></tr><tr><td><code>HSET key item value</code></td><td><code>redisTemplate.opsForHash().put(key, item, value);</code></td><td>向一张hash表中放入数据,如果不存在将创建</td></tr><tr><td><code>HGET key item</code></td><td><code>redisTemplate..opsForHash().get(key, item);</code></td><td>获取缓存，字段值</td></tr><tr><td><code>HMGET key</code></td><td><code>redisTemplate.opsForHash().entries(key);</code></td><td>获取hashKey对应的所有键值</td></tr><tr><td><code>DELETE key item1 item2 item3</code></td><td><code>redisTemplate.opsForHash().delete(key, item);</code></td><td>将 key 的值设为 value ，当且仅当 key 不存在</td></tr><tr><td><code>HEXISTS key item</code></td><td><code>redisTemplate.opsForHash().hasKey(key, item);</code></td><td>判断hash表中是否有该项的值</td></tr><tr><td><code>HINCRBY key item by</code></td><td><code>redisTemplate.opsForHash().increment(key, item, by);</code></td><td>hash递增 如果不存在,就会创建一个 并把新增后的值返回</td></tr><tr><td><code>HDEL key item by</code></td><td><code>redisTemplate.opsForHash().increment(key, item, -by);</code></td><td>hash递减</td></tr></tbody></table><h2 id="set">Set相关的</h2><p><strong>redisTemplate.opsForedisTemplateet();&#x2F;&#x2F;操作字符串</strong></p><table><thead><tr><th>Redis命令</th><th>RedisTemplate redisTemplate</th><th>说明</th></tr></thead><tbody><tr><td><code>SMEMBEredisTemplate key</code></td><td><code>redisTemplate.opsForedisTemplateet().memberedisTemplate(key)</code></td><td>根据key获取Set中的所有值</td></tr><tr><td><code>SISMEMBER key value</code></td><td><code>redisTemplate.opsForedisTemplateet().isMember(key, value);</code></td><td>根据value从一个set中查询,是否存在</td></tr><tr><td><code>SADD key value1 value2</code></td><td><code>redisTemplate.opsForedisTemplateet().add(key, values);</code></td><td>将数据放入set缓存</td></tr><tr><td><code>SCARD key</code></td><td><code>redisTemplate.opsForedisTemplateet().size(key);</code></td><td>获取set缓存的长度</td></tr><tr><td><code>SREM key value1 value2</code></td><td><code>redisTemplate.opsForedisTemplateet().remove(key, values);</code></td><td>移除值为value的</td></tr></tbody></table><h2 id="list">List相关的</h2><p><strong>redisTemplate.opsForList();&#x2F;&#x2F;操作字符串</strong></p><table><thead><tr><th>Redis命令</th><th>RedisTemplate redisTemplate</th><th>说明</th></tr></thead><tbody><tr><td>&#96;RPUSH key value&#96;&#96;</td><td><code>redisTemplate.opsForList().rightPush(key, value);</code></td><td>将list放入缓存,从右边添加</td></tr><tr><td><code>LPUSH key value</code></td><td><code>redisTemplate.opsForList().leftPush(key, value);</code></td><td>将list放入缓存,从左边添加</td></tr><tr><td><code>LRANGE key 0 -1</code></td><td><code>redisTemplate.opsForList().range(key, start, end);</code></td><td>获取list缓存的内容</td></tr><tr><td><code>LLEN key</code></td><td><code>redisTemplate.opsForList().size(key);</code></td><td>获取list缓存的长度</td></tr><tr><td><code>LINDEX key index</code></td><td><code>redisTemplate.opsForList().index(key, index);</code></td><td>通过索引 获取list中的值</td></tr><tr><td><code>LSET key index value</code></td><td><code>redisTemplate.opsForList().set(key, index, value);</code></td><td>根据索引修改list中的某条数据</td></tr><tr><td><code>LREM key count value</code></td><td><code>redisTemplate.opsForList().remove(key, count, value);</code></td><td>移除N个值为value</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 消息队列</title>
    <link href="/20220831/feaa402796af.html"/>
    <url>/20220831/feaa402796af.html</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-消息队列"><a href="#Redis-消息队列" class="headerlink" title="Redis 消息队列"></a>Redis 消息队列</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisQueueApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Redis消息队列利用List来实现</span><br><span class="hljs-comment">     * 通过向列表左或者右push数据,之后在通过左或者右pop弹出数据来实现</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//向key为test左边push数据</span><br>            redisTemplate.opsForList().leftPush(<span class="hljs-string">&quot;test&quot;</span>, i);<br><span class="hljs-comment">//            redisTemplate.opsForList().rightPush(&quot;test&quot;, i);</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//从key为test左边pop弹出数据</span><br>            System.out.println(redisTemplate.opsForList().leftPop(<span class="hljs-string">&quot;test&quot;</span>));<br><span class="hljs-comment">//            System.out.println(redisTemplate.opsForList().rightPop(&quot;test&quot;));</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis监听缓存失效通知事件</title>
    <link href="/20220831/f7c08bd933d9.html"/>
    <url>/20220831/f7c08bd933d9.html</url>
    
    <content type="html"><![CDATA[<h1 id="redis监听缓存失效通知事件"><a href="#redis监听缓存失效通知事件" class="headerlink" title="redis监听缓存失效通知事件"></a>redis监听缓存失效通知事件</h1><h2 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h2><p><strong>先修改Redis配置</strong></p><blockquote><p>修改redis相关事件配置。找到redis配置文件redis.conf，查看“notify-keyspace-events”的配置项，如果没有，添加“notify-keyspace-events Ex”，如果有值，添加Ex，然后重启Redis。相关参数说明如下：</p></blockquote><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mel">K：keyspace事件，事件以__keyspace@&lt;db&gt;__为前缀进行发布；         <br>E：keyevent事件，事件以__keyevent@&lt;db&gt;__为前缀进行发布；         <br>g：一般性的，非特定类型的命令，比如del，expire，<span class="hljs-keyword">rename</span>等；        <br>$：字符串特定命令；         <br>l：列表特定命令；         <br>s：集合特定命令；         <br>h：哈希特定命令；         <br>z：有序集合特定命令；         <br>x：过期事件，当某个键过期并删除时会产生该事件；         <br>e：驱逐事件，当某个键因maxmemore策略而被删除时，产生该事件；         <br>A：g$lshzxe的别名，因此”AKE”意味着所有事件。<br></code></pre></td></tr></table></figure><p><strong>redis客户端测试：</strong></p><p>客户端1：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; psubscribe __keyevent@0__:expired<br>Reading messages... (press Ctrl-C to quit)<br>1) &quot;psubscribe&quot;<br>2) &quot;__keyevent@0__:expired&quot;<br>3) (integer) 1<br></code></pre></td></tr></table></figure><p><code>keyevent@0:expired</code>解析：</p><ul><li>key 键</li><li>event 事件</li><li>@0 第0个数据库</li><li>expired 过期</li></ul><p>客户端2：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; set a 111 ex 5<br></code></pre></td></tr></table></figure><p>客户端1：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">1) &quot;pmessage&quot;<br>2) &quot;__keyevent@0__:expired&quot;<br>3) &quot;__keyevent@0__:expired&quot;<br>4) &quot;a&quot;<br></code></pre></td></tr></table></figure><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><p><strong>配置Redis监听类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置Redis监听类</span><br><span class="hljs-comment">     * 与Spring Redis Session 冲突</span><br><span class="hljs-comment">     * springSessionRedisMessageListenerContainer: defined by method &#x27;springSessionRedisMessageListenerContainer&#x27; in class path resource [org/springframework/boot/autoconfigure/session/RedisSessionConfiguration$SpringBootRedisHttpSessionConfiguration.class]</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connectionFactory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisMessageListenerContainer <span class="hljs-title function_">container</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        <span class="hljs-type">RedisMessageListenerContainer</span> <span class="hljs-variable">container</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisMessageListenerContainer</span>();<br>        container.setConnectionFactory(connectionFactory);<br><span class="hljs-comment">//        container.addMessageListener(new RedisExpiredListener(), new PatternTopic(&quot;__keyevent@0__:expired&quot;));</span><br>        <span class="hljs-keyword">return</span> container;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>Redis监听类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Redis监听类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/15 15:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenRedisKeyFailure</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">KeyExpirationEventMessageListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListenRedisKeyFailure</span><span class="hljs-params">(RedisMessageListenerContainer listenerContainer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(listenerContainer);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置监听哪个频道</span><br><span class="hljs-comment">     * 我们在配置文件中配置的是8数据库，所以监听8数据库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Topic</span> <span class="hljs-variable">KEYEVENT_EXPIRED_TOPIC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternTopic</span>(<span class="hljs-string">&quot;__keyevent@8__:expired&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRegister</span><span class="hljs-params">(RedisMessageListenerContainer listenerContainer)</span> &#123;<br>        <span class="hljs-comment">// 频道可以是多，多个传list</span><br>        listenerContainer.addMessageListener(<span class="hljs-built_in">this</span>, KEYEVENT_EXPIRED_TOPIC);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 针对redis数据失效事件，进行数据处理</span><br><span class="hljs-comment">     * message：Redis失效的Key，无法获取value值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 失效key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(Message message, <span class="hljs-type">byte</span>[] pattern)</span> &#123;<br>        <span class="hljs-comment">// 用户做自己的业务处理即可,注意message.toString()可以获取失效的key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">expiredKey</span> <span class="hljs-operator">=</span> message.toString();<br>        <span class="hljs-keyword">if</span> (expiredKey.startsWith(<span class="hljs-string">&quot;test:&quot;</span>)) &#123;<br>            <span class="hljs-comment">//如果是Order:开头的key，进行处理</span><br>            log.info(<span class="hljs-string">&quot;Redis 过期的 Key：&#123;&#125;&quot;</span>, expiredKey);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisListenKeyFailureApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisKey</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//设置缓存，2秒过期</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;test:1&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">2</span>, TimeUnit.SECONDS);<br>        <span class="hljs-comment">//程序等待5秒</span><br>        Thread.sleep(<span class="hljs-number">50000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 事务</title>
    <link href="/20220831/3da37e9f695f.html"/>
    <url>/20220831/3da37e9f695f.html</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h1><p> Redis事务的分析及改进：<a href="https://blog.csdn.net/kingmax54212008/article/details/82731199">https://blog.csdn.net/kingmax54212008/article/details/82731199</a></p><h2 id="SpringBoot-Redis-事务"><a href="#SpringBoot-Redis-事务" class="headerlink" title="SpringBoot Redis 事务"></a>SpringBoot Redis 事务</h2><p> <strong>配置类</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-comment">//开启事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//创建RedisTemplate</span><br>        <span class="hljs-comment">// 配置redisTemplate</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        setRedisTemplate(redisTemplate);<br>        <span class="hljs-comment">//开启事务</span><br>        redisTemplate.setEnableTransactionSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><strong>业务代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/15 20:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;test1&quot;</span>));<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-string">&quot;test1&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;异常信息&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无需配置，手动开启事务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> flag 是否报错</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag, String key)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        redisTemplate.multi();<br><br>        redisTemplate.opsForValue().set(key, key);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;异常信息&quot;</span>);<br>        &#125;<br>        redisTemplate.opsForValue().set(key + <span class="hljs-number">2</span>, key + <span class="hljs-number">2</span>);<br><br>        redisTemplate.exec();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTransactionApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    TransactionService transactionService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisKey</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        transactionService.test1();</span><br><span class="hljs-comment">//        transactionService.test2(false, &quot;key1&quot;);</span><br>        transactionService.test2(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;key2&quot;</span>);<br><br><span class="hljs-comment">//        System.out.println(&quot;test1: &quot; + redisTemplate.opsForValue().get(&quot;test1&quot;));</span><br><span class="hljs-comment">//        System.out.println(&quot;key11: &quot; + redisTemplate.opsForValue().get(&quot;key11&quot;));</span><br><span class="hljs-comment">//        System.out.println(&quot;key12: &quot; + redisTemplate.opsForValue().get(&quot;key12&quot;));</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        System.out.println(&quot;key21: &quot; + redisTemplate.opsForValue().get(&quot;key21&quot;));</span><br><span class="hljs-comment">//        System.out.println(&quot;key22: &quot; + redisTemplate.opsForValue().get(&quot;key22&quot;));</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis介绍</title>
    <link href="/20220831/d619669ebb35.html"/>
    <url>/20220831/d619669ebb35.html</url>
    
    <content type="html"><![CDATA[<h1 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h1><h2 id="搜狐开源项目CacheCloud：https-github-com-sohutv-cachecloud"><a href="#搜狐开源项目CacheCloud：https-github-com-sohutv-cachecloud" class="headerlink" title="搜狐开源项目CacheCloud：https://github.com/sohutv/cachecloud"></a>搜狐开源项目CacheCloud：<a href="https://github.com/sohutv/cachecloud">https://github.com/sohutv/cachecloud</a></h2><p>Redis是IO多路复用，Redis用来接收消息的用的是多线程，但当真正处理请求的时候用的是单线程。</p><p>Redis与Memacache区别<br>Redis处理请求是单线程<br>Memacache是多线程</p><p>Redis支持五种数据结构：String，Hash，Set，ZSet，List<br>Memacache仅支持一种：String</p><p>Redis可以设置持久化到硬盘上<br>Memacache只在内存中，服务器宕机后重启数据就丢失了</p><p>Redis 如何持久化</p><blockquote><p>RDB持久化配置</p><p>默认是RDB也就是快照的意思。Redis默认提供了一种策略，也就是在多少秒内操作了多少次就进行一次快照</p><blockquote><p>save 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。</p></blockquote><blockquote><p>save 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。</p></blockquote><blockquote><p>save 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。</p></blockquote><p>AOF持久化配置</p><blockquote><p>appendfsync always     #每次有数据修改发生时都会写入AOF文件。</p></blockquote><blockquote><p>appendfsync everysec  #每秒钟同步一次，该策略为AOF的缺省策略。</p></blockquote><blockquote><p>appendfsync no        #从不同步。高效但是数据不会被持久化。</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 分布式锁</title>
    <link href="/20220831/194fe3fc2cd2.html"/>
    <url>/20220831/194fe3fc2cd2.html</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-分布式锁"><a href="#Redis-分布式锁" class="headerlink" title="Redis 分布式锁"></a>Redis 分布式锁</h1><p>Redis的setnx命令是当key不存在时设置key，但setnx不能同时完成expire设置失效时长，不能保证setnx和expire的原子性。我们可以使用set命令完成setnx和expire的操作，并且这种操作是原子操作。<br>下面是set命令的可选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">set key value [EX seconds] [PX milliseconds] [NX|XX]<br>EX seconds：设置失效时长，单位秒<br>PX milliseconds：设置失效时长，单位毫秒<br>NX：key不存在时设置value，成功返回OK，失败返回(nil)<br>XX：key存在时设置value，成功返回OK，失败返回(nil)<br><br>案例：设置name=p7+，失效时长100s，不存在时设置<br>1.1.1.1:6379&gt; set name p7+ ex 100 nx<br>OK<br>1.1.1.1:6379&gt; get name<br>&quot;p7+&quot;<br>1.1.1.1:6379&gt; ttl name<br>(integer) 94<br></code></pre></td></tr></table></figure><p><strong>实现代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分布式锁</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/15 11:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DistributedLockService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加锁</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Boolean <span class="hljs-title function_">lock</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key, value, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Boolean <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.delete(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">incr</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">distributedLock</span><span class="hljs-params">(String goodsId)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            log.info(goodsId + <span class="hljs-string">&quot;,&quot;</span> + i++);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lock(goodsId, goodsId)) &#123;<br>                <span class="hljs-type">Long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.incr(<span class="hljs-string">&quot;incr_&quot;</span> + goodsId);<br>                log.info(<span class="hljs-string">&quot;递增数量：&#123;&#125;&quot;</span>, l);<br>                <span class="hljs-built_in">this</span>.unLock(goodsId);<br>                <span class="hljs-keyword">return</span> l;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisDistributedLockServiceApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    DistributedLockService distributedLockService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redisDistributedLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;lock&quot;</span>) &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    log.info(<span class="hljs-string">&quot;DistributedLock: &#123;&#125;&quot;</span>, distributedLockService.distributedLock(<span class="hljs-string">&quot;goodsId&quot;</span>));<br>                &#125;<br>            &#125;;<br>            thread.start();<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">20000</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 分布式Session</title>
    <link href="/20220831/37afb75fefdc.html"/>
    <url>/20220831/37afb75fefdc.html</url>
    
    <content type="html"><![CDATA[<h1 id="Redis-分布式Session"><a href="#Redis-分布式Session" class="headerlink" title="Redis 分布式Session"></a>Redis 分布式Session</h1><p><strong>添加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!--    Spring Redis Session    --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">8</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">114.116</span><span class="hljs-number">.69</span><span class="hljs-number">.230</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">16379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">120000</span><br>  <span class="hljs-attr">session:</span><br>    <span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span> <span class="hljs-comment">#指定redis实现spring session</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">60</span> <span class="hljs-comment"># Session 过期时间，单位s</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">flush-mode:</span> <span class="hljs-string">immediate</span> <span class="hljs-comment"># Sessions 刷新模式</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">spring-session</span> <span class="hljs-comment"># Namespace for keys used to store sessions.</span><br></code></pre></td></tr></table></figure><p><strong>编写代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Redis Session</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/15 19:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/redis&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/first&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">firstResp</span><span class="hljs-params">(HttpSession session, String name)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">TestVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestVO</span>();<br>        vo.setName(name);<br>        session.setAttribute(<span class="hljs-string">&quot;account&quot;</span>, vo);<br>        map.put(<span class="hljs-string">&quot;sessionId&quot;</span>, session.getId());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/sessions&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">sessions</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>        map.put(<span class="hljs-string">&quot;sessionId&quot;</span>, session.getId());<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>, session.getAttribute(<span class="hljs-string">&quot;account&quot;</span>));<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>拿Postman测试，启动两个服务，端口分别为8080，8081。在8080添加session，在8081获取session</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【RabbitMQ】队列类型</title>
    <link href="/20220831/6d2e179d9f56.html"/>
    <url>/20220831/6d2e179d9f56.html</url>
    
    <content type="html"><![CDATA[<h1 id="Rabbitmq队列类型"><a href="#Rabbitmq队列类型" class="headerlink" title="Rabbitmq队列类型"></a>Rabbitmq队列类型</h1><ol><li><p>基本消息模型：生产者 –&gt; 队列 –&gt; 一个消费者</p><blockquote><p>一个队列对应一个消费者</p></blockquote></li><li><p>work消息模型：生产者 –&gt; 队列 –&gt; 多个消费者共同消费</p><blockquote><p>一个队列对应多个消费者</p></blockquote></li><li><p>交换机-订阅模型-Fanout：广播，将消息交给所有绑定到交换机的队列，每个消费者都可以收到同一条消息</p><blockquote><p>直连型交换机，根据消息携带的路由键将消息投递给对应队列。</br><br>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键 routing key 。</br><br>然后当一个消息携带着路由值为X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p></blockquote></li><li><p>交换机-订阅模型-Direct：定向，把消息交给符合指定 rotingKey 的队列（路由模式）</p><blockquote><p>扇型交换机，这个交换机没有路由键概念，就算你绑了路由键也是无视的。 这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p></blockquote></li><li><p>交换机-订阅模型-Topic：通配符，把消息交给符合routing pattern（主题模式）的队列</p><blockquote><p>主题交换机，这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键和绑定键之间是有规则的。 简单地介绍下规则：</p><ul><li><code>*</code>(星号) 用来表示一个单词 (必须出现的)</li><li><code>#</code>(井号) 用来表示任意数量（零个或多个）单词</li></ul><p>通配的绑定键是跟队列进行绑定的，举个小例子：</p><blockquote><p>队列Q1 绑定键为 <code>*.TT.*</code> 队列Q2绑定键为 <code>TT.#</code></br><br>如果一条消息携带的路由键为 <code>A.TT.B</code>，那么队列Q1将会收到；</br><br>如果一条消息携带的路由键为 <code>TT.AA.BB</code>，那么队列Q2将会收到；</p></blockquote></blockquote></li><li><p>RPC模式</p></li></ol><blockquote><p>3、4、5这三种都属于交换机-订阅模型，只不过进行路由的方式不同。<br>还有Header Exchange 头交换机 ，Default Exchange 默认交换机，Dead Letter Exchange 死信交换机</p></blockquote><p><strong>参考文献：</strong> </br><br><a href="https://blog.csdn.net/u010277958/article/details/104043158">SpringBoot整合RabbitMQ的五种模式示例</a> </br><br><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">Springboot 整合RabbitMQ</a> </br><br><a href="https://www.pianshen.com/article/2401259016/">RabbitMQ Spring-Boot 整合 使用教程 可靠性投递 顺序消费 高可用方案 事务消息 幂等性 SET化架构 等等</a></p><h2 id="Rabbit-ACK-机制流程图"><a href="#Rabbit-ACK-机制流程图" class="headerlink" title="Rabbit ACK 机制流程图"></a>Rabbit ACK 机制流程图</h2><p><img src="https://i.loli.net/2021/03/25/sWUKYV3pu7FxZAa.png"></p>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ 配置属性</title>
    <link href="/20220831/018ea5d4ed71.html"/>
    <url>/20220831/018ea5d4ed71.html</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ-配置属性"><a href="#RabbitMQ-配置属性" class="headerlink" title="RabbitMQ 配置属性"></a>RabbitMQ 配置属性</h1><p><strong>如何查看SpringBoot属性配置</strong></p><blockquote><p>查看官方文档：属性配置</br><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html</a></p></blockquote><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring.rabbitmq.host:</span> <span class="hljs-comment">#默认localhost</span><br><span class="hljs-attr">spring.rabbitmq.port:</span> <span class="hljs-comment">#默认5672</span><br><span class="hljs-attr">spring.rabbitmq.username:</span> <span class="hljs-comment">#用户名</span><br><span class="hljs-attr">spring.rabbitmq.password:</span> <span class="hljs-comment">#密码</span><br><span class="hljs-attr">spring.rabbitmq.virtual-host:</span> <span class="hljs-comment">#连接到代理时用的虚拟主机</span><br><span class="hljs-attr">spring.rabbitmq.addresses:</span> <span class="hljs-comment">#连接到server的地址列表（以逗号分隔），先addresses后host</span><br><span class="hljs-attr">spring.rabbitmq.requested-heartbeat:</span> <span class="hljs-comment">#请求心跳超时时间，0为不指定，如果不指定时间单位默认为妙</span><br><span class="hljs-attr">spring.rabbitmq.publisher-confirms:</span> <span class="hljs-comment">#是否启用【发布确认】，默认false</span><br><span class="hljs-attr">spring.rabbitmq.publisher-returns:</span> <span class="hljs-comment">#是否启用【发布返回】，默认false</span><br><span class="hljs-attr">spring.rabbitmq.connection-timeout:</span> <span class="hljs-comment">#连接超时时间，单位毫秒，0表示永不超时 </span><br></code></pre></td></tr></table></figure><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring.rabbitmq.ssl.enabled:</span> <span class="hljs-comment">#是否支持ssl，默认false</span><br><span class="hljs-attr">spring.rabbitmq.ssl.key-store:</span> <span class="hljs-comment">#持有SSL certificate的key store的路径</span><br><span class="hljs-attr">spring.rabbitmq.ssl.key-store-password:</span> <span class="hljs-comment">#访问key store的密码</span><br><span class="hljs-attr">spring.rabbitmq.ssl.trust-store:</span> <span class="hljs-comment">#持有SSL certificates的Trust store</span><br><span class="hljs-attr">spring.rabbitmq.ssl.trust-store-password:</span> <span class="hljs-comment">#访问trust store的密码</span><br><span class="hljs-attr">spring.rabbitmq.ssl.trust-store-type:</span> <span class="hljs-string">JKS</span> <span class="hljs-comment">#Trust store 类型.</span><br><span class="hljs-attr">spring.rabbitmq.ssl.algorithm:</span> <span class="hljs-comment">#ssl使用的算法，默认由rabiitClient配置</span><br><span class="hljs-attr">spring.rabbitmq.ssl.validate-server-certificate:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否启用服务端证书验证</span><br><span class="hljs-attr">spring.rabbitmq.ssl.verify-hostname:</span> <span class="hljs-comment">#true 是否启用主机验证</span><br></code></pre></td></tr></table></figure><h2 id="缓存cache"><a href="#缓存cache" class="headerlink" title="缓存cache"></a>缓存cache</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring.rabbitmq.cache.channel.size:</span> <span class="hljs-comment">#缓存中保持的channel数量</span><br><span class="hljs-attr">spring.rabbitmq.cache.channel.checkout-timeout:</span> <span class="hljs-comment">#当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创建一个新channel</span><br><span class="hljs-attr">spring.rabbitmq.cache.connection.size:</span> <span class="hljs-comment">#缓存的channel数，只有是CONNECTION模式时生效</span><br><span class="hljs-string">spring.rabbitmq.cache.connection.mode=channel:</span> <span class="hljs-comment">#连接工厂缓存模式：channel 和 connection</span><br></code></pre></td></tr></table></figure><h2 id="Listener-侦听器（消费者）"><a href="#Listener-侦听器（消费者）" class="headerlink" title="Listener 侦听器（消费者）"></a>Listener 侦听器（消费者）</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">spring.rabbitmq.listener.type=simple:</span> <span class="hljs-comment">#容器类型.simple或direct</span><br><br><span class="hljs-attr">spring.rabbitmq.listener.simple.auto-startup:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否启动时自动启动容器</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.acknowledge-mode:</span> <span class="hljs-comment">#表示消息确认方式，其有三种配置方式，分别是none、manual和auto；默认auto</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.concurrency:</span> <span class="hljs-comment">#最小的消费者数量</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.max-concurrency:</span> <span class="hljs-comment">#最大的消费者数量</span><br><span class="hljs-comment"># 不同的消费者处理消息的速度可能不一样，消息可能在某一处理慢的消费者上积压，为了避免这一问题，提高吞吐量，Spring AMQP给消费者的缓冲大小进行了限制，大小设置为250，</span><br><span class="hljs-comment"># 如果一个消费者有250个未确认的消息，就不再给他继续投递消息，而是给其他处理快的消费者。这个大小是可以通过spring.rabbitmq.listener.simple.prefetch配置的</span><br><span class="hljs-comment"># 工作模式中, 为了合理地分发数据, 需要将 qos 设置成 1, 每次只接收一条消息, 处理完成后才接收下一条消息.</span><br><span class="hljs-comment"># spring boot 中是通过 prefetch 属性进行设置, 改属性的默认值是 250.</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.prefetch:</span> <span class="hljs-comment">#一个消费者最多可处理的nack消息数量，如果有事务的话，必须大于等于transaction数量.</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.transaction-size:</span> <span class="hljs-comment">#当ack模式为auto时，一个事务（ack间）处理的消息数量，最好是小于等于prefetch的数量.若大于prefetch， 则prefetch将增加到这个值</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.default-requeue-rejected:</span> <span class="hljs-comment">#决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge-mode有关系）</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.missing-queues-fatal:</span> <span class="hljs-comment">#true 若容器声明的队列在代理上不可用，是否失败； 或者运行时一个多多个队列被删除，是否停止容器</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.idle-event-interval:</span> <span class="hljs-comment">#发布空闲容器的时间间隔，单位毫秒</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.retry.enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#监听重试是否可用</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.retry.max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#最大重试次数</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.retry.max-interval:</span> <span class="hljs-string">10000ms</span> <span class="hljs-comment">#最大重试时间间隔</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.retry.initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment">#第一次和第二次尝试传递消息的时间间隔</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.retry.multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#应用于上一重试间隔的乘数</span><br><span class="hljs-attr">spring.rabbitmq.listener.simple.retry.stateless:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#重试时有状态or无状态</span><br><br><span class="hljs-attr">spring.rabbitmq.listener.direct.acknowledge-mode:</span> <span class="hljs-comment">#ack模式</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.auto-startup:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否在启动时自动启动容器</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.consumers-per-queue:</span> <span class="hljs-comment">#每个队列消费者数量.</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.default-requeue-rejected:</span> <span class="hljs-comment">#默认是否将拒绝传送的消息重新入队.</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.idle-event-interval:</span> <span class="hljs-comment">#空闲容器事件发布时间间隔.</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.missing-queues-fatal:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#若容器声明的队列在代理上不可用，是否失败.</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.prefetch:</span> <span class="hljs-comment">#每个消费者可最大处理的nack消息数量.</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.retry.enabled:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#是否启用发布重试机制.</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.retry.initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment"># 第一次和第二次尝试传递消息之间的持续时间。</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.retry.max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 传递消息的最大尝试次数。</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.retry.max-interval:</span> <span class="hljs-string">10000ms</span> <span class="hljs-comment"># 两次尝试之间的最长持续时间。</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.retry.multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 应用于前一个重试间隔的倍增器。</span><br><span class="hljs-attr">spring.rabbitmq.listener.direct.retry.stateless:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 重试是无状态还是有状态的。</span><br></code></pre></td></tr></table></figure><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring.rabbitmq.template.mandatory:</span> <span class="hljs-comment">#启用强制信息；默认false</span><br><span class="hljs-attr">spring.rabbitmq.template.receive-timeout:</span> <span class="hljs-comment">#receive() 操作的超时时间</span><br><span class="hljs-attr">spring.rabbitmq.template.reply-timeout:</span> <span class="hljs-comment">#sendAndReceive() 操作的超时时间</span><br><span class="hljs-attr">spring.rabbitmq.template.retry.enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#发送重试是否可用 </span><br><span class="hljs-attr">spring.rabbitmq.template.retry.max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#最大重试次数</span><br><span class="hljs-attr">spring.rabbitmq.template.retry.initial-interva:</span> <span class="hljs-string">1000msl</span> <span class="hljs-comment">#第一次和第二次尝试发布或传递消息之间的间隔</span><br><span class="hljs-attr">spring.rabbitmq.template.retry.multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#应用于上一重试间隔的乘数</span><br><span class="hljs-attr">spring.rabbitmq.template.retry.max-interval:</span> <span class="hljs-number">10000</span> <span class="hljs-comment">#最大重试时间间隔</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
      <tag>配置属性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringBoot】整合Netty实现RPC</title>
    <link href="/20220831/9cb1fe5a2724.html"/>
    <url>/20220831/9cb1fe5a2724.html</url>
    
    <content type="html"><![CDATA[<h1 id="【SpringBoot】整合Netty实现RPC"><a href="#【SpringBoot】整合Netty实现RPC" class="headerlink" title="【SpringBoot】整合Netty实现RPC"></a>【SpringBoot】整合Netty实现RPC</h1><h2 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h2><p><a href="https://blog.csdn.net/qq_35751014/article/details/104443715">Netty高性能架构设计</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU0MzQ5MDA0Mw==&mid=2247498294&idx=1&sn=02b4a2b660a39624c262afa2787e9199&chksm=fb0810a2cc7f99b42f79947ac9265f5cc5293c43f1c1a066a2160740b125ecf37e9cab8aa4f0&mpshare=1&scene=24&srcid=0401GgaijbBylFsB2QErhXje&sharer_sharetime=1617238455381&sharer_shareid=0a45e2c79c575c02b962eb13994476f7#rd">简单了解React线程模型，参考文章【五分钟快速理解 Reactor 模型】</a></p><p><a href="https://blog.csdn.net/a_bcd_123/article/details/103855769">举例说明：Reactor的三种线程模型</a></p><h3 id="线程模型1：传统阻塞-I-x2F-O-服务模型"><a href="#线程模型1：传统阻塞-I-x2F-O-服务模型" class="headerlink" title="线程模型1：传统阻塞 I&#x2F;O 服务模型"></a>线程模型1：传统阻塞 I&#x2F;O 服务模型</h3><p><img src="https://i.loli.net/2021/04/16/CxDQeAHMsTa4cmF.png"></p><p><strong>模型特点：</strong></p><ul><li>采用阻塞<code>IO</code>模式获取输入的数据</li><li>每个链接都需要独立的线程完成数据的输入，业务处理、数据返回。</li></ul><p><strong>问题分析：</strong></p><ul><li>当并发数很大，就会创建大量的线程，占用很大系统资源</li><li>连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在<code>read</code>操作，造成线程资源浪费。</li></ul><h3 id="线程模型2：Reactor-模式"><a href="#线程模型2：Reactor-模式" class="headerlink" title="线程模型2：Reactor 模式"></a>线程模型2：Reactor 模式</h3><blockquote><ol><li>Reactor模式，通过一个或多个输入同时传递给服务处理器的模式（基于事件驱动）</li><li>服务器端程序处理传入的多个请求，并将它们同步分派到相应的处理线程，因此Reactor模式也叫Dispatcher模式（分派模式）</li><li>Reactor模式使用IO复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发处理关键</li></ol></blockquote><p><strong>针对传统阻塞I&#x2F;O服务模型的2个缺点，解决方案如下：</strong></p><ul><li>基于 <code>I/O</code> 复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。<code>Reactor </code>对应的叫法: 1. 反应器模式 2. 分发者模式(<code>Dispatcher</code>) 3. 通知者模式(<code>notifier</code>)</li><li>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。</li></ul><p><img src="https://i.loli.net/2021/04/16/wZizHDsRVaTefg2.png"></p><p>ServiceHandler（Reactor）是个阻塞对象，去监听事件；此时工作线程池(业务处理线程)是空闲状态，当某个连接发送数据后，由ServiceHandler监听到相应的事件，再通过eventDispatch(事件分发)方法分派给工作线程池挑选空闲状态的线程去处理业务，处理完该客户端连接业务后回到空闲状态再等待新的客户端连接业务。</p><p><strong>核心组成</strong></p><ol><li>Reactor: Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。它就像公司的电话接钱员，它接听来自客户的电话并将线路转移到适当的联系人。</li><li>Handlers: 处理程序执行IO事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor通过调度适当的处理程序来响应I&#x2F;O事件，处理程序执行非阻塞操作。</li></ol><h4 id="单-Reactor-单线程"><a href="#单-Reactor-单线程" class="headerlink" title="单 Reactor 单线程"></a>单 Reactor 单线程</h4><p><img src="https://i.loli.net/2021/04/16/gKbaNuUV2Gwoc4C.png"><br><strong>方案说明：</strong></p><blockquote><ol><li>Select是前面IO复用模型介绍的标准网络编程APl，可以实现应用程序通过一个阻塞对象监听多路连接请求</li><li>Reactor对象通过Select监控客户端请求事件，收到事件后通过Dispatch进行分发</li><li>如果是建立连接请求事件，则由Acceptor通过Accept处理连接请求，然后创建一个Handler对象处理连接完成后的后续业务处理</li><li>如果不是建立连接事件，则Reactor会分发调用连接对应的Handler来响应</li><li>Handler会完成Read→业务处理→Send的完整业务流程</li></ol><p>结合实例：服务器端用一个线程通过多路复用搞定所有的IO操作（包括连接，读、写 等)，编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，前面的IO案例就属于这种模型。</p></blockquote><p><strong>模型分析</strong></p><ul><li><strong>优点：</strong> 模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li><li><strong>缺点：</strong> 性能问题，只有一个线程，无法完全发挥多核 CPU 的性能。Handler 在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li><li><strong>缺点：</strong> 可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li><li><strong>使用场景：</strong> 客户端的数量有限，业务处理非常快速，比如 Redis在业务处理的时间复杂度 O(1) 的情况</li></ul><h4 id="单-Reactor-多线程"><a href="#单-Reactor-多线程" class="headerlink" title="单 Reactor 多线程"></a>单 Reactor 多线程</h4><p><img src="https://i.loli.net/2021/04/16/Lwrp6fHeCVPcnbx.png"><br><strong>方案说明：</strong></p><blockquote><ol><li>Reactor对象通过select监控客户端请求事件，收到事件后，通过dispatch进行分发 </li><li>Reactor对象如果接收到建立连接事件请求，则由Acceptor(接收器)通过accept方法处理连接请求，然后创建一个Handler对象处理完成连接后的各种事件业务</li><li>Reactor对象如果不是连接事件请求，则由Reactor分发调用客户端连接对应的Handler来处理，此时Handler是持有客户端连接的channel</li><li>Handler只负责响应事件，不做具体的业务处理，通过read方法读取数据后，会分发给后面的worker线程池的某个线程处理业务</li><li>Worker线程池会分配独立线程完成真正的业务，并将结果返回给Handler</li><li>Handler收到响应后，通过send方法将结果返回给client</li></ol></blockquote><p><strong>模型分析</strong></p><ul><li><strong>优点</strong>：可以充分的利用多核<code>cpu</code> 的处理能力</li><li><strong>缺点</strong>：多线程数据共享和访问比较复杂， <code>reactor</code> 处理所有的事件的监听和响应请求，在单线程运行，在高并发场景容易出现性能瓶颈。</li></ul><h4 id="主从-Reactor-多线程"><a href="#主从-Reactor-多线程" class="headerlink" title="主从 Reactor 多线程"></a>主从 Reactor 多线程</h4><p><img src="https://i.loli.net/2021/04/16/RJ4TP3Zy5XhFkaB.png"></p><p><strong>方案说明：</strong></p><blockquote><ol><li>Reactor主线程MainReactor对象通过select监听连接事件，收到事件后，通过Acceptor处理连接事件</li><li>当Acceptor处理连接事件后，MainReactor将连接分配给SubReactor</li><li>SubReactor将连接加入到连接队列进行监听，并创建handler进行各种事件处理</li><li>当有新事件发生时，SubReactor就会调用对应的handler处理</li><li>handler通过read读取数据，分发给后面的worker线程处理</li><li>worker线程池分配独立的worker线程进行业务处理，并返回结果</li><li>handler收到响应的结果后，再通过send将结果返回给client</li><li>Reactor主线程可以对应多个Reactor子线程，即MainRecator可以关联多个SubReactor</li></ol></blockquote><p><strong>模型分析</strong></p><ul><li><strong>优点：</strong> 父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。</li><li><strong>优点：</strong> 父线程与子线程的数据交互简单，Reactor 主线程只需要把新连接传给子线程，子线程无需返回数据</li><li><strong>缺点：</strong> 编程复杂度较高</li><li><strong>结合实例：</strong> 这种模型在许多项目中广泛使用，包括 Nginx 主从 Reactor 多进程模型，Memcached 主从多线程，Netty 主从多线程模型的支持</li></ul><h4 id="Netty模型"><a href="#Netty模型" class="headerlink" title="Netty模型"></a>Netty模型</h4><blockquote><p>参考文档：<a href="https://blog.csdn.net/qq_35751014/article/details/104443715">https://blog.csdn.net/qq_35751014/article/details/104443715</a></p></blockquote><p><img src="https://s2.loli.net/2022/07/10/W7AFDhwqPUBkH3a.png"></p><blockquote><ol><li>Netty抽象出两组线程池，BossGroup专门负责接收客户端的连接，WorkerGroup专门负责网络的读写。BossGroup和WorkerGroup类型的本质都是NioEventLoopGroup类型。</li><li>NioEventLoopGroup相当于一个线程管理器（类似于ExecutorServevice），它下面维护很多个NioEventLoop线程。<ol><li>在初始化这两个BossGroup和WorkerGroup线程组时，默认会在每个Group中生成CPU*2个NioEventLoop线程数</li><li>当n个连接来了，Group默认会按照连接请求的顺序分别将这些连接分给各个NioEventLoop去处理。</li><li>同时Group还负责管理EventLoop的生命周期。</li></ol></li><li>NioEventLoop表示一个不断循环的执行处理任务的线程<ol><li>它维护了一个线程和任务队列。</li><li>每个NioEventLoop都包含一个Selector，用于监听绑定在它上面的socket通讯。</li><li>每个NioEventLoop相当于Selector，负责处理多个Channel上的事件</li><li>每增加一个请求连接，NioEventLoopGroup就将这个请求依次分发给它下面的NioEventLoop处理。</li></ol></li><li>每个<code>Boss NioEventLoop</code>循环执行的步骤有3步：<ol><li>轮询<code>accept</code>事件</li><li>处理<code>accept</code>事件，与<code>client</code>建立连接，生成<code>NioSocketChannel</code>，并将其注册到某个<code>Worker NioEventLoop</code>的<code>selector</code>上。</li><li>处理任务队列到任务，即<code>runAllTasks</code></li></ol></li><li>每个<code>Worker NioEventLoop</code>循环执行的步骤：<ol><li>轮询<code>read</code>，<code>write</code>事件</li><li>处理<code>I/O</code>事件，即<code>read</code>，<code>write</code>事件，在对应的<code>NioSocketChannel</code>中进行处理</li><li>处理任务队列的任务，即<code>runAllTasks</code></li></ol></li><li>每个 Worker NioEventLoop处理业务时，会使用pipeline（管道），pipeline中维护了一个ChannelHandlerContext链表，而ChannelHandlerContext则保存了Channel相关的所有上下文信息，同时关联一个ChannelHandler对象。如图所示，Channel和pipeline一一对应，ChannelHandler和ChannelHandlerContext一一对应。</li></ol></blockquote><p><img src="https://s2.loli.net/2022/07/10/tHMvpfXlJQF8Tsj.png"></p><blockquote><ol start="7"><li><code>ChannelHandler</code>是一个接口，负责处理或拦截<code>I/O</code>操作，并将其转发到<code>Pipeline</code>中的下一个处理<code>Handler</code>进行处理。</li></ol></blockquote><pre><code class="hljs">                                                 I/O Request                                            via Channel or                                        ChannelHandlerContext                                                      |  +---------------------------------------------------+---------------+  |                           ChannelPipeline         |               |  |                                                  \|/              |  |    +---------------------+            +-----------+----------+    |  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |  |    +----------+----------+            +-----------+----------+    |  |              /|\                                  |               |  |               |                                  \|/              |  |    +----------+----------+            +-----------+----------+    |  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |  |    +----------+----------+            +-----------+----------+    |  |              /|\                                  .               |  |               .                                   .               |  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|  |        [ method call]                       [method call]         |  |               .                                   .               |  |               .                                  \|/              |  |    +----------+----------+            +-----------+----------+    |  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |  |    +----------+----------+            +-----------+----------+    |  |              /|\                                  |               |  |               |                                  \|/              |  |    +----------+----------+            +-----------+----------+    |  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |  |    +----------+----------+            +-----------+----------+    |  |              /|\                                  |               |  +---------------+-----------------------------------+---------------+                  |                                  \|/  +---------------+-----------------------------------+---------------+  |               |                                   |               |  |       [ Socket.read() ]                    [ Socket.write() ]     |  |                                                                   |  |  Netty Internal I/O Threads (Transport Implementation)            |  +-------------------------------------------------------------------+</code></pre><h2 id="先实现简单的Netty通信"><a href="#先实现简单的Netty通信" class="headerlink" title="先实现简单的Netty通信"></a>先实现简单的Netty通信</h2><h3 id="服务端示例"><a href="#服务端示例" class="headerlink" title="服务端示例"></a>服务端示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//创建连接线程组，线程数为1。只负责处理连接请求</span><br>    <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//创建工作线程组，线程数默认为cpu核数*2。处理与客户端的业务处理</span><br>    <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>    <span class="hljs-comment">//创建Server端的启动对象</span><br>    <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>    <span class="hljs-comment">//配置线程组</span><br>    serverBootstrap.group(boss, worker)<br>        <span class="hljs-comment">//使用 NioServerSocketChannel 作为服务器的通道实现</span><br>        .channel(NioServerSocketChannel.class)<br>        <span class="hljs-comment">//给worker线程组初始化处理器</span><br>        .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                socketChannel.pipeline()<br>                    <span class="hljs-comment">//添加字符串的编解码器</span><br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>())<br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>())<br>                    <span class="hljs-comment">//添加对象的编解码器，ClassResolvers.weakCachingConcurrentResolver设置弱引用WeakReferenceMap缓存类加载器，防止内存溢出</span><br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectDecoder</span>(ClassResolvers.weakCachingConcurrentResolver(<span class="hljs-built_in">this</span>.getClass().getClassLoader())))<br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectEncoder</span>())<br>                    <span class="hljs-comment">//添加自定义的业务处理器</span><br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;Object&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.info(<span class="hljs-string">&quot;客户端连接啦。。。客户端地址：&#123;&#125;&quot;</span>, ctx.channel().remoteAddress());<br>                        &#125;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.info(<span class="hljs-string">&quot;服务端接收到的数据：&#123;&#125;&quot;</span>, o.toString());<br>                            <span class="hljs-comment">//价值1个亿的AI代码</span><br>                            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> o.toString();<br>                            str = str.replace(<span class="hljs-string">&quot;吗&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                            str = str.replace(<span class="hljs-string">&quot;？&quot;</span>, <span class="hljs-string">&quot;！&quot;</span>);<br>                            str = str.replace(<span class="hljs-string">&quot;？ &quot;</span>, <span class="hljs-string">&quot;！ &quot;</span>);<br>                            channelHandlerContext.writeAndFlush(str);<br>                        &#125;<br>                    &#125;);<br>            &#125;<br>        &#125;);<br>    <span class="hljs-comment">//启动并且监听</span><br>    <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8888</span>).syncUninterruptibly();<br>    <span class="hljs-comment">//监听关闭通道</span><br>    channelFuture.channel().closeFuture();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户端示例"><a href="#客户端示例" class="headerlink" title="客户端示例"></a>客户端示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//设置客户端工作线程</span><br>    <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>    <span class="hljs-comment">//创建客户端启动对象</span><br>    <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>    bootstrap.group(worker)<br>        <span class="hljs-comment">//通道连接者</span><br>        .channel(NioSocketChannel.class)<br>        <span class="hljs-comment">//给worker线程组初始化处理器</span><br>        .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                socketChannel.pipeline()<br>                    <span class="hljs-comment">//添加字符串的编解码器</span><br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>())<br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>())<br>                    <span class="hljs-comment">//添加对象的编解码器，ClassResolvers.weakCachingConcurrentResolver设置弱引用WeakReferenceMap缓存类加载器，防止内存溢出</span><br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectDecoder</span>(ClassResolvers.weakCachingConcurrentResolver(<span class="hljs-built_in">this</span>.getClass().getClassLoader())))<br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectEncoder</span>())<br>                    <span class="hljs-comment">//添加自定义的业务处理器</span><br>                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;Object&gt;() &#123;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            ctx.writeAndFlush(<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.info(<span class="hljs-string">&quot;客户端接收到的数据：&#123;&#125;&quot;</span>, o.toString());<br>                        &#125;<br>                    &#125;);<br>            &#125;<br>        &#125;);<br><br>    <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>).syncUninterruptibly();<br>    <span class="hljs-comment">//客户端需要输入信息，创建一个扫描器</span><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-keyword">while</span> (scanner.hasNextLine()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-comment">//通过channel发送到服务器端</span><br>        channel.writeAndFlush(msg + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>    &#125;<br>    channelFuture.channel().closeFuture();<br>&#125;<br></code></pre></td></tr></table></figure><p>快启动试试看把，不过需要注意的是，得先启动服务端哦~</p><h2 id="SpringBoot-Netty4实现rpc框架"><a href="#SpringBoot-Netty4实现rpc框架" class="headerlink" title="SpringBoot + Netty4实现rpc框架"></a>SpringBoot + Netty4实现rpc框架</h2><blockquote><p>好了，接下来就让我们进入正题，让我们利用我们所学的知识去实现自己一个简单的rpc框架吧</p></blockquote><p>简单说下RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务。让两个服务之间调用就像调用本地方法一样。</p><p><strong>RPC时序图：</strong></p><p><img src="https://i.loli.net/2021/04/21/Auh4FGsWdUJgqzY.png" alt="QQ截图20210421170511.png"></p><p><strong>RPC流程：</strong></p><blockquote><ol><li>【客户端】发起调用</li><li>【客户端】数据编码</li><li>【客户端】发送编码后的数据到服务端</li><li>【服务端】接收客户端发送的数据</li><li>【服务端】对数据进行解码</li><li>【服务端】处理消息业务并返回结果值</li><li>【服务端】对结果值编码</li><li>【服务端】将编码后的结果值回传给客户端</li><li>【客户端】接收结果值</li><li>【客户端】解码结果值</li><li>【客户端】处理返回数据业务</li></ol></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringBoot依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring容器上下文 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Netty4 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.58.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 工具 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写服务端"><a href="#编写服务端" class="headerlink" title="编写服务端"></a>编写服务端</h3><p><strong>自定义消息协议：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 17:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">430507739718447406L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * interface接口名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String methodName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt;[] parTypes;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object[] pars;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 结果值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object result;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义Rpc注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/2 15:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(value = &#123;ElementType.TYPE, ElementType.FIELD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RpcServer &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义<code>ServerHandle</code>业务处理器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Netty Server端Handle处理类，消息体RpcMessage</span><br><span class="hljs-comment"> * 实现ApplicationContextAware接口：该接口可以加载获取到所有的 spring bean。</span><br><span class="hljs-comment"> * 实现了这个接口的bean，当spring容器初始化的时候，会自动的将ApplicationContext注入进来</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 22:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerHandle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;RpcMessage&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; serviceMap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在类被Spring容器加载时会自动执行setApplicationAware</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> applicationContext Spring上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> BeansException 异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">//从Spring容器中获取到所有拥有@RpcServer注解的Beans集合，Map&lt;Name（对象类型，对象全路径名）,实例对象&gt;</span><br>        Map&lt;String, Object&gt; beansWithAnnotation = applicationContext.getBeansWithAnnotation(RpcServer.class);<br>        log.info(<span class="hljs-string">&quot;被@RpcServer注解加载的Bean: &#123;&#125;&quot;</span>, beansWithAnnotation);<br>        <span class="hljs-keyword">if</span> (beansWithAnnotation.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br>            <span class="hljs-keyword">for</span> (Object o : beansWithAnnotation.values()) &#123;<br>                <span class="hljs-comment">//获取该实例对象实现的接口Class</span><br>                Class&lt;?&gt; anInterface = o.getClass().getInterfaces()[<span class="hljs-number">0</span>];<br>                <span class="hljs-comment">//获取该接口类名，作为Key，实例对象作为Value</span><br>                map.put(anInterface.getName(), o);<br>            &#125;<br>            <span class="hljs-comment">//使用变量接住map</span><br>            serviceMap = map;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;客户端连接了: &#123;&#125;&quot;</span>, ctx.channel().remoteAddress());<br>        <span class="hljs-built_in">super</span>.channelActive(ctx);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionCaught</span><span class="hljs-params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.error(<span class="hljs-string">&quot;异常信息&quot;</span>);<br>        cause.printStackTrace();<br>        <span class="hljs-built_in">super</span>.exceptionCaught(ctx, cause);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, RpcMessage rpcMessage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;客户端发送的消息：&#123;&#125;&quot;</span>, rpcMessage);<br>        <span class="hljs-comment">//从Map中获取实例对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> serviceMap.get(rpcMessage.getName());<br>        <span class="hljs-comment">//获取调用方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> service.getClass().getMethod(rpcMessage.getMethodName(), rpcMessage.getParTypes());<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//反射调用实例对象方法，获取返回值</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(service, rpcMessage.getPars());<br>        rpcMessage.setResult(JSONUtil.toJsonStr(result));<br>        log.info(<span class="hljs-string">&quot;回给客户端的消息：&#123;&#125;&quot;</span>, rpcMessage);<br>        <span class="hljs-comment">//Netty服务端将数据写会Channel并发送给客户端，同时添加一个监听器，当所有数据包发送完成后，关闭通道</span><br>        channelHandlerContext.writeAndFlush(rpcMessage).addListener(ChannelFutureListener.CLOSE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义<code>NettyServer</code>端：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Netty服务端</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/2/24 13:23</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyServer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * server端处理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerHandle serverHandle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务端通道</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Channel channel;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serverHandle server处理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NettyServer</span><span class="hljs-params">(ServerHandle serverHandle)</span> &#123;<br>        <span class="hljs-built_in">this</span>.serverHandle = serverHandle;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> port 启动端口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> &#123;<br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            serverBootstrap.group(boss, worker)<br>                    .channel(NioServerSocketChannel.class)<br>                    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            socketChannel.pipeline()<br>                                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectDecoder</span>(ClassResolvers.weakCachingConcurrentResolver(<span class="hljs-built_in">this</span>.getClass().getClassLoader())))<br>                                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectEncoder</span>())<br>                                    .addLast(serverHandle);<br>                        &#125;<br>                    &#125;);<br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(port).syncUninterruptibly();<br>            log.info(<span class="hljs-string">&quot;服务端启动-端口: &#123;&#125;&quot;</span>, port);<br>            channel = channelFuture.channel();<br>            channel.closeFuture().syncUninterruptibly();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭当前通道</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        channel.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义rpc配置属性类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/4 23:38</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;netty&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyRpcProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> serverPort;<br>&#125;`<br></code></pre></td></tr></table></figure><p><strong>创建Server端启动配置类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * NettyServer服务端配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 18:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(NettyRpcProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerBeanConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> NettyRpcProperties nettyRpcProperties;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerBeanConfig</span><span class="hljs-params">(NettyRpcProperties nettyRpcProperties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nettyRpcProperties = nettyRpcProperties;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置ServerHandle</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ServerHandle处理类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerHandle <span class="hljs-title function_">serverHandle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerHandle</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置NettyServer</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handle ServerHandle处理类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> NettyServer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> NettyServer <span class="hljs-title function_">nettyServer</span><span class="hljs-params">(ServerHandle handle)</span> &#123;<br>        <span class="hljs-type">NettyServer</span> <span class="hljs-variable">nettyServer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyServer</span>(handle);<br><span class="hljs-comment">//        nettyServer.start(nettyRpcProperties.getServerPort());</span><br>        <span class="hljs-keyword">return</span> nettyServer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解决SpringBoot端口无法监听问题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Component</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyServerStart</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> NettyServer nettyServer;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> NettyRpcProperties properties;<br><br>        <span class="hljs-meta">@Autowired</span><br>        NettyServerStart(NettyServer nettyServer, NettyRpcProperties properties) &#123;<br>            <span class="hljs-built_in">this</span>.nettyServer = nettyServer;<br>            <span class="hljs-built_in">this</span>.properties = properties;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            log.info(<span class="hljs-string">&quot;===============ApplicationRunner&quot;</span>);<br>            <span class="hljs-keyword">if</span> (nettyServer != <span class="hljs-literal">null</span>) &#123;<br>                nettyServer.start(properties.getServerPort());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注入Spring容器</strong></p><p>此时有两种方式让该配置自动注入Spring容器生效：</p><ol><li><p>自动注入</p><blockquote><p>在resource目录下创建META-INF目录，创建spring.factories文件</p><p>在该文件里写上</p><p><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=$&#123;包路径:xxx.xxx.xxx&#125;.$&#123;配置类：ServerBeanConfig&#125;</code></p><p>配置好之后，在SpringBoot启动时会自动加载该配置类。</p></blockquote></li><li><p>通过注解注入</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义SpringBoot启动注解</span><br><span class="hljs-comment"> * 注入ServerBeanConfig配置类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 23:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@ImportAutoConfiguration(&#123;ServerBeanConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableNettyServer &#123;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li></ol><h3 id="编写客户端"><a href="#编写客户端" class="headerlink" title="编写客户端"></a>编写客户端</h3><hr><p><strong>创建客户端处理器&#96;ClientHandle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/2 15:19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientHandle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;RpcMessage&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义消息Map，将连接通道Channel作为key，消息返回值作为value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentMap&lt;Channel, RpcMessage&gt; rpcMessageConcurrentMap;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientHandle</span><span class="hljs-params">(ConcurrentMap&lt;Channel, RpcMessage&gt; rpcMessageConcurrentMap)</span> &#123;<br>        <span class="hljs-built_in">this</span>.rpcMessageConcurrentMap = rpcMessageConcurrentMap;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext channelHandlerContext, RpcMessage rpcMessage)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;客户端收到服务端消息：&#123;&#125;&quot;</span>, rpcMessage);<br>        rpcMessageConcurrentMap.put(channelHandlerContext.channel(), rpcMessage);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建客户端启动类<code>NettyClient</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 23:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Channel channel;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存放请求编号与响应对象的映射关系</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentMap&lt;Channel, RpcMessage&gt; rpcMessageConcurrentMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> RpcMessage <span class="hljs-title function_">send</span><span class="hljs-params">(<span class="hljs-type">int</span> port, <span class="hljs-keyword">final</span> RpcMessage rpcMessage)</span> &#123;<br>        <span class="hljs-comment">//客户端需要一个事件循环组</span><br>        <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.group(group)<br>                    .channel(NioSocketChannel.class)<br>                    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            socketChannel.pipeline()<br>                                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectDecoder</span>(ClassResolvers.weakCachingConcurrentResolver(<span class="hljs-built_in">this</span>.getClass().getClassLoader())))<br>                                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectEncoder</span>())<br>                                    .addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientHandle</span>(rpcMessageConcurrentMap));<br>                        &#125;<br>                    &#125;);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port).syncUninterruptibly();<br>            log.info(<span class="hljs-string">&quot;连接服务端成功: &quot;</span> + channelFuture.channel().remoteAddress());<br>            channel = channelFuture.channel();<br>            channel.writeAndFlush(rpcMessage);<br>            log.info(<span class="hljs-string">&quot;发送数据成功：&#123;&#125;&quot;</span>, rpcMessage);<br>            channel.closeFuture().syncUninterruptibly();<br>            <span class="hljs-keyword">return</span> rpcMessageConcurrentMap.get(channel);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;client exception&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            group.shutdownGracefully();<br>            <span class="hljs-comment">//移除请求编号和响应对象直接的映射关系</span><br>            rpcMessageConcurrentMap.remove(channel);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        channel.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义Netty客户端Bean后置处理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Netty客户端Bean后置处理器</span><br><span class="hljs-comment"> * 实现Spring后置处理器接口：BeanPostProcessor</span><br><span class="hljs-comment"> * 在Bean对象在实例化和依赖注入完毕后，在显示调用初始化方法的前后添加我们自己的逻辑。注意是Bean实例化完毕后及依赖注入完成后触发的</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/2 23:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyClientBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> NettyClient nettyClient;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NettyClientBeanPostProcessor</span><span class="hljs-params">(NettyClient nettyClient)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nettyClient = nettyClient;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实例化、依赖注入完毕，在调用显示的初始化之前完成一些定制的初始化任务</span><br><span class="hljs-comment">     * 注意：方法返回值不能为null</span><br><span class="hljs-comment">     * 如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到Bean实例对象</span><br><span class="hljs-comment">     * 因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, <span class="hljs-meta">@Nullable</span> String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">//获取实例Class</span><br>        Class&lt;?&gt; beanClass = bean.getClass();<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">//获取该类所有字段</span><br>            Field[] fields = beanClass.getDeclaredFields();<br>            <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>                <span class="hljs-comment">//判断该字段是否拥有@RpcServer</span><br>                <span class="hljs-keyword">if</span> (field.getAnnotation(RpcServer.class) != <span class="hljs-literal">null</span>) &#123;<br>                    field.setAccessible(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//通过JDK动态代理获取该类的代理对象</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(field.getType().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;field.getType()&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientInvocationHandle</span>(nettyClient));<br>                        <span class="hljs-comment">//将代理类注入该字段</span><br>                        field.set(bean, o);<br>                        log.info(<span class="hljs-string">&quot;创建代理类 ===&gt;&gt;&gt; &#123;&#125;&quot;</span>, beanName);<br>                    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                        log.error(e.getMessage());<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> ((beanClass = beanClass.getSuperclass()) != <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实例化、依赖注入、初始化完毕时执行</span><br><span class="hljs-comment">     * 注意：方法返回值不能为null</span><br><span class="hljs-comment">     * 如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到Bean实例对象</span><br><span class="hljs-comment">     * 因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">// 可以根据beanName不同执行不同的处理操作</span><br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * JDK动态代理处理器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientInvocationHandle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> NettyClient nettyClient;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientInvocationHandle</span><span class="hljs-params">(NettyClient nettyClient)</span> &#123;<br>            <span class="hljs-built_in">this</span>.nettyClient = nettyClient;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 代理方法调用</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> proxy  代理类</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> method 方法</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> args   参数</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>            <span class="hljs-comment">//组装Netty参数</span><br>            <span class="hljs-type">RpcMessage</span> <span class="hljs-variable">rpcMessage</span> <span class="hljs-operator">=</span> RpcMessage.builder()<br>                    .name(method.getDeclaringClass().getName())<br>                    .methodName(method.getName())<br>                    .parTypes(method.getParameterTypes())<br>                    .pars(args)<br>                    .build();<br>            <span class="hljs-comment">//调用Netty，发送数据</span><br>            <span class="hljs-type">RpcMessage</span> <span class="hljs-variable">send</span> <span class="hljs-operator">=</span> nettyClient.send(<span class="hljs-number">1111</span>, rpcMessage);<br>            log.info(<span class="hljs-string">&quot;接收到服务端数据：&#123;&#125;, 返回结果值 ====》》》》&#123;&#125;&quot;</span>, send, send.getResult());<br>            <span class="hljs-keyword">return</span> send.getResult();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义客户端配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 18:24</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientBeanConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> NettyClient <span class="hljs-title function_">nettyClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClient</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> NettyClientBeanPostProcessor <span class="hljs-title function_">nettyClientBeanPostProcessor</span><span class="hljs-params">(NettyClient nettyClient)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NettyClientBeanPostProcessor</span>(nettyClient);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>最后和服务端一样，注入Spring容器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 23:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@ImportAutoConfiguration(&#123;ClientBeanConfig.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableNettyClient &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此我们的SpringBoot + Netty4的就已经实现了最最简单的rpc框架模式了；然后我们就可以引用我们自己的rpc依赖了。</p><p><strong>最后再执行一下maven命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install<br></code></pre></td></tr></table></figure><h2 id="netty-rpc-examples例子"><a href="#netty-rpc-examples例子" class="headerlink" title="netty-rpc-examples例子"></a>netty-rpc-examples例子</h2><h3 id="接口服务"><a href="#接口服务" class="headerlink" title="接口服务"></a>接口服务</h3><p>pom里啥也没有。。。</p><p><strong>定义一个接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/1 17:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Test1Api</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span>;<br><br>    String <span class="hljs-title function_">testStr</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    Object <span class="hljs-title function_">testObj</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="rpc-server服务端"><a href="#rpc-server服务端" class="headerlink" title="rpc-server服务端"></a>rpc-server服务端</h3><blockquote><p>正常的SpringBoot工程</p></blockquote><p><strong>引入pom</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自定义rpc依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.happyloves.rpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-rpc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 接口依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.happyloves.netty.rpc.examples.api<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rpc-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置属性</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">rpc-server</span><br><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">netty.server-port</span>=<span class="hljs-string">1111</span><br></code></pre></td></tr></table></figure><p><strong>创建一个实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/2 23:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">667178018106218163L</span>;<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建Server实现Test1Api接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/2 23:59</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@RpcServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Test1Api</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;111111111&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;222222222,&#123;&#125;,&#123;&#125;&quot;</span>, id, name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testStr</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;33333333333333333,&#123;&#125;&quot;</span>, id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;33333333333333333 &quot;</span> + id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">testObj</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;444444444444444444&quot;</span>);<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        account.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>最后在SpringBoot启动类上加上@EnableNettyServer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/2 23:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableNettyServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcServerApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RpcServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="rpc-server客户端"><a href="#rpc-server客户端" class="headerlink" title="rpc-server客户端"></a>rpc-server客户端</h3><p><strong>引入pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.happyloves.rpc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-rpc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.happyloves.netty.rpc.examples.api<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rpc-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>创建Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/3/3 0:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientController</span> &#123;<br>    <span class="hljs-meta">@RpcServer</span><br>    <span class="hljs-keyword">private</span> Test1Api testServiceImpl;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        testServiceImpl.test();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        testServiceImpl.test(id, name);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test3&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testStr</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> testServiceImpl.testStr(id);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test4&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">testObj</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> testServiceImpl.testObj();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>最后在启动类上加上注解@EnableNettyClient</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableNettyClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcClientApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RpcClientApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>先运行服务端，在运行客户端，然后在调用客户端接口就可以看到服务端能够接收到客户端发来的消息，然后服务端处理并返回，客户端接收并返回。。。</p><p>至此，一个小demo就完成了。</p><p>当然啦，后续还有很多需求需要处理的，比方说当前demo中客户端每次通信都需要创建一个实例去连接、服务的注册、客户端和服务端是同一个应用等等，这个后面再慢慢完善吧</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Netty</tag>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LambdaCriteria</title>
    <link href="/20220831/ebcfd7f5bf6b.html"/>
    <url>/20220831/ebcfd7f5bf6b.html</url>
    
    <content type="html"><![CDATA[<h1 id="LambdaCriteria"><a href="#LambdaCriteria" class="headerlink" title="LambdaCriteria"></a>LambdaCriteria</h1><p>不知道各位读者有没有使用过<a href="https://mp.baomidou.com/">mybatis-plus</a>,如果使用过的话，那么条件构造器一定也比较熟悉。</p><p>那么先让我们来熟悉下所需要的一些基本知识。</p><h2 id="Function-lt-T-R-gt"><a href="#Function-lt-T-R-gt" class="headerlink" title="Function&lt;T, R&gt;"></a>Function&lt;T, R&gt;</h2><blockquote><p>JAVA8新增函数式接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Represents a function that accepts one argument and produces a result.</span><br><span class="hljs-comment"> 表示接受一个参数并产生结果的函数。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;</span><br><span class="hljs-comment"> * whose functional method is &#123;<span class="hljs-doctag">@link</span> #apply(Object)&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the type of the input to the function:函数的输入类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;R&gt; the type of the result of the function:函数结果的类型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Function</span>&lt;T, R&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Applies this function to the given argument.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> t the function argument</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the function result</span><br><span class="hljs-comment">     */</span><br>    R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t)</span>;<br>...<br></code></pre></td></tr></table></figure><p><strong>@FunctionalInterface</strong></p><blockquote><ol><li>该注解只能标记在”有且仅有一个抽象方法”的接口上。</li><li>JDK8接口中的静态方法和默认方法，都不算是抽象方法。</li><li>接口默认继承java.lang.Object，所以如果接口显示声明覆盖了Object中方法，那么也不算抽象方法。</li><li>该注解不是必须的，如果一个接口符合”函数式接口”定义，那么加不加该注解都没有影响。加上该注解能够更好地让编译器进行检查。如果编写的不是函数式接口，但是加上了@FunctionInterface，那么编译器会报错。</li></ol></blockquote><h2 id="自定义SFunction-lt-T-R-gt-接口"><a href="#自定义SFunction-lt-T-R-gt-接口" class="headerlink" title="自定义SFunction&lt;T, R&gt;接口"></a>自定义<code>SFunction&lt;T, R&gt;</code>接口</h2><blockquote><p>参考mybatis-plus的Lambda条件构造器自定义<code>SFunction&lt;T, R&gt;</code>继承<code>Function&lt;T, R&gt;</code>, 和<code>Serializable</code>；使我们自定义的<code>SFunction&lt;T, R&gt;</code>函数式接口是支持序列化的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使Function获取序列化能力</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/4/2 14:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SFunction</span>&lt;T, R&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Function</span>&lt;T, R&gt;, Serializable &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么函数式接口序列化之后能够获得什么呢？请继续往下看</p><h2 id="SerializedLambda"><a href="#SerializedLambda" class="headerlink" title="SerializedLambda"></a>SerializedLambda</h2><blockquote><p><code>SerializedLambda</code>是jdk1.8提供的一个新的类，凡是继承了Serializable的函数式接口的实例都可以获取一个属于它的SerializedLambda实例，并且通过它获取到方法的名称，根据我们标准的java bean的定义规则就可以通过方法名称来获取属性名称</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; SerializedLambda <span class="hljs-title function_">getSerializedLambda</span><span class="hljs-params">(SFunction&lt;T, ?&gt; fn)</span> &#123;<br>    <span class="hljs-type">SerializedLambda</span> <span class="hljs-variable">lambda</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取函数式接口的Class类型，再获取该Class里的序列化writeReplace方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> fn.getClass().getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        method.setAccessible(Boolean.TRUE);<br>        <span class="hljs-comment">//然后调用该方法，最后获取的是SerializedLambda对象</span><br>        lambda  = (SerializedLambda) method.invoke(fn);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>    <span class="hljs-keyword">return</span> lambda;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Object</code></td><td align="left"><code>getCapturedArg(int i)</code></td><td align="left">获取lambda捕获站点的动态参数。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>getCapturedArgCount()</code></td><td align="left">获取lambda捕获站点的动态参数计数。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getCapturingClass()</code></td><td align="left">获取捕获此lambda的类的名称。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getFunctionalInterfaceClass()</code></td><td align="left">获取此lambda已转换为的调用类型的名称</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getFunctionalInterfaceMethodName()</code></td><td align="left">获取已转换此lambda的功能接口的主要方法的名称。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getFunctionalInterfaceMethodSignature()</code></td><td align="left">获取此lambda已转换为的功能接口的主要方法的签名。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getImplClass()</code></td><td align="left"><strong>获取包含实现方法的类的名称。</strong></td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>getImplMethodKind()</code></td><td align="left">获取方法句柄类（参见<a href="http://www.1024sky.cn/blog/article/MethodHandleInfo.html"><code>MethodHandleInfo</code></a> ）的实现方法。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getImplMethodName()</code></td><td align="left"><strong>获取实现方法的名称。</strong></td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getImplMethodSignature()</code></td><td align="left">获取实现方法的签名。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getInstantiatedMethodType()</code></td><td align="left">在将类型变量替换为来自捕获站点的实例化之后，获取主要功能接口方法的签名。</td></tr></tbody></table><p>这里我们主要使用的就是<code>getImplClass()</code>和<code>getImplMethodName()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; String <span class="hljs-title function_">getSerializedLambda</span><span class="hljs-params">(SFunction&lt;T, ?&gt; fn)</span> &#123;<br>    <span class="hljs-type">SerializedLambda</span> <span class="hljs-variable">serializedLambda</span> <span class="hljs-operator">=</span> serializedLambda(fn);<br>    <span class="hljs-comment">// 从lambda信息取出method、field、class等</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> serializedLambda.getImplMethodName().substring(<span class="hljs-string">&quot;get&quot;</span>.length());<br>    fieldName = fieldName.replaceFirst(fieldName.charAt(<span class="hljs-number">0</span>) + <span class="hljs-string">&quot;&quot;</span>, (fieldName.charAt(<span class="hljs-number">0</span>) + <span class="hljs-string">&quot;&quot;</span>).toLowerCase());<br>    Field field;<br>    <span class="hljs-keyword">try</span> &#123;<br>        field = Class.forName(serializedLambda.getImplClass().replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>)).getDeclaredField(fieldName);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | NoSuchFieldException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> fieldName;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们就能获取到字段名了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(ColumnUtil.getName(Student::getName));<br>    System.out.println(ColumnUtil.getName(Student::getAge));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>好了，接下来我们就可以参照<code>mybatis-plus</code>的条件构造器，来实现我们自己的<code>mongoDB</code>或者<code>ES</code>的条件构造器了。</strong></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【环境安装】MongoDB安装</title>
    <link href="/20220831/2aba3048bdc0.html"/>
    <url>/20220831/2aba3048bdc0.html</url>
    
    <content type="html"><![CDATA[<h1 id="【环境安装】MongoDB安装"><a href="#【环境安装】MongoDB安装" class="headerlink" title="【环境安装】MongoDB安装"></a>【环境安装】MongoDB安装</h1><h2 id="副本集"><a href="#副本集" class="headerlink" title="副本集"></a>副本集</h2><p><strong>去官网下载MongoDB安装压缩包</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载</span><br>wget https://xxxxx.com/xxx.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar -zxvf xxx.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建目录</span><br>mkdir -p /mongodb/bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进去解压后的mongodb，bin目录</span><br>cd xxx/bin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制bin下的文件到刚刚创建的bin目录下</span><br>cp * /mongodb/bin<br></code></pre></td></tr></table></figure><p><strong>创建目录</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">for  i in 37777 37778 37779<br>    do <br>      mkdir -p /mongodb/$i/conf<br>      mkdir -p /mongodb/$i/data<br>      mkdir -p /mongodb/$i/log<br>done<br></code></pre></td></tr></table></figure><p><strong>创建配置</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt;&gt;/mongodb/37777/conf/mongod.conf&lt;&lt;&#x27;EOF&#x27;<br>systemLog:<br>  destination: file<br>  path: /mongodb/37777/log/mongodb.log<br>  logAppend: true<br>storage:<br>  journal:<br>    enabled: true<br>  dbPath: /mongodb/37777/data<br>  directoryPerDB: true<br>  wiredTiger:<br>    engineConfig:<br>      directoryForIndexes: true<br>    collectionConfig:<br>      blockCompressor: zlib<br>    indexConfig:<br>      prefixCompression: true<br>processManagement:<br>  fork: true<br>net:<br>  port: 37777<br>replication:<br>  oplogSizeMB: 2048<br>  replSetName: mongo_data #名称<br>EOF<br></code></pre></td></tr></table></figure><p><strong>复制配置</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in 37778 37779<br>  do  <br>   \cp  /mongodb/37777/conf/mongod.conf  /mongodb/$i/conf/<br>done<br></code></pre></td></tr></table></figure><p><strong>修改配置</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in 37778 37779<br>  do <br>    sed  -i  &quot;s#37777#$i#g&quot; /mongodb/$i/conf/mongod.conf<br>done<br></code></pre></td></tr></table></figure><p><strong>启动</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in 37777 37778 37779<br>  do  <br>    mongod -f /mongodb/$i/conf/mongod.conf  --bind_ip_all<br>done<br></code></pre></td></tr></table></figure><p><strong>关闭</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in 37777 37778 37779<br>   do  <br>     mongod --shutdown  -f /mongodb/$i/conf/mongod.conf <br>done<br></code></pre></td></tr></table></figure><p><strong>mongodb日志文件分隔删除</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先切割日志文件</span><br>vim mongodb-log.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>for pid in $(pidof /mongodb/bin/mongod)<br> do<br>kill -SIGUSR1 $pid<br>done <br><span class="hljs-meta prompt_"># </span><span class="language-bash">再删除7天之前的文件</span><br>for i in 37777 37778 37779<br>  do  <br>    find /mongodb/37777/log/testlog/ -mtime 7 -delete<br>done<br>exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存退出：:wq</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加执行文件</span><br>chmod -x mongodb-log.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加linux定时器 crontab</span><br>crontab -e<br>59 23 * * * /mongodb/mongodb-log.sh # 每天23点59分执行一次<br><br></code></pre></td></tr></table></figure><p><strong>配置mongodb集群</strong></p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mongo --port 37777 #连接mongodb<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mongojs">config = &#123;_id: &#x27;mongo_data&#x27;, members: [<br>                          &#123;_id: 0, host: &#x27;$&#123;ip&#125;:37777&#x27;&#125;,<br>                          &#123;_id: 1, host: &#x27;$&#123;ip&#125;:37778&#x27;&#125;,<br>                          &#123;_id: 2, host: &#x27;$&#123;ip&#125;:37779&#x27;&#125;]<br>          &#125;<br>rs.initiate(config) //初始化这个配置<br>rs.status()         //查看整体复制集状态<br>rs.isMaster()       //查看当前是否是主节点<br><br>rs.add(&quot;$&#123;ip&#125;:$&#123;port&#125;&quot;)    // 新增从节点<br>rs.addArb(&quot;$&#123;ip&#125;:$&#123;port&#125;&quot;) // 新增仲裁节点<br>rs.remove(&quot;$&#123;ip&#125;:$&#123;port&#125;&quot;) // 删除一个节点<br>rs.reconfig(cfg)           // 重写复制集配置<br></code></pre></td></tr></table></figure><p><strong>修改集群IP</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取副本集配置</span><br>replication:OTHER&gt; cfg=rs.conf()<br>replication:OTHER&gt; printjson(cfg)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置节点</span><br>replication:OTHER&gt; printjson(cfg.members[0])<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改节点端口</span><br>replication:OTHER&gt; cfg.members[0].host=&quot;192.168.249.181:27000&quot;<br>replication:OTHER&gt; cfg.members[1].host=&quot;192.168.249.181:27001&quot;<br>replication:OTHER&gt; cfg.members[2].host=&quot;192.168.249.181:27002&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新配置</span><br>replication:OTHER&gt; rs.reconfig(cfg)    # 可能会报错&quot;errmsg&quot; : &quot;replSetReconfig should only be run on PRIMARY, but my state is REMOVED; use the \&quot;force\&quot; argument to override&quot;,<br><span class="hljs-meta prompt_"># </span><span class="language-bash">报错的话，根据报错信息加强制指令执行</span><br>replication:OTHER&gt; rs.reconfig(cfg, &#123;force : true&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javassist使用全解析</title>
    <link href="/20220831/4e4cc5927eec.html"/>
    <url>/20220831/4e4cc5927eec.html</url>
    
    <content type="html"><![CDATA[<h2 id="javassist使用全解析"><a href="#javassist使用全解析" class="headerlink" title="javassist使用全解析"></a>javassist使用全解析</h2><p>Java 字节码以二进制的形式存储在 .class 文件中，每一个 .class 文件包含一个 Java 类或接口。Javaassist 就是一个用来 处理 Java 字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以去生成一个新的类对象，通过完全手动的方式。</p><h3 id="1-使用-Javassist-创建一个-class-文件"><a href="#1-使用-Javassist-创建一个-class-文件" class="headerlink" title="1. 使用 Javassist 创建一个 class 文件"></a>1. 使用 Javassist 创建一个 class 文件</h3><p>首先需要引入jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.25.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写创建对象的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rickiyang.learn.javassist;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-08-06</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreatePerson</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个Person 对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createPseson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>        <span class="hljs-comment">// 1. 创建一个空类</span><br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;com.rickiyang.learn.javassist.Person&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 新增一个字段 private String name;</span><br>        <span class="hljs-comment">// 字段名为name</span><br>        <span class="hljs-type">CtField</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, cc);<br>        <span class="hljs-comment">// 访问级别是 private</span><br>        param.setModifiers(Modifier.PRIVATE);<br>        <span class="hljs-comment">// 初始值是 &quot;xiaoming&quot;</span><br>        cc.addField(param, CtField.Initializer.constant(<span class="hljs-string">&quot;xiaoming&quot;</span>));<br><br>        <span class="hljs-comment">// 3. 生成 getter、setter 方法</span><br>        cc.addMethod(CtNewMethod.setter(<span class="hljs-string">&quot;setName&quot;</span>, param));<br>        cc.addMethod(CtNewMethod.getter(<span class="hljs-string">&quot;getName&quot;</span>, param));<br><br>        <span class="hljs-comment">// 4. 添加无参的构造函数</span><br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">cons</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, cc);<br>        cons.setBody(<span class="hljs-string">&quot;&#123;name = \&quot;xiaohong\&quot;;&#125;&quot;</span>);<br>        cc.addConstructor(cons);<br><br>        <span class="hljs-comment">// 5. 添加有参的构造函数</span><br>        cons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>)&#125;, cc);<br>        <span class="hljs-comment">// $0=this / $1,$2,$3... 代表方法参数</span><br>        cons.setBody(<span class="hljs-string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);<br>        cc.addConstructor(cons);<br><br>        <span class="hljs-comment">// 6. 创建一个名为printName方法，无参数，无返回值，输出name值</span><br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtMethod</span>(CtClass.voidType, <span class="hljs-string">&quot;printName&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, cc);<br>        ctMethod.setModifiers(Modifier.PUBLIC);<br>        ctMethod.setBody(<span class="hljs-string">&quot;&#123;System.out.println(name);&#125;&quot;</span>);<br>        cc.addMethod(ctMethod);<br><br>        <span class="hljs-comment">//这里会将这个创建的类对象编译为.class文件</span><br>        cc.writeFile(<span class="hljs-string">&quot;/Users/yangyue/workspace/springboot-learn/java-agent/src/main/java/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            createPseson();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行上面的 main 函数之后，会在指定的目录内生成 Person.class 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by Fernflower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> com.rickiyang.learn.javassist;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xiaoming&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String var1)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = var1;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;xiaohong&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String var1)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = var1;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟咱们预想的一样。</p><p>在 Javassist 中，类 <code>Javaassit.CtClass</code> 表示 class 文件。一个 GtClass (编译时类）对象可以处理一个 class 文件，<code>ClassPool</code>是 <code>CtClass</code> 对象的容器。它按需读取类文件来构造 <code>CtClass</code> 对象，并且保存 <code>CtClass</code> 对象以便以后使用。</p><p>需要注意的是 ClassPool 会在内存中维护所有被它创建过的 CtClass，当 CtClass 数量过多时，会占用大量的内存，API中给出的解决方案是 <strong>有意识的调用<code>CtClass</code>的<code>detach()</code>方法以释放内存</strong>。</p><p><code>ClassPool</code>需要关注的方法：</p><ol><li>getDefault : 返回默认的<code>ClassPool</code> 是单例模式的，一般通过该方法创建我们的ClassPool；</li><li>appendClassPath, insertClassPath : 将一个<code>ClassPath</code>加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬；</li><li>toClass : 将修改后的CtClass加载至当前线程的上下文类加载器中，CtClass的<code>toClass</code>方法是通过调用本方法实现。<strong>需要注意的是一旦调用该方法，则无法继续修改已经被加载的class</strong>；</li><li>get , getCtClass : 根据类路径名获取该类的CtClass对象，用于后续的编辑。</li></ol><p><code>CtClass</code>需要关注的方法：</p><ol><li>freeze : 冻结一个类，使其不可修改；</li><li>isFrozen : 判断一个类是否已被冻结；</li><li>prune : 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用；</li><li>defrost : 解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用 prune 方法；</li><li>detach : 将该class从ClassPool中删除；</li><li>writeFile : 根据CtClass生成 <code>.class</code> 文件；</li><li>toClass : 通过类加载器加载该CtClass。</li></ol><p>上面我们创建一个新的方法使用了<code>CtMethod</code>类。CtMthod代表类中的某个方法，可以通过CtClass提供的API获取或者CtNewMethod新建，通过CtMethod对象可以实现对方法的修改。</p><p><code>CtMethod</code>中的一些重要方法：</p><ol><li>insertBefore : 在方法的起始位置插入代码；</li><li>insterAfter : 在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception；</li><li>insertAt : 在指定的位置插入代码；</li><li>setBody : 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除；</li><li>make : 创建一个新的方法。</li></ol><p>注意到在上面代码中的：setBody()的时候我们使用了一些符号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// $0=this / $1,$2,$3... 代表方法参数</span><br>cons.setBody(<span class="hljs-string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><p>具体还有很多的符号可以使用，但是不同符号在不同的场景下会有不同的含义，所以在这里就不在赘述，可以看javassist 的说明文档。<a href="http://www.javassist.org/tutorial/tutorial2.html">http://www.javassist.org/tutorial/tutorial2.html</a></p><h3 id="2-调用生成的类对象"><a href="#2-调用生成的类对象" class="headerlink" title="2. 调用生成的类对象"></a>2. 调用生成的类对象</h3><h4 id="1-通过反射的方式调用"><a href="#1-通过反射的方式调用" class="headerlink" title="1. 通过反射的方式调用"></a>1. 通过反射的方式调用</h4><p>上面的案例是创建一个类对象然后输出该对象编译完之后的 .class 文件。那如果我们想调用生成的类对象中的属性或者方法应该怎么去做呢？javassist也提供了相应的api，生成类对象的代码还是和第一段一样，将最后写入文件的代码替换为如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里不写入文件，直接实例化</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> cc.toClass().newInstance();<br><span class="hljs-comment">// 设置值</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> person.getClass().getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>setName.invoke(person, <span class="hljs-string">&quot;cunhua&quot;</span>);<br><span class="hljs-comment">// 输出值</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> person.getClass().getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>execute.invoke(person);<br></code></pre></td></tr></table></figure><p>然后执行main方法就可以看到调用了 <code>printName</code>方法。</p><h4 id="2-通过读取-class-文件的方式调用"><a href="#2-通过读取-class-文件的方式调用" class="headerlink" title="2. 通过读取 .class 文件的方式调用"></a>2. 通过读取 .class 文件的方式调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-comment">// 设置类路径</span><br>pool.appendClassPath(<span class="hljs-string">&quot;/Users/yangyue/workspace/springboot-learn/java-agent/src/main/java/&quot;</span>);<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.rickiyang.learn.javassist.Person&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> ctClass.toClass().newInstance();<br><span class="hljs-comment">//  ...... 下面和通过反射的方式一样去使用</span><br></code></pre></td></tr></table></figure><h4 id="3-通过接口的方式"><a href="#3-通过接口的方式" class="headerlink" title="3. 通过接口的方式"></a>3. 通过接口的方式</h4><p>上面两种其实都是通过反射的方式去调用，问题在于我们的工程中其实并没有这个类对象，所以反射的方式比较麻烦，并且开销也很大。那么如果你的类对象可以抽象为一些方法得合集，就可以考虑为该类生成一个接口类。这样在<code>newInstance()</code>的时候我们就可以强转为接口，可以将反射的那一套省略掉了。</p><p>还拿上面的<code>Person</code>类来说，新建一个<code>PersonI</code>接口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rickiyang.learn.javassist;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-08-07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PersonI</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>;<br><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现部分的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>pool.appendClassPath(<span class="hljs-string">&quot;/Users/yangyue/workspace/springboot-learn/java-agent/src/main/java/&quot;</span>);<br><br><span class="hljs-comment">// 获取接口</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">codeClassI</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.rickiyang.learn.javassist.PersonI&quot;</span>);<br><span class="hljs-comment">// 获取上面生成的类</span><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.rickiyang.learn.javassist.Person&quot;</span>);<br><span class="hljs-comment">// 使代码生成的类，实现 PersonI 接口</span><br>ctClass.setInterfaces(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;codeClassI&#125;);<br><br><span class="hljs-comment">// 以下通过接口直接调用 强转</span><br><span class="hljs-type">PersonI</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (PersonI)ctClass.toClass().newInstance();<br>System.out.println(person.getName());<br>person.setName(<span class="hljs-string">&quot;xiaolv&quot;</span>);<br>person.printName();<br></code></pre></td></tr></table></figure><p>使用起来很轻松。</p><h3 id="3-修改现有的类对象"><a href="#3-修改现有的类对象" class="headerlink" title="3. 修改现有的类对象"></a>3. 修改现有的类对象</h3><p>前面说到新增一个类对象。这个使用场景目前还没有遇到过，一般会遇到的使用场景应该是修改已有的类。比如常见的日志切面，权限切面。我们利用javassist来实现这个功能。</p><p>有如下类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rickiyang.learn.javassist;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-08-07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getPerson</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get Person&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">personFly</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;oh my god,I can fly&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后对他进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rickiyang.learn.javassist;<br><br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> javassist.Modifier;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-08-07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdatePerson</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.rickiyang.learn.javassist.PersonService&quot;</span>);<br><br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">personFly</span> <span class="hljs-operator">=</span> cc.getDeclaredMethod(<span class="hljs-string">&quot;personFly&quot;</span>);<br>        personFly.insertBefore(<span class="hljs-string">&quot;System.out.println(\&quot;起飞之前准备降落伞\&quot;);&quot;</span>);<br>        personFly.insertAfter(<span class="hljs-string">&quot;System.out.println(\&quot;成功落地。。。。\&quot;);&quot;</span>);<br><br><br>        <span class="hljs-comment">//新增一个方法</span><br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtMethod</span>(CtClass.voidType, <span class="hljs-string">&quot;joinFriend&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, cc);<br>        ctMethod.setModifiers(Modifier.PUBLIC);<br>        ctMethod.setBody(<span class="hljs-string">&quot;&#123;System.out.println(\&quot;i want to be your friend\&quot;);&#125;&quot;</span>);<br>        cc.addMethod(ctMethod);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> cc.toClass().newInstance();<br>        <span class="hljs-comment">// 调用 personFly 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">personFlyMethod</span> <span class="hljs-operator">=</span> person.getClass().getMethod(<span class="hljs-string">&quot;personFly&quot;</span>);<br>        personFlyMethod.invoke(person);<br>        <span class="hljs-comment">//调用 joinFriend 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">execute</span> <span class="hljs-operator">=</span> person.getClass().getMethod(<span class="hljs-string">&quot;joinFriend&quot;</span>);<br>        execute.invoke(person);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            update();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>personFly</code>方法前后加上了打印日志。然后新增了一个方法<code>joinFriend</code>。执行main函数可以发现已经添加上了。</p><p><strong>另外需要注意的是：上面的<code>insertBefore()</code> 和 <code>setBody()</code>中的语句，如果你是单行语句可以直接用双引号，但是有多行语句的情况下，你需要将多行语句用<code>&#123;&#125;</code>括起来。javassist只接受单个语句或用大括号括起来的语句块。</strong></p><p>原文链接：<a href="https://www.cnblogs.com/rickiyang/p/11336268.html">https://www.cnblogs.com/rickiyang/p/11336268.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javassist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-agent使用指南</title>
    <link href="/20220831/a397e8a3c917.html"/>
    <url>/20220831/a397e8a3c917.html</url>
    
    <content type="html"><![CDATA[<h1 id="java-agent使用指南"><a href="#java-agent使用指南" class="headerlink" title="java-agent使用指南"></a>java-agent使用指南</h1><h2 id="JVM启动前静态Instrument"><a href="#JVM启动前静态Instrument" class="headerlink" title="JVM启动前静态Instrument"></a>JVM启动前静态Instrument</h2><p>Javaagent 是什么？</p><p>Javaagent是java命令的一个参数。参数 javaagent 可以用于指定一个 jar 包，并且对该 java 包有2个要求：</p><ol><li>这个 jar 包的 MANIFEST.MF 文件必须指定 Premain-Class 项。</li><li>Premain-Class 指定的那个类必须实现 premain() 方法。</li></ol><p>premain 方法，从字面上理解，就是运行在 main 函数之前的的类。当Java 虚拟机启动时，在执行 main 函数之前，JVM 会先运行<code>-javaagent</code>所指定 jar 包内 Premain-Class 这个类的 premain 方法 。</p><p>在命令行输入 <code>java</code>可以看到相应的参数，其中有 和 java agent相关的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">-agentlib:&lt;libname&gt;[=&lt;选项&gt;] 加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof<br>另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help<br>-agentpath:&lt;pathname&gt;[=&lt;选项&gt;]<br>按完整路径名加载本机代理库<br>-javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]<br>加载 Java 编程语言代理, 请参阅 java.lang.instrument<br></code></pre></td></tr></table></figure><p>在上面<code>-javaagent</code>参数中提到了参阅<code>java.lang.instrument</code>，这是在<code>rt.jar</code> 中定义的一个包，该路径下有两个重要的类：<img src="https://img2018.cnblogs.com/blog/1607781/201908/1607781-20190817154758013-294018944.png" alt="img"></p><p>该包提供了一些工具帮助开发人员在 Java 程序运行时，动态修改系统中的 Class 类型。其中，使用该软件包的一个关键组件就是 Javaagent。从名字上看，似乎是个 Java 代理之类的，而实际上，他的功能更像是一个Class 类型的转换器，他可以在运行时接受重新外部请求，对Class类型进行修改。</p><p>从本质上讲，Java Agent 是一个遵循一组严格约定的常规 Java 类。 上面说到 javaagent命令要求指定的类中必须要有premain()方法，并且对premain方法的签名也有要求，签名必须满足以下两种格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span><br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String agentArgs)</span><br></code></pre></td></tr></table></figure><p>JVM 会优先加载 带 <code>Instrumentation</code> 签名的方法，加载成功忽略第二种，如果第一种没有，则加载第二种方法。这个逻辑在sun.instrument.InstrumentationImpl 类中：</p><p><img src="https://img2018.cnblogs.com/blog/1607781/201908/1607781-20190817154839155-658132971.png" alt="img"></p><p>Instrumentation 类 定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Instrumentation</span> &#123;<br>    <br>    <span class="hljs-comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer, <span class="hljs-type">boolean</span> canRetransform)</span>;<br><br>    <span class="hljs-comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span>;<br><br>    <span class="hljs-comment">//删除一个类转换器</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRetransformClassesSupported</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">retransformClasses</span><span class="hljs-params">(Class&lt;?&gt;... classes)</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRedefineClassesSupported</span><span class="hljs-params">()</span>;<br><br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">redefineClasses</span><span class="hljs-params">(ClassDefinition... definitions)</span><br>        <span class="hljs-keyword">throws</span>  ClassNotFoundException, UnmodifiableClassException;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isModifiableClass</span><span class="hljs-params">(Class&lt;?&gt; theClass)</span>;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><br>    Class[] getAllLoadedClasses();<br><br>  <br>    <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><br>    Class[] getInitiatedClasses(ClassLoader loader);<br><br>    <span class="hljs-comment">//获取一个对象的大小</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">getObjectSize</span><span class="hljs-params">(Object objectToSize)</span>;<br><br><br>   <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendToBootstrapClassLoaderSearch</span><span class="hljs-params">(JarFile jarfile)</span>;<br><br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendToSystemClassLoaderSearch</span><span class="hljs-params">(JarFile jarfile)</span>;<br><br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNativeMethodPrefixSupported</span><span class="hljs-params">()</span>;<br><br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNativeMethodPrefix</span><span class="hljs-params">(ClassFileTransformer transformer, String prefix)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最为重要的是上面注释的几个方法，下面我们会用到。</p><p>如何使用javaagent？</p><p>使用 javaagent 需要几个步骤：</p><ol><li>定义一个 MANIFEST.MF 文件，必须包含 Premain-Class 选项，通常也会加入Can-Redefine-Classes 和 Can-Retransform-Classes 选项。</li><li>创建一个Premain-Class 指定的类，类中包含 premain 方法，方法逻辑由用户自己确定。</li><li>将 premain 的类和 MANIFEST.MF 文件打成 jar 包。</li><li>使用参数 -javaagent: jar包路径 启动要代理的方法。</li></ol><p>在执行以上步骤后，JVM 会先执行 premain 方法，大部分类加载都会通过该方法，注意：是大部分，不是所有。当然，遗漏的主要是系统类，因为很多系统类先于 agent 执行，而用户类的加载肯定是会被拦截的。也就是说，这个方法是在 main 方法启动前拦截大部分类的加载活动，既然可以拦截类的加载，那么就可以去做重写类这样的操作，结合第三方的字节码编译工具，比如ASM，javassist，cglib等等来改写实现类。</p><p>通过上面的步骤我们用代码实现来实现。实现 javaagent 你需要搭建两个工程，一个工程是用来承载 javaagent类，单独的打成jar包；一个工程是javaagent需要去代理的类。即javaagent会在这个工程中的main方法启动之前去做一些事情。</p><p>1.首先来实现javaagent工程。</p><p>工程目录结构如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">-java-agent<br>----src<br>--------main<br>--------|------java<br>--------|----------com.rickiyang.learn<br>--------|------------PreMainTraceAgent<br>--------|resources<br>-----------META-INF<br>--------------MANIFEST.MF<br></code></pre></td></tr></table></figure><p>第一步是需要创建一个类，包含premain 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2019/8/12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreMainTraceAgent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;agentArgs : &quot;</span> + agentArgs);<br>        inst.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineTransformer</span>(), <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefineTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>            System.out.println(<span class="hljs-string">&quot;premain load Class:&quot;</span> + className);<br>            <span class="hljs-keyword">return</span> classfileBuffer;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面就是我实现的一个类，实现了带Instrumentation参数的premain()方法。调用addTransformer()方法对启动时所有的类进行拦截。</p><p>然后在 resources 目录下新建目录：META-INF，在该目录下新建文件：MANIFREST.MF：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">Manifest-Version: 1.0<br>Can-Redefine-Classes: true<br>Can-Retransform-Classes: true<br>Premain-Class: PreMainTraceAgent<br></code></pre></td></tr></table></figure><p>注意到第5行有空行。</p><p>说一下MANIFREST.MF文件的作用，这里如果你不去手动指定的话，直接 打包，默认会在打包的文件中生成一个MANIFREST.MF文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">Manifest-Version: 1.0<br>Implementation-Title: test-agent<br>Implementation-Version: 0.0.1-SNAPSHOT<br>Built-By: yangyue<br>Implementation-Vendor-Id: com.rickiyang.learn<br>Spring-Boot-Version: 2.0.9.RELEASE<br>Main-Class: org.springframework.boot.loader.JarLauncher<br>Start-Class: com.rickiyang.learn.LearnApplication<br>Spring-Boot-Classes: BOOT-INF/classes/<br>Spring-Boot-Lib: BOOT-INF/lib/<br>Created-By: Apache Maven 3.5.2<br>Build-Jdk: 1.8.0_151<br>Implementation-URL: https://projects.spring.io/spring-boot/#/spring-bo<br> ot-starter-parent/test-agent<br></code></pre></td></tr></table></figure><p>这是默认的文件，包含当前的一些版本信息，当前工程的启动类，它还有别的参数允许你做更多的事情，可以用上的有：</p><blockquote><p>Premain-Class ：包含 premain 方法的类（类的全路径名）</p><p>Agent-Class ：包含 agentmain 方法的类（类的全路径名）</p><p>Boot-Class-Path ：设置引导类加载器搜索的路径列表。查找类的特定于平台的机制失败后，引导类加载器会搜索这些路径。按列出的顺序搜索路径。列表中的路径由一个或多个空格分开。路径使用分层 URI 的路径组件语法。如果该路径以斜杠字符（“&#x2F;”）开头，则为绝对路径，否则为相对路径。相对路径根据代理 JAR 文件的绝对路径解析。忽略格式不正确的路径和不存在的路径。如果代理是在 VM 启动之后某一时刻启动的，则忽略不表示 JAR 文件的路径。（可选）</p><p>Can-Redefine-Classes ：true表示能重定义此代理所需的类，默认值为 false（可选）</p><p>Can-Retransform-Classes ：true 表示能重转换此代理所需的类，默认值为 false （可选）</p><p>Can-Set-Native-Method-Prefix： true表示能设置此代理所需的本机方法前缀，默认值为 false（可选）</p></blockquote><p>即在该文件中主要定义了程序运行相关的配置信息，程序运行前会先检测该文件中的配置项。</p><p>一个java程序中<code>-javaagent</code>参数的个数是没有限制的，所以可以添加任意多个javaagent。所有的java agent会按照你定义的顺序执行，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -javaagent:agent1.jar=$&#123;参数&#125; -javaagent:agent2.jar=$&#123;参数&#125; -jar MyProgram.jar<br></code></pre></td></tr></table></figure><p>程序执行的顺序将会是：</p><p>MyAgent1.premain -&gt; MyAgent2.premain -&gt; MyProgram.main</p><p><strong>说回上面的 javaagent工程，接下来将该工程打成jar包，我在打包的时候发现打完包之后的 MANIFREST.MF文件被默认配置替换掉了。所以我是手动将上面我的配置文件替换到jar包中的文件，这里你需要注意。</strong></p><p>另外的再说一种不去手动写MANIFREST.MF文件的方式，使用maven插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--自动添加META-INF/MANIFEST.MF --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Premain-Class</span>&gt;</span>com.rickiyang.learn.PreMainTraceAgent<span class="hljs-tag">&lt;/<span class="hljs-name">Premain-Class</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Agent-Class</span>&gt;</span>com.rickiyang.learn.PreMainTraceAgent<span class="hljs-tag">&lt;/<span class="hljs-name">Agent-Class</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Redefine-Classes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">Can-Retransform-Classes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用这种插件的方式也可以自动生成该文件。</p><p>agent代码就写完了，下面再重新开一个工程，你只需要写一个带 main 方法的类即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMain</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main start&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main end&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很简单，然后需要做的就是将上面的 代理类 和 这个测试类关联起来。有两种方式：</p><p>如果你用的是idea，那么你可以点击菜单： run-debug configuration，然后将你的代理类包 指定在 启动参数中即可：</p><p><img src="https://img2018.cnblogs.com/blog/1607781/201908/1607781-20190817154905820-1209384694.png" alt="img"></p><p>另一种方式是不用 编译器，采用命令行的方法。与上面大致相同，将 上面的测试类编译成 class文件，然后 运行该类即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将该类编译成class文件</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">javac TestMain.java</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定agent程序并运行该类</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">java -javaagent:c:/alg.jar TestMain</span><br></code></pre></td></tr></table></figure><p>使用上面两种方式都可以运行,输出结果如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs txt">D:\soft\jdk1.8\bin\java.exe -javaagent:c:/alg.jar &quot;-javaagent:D:\soft\IntelliJ IDEA 2019.1.1\lib\idea_rt.jar=54274:D:\soft\IntelliJ IDEA 2019.1.1\bin&quot; -Dfile.encoding=UTF-8 -classpath D:\soft\jdk1.8\jre\lib\charsets.jar;D:\soft\jdk1.8\jre\lib\deploy.jar;D:\soft\jdk1.8\jre\lib\ext\access-bridge-64.jar;D:\soft\jdk1.8\jre\lib\ext\cldrdata.jar;D:\soft\jdk1.8\jre\lib\ext\dnsns.jar;D:\soft\jdk1.8\jre\lib\ext\jaccess.jar;D:\soft\jdk1.8\jre\lib\ext\jfxrt.jar;D:\soft\jdk1.8\jre\lib\ext\localedata.jar;D:\soft\jdk1.8\jre\lib\ext\nashorn.jar;D:\soft\jdk1.8\jre\lib\ext\sunec.jar;D:\soft\jdk1.8\jre\lib\ext\sunjce_provider.jar;D:\soft\jdk1.8\jre\lib\ext\sunmscapi.jar;D:\soft\jdk1.8\jre\lib\ext\sunpkcs11.jar;D:\soft\jdk1.8\jre\lib\ext\zipfs.jar;D:\soft\jdk1.8\jre\lib\javaws.jar;D:\soft\jdk1.8\jre\lib\jce.jar;D:\soft\jdk1.8\jre\lib\jfr.jar;D:\soft\jdk1.8\jre\lib\jfxswt.jar;D:\soft\jdk1.8\jre\lib\jsse.jar;D:\soft\jdk1.8\jre\lib\management-agent.jar;D:\soft\jdk1.8\jre\lib\plugin.jar;D:\soft\jdk1.8\jre\lib\resources.jar;D:\soft\jdk1.8\jre\lib\rt.jar;D:\workspace\demo1\target\classes;E:\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.1.1.RELEASE\spring-<br>...<br>...<br>...<br>1.8.11.jar;E:\.m2\repository\com\google\guava\guava\20.0\guava-20.0.jar;E:\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;E:\.m2\repository\com\alibaba\fastjson\1.2.54\fastjson-1.2.54.jar;E:\.m2\repository\org\springframework\boot\spring-boot\2.1.0.RELEASE\spring-boot-2.1.0.RELEASE.jar;E:\.m2\repository\org\springframework\spring-context\5.1.3.RELEASE\spring-context-5.1.3.RELEASE.jar com.springboot.example.demo.service.TestMain<br>agentArgs : null<br>premain load Class     :java/util/concurrent/ConcurrentHashMap$ForwardingNode<br>premain load Class     :sun/nio/cs/ThreadLocalCoders<br>premain load Class     :sun/nio/cs/ThreadLocalCoders$1<br>premain load Class     :sun/nio/cs/ThreadLocalCoders$Cache<br>premain load Class     :sun/nio/cs/ThreadLocalCoders$2<br>premain load Class     :java/util/jar/Attributes<br>premain load Class     :java/util/jar/Manifest$FastInputStream<br>...<br>...<br>...<br>premain load Class     :java/lang/Class$MethodArray<br>premain load Class     :java/lang/Void<br>main start<br>premain load Class     :sun/misc/VMSupport<br>premain load Class     :java/util/Hashtable$KeySet<br>premain load Class     :sun/nio/cs/ISO_8859_1$Encoder<br>premain load Class     :sun/nio/cs/Surrogate$Parser<br>premain load Class     :sun/nio/cs/Surrogate<br>...<br>...<br>...<br>premain load Class     :sun/util/locale/provider/LocaleResources$ResourceReference<br>main end<br>premain load Class     :java/lang/Shutdown<br>premain load Class     :java/lang/Shutdown$Lock<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><p>上面的输出结果我们能够发现：</p><ol><li>执行main方法之前会加载所有的类，包括系统类和自定义类；</li><li>在ClassFileTransformer中会去拦截系统类和自己实现的类对象；</li><li>如果你有对某些类对象进行改写，那么在拦截的时候抓住该类使用字节码编译工具即可实现。</li></ol><p>下面是使用javassist来动态将某个方法替换掉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rickiyang.learn;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-08-06</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClassTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(<span class="hljs-keyword">final</span> ClassLoader loader, <span class="hljs-keyword">final</span> String className, <span class="hljs-keyword">final</span> Class&lt;?&gt; classBeingRedefined,<span class="hljs-keyword">final</span> ProtectionDomain protectionDomain, <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] classfileBuffer) &#123;<br>        <span class="hljs-comment">// 操作Date类</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;java/util/Date&quot;</span>.equals(className)) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 从ClassPool获得CtClass对象</span><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;java.util.Date&quot;</span>);<br>                <span class="hljs-type">CtMethod</span> <span class="hljs-variable">convertToAbbr</span> <span class="hljs-operator">=</span> clazz.getDeclaredMethod(<span class="hljs-string">&quot;convertToAbbr&quot;</span>);<br>                <span class="hljs-comment">//这里对 java.util.Date.convertToAbbr() 方法进行了改写，在 return之前增加了一个 打印操作</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">methodBody</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;sb.append(Character.toUpperCase(name.charAt(0)));&quot;</span> +<br>                        <span class="hljs-string">&quot;sb.append(name.charAt(1)).append(name.charAt(2));&quot;</span> +<br>                        <span class="hljs-string">&quot;System.out.println(\&quot;sb.toString()\&quot;);&quot;</span> +<br>                        <span class="hljs-string">&quot;return sb;&#125;&quot;</span>;<br>                convertToAbbr.setBody(methodBody);<br><br>                <span class="hljs-comment">// 返回字节码，并且detachCtClass对象</span><br>                <span class="hljs-type">byte</span>[] byteCode = clazz.toBytecode();<br>                <span class="hljs-comment">//detach的意思是将内存中曾经被javassist加载过的Date对象移除，如果下次有需要在内存中找不到会重新走javassist加载</span><br>                clazz.detach();<br>                <span class="hljs-keyword">return</span> byteCode;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>                ex.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果返回null则字节码不会被修改</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JVM启动后动态Instrument"><a href="#JVM启动后动态Instrument" class="headerlink" title="JVM启动后动态Instrument"></a>JVM启动后动态Instrument</h2><p>上面介绍的Instrumentation是在 JDK 1.5中提供的，开发者只能在main加载之前添加手脚，在 Java SE 6 的 Instrumentation 当中，提供了一个新的代理操作方法：agentmain，可以在 main 函数开始运行之后再运行。</p><p>跟<code>premain</code>函数一样， 开发者可以编写一个含有<code>agentmain</code>函数的 Java 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//采用attach机制，被代理的目标程序VM有可能很早之前已经启动，当然其所有类已经被加载完成，这个时候需要借助Instrumentation#retransformClasses(Class&lt;?&gt;... classes)让对应的类可以重新转换，从而激活重新转换的类执行ClassFileTransformer列表中的回调</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span> <span class="hljs-params">(String agentArgs, Instrumentation inst)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span> <span class="hljs-params">(String agentArgs)</span><br></code></pre></td></tr></table></figure><p>同样，agentmain 方法中带Instrumentation参数的方法也比不带优先级更高。开发者必须在 manifest 文件里面设置“Agent-Class”来指定包含 agentmain 函数的类。</p><p>在Java6 以后实现启动后加载的新实现是Attach api。Attach API 很简单，只有 2 个主要的类，都在 <code>com.sun.tools.attach</code> 包里面：</p><p><img src="https://img2018.cnblogs.com/blog/1607781/201908/1607781-20190817154930165-1881070891.png" alt="img"></p><ol><li><p><code>VirtualMachine</code> 字面意义表示一个Java 虚拟机，也就是程序需要监控的目标虚拟机，提供了获取系统信息(比如获取内存dump、线程dump，类信息统计(比如已加载的类以及实例个数等)， loadAgent，Attach 和 Detach （Attach 动作的相反行为，从 JVM 上面解除一个代理）等方法，可以实现的功能可以说非常之强大 。该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上 。</p><p>代理类注入操作只是它众多功能中的一个，通过<code>loadAgent</code>方法向jvm注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理。</p></li><li><p><code>VirtualMachineDescriptor</code> 则是一个描述虚拟机的容器类，配合 VirtualMachine 类完成各种功能。</p></li></ol><p>attach实现动态注入的原理如下：</p><p>通过VirtualMachine类的<code>attach(pid)</code>方法，便可以attach到一个运行中的java进程上，之后便可以通过<code>loadAgent(agentJarPath)</code>来将agent的jar包注入到对应的进程，然后对应的进程会调用agentmain方法。</p><p><img src="https://img2018.cnblogs.com/blog/1607781/201908/1607781-20190817155003876-767522290.png" alt="img"></p><p>既然是两个进程之间通信那肯定的建立起连接，VirtualMachine.attach动作类似TCP创建连接的三次握手，目的就是搭建attach通信的连接。而后面执行的操作，例如vm.loadAgent，其实就是向这个socket写入数据流，接收方target VM会针对不同的传入数据来做不同的处理。</p><p>我们来测试一下agentmain的使用：</p><p>工程结构和 上面premain的测试一样，编写AgentMainTest，然后使用maven插件打包 生成MANIFEST.MF。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rickiyang.learn;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-08-16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgentMainTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String agentArgs, Instrumentation instrumentation)</span> &#123;<br>        instrumentation.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineTransformer</span>(), <span class="hljs-literal">true</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefineTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>            System.out.println(<span class="hljs-string">&quot;premain load Class:&quot;</span> + className);<br>            <span class="hljs-keyword">return</span> classfileBuffer;<br>        &#125;<br>    &#125;<br>&#125;<br>Copy&lt;plugin&gt;<br>  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>  &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">3.1</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>  &lt;configuration&gt;<br>    &lt;archive&gt;<br>      &lt;!--自动添加META-INF/MANIFEST.MF --&gt;<br>      &lt;manifest&gt;<br>        &lt;addClasspath&gt;<span class="hljs-literal">true</span>&lt;/addClasspath&gt;<br>      &lt;/manifest&gt;<br>      &lt;manifestEntries&gt;<br>        &lt;Agent-Class&gt;com.rickiyang.learn.AgentMainTest&lt;/Agent-Class&gt;<br>        &lt;Can-Redefine-Classes&gt;<span class="hljs-literal">true</span>&lt;/Can-Redefine-Classes&gt;<br>        &lt;Can-Retransform-Classes&gt;<span class="hljs-literal">true</span>&lt;/Can-Retransform-Classes&gt;<br>      &lt;/manifestEntries&gt;<br>    &lt;/archive&gt;<br>  &lt;/configuration&gt;<br>&lt;/plugin&gt;<br></code></pre></td></tr></table></figure><p>将agent打包之后，就是编写测试main方法。上面我们画的图中的步骤是：从一个attach JVM去探测目标JVM，如果目标JVM存在则向它发送agent.jar。我测试写的简单了些，找到当前JVM并加载agent.jar。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.rickiyang.learn.job;<br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> rickiyang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-08-16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAgentMain</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;<br>        <span class="hljs-comment">//获取当前系统中所有 运行中的 虚拟机</span><br>        System.out.println(<span class="hljs-string">&quot;running JVM start &quot;</span>);<br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-comment">//如果虚拟机的名称为 xxx 则 该虚拟机为目标虚拟机，获取该虚拟机的 pid</span><br>            <span class="hljs-comment">//然后加载 agent.jar 发送给该虚拟机</span><br>            System.out.println(vmd.displayName());<br>            <span class="hljs-keyword">if</span> (vmd.displayName().endsWith(<span class="hljs-string">&quot;com.rickiyang.learn.job.TestAgentMain&quot;</span>)) &#123;<br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;/Users/yangyue/Documents/java-agent.jar&quot;</span>);<br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>list()方法会去寻找当前系统中所有运行着的JVM进程，你可以打印<code>vmd.displayName()</code>看到当前系统都有哪些JVM进程在运行。因为main函数执行起来的时候进程名为当前类名，所以通过这种方式可以去找到当前的进程id。</p><p>注意：在mac上安装了的jdk是能直接找到 VirtualMachine 类的，但是在windows中安装的jdk无法找到，如果你遇到这种情况，请手动将你jdk安装目录下：lib目录中的tools.jar添加进当前工程的Libraries中。</p><p>运行main方法的输出为：</p><p><img src="https://img2018.cnblogs.com/blog/1607781/201908/1607781-20190817155017051-59823899.png" alt="img"></p><p>可以看到实际上是启动了一个socket进程去传输agent.jar。先打印了“running JVM start”表名main方法是先启动了，然后才进入代理类的transform方法。</p><h2 id="instrument原理"><a href="#instrument原理" class="headerlink" title="instrument原理"></a>instrument原理</h2><p><code>instrument</code>的底层实现依赖于<code>JVMTI(JVM Tool Interface)</code>，它是JVM暴露出来的一些供用户扩展的接口集合，JVMTI是基于事件驱动的，JVM每执行到一定的逻辑就会调用一些事件的回调接口（如果有的话），这些接口可以供开发者去扩展自己的逻辑。<code>JVMTIAgent</code>是一个利用<code>JVMTI</code>暴露出来的接口提供了代理启动时加载(agent on load)、代理通过attach形式加载(agent on attach)和代理卸载(agent on unload)功能的动态库。而<code>instrument agent</code>可以理解为一类<code>JVMTIAgent</code>动态库，别名是<code>JPLISAgent(Java Programming Language Instrumentation Services Agent)</code>，也就是<strong>专门为java语言编写的插桩服务提供支持的代理</strong>。</p><h3 id="启动时加载instrument-agent过程："><a href="#启动时加载instrument-agent过程：" class="headerlink" title="启动时加载instrument agent过程："></a>启动时加载instrument agent过程：</h3><ol><li>创建并初始化 JPLISAgent；</li><li>监听 <code>VMInit</code> 事件，在 JVM 初始化完成之后做下面的事情：<ol><li>创建 InstrumentationImpl 对象 ；</li><li>监听 ClassFileLoadHook 事件 ；</li><li>调用 InstrumentationImpl 的<code>loadClassAndCallPremain</code>方法，在这个方法里会去调用 javaagent 中 MANIFEST.MF 里指定的Premain-Class 类的 premain 方法 ；</li></ol></li><li>解析 javaagent 中 MANIFEST.MF 文件的参数，并根据这些参数来设置 JPLISAgent 里的一些内容。</li></ol><h3 id="运行时加载instrument-agent过程："><a href="#运行时加载instrument-agent过程：" class="headerlink" title="运行时加载instrument agent过程："></a>运行时加载instrument agent过程：</h3><p>通过 JVM 的attach机制来请求目标 JVM 加载对应的agent，过程大致如下：</p><ol><li>创建并初始化JPLISAgent；</li><li>解析 javaagent 里 MANIFEST.MF 里的参数；</li><li>创建 InstrumentationImpl 对象；</li><li>监听 ClassFileLoadHook 事件；</li><li>调用 InstrumentationImpl 的<code>loadClassAndCallAgentmain</code>方法，在这个方法里会去调用javaagent里 MANIFEST.MF 里指定的<code>Agent-Class</code>类的<code>agentmain</code>方法。</li></ol><h2 id="Instrumentation的局限性"><a href="#Instrumentation的局限性" class="headerlink" title="Instrumentation的局限性"></a>Instrumentation的局限性</h2><p>大多数情况下，我们使用Instrumentation都是使用其字节码插桩的功能，或者笼统说就是类重定义(Class Redefine)的功能，但是有以下的局限性：</p><ol><li>premain和agentmain两种方式修改字节码的时机都是类文件加载之后，也就是说必须要带有Class类型的参数，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。</li><li>类的字节码修改称为类转换(Class Transform)，类转换其实最终都回归到类重定义Instrumentation#redefineClasses()方法，此方法有以下限制：<ol><li>新类和老类的父类必须相同；</li><li>新类和老类实现的接口数也要相同，并且是相同的接口；</li><li>新类和老类访问符必须一致。 新类和老类字段数和字段名要一致；</li><li>新类和老类新增或删除的方法必须是private static&#x2F;final修饰的；</li><li>可以修改方法体。</li></ol></li></ol><p>除了上面的方式，如果想要重新定义一个类，可以考虑基于类加载器隔离的方式：创建一个新的自定义类加载器去通过新的字节码去定义一个全新的类，不过也存在只能通过反射调用该全新类的局限性。</p><p>原文链接：<a href="https://www.cnblogs.com/rickiyang/p/11368932.html">https://www.cnblogs.com/rickiyang/p/11368932.html</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java-agent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringBoot】JPA在控制台打印带参sql语句</title>
    <link href="/20220831/e95ebe792695.html"/>
    <url>/20220831/e95ebe792695.html</url>
    
    <content type="html"><![CDATA[<h1 id="【SpringBoot】JPA在控制台打印带参sql语句"><a href="#【SpringBoot】JPA在控制台打印带参sql语句" class="headerlink" title="【SpringBoot】JPA在控制台打印带参sql语句"></a>【SpringBoot】JPA在控制台打印带参sql语句</h1><p><strong>第一步：引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.bgee.log4jdbc-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4jdbc-log4j2-jdbc4.1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第二部：新建一个log4jdbc.log4j2.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># If you use SLF4J. First, you need to tell log4jdbc-log4j2 that you want to use the SLF4J logger</span><br><span class="hljs-attr">log4jdbc.spylogdelegator.name</span>=<span class="hljs-string">net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator</span><br></code></pre></td></tr></table></figure><p><strong>第三步：修改配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">H2DB</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment">#    driver-class-name: org.h2.Driver    #驱动</span><br>    <span class="hljs-comment">#    url: jdbc:h2:mem:jpa                # h2 内存数据库 内存模式连接配置 库名: jpa，jdbc:h2:~/test</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">net.sf.log4jdbc.sql.jdbcapi.DriverSpy</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:log4jdbc:h2:mem:jpa</span><br>    <span class="hljs-comment"># mysql url</span><br>    <span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><blockquote><p>将<code>driver-class-name</code>修改成<code>net.sf.log4jdbc.sql.jdbcapi.DriverSpy</code></p><p>将<code>url</code>在<code>jdbc</code>后面添加个<code>log4jdbc</code></p><p>比如将<code>url: jdbc:mysql://xxxxx:3306/dbname?xxxx</code>改成：<code>url: jdbc:log4jdbc:mysql://xxxxx:3306/dbname?xxxx</code></p></blockquote><p><strong>第四步：添加配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 关闭多余的日志打印</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">jdbc.connection:</span> <span class="hljs-string">off</span><br>    <span class="hljs-attr">jdbc.resultset:</span> <span class="hljs-string">off</span><br>    <span class="hljs-attr">jdbc.resultsettable:</span> <span class="hljs-string">INFO</span> <span class="hljs-comment"># 返回结果值</span><br>    <span class="hljs-attr">jdbc.audit:</span> <span class="hljs-string">off</span><br>    <span class="hljs-attr">jdbc.sqltiming:</span> <span class="hljs-string">INFO</span> <span class="hljs-comment">#sql</span><br>    <span class="hljs-attr">jdbc.sqlonly:</span> <span class="hljs-string">off</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>JPA</tag>
      
      <tag>日志打印</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringBoot】整合JPA、H2DB</title>
    <link href="/20220831/23869d1b63bf.html"/>
    <url>/20220831/23869d1b63bf.html</url>
    
    <content type="html"><![CDATA[<h1 id="【SpringBoot】整合JPA、H2DB"><a href="#【SpringBoot】整合JPA、H2DB" class="headerlink" title="【SpringBoot】整合JPA、H2DB"></a>【SpringBoot】整合JPA、H2DB</h1><p>JPA作为ORM框架一直是我非常喜欢的框架之一。<br>H2DB一直都是我作用测试用的一款内存数据库。其实也是可以存储在本地文件中的。</p><p>好了，废话不多说，咱们开始整合起来吧~</p><blockquote><p>遵循SpringBoot整合策略的三板斧</p></blockquote><p><strong>第一步：添加依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.h2database&lt;/groupId&gt;<br>  &lt;artifactId&gt;h2&lt;/artifactId&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>  &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>  &lt;optional&gt;true&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>第二部：添加配置</strong></p><blockquote><p>如果想将H2DB数据持久化，那么<code>spring.datasource.url=jdbc:h2:file:$&#123;文件路径&#125;</code>这样配置。</p><p>这样下次启动后，原先保存操作的数据，都还在。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">H2DB</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">org.h2.Driver</span>    <span class="hljs-comment">#驱动</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:h2:mem:jpa</span>                <span class="hljs-comment">#h2内存数据库 内存模式连接配置 库名: jpa，jdbc:h2:~/test</span><br><span class="hljs-comment">#    url: jdbc:h2:file:/Users/zc/Documents/work spaces/happyloves/happyloves/h2db/src/main/resources/db   #将数据库持久化</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">shuma</span>                     <span class="hljs-comment">#默认不填写的用户名是 sa</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">shuma123</span>                  <span class="hljs-comment">#默认没有密码</span><br>  <span class="hljs-attr">h2:</span><br>    <span class="hljs-attr">console:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>             <span class="hljs-comment">#开启console 访问 默认false</span><br>      <span class="hljs-attr">settings:</span><br>        <span class="hljs-attr">trace:</span> <span class="hljs-literal">true</span>             <span class="hljs-comment">#开启h2 console 跟踪 方便调试  默认 false</span><br>        <span class="hljs-attr">web-allow-others:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#允许console 远程访问 默认false</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/h2db</span>         <span class="hljs-comment">#h2 访问路径上下文，启动后访问：http://&#123;ip&#125;:&#123;port&#125;/h2db。可以打开H2DB数据库的控制面板</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">H2</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-comment">#      create 启动时删数据库中的表，然后创建，退出时不删除数据表</span><br>      <span class="hljs-comment">#      create-drop 启动时删数据库中的表，然后创建，退出时删除数据表 如果表不存在报错</span><br>      <span class="hljs-comment">#      update 如果启动时表格式不一致则更新表，原有数据保留</span><br>      <span class="hljs-comment">#      validate 项目启动表结构进行校验 如果不一致则报错</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span> <span class="hljs-comment"># 常用的都是update，不会影响大原有的数据结构和数据</span><br>      <span class="hljs-attr">naming:</span><br>        <span class="hljs-comment">#  Hibernate到5.1废除了</span><br>        <span class="hljs-comment">#  strategy: org.hibernate.cfg.ImprovedNamingStrategy</span><br>        <span class="hljs-comment">#在进行领域映射时,首字母小写，大写字母变为下划线加小写</span><br>        <span class="hljs-attr">physical-strategy:</span> <span class="hljs-string">org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</span><br>        <span class="hljs-comment">#不做修改，直接映射org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br>        <span class="hljs-attr">implicit-strategy:</span> <span class="hljs-string">org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">open-in-view:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>第三步：写代码加注解</strong></p><blockquote><p>创建数据库映射的实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-comment">//lombok插件的注解</span><br><span class="hljs-meta">@Entity</span><span class="hljs-comment">//JPA实体类注解</span><br><span class="hljs-meta">@Table(name = &quot;account&quot;)</span><span class="hljs-comment">//JPA表映射的注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-meta">@Id</span><span class="hljs-comment">//主键ID注解</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="hljs-comment">//主键ID唯一，一版数据库是Mysql时，主键ID自增时这样设置</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>创建实体类的JpaRepository接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JpaRepository&lt;实体类, 主键ID类型&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountJPA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>接下来编写Controller API接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/8/19 17:04</span><br><span class="hljs-comment"> * 采用RESTFUL接口风格</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/account&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountJPA accountJPA;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存账号信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> account 请求值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Account account)</span> &#123;<br>        accountJPA.save(account);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回所有账号信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountJPA.findAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>好了，启动项目工程，接下来我们来测试一下吧；可以通过Postman工具进行测试，还有Postwoman，这里我是通过IDEA的http测试工具：</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http">### 保存账号信息<br>POST http://localhost:8001/account/<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><br>&#123;<br>  &quot;name&quot;:&quot;李四&quot;,<br>  &quot;username&quot;:&quot;bbb&quot;,<br>  &quot;password&quot;:&quot;bbb&quot;<br>&#125;<br><br><br>### 返回接口<br>POST http://localhost:8001/account/<br><br><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> <br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Wed, 19 Aug 2020 09:34:47 GMT<br><span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">: </span>timeout=60<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><br><span class="language-css">&lt;Response <span class="hljs-selector-tag">body</span> is empty&gt;</span><br><span class="language-css"></span><br><span class="language-css">Response <span class="hljs-selector-tag">code</span>: <span class="hljs-number">200</span>; <span class="hljs-selector-tag">Time</span>: <span class="hljs-number">39ms</span>; <span class="hljs-attribute">Content</span> length: <span class="hljs-number">0</span> bytes</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs http">### 返回所有账号信息<br>GET http://localhost:8001/account/<br><br>### 返回结果<br>GET http://localhost:8001/account/<br><br><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> <br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Transfer-Encoding</span><span class="hljs-punctuation">: </span>chunked<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Wed, 19 Aug 2020 09:35:41 GMT<br><span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">: </span>timeout=60<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><br><span class="language-applescript">[</span><br><span class="language-applescript">  &#123;</span><br><span class="language-applescript">    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;aaa&quot;</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;aaa&quot;</span></span><br><span class="language-applescript">  &#125;,</span><br><span class="language-applescript">  &#123;</span><br><span class="language-applescript">    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;李四&quot;</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;bbb&quot;</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;bbb&quot;</span></span><br><span class="language-applescript">  &#125;,</span><br><span class="language-applescript">  &#123;</span><br><span class="language-applescript">    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;王五&quot;</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;ccc&quot;</span>,</span><br><span class="language-applescript">    <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;ccc&quot;</span></span><br><span class="language-applescript">  &#125;</span><br><span class="language-applescript">]</span><br><span class="language-applescript"></span><br><span class="language-applescript">Response code: <span class="hljs-number">200</span>; Time: <span class="hljs-number">35</span>ms; Content <span class="hljs-built_in">length</span>: <span class="hljs-number">166</span> bytes</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>JPA</tag>
      
      <tag>H2DB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/20220831/f20491bb4704.html"/>
    <url>/20220831/f20491bb4704.html</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单例-饿汉模式</span><br><span class="hljs-comment"> * 类被加载的时候就把对象实例化了</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 优点：</span><br><span class="hljs-comment"> * 1、实现简单</span><br><span class="hljs-comment"> * 2、线程安全的</span><br><span class="hljs-comment"> * 缺点：</span><br><span class="hljs-comment"> *  * 1、没有懒加载，在不需要的此实例的时候就已经把实例创建出来了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5 00:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonA</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SingletonA</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonA</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonA</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonA <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SingletonA</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> SingletonA.getInstance();<br>        <span class="hljs-type">SingletonA</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> SingletonA.getInstance();<br>        System.out.println(instance1 == instance2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单例-懒汉模式</span><br><span class="hljs-comment"> * 需要用到的时候再去创建实例</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 优点：</span><br><span class="hljs-comment"> * 1、实现简单</span><br><span class="hljs-comment"> * 缺点：</span><br><span class="hljs-comment"> * 1、线程不安全的。在并发获取实例的时候，可能会存在构建了多个实例的情况</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5 01:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonB</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonB</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonB</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonB <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == INSTANCE) &#123;<br>            INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonB</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SingletonB</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> SingletonB.getInstance();<br>        <span class="hljs-type">SingletonB</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> SingletonB.getInstance();<br>        System.out.println(instance1 == instance2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="懒汉模式-双重效验"><a href="#懒汉模式-双重效验" class="headerlink" title="懒汉模式-双重效验"></a>懒汉模式-双重效验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单例-懒汉模式-双重效验</span><br><span class="hljs-comment"> * 需要用到的时候再去创建实例</span><br><span class="hljs-comment"> * volatile关键字来修饰singleton，其最关键的作用是防止指令重排</span><br><span class="hljs-comment"> * 双重校验的方式，对懒汉式单例模式做了线程安全处理。</span><br><span class="hljs-comment"> * 通过加锁，可以保证同时只有一个线程走到第二个判空代码中去，这样保证了只创建 一个实例。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 优点：</span><br><span class="hljs-comment"> * 1、实现简单</span><br><span class="hljs-comment"> * 2、线程安全</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5 01:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonBSafe</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">SingletonBSafe</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonBSafe</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonBSafe <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == INSTANCE) &#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonBSafe.class) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == INSTANCE) &#123;<br>                    INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonBSafe</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SingletonBSafe</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> SingletonBSafe.getInstance();<br>        <span class="hljs-type">SingletonBSafe</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> SingletonBSafe.getInstance();<br>        System.out.println(instance1 == instance2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 单例-枚举</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/5 01:17</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonC</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonC</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SingletonCEnum</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 创建一个枚举对象，该对象天生为单例</span><br><span class="hljs-comment">         */</span><br>        INSTANCE;<br>        <span class="hljs-keyword">private</span> SingletonC singletonC;<br><br>        SingletonCEnum() &#123;<br>            singletonC = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonC</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonC <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SingletonCEnum.INSTANCE.singletonC;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SingletonC</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> SingletonC.getInstance();<br>        <span class="hljs-type">SingletonC</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> SingletonC.getInstance();<br>        System.out.println(instance1 == instance2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单例模式</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强软弱虚引用</title>
    <link href="/20220831/1ceca005f04d.html"/>
    <url>/20220831/1ceca005f04d.html</url>
    
    <content type="html"><![CDATA[<h1 id="强软弱虚引用"><a href="#强软弱虚引用" class="headerlink" title="强软弱虚引用"></a>强软弱虚引用</h1><h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/1/15 10:39</span><br><span class="hljs-comment"> * 强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OOM，也不会靠随意回收具有强引用的对象来解决内存不足的问题。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiangReference</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        System.out.println(t);<br>        t = <span class="hljs-literal">null</span>;<br>        System.out.println(t);<br>        System.gc();<br>        System.out.println(t);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 软引用</span><br><span class="hljs-comment"> * 在一个SoftReference有一个对象，该对象占用堆内存，当堆内存容量不够时，回收它。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 设置JVM堆内存20M：-Xmx20M</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</span><br><span class="hljs-comment"> * 软引用可用来实现内存敏感的高速缓存。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 应用场景：缓存，用时缓存起来，当分配给其他对象内存不够使，回收它</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/1/15 10:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuanReference</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//new一个软应用对象，里面存放10M byte数据</span><br>        SoftReference&lt;<span class="hljs-type">byte</span>[]&gt; sr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>]);<br>        <span class="hljs-comment">//获取它</span><br>        System.out.println(sr.get());<br>        <span class="hljs-comment">//GC回收</span><br>        System.gc();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">//再次获取</span><br>        System.out.println(sr.get());<br>        <span class="hljs-comment">//new一个13M byte对象，</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">13</span>];<br>        <span class="hljs-comment">//此时发现被回收了</span><br>        System.out.println(sr.get());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 弱引用</span><br><span class="hljs-comment"> * 一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</span><br><span class="hljs-comment"> * 软引用和弱引用都可以和一个引用队列（ReferenceQueue）联合使用，如果所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用或软引用加入到与之关联的引用队列中。</span><br><span class="hljs-comment"> * ThreadLocal类的静态内部类ThreadLocalMap的静态内部类Entry中的k,就是弱引用</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 应用场景：ThreadLocal，<span class="hljs-doctag">@Transactional</span>就是用ThreadLocal实现的</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/1/15 13:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuoReference</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//new一个软应用对象，里面存放10M byte数据</span><br>        WeakReference&lt;<span class="hljs-type">byte</span>[]&gt; sr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>]);<br>        <span class="hljs-comment">//获取它</span><br>        System.out.println(sr.get());<br>        <span class="hljs-comment">//GC回收</span><br>        System.gc();<br>        <span class="hljs-comment">//再次获取，发现被回收了</span><br>        System.out.println(sr.get());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 虚引用</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</span><br><span class="hljs-comment"> * 虚引用主要用来跟踪对象被垃圾回收器回收的活动，且虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 应用场景：主要用来管理堆外内存。NIO，Netty底层实现</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/1/15 13:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XuReference</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        <span class="hljs-type">ReferenceQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>();<br>        <span class="hljs-type">PhantomReference</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhantomReference</span>(t, queue);<br>        <span class="hljs-comment">//获取它</span><br>        System.out.println(r.get());<br>        <span class="hljs-comment">//GC回收</span><br>        System.gc();<br>        <span class="hljs-comment">//再次获取，发现被回收了</span><br>        System.out.println(r.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>强引用</tag>
      
      <tag>软引用</tag>
      
      <tag>弱引用</tag>
      
      <tag>虚引用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>orika 深拷贝</title>
    <link href="/20220831/47e907f6ff52.html"/>
    <url>/20220831/47e907f6ff52.html</url>
    
    <content type="html"><![CDATA[<h1 id="orika-深拷贝"><a href="#orika-深拷贝" class="headerlink" title="orika 深拷贝"></a>orika 深拷贝</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;ma.glasnost.orika&lt;/groupId&gt;<br>    &lt;artifactId&gt;orika-core&lt;/artifactId&gt;<br>    &lt;version&gt;1.5.4&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>定义Account对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义Friend</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Friend</span> &#123;<br>    <span class="hljs-keyword">private</span> String a;<br>    <span class="hljs-keyword">private</span> String b;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义UserA对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserA</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Account account;<br><br>    <span class="hljs-keyword">private</span> List&lt;Friend&gt; friends;<br><br>    <span class="hljs-keyword">private</span> String a;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义UserB对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserB</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Account account;<br><br>    <span class="hljs-keyword">private</span> List&lt;Friend&gt; friends;<br><br>    <span class="hljs-keyword">private</span> String b;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrikaApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        account.setId(<span class="hljs-number">1</span>);<br>        account.setUsername(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        account.setPassword(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br><br>        <span class="hljs-type">Friend</span> <span class="hljs-variable">friend1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>();<br>        friend1.setA(<span class="hljs-string">&quot;a&quot;</span>);<br>        friend1.setB(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Friend</span> <span class="hljs-variable">friend2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>();<br>        friend2.setA(<span class="hljs-string">&quot;b&quot;</span>);<br>        friend2.setB(<span class="hljs-string">&quot;b&quot;</span>);<br>        List&lt;Friend&gt; friendListA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        friendListA.add(friend1);<br>        friendListA.add(friend2);<br><br>        <span class="hljs-type">UserA</span> <span class="hljs-variable">userA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserA</span>();<br>        userA.setId(<span class="hljs-number">1</span>);<br>        userA.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        userA.setAge(<span class="hljs-number">18</span>);<br>        userA.setAccount(account);<br>        userA.setFriends(friendListA);<br>        userA.setA(<span class="hljs-string">&quot;A&quot;</span>);<br><br>        <span class="hljs-type">UserB</span> <span class="hljs-variable">userB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserB</span>();<br>        List&lt;Friend&gt; friendListB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Friend</span> <span class="hljs-variable">friend3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>();<br>        friend3.setA(<span class="hljs-string">&quot;c&quot;</span>);<br>        friend3.setB(<span class="hljs-string">&quot;c&quot;</span>);<br>        friendListB.add(friend3);<br>        userB.setFriends(friendListB);<br><br>        System.out.println(userA);<br>        System.out.println(userB);<br><br>        <span class="hljs-comment">//转换</span><br>        <span class="hljs-type">MapperFactory</span> <span class="hljs-variable">mapperFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMapperFactory</span>.Builder().build();<br>        <span class="hljs-type">MapperFacade</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> mapperFactory.getMapperFacade();<br><span class="hljs-comment">//        UserB userB = mapper.map(userA, UserB.class);</span><br>        mapper.map(userA, userB);<br>        System.out.println(userA);<br>        System.out.println(userB);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深拷贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/20220831/84cd49bb4840.html"/>
    <url>/20220831/84cd49bb4840.html</url>
    
    <content type="html"><![CDATA[<h1 id="开闭原则、策略模式"><a href="#开闭原则、策略模式" class="headerlink" title="开闭原则、策略模式"></a>开闭原则、策略模式</h1><p><strong>定义：</strong> 一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p><p><strong>问题由来：</strong> 在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。</p><p><strong>解决方案：</strong> 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p><p><strong>Springboot可以帮助我们简单方便的实现开闭原则</strong></p><p>以下示例代码：</p><p><strong>定义接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/21 23:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IOpenClosePrinciple</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">TEST1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TEST1&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">TEST2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TEST2&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试输出</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回值</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">testOut</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现接口,业务1，Test1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/21 23:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(IOpenClosePrinciple.TEST1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOpenClosePrinciple</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testOut</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test1&quot;</span>;<br>        System.out.println(key);<br><br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现接口,业务2，Test2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/21 23:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(IOpenClosePrinciple.TEST2)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IOpenClosePrinciple</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testOut</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test2&quot;</span>;<br>        System.out.println(key);<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Controller测试接口代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果状态增加了，只需增加相应状态的类即可，也只需测试新增加的业务，这样就简单方便的实现了开闭原则。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ZC</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/9/21 23:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/openClosePrinciple&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenClosePrincipleController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    Map&lt;String, IOpenClosePrinciple&gt; openClosePrincipleMap;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">openClosePrinciple</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> openClosePrincipleMap.get(name).testOut();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Test1接口：</span><br><span class="hljs-attribute">GET</span> http://localhost:<span class="hljs-number">8080</span>/openClosePrinciple/TEST1<br><br><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> <br><span class="hljs-attribute">Content</span>-Type: text/plain;charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">5</span><br><span class="hljs-attribute">Date</span>: Mon, <span class="hljs-number">21</span> Sep <span class="hljs-number">2020</span> <span class="hljs-number">15</span>:<span class="hljs-number">28</span>:<span class="hljs-number">53</span> GMT<br><span class="hljs-attribute">Keep</span>-Alive: timeout=<span class="hljs-number">60</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-comment"># Test1输出：</span><br><span class="hljs-attribute">test1</span><br><br><span class="hljs-comment"># Test2接口：</span><br><span class="hljs-attribute">GET</span> http://localhost:<span class="hljs-number">8080</span>/openClosePrinciple/TEST2<br><br><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> <br><span class="hljs-attribute">Content</span>-Type: text/plain;charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">5</span><br><span class="hljs-attribute">Date</span>: Mon, <span class="hljs-number">21</span> Sep <span class="hljs-number">2020</span> <span class="hljs-number">15</span>:<span class="hljs-number">38</span>:<span class="hljs-number">49</span> GMT<br><span class="hljs-attribute">Keep</span>-Alive: timeout=<span class="hljs-number">60</span><br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-comment"># Test2输出：</span><br><span class="hljs-attribute">test2</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>策略模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringBoot】整合ElasticSearch</title>
    <link href="/20220831/21cb77a497ce.html"/>
    <url>/20220831/21cb77a497ce.html</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h2 id="SpringBoot-整合-ElasticSearch"><a href="#SpringBoot-整合-ElasticSearch" class="headerlink" title="SpringBoot 整合 ElasticSearch"></a>SpringBoot 整合 ElasticSearch</h2><h3 id="第一步：添加依赖"><a href="#第一步：添加依赖" class="headerlink" title="第一步：添加依赖"></a>第一步：添加依赖</h3><blockquote><p>此处需要注意下，ElasticSearch版本与<code>spring-boot-starter-data-elasticsearch</code>依赖包的版本兼容问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>当然也可以根据当前ElasticSearch版本自定义选择依赖<code>jar</code>包的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;<br>    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;elasticsearch-version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;<br>    &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;elasticsearch-version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;<br>    &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;elasticsearch-version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="第二部：编写配置"><a href="#第二部：编写配置" class="headerlink" title="第二部：编写配置"></a>第二部：编写配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">repositories:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">client:</span><br>        <span class="hljs-attr">reactive:</span><br>          <span class="hljs-attr">use-ssl:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">endpoints:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:9200</span><br></code></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>Entity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/10/23 12:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(indexName = &quot;student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4830083526353606264L</span>;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>&#125;<br></code></pre></td></tr></table></figure><p>Repository:类似JPA </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/10/23 14:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ElasticsearchRepository</span>&lt;Student, Long&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/10/23 14:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentRepository repository;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Student student)</span> &#123;<br>        repository.save(student);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> Iterable&lt;Student&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> repository.findAll();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接下来用PostMan测试下</strong></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA对象内存布局</title>
    <link href="/20220707/9e1b7d3d81ac.html"/>
    <url>/20220707/9e1b7d3d81ac.html</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA对象内存布局"><a href="#JAVA对象内存布局" class="headerlink" title="JAVA对象内存布局"></a>JAVA对象内存布局</h1><p><img src="https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png"></p><p>对象头：</p><ul><li>markword：记录锁的信息、GC信息</li><li>类型指针class pointer：记录对象属于哪个Class类型的</li></ul><p>实例数据instance data：成员变量</p><p>对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!-- 工具：JOL=JAVA Object Layout --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;<br>    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;<br>    &lt;version&gt;0.14&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    System.out.println(ClassLayout.parseInstance(o).toPrintable());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">java.lang.Object object internals:<br> OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE<br>      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br>      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br>      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)<br>     12     4        (loss due to the next object alignment)[padding]<br>Instance size: 16 bytes<br>Space losses: 0 bytes internal + 4 bytes external = 4 bytes total<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -XX:+PrintCommandLineFlags -version<br>-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC<br>java version &quot;1.8.0_221&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<br></code></pre></td></tr></table></figure><p>-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节</p><p>-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节</p><p>数组的话会有一个数组长度length，占用4个字节。</p><table><thead><tr><th align="center">类型</th><th align="center">占用字节</th><th align="center">占用位数</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1</td><td align="center">8</td></tr><tr><td align="center">short</td><td align="center">2</td><td align="center">16</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">32</td></tr><tr><td align="center">long</td><td align="center">8</td><td align="center">64</td></tr><tr><td align="center">float</td><td align="center">4</td><td align="center">32</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">64</td></tr><tr><td align="center">char</td><td align="center">2</td><td align="center">16</td></tr><tr><td align="center">boolean</td><td align="center">1</td><td align="center">8</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        System.out.println(<span class="hljs-string">&quot;空对象：&quot;</span> + ClassLayout.parseInstance(o1).toPrintable());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        System.out.println(<span class="hljs-string">&quot;带属性对象：&quot;</span> + ClassLayout.parseInstance(o2).toPrintable());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1</span>];<br>        System.out.println(<span class="hljs-string">&quot;数组：&quot;</span> + ClassLayout.parseInstance(o3).toPrintable());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        System.out.println(<span class="hljs-string">&quot;空List：&quot;</span> + ClassLayout.parseInstance(o4).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs tap">空对象：java.lang.Object object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 4 </span>       (object header)                          <span class="hljs-number"> 01 </span>00<span class="hljs-number"> 00 </span>00 (00000001<span class="hljs-number"> 00000000 </span>00000000 00000000) (1)<br>     <span class="hljs-number"> 4 </span>   <span class="hljs-number"> 4 </span>       (object header)                          <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 (00000000<span class="hljs-number"> 00000000 </span>00000000 00000000) (0)<br>     <span class="hljs-number"> 8 </span>   <span class="hljs-number"> 4 </span>       (object header)                           e5<span class="hljs-number"> 01 </span>00 f8 (11100101<span class="hljs-number"> 00000001 </span>00000000 11111000) (-134217243)<br>    <span class="hljs-number"> 12 </span>   <span class="hljs-number"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class="hljs-number"> 16 </span>bytes<br>Space losses:<span class="hljs-number"> 0 </span>bytes internal +<span class="hljs-number"> 4 </span>bytes external =<span class="hljs-number"> 4 </span>bytes total<br><br>带属性对象：cn.happyloves.example.dto.Account object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br>     <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 4 </span>                   (object header)                          <span class="hljs-number"> 05 </span>00<span class="hljs-number"> 00 </span>00 (00000101<span class="hljs-number"> 00000000 </span>00000000 00000000) (5)<br>     <span class="hljs-number"> 4 </span>   <span class="hljs-number"> 4 </span>                   (object header)                          <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 (00000000<span class="hljs-number"> 00000000 </span>00000000 00000000) (0)<br>     <span class="hljs-number"> 8 </span>   <span class="hljs-number"> 4 </span>                   (object header)                          <span class="hljs-number"> 54 </span>c3<span class="hljs-number"> 00 </span>f8 (01010100<span class="hljs-number"> 11000011 </span>00000000 11111000) (-134167724)<br>    <span class="hljs-number"> 12 </span>   <span class="hljs-number"> 4 </span>  java.lang.String Account.username                          null<br>    <span class="hljs-number"> 16 </span>   <span class="hljs-number"> 8 </span>              long Account.id                                0<br>    <span class="hljs-number"> 24 </span>   <span class="hljs-number"> 4 </span>  java.lang.String Account.password                          null<br>    <span class="hljs-number"> 28 </span>   <span class="hljs-number"> 4 </span>                   (loss due to the next object alignment)<br>Instance size:<span class="hljs-number"> 32 </span>bytes<br>Space losses:<span class="hljs-number"> 0 </span>bytes internal +<span class="hljs-number"> 4 </span>bytes external =<span class="hljs-number"> 4 </span>bytes total<br><br>数组：[I object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 4 </span>       (object header)                          <span class="hljs-number"> 01 </span>00<span class="hljs-number"> 00 </span>00 (00000001<span class="hljs-number"> 00000000 </span>00000000 00000000) (1)<br>     <span class="hljs-number"> 4 </span>   <span class="hljs-number"> 4 </span>       (object header)                          <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 (00000000<span class="hljs-number"> 00000000 </span>00000000 00000000) (0)<br>     <span class="hljs-number"> 8 </span>   <span class="hljs-number"> 4 </span>       (object header)                           6d<span class="hljs-number"> 01 </span>00 f8 (01101101<span class="hljs-number"> 00000001 </span>00000000 11111000) (-134217363)<br>    <span class="hljs-number"> 12 </span>   <span class="hljs-number"> 4 </span>       (object header)                          <span class="hljs-number"> 01 </span>00<span class="hljs-number"> 00 </span>00 (00000001<span class="hljs-number"> 00000000 </span>00000000 00000000) (1)<br>    <span class="hljs-number"> 16 </span>   <span class="hljs-number"> 4 </span>   int [I.&lt;elements&gt;                             N/A<br>    <span class="hljs-number"> 20 </span>   <span class="hljs-number"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class="hljs-number"> 24 </span>bytes<br>Space losses:<span class="hljs-number"> 0 </span>bytes internal +<span class="hljs-number"> 4 </span>bytes external =<span class="hljs-number"> 4 </span>bytes total<br><br>空List：java.util.ArrayList object internals:<br> OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE<br>     <span class="hljs-number"> 0 </span>   <span class="hljs-number"> 4 </span>                     (object header)                          <span class="hljs-number"> 05 </span>00<span class="hljs-number"> 00 </span>00 (00000101<span class="hljs-number"> 00000000 </span>00000000 00000000) (5)<br>     <span class="hljs-number"> 4 </span>   <span class="hljs-number"> 4 </span>                     (object header)                          <span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 (00000000<span class="hljs-number"> 00000000 </span>00000000 00000000) (0)<br>     <span class="hljs-number"> 8 </span>   <span class="hljs-number"> 4 </span>                     (object header)                           7f 2f<span class="hljs-number"> 00 </span>f8 (01111111<span class="hljs-number"> 00101111 </span>00000000 11111000) (-134205569)<br>    <span class="hljs-number"> 12 </span>   <span class="hljs-number"> 4 </span>                 int AbstractList.modCount                     0<br>    <span class="hljs-number"> 16 </span>   <span class="hljs-number"> 4 </span>                 int ArrayList.size                            0<br>    <span class="hljs-number"> 20 </span>   <span class="hljs-number"> 4 </span>  java.lang.Object[] ArrayList.elementData                     []<br>Instance size:<span class="hljs-number"> 24 </span>bytes<br>Space losses:<span class="hljs-number"> 0 </span>bytes internal +<span class="hljs-number"> 0 </span>bytes external =<span class="hljs-number"> 0 </span>bytes total<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>对象内存布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-Mysql事务与锁详解</title>
    <link href="/20220707/f9f1e678c9b4.html"/>
    <url>/20220707/f9f1e678c9b4.html</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql事务与锁详解"><a href="#Mysql事务与锁详解" class="headerlink" title="Mysql事务与锁详解"></a>Mysql事务与锁详解</h1><h2 id="数据库事务的定义"><a href="#数据库事务的定义" class="headerlink" title="数据库事务的定义"></a>数据库事务的定义</h2><blockquote><p>事务是数据库管理系统(DBMS) 执行过程中的一个<font style="color:red">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。</p></blockquote><h2 id="事务的四大特性（ACID）"><a href="#事务的四大特性（ACID）" class="headerlink" title="事务的四大特性（ACID）"></a>事务的四大特性（ACID）</h2><h3 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h3><blockquote><p>最小逻辑单位，不可分割，要么都成功，要么都失败。</p><p>依赖事务日志 undo.log实现。</p></blockquote><h3 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h3><blockquote><p>事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束</p></blockquote><h3 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a><font style="color:red">隔离性（Isolation）</font></h3><blockquote><p>多个事务间互不干扰。</p></blockquote><h3 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h3><blockquote><p>依赖 redo.log +双写缓冲实现。</p></blockquote><h2 id="事务并发的问题"><a href="#事务并发的问题" class="headerlink" title="事务并发的问题"></a>事务并发的问题</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><blockquote><p>在一个事务内读取到另一个事务未提交的数据。</p></blockquote><p><img src="https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png" alt="image-20220302224922097"></p><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><blockquote><p>在一个事务内读取到另一个事务已提交的数据。</p><p>更新update或删除delete导致的数据变化叫做不可重复读。</p></blockquote><p><img src="https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png"></p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><blockquote><p>在一个事务内读取到另一个事务已提交的插入数据。</p><p>只有当插入insert导致行数的增加才叫做幻读。</p></blockquote><p><img src="https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png"></p><p><strong>总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</strong></p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><h3 id="Read-Uncommitted-未提交读-一未解决任何并发问题"><a href="#Read-Uncommitted-未提交读-一未解决任何并发问题" class="headerlink" title="Read Uncommitted(未提交读)一未解决任何并发问题"></a>Read Uncommitted(未提交读)一未解决任何并发问题</h3><blockquote><p>事务未提交的数据对其他事务也是可见的，会出现脏读。</p></blockquote><h3 id="Read-Committed-已提交读-一解决脏读问题"><a href="#Read-Committed-已提交读-一解决脏读问题" class="headerlink" title="Read Committed(已提交读)一解决脏读问题"></a>Read Committed(已提交读)一解决脏读问题</h3><blockquote><p>一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。</p></blockquote><h3 id="Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题"><a href="#Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题" class="headerlink" title="Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题"></a>Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题</h3><blockquote><p>在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。</p><p>但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。</p></blockquote><h3 id="Serializable-串行化-一解决所有问题"><a href="#Serializable-串行化-一解决所有问题" class="headerlink" title="Serializable(串行化)一解决所有问题"></a>Serializable(串行化)一解决所有问题</h3><blockquote><p>最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。</p></blockquote><p><strong>Mysql InnoDB 对事务隔离级别的支持程度</strong></p><p><img src="https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png"></p><p><strong>快照读：</strong><em><strong><u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u></strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 普通的select语句</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t;<br></code></pre></td></tr></table></figure><p><strong>当前读：</strong><em><strong><u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u></strong></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 加锁的select语句</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span><br><span class="hljs-comment">-- DML语句</span><br></code></pre></td></tr></table></figure><p><strong>RC和RR的区别</strong></p><p>RR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。</p><p>RC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。</p><p>具体的机制就是两种隔离级别的ReadView的差异。</p><h2 id="Mysql-锁基本类型"><a href="#Mysql-锁基本类型" class="headerlink" title="Mysql 锁基本类型"></a>Mysql 锁基本类型</h2><blockquote><p><strong>行锁与表锁区别</strong></p><p>锁定粒度：表锁&gt;行锁</p><p>加锁效率：表锁&gt;行锁</p><p>冲突概率：表锁&gt;行锁</p><p>并发性能：表锁&lt;行锁</p></blockquote><p><img src="https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png"></p><p>1、一张表没有索引，为什么会锁表？</p><blockquote><p>一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。</p></blockquote><p>2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？</p><blockquote><p>二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。</p></blockquote><h3 id="InnoDB-Locking"><a href="#InnoDB-Locking" class="headerlink" title="InnoDB Locking"></a>InnoDB Locking</h3><h4 id="行锁：共享锁（Shared-Locks）"><a href="#行锁：共享锁（Shared-Locks）" class="headerlink" title="行锁：共享锁（Shared Locks）"></a>行锁：共享锁（Shared Locks）</h4><blockquote><p>共享锁又称为读锁，简称S锁</p><p>共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。</p></blockquote><p>加锁方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> LOCK <span class="hljs-keyword">IN</span> SHARE MODE;<br></code></pre></td></tr></table></figure><p>释放锁方式：事务结束释放锁</p><h4 id="行锁：排他锁（Exclusive-Locks）"><a href="#行锁：排他锁（Exclusive-Locks）" class="headerlink" title="行锁：排他锁（Exclusive Locks）"></a>行锁：排他锁（Exclusive Locks）</h4><blockquote><p>排他锁又称为写锁，简称X锁。</p><p>排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。</p></blockquote><p>加锁方式：</p><ul><li>自动：<code>DELETE/UPDATE/INSERT</code>DML语句默认动加上排他锁（X锁）</li><li>手动：<code>FOR UPDATE</code>语句</li></ul><p>释放锁方式：事务结束释放锁</p><h4 id="意向共享锁（IS）-x2F-意向排他锁（IX）"><a href="#意向共享锁（IS）-x2F-意向排他锁（IX）" class="headerlink" title="意向共享锁（IS）&#x2F;意向排他锁（IX）"></a>意向共享锁（IS）&#x2F;意向排他锁（IX）</h4><blockquote><p>意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。</p><p>作用：为了提升加表锁的效率。</p></blockquote><ul><li><strong>意向共享锁（Intention Shared Locks，简称IS锁）：</strong>表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。</li><li><strong>意向排他锁（Intention Exclusive Locks，简称IX锁）：</strong>表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。</li></ul><h3 id="锁的算法（在什么样的情况下锁的范围）"><a href="#锁的算法（在什么样的情况下锁的范围）" class="headerlink" title="锁的算法（在什么样的情况下锁的范围）"></a>锁的算法（在什么样的情况下锁的范围）</h3><p><img src="https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png"></p><h4 id="记录锁（Record-Locks）：锁定记录"><a href="#记录锁（Record-Locks）：锁定记录" class="headerlink" title="记录锁（Record Locks）：锁定记录"></a>记录锁（Record Locks）：锁定记录</h4><blockquote><p>当你使用<code>FOR UPDATE</code>语句进行加锁时，精准命中一条记录，就会锁住该条记录；</p></blockquote><p><img src="https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png"></p><h4 id="间隙锁（Gap-locks）-锁定范围"><a href="#间隙锁（Gap-locks）-锁定范围" class="headerlink" title="间隙锁（Gap locks）:锁定范围"></a>间隙锁（Gap locks）:锁定范围</h4><blockquote><p>当你使用<code>FOR UPDATE</code>语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；</p><p>注意：相同的间隙锁不排斥，排斥的是插入</p><blockquote><p>比如我使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;<br></code></pre></td></tr></table></figure><p>这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t`(`id`,`name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>,&quot;张三&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t`(`id`,`name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>,&quot;张三&quot;);<br></code></pre></td></tr></table></figure></blockquote></blockquote><p><img src="https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png"></p><h4 id="临键锁（Nest-key-Locks）：锁定范围加记录"><a href="#临键锁（Nest-key-Locks）：锁定范围加记录" class="headerlink" title="临键锁（Nest-key Locks）：锁定范围加记录"></a>临键锁（Nest-key Locks）：锁定范围加记录</h4><blockquote><p>InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；</p><p>条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；</p><p>会锁住最后一个记录（Record）的下一个key的左开右闭的区间。</p></blockquote><p><img src="https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锁</tag>
      
      <tag>数据库</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React基础入门教程</title>
    <link href="/20220408/2c42955d3e53.html"/>
    <url>/20220408/2c42955d3e53.html</url>
    
    <content type="html"><![CDATA[<h1 id="React-基础入门教程"><a href="#React-基础入门教程" class="headerlink" title="React 基础入门教程"></a>React 基础入门教程</h1><p><a href="https://react.docschina.org/">React中文官网</a></p><p><strong>demo样例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>TEST<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- react核心库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- React虚拟DOM，用于支持react操作DOM --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span> <span class="hljs-attr">crossorigin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 用于将jsx转为js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//1.创建虚拟DOM</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">    <span class="hljs-comment">//2.渲染虚拟DOM到页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">DOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JSX规则"><a href="#JSX规则" class="headerlink" title="JSX规则"></a>JSX规则</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 定义虚拟DOM时，不要写引号。<br><span class="hljs-bullet">2.</span> 标签中混入JS表达式时要用&#123;&#125;。<br><span class="hljs-bullet">3.</span> 样式的类名指定不要用class，要用className。<br><span class="hljs-bullet">4.</span> 内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。<br><span class="hljs-bullet">5.</span> 只有一个根标签<br><span class="hljs-bullet">6.</span> 标签必须闭合<br><span class="hljs-bullet">7.</span> 标签首字母<br><span class="hljs-bullet">   1.</span> 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错<br><span class="hljs-bullet">   2.</span> 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错<br></code></pre></td></tr></table></figure><h2 id="创建虚拟DOM方式"><a href="#创建虚拟DOM方式" class="headerlink" title="创建虚拟DOM方式"></a>创建虚拟DOM方式</h2><h3 id="方式一（JSX）"><a href="#方式一（JSX）" class="headerlink" title="方式一（JSX）"></a>方式一（JSX）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//1.创建虚拟DOM</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="hljs-comment">//2.渲染虚拟DOM到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">DOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="方式二（JS）"><a href="#方式二（JS）" class="headerlink" title="方式二（JS）"></a>方式二（JS）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.创建虚拟DOM</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;title&#x27;</span>&#125;,<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="hljs-string">&#x27;Hello,React&#x27;</span>))<br><span class="hljs-comment">//2.渲染虚拟DOM到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="组件的定义方式"><a href="#组件的定义方式" class="headerlink" title="组件的定义方式"></a>组件的定义方式</h2><h3 id="方式一（函数式组件）"><a href="#方式一（函数式组件）" class="headerlink" title="方式一（函数式组件）"></a>方式一（函数式组件）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//1.创建函数式组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">//此处的this是undefined，因为babel编译后开启了严格模式</span><br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">//2.渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class="hljs-comment">1.React解析组件标签，找到了MyComponent组件。</span><br><span class="hljs-comment">2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="方式二（类式组件）"><a href="#方式二（类式组件）" class="headerlink" title="方式二（类式组件）"></a>方式二（类式组件）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//1.创建类式组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br><span class="hljs-comment">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render中的this:&#x27;</span>,<span class="hljs-variable language_">this</span>);<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br>&#125;<br><span class="hljs-comment">//2.渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br><span class="hljs-comment">/* </span><br><span class="hljs-comment">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class="hljs-comment">1.React解析组件标签，找到了MyComponent组件。</span><br><span class="hljs-comment">2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span><br><span class="hljs-comment">3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="组件实例的三大属性"><a href="#组件实例的三大属性" class="headerlink" title="组件实例的三大属性"></a>组件实例的三大属性</h2><h3 id="State（状态）"><a href="#State（状态）" class="headerlink" title="State（状态）"></a>State（状态）</h3><blockquote><p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p><p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-comment">//在组件中定义state属性，并且给它赋值。state必须是个对象</span><br>    state = &#123;<br>        <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-title function_">changeFlag</span>(<span class="hljs-params">flag</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;changeFlag&quot;</span>)<br>        <span class="hljs-comment">//必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面</span><br>        <span class="hljs-comment">//【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">flag</span>: flag&#125;)<br>        <span class="hljs-comment">//【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！</span><br><span class="hljs-comment">//this.state.flag = !flag //这是错误的写法</span><br>    &#125;<br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>)<br>        <span class="hljs-comment">//取出赋值属性</span><br>        <span class="hljs-keyword">const</span> &#123;flag&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>今天天气好&#123;flag ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.changeFlag(!this.state.flag)&#125;&gt;点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="Props（传参）"><a href="#Props（传参）" class="headerlink" title="Props（传参）"></a>Props（传参）</h3><blockquote><p>state 和 props 主要的区别在于 <strong>props</strong> 是不可变的，而 state 可以根据与用户交互来改变。</p><p>这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;render&quot;</span>)<br>        <span class="hljs-comment">//取出传过来参数</span><br>        <span class="hljs-keyword">const</span> &#123;className, grade, list&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;schoolName&#125;-年级：&#123;grade&#125;-&#123;classNum&#125;班<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                    &#123;</span><br><span class="language-xml">                        list.map((item, index) =&gt; &#123;</span><br><span class="language-xml">                            return (</span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.alertInfo(item)&#125;&gt;</span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;item.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                            )</span><br><span class="language-xml">                        &#125;)</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> cla = &#123;<br>    <span class="hljs-attr">schoolName</span>: <span class="hljs-string">&quot;XX高级中学&quot;</span>,<br>    <span class="hljs-attr">classNum</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">grade</span>: <span class="hljs-string">&quot;高中&quot;</span>,<br>    <span class="hljs-attr">list</span>: [&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;18&quot;</span>&#125;, &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;, &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;]<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span> &#123;<span class="hljs-attr">...cla</span>&#125;/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="参数限制"><a href="#参数限制" class="headerlink" title="参数限制"></a>参数限制</h4><blockquote><p>自 React v15.5 起，<code>React.PropTypes</code> 已移入另一个包中。请使用 <a href="https://www.npmjs.com/package/prop-types"><code>prop-types</code> 库</a> 代替。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;&#125;...<span class="hljs-comment">//组件类</span><br><span class="hljs-comment">//对标签属性进行类型、必要性的限制</span><br><span class="hljs-title class_">TestComponent</span>.<span class="hljs-property">propTypes</span> = &#123;<br>    <span class="hljs-attr">schoolName</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,    <span class="hljs-comment">//限制schoolName必传，且为字符串</span><br>    <span class="hljs-attr">classNum</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,                 <span class="hljs-comment">//限制classNum为数值</span><br>    <span class="hljs-attr">afterSchool</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,     <span class="hljs-comment">//限制afterSchool为函数</span><br>&#125;<br><br><span class="hljs-comment">//指定默认标签属性值</span><br><span class="hljs-title class_">TestComponent</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>    <span class="hljs-attr">grade</span>:<span class="hljs-string">&#x27;高中&#x27;</span>,   <span class="hljs-comment">//grade默认值</span><br>    <span class="hljs-attr">classNum</span>:<span class="hljs-number">1</span>,         <span class="hljs-comment">//classNum默认值</span><br>&#125;<br><br><span class="hljs-keyword">const</span> cla = &#123;<br>    <span class="hljs-attr">schoolName</span>:<span class="hljs-string">&quot;江宁高级中学&quot;</span>,<br>    <span class="hljs-attr">classNum</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-comment">// grade: &quot;高三&quot;,</span><br>    <span class="hljs-attr">list</span>: [&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;18&quot;</span>&#125;, &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;, &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;]<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span> &#123;<span class="hljs-attr">...cla</span>&#125; <span class="hljs-attr">afterSchool</span>=<span class="hljs-string">&#123;afterSchool&#125;/</span>&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">afterSchool</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;放学啦。。。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>函数式组件使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span> (props)&#123;<br>    <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = props<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>)<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property">propTypes</span> = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, <span class="hljs-comment">//限制name必传，且为字符串</span><br>    <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<span class="hljs-comment">//限制sex为字符串</span><br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,<span class="hljs-comment">//限制age为数值</span><br>&#125;<br><br><span class="hljs-comment">//指定默认标签属性值</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-comment">//sex默认值为男</span><br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">//age默认值为18</span><br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="Ref（可以获取真实DOM节点）"><a href="#Ref（可以获取真实DOM节点）" class="headerlink" title="Ref（可以获取真实DOM节点）"></a>Ref（可以获取真实DOM节点）</h3><blockquote><p>React提供的这个<code>ref</code>属性，**表示为对组件真正实例的引用，其实就是<code>ReactDOM.render()返回的组件实例</code>**；需要区分一下，<code>ReactDOM.render()</code>渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。</p><p><strong>通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref</strong></p><p>官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 <a href="https://react.docschina.org/docs/lifting-state-up.html">状态提升</a> 以获取更多有关示例</p></blockquote><h4 id="字符串形式"><a href="#字符串形式" class="headerlink" title="字符串形式"></a>字符串形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    test1 = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//字符串形式已经被弃用</span><br>        <span class="hljs-keyword">let</span> &#123;test1&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(test1, test1.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-comment">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(e, e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;test1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;test1&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;失去焦点获取当前输入数据&quot;</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="回调函数形式"><a href="#回调函数形式" class="headerlink" title="回调函数形式"></a>回调函数形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    test1 = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//字符串形式已经被弃用</span><br>        <span class="hljs-keyword">let</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(input1, input1.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-comment">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(e, e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-comment">// 方式二</span><br>    saveInput = <span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = a;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;@&#x27;</span>,a);<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                &#123;/*JSX里的注释得这么写*/&#125;</span><br><span class="language-xml">                &#123;/* 方式一 */&#125;</span><br><span class="language-xml">                &#123;/* a标识当前元素，&#123;&#125;方法体里表示：将当前元素a赋值给当前实例中的属性input1 */&#125;</span><br><span class="language-xml">                &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;a</span> =&gt;</span> &#123;this.input1 = a;console.log(&#x27;@&#x27;,a)&#125;&#125; placeholder=&quot;test1&quot;/&gt;*/&#125;</span><br><span class="language-xml">                &#123;/* 方式二 */&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.saveInput&#125;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;test1&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;失去焦点获取当前输入数据&quot;</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="React-createRef-形式"><a href="#React-createRef-形式" class="headerlink" title="React.createRef()形式"></a><code>React.createRef()</code>形式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//React 16.3 版本引入的 React.createRef() API</span><br><span class="hljs-comment">//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    input1 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>    input2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>();<br>    test1 = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-comment">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(e, <span class="hljs-variable language_">this</span>.<span class="hljs-property">input2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.input1&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;test1&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.input2&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;失去焦点获取当前输入数据&quot;</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure><h2 id="React的受控组件和非受控组件"><a href="#React的受控组件和非受控组件" class="headerlink" title="React的受控组件和非受控组件"></a>React的受控组件和非受控组件</h2><blockquote><p>受控组件就是可以被 react 状态控制的组件<br>在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。<br>好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。</p><p><strong>React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件</strong></p></blockquote><h2 id="高阶函数定义"><a href="#高阶函数定义" class="headerlink" title="高阶函数定义"></a>高阶函数定义</h2><blockquote><p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p><ol><li>若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。</li><li>若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。</li></ol><p>常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。</p></blockquote><h2 id="React生命周期"><a href="#React生命周期" class="headerlink" title="React生命周期"></a>React生命周期</h2><h3 id="（旧）生命周期"><a href="#（旧）生命周期" class="headerlink" title="（旧）生命周期"></a>（旧）生命周期</h3><p><img src="https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png"></p><h4 id="（旧）生命周期详解："><a href="#（旧）生命周期详解：" class="headerlink" title="（旧）生命周期详解："></a>（旧）生命周期详解：</h4><blockquote><p>18版本可能会移除的钩子函数：</p><p><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></p><p><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></p><p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p><p>17版本还可以用，但是必须得加上<code>UNSAFE_</code>前缀</p><p>举例：<code>UNSAFE_componentWillMount()</code></p></blockquote><ol><li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p><ol><li><code>constructor(props)</code>【构造器】</li><li><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></li><li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li><li><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></li></ol></li><li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件<code>render()</code>触发</p><ol><li><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</li><li><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></li><li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li><li><code>componentDidUpdate()</code>【组件更新完毕的钩子】</li></ol><blockquote><p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p></blockquote></li><li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p><blockquote><p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p></blockquote><ol><li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li></ol></li></ol><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">props</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class="hljs-variable language_">super</span>(props)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>&#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件将要挂载的钩子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;componentWillMount-组件将要挂载的钩子&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件挂载完毕的钩子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 控制组件更新的“阀门”</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">boolean</span>&#125; true：继续、false：不走了</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>)<br>        <span class="hljs-comment">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span> % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件将要更新的钩子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;componentWillUpdate-组件将要更新的钩子&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件更新完毕的钩子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将虚拟DOM渲染到页面</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class="hljs-keyword">let</span> &#123;count&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class="language-xml">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">A</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;this.state.count&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">A</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件将要卸载的钩子</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">props</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">//=============================================================</span><br>    <span class="hljs-comment">//自定义方法</span><br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//子组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件将要接收新的props的钩子</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">props</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A---componentWillReceiveProps&#x27;</span>, props);<br>    &#125;<br><br>    <span class="hljs-comment">//控制组件更新的“阀门”</span><br>    <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A---shouldComponentUpdate&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-comment">//组件将要更新的钩子</span><br>    <span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A---componentWillUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//组件更新完毕的钩子</span><br>    <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;A---componentDidUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是子组件“A”，父组件传过来的值是：&#123;this.props.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;aaa&quot;</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&quot;bbb&quot;</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="（新）生命周期"><a href="#（新）生命周期" class="headerlink" title="（新）生命周期"></a>（新）生命周期</h3><p>*<strong>展示不常用生命周期：</strong></p><p><img src="https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png"></p><p><strong>展示常用生命周期：</strong></p><p><img src="https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png"></p><h4 id="（新）生命周期详解："><a href="#（新）生命周期详解：" class="headerlink" title="（新）生命周期详解："></a>（新）生命周期详解：</h4><p><a href="https://react.docschina.org/docs/react-component.html#shouldcomponentupdate">官方文档：生命周期</a></p><ol><li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p><ol><li><p><code>constructor(props)</code>【构造器】</p></li><li><p><code>getDerivedStateFromProps(props,state)</code></p><blockquote><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">props,state</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class="hljs-comment">//返回快照值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p>新增（极少用到）</p><p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p></blockquote></li><li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p></li><li><p><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></p></li></ol></li><li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render()</code>触发</p><ol><li><p><code>getDerivedStateFromProps(props,state)</code></p><blockquote><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">props,state</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class="hljs-comment">//返回快照值</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p>新增（极少用到）</p><p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p></blockquote></li><li><p><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</p></li><li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p></li><li><p><code>getSnapshotBeforeUpdate(prevProps, prevState)</code>【在更新之前获取快照】</p><blockquote><p>新增（极少用到）</p><p>使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。</p></blockquote></li><li><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code>【组件更新完毕的钩子】</p></li></ol></li><li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p><blockquote><p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p></blockquote><ol><li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li></ol></li></ol><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">props</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class="hljs-variable language_">super</span>(props)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<span class="hljs-attr">count</span>: <span class="hljs-number">0</span>&#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 若state的值在任何时候都取决于props</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">props</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">state</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">getDerivedStateFromProps</span>(<span class="hljs-params">props, state</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getDerivedStateFromProps-若state的值在任何时候都取决于props&#x27;</span>, props, state);<br>        <span class="hljs-comment">// return &#123;count: state.count + 1&#125;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 控制组件更新的“阀门”</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">props</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">state</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">value</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">boolean</span>&#125; true：继续、false：不走了</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">props, state, value</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>, props, state, value)<br>        <span class="hljs-comment">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span> % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件挂载完毕的钩子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件更新完毕的钩子</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">prevProps</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">prevState</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">snapshot</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState, snapshot</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>, prevProps, prevState, snapshot);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将虚拟DOM渲染到页面</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class="hljs-keyword">let</span> &#123;count&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class="language-xml">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在更新之前获取快照</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getSnapshotBeforeUpdate-在更新之前获取快照&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组件将要卸载的钩子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">//=============================================================</span><br>    <span class="hljs-comment">//自定义方法</span><br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TestComponent</span> <span class="hljs-attr">a</span>=<span class="hljs-string">&quot;aaa&quot;</span> <span class="hljs-attr">b</span>=<span class="hljs-string">&quot;bbb&quot;</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="Diffing算法"><a href="#Diffing算法" class="headerlink" title="Diffing算法"></a>Diffing算法</h2><p><strong>diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务</strong></p><p><img src="https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png"></p><p><strong>遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)</strong></p><blockquote><p>0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先</p></blockquote><p><img src="https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png"></p><h2 id="For循环为什么key不能用index索引值作为key"><a href="#For循环为什么key不能用index索引值作为key" class="headerlink" title="For循环为什么key不能用index索引值作为key"></a>For循环为什么key不能用index索引值作为key</h2><blockquote><p>可能会出现严重的效率问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  经典面试题:</span><br><span class="hljs-comment">     1). react/vue中的key有什么作用？（key的内部原理是什么？）</span><br><span class="hljs-comment">     2). 为什么遍历列表时，key最好不要用index?</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 虚拟DOM中key的作用：</span><br><span class="hljs-comment">1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,</span><br><span class="hljs-comment">随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="hljs-comment">(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</span><br><span class="hljs-comment">(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">b. 旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="hljs-comment">根据数据创建新的真实DOM，随后渲染到到页面</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2. 用index作为key可能会引发的问题：</span><br><span class="hljs-comment">1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="hljs-comment">会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2. 如果结构中还包含输入类的DOM：</span><br><span class="hljs-comment">会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</span><br><span class="hljs-comment">仅用于渲染列表用于展示，使用index作为key是没有问题的。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3. 开发中如何选择key?:</span><br><span class="hljs-comment">1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class="hljs-comment">2.如果确定只是简单的展示数据，用index也是可以的。</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">慢动作回放----使用index索引值作为key</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">初始数据：</span><br><span class="hljs-comment">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class="hljs-comment">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class="hljs-comment">初始的虚拟DOM：</span><br><span class="hljs-comment">&lt;li key=0&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment">&lt;li key=1&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">更新后的数据：</span><br><span class="hljs-comment">&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class="hljs-comment">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class="hljs-comment">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class="hljs-comment">更新数据后的虚拟DOM：</span><br><span class="hljs-comment">&lt;li key=0&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment">&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment">&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">-----------------------------------------------------------------</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">慢动作回放----使用id唯一标识作为key</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">初始数据：</span><br><span class="hljs-comment">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class="hljs-comment">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class="hljs-comment">初始的虚拟DOM：</span><br><span class="hljs-comment">&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment">&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">更新后的数据：</span><br><span class="hljs-comment">&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class="hljs-comment">&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class="hljs-comment">&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class="hljs-comment">更新数据后的虚拟DOM：</span><br><span class="hljs-comment">&lt;li key=3&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment">&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment">&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><br>state = &#123;<br><span class="hljs-attr">persons</span>:[<br>&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小张&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,<br>&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小李&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,<br>]<br>&#125;<br><br>add = <span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-keyword">const</span> &#123;persons&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br><span class="hljs-keyword">const</span> p = &#123;<span class="hljs-attr">id</span>:persons.<span class="hljs-property">length</span>+<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小王&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">persons</span>:[p,...persons]&#125;)<br>&#125;<br><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>展示人员信息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>使用index（索引值）作为key<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">&#123;</span><br><span class="language-xml">this.state.persons.map((personObj,index)=&gt;&#123;</span><br><span class="language-xml">return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">&#125;)</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>使用id（数据的唯一标识）作为key<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">&#123;</span><br><span class="language-xml">this.state.persons.map((personObj)=&gt;&#123;</span><br><span class="language-xml">return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">&#125;)</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br>&#125;<br>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-Mysql执行流程与架构</title>
    <link href="/20220408/a0d411e784b0.html"/>
    <url>/20220408/a0d411e784b0.html</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql执行流程与架构"><a href="#Mysql执行流程与架构" class="headerlink" title="Mysql执行流程与架构"></a>Mysql执行流程与架构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show global status like &quot;Thread%&quot; -- 查看当前客户端连接数<br><br>SHOW VARIABLES -- 查看系统变量及其值<br>show global variables like &#x27;wait_timeout&#x27; -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）<br>show global variables like &#x27;interactive_timeout&#x27; -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）<br></code></pre></td></tr></table></figure><h3 id="1、mysql-缓存"><a href="#1、mysql-缓存" class="headerlink" title="1、mysql 缓存"></a>1、mysql 缓存</h3><blockquote><p>将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。<code>show variables like &quot;query_cache%&quot;</code>查看状态已是OFF状态。</p><p>为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）</p></blockquote><h3 id="2、预处理器"><a href="#2、预处理器" class="headerlink" title="2、预处理器"></a>2、预处理器</h3><blockquote><p>分析表是否存在，相关权限的校验（用户权限，表增删改查权限）</p></blockquote><h3 id="3、解析器Parser"><a href="#3、解析器Parser" class="headerlink" title="3、解析器Parser"></a>3、解析器Parser</h3><blockquote><p>主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号”(“，那么右边一定要有个括号”)”</p></blockquote><p><strong>解析树：</strong></p><p><img src="https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png"></p><h3 id="4、优化器Optimizer"><a href="#4、优化器Optimizer" class="headerlink" title="4、优化器Optimizer"></a>4、优化器Optimizer</h3><blockquote><p>成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。</p><p>关联查询：决定优先查哪张表</p><p>索引：决定是否使用索引或者使用哪个索引</p><p>优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。</p></blockquote><h3 id="5、执行计划"><a href="#5、执行计划" class="headerlink" title="5、执行计划"></a>5、执行计划</h3><blockquote><p>优化器得到的结果就是执行计划。</p><p>那么如何去查看一条sql语句执行的成本呢？通过这个：<code>show status like &#39;Last_query_cost&#39;</code>在调整过sql语句后执行后，前后对比下。</p><p>格式化成JSON形式查看：<code>EXPLAIN FORMAT=JSON SELECT t.* FROM t</code> </p></blockquote><h3 id="6、执行器"><a href="#6、执行器" class="headerlink" title="6、执行器"></a>6、执行器</h3><blockquote><p>执行执行计划，并且读写数据。</p></blockquote><h4 id="那么从哪里读写数据呢？"><a href="#那么从哪里读写数据呢？" class="headerlink" title="那么从哪里读写数据呢？"></a>那么从哪里读写数据呢？</h4><p><strong>存储引擎-表类型：</strong></p><blockquote><p>查看mysql支持的存储引擎：<code>show engines</code> 插件式的</p></blockquote><ol><li><p>archive</p><blockquote><ul><li>用于历史存储</li></ul></blockquote></li><li><p>csv</p><blockquote><ul><li>纯文本格式</li><li>不支持索引</li><li>用于迁移数据</li></ul></blockquote></li><li><p>innodb（5.5版本及之后默认）</p><blockquote><p>每次从磁盘读取的大小是16KB，一页&#x3D;16KB。</p></blockquote><blockquote><ul><li>支持事务</li><li>行级锁</li><li>读写并发操作</li><li>聚簇索引、非聚簇索引</li></ul></blockquote></li><li><p>myisam</p><blockquote><ul><li>锁表</li><li>用于只读场景</li></ul></blockquote></li><li><p>memory</p><blockquote><ul><li>数据放在内存</li><li>用于临时表</li></ul></blockquote><p>.</p><p>.</p><p>.</p></li></ol><p><img src="https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png"></p><p>mysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。</p><p>当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做<strong>“脏页”</strong>，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页</p><p>mysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做<strong>“刷脏”</strong></p><p>验证bufferpool在mysql中的状态：<code>SHOW STATUS LIKE &quot;%innodb_buffer_pool%&quot;</code></p><p><img src="https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png"></p><p>当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；</p><p><strong>“redo log”：</strong></p><blockquote><p>作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，</p><p>特性：崩溃恢复（crash safe）。</p><p>为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO &gt; 随机IO）。</p><p>文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。</p></blockquote><p><strong>“undo log”：</strong></p><blockquote><p>记录的是事务发生前的数据的状态</p><p>保证原子性：要么全部成功，要么全部失败</p><p>只有增删改的记录，查询是没有的</p></blockquote><p><strong>更新语句执行流程：</strong></p><p><img src="https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-Mysql索引原理与使用规则</title>
    <link href="/20220301/65a387d339c2.html"/>
    <url>/20220301/65a387d339c2.html</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql索引原理与使用规则"><a href="#Mysql索引原理与使用规则" class="headerlink" title="Mysql索引原理与使用规则"></a>Mysql索引原理与使用规则</h1><h2 id="数据库索引到底是什么"><a href="#数据库索引到底是什么" class="headerlink" title="数据库索引到底是什么"></a>数据库索引到底是什么</h2><blockquote><p>是数据库管理系统（DBMS）中一个排序的<font style="color:red">数据结构</font>，以协助快速查询、更新数据库表中数据。</p></blockquote><p><img src="https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png"></p><p>索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。</p><h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><p><font style="color:red">数据结构图形工具：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></font></p><h3 id="二叉查找树（Binary-Search-Tree）"><a href="#二叉查找树（Binary-Search-Tree）" class="headerlink" title="二叉查找树（Binary Search Tree）"></a>二叉查找树（Binary Search Tree）</h3><blockquote><p>左子树的节点小于父节点</p><p>右子树的节点大于父节点</p></blockquote><p><img src="https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png"> </p><p>在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）</p><p><img src="https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png"></p><h3 id="平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）"><a href="#平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）" class="headerlink" title="平衡二叉树（AVL Tree - Balanced Binary Search Tree）"></a>平衡二叉树（AVL Tree - Balanced Binary Search Tree）</h3><blockquote><p>约束：<font style="color:red">左右子树的深度差绝对值不能超过1</font></p><p>插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整</p></blockquote><p><img src="https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png"></p><h4 id="AVL-数据存储"><a href="#AVL-数据存储" class="headerlink" title="AVL 数据存储"></a>AVL 数据存储</h4><blockquote><ol><li>键值：建立索引的字段值</li><li>数据磁盘地址</li><li>子节点引用</li></ol></blockquote><p><img src="https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png"></p><p><strong>注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb &#x3D; 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）</strong></p><h3 id="多路平衡查找树（Balanced-Tree-B树）"><a href="#多路平衡查找树（Balanced-Tree-B树）" class="headerlink" title="多路平衡查找树（Balanced Tree B树）"></a>多路平衡查找树（Balanced Tree B树）</h3><blockquote><p>特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。</p><p>大大的降低了树的深度</p></blockquote><p><img src="https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png"></p><h4 id="通过分裂、合并保持B树的平衡"><a href="#通过分裂、合并保持B树的平衡" class="headerlink" title="通过分裂、合并保持B树的平衡"></a>通过分裂、合并保持B树的平衡</h4><blockquote><p>当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡</p></blockquote><p><img src="https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png"></p><h3 id="B-Tree-加强版多路平衡查找树"><a href="#B-Tree-加强版多路平衡查找树" class="headerlink" title="B+Tree 加强版多路平衡查找树"></a>B+Tree 加强版多路平衡查找树</h3><blockquote><p>特点：深度更低、I&#x2F;O稳定、范围，排序查询的性能大幅度的提升</p><p>与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。</p><p>根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。</p><p>查找任何数据时，它的I&#x2F;O次数都是相同的；树整体的深度决定I&#x2F;O的次数。</p><p>叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。</p><p>优势：</p><ol><li>B-Tree能解决的，B+Tree都能解决</li><li>扫库、扫表能力更强</li><li>磁盘读写能力更强</li><li>排序能力更强</li><li>效率更加稳定</li></ol></blockquote><p><img src="https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png"></p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><blockquote><p>在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。</p><p>在memory存储引擎中是可以简历hash索引的。</p></blockquote><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="聚集索引（聚簇索引）"><a href="#聚集索引（聚簇索引）" class="headerlink" title="聚集索引（聚簇索引）"></a>聚集索引（聚簇索引）</h3><blockquote><p>索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引</p></blockquote><p>在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）</p><h3 id="二级索引（辅助索引、非聚集索引）"><a href="#二级索引（辅助索引、非聚集索引）" class="headerlink" title="二级索引（辅助索引、非聚集索引）"></a>二级索引（辅助索引、非聚集索引）</h3><p>创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。</p><p><img src="https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png"></p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>查询的数据已经包含在了索引里了；</p><p>比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="索引的使用原则"><a href="#索引的使用原则" class="headerlink" title="索引的使用原则"></a>索引的使用原则</h2><p>列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。</p><p>联合索引的最左匹配原则</p><p><img src="https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png"></p><h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p><img src="https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;18&#x27;</span> <span class="hljs-keyword">AND</span> name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%三&#x27;</span>;<br></code></pre></td></tr></table></figure><p>正常情况下，存储引擎层根据索引查出<code>age=&#39;18&#39;</code>的数据，拿到Server层再根据<code>name LIKE &#39;%三&#39;</code>条件再过滤；如果<code>age=&#39;18&#39;</code>的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；</p><p>所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 默认是开启 on</span><br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;optimizer_switch&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>得到结果值：index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,engine_condition_pushdown&#x3D;on,<font style="color:red">index_condition_pushdown&#x3D;on</font>,mrr&#x3D;on,mrr_cost_based&#x3D;on,block_nested_loop&#x3D;on,batched_key_access&#x3D;off,materialization&#x3D;on,semijoin&#x3D;on,loosescan&#x3D;on,firstmatch&#x3D;on,duplicateweedout&#x3D;on,subquery_materialization_cost_based&#x3D;on,use_index_extensions&#x3D;on,condition_fanout_filter&#x3D;on,derived_merge&#x3D;on</p><p>index_condition_pushdown&#x3D;on 表示开启索引下推</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里Arthas如何使用</title>
    <link href="/20210525/1da1145904a0.html"/>
    <url>/20210525/1da1145904a0.html</url>
    
    <content type="html"><![CDATA[<h1 id="阿里Arthas如何使用"><a href="#阿里Arthas如何使用" class="headerlink" title="阿里Arthas如何使用"></a>阿里Arthas如何使用</h1><p><a href="https://arthas.gitee.io/index.html">arthas官方文档</a></p><p>本文介绍下arthas如何监控服务集群</p><h2 id="Web-Console"><a href="#Web-Console" class="headerlink" title="Web Console"></a><a href="https://arthas.gitee.io/web-console.html">Web Console</a></h2><blockquote><p>先从arthas官方github上releases下载<a href="https://github.com/alibaba/arthas/releases">arthas-tunnel-server</a></p><p>Arthas tunnel server是一个spring boot fat jar应用，直接<code>java -jar</code>启动：</p><p><code>java -jar  arthas-tunnel-server.jar</code></p><p>默认情况下，arthas tunnel server的web端口是<code>8080</code>，arthas agent连接的端口是<code>7777</code>。</p><p>启动之后，可以访问 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a> ，再通过<code>agentId</code>连接到已注册的arthas agent上。</p><p>通过Spring Boot的Endpoint，可以查看到具体的连接信息： <a href="http://127.0.0.1:8080/actuator/arthas">http://127.0.0.1:8080/actuator/arthas</a> ，登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到，比如：</p><p><img src="https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png"></p></blockquote><p><strong><a href="http://127.0.0.1:8080/">Web页面</a>：</strong></p><p><img src="https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png"></p><p><strong><a href="http://127.0.0.1:8080/actuator/arthas">Spring Boot的Endpoint查看到具体的连接信息</a></strong></p><blockquote><p>登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到</p></blockquote><p><img src="https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png"></p><h2 id="Arthas-Spring-Boot-Starter"><a href="#Arthas-Spring-Boot-Starter" class="headerlink" title="Arthas Spring Boot Starter"></a>Arthas Spring Boot Starter</h2><blockquote><p>注意：目前只支持SpringBoot2</p></blockquote><p><strong>添加pom依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.taobao.arthas<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;arthas.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最新版本：<a href="https://search.maven.org/search?q=arthas-spring-boot-starter">查看</a></p><p><strong>配置属性</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># arthas.agent-id=user# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个</span><br><span class="hljs-attr">arthas.tunnel-server</span>=<span class="hljs-string">ws://127.0.0.1:7777/ws# tunnel-server 服务地址</span><br><span class="hljs-comment"># 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。</span><br><span class="hljs-attr">arthas.telnetPort</span>=<span class="hljs-string">-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口</span><br><span class="hljs-attr">arthas.httpPort</span>=<span class="hljs-string">-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口</span><br></code></pre></td></tr></table></figure><p>之后直接启动SpringBoot服务后查看</p><p><img src="https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png"></p><p>查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。</p><p><img src="https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png"></p><p>之后，我们就可以通过arthas的相关命令去操作该服务</p>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arthas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指令乱序，指令重排序</title>
    <link href="/20210401/c121bd1e199e.html"/>
    <url>/20210401/c121bd1e199e.html</url>
    
    <content type="html"><![CDATA[<h1 id="指令乱序，指令重排序"><a href="#指令乱序，指令重排序" class="headerlink" title="指令乱序，指令重排序"></a>指令乱序，指令重排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 指令乱序，指令重排序</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 弟2948605次（0,1)</span><br><span class="hljs-comment"> * 弟2948606次（0,1)</span><br><span class="hljs-comment"> * 弟2948607次（0,1)</span><br><span class="hljs-comment"> * 弟2948608次（0,0)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/1/15 10:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; i++) &#123;<br>            x = <span class="hljs-number">0</span>;<br>            y = <span class="hljs-number">0</span>;<br>            a = <span class="hljs-number">0</span>;<br>            b = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                a = <span class="hljs-number">1</span>;<br>                x = b;<br>            &#125;);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                b = <span class="hljs-number">1</span>;<br>                y = a;<br>            &#125;);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;弟&quot;</span> + i + <span class="hljs-string">&quot;次（&quot;</span> + x + <span class="hljs-string">&quot;,&quot;</span> + y + <span class="hljs-string">&quot;)&quot;</span>;<br>            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span> &amp;&amp; y == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(result);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，</p><p><strong>第一个线程执行a&#x3D;1;x&#x3D;b;</strong></p><p><strong>第二个线程执行b&#x3D;1;y&#x3D;a。</strong></p><blockquote><p> 这段程序正常来看有3个结果：</p><ol><li>第一个线程执行到a&#x3D;1的时候，第二个线程执行到了b&#x3D;1，最后x&#x3D;1，y&#x3D;1；</li><li>第一个线程执行完，第二个线程才刚开始，最后x&#x3D;0，y&#x3D;1；</li><li>第二个线程执行完，第一个线程才开始，最后x&#x3D;1，y&#x3D;0；</li></ol><p>理论上无论怎么样都不可能x&#x3D;0,y&#x3D;0;但是当程序执行到几万次之后，竟然出现了00的结果：<code>弟2948608次（0,0)</code></p></blockquote><p><strong>因为指令被重排序了，x&#x3D;b先于a&#x3D;1执行，y&#x3D;a先于b&#x3D;1执行。</strong></p><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_41973594/article/details/110452849">https://blog.csdn.net/qq_41973594/article/details/110452849</a> </p><p><a href="https://blog.csdn.net/yjp198713/article/details/78839698">https://blog.csdn.net/yjp198713/article/details/78839698</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指令乱序</tag>
      
      <tag>指令重排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch入门</title>
    <link href="/20210310/e097651801dc.html"/>
    <url>/20210310/e097651801dc.html</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch入门"><a href="#ElasticSearch入门" class="headerlink" title="ElasticSearch入门"></a>ElasticSearch入门</h1><h2 id="ElasticSearch的基本概念"><a href="#ElasticSearch的基本概念" class="headerlink" title="ElasticSearch的基本概念"></a>ElasticSearch的基本概念</h2><ul><li><p><strong>Index</strong></p><blockquote><p>类似于mysql数据库中的database（数据库）</p><p>是文档的容器，是一类文档的集合</p><ul><li>Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型</li><li>Shard：体现了物理空间的概念，索引中的数据分散在Shard上</li></ul></blockquote></li><li><p><strong><del>Type</del></strong></p><blockquote><p><del>类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。</del></p><p>在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type “_doc”。</p></blockquote></li><li><p><strong>Document</strong></p><blockquote><p>由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。</p><p>文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成</p></blockquote></li><li><p><strong>Field</strong></p><blockquote><p>es中一个文档中对应的多个列与mysql数据库中每一列对应。字段</p></blockquote></li><li><p><strong>Mapping</strong></p><blockquote><p>文档字段类型</p></blockquote></li><li><p><strong>indexed</strong></p><blockquote><p>就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。</p></blockquote></li><li><p><strong>Query DSL</strong></p><blockquote><p>类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL</p></blockquote></li><li><p><strong>GET&#x2F;PUT&#x2F;POST&#x2F;DELETE</strong></p><blockquote><p>分别类似与mysql中的select&#x2F;update&#x2F;delete……</p></blockquote></li></ul><h3 id="类比："><a href="#类比：" class="headerlink" title="类比："></a>类比：</h3><table><thead><tr><th>关系型数据库</th><th>ES</th></tr></thead><tbody><tr><td>Table</td><td>Index（Type）</td></tr><tr><td>Row</td><td>Document</td></tr><tr><td>Column</td><td>Field</td></tr><tr><td>Schema（表定义）</td><td>Mapping</td></tr><tr><td>SQL</td><td>DSL</td></tr></tbody></table><p><strong>每个文档都会有相应的元数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><br></code></pre></td></tr></table></figure><p>元数据用于标注文档的相关信息：</p><ul><li>_index：文档所属索引名（库名）</li><li>_type：文档所属类型名（表名）</li><li>_id：唯一ID</li><li>_source：原始JSON数据</li><li><del>_all：整合所有内容到该字段，7.0版本已被废除</del></li><li>_version：版本号</li><li>_score：相关性打分</li></ul><h2 id="分布式系统的可用性和扩展性"><a href="#分布式系统的可用性和扩展性" class="headerlink" title="分布式系统的可用性和扩展性"></a>分布式系统的可用性和扩展性</h2><ul><li>高可用<ul><li>服务可用性-允许所有节点停止服务</li><li>数据可用性-部分节点丢失，不会丢失数据</li></ul></li><li>可扩展<ul><li>请求量提升&#x2F;数据不断的增长（将数据分布到所有节点上）</li></ul></li></ul><h3 id="分布式特性"><a href="#分布式特性" class="headerlink" title="分布式特性"></a>分布式特性</h3><ul><li>ElasticSearch的分布式架构好处<ul><li>存储的水平扩容</li><li>提高系统的可用性，部分节点停止服务，整个集群的服务不受影响</li></ul></li><li>ElasticSearch分布式架构<ul><li>不同的集群通过不同的名字来区分，默认为“elasticSearch”</li><li>通过配置文件可修改，或者在命令行中 <code>-E cluster-name=test </code> 进行设定</li><li>一个集群可以有一个或多个节点</li></ul></li></ul><h3 id="Master-eligible-nodes（Master候选者）-和-Master-Node"><a href="#Master-eligible-nodes（Master候选者）-和-Master-Node" class="headerlink" title="Master-eligible nodes（Master候选者） 和 Master Node"></a>Master-eligible nodes（Master候选者） 和 Master Node</h3><ul><li>每个节点启动后，默认就是一个Master-eligible节点<ul><li>可以设置 <code>node.master:false</code> 禁止</li></ul></li><li>Master-eligible节点可以参加选主流程，称为Master Node节点</li><li>当第一个节点启动的时候，会将自己选举成Master Node节点</li><li>每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）<ul><li>集群状态（Cluster State），维护了一个集群中，必要的信息<ul><li>所有的节点信息</li><li>所有的索引和相关的Mapping和Setting信息</li><li>分片的路由信息</li></ul></li></ul></li></ul><h3 id="Date-Node-amp-Coordinating-Node（数据整合节点）"><a href="#Date-Node-amp-Coordinating-Node（数据整合节点）" class="headerlink" title="Date Node &amp; Coordinating Node（数据整合节点）"></a>Date Node &amp; Coordinating Node（数据整合节点）</h3><ul><li>Data Node<ul><li>可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用</li></ul></li><li>Coordinating Node<ul><li>负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起</li><li>每个节点默认都起到Coordinating Node的职责</li></ul></li></ul><h3 id="其他节点类型"><a href="#其他节点类型" class="headerlink" title="其他节点类型"></a>其他节点类型</h3><ul><li>Hot &amp; Warm Node（冷热节点）<ul><li>不同硬件配置的Data Node，用来实现Hot &amp; Warm架构，降低就能部署的成本</li></ul></li><li>Machine Learning Node<ul><li>负责跑机器学习的Job，用来做异常检测的</li></ul></li><li><del>Tribe Node</del><ul><li>（5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理</li></ul></li></ul><h3 id="配置节点类型"><a href="#配置节点类型" class="headerlink" title="配置节点类型"></a>配置节点类型</h3><ul><li>开发环境中一个节点可以承担多种角色</li><li>生产环境中，应该设置单一的角色的节点（dedicated node）</li></ul><table><thead><tr><th>节点类型</th><th>配置参数</th><th>默认值</th></tr></thead><tbody><tr><td>maste eligible</td><td>node.master</td><td>true</td></tr><tr><td>data</td><td>node.data</td><td>true</td></tr><tr><td>ingest</td><td>node.ingest</td><td>true</td></tr><tr><td>coordinating only</td><td>无</td><td>每个节点默认都是coordinating节点，设置其他类型全部为false</td></tr><tr><td>machine learning</td><td>node.ml</td><td>true（需enable x-pack）</td></tr></tbody></table><h3 id="分片（Primary-Shard-amp-Replica-Shard）"><a href="#分片（Primary-Shard-amp-Replica-Shard）" class="headerlink" title="分片（Primary Shard &amp; Replica Shard）"></a>分片（Primary Shard &amp; Replica Shard）</h3><ul><li>主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商<ul><li>一个分片是一个运行的Lucene（搜索引擎）的实例</li><li>主分片数在索引创建时指定，后续不允许修改，除非Reindex</li></ul></li><li>副本，用以解决数据高可用的问题。副本是主分片的拷贝<ul><li>副本分片数，可以动态调整</li><li>增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）</li></ul></li></ul><h3 id="查看集群的健康状况"><a href="#查看集群的健康状况" class="headerlink" title="查看集群的健康状况"></a>查看集群的健康状况</h3><p><img src="C:\Users\ZC\AppData\Roaming\Typora\typora-user-images\image-20210309114915854.png" alt="image-20210309114915854"></p><p><strong>在Kibana的开发工具中，快捷键按下<code>Ctrl+/</code>可以直接跳到ES官方的API中</strong></p><h3 id="文档的CRUD"><a href="#文档的CRUD" class="headerlink" title="文档的CRUD"></a>文档的CRUD</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs http"><br>#更新（先删除原数据，在新建新数据，同时版本+1）、创建<br>PUT &#123;Index&#125;/_doc/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#创建（自动生成ID）<br>POST &#123;Index&#125;/_doc<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#查询 <br>GET &#123;Index&#125;/_doc/&#123;id&#125;<br>#更新（文档必须已经存在，更新只会对相应字段做增量修改）<br>POST &#123;Index&#125;/_update/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#删除<br>DELETE &#123;Index&#125;/_doc/&#123;id&#125;<br></code></pre></td></tr></table></figure><ul><li>Type名，约定都用_doc</li><li>Create：如果ID已经存在，会失败</li><li>Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加</li><li>Update：文档必须已经存在，更新只会对相应字段做增量修改</li></ul><blockquote><p>Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1</p></blockquote><h3 id="Bulk-API"><a href="#Bulk-API" class="headerlink" title="Bulk API"></a>Bulk API</h3><ul><li>在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作</li><li>支持四种类型的操作<ul><li>Index</li><li>Create</li><li>Update</li><li>Delete</li></ul></li><li>可以在URL中指定Index，也可以在请求的Payload中进行</li><li>操作中单条操作失败，并不会影响到其他操作</li><li>返回结果包括了每一条操作执行结果</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><br>POST _bulk<br>&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value1&quot;&#125;<br>&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;<br>&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;test2&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value3&quot;&#125;<br>&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;test3&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;doc&quot;:&#123;&quot;field2&quot;:&quot;value2&quot;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="批量读取-MEGT"><a href="#批量读取-MEGT" class="headerlink" title="批量读取-MEGT"></a>批量读取-MEGT</h3><p>批量操作，可以减少网络连接所产生的开销，提高性能</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><br>GET _mget<br>&#123;<br>  &quot;docs&quot;:[<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:1<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:2<br>      &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="批量查询-MSEARCH"><a href="#批量查询-MSEARCH" class="headerlink" title="批量查询-MSEARCH"></a>批量查询-MSEARCH</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><br>POST &#123;index&#125;/_msearch<br></code></pre></td></tr></table></figure><h3 id="索引：正排、倒排"><a href="#索引：正排、倒排" class="headerlink" title="索引：正排、倒排"></a>索引：正排、倒排</h3><p>正排例如书本的目录，文档ID到文档和单词的关联</p><p>倒排书本最后的索引页就是倒排索引，单词到文档ID的关系</p><p><strong>倒排索引的核心组成</strong></p><ul><li>倒排索引包含两个部分<ul><li>单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系<ul><li>单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询</li></ul></li><li>倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成<ul><li>倒排索引项（Posting ）<ul><li>文档ID</li><li>词频TF：该单词问文档中出现的次数，用于相关性评分</li><li>位置（Position）：单词在文档中分词的文职。用于语句搜索</li><li>偏移（Offset）：记录单词的开始结束位置，实现高亮显示</li></ul></li></ul></li></ul></li></ul><h3 id="Analysis与Analyzer（分词器）"><a href="#Analysis与Analyzer（分词器）" class="headerlink" title="Analysis与Analyzer（分词器）"></a>Analysis与Analyzer（分词器）</h3><ul><li>Analysis：文本分析是把全文本转换一系列单词（term&#x2F;token）的过程，也叫分词</li><li>Analysis是通过Analyzer来实现的<ul><li>可以使用Elasticsearch内置的分析器&#x2F;或者按需自定义定制化分析器</li></ul></li><li>除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析</li></ul><h4 id="Analyzer（分词器）的组成"><a href="#Analyzer（分词器）的组成" class="headerlink" title="Analyzer（分词器）的组成"></a>Analyzer（分词器）的组成</h4><ul><li>分词器是专门处理分词的组件，Analyzer由三部分组成<ul><li>Character Filters（针对原始文本处理，例如去除html标签）</li><li>Tokenizer（按照规则切分为单词）</li><li>Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）</li></ul></li></ul><h4 id="Elasticsearch内置分词器"><a href="#Elasticsearch内置分词器" class="headerlink" title="Elasticsearch内置分词器"></a>Elasticsearch内置分词器</h4><ul><li>Standard Analyzer：默认分词器，按词切分，小写处理</li><li>Simple Analyzer：按照非字母切分（符号被过滤），小写处理</li><li>Stop Analyzer：小写处理，停用词过滤（the、a、is）</li><li>Whitespace Analyzer：按照空格切分，不转小写</li><li>Keyword Analyzer：不分词，直接降输入当做关键字输出</li><li>Patter Analyzer：正则表达式，默认<code>\W+</code>（非支付分隔）</li><li>Language：提供了30多种常见语言分词器</li><li>Customer Analyzer：自定义分词器</li></ul><h4 id="使用-analyzer-API"><a href="#使用-analyzer-API" class="headerlink" title="使用_analyzer API"></a>使用_analyzer API</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs http"># 示例<br><br><br># standard：默认分词器，按词切分，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;standard&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># simple：按照非字母切分，非字母都被去除，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;simple&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;stop&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># whitespace：按照空格切分<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;whitespace&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># keyword：关键字<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;keyword&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="ICU-Analyzer"><a href="#ICU-Analyzer" class="headerlink" title="ICU Analyzer"></a>ICU Analyzer</h4><ul><li>需要安装plugin<ul><li>Elasticsearch-plugin install analysis-icu</li></ul></li><li>提供了Unicode的支持，更好的支持亚洲语言</li></ul><h4 id="更多的中文分词器"><a href="#更多的中文分词器" class="headerlink" title="更多的中文分词器"></a>更多的中文分词器</h4><ul><li>IK<ul><li>支持自定义词库，支持热更新分词字典</li><li><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li></ul></li><li>THULAC<ul><li>清华大学自然语言处理和社会人文计算实验室的一套中文分词器</li><li><a href="https://github.com/microbun/elasticsearch-thulac-plugin">https://github.com/microbun/elasticsearch-thulac-plugin</a></li></ul></li></ul><h2 id="Search-搜索API"><a href="#Search-搜索API" class="headerlink" title="Search 搜索API"></a>Search 搜索API</h2><ul><li>URL Search<ul><li>在url中使用查询参数</li></ul></li><li>Request Body Search<ul><li>使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）</li></ul></li></ul><p><strong>指定查询索引</strong></p><table><thead><tr><th>语法</th><th>范围</th></tr></thead><tbody><tr><td>&#x2F;_search</td><td>集群上所有的索引</td></tr><tr><td>&#x2F;index1&#x2F;_search</td><td>index1</td></tr><tr><td>&#x2F;index1,index2&#x2F;_search</td><td>index1和index2</td></tr><tr><td>&#x2F;index*&#x2F;_search</td><td>以index开头的索引</td></tr></tbody></table><h4 id="URL查询"><a href="#URL查询" class="headerlink" title="URL查询"></a>URL查询</h4><p><code>http://&#123;ip&#125;:&#123;port&#125;/&#123;index&#125;/_search?q=&#123;field&#125;:&#123;value&#125;</code></p><h4 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
      <tag>ES</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github刷提交记录</title>
    <link href="/20210306/b4123b4c0c67.html"/>
    <url>/20210306/b4123b4c0c67.html</url>
    
    <content type="html"><![CDATA[<h1 id="Github刷提交记录"><a href="#Github刷提交记录" class="headerlink" title="Github刷提交记录"></a>Github刷提交记录</h1><p><a href="https://github.com/sky-0914/git-auto-commit">https://github.com/sky-0914/git-auto-commit</a></p><p>00 12 * * * cd &#x2F;home&#x2F;github &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p><p>*&#x2F;5 * * * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p><p>5 5 0&#x2F;3 * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>]]></content>
    
    
    <categories>
      
      <category>奇淫技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建自己的jar包上传至Mvaen中央仓库和版本更新</title>
    <link href="/20210305/387c40526223.html"/>
    <url>/20210305/387c40526223.html</url>
    
    <content type="html"><![CDATA[<h1 id="构建自己的jar包上传至Mvaen中央仓库和版本更新"><a href="#构建自己的jar包上传至Mvaen中央仓库和版本更新" class="headerlink" title="构建自己的jar包上传至Mvaen中央仓库和版本更新"></a>构建自己的jar包上传至Mvaen中央仓库和版本更新</h1><p>一直羡慕别人制造轮子，开源项目，供别人使用；我也想这样，可以自己才疏学浅，本次就将自己写小工具上传到Maven的中央仓库。</p><p>一步一步详细教程演示如下：</p><p><strong>开始要注意这个几个Maven相关地址</strong>：</p><ul><li><strong>工单管理</strong>：<a href="https://issues.sonatype.org/">https://issues.sonatype.org</a></li></ul><blockquote><p>就是申请上传资格和groupId 的地方,注册账号、创建和管理issue，Jar包的发布是以解决issue的方式起步的</p></blockquote><ul><li><strong>构件仓库</strong> : <a href="https://oss.sonatype.org/#welcome">https://oss.sonatype.org/#welcome</a></li></ul><blockquote><p>把jar包上传到这里，Release 之后就会同步到maven中央仓库。</p></blockquote><ul><li><strong>仓库镜像</strong>: <a href="http://search.maven.org/">http://search.maven.org/</a></li></ul><blockquote><p>最终工件可以在这里搜索到。</p></blockquote><h1 id="创建一个新的项目Issue"><a href="#创建一个新的项目Issue" class="headerlink" title="创建一个新的项目Issue"></a>创建一个新的项目Issue</h1><p><strong>第一步：注册工单管理(register sonatype)</strong></p><p>由于<a href="https://maven.apache.org/repository/">Maven 中央仓库</a>是由企业*Sonatype,Inc.*负责运营维护的，因此你需要先前往 <a href="https://issues.sonatype.org/secure/Signup!default.jspa">https://issues.sonatype.org/secure/Signup!default.jspa</a> 注册一个账号（如果你已经有了账号，可以跳过此步骤）。</p><p><strong>第二步：创建工单（nexus)</strong></p><p>点击header 头 “create”按钮创建一个工单，主要用途注册你上传jar包基本信息，主要groupid，通过审核有两个目的：1.防止重复，约束groupid规范，定义grupid最好有所属的域名</p><p>登录了账号之后，你需要新建一个<em>Issue</em>。<em>Issue</em>是问题的意思，相当于你提交了一个工单给 Sonatype 的工作人员，申请开通Maven中央仓库的发布权限。</p><p>点击顶部的<a href="https://issues.sonatype.org/secure/CreateIssue!default.jspa">【新建】</a>按钮，填写申请表单，即可提交申请。</p><p><img src="https://i.loli.net/2020/06/10/NycF6o2IwB9TZi8.png"></p><ul><li>Project URL：项目地址。</li><li>SCM URL ：项目clone的git地址。</li><li>Summary：你的jar包自己起个名字（无要求）。</li><li>Group Id：项目标识。</li></ul><p>【提醒】确group id对应的是域名，推荐使用个人域名。</p><p><strong>注意</strong>：<em>groupId</em> 不能随意填写。</p><ul><li>如果你（或所属机构）拥有自己的域名，可以填写自己的域名。工作人员在审核时，会反馈给你，要求验证域名的所有权，你可以采取如下两种方式之一完成验证：<ol><li>为域名添加一个指向 Issue编号 的TXT记录； </li><li>将域名的访问重定向到你的项目主页地址（<em>Project URL</em>）。</li></ol></li><li>如果你没有自己的域名，你只能使用项目托管方的域名。例如 你的项目在Github ，主页地址为 <a href="https://github.com/username/projectName%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BD%A0%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8">https://github.com/username/projectName，那么你只能使用</a> <em>io.github.username</em> 或 <em>com.github.username</em> 作为<em>groupId</em>。</li></ul><blockquote><p>点击 Create 之后，你就会进入一个 jira 页面(sonatype 使用jira 来追踪每一个项目进度)，与此同时你注册时使用的邮箱中也会收到一封邮件提示你，任务创建成功,正在等待处理。 </p></blockquote><blockquote><p>提交成功后，你需要耐心等待审核。不过，请不用担心，Sonatype工作人员的审核效率是很高的，工作时间范围内，基本上一小时内就会响应。</p></blockquote><blockquote><p>因为我这边用的是自己的域名，所以我需要为域名添加一个一个指向 Issue编号 的TXT记录（也就是你新建这个问题的地址：<a href="https://issues.sonatype.org/browse/OSSRH-58328%EF%BC%89%E3%80%82">https://issues.sonatype.org/browse/OSSRH-58328）。</a></p></blockquote><p>添加TXT记录之后需要回复工作人员</p><p><img src="https://i.loli.net/2020/06/11/bJ6GNO1qpMTV9iA.png"></p><ol><li><p>新建工单之后，工作人员会回复你，需要审核验证你的域名所有权</p><p><img src="https://i.loli.net/2020/06/11/OWrSZCgvmKNnjRc.png"></p></li><li><p>我这边添加完TXT记录之后，回复工作人员</p><p><img src="https://i.loli.net/2020/06/11/8kbcLDwT1nVGdHB.png"></p></li><li><p>工作人员审核验证完之后会回复你，让你可以上传构建你的jar包了，当工单状态变为“已解决”，就可以上传maven项目了</p><p><img src="https://i.loli.net/2020/06/11/9yD17hUrjNpR2P4.png"></p></li></ol><h2 id="gpg-环境安装"><a href="#gpg-环境安装" class="headerlink" title="gpg 环境安装"></a>gpg 环境安装</h2><p><strong>win下载地址</strong>：<a href="https://www.gnupg.org/download/">https://www.gnupg.org/download/</a></p><p><img src="https://i.loli.net/2020/06/09/T5NoarJPWxu6OLy.png"></p><p>安装就下一步下一步…</p><p><strong>Mac 安装</strong>：<code>brew install gpg</code></p><p><strong>win或者mac安装之后在命令行输入：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">gpg 常用命令</span><br>gpg --help #帮助<br>gpg --version #查看版本<br>gpg --list-keys #查看已生成的密钥<br>gpg --delete-key [用户ID] #删除密钥<br>gpg --gen-key #生成密钥对<br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一步：输入用户名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二步：输入邮箱地址</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第三步：输入密码</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">之后就生成好了，可以用gpg --list-keys查看已生成的密钥</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上传公钥到服务器</span><br>gpg --keyserver hkp://pool.sks-keyservers.net --send-keys $&#123;公钥ID&#125; #将公钥发布到 PGP 密钥服务器<br>gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $&#123;公钥ID&#125; #查询公钥是否发布成功<br><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keys.gnupg.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看是否上传成功</span><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys $&#123;公钥ID&#125;<br><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keys.gnupg.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导出密钥对</span><br>gpg --armor --output &quot;输出文件名&quot; --export &quot;用户ID&quot;<br><br>gpg --armor --output C:\Config\gpg\test-public-key.asc --export  &quot;用户ID&quot;<br><br>gpg --armor --output C:\Config\gpg\test-private-key.asc --export-secret-keys<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入密钥</span><br>gpg --import test-public-key.asc #导入公钥<br>gpg --import test-private-key.asc #导入私钥<br></code></pre></td></tr></table></figure><ol><li>输入<code>gpg --gen-key</code>生成密钥对</li><li>将密钥对公钥上传到服务器</li></ol><h2 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h2><p><strong>需要修改的 Maven 配置文件包括：<code>setting.xml</code>（全局级别）与 <code>pom.xml</code>（项目级别）</strong></p><h3 id="setting-xml（全局级别）"><a href="#setting-xml（全局级别）" class="headerlink" title="setting.xml（全局级别）"></a>setting.xml（全局级别）</h3><blockquote><p>这里的username是你一开始注册sonatype账号的username，而不是注册时填写的邮箱。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>ossrh<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用自己注册的 Sonatype 账号的用户名与密码来配置以上 server 信息。</p><p>此处 id <code>ossrh</code> 应和下面 <code>pom.xml</code> 中 snapshotRepository 和 repository 里面的 id 保持一致。</p><h3 id="pom-xml（项目级别）"><a href="#pom-xml（项目级别）" class="headerlink" title="pom.xml（项目级别）"></a>pom.xml（项目级别）</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ali-tools<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://github.com/452425952/ali-tools<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Ali Tools project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">licenses</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">license</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">distribution</span>&gt;</span>repo<span class="hljs-tag">&lt;/<span class="hljs-name">distribution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">license</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">licenses</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="scm软件配置管理"><a href="#scm软件配置管理" class="headerlink" title="scm软件配置管理"></a>scm软件配置管理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">scm</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">connection</span>&gt;</span>https://github.com/452425952/ali-tools.git<span class="hljs-tag">&lt;/<span class="hljs-name">connection</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">developerConnection</span>&gt;</span>https://github.com/452425952/ali-tools.git<span class="hljs-tag">&lt;/<span class="hljs-name">developerConnection</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://github.com/452425952/ali-tools<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">scm</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="开发者信息"><a href="#开发者信息" class="headerlink" title="开发者信息"></a>开发者信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">developers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">developer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sky-0914<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>sky-0914<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>sky-0914@qq.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">roles</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">role</span>&gt;</span>Developer<span class="hljs-tag">&lt;/<span class="hljs-name">role</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">roles</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">timezone</span>&gt;</span>+8<span class="hljs-tag">&lt;/<span class="hljs-name">timezone</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">developer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">developers</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="打包配置-由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc-利用gpg生成到校验-，所以需要在maven中添加以下构建插件"><a href="#打包配置-由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc-利用gpg生成到校验-，所以需要在maven中添加以下构建插件" class="headerlink" title="打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件"></a>打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 打包时跳过测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.18.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 以下都为上传jar默认配置不做修改 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.sonatype.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- autoReleaseAfterClose的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">extensions</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">extensions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">serverId</span>&gt;</span>ossrh<span class="hljs-tag">&lt;/<span class="hljs-name">serverId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">nexusUrl</span>&gt;</span>https://oss.sonatype.org/<span class="hljs-tag">&lt;/<span class="hljs-name">nexusUrl</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">autoReleaseAfterClose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">autoReleaseAfterClose</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-release-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">autoVersionSubmodules</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">autoVersionSubmodules</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">useReleaseProfile</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">useReleaseProfile</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">releaseProfiles</span>&gt;</span>release<span class="hljs-tag">&lt;/<span class="hljs-name">releaseProfiles</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>deploy<span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>sign-artifacts<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>verify<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>sign<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar-no-fork<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-javadocs<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- JDK8必须使用下面的配置 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">additionalparam</span>&gt;</span>-Xdoclint:none<span class="hljs-tag">&lt;/<span class="hljs-name">additionalparam</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="上传打包文件配置"><a href="#上传打包文件配置" class="headerlink" title="上传打包文件配置"></a>上传打包文件配置</h4><blockquote><p>这里的id需要和setting.xml中的 server 标签中的id对应</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>ossrh<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>ossrh<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="发布操作"><a href="#发布操作" class="headerlink" title="发布操作"></a>发布操作</h2><blockquote><p>执行以下命令进行发布（如果 pom.xml 中 autoReleaseAfterClose 的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了，否则我们继续查看第2步）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean deploy -X # -X可以查看详细信息<br></code></pre></td></tr></table></figure><p><strong>打包过程遇到问题：</strong></p><ol><li>javadoc格式错误，需要将错误问题解决。</li><li>failureMessage  No public key，这个是gpg秘钥没有上传成功导致，我在实际操作时，明明上传成功，但是还是这样提示，只能多打包几次就可以了，不知道什么原因。解决方法: 如果你知道哪个密钥服务器会被查询，你可以直接在那里上传你的密钥。</li><li>实验过程中我的实际执行结果是（注意可能会超时，多试几次就好）</li></ol><p><strong>登录<a href="https://oss.sonatype.org,然后选择staging/">https://oss.sonatype.org，然后选择staging</a> Repositories</strong></p><p><img src="https://i.loli.net/2020/06/11/Ggdz5nprUNHfjJT.png"></p><p><strong>如果在pom文件中的 autoReleaseAfterClose的值没有设置的话，需要手动发布的组件，依次执行Close、Release操作</strong></p><p><img src="https://i.loli.net/2020/06/11/xDv8NKnGCl9HQXy.png"></p><p><strong>如果Release成功，并且你是首次发布组件，则需要到你创建到issue中回复 “我已经成功发布该组件”，经历大概2小时后，该组件将会同步到对应的maven仓库 。</strong></p><p><img src="https://i.loli.net/2020/06/11/X8nVBHkuAaxfspq.png"></p><p><strong>如果Close或者Release不成功，你可以如下图操作查看原因并谷歌定位，或者回复咨询</strong></p><p><img src="https://i.loli.net/2020/06/11/dY13vnJi4oeNUOr.png"></p><h3 id="查找开源库"><a href="#查找开源库" class="headerlink" title="查找开源库"></a>查找开源库</h3><p>注意开源库发布出去之后，还是需要等待一段时间，才能在这里 <a href="https://search.maven.org/">https://search.maven.org/</a>  查找我们的开源库，以及查看如何依赖自己的开源库。</p><p><img src="https://i.loli.net/2020/06/11/H6F5ywXisr8VAlj.png"></p><h1 id="后续发布到中央仓库"><a href="#后续发布到中央仓库" class="headerlink" title="后续发布到中央仓库"></a>后续发布到中央仓库</h1><p>首次发布都是比较痛苦的，我们首次进行发布，实际上遇到很多问题，而且还要Sonatype进行验证。第一次总是比较麻烦的，所谓万事开通难拿，接下来后续的发布动作，其实并没有那么麻烦了</p><p>发布命令和原来的一样；如果是和第一次发布在同一台电脑（并且没有重装过了，gpg密钥对还在），那么直接执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean deploy -X<br></code></pre></td></tr></table></figure><p>如果换电脑发布了，那么就需要将原来的gpg密钥对（公钥和私钥）导出来保存之后，重新导入到新电脑上（上述内容介绍了gpg常用命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">导出密钥对</span><br>gpg --armor --output &quot;输出文件名&quot; --export &quot;用户ID&quot;<br><br>gpg --armor --output C:\Config\gpg\test-public-key.asc --export  &quot;用户ID&quot;<br><br>gpg --armor --output C:\Config\gpg\test-private-key.asc --export-secret-keys<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入</span><br>gpg --import test-public-key.asc #导入公钥<br>gpg --import test-private-key.asc #导入私钥<br></code></pre></td></tr></table></figure><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1">https://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1</a></p><p><a href="http://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/">http://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/</a></p><p>gpg密钥对过期解决方案：<a href="http://blog.didispace.com/maven-gpg-expire/">http://blog.didispace.com/maven-gpg-expire/</a></p><h1 id="gpg-signing-failed-Inappropriate-ioctl-for-device"><a href="#gpg-signing-failed-Inappropriate-ioctl-for-device" class="headerlink" title="gpg: signing failed: Inappropriate ioctl for device"></a>gpg: signing failed: Inappropriate ioctl for device</h1><p>最近上传jar到中央仓库的时候，遇到一个问题：</p><blockquote><p>gpg: signing failed: Inappropriate ioctl for device</p></blockquote><p>原因是 gpg 在当前终端无法弹出密码输入页面。</p><p>解决办法很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GPG_TTY=$(<span class="hljs-built_in">tty</span>)<br></code></pre></td></tr></table></figure><p>重新执行，发现会弹出一个密码输入界面。</p><h1 id="Mac打maven包——gpg-签名时失败"><a href="#Mac打maven包——gpg-签名时失败" class="headerlink" title="Mac打maven包——gpg: 签名时失败"></a>Mac打maven包——gpg: 签名时失败</h1><p>gpg: signing failed: Inappropriate ioctl for device<br>原因是GPG版本是最新版本，需要在.gnupg文件夹下增加两个配置，<br>mac下在~&#x2F;.gnupg这两个文件夹下修改<br>gpg.conf和gpg-agent.conf两个文件，<br>在gpg-agent.conf中新建一行添加</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">allow</span>-loopback-pinentry<br></code></pre></td></tr></table></figure><p>在gpg.conf添加</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span>-agent <br>pinentry-mode loopback <br></code></pre></td></tr></table></figure><p>保存就可以OK了。</p>]]></content>
    
    
    <categories>
      
      <category>奇淫技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【环境安装】Logstash安装</title>
    <link href="/20210301/93e01d4fe8ee.html"/>
    <url>/20210301/93e01d4fe8ee.html</url>
    
    <content type="html"><![CDATA[<h1 id="Logstash安装"><a href="#Logstash安装" class="headerlink" title="Logstash安装"></a>Logstash安装</h1><p><strong>Logstash官方下载地址：<a href="https://www.elastic.co/cn/logstash">https://www.elastic.co/cn/logstash</a></strong></p><blockquote><p>下载同ES相同的版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压安装包</span><br>tar -zxvf logstash-7.7.1.tar.gz<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Logstash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【环境安装】CerebroKibana7ES</title>
    <link href="/20210225/fa01ac8e46ec.html"/>
    <url>/20210225/fa01ac8e46ec.html</url>
    
    <content type="html"><![CDATA[<h1 id="Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES"><a href="#Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES" class="headerlink" title="Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES"></a>Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2.2&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">cerebro:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">lmenezes/cerebro:0.8.3</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">cerebro</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9000:9000&quot;</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">-Dhosts.0.host=http://elasticsearch:9200</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">es7net</span><br>  <span class="hljs-attr">kibana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/kibana/kibana:7.1.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">kibana7</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">I18N_LOCALE=zh-CN</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">XPACK_GRAPH_ENABLED=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TIMELION_ENABLED=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">XPACK_MONITORING_COLLECTION_ENABLED=&quot;true&quot;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5601:5601&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">es7net</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">es7_01</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cluster.name=test1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">node.name=es7_01</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bootstrap.memory_lock=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class="hljs-attr">ulimits:</span><br>      <span class="hljs-attr">memlock:</span><br>        <span class="hljs-attr">soft:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-attr">hard:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">es7data1:/usr/share/elasticsearch/data</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">9200</span><span class="hljs-string">:9200</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">es7net</span><br>  <span class="hljs-attr">elasticsearch2:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">es7_02</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cluster.name=geektime</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">node.name=es7_02</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bootstrap.memory_lock=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class="hljs-attr">ulimits:</span><br>      <span class="hljs-attr">memlock:</span><br>        <span class="hljs-attr">soft:</span> <span class="hljs-number">-1</span><br>        <span class="hljs-attr">hard:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">es7data2:/usr/share/elasticsearch/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">es7net</span><br><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">es7data1:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">local</span><br>  <span class="hljs-attr">es7data2:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">local</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">es7net:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
      <tag>ES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【环境安装】ElasticSearch安装</title>
    <link href="/20210221/af1a2a9fd5c4.html"/>
    <url>/20210221/af1a2a9fd5c4.html</url>
    
    <content type="html"><![CDATA[<h1 id="【环境安装】ElasticSearch安装"><a href="#【环境安装】ElasticSearch安装" class="headerlink" title="【环境安装】ElasticSearch安装"></a>【环境安装】ElasticSearch安装</h1><p><strong>ElasticSearch官方下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压安装包</span><br>tar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser es #创建ES用户<br>chown -R es $&#123;es解压所在目录&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换用户</span><br>su es<br></code></pre></td></tr></table></figure><p>如需下载其他版本的点击这里：</p><p><img src="https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png"></p><p>选择所需要下载的版本</p><p><img src="https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png"></p><h2 id="ElasticSearch文件目录"><a href="#ElasticSearch文件目录" class="headerlink" title="ElasticSearch文件目录"></a>ElasticSearch文件目录</h2><table><thead><tr><th>目录</th><th>配置文件</th><th>描述</th></tr></thead><tbody><tr><td>bin</td><td></td><td>脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等</td></tr><tr><td>config</td><td>elasticsearch.yml</td><td>集群配置文件，user，role based相关配置</td></tr><tr><td>JDK</td><td></td><td>Java运行环境</td></tr><tr><td>data</td><td>path.data</td><td>数据文件</td></tr><tr><td>lib</td><td></td><td>Java类库</td></tr><tr><td>logs</td><td>path.log</td><td>日志文件</td></tr><tr><td>modules</td><td></td><td>包含所有ES模块</td></tr><tr><td>plugins</td><td></td><td>包含所有已安装插件</td></tr></tbody></table><h2 id="JVM-配置"><a href="#JVM-配置" class="headerlink" title="JVM 配置"></a>JVM 配置</h2><ul><li>修改JVM - config&#x2F;jvm.options<ul><li>7.1 下载默认设置是 1 GB</li></ul></li><li>配置的建议<ul><li>Xms和Xmx设置成一样大</li><li>Xmx不要超过机器内存的30%</li><li>不要超过30GB</li></ul></li></ul><h2 id="ElasticSearch插件"><a href="#ElasticSearch插件" class="headerlink" title="ElasticSearch插件"></a>ElasticSearch插件</h2><p>在命令行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装插件</span><br>bin/elasticsearch-plugin install analysis-icu<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看插件</span><br>bin/elasticsearch-plugin list<br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过URL请求查看安装的插件</span><br>GET http://localhost:9200/_cat/plugins?v<br></code></pre></td></tr></table></figure><h2 id="ElasticSearch启动"><a href="#ElasticSearch启动" class="headerlink" title="ElasticSearch启动"></a>ElasticSearch启动</h2><p>单实例启动</p><p>配置elasticsearch.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-nodes</span> <span class="hljs-comment">#集群名称</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span> <span class="hljs-comment">#节点名称</span><br><span class="hljs-attr">path.data:</span> <span class="hljs-string">/opt/elasticsearch-7.6.2/data</span> <span class="hljs-comment">#数据</span><br><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/opt/elasticsearch-7.6.2/logs</span> <span class="hljs-comment">#日志</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> <span class="hljs-comment">#ip访问限制</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;192.168.1.70&quot;</span>] <span class="hljs-comment">#主机Host列表</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>] <span class="hljs-comment">#节点名，单机版只有一个</span><br><span class="hljs-attr">geteway.recover_after_nodes:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#需要被发现的节点数</span><br></code></pre></td></tr></table></figure><p>跨域访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容</span><br>http.cors.enabled: true <br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure><p>利用AJAX跨域修改数据的方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> baseUrl = <span class="hljs-string">&#x27;http://localhost:9200/&#x27;</span>,<br>    putUrl = baseUrl + <span class="hljs-string">&#x27;events/logon_event/2&#x27;</span>,<br>    datas = &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;郭富城&quot;</span>,<br>        <span class="hljs-string">&quot;occur_time&quot;</span>: <span class="hljs-string">&quot;2015-05-09&quot;</span>,<br>        <span class="hljs-string">&quot;enabled&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-string">&quot;times&quot;</span>: <span class="hljs-number">22</span><br>    &#125;;<br><span class="hljs-comment">//  提交数据内容</span><br>$.<span class="hljs-title function_">ajax</span>(putUrl, &#123;<br>    type : <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-comment">//  一定要设置contentType，以payload方式提交</span><br>    <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>    <span class="hljs-comment">//  数据一定转换为字符串</span><br>    data : <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(datas),<br>    success : <span class="hljs-keyword">function</span>(<span class="hljs-params">datas</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(datas)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>现在就可以用javascript来制造数据了。</p><p><strong>结论：</strong>ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。</p><p>配置好后启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/elasticsearch<br></code></pre></td></tr></table></figure><p>多实例启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">node.name ：节点名称</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">cluster.name ：集群名称</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">path.data：es数据存储目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">network.host：监听IP，默认127.0.0.1，只允许本地连接</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http.port：端口，默认是9200，9201，9202三个端口</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必</span><br>./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d <br>./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br>./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br></code></pre></td></tr></table></figure><p>启动完成后打开地址：<a href="http://ip:port">http://ip:port</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node02&quot;</span><span class="hljs-punctuation">,</span><br>cluster_name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Practice&quot;</span><span class="hljs-punctuation">,</span><br>cluster_uuid<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PqERjAFRSvqVloFf1jiqPw&quot;</span><span class="hljs-punctuation">,</span><br>version<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>number<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7.6.2&quot;</span><span class="hljs-punctuation">,</span><br>build_flavor<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>build_type<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tar&quot;</span><span class="hljs-punctuation">,</span><br>build_hash<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span><span class="hljs-punctuation">,</span><br>build_date<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-03-26T06:34:37.794943Z&quot;</span><span class="hljs-punctuation">,</span><br>build_snapshot<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>lucene_version<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8.4.0&quot;</span><span class="hljs-punctuation">,</span><br>minimum_wire_compatibility_version<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.8.0&quot;</span><span class="hljs-punctuation">,</span><br>minimum_index_compatibility_version<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>tagline<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;You Know, for Search&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><a href="http://ip:port">http://ip:port</a></p><h2 id="cat"><a href="#cat" class="headerlink" title="_cat"></a>_cat</h2><p>Elasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。</p><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="_cat命令"></a>_cat命令</h3><p>通过使用_cat可以查看支持的命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ curl localhost:<span class="hljs-number">9200</span>/_cat<br>=^.^=<br><span class="hljs-regexp">/_cat/</span>allocation<br><span class="hljs-regexp">/_cat/</span>shards<br><span class="hljs-regexp">/_cat/</span>shards/&#123;index&#125;<br><span class="hljs-regexp">/_cat/m</span>aster<br><span class="hljs-regexp">/_cat/</span>nodes<br><span class="hljs-regexp">/_cat/i</span>ndices<br><span class="hljs-regexp">/_cat/i</span>ndices/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>segments<br><span class="hljs-regexp">/_cat/</span>segments/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">count</span><br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">count</span>/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>recovery<br><span class="hljs-regexp">/_cat/</span>recovery/&#123;index&#125;<br><span class="hljs-regexp">/_cat/</span>health<br><span class="hljs-regexp">/_cat/</span>pending_tasks<br><span class="hljs-regexp">/_cat/</span>aliases<br><span class="hljs-regexp">/_cat/</span>aliases/&#123;alias&#125;<br><span class="hljs-regexp">/_cat/</span>thread_pool<br><span class="hljs-regexp">/_cat/</span>plugins<br><span class="hljs-regexp">/_cat/</span>fielddata<br><span class="hljs-regexp">/_cat/</span>fielddata/&#123;fields&#125;<br><span class="hljs-regexp">/_cat/</span>nodeattrs<br><span class="hljs-regexp">/_cat/</span><span class="hljs-keyword">repositories</span><br><span class="hljs-regexp">/_cat/</span>snapshots/&#123;repository&#125;<br></code></pre></td></tr></table></figure><h3 id="verbose"><a href="#verbose" class="headerlink" title="verbose"></a>verbose</h3><p>每个命令都支持使用?v参数，来显示详细的信息：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ curl localhost:<span class="hljs-number">9200</span>/_cat/<span class="hljs-literal">master</span>?v<br>id                     host      ip        <span class="hljs-keyword">node</span><br><span class="hljs-title">QG6QrX32QSi8C3-xQmrSoA</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><p>每个命令都支持使用help参数，来输出可以显示的列：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ curl localhost:<span class="hljs-number">9200</span>/_cat/<span class="hljs-literal">master</span>?help<br>id   |   | <span class="hljs-keyword">node</span> <span class="hljs-title">id</span><br>host | h | host name<br>ip   |   | ip address<br><span class="hljs-keyword">node</span> <span class="hljs-title">| n</span> | <span class="hljs-keyword">node</span> <span class="hljs-title">name</span><br></code></pre></td></tr></table></figure><h3 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><p>通过h参数，可以指定输出的字段：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ curl localhost:<span class="hljs-number">9200</span>/_cat/<span class="hljs-literal">master</span>?v<br>id                     host      ip        <span class="hljs-keyword">node</span><br><span class="hljs-title">QG6QrX32QSi8C3-xQmrSoA</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> Manslaughter<br><br>$ curl localhost:<span class="hljs-number">9200</span>/_cat/<span class="hljs-literal">master</span>?h=host,ip,<span class="hljs-keyword">node</span><br><span class="hljs-title">127</span>.<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure><h3 id="数字类型的格式化"><a href="#数字类型的格式化" class="headerlink" title="数字类型的格式化"></a>数字类型的格式化</h3><p>很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$ curl localhost:<span class="hljs-number">9200</span>/_cat/indices?v<br>health <span class="hljs-keyword">status</span> <span class="hljs-built_in">index</span> pri rep docs.<span class="hljs-built_in">count</span> docs.deleted store.<span class="hljs-built_in">size</span> pri.store.<span class="hljs-built_in">size</span><br>yellow open   test    <span class="hljs-number">5</span>   <span class="hljs-number">1</span>          <span class="hljs-number">3</span>            <span class="hljs-number">0</span>      <span class="hljs-number">9.</span>kb          <span class="hljs-number">9.</span>kb<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
      <tag>ES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringCloud】Eueka注册中心</title>
    <link href="/20210209/be7f567224e1.html"/>
    <url>/20210209/be7f567224e1.html</url>
    
    <content type="html"><![CDATA[<h1 id="【SpringCloud】Eueka注册中心"><a href="#【SpringCloud】Eueka注册中心" class="headerlink" title="【SpringCloud】Eueka注册中心"></a>【SpringCloud】Eueka注册中心</h1><h2 id="客户端启动时如何注册到服务端"><a href="#客户端启动时如何注册到服务端" class="headerlink" title="客户端启动时如何注册到服务端"></a>客户端启动时如何注册到服务端</h2><p>Eureka客户端在启动时，首先会创建一个心跳的定时任务，定时向服务端发送心跳信息，服务端会对客户端心跳做出响应，如果响应状态码为404时，表示服务端没有该客户端的服务信息，那么客户端则会向服务端发送注册请求，注册信息包括服务名、ip、端口、唯一实例ID等信息。</p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Eueka</tag>
      
      <tag>注册中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS</title>
    <link href="/20210208/0559ae4aad3c.html"/>
    <url>/20210208/0559ae4aad3c.html</url>
    
    <content type="html"><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><p><strong>compare and swap&#x2F;comparen and exchange (比较并交换)</strong></p><p><img src="https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png"></p><p><img src="https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png"></p><p><strong>注意ABA问题：</strong></p><p>a&#x3D;0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作&#x3D;0，线程二又写回到a，此时a又&#x3D;0；当线程一执行写回的时候去判断a是不是等于原来的值0。</p><p>但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？</p><p>那么如何解决这个问题呢？</p><p>CAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。</p><p><strong>举例说明：</strong></p><p>JDK里提供的原子类在这个包下<code>java.util.concurrent.atomic</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Integer原子类</span><br><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>i.incrementAndGet();<br><br><span class="hljs-comment">//源码</span><br><span class="hljs-comment">//Atomically increments by one the current value. 将当前值原子地加1。</span><br><span class="hljs-comment">//Returns:the updated value 返回:更新后的值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">incrementAndGet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> unsafe.getAndAddInt(<span class="hljs-built_in">this</span>, valueOffset, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。</span><br><span class="hljs-comment">//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。</span><br><span class="hljs-comment">//Unsafe类是&quot;final&quot;的，不允许继承。且构造函数是private的:</span><br><span class="hljs-comment">//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe</span><br><span class="hljs-keyword">public</span> Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">unsafeField</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredFields()[<span class="hljs-number">0</span>];<br>    unsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) unsafeField.get(<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> unsafe;<br>&#125;<br><span class="hljs-comment">//Java中的Unsafe类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4)</span> &#123;<br>    <span class="hljs-type">int</span> var5;<br>    <span class="hljs-keyword">do</span> &#123;<br>        var5 = <span class="hljs-built_in">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class="hljs-keyword">return</span> var5;<br>&#125;<br><span class="hljs-comment">//native C++方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSwapInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4, <span class="hljs-type">int</span> var5)</span>;<br><span class="hljs-comment">//汇编指令，硬件直接支持 lock cmpxchg</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Synchronized锁升级过程</title>
    <link href="/20210208/a768595c9778.html"/>
    <url>/20210208/a768595c9778.html</url>
    
    <content type="html"><![CDATA[<h1 id="Synchronized锁升级过程"><a href="#Synchronized锁升级过程" class="headerlink" title="Synchronized锁升级过程"></a>Synchronized锁升级过程</h1><p><img src="https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png"></p><h2 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h2><p>表示刚刚new出来的对象</p><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h2><p>此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程</p><h2 id="轻量级锁（自旋锁、自适应锁、CAS）"><a href="#轻量级锁（自旋锁、自适应锁、CAS）" class="headerlink" title="轻量级锁（自旋锁、自适应锁、CAS）"></a>轻量级锁（自旋锁、自适应锁、CAS）</h2><p>这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。</p><p>JDK1.6中-XX:+UseSpinning开启；<br>-XX:PreBlockSpin&#x3D;10 为自旋次数；<br>JDK1.7后，去掉此参数，由jvm自动控制；</p><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h2><p>向硬件级别CPU去申请锁资源</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锁</tag>
      
      <tag>Synchronized</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【环境安装】Docker安装</title>
    <link href="/20210115/690e8aa4a988.html"/>
    <url>/20210115/690e8aa4a988.html</url>
    
    <content type="html"><![CDATA[<h1 id="【环境安装】Docker安装"><a href="#【环境安装】Docker安装" class="headerlink" title="【环境安装】Docker安装"></a>【环境安装】Docker安装</h1><h2 id="CentoOS-7"><a href="#CentoOS-7" class="headerlink" title="CentoOS-7"></a>CentoOS-7</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤:"></a>安装步骤:</h3><p><strong>1、卸载已经安装的Docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum remove docker \<br>          docker-client \<br>          docker-client-latest \<br>          docker-common \<br>          docker-latest \<br>          docker-latest-logrotate \<br>          docker-logrotate \<br>          docker-selinux \<br>          docker-engine-selinux \<br>          docker-engine<br></code></pre></td></tr></table></figure><p><strong>2、配置阿里云yum源仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令</span><br></code></pre></td></tr></table></figure><p><strong>3、查看可以安装的docker版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序<br></code></pre></td></tr></table></figure><p><strong>4、安装最新版本Docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装<br></code></pre></td></tr></table></figure><p><strong>5、设Docker阿里云加速器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://lkq3q0he.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p><strong>6、启动Docker</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl daemon-reload #重新加载服务配置文件<br><br>sudo systemctl enable docker.service &amp;&amp; systemctl restart docker.service   #设置开机启动与重启docker服务<br></code></pre></td></tr></table></figure><p><strong>7、查看Docker版本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">~#</span><span class="language-bash">docker version</span><br>Client: Docker Engine - Community<br> Version:           19.03.8<br> API version:       1.40<br> Go version:        go1.12.17<br> Git commit:        afacb8b<br> Built:             Wed Mar 11 01:27:04 2020<br> OS/Arch:           linux/amd64<br> Experimental:      false<br>...........<br><span class="hljs-meta prompt_">~#</span><span class="language-bash">docker info</span><br>Client:<br> Debug Mode: false<br><br>Server:<br> Containers: 0<br>  Running: 0<br>  Paused: 0<br>  Stopped: 0<br> Images: 0<br> Server Version: 19.03.8<br> Storage Driver: overlay2<br>  Backing Filesystem: &lt;unknown&gt;<br>  Supports d_type: true<br>  Native Overlay Diff: true<br> Logging Driver: json-file<br> Cgroup Driver: cgroupfs<br></code></pre></td></tr></table></figure><h2 id="Ubuntu-18"><a href="#Ubuntu-18" class="headerlink" title="Ubuntu-18"></a>Ubuntu-18</h2><p><strong>1. docker安装</strong></p><ul><li>卸载旧版本docker</li><li>全新安装时，无需执行该步骤</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get remove --purge docker docker-engine docker.io</span><br></code></pre></td></tr></table></figure><ul><li>安装依赖包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></code></pre></td></tr></table></figure><ul><li>添加官方密钥</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></code></pre></td></tr></table></figure><p>显示OK,表示添加成功</p><ul><li>使用下面的命令来设置stable存储库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo add-apt-repository <span class="hljs-string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></code></pre></td></tr></table></figure><ul><li>更新一下apt包索引</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br></code></pre></td></tr></table></figure><ul><li>列出可用的版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">apt-cache madison docker-ce</span><br></code></pre></td></tr></table></figure><ul><li>选择你需要的版本安装，我选择的是适合rancher的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu</span><br></code></pre></td></tr></table></figure><h2 id="为Docker替换阿里镜像源"><a href="#为Docker替换阿里镜像源" class="headerlink" title="为Docker替换阿里镜像源"></a>为Docker替换阿里镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://t44588bn.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PMP概念</title>
    <link href="/20201203/37292c3e6a70.html"/>
    <url>/20201203/37292c3e6a70.html</url>
    
    <content type="html"><![CDATA[<p>商业文件：商业论证和效益管理计划，可以找到关于项目目标以及项目对业务目标的贡献的相关信息</p><blockquote><p>商业论证：经批准的商业论证或类似文件是最常用语指定项目章程的商业文件</p><p>效益成本分析：是项目启动时考虑项目是否值得做的分析方法</p></blockquote><p>效益管理计划：</p><blockquote><p>项目效益管理计划描述了项目实现效益的方式和时间，以及应制定的效益衡量机制。项目效益指为发起组织和项目预期受益方创造价值的行动、行为、产品、服务或成果的结果。项目生命周期早期应确定目标效益，并据此制定效益管理计划。它描述了效益的关键要素，可能包括（但不限于）记录以下内容：</p><ul><li>目标效益（例如预计通过项目实施可以创造的有形价值和无形价值；财务价值体现为净现值）；</li><li>战略一致性（例如项目效益与组织业务战略的一致程度）；</li><li>实现效益的时限（例如阶段效益、短期效益、长期效益和持续效益）；</li><li>效益责任人（例如在计划确定的整个时限内负责监督、记录和报告已实现效益的负责人）；</li><li>测量指标（例如用于显示已实现效益的直接测量值和间接测量值）；</li><li>假设（例如预计存在或显而易见的因素）；</li><li>风险（例如实现效益的风险）。</li><li>制定效益管理计划需要使用商业论证和需求评估中的数据和信息，例如，成本效益分析数据。</li></ul><p>在成本效益分析中已经把成本估算与项目拟实现的效益进行了比较。效益管理计划和项目管理计划描述了项目创造的商业价值如何能够成为组织持续运营的一部分，包括使用的测量指标。测量指标可核实商业价值并确认项目成功与否。</p></blockquote><p>回收期（PBT）： 投资额&#x2F;现金流</p><p>平均回报率（ROI）：年利润或年均利润&#x2F;投资总额</p><p>项目信息管理系统：收集整合和传播项目管理过程成果的工具和技术所组成的信息系统</p><p>可交付成果：在某一过程、阶段或项目完成时，必须铲除的任何独特并可合适的产品、成果或服务能力</p><ul><li><p>绩效数据：</p><blockquote><p>今天干的什么事；我完成了3个工作，这是工作绩效数据。</p></blockquote></li><li><p>绩效信息：</p><blockquote><p>将干的事和计划干的事比较产生的信息；这个数据与计划比较，当前应该完成5个，只完成了3个，说明进度落后了，这是工作绩效信息。</p></blockquote></li><li><p>绩效报告：</p><blockquote><p>汇总各种信息报告；每周写汇总各种继续信息，写周报，这叫工作绩效报告</p></blockquote></li></ul><h2 id="项目管理计划"><a href="#项目管理计划" class="headerlink" title="项目管理计划"></a>项目管理计划</h2><blockquote><p>说明项目将如何进行、监督和控制的一份文件。合并整合了其他各个规划过程所输出的所有子管理计划和基准</p><p>基准：是工作产品经过批准的版本，只有通过正式的变更控制程序才能对其进行变更，用作比较的依据</p><blockquote><p>作用：作为比较的基础，据此考核项目执行情况好坏</p><p>本质：是特殊版本的项目计划</p><p>批准：经高级管理和主要相关方批准</p></blockquote></blockquote><ul><li><p>范围管理计划</p><blockquote><p>描述定义、指定、监督、控制和确认范围</p><ol><li>指定项目范围说明书</li><li>根据详细项目范围说明书创建WBS</li><li>确定如何审批和维护范围基准</li><li>正式验收已完成的项目可交付成果</li></ol></blockquote></li><li><p>需求管理计划（商业分析计划）</p><blockquote><p>如何分析、记录和管理项目和产品需求</p><ol><li>如何规划、跟踪和报告各种需求活动</li><li>配置管理活动</li><li>需求优先级排序过程</li><li>测量指标及使用这些指标的理由</li><li>反应哪些需求属性将被列入跟踪矩阵的跟踪结构</li></ol></blockquote></li><li><p>进度管理计划</p><blockquote><p>管理计划组成部分；编制、监督和控制项目进度简历准则和明确活动</p></blockquote></li><li><p>成本管理计划</p><blockquote><p>如何规划、安排和控制项目成本</p></blockquote></li><li><p>质量管理计划</p><blockquote><p>描述如何实施适用的政策、程序和指南以实现质量目标；描述了醒目管理团队为实现一系列项目质量目标所需的活动和资源；项目采用的质量标准</p></blockquote></li><li><p>资源管理计划</p><blockquote><p>如何分类、分配、管理和释放项目资源指南，为团队管理计划和实物资源管理计划</p></blockquote></li><li><p>沟通管理计划</p><blockquote><p>如何规划、结构化、执行与监督项目沟通，提高沟通的有效性</p><p>内容：</p><ul><li>相关方沟通需求</li><li>需沟通的信息，语言、形式、内容和详细程度</li><li>上报步骤（问题升级程序）</li><li>发布信息的原因</li><li>通用术语表</li><li>发布所需信息、确认已收到，或作出回应（若适用）的时限和频率</li><li>负责沟通相关信息的人员</li><li>负责授权保密信息发布的人员</li><li>接收信息的人员或群体，他们需要、需求和期望</li><li>传递信息的方法或技术，如备忘录、电子邮件、新闻稿、或社交媒体</li><li>为沟通活动分配的资源，时间和预算</li><li>随着项目进展，项目不同阶段相关方的变化，而更新与优化沟通管理计划的方法</li><li>项目信息流向图、工作流程（包含审批程序）、报告清单和会议计划等</li><li>法律法规、技术、组织政策等制约因素</li></ul></blockquote></li><li><p>风险管理计划</p><blockquote><p>如何安排与实施风险管理活动</p><p>内容：</p><ul><li>风险管理战略</li><li>方法论</li><li>角色职责</li><li>资金</li><li>时间安排</li><li>风险类型</li><li>风险结构</li><li>相关方风险偏好</li><li>概率和影响的定义</li><li>概率影响矩阵</li><li>报告格式</li><li>跟踪</li></ul></blockquote></li><li><p>采购管理计划</p></li><li><p>相关方参与计划</p><blockquote><p>用于促进相关方有效参与决策和执行的策略行动；调动个人或相关方参与的特定策略或方法</p></blockquote></li><li><p>变更管理计划</p><blockquote><p>描述在整个项目期间如何正视审批和采纳变更请求</p></blockquote></li><li><p>配置管理计划</p><blockquote><p>描述如何记录和更新项目的特定信息，以及该记录和更新哪些信息以保持产品、服务或成果的一致性和有效性</p></blockquote></li><li><p>项目生命周期</p><blockquote><p>描述项目从开始到结束所经历的一些列阶段</p></blockquote></li><li><p>开发方法</p><blockquote><p>描述产品、服务或成果的开发方法，例如：预测、迭代、敏捷或混合型模式</p></blockquote></li><li><p>管理审查</p><blockquote><p>确定项目经理和有关相关方审查项目进展的时间点，以考核绩效是否符合预期，或者确定是否有必要采取预防或纠正措施</p></blockquote></li><li><p>绩效测量基准</p><blockquote><p>经过整合的项目范围、进度和成本计划，用作项目执行的比较依据，以测量和管理项目绩效</p></blockquote></li><li><p>范围基准</p><blockquote><p>经过批准的范围说明书、WBS和响应的WBS词典，只有通过正式的变更控制程序才能进行变更，它被用作比较的基础</p></blockquote><ul><li><p>项目范围说明书</p><blockquote><p>主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任</p></blockquote></li><li><p>WBS</p><blockquote><p>控制账户&#x3D;&#x3D;&#x3D;》规划包&#x3D;&#x3D;&#x3D;》工作包</p></blockquote></li><li><p>WBS词典</p><blockquote><p>针对每个WBS组件，详细描述可交付成果、活动和进度信息的文件；WBS词典对WBS提供支持</p><p>内容：</p><blockquote><p>账户编码标志号</p><p>工作描述</p><p>负责的组织</p><p>进度里程碑</p><p>相关的进度活动</p><p>所需的资源</p><p>成本估算</p><p>验收标准</p><p>技术参考文件</p><p>协议信息</p></blockquote></blockquote></li></ul></li><li><p>进度基准</p><blockquote><p>是经过批准的进度模型，只有通过正式的变更控制程序才能进行变更，用作与实际结果进行比较的依据</p><p>三种表现形式：</p><blockquote><p>横道图：概括性进度计划</p><blockquote><p>标明活动的开始于结束日期，显示出活动的预期持续时间；相对易读，常用语向管理层会报情况</p></blockquote><p>里程碑图：里程碑进度计划</p><blockquote><p>仅标示出主要可交付成果和关键外部接口的计划开始或完成日期；可以和管理层和项目管理团队沟通，一般在项目早起只有里程碑图</p></blockquote><p>项目进度网络图：详细进度计划</p><blockquote><p>显示项目的网络逻辑，又显示项目关键路径的进度活动。纯逻辑图+逻辑横道图+时标逻辑图</p></blockquote></blockquote></blockquote></li><li><p>成本基准</p></li></ul><h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><blockquote><p>会影响项目管理工作，但又不属于项目管理计划的其他文件</p><p>项目管理计划主要是规划过程组的输出，而五大过程组的输出中都有项目文件</p><p>项目管理49个过程的输出除少数非文件类成果以及属于项目管理计划的内容外，都是项目文件的组成部分</p></blockquote><ul><li><p>活动属性</p><blockquote><p>每项活动具有的多重属性，扩充对活动的描述；活动属性随时间演进，不断更新和补充</p></blockquote></li><li><p>活动清单</p><blockquote><p>包含项目所需的全部进度活动综合清单；每个活动的标识及工作范围详述，是项目团队成员知道需要完成什么样的工作；活动都有独特的名称</p></blockquote></li><li><p>假设日志</p><blockquote><p>记录整个项目生命周期中的所有假设条件和制约因素</p></blockquote></li><li><p>估算依据</p><blockquote><p>指出了持续时间、成本和资源估算是如何得出的，可用于计算变更时间。预算和资源的映像</p></blockquote></li><li><p>变更日志</p><blockquote><p>记录项目过程中出现的变更。与相关方的相关方沟通这些变更及其对项目时间、成本和风险影响</p></blockquote></li><li><p>成本估算</p></li><li><p>成本预测</p></li><li><p>持续时间估算</p></li><li><p>问题日志</p><blockquote><p>整个项目生命周期中，通过会遇到问题、差距、不一致或意外冲突，需要采取某些行动加以处理，确保他们得到调查和解决，以免影响项目绩效</p></blockquote></li><li><p>经验教训登记册</p><blockquote><p>记录项目中所获得知识的项目文件，用于当前项目，并列入经验教训知识库</p></blockquote></li><li><p>里程碑清单</p><blockquote><p>也是活动，不占时间和资源；列出所有项目里程碑；指明每个里程碑是强制还是选择性的</p></blockquote></li><li><p>项目日志</p></li><li><p>项目沟通记录</p></li><li><p>项目进度计划</p><blockquote><p>项目进度计划是进度模型的输出，展示活动之间的相互关联，以及计划日志、持续时间、里程碑和所需资源</p><p>三种表现形式：</p><blockquote><p>横道图：标明活动开始与结束日志，显示出活动预期持续时间；用于向管理层汇报情况</p><p>里程碑图：仅标示出只要可交付成果和关进外部接口的计划开始或完成日期；和管理层和项目管理团队沟通，一般项目早期只有里程碑图</p><p>项目进度网络图：显示项目网络逻辑，又显示项目关键路径上的进度活动；纯逻辑图+逻辑横道图+时标逻辑图</p></blockquote></blockquote></li><li><p>项目进度网络图</p><blockquote><p>表明项目进度活动之间的逻辑依赖关系图</p></blockquote></li><li><p>项目范围说明书</p><blockquote><p>主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任</p><p>作用：表明相关方对项目范围达成共识，团队能开展更详细的规划，是评估变更或额外工作是否超出项目边界基准</p></blockquote></li><li><p>项目团队派工单</p></li><li><p>质量控制测量结果</p></li><li><p>质量测量指标</p><blockquote><p>专用于描述项目或产品属性，以及控制质量过程将如何验证符合程度。质量测量指标的例子包括按时完成的任务的百分比、以 CPI 测量的成本绩效、故障率、识别的日缺陷数量、每月总停机时间、每个代码行的错误、客户满意度分数，以及测试计划所涵盖的需求的百分比（即测试覆盖度）。</p></blockquote></li><li><p>质量报告</p><blockquote><p>可能是图形、数据或定性文件，其中包含的信息可帮助其他过程和部门采取纠正措施，以实现项目质量期望</p><p>包含：</p><blockquote><p>团队上报的质量管理问题</p><p>针对过程、项目和产品的改善建议</p><p>纠正措施建议（返工、缺陷&#x2F;漏洞补救、100%检查等）</p><p>控制质量过程中发现的情况概述</p></blockquote></blockquote></li><li><p>需求文件</p><blockquote><p>如何满足于项目相关的业务需求，只有明确的（可测量、可测试）、可跟踪、完整、互相协调，需要主要相关方愿意认可的需求，才能作为基准；格式可以多种多样。可以简单，可以详细</p></blockquote></li><li><p>需求跟踪矩阵</p><blockquote><p>把产品需求从其来源连接到能满足需求的可交付成功的一种表格；提供了在项目生命周期中跟踪需求的一种方法</p><p>有助于被批准的每项需求在项目结束时候都能交付和评估变更对项目的范围影响</p><p>为管理产品范围变更提供了框架</p></blockquote></li><li><p>资源需求</p></li><li><p>风险登记册</p><blockquote><p>记录已是被单个项目风险的详细信息</p><p>随着实施定性风险分析、规划风险应对、实施风险应对和监督风险等过程的开展，这些过程的结果也要记进风险登记册</p><ol><li>已识别风险的清单</li><li>潜在风险责任人</li><li>潜在风险应对措施清单</li></ol></blockquote></li><li><p>风险报告</p><blockquote><p>整体项目风险的信息，提供了与变更请求有关的整体和单个项目风险的来源信息</p></blockquote></li><li><p>进度数据</p><blockquote><p>描述和控制进度计划的信息集合</p><p>进度计划所使用的进度数据至少包括进度里程碑、进度活动、活动属性，以及已知的全部假设条件与制约因素</p><p>可还包括：资源直方图、现金流预测，以及订购与交付进度安排</p><p>简单说就是规划进度过程中产生的有效数据</p></blockquote></li><li><p>进度预算</p></li><li><p>相关方登记册</p><blockquote><p>记录关于已识别相关方的信息</p><ul><li>身份信息。信命、组织指望、地点、联系方式，以及在项目中扮演的角色</li><li>评估信息。主要需求、期望、影响项目成果的钱丽，以及相关方最能影响或冲击的项目生命周期阶段</li><li>相关方分类。内部或外部，作永、影响、权力或利益，上级、下级、外围或横向，或者项目经理选择的其他分类模型，进行分类的结果</li></ul></blockquote></li><li><p>团队章程</p><blockquote><p>为团队创建团队价值观、共识和工作指南的文件</p><p>作用：对可接受行为确定明确的期望，减少失误，提高生产力</p><p>讨论诸如行为规范、沟通决策、会议礼仪等领域，团队成员可以了解彼此重要的价值观</p></blockquote></li><li><p>测试与评估文件</p><blockquote><p>就是测试用例</p></blockquote></li><li><p>资源分解结构</p><blockquote><p>资源依据类别和类型的层级展现</p><p>类别：人力、材料哦、设备和用品</p><p>类型：包括技能水平、等级水平或适用于项目的其他类型</p><p>有助于结合资源使用情况，组织与报告项目的进度数据</p></blockquote></li><li><p>资源日历</p><blockquote><p>表明每种具体资源的可用工作日或工作班次的日历</p><p>规定了在项目期间特定的项目资源何时可用、可用多久</p><p>可以在活动或项目层面建立资源日历</p></blockquote></li><li><p>物质资源分配单</p></li><li><p>项目日历</p><blockquote><p>规定开展进度活动的工作日或班次和不开展进度活动的非工作日的日历</p><p>一般会规定节假日、周末和倒班时间</p><p>进度模型中，可能需要采用不止一个项目日历来编制项目进度计划，因为有些活动需要不同的工作时段</p></blockquote></li></ul><h2 id="变更请求"><a href="#变更请求" class="headerlink" title="变更请求"></a>变更请求</h2><blockquote><ul><li>关于修改任何文档，可交付成果获基准的正式提议</li><li>引起相关文档、可交付成果获基准的修改，导致项目管理计划其他相关部分的更新</li><li>必须书面提出，任何相关方都可提出</li></ul></blockquote><ul><li><p>纠正措施</p><blockquote><p>为了是工作绩效重新与项目管理计划一致而做的活动（偏差已产生且不可接受）——不会改变基准</p><p>偏差已经产生且不可接受为使未来绩效与项目管理计划一致</p></blockquote></li><li><p>预防措施</p><blockquote><p>为了未来的工作绩效与项目管理计划一致而做的活动（偏差未产生，降低未来放生的概率）——不会改变基准</p><p>偏差未产生，将来可能发生为降低风险消极后果的发生概率 </p></blockquote></li><li><p>缺陷补救</p><blockquote><p>为了修正与一致产品或产品组件而进行的活动（项目成功出现质量缺陷）——改变基准</p><p>发现项目成果存在质量缺陷使交付成果的质量符合要求</p></blockquote></li><li><p>更新</p><blockquote><p>对正式受控的项目文件或计划等进行的变更，反应修改或增加的意见和内容。——改变基准</p><p>需要更新项目计划和文件改变计划以反映实际绩效</p></blockquote></li></ul><h2 id="人际关系与团队技能"><a href="#人际关系与团队技能" class="headerlink" title="人际关系与团队技能"></a>人际关系与团队技能</h2><ul><li><p>积极倾听</p><blockquote><p>减少误解并促进沟通和知识分享</p></blockquote></li><li><p>引导</p><blockquote><p>指引团队成功的打成决定、解决方案或结论。</p><p>1、跨职能、快速达成一致意见</p><p>2、集中讨论、群体互动</p><p>3、更早发现问题</p><p>4、形式多样灵活</p></blockquote></li><li><p>领导力</p><blockquote><p>帮助沟通愿景并鼓舞项目团队关注合适的知识和知识目标</p></blockquote></li><li><p>人际交往</p><blockquote><p>与相关方建立联系和关系，为知识创造分享的条件</p></blockquote></li><li><p>政治意识</p><blockquote><p>根据环境和组织的政治</p></blockquote></li><li><p>名义小组技术</p><blockquote><p>促进头脑风暴的一种技术，通过投票排列最有用的创意，进一步开展头脑风暴或有限排序。是一种结构化的头脑风暴形式</p><p>投票、排序、促进头脑风暴</p></blockquote></li></ul><h2 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h2><ul><li><p>头脑风暴</p><blockquote><p>短时间内收集大量创意（不批评、不表扬）</p></blockquote></li><li><p>焦点小组</p><blockquote><p>召集预定的相关方和主题专家，了解他们对所讨论的产品、服务或成果的期望和态度</p><p>集中讨论、有主持人、互动比一对一更热烈</p></blockquote></li><li><p>访谈</p><blockquote><p>与相关方直接交谈，获取了解高层级需求、假设条件、制约因素、审批标准以及其他信息的方法。一对一形式获取机密信息</p></blockquote></li><li><p>问卷调查</p><blockquote><p>设计一些列书面的问题，想众多受访者快速收集信息</p><p>受众多、快速收集、地理位置分散、统计分析方法</p></blockquote></li><li><p>标杆对照</p><blockquote><p>将实际或计划的产品、过程和实践，与其他可比组织的实践镜像比较，识别最佳实践，行程改进意见，并对绩效考核提供依据</p></blockquote></li></ul><h2 id="数据表现"><a href="#数据表现" class="headerlink" title="数据表现"></a>数据表现</h2><ul><li><p>亲和图</p><blockquote><p>头脑风暴、大量创意、归纳分类</p></blockquote></li><li><p>思维导图</p><blockquote><p>把从头脑风暴中获得的长衣整合成一张图，泳衣反应创意之间的共性与差异，激发新创意</p></blockquote></li></ul><h2 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h2><p>项目开工会（Kick-off）：在规划阶段结束和执行阶段开始，传达项目目标、获得团队对项目的承诺，阐明每个相关方的角色和职责（小项目一般在规划阶段结束时开，大项目一般在执行阶段开始时开）。<strong>注意点：项目启动会只开一次，而项目开工会每个阶段都会举行一次</strong></p><h2 id="冲突管理"><a href="#冲突管理" class="headerlink" title="冲突管理"></a>冲突管理</h2><ul><li><p>撤退、回避</p><blockquote><p>置之不理、暂时搁置，推迟问题&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;问题没解决</p><p>从实际或潜在冲突中退出，将问题推迟到准备充分的时候，或者将问题推给其他人员解决。</p></blockquote></li><li><p>缓解、包容</p><blockquote><p>单方退让，求同存异&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;赢-输</p><p>强调一致而非差异；为维持和谐与关系而退让一步，考虑其他方的需要。</p></blockquote></li><li><p>妥协、调解</p><blockquote><p>各让一步，一定程度满意&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;输-输</p><p>为了暂时或部分解决冲突，寻找能让各方都在一定程度上满意的方案，但这种方法有时会导致“双输”局面。</p></blockquote></li><li><p>强迫、命令</p><blockquote><p>强行解决&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;输-赢</p><p>以牺牲其他方为代价，推行某一方的观点； 只提供赢 — 输方案。通常是利用权力来强行解决紧急问题，这种方法通常会导致“赢输”局面。</p></blockquote></li><li><p>合作、解决问题</p><blockquote><p>面对，综合考虑不同观点&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;赢&#x3D;赢</p><p>综合考虑不同的观点和意见，采用合作的态度和开放式对话引导各方达成共识和承诺，这种方法可以带来双赢局面。</p></blockquote></li></ul><h2 id="相关方权力-x2F-利益方阵"><a href="#相关方权力-x2F-利益方阵" class="headerlink" title="相关方权力&#x2F;利益方阵"></a>相关方权力&#x2F;利益方阵</h2><ul><li>权力高，利益高：重点管理</li><li>权力高，利益低：令其满意</li><li>权力低，利益高：随时告知</li><li>权力低，利益低：监督</li></ul><h2 id="风险应对策略"><a href="#风险应对策略" class="headerlink" title="风险应对策略"></a>风险应对策略</h2><ul><li><p>规避</p><blockquote><p>对于威胁，我们常用的第一个应对策略叫做“规避”。它适用于发生概率较高，而且有严重负面影响的高优先级风险。使用这种策略，意味着项目团队要采取行动<strong>消除威胁</strong>，或者<strong>保护项目不受到威胁的影响</strong>。</p><p>“规避”其实是<strong>针对风险原因</strong>的一种应对策略，如果我们能够找到造成风险事件的原因，那我们就能够去想办法避免它发生。</p><p>通常，”规避“策略可能会涉及到项目管理计划中某些内容的变更，或者改变会受负面影响的目标，以便于彻底消除威胁，把它的发生概率降为零。</p></blockquote></li><li><p>减轻</p><blockquote><p>所谓“减轻”就是我们采取相应的措施，<strong>降低威胁发生的概率或影响</strong>。一般来说，提前采取减轻措施，比威胁发生后再尝试进行弥补更有效。</p><p>常见的减轻措施包括：采用比较简单的流程，进行更多次测试，或者采用更可靠的卖方等。</p><p>如果我们无法降低威胁发生的概率，也许可以从决定风险严重性的因素入手，来减轻风险发生的影响。比如，我们可以在一个系统中加入冗余部件，来减轻原始部件故障对系统的影响。</p></blockquote></li><li><p>转移</p><blockquote><p>我们把应对风险的责任转移给第三方，<strong>让第三方管理风险并承担风险发生的责任</strong>。如果使用转移策略的话，通常我们需要向第三方机构支付风险转移的费用。</p><p>另外，风险转移可能需要通过一系列行动才能得以实现，这些行动可能会包括购买保险、使用担保书或保证书等，也可以通过签订协议，把具体风险的归属和风险转移给第三方。</p></blockquote></li><li><p>接受</p><blockquote><p>承认项目存在威胁，但是我们不主动采取措施进行干预。一般来说，这种策略比较适合应对优先级比较低的威胁，或者是没有任何一种其他方法可以有效应对的威胁。</p><p>“接受”的策略其实又可以分为<strong>主动和被动</strong>的两种。常见的主动接受策略就是，为项目建立应急储备，包括预留时间、资金或其他资源来应对出现的威胁；而被动接受策略就是，我们不主动采取行动，但是会定期对项目威胁进行审查，确保它们没有发生特别大的改变。</p></blockquote></li><li><p>上报</p></li></ul><h2 id="问题解决流程"><a href="#问题解决流程" class="headerlink" title="问题解决流程"></a>问题解决流程</h2><ol><li>定义问题</li><li>分析问题</li><li>尽可能多的生成解决方案</li><li>选择方案</li><li>执行</li><li>验证</li></ol><h2 id="机会应对策略"><a href="#机会应对策略" class="headerlink" title="机会应对策略"></a>机会应对策略</h2><ul><li><p>开拓</p><blockquote><p>当机会来临的时候，如果我们想要确保把握住这个机会的话，就可以采取<strong>开拓</strong>的策略。一般来说，使用开拓的策略，会把特定机会出现的概率提高到100%，确保这个机会肯定会出现，从而获得与这个机会相关的收益。</p><p>通常我们可以使用的开拓措施有很多，比如把组织中最有能力的资源分配给项目来缩短完工时间；通过技术升级或者采用全新的技术来节约项目成本并缩短项目持续时间。</p></blockquote></li><li><p>分享</p><blockquote><p>当项目机会来临的时候，如果我们无法独自应对的话，就可以选择把应对机会的责任转移给第三方，当然，这个机会所带来的部分收益我们也会分享给第三方。我们可能会通过建立合伙关系、合作团队、特殊公司或合资企业等不同的方式把机会跟第三方共享。</p><p>在这个过程中需要注意的一点是，我们必须仔细的为已经分享的机会安排新的责任人，这个责任人一定是最有能力为项目抓住机会的人。</p><p>另外，如果采用风险分享策略的话，通常我们要向承担机会应对责任的一方支付风险费用。</p></blockquote></li><li><p>提高</p><blockquote><p>主要是用来提高机会出现的概率和影响。</p><p>前面我们已经讲过，相对“威胁”来说，“机会”是好事，既然是好事，那我们就可以想办法提高它发生的概率，或者让它变得更好一点。一般来说，提前采取提高措施比机会出现后尝试改善收益更有效。</p><p>如果我们能够弄清楚机会出现的原因，那我们就能想办法提高机会出现的概率了；如果不能提高概率的话，那我们也许可以尝试分析有哪些因素会决定这个机会的收益有多大，然后再针对这些因素提高机会对项目的影响。</p></blockquote></li><li><p>接收</p></li><li><p>上报</p></li></ul><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><blockquote><p>先针对范围、进度、成本绩效进行<strong>挣值分析</strong></p><p>再通过<strong>偏差分析</strong>得出目标绩效与实际绩效之间的差异</p><p>之后通过<strong>根本性原因分析</strong>识别问题的主要原因</p><p>最后在通过执行<strong>纠正措施&#x3D;》成本效益分析、预防措施&#x3D;》趋势分析、纠正措施或预防措施&#x3D;》备选方案分析</strong>的组合</p></blockquote><ul><li><p>挣值分析：</p><blockquote><p>将实际进度和成本绩效与绩效测量基准进行比较</p><p>PV（Planned Value）：完成计划工作量的预算成本（成本基准，不含管理储备）</p><p>AC（Actual Cost）：实际完成工作量的实际成本</p><p>EC（Earned Cost）：实际完成工作量的预算成本</p><p>BAC：项目总预算成本</p></blockquote></li><li><p>偏差分析：</p><blockquote><p>确定实际绩效与目标绩效之间差异程度及原因的技术</p><p>CV（Cost Variance）：成本偏差，截止某时点已发生的成本偏差</p><blockquote><p>正直表示节约，负值表示超支；CV &#x3D; EV - AC</p></blockquote><p>CPI（Cost Performance Index）：成本绩效指数；截止某时点每花1元钱做了价值多少的事</p><blockquote><p>大于1为好，小于1为不好；CPI &#x3D; EV &#x2F; AC</p></blockquote><p>SV（Schedule Variance）：进度偏差；截止某时点已发生的进度偏差</p><blockquote><p>正直表示提前，负值表示落后；SV &#x3D; EV - PV</p></blockquote><p>SPI（Schedule  Performance Index）：进度绩效指数；截止某时点实际进度是计划进度的多少倍</p><blockquote><p>大于1为好，小于1为不好；SPI &#x3D; EV &#x2F; PV</p></blockquote><p>完工尚需指数TCPI：（BAC - EV）&#x2F;（BAC - AC）</p></blockquote></li><li><p>趋势分析：</p><blockquote><p>根据以往结果预测未来绩效；可以预测项目的进度延误，应尽早对项目时间影响趋势分析，再根据分析结构提出必要的预防措施；</p><p>在项目执行的不通时间点估算的，完成这个项目所需的成本，如果测试的EAC值在不可接受的范围内，就是预警信号</p><blockquote><p>完工偏差：VAC &#x3D; BAC - EAC；VAC&gt;&#x3D;0成本节约；VAC&lt;0成本超支，动用管理储备</p></blockquote></blockquote></li><li><p>文件分析：</p><blockquote><p>通过现有文件分析出相关的信息。有助于总结经验教训和分享知识以改进未来项目和组织资产</p></blockquote></li><li><p>回归分析：</p><blockquote><p>项目结果的不通项目变量之间的相互关系，提高未来项目的绩效</p></blockquote></li><li><p>备选方案分析</p><blockquote><p>可用于评估实现项目过程中所述的需求和目标的各种方法，有助于团队权衡资源、成本和持续时间变量，以确定完成项目工作的最佳方式。</p><p>定义范围和估算活动资源都可用备选方案分析</p></blockquote></li><li><p>储备分析</p><blockquote><p>需考虑应急储备（有时称时间储备或缓冲时间），并将其纳入项目进度进化中，用来应对进度方面的不确定性。也可估算项目所需的管理储备。</p><p>应该在项目进度文件中清楚的列出应急储备</p><p>应急储备：</p><blockquote><p>包含在进度基准中一段持续时间，应对已经接受的已识别风险，以及已经制定应急湖减轻措施的已识别风险；</p><p>应对“已知-未知”风险；</p><p>随着项目信息越来越明确，可以动用、介绍或取消应急储备</p></blockquote><p>管理储备：</p><blockquote><p>不包含在进度基准中，但属于项目总持续时间一部分。</p><p>为管理控制的目的而特别留出的项目时段，用来应对项目范围中不可预见的工作</p><p>应对“未知-未知”风险</p><p>动用管理储备会影响到进度基准的更新</p></blockquote></blockquote></li><li><p>产品分析</p><blockquote><p>把高层级的产品表述，转变为有形的可交付成果</p></blockquote></li><li><p>假设情景分析</p><blockquote><p>对各种情景进行评估；预测他们对项目目标的影响；考虑各种各样的情景；评估项目进度计划在不利条件下的可行性</p><p>模拟：基于多种不同活动假设【通常使用三点估算的概率分布】计算出多种可能的项目工期，以应对不确定性。</p><p>蒙特卡洛：评估定量和决策制定过程中的风险；首先确定每个活动的可能持续时间概率分布，然后根据此计算出整个项目的可能工期概率分布；可以计算实现特定目标的日期的可能性；</p></blockquote></li><li><p>绩效评审</p><blockquote><p>根据基准，测量、对比和分析绩效</p></blockquote></li><li><p>成本效益分析</p><blockquote><p>基本原理：比较可能的成本与预期的效益，选择最优方案</p><p>主要作用：确定规划的质量活动是否有效利用的成本</p><p>效益表现：减少返工、提高生产率、减低成本、提升相关方满意度</p></blockquote></li><li><p>质量成本</p><blockquote><p>为达到要求而增加投入，还是承担不符合要求而造成的成本；是寻求短期成本降低，还是承担产品生命周期后期频繁出现问题的后果</p><p>一致性成本：预防发生的，例如研发时发生的成本</p><p>非一致性成本：破坏性测试（黑盒测试），例如生产时发生的成本</p></blockquote></li><li><p>根本原因分析</p><blockquote><p>确定引起偏差、缺陷或风险的根本原因</p><p>一项根本原因可能引起多想偏差、缺陷或风险</p><p>识别问题的根本原因并解决问题</p><p>消除所有根本原因可以杜绝问题再次发生</p></blockquote></li><li><p>SWOT分析</p><blockquote><p>从项目的每一个优势、劣势、机会和威胁出发，对项目尽早考察，把产生于（组织）内部的风险都包括在内，更全面考虑风险SWOT也用于考虑组织优势可抵消威胁、机会可克服劣势的程度</p><ul><li>识别项目“内部+外部”威胁和机会</li><li>优势、劣势、机会、威胁</li><li>先内部，后外部</li><li>利用优势、抵消劣势，抓机会，回避风险</li></ul></blockquote></li><li><p>敏感性分析</p><blockquote><p>有助于确定哪些单个风险或其他不确定性来源对项目结果具有最大的潜在影响</p></blockquote></li><li><p>关键性分析</p><blockquote><p>确定风险模型的哪些活动对项目关键路径的影响最大</p></blockquote></li><li><p>决策树分析</p><blockquote><p>在若干备选行动方案中选择一个最佳方案；量化风险工具</p></blockquote></li><li><p>技术绩效分析</p><blockquote><p>把项目执行期间取得的所有成果与取得相关技术成果的计划进行比较</p></blockquote></li></ul><h2 id="数据表现-1"><a href="#数据表现-1" class="headerlink" title="数据表现"></a>数据表现</h2><ul><li><p>亲和图</p><blockquote><p>将收集来的大量信息，进行归类</p></blockquote></li><li><p>因果图</p><blockquote><p>用来分析根本性原因的，采取纠正措施，消除在控制图中所呈现的特殊偏差；与控制图联合使用。</p><p>别名：鱼骨图，石川图</p></blockquote></li><li><p>流程图</p><blockquote><p>通过流程分析找问题原因或出处，通过工作流的逻辑分支及其相对频率，来估算质量成本。也可以用于识别风险过程，分析风险起因。考试中如果选择流程图，通常题干中会有“流程”、“程序”和“过程”等文字，可以判断是用来估算质量成本的。</p></blockquote></li><li><p>直方图</p><blockquote><p>描述几种趋势分散程度和统计分许形状；发生次数统计</p></blockquote></li><li><p>矩阵图</p></li><li><p>散点图</p><blockquote><p>数据点越接近对角线，两个发量之间的关系就越密切</p><p>两个发量间的关系</p><p>别名：相关图（相关关系）</p><p>散点图经常用于问题的转化</p></blockquote></li><li><p>控制图</p><blockquote><p>用来确定一个过程是否稳定，或者是否具有可预测性</p><p>规格上下限、控制上下限</p><p>1点规则：某个数据点超出控制界限</p><p>7点规则：7个或7个以上连续的点落在均值同一侧</p><p>如果失控就必须对其调整</p></blockquote></li></ul><h2 id="分解结构"><a href="#分解结构" class="headerlink" title="分解结构"></a>分解结构</h2><p>WBS</p><blockquote><p>显示项目可交付成果的分解</p><p>有助于明确高层的职责</p><p>要素：控制账户、规划包、工作包</p></blockquote><p>OBS</p><blockquote><p>按照组织现有的部门、单元或团队排列</p><p>建立部门与项目活动或工作包的对应关系</p></blockquote><p>RBS</p><blockquote><p>按照资源类别和类型，对资源的层级列表</p><p>建立资源与工作包和活动的对应关系</p><p>可与组织的会计系统对接</p><p>可包含人力资源以外的其他各类资源</p></blockquote><h2 id="活动4种逻辑关系"><a href="#活动4种逻辑关系" class="headerlink" title="活动4种逻辑关系"></a>活动4种逻辑关系</h2><p>结束-开始（FS）：上一个活动结束后，下个活动开始</p><p>开始-开始（SS）：上一个活动开始，下个活动同时开始</p><p>开始-结束（SF）：只有当下一个活动开始，上一个活动才能结束。（例：只有第二个保安A开始上岗，前一位保安B才能下岗）（最少用到）</p><p>结束-结束（FF）：上一个活动结束，下个活动也同时结束</p><h2 id="活动估算"><a href="#活动估算" class="headerlink" title="活动估算"></a>活动估算</h2><blockquote><p>估算依据：</p><blockquote><p>1、估算依据文件</p><p>2、全部假设条件的文件</p><p>3、各种已知制约因素</p><p>4、对估算区间说明（如 + - 10 %）</p><p>5、对最终估算的置信水平说明</p><p>6、有关影响估算单位项目风险的文件</p></blockquote></blockquote><p>类比估算：以过去类似项目的参数值（如持续时间、预算、规模、重量和复杂性等）为基础，来估算未来项目的同类参数或指标</p><blockquote><p>用于项目早期阶段或信息不足时</p><p>综合利用历史信息和专家判断</p><p>优点：成本低，速度快</p><p>缺点：准确性差</p><p>可靠关键点：本质相似，不是表面相似；估算团队专业</p></blockquote><p>参数估算：利用历史数据之间的统计关系和其他变量，来进行项目工作进度、成本估算。参数估算的准确性取决于参数模型的成熟度和基础数据的可靠性。可与其他估算方联合使用</p><p>三点估算：通过考虑估算中的不确定风险，可提高活动持续时间估算的准确性。</p><blockquote><p>最可能时间</p><p>最乐观时间</p><p>最悲观时间</p></blockquote><p>自下而上估算：（必要条件：项目的WBS清单）一种估算项目持续时间、资源和成本的方法，通过从下到逐层汇总WBS组成的部分估算而得到的项目估算。首先应对单个工作包或活动进行最具体、系统的估算。</p><blockquote><p>最准确可靠；前提是有详细的WBS；可用于估算活动时间、资源、成本三个过程</p></blockquote><h2 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h2><p>资源平衡：为了资源需求与资源供给之间取得平衡，根据资源制约因素对开始日期和完成日期进行一种调整的技术</p><blockquote><p>资源只在特定时间可用，数量有限，或被过度分配时使用</p><p>保持资源使用量处于均衡水平时使用</p><p>资源平衡往往导致关键路径改变，可以用浮动时间来平衡资源需求</p><p>在项目进度计划期间，因为资源平衡，可能导致项目工期发生变化</p></blockquote><p>资源平滑：对进度模型中的活动进行调整，从而使用项目资源需求不超过预定的资源限制的一种技术</p><blockquote><p>不会改变项目关键路劲，完成日期也不会延迟</p><p>活动只在其自由和总浮动时间内延迟</p><p>可能无法实现所有资源的优化</p></blockquote><h2 id="进度压缩"><a href="#进度压缩" class="headerlink" title="进度压缩"></a>进度压缩</h2><p>赶工</p><blockquote><p>通过增加资源，以最小的成本增加来压缩进度工期</p><p>方法：批准加班、增加额外资源、支付加急费用</p><p>适用于通过增加资源就能缩短时间的，且位于关键路径上的活动</p><p>加快关键路径上的活动，会导致风险和&#x2F;或增加成本；局部风险</p><p>需要分析成本和时间比例：选择单位时间成本最低的活动赶工</p></blockquote><p>快速跟进</p><blockquote><p>把顺序执行的活动并行执行</p><p>不直接增加成本</p><p>可能造成返工和风险的增加；全局风险</p></blockquote><p><strong>项目的定义：项目是为创造独特的产品、服务或成果而进行的临时性工作</strong></p><p>项目管理的定义：将知识、技能、工具与技术用于项目活动，以满足项目的要求。</p><p>三角制约：范围、成本、进度</p><p>项目集：一组相互关联且被协调的项目、子项目和项目集，以便获得分别管理所无法获得的利益</p><p>项目组合：为了实现组织战略目标而在一起管理的项目、项目集、子项目组合和运营工作（可仅限于共享雇主、供应商、技术或资源，包括运营的工作，没有依赖关系）</p><p>项目组合管理：<br>    目的：有效分配资源，实现其对组织的最大贡献</p><p>​重点：确定资源的分配的优先顺序，确保与组织战略协调一致</p><p>项目生命周期：项目从开始到结束所经历的一些列阶段</p><p>项目阶段：一组具有逻辑关系的项目活动集合，通常以一个或多个可交付成果的完成结果</p><p>阶段关口：为做出进入下阶段、进行整改或结束项目集或项目的决定，而开展的阶段末审查</p><p>项目管理过程：在创造最终结果的系统化的系列活动，以便对一个或多个输入进行加工，生成一个或多个输出</p><p>项目管理过程组：项目管理出入、工具和技术以及输出的逻辑组合。项目管理过程组包括启动、规划、执行、监控和收尾。项目管理过程组不同于阶段。</p><p>蒙特卡洛分析 模拟技术，特点是用概率统计作工具进行分析；计算出整个项目的可能工期概率分布。</p><p>FS：结束-开始</p><p>SS：开始-开始</p><p>SF：开始-结束（最少使用）</p><p>FF：结束-结束</p><p>资源平衡：在资源需求与资源供给之间取的平衡</p><p>资源平滑：对进度模型中的活动进行调整，是项目资源需求不超过预定的资源限制。</p><p>PMP考试答题的几个注意点：</p><p>1、所有的过程，如果问你下一步做什么。如果有关于沟通规划的，一定选沟通相关的<br>2、如果有什么情景题要做什么，一定有3个步骤：分析环境、分析利益，分析自己<br>3、如果有关于变更的措施，一定首选对管理计划影响最小的<br>4、冲突的管理，看实际情况，如果情况紧急，决策最快的最好，就是强制或者解决问题；<br>5、冲突的解决办法，一定要选择对各方利益损失最小的办法。<br>6、注意几个关键词“总是、绝不、必须”或者是这类标志性的词语；他们通常是错误的答案<br>7、注意“经常、有时、也许、通常、或许”这类代表特殊情况的词语。<br>8、中英文翻译，正确的答案，可能语法是不正确的。<br>9、注意题干中的“除了，不包括”<br>10、项目经验要在PMBOOK之后考虑，有冲突，按照PMBOOK来答题。<br>11、PMI的主张是只管自己责任范围bai的事情</p>]]></content>
    
    
    <categories>
      
      <category>PMP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十大知识领域</title>
    <link href="/20201203/d6f98e405197.html"/>
    <url>/20201203/d6f98e405197.html</url>
    
    <content type="html"><![CDATA[<h1 id="十大知识领域"><a href="#十大知识领域" class="headerlink" title="十大知识领域"></a>十大知识领域</h1><h2 id="整合-项目整合管理"><a href="#整合-项目整合管理" class="headerlink" title="整合-项目整合管理"></a>整合-项目整合管理</h2><blockquote><p>识别、定义、组合、统一和协调个项目管理过程组的各种过程和活动而展开的活动与过程。</p><p>整合：统一、合并、沟通和简历联系；贯穿项目始终</p></blockquote><h3 id="七个过程组"><a href="#七个过程组" class="headerlink" title="七个过程组"></a>七个过程组</h3><h4 id="一、制定项目章程（启动）"><a href="#一、制定项目章程（启动）" class="headerlink" title="一、制定项目章程（启动）"></a>一、制定项目章程（启动）</h4><blockquote><p>执行一次</p><p>编写一份正式批准的项目，授权项目经理使用组织资源的文件过程。里面描述高层级的期望</p><p>作用：</p><blockquote><p>明确项目与组织战略目标之间的直接联系</p><p>确立项目的正式地位</p><p>展示组织对项目的承诺</p></blockquote><p>解读：</p><blockquote><p>明确定义项目开始和项目边界（边界模糊）</p><p>项目章程一旦被批准，就标志着项目正式启动</p><p>高层对项目的支持</p></blockquote></blockquote><p><strong>输入：</strong></p><ol><li>商业文件<ul><li>商业论证</li><li>效益管理计划</li></ul></li><li>协议</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集：<ul><li>头脑风暴</li><li>焦点小组</li><li>访谈</li></ul></li><li>人机关系与团队技能：<ul><li>冲突管理</li><li>引导</li><li>会议管理</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li><p>项目章程</p><blockquote><p>是由项目启动者或发起人发布的，正式批准项目成立，并授权项目经理使用组织资源开展项目活动的文件</p></blockquote></li><li><p>假设日志</p></li></ol><h4 id="二、制定项目计划（规划）"><a href="#二、制定项目计划（规划）" class="headerlink" title="二、制定项目计划（规划）"></a>二、制定项目计划（规划）</h4><blockquote><p>执行一次</p><p>定义、准备和协调项目计划的所有组成部分，并把他们整理合为一份综合项目管理计划的过程</p><p>作用：综合文件，确定所有项目工作的基础及其执行方式</p><p>性质：必须是综合，经批准的，现实可行的，正式的</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>其他过程的输出</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集：<ul><li>头脑风暴</li><li>核对单</li><li>焦点小组</li><li>访谈</li></ul></li><li>人际关系与团队技能：<ul><li>冲突管理</li><li>引导</li><li>会议管理</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>项目管理计划</li></ol><h4 id="三、指导与管理项目工作（执行）"><a href="#三、指导与管理项目工作（执行）" class="headerlink" title="三、指导与管理项目工作（执行）"></a>三、指导与管理项目工作（执行）</h4><blockquote><p>整个项目期间开展</p><p>实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准的变更过程</p><p>作用：对项目工作提供综合管理，提高项目成功的可能性</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划</li><li>项目文件：<ul><li>变更日志</li><li>经验教训登记册</li><li>里程碑清单</li><li>项目沟通记录</li><li>项目进度计划</li><li>需求跟踪矩阵</li><li>风险登记册</li><li>风险报告</li></ul></li><li>经批准的变更请求</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>项目管理信息系统</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>可交付成果</li><li>工作绩效数据</li><li>问题日志</li><li>变更请求</li><li>项目管理计划更新</li><li>项目文件更新：<ul><li>活动清单</li><li>假设日志</li><li>经验教训登记册</li><li>需求文件</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>组织过程资产</li></ol><h4 id="四、管理知识领域（执行）"><a href="#四、管理知识领域（执行）" class="headerlink" title="四、管理知识领域（执行）"></a>四、管理知识领域（执行）</h4><blockquote><p>整个项目期间开展</p><p>使用现有的只是并生成新知识，实现项目目标，且帮助组织学习的过程。</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划</li><li>项目文件：<ul><li>项目团队派工单</li><li>资源分解结构</li><li>供方选择标准</li><li>相关方登记册</li></ul></li><li>可交付成果</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>知识管理</li><li>信息管理</li><li>人际关系与团队技能：<ul><li>积极倾听</li><li>引导</li><li>领导力</li><li>人际交往</li><li>政治意识</li></ul></li></ol><p><strong>输出：</strong></p><ol><li>经验教训登记册</li><li>项目管理计划更新</li><li>组织过程资产更新</li></ol><h4 id="五、监控项目工作（监控）"><a href="#五、监控项目工作（监控）" class="headerlink" title="五、监控项目工作（监控）"></a>五、监控项目工作（监控）</h4><blockquote><p>整个项目期间开展</p><p>跟踪、审查和报告整体项目进展，实现项目管理计划中确定的绩效目标过程</p><p>作用：让相关方了解项目的当前状态并认可为处理绩效问题而采取的行动，以及通过成本和进度预测，让相关方了解未来项目状态</p><p>工作内容：</p><ul><li>项目的实际绩效与项目管理计划进行比较</li><li>定期评估项目记下，决定是否需要采取纠正或预防措施，并推荐必要的措施</li><li>检查单个项目风险的状态</li><li>维护一个准确且及时更新的信息库，以反应项目产品及相关文件的情况</li><li>为状态报告、进展测量和预测提供信息</li><li>做出预测，以更新当前的成本与进度信息</li><li>监督已批准变更的实施情况</li><li>确保项目与商业需求保持一致</li></ul></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划</li><li>项目文件：<ul><li>假设日志</li><li>估算依据</li><li>成本预测</li><li>问题日志</li><li>经验教训登记册</li><li>里程碑清单</li><li>质量报告</li><li>风险登记册</li><li>风险报告</li><li>进度预测</li></ul></li><li>工作绩效信息</li><li>协议</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据分析：<ul><li>备选方案分析</li><li>成本效益分析</li><li>挣值分析</li><li>根本原因分析</li><li>趋势分析</li><li>偏差分析</li></ul></li><li>决策</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>工作绩效报告</li><li>变更请求</li><li>项目管理计划更新</li><li>项目文件更新：<ul><li>成本预测</li><li>问题日志</li><li>经验教训登记册</li><li>风险登记册</li><li>进度预测</li></ul></li></ol><h4 id="六、实施整体变更控制（监控）"><a href="#六、实施整体变更控制（监控）" class="headerlink" title="六、实施整体变更控制（监控）"></a>六、实施整体变更控制（监控）</h4><blockquote><p>整个项目期间开展</p><p>审查所有变更请求、批准变更、管理对可交付成果、组织过程资产、项目文件和项目管理计划变更，并对变更处理结果进行沟通的过程</p><p>作用：确保对项目中已记录在案的变更做综合评审</p></blockquote><p>变更控制流程：</p><ol><li>消除变更的根本原因</li><li>识别并确认变更</li><li>在知识领域分析影响</li><li><strong>评估变更整体影响（整体变更控制）</strong></li><li><strong>寻找可行方案（整体变更控制）</strong></li><li><strong>批准或拒绝变更（整体变更控制）</strong></li><li><strong>更新变更日志（整体变更控制）</strong></li><li><strong>更新计划或基准（整体变更控制）</strong></li><li>沟通变更决定</li><li>实施跟踪确认变更</li></ol><p><strong>输入：</strong></p><ol><li>项目管理计划：<ul><li>变更管理计划</li><li>配置管理计划</li><li>范围基准</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件：<ul><li>估算依据</li><li>需求跟踪矩阵</li><li>风险报告</li></ul></li><li>工作绩效报告</li><li>变更请求</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>变更控制工具</li><li>数据分析：<ul><li>备选方案分析</li><li>成本效益分析</li></ul></li><li>决策：<ul><li>投票</li><li>独裁型决策制定</li><li>多标准决策分析</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>批准的变更请求</li><li>项目管理计划更新</li><li>项目文件更新：<ul><li>变更日志</li></ul></li></ol><h4 id="七、结束项目或阶段（收尾）"><a href="#七、结束项目或阶段（收尾）" class="headerlink" title="七、结束项目或阶段（收尾）"></a>七、结束项目或阶段（收尾）</h4><blockquote><p>开展一次</p><p>结束项目或阶段是终结项目、阶段或合同的所有活动的过程</p><p>作用：完成计划工作、总结经验教训、存档项目或阶段信息、释放组织资源以开展新工作</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划</li><li>项目文件：<ul><li>假设日志</li><li>估算依据</li><li>变更日志</li><li>问题日志</li><li>经验教训登记册</li><li>里程碑清单</li><li>项目沟通记录</li><li>质量控制车辆结果</li><li>质量报告</li><li>需求文件</li><li>风险登记册</li><li>风险报告</li></ul></li><li>验收的可交付成果</li><li>商业文件：<ul><li>商业论证</li><li>效益管理计划</li></ul></li><li>协议</li><li>采购文件</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据分析：<ul><li>文件分析</li><li>回归分析</li><li>趋势分析</li><li>偏差分析</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>项目文件更新：<ul><li>经验教训登记册</li></ul></li><li>最终产品、服务或成果移交</li><li>最终报告</li><li>组织过程资产更新：<ul><li>项目文件</li><li>运营和支持文件</li><li>项目或阶段收尾文件</li><li>经验教训库</li></ul></li></ol><h2 id="范围-项目范围管理"><a href="#范围-项目范围管理" class="headerlink" title="范围-项目范围管理"></a>范围-项目范围管理</h2><blockquote><p>确保项目做且只做所需的全部工作，以成功完成项目的各个过程</p></blockquote><p>项目范围：有时包含产品范围，交付具有规定相遇功能的产品。服务或成果而必须完成的工作；完成情况根据<strong>管理计划</strong>衡量</p><p>产品范围：某项产品、服务或成果所具有的特征和功能；完成情况根据<strong>产品需求</strong>衡量</p><p><strong>与范围有关的文件：</strong></p><blockquote><p>商业文件</p><p>项目章程</p><p>需求文件</p><p>需求跟踪矩阵</p><p>范围基准</p><blockquote><p>项目范围说明书</p><p>工作分解结构</p><p>WBS词典</p></blockquote><p>采购工作说明书</p></blockquote><h3 id="六个过程组"><a href="#六个过程组" class="headerlink" title="六个过程组"></a>六个过程组</h3><h4 id="一、规划范围管理（规划）"><a href="#一、规划范围管理（规划）" class="headerlink" title="一、规划范围管理（规划）"></a>一、规划范围管理（规划）</h4><blockquote><p>记录如何定义、确认和控制项目范围及产品范围，而创建范围管理计划的过程</p><p>作用：在整个项目期间如何管理范围提供指南和方向</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划：<ul><li>质量管理计划</li><li>项目生命周期描述</li><li>开发方法</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据分析：<ul><li>备选方案分析</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>范围管理计划</li><li>需求管理计划</li></ol><h4 id="二、收集需求（规划）"><a href="#二、收集需求（规划）" class="headerlink" title="二、收集需求（规划）"></a>二、收集需求（规划）</h4><blockquote><p>实现项目目标而确定、记录并管理相关方的需要和需求的过程</p><p>作用：为定义和管理项目范围（包含产品范围）奠定基础</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>范围管理计划</li><li>需求管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件<ul><li>假设日志</li><li>经验教育登记册</li><li>相关方登记册</li></ul></li><li>商业文件<ul><li>商业论证</li></ul></li><li>协议</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集<ul><li>头脑风暴</li><li>访谈</li><li>焦点小组</li><li>问卷调查</li><li>标杆对照</li></ul></li><li>数据分析<ul><li>文件分析</li></ul></li><li>决策<ul><li>投票</li><li>多标准决策分析</li></ul></li><li>数据表现<ul><li>亲和图</li><li>思维导图</li></ul></li><li>人际关系与团队技能<ul><li>名义小组（排序）</li><li>观察、交谈</li><li>引导、引导式研讨会</li></ul></li><li>系统关系图</li><li>原型法</li></ol><p><strong>输出：</strong></p><ol><li>需求文件</li><li>需求跟踪矩阵</li></ol><h4 id="三、定义范围（规划）"><a href="#三、定义范围（规划）" class="headerlink" title="三、定义范围（规划）"></a>三、定义范围（规划）</h4><blockquote><p>指定项目和产品详细描述过程</p><p>作用：描述产品、服务或成果的边界和验收标准</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>范围管理计划</li></ul></li><li>项目文件<ul><li>假设日志</li><li>需求文件</li><li>风险登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据分析<ul><li>备选方案分析</li></ul></li><li>决策<ul><li>多标准决策分析</li></ul></li><li>人际关系与团队技能<ul><li>引导</li></ul></li><li>产品分析</li></ol><p><strong>输出：</strong></p><ol><li>项目范围说明书</li><li>项目文件更新<ul><li>假设日志</li><li>需求文件</li><li>需求跟踪矩阵</li><li>相关方登记册</li></ul></li></ol><h4 id="四、创建WBS（规划）"><a href="#四、创建WBS（规划）" class="headerlink" title="四、创建WBS（规划）"></a>四、创建WBS（规划）</h4><blockquote><p>把项目可交付成果和项目工作分解成较小的、更易于管理的组件过程</p><p>作用：对所要交付的内容一共一个结构化的视图</p></blockquote><p>工作分解结构：</p><blockquote><p>WBS是对项目团队为实现项目目标、创建可交付成果而需要实施的全部工作范围的层级分解；</p><p>并且定义了项目的总范围，代表着经批准的当前项目范围说明书中所规定的工作。</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>范围管理计划</li></ul></li><li>项目文件<ul><li>项目范围说明书</li><li>需求文件</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>分解：100%原则、4至6层，最底层工作包，80小时（两周）原则、责任人、暂时不能分解的设置规划包</li></ol><p><strong>输出：</strong></p><ol><li>范围基准</li><li>项目文件更新<ul><li>假设日志</li><li>需求文件</li></ul></li></ol><h4 id="五、确认范围（监控）"><a href="#五、确认范围（监控）" class="headerlink" title="五、确认范围（监控）"></a>五、确认范围（监控）</h4><blockquote><p>正式验收已完成的项目可交付成果的过程</p><p>作用：是验收过程具有客观性；同时通过验收每个可交付成功，提高最终产品、服务或成果获得验收的可能性</p><p>Verify：核实可交付成果在前，属于控制质量过程</p><p>Validate：确认可交付成果在后，属于确认范围过程</p><p><strong>验收：先控制质量再确认范围</strong></p><p>控制质量是项目团队，而确认范围是客户或发起人</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>范围管理计划</li><li>需求管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>质量报告</li><li>需求文件</li><li>需求跟踪矩阵</li></ul></li><li>核实的可交付成果</li><li>工作绩效数据</li></ol><p><strong>工具与技术：</strong></p><ol><li>检查</li><li>决策<ul><li>投票</li></ul></li></ol><p><strong>输出：</strong></p><ol><li>验收的可交付成果</li><li>工作绩效信息</li><li>变更请求</li><li>项目文件更新<ul><li>经验教训登记册</li><li>需求文件</li><li>需求跟踪矩阵</li></ul></li></ol><h4 id="六、控制范围（监控）"><a href="#六、控制范围（监控）" class="headerlink" title="六、控制范围（监控）"></a>六、控制范围（监控）</h4><blockquote><p>监督项目和产品的单位状态，管理范围基准变更的过程</p><p>作用：在整个项目期间保持对范围基准的维护</p></blockquote><p>范围蔓延：未经控制的产品或项目范围的扩大（未对时间、成本和资源做相应调整）</p><p>镀金：超出范围定义，主动增加额外的工作而得不到任何经济补偿的行为</p><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>范围管理计划</li><li>需求管理计划</li><li>变更管理计划</li><li>配置管理计划</li><li>范围基准</li><li>绩效测量标准</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>需求文件</li><li>需求跟踪矩阵</li></ul></li><li>工作绩效数据</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>数据分析<ul><li>偏差分析</li><li>趋势分许</li></ul></li></ol><p><strong>输出：</strong></p><ol><li>工作绩效信息</li><li>变更请求</li><li>项目管理计划更新<ul><li>范围管理计划</li><li>范围基准</li><li>进度基准</li><li>成本基准</li><li>绩效测量基准</li></ul></li><li>项目文件更新<ul><li>经验教训登记册</li><li>需求文件</li><li>需求跟踪矩阵</li></ul></li></ol><h2 id="进度-项目进度管理"><a href="#进度-项目进度管理" class="headerlink" title="进度-项目进度管理"></a>进度-项目进度管理</h2><blockquote><p>在WBS基础上继续分解成相关活动；为管理项目按时完成所需的各个过程</p><p>WBS工作报告&#x3D;&#x3D;&#x3D;》活动&#x3D;&#x3D;&#x3D;》进度计划</p></blockquote><p>进度规划方法：关键路径法、关键链法</p><p>进度编制工具：进度模板、项目管理软件</p><p>进度模型（进度计划草稿，被批准后就是项目进度计划，也就是项目进度计划的前身）</p><h3 id="六个过程组-1"><a href="#六个过程组-1" class="headerlink" title="六个过程组"></a>六个过程组</h3><h4 id="一、规划进度管理（规划）"><a href="#一、规划进度管理（规划）" class="headerlink" title="一、规划进度管理（规划）"></a>一、规划进度管理（规划）</h4><blockquote><p>规划、编制、管理、执行和控制项目进度而制定的侦测、程序和文档的过程</p><p>作用：在整个项目过程中管理项目进度提供指南和方向</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>范围管理计划</li><li>开发方法</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据分析</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>进度管理计划</li></ol><h4 id="二、定义活动（规划）"><a href="#二、定义活动（规划）" class="headerlink" title="二、定义活动（规划）"></a>二、定义活动（规划）</h4><blockquote><p>识别和记录；为完成项目可交付成果而采取的具体行动过程</p><p>作用：将工作包分解为活动，作为对项目工作进行估算、进度规划、执行、监督和控制的基础</p></blockquote><p><strong>输入：</strong></p><ol><li>项目进度计划<ul><li>进度管理计划</li><li>范围基准</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>分解</li><li>滚动式规划</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>活动清单</li><li>活动属性（时间、资源、等等）</li><li>里程碑清单</li><li>变更请求</li><li>项目管理计划更新<ul><li>进度基准</li><li>成本基准</li></ul></li></ol><h4 id="三、排列活动顺序（规划）"><a href="#三、排列活动顺序（规划）" class="headerlink" title="三、排列活动顺序（规划）"></a>三、排列活动顺序（规划）</h4><blockquote><p>识别和记录活动之间关系的过程</p><p>作用：定义工作之间的逻辑顺序，以便在既定的项目制约因素下获得最高效率</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>进度管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>活动属性</li><li>活动清单</li><li>假设日志</li><li>里程碑清单</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>紧前关系绘图法（PDM）</li><li>确定和整合依赖关系：硬逻辑、软逻辑</li><li>提前量和滞后量</li><li>项目管理信息系统</li></ol><p><strong>输出：</strong></p><ol><li>项目进度网络图</li><li>项目文件更新<ul><li>活动属性</li><li>活动清单</li><li>假设日志</li><li>里程碑清单</li></ul></li></ol><h4 id="四、估算活动时间（规划）"><a href="#四、估算活动时间（规划）" class="headerlink" title="四、估算活动时间（规划）"></a>四、估算活动时间（规划）</h4><blockquote><p>根据资源估算结果，估算完成单项活动所需的工作时段数的过程</p><p>作用：确定完成每个活动所需话费的时间量；工作量&#x3D;时间 X 资源</p></blockquote><p>收益递减规律：当持续加大投入资源时，当达到收益平衡点时，收益就会持续下降。（举例：卖牛肉面）</p><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>进度管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>活动属性</li><li>活动清单</li><li>假设日志</li><li>经验教训登记册</li><li>里程碑清单</li><li>项目团队派工单</li><li>资源分解结构</li><li>资源日历</li><li>资源需求</li><li>风险登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>类比估算</li><li>参数估算</li><li>自下而上估算</li><li>数据分析<ul><li>备选方案分析</li><li>储备分析</li></ul></li><li>决策</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>持续时间估算</li><li>估算依据</li><li>项目文件更新<ul><li>活动属性</li><li>假设日志</li><li>经验教训登记册</li></ul></li></ol><h4 id="五、制定进度计划（规划）"><a href="#五、制定进度计划（规划）" class="headerlink" title="五、制定进度计划（规划）"></a>五、制定进度计划（规划）</h4><blockquote><p>分析活动顺序、持续时间、资源需求和进度制约因素，创建进度模型，从而落实项目执行和监控过程。</p><p>作用：为完成项目活动而制定具有计划日期的进度模型</p></blockquote><p>关键法：</p><blockquote><p>在进度模型中，估算项目最短工期，确定逻辑网络路劲的进度灵活性大小的一种方法；关键路劲是项目时间最长的活动顺序，决定着可能的项目最短工期。关键</p></blockquote><p>关键链法：</p><blockquote><p>一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲，来应对资源限制和项目不确定性</p><p>需要考虑活动持续时间、逻辑关系和资源可用性，其中活动持续时间中不包含安全沉余。它用统计方法确定缓冲时段</p><blockquote><p>项目缓冲：放在关键链末端缓冲，保证项目不因关键链延误而延误</p><p>接驳缓冲：放置在非关键链与关键链的接合点，保护关键链不收非关键链延误影响。（防止关键路径变更）</p></blockquote><p>1、应对资源限制和项目不确定性</p><p>2、基于关键路径（计算完关键路径后）</p><p>3、资源约束性关键路劲就是关键链</p><p>4、不确定性决定缓冲时间长短</p><p>5、重点管理：剩余的缓冲持续时间与剩余的活动持续时间之间的匹配关系</p></blockquote><p>最早与最迟时间</p><blockquote><p>ES（Earliest Start）：活动能够开始的最早时间</p><p>EF（Earliest Finish）：活动能够完成的最早时间</p><p>LF（Latest Finish）：活动能够开始的最迟时间</p><p>LS（Latest Start）：活动能够完成的最迟时间</p><p>ES + DU &#x3D; EF</p><p>LF - DU &#x3D; LS</p><p>TF &#x3D; LS - ES &#x3D; LF - EF</p><table><thead><tr><th align="center">ES</th><th align="center">DU：持续时间</th><th align="center">EF</th></tr></thead><tbody><tr><td align="center"></td><td align="center">活动ID（活动名称）</td><td align="center"></td></tr><tr><td align="center">LS</td><td align="center">TF：总浮动时间</td><td align="center">LF</td></tr></tbody></table></blockquote><p>顺推：MAX（EF1，EF2。。。）</p><p>倒推：MIN（LS1，LS2。。。）</p><p>自由时间：FF &#x3D; ES（后一节点） - EF（当前活动）</p><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>进度管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>活动属性</li><li>活动清单</li><li>假设日志</li><li>估算依据</li><li>持续时间估算</li><li>经验教训登记册</li><li>里程碑清单</li><li>项目进度网络图</li><li>项目团队派工单</li><li>资源日历</li><li>资源需求</li><li>风险登记册</li></ul></li><li>协议</li><li>事业环境因素</li></ol><p><strong>工具与技术：</strong></p><ol><li>进度网络分析</li><li>关键路劲法</li><li>资源优化</li><li>数据分析<ul><li>假设情景</li><li>模拟</li></ul></li><li>提前量和滞后量</li><li>进度压缩</li><li>项目管理信息系统</li><li>敏捷发布规划</li></ol><p><strong>输出：</strong></p><ol><li>进度基准（给发起人和相关方的高层级概要）</li><li>项目进度计划</li><li>进度数据</li><li>项目日历</li><li>项目管理计划更新<ul><li>进度管理计划</li><li>风险管理计划</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>活动属性</li><li>假设日志</li><li>持续时间估算</li><li>经验教训登记册</li><li>资源需求</li><li>风险登记册</li></ul></li></ol><h4 id="六、控制进度（监控）"><a href="#六、控制进度（监控）" class="headerlink" title="六、控制进度（监控）"></a>六、控制进度（监控）</h4><blockquote><p>监督项目状态，更新项目进度和管理进度基准变更的过程</p><p>作用：保持对进度基准的维护</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>进度管理计划</li><li>进度基准</li><li>范围基准</li><li>绩效测量标准</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>项目日历</li><li>项目进度计划</li><li>资源日历</li><li>进度数据</li></ul></li><li>工作绩效数据</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>数据分析<ul><li>挣值分析</li><li>迭代燃烧图</li><li>绩效评审</li><li>趋势分析</li><li>偏差分析</li><li>假设情景分析</li></ul></li><li>关键路径法</li><li>项目管理信息系统</li><li>资源优化</li><li>提前量和滞后量</li><li>进度压缩</li></ol><p><strong>输出：</strong></p><ol><li>工作绩效信息</li><li>进度预测</li><li>变更请求</li><li>项目管理计划更新<ul><li>进度管理计划</li><li>进度基准</li><li>成本基准</li><li>绩效测量基准</li></ul></li><li>项目文件更新<ul><li>假设日志</li><li>估算依据</li><li>经验教训登记册</li><li>项目进度计划</li><li>资源日历</li><li>风险等级册</li><li>进度数据</li></ul></li></ol><h2 id="成本-项目成本管理"><a href="#成本-项目成本管理" class="headerlink" title="成本-项目成本管理"></a>成本-项目成本管理</h2><blockquote><p>为使用项目在批准的预算内完成而对成本进行规划、估算、预算、融资、周知、管理和控制的各个过程</p><p>目的：确保项目在批准的预算内完工</p></blockquote><p>核心概念：</p><blockquote><p><strong>项目生命周期成本：</strong>完成项目活动所需的成本；重点关注完成项目活动所需资源的成本，但同时也应考虑项目决策对项目产品、服务或成果的使用成本、维护成本和支持成本的影响</p><p><strong>多次测量时机：</strong>不同的相关方会在不同的时间，用不同的方法测算项目成本。例如：对于某采购品，可在做出采购决策、下达订单、实际交货、实际成本发生或进行会计记账时，测算其成本</p><p><strong>项目内或项目外成本分析：</strong>在很多组织中，预测和分心项目产品的财务效益是在项目之外进行的，但对于有些项目，如固定资产投资项目，可在项目成本管理中进行这项预测和分析工作。可用方法：通用财务管理技术，如投资回报率分析、现金流贴现分析和投资回收期分析</p></blockquote><h5 id="经营性财务知识"><a href="#经营性财务知识" class="headerlink" title="经营性财务知识"></a>经营性财务知识</h5><ol><li><p>可变成本</p><blockquote><p>随生产量或工作而变的成本，如人员工资，消耗的原材料等</p></blockquote></li><li><p>固定成本</p><blockquote><p>不随生产规模变化的非重复成本，如设备费用、场地租赁费用等</p></blockquote></li><li><p>直接成本</p><blockquote><p>能够直接归属于项目工作的成本，如项目组旅行费用、项目组人员工资和奖金、项目使用的物资等</p></blockquote></li><li><p>间接成本</p><blockquote><p>一般管理费用科目或几个项目共同分担的成本。如员工福利、保安费用、行政部门和财务部门费用等</p></blockquote></li><li><p>机会成本</p><blockquote><p>因为选择一个机会而放弃的另外一个机会可以获得的收益；例如一个人投资炒股赚10万，而同期如果买商品房的话可以赚500万。如果此人投资超过而没有买商品房，则选择炒股的机会成本就是500万</p></blockquote></li><li><p>沉没成本</p><blockquote><p>哪些在过去发生的费用，就像沉船一样不能回收的部分。当决定继续投资项目时，不应该考虑这部分费用。当决定项目是否该继续时，许多人像赌徒一样的心里指望能够收回沉没成本</p></blockquote></li></ol><h3 id="四个过程组"><a href="#四个过程组" class="headerlink" title="四个过程组"></a>四个过程组</h3><h4 id="一、规划成本管理（规划）"><a href="#一、规划成本管理（规划）" class="headerlink" title="一、规划成本管理（规划）"></a>一、规划成本管理（规划）</h4><blockquote><p>确定如何估算、预算。管理。监督和控制项目成本的过程</p><p>作用：在整个项目为如何管理项目成本提供指南和方向</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>进度管理计划</li><li>风险管理计划</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据分析</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>成本管理计划</li></ol><h4 id="二、估算成本（规划）"><a href="#二、估算成本（规划）" class="headerlink" title="二、估算成本（规划）"></a>二、估算成本（规划）</h4><blockquote><p>对完成项目工作所需资源成本进行近似估算的过程</p><p>作用：确定项目所需的资金，是对成本的预测</p><p>在估算成本时，需要识别和分析可用于启动与完成项目的备选成本方案</p><p>需要权衡备选成本方案并考虑等闲，以优化项目成本</p><p>进行成本估算，应该考虑将向项目收费的全部资源</p></blockquote><p>估算成本单位：通常用某种获取单位，如美元、欧元、人民币等；但有时也采用其他计量单位，如人时或人天数，以消除同伙膨胀的映像，便于成本比较</p><p>估算过程是渐进明细的：启动阶段可得出项目的粗略量级估算（ROM）：-25%-+75%；随着信息越来越详细，估算区间可缩小为：-5%-+10%</p><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>成本管理计划</li><li>质量管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>项目进度计划</li><li>资源需求</li><li>风险登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>类比估算</li><li>参数估算</li><li>自下而上估算</li><li>三点估算</li><li>数据分析<ul><li>备选方案分析</li><li>储备分析</li><li>质量成本</li></ul></li><li>项目管理信息系统</li><li>决策<ul><li>投票</li></ul></li></ol><p><strong>输出：</strong></p><ol><li>成本估算</li><li>估算依据</li><li>项目文件更新<ul><li>假设日志</li><li>经验登记册</li><li>风险登记册</li></ul></li></ol><h4 id="三、制定预算（规划）"><a href="#三、制定预算（规划）" class="headerlink" title="三、制定预算（规划）"></a>三、制定预算（规划）</h4><blockquote><p>汇总所有单个活动或工作包的估算成本，简历一个经批准的成本基线的过程；以WBS为重要依据</p><p>作用：确定成本基准，可据此监督和控制项目绩效</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>成本管理计划</li><li>资源管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>估算依据</li><li>成本估算</li><li>项目进度计划</li><li>风险登记册</li></ul></li><li>商业文件<ul><li>商业论证</li><li>效益管理计划</li></ul></li><li>协议</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>成本汇总</li><li>数据分析<ul><li>储备分析</li></ul></li><li>历史信息审核</li><li>资金限制平衡</li><li>融资</li></ol><p><strong>输出：</strong></p><ol><li>成本基准</li><li>项目资金需求</li><li>项目文件更新<ul><li>成本估算</li><li>项目进度计划</li><li>风险登记册</li></ul></li></ol><h4 id="四、控制成本（监控）"><a href="#四、控制成本（监控）" class="headerlink" title="四、控制成本（监控）"></a>四、控制成本（监控）</h4><blockquote><p>监督项目状态、以更新项目成本，管理成本基准变更的过程。</p><p>作用：在整个项目期间保持对成本基准的维护</p><p>重点分析：项目资金支出与相应完成的实际工作之间的关系</p><p>有效成本控制的关键：在于与经批准的成本基准及其变更进行管理</p><p>确保成本支持不超过批准的资金限额：既不超出按时段、按WBS组件、按活动分配的限额，也不超出项目总限额</p></blockquote><p><strong>变更管理：</strong></p><ul><li>影响不必要的变更</li><li>及时处理变更</li><li>管理已发生的变更</li><li>防止在成本或资源使用报告中出现未经批准的变更</li><li>向相关方报告所有经批准的变更及其相关成本</li></ul><p><strong>控制成本&amp;进度：</strong></p><ul><li>确保成本支出不超过批准的资金限额，既不超出按时段、按WBS组件。按活动分配的限额，也不超出项目总限额</li><li>没法把逾期的成本超支控制在可接受的范围内</li></ul><p><strong>监督绩效：</strong></p><ul><li>监督成本绩效，找出并分析与成本基准间的偏差</li><li>对照资金支出，监督工作</li></ul><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>成本管理计划</li><li>成本基准</li><li>绩效测量基准</li></ul></li><li>项目文件<ul><li>经验教训登记册</li></ul></li><li>项目资金需求</li><li>项目绩效数据</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li><p>专家判断</p></li><li><p>数据分析</p><ul><li>挣值分析</li><li>偏差分析</li><li>趋势分析</li><li>储备分析</li></ul></li><li><p>完工尚需绩效指数</p><blockquote><p>TCPI：在项目执行的不通时间点估算的为在既定预算内完工而必须达到的未来成本绩效</p><p>TCPI &#x3D; （BAC -  EC）&#x2F; （BAC - AC）</p></blockquote></li><li><p>项目管理信息系统</p></li></ol><p><strong>输出：</strong></p><ol><li>工作绩效信息</li><li>成本预测</li><li>变更请求</li><li>项目管理计划更新<ul><li>成本管理计划</li><li>成本基准</li><li>绩效测量基准</li></ul></li><li>项目文件更新<ul><li>假设日志</li><li>估算依据</li><li>成本估算</li><li>经验教训登记册</li><li>风险登记册</li></ul></li></ol><h2 id="质量-项目质量管理"><a href="#质量-项目质量管理" class="headerlink" title="质量-项目质量管理"></a>质量-项目质量管理</h2><blockquote><p>把最值的质量政策应用于规划、管理、控制项目和产品的质量要求已满足相关方目标的各个过程</p><p>项目质量管理确定项目需求，包括产品需求得到满足和确认</p><p>不担关注可交付成果的质量，还要关注过程的质量（管理过程、设计过程）</p></blockquote><p><strong>质量：</strong>在功能相等的情况下进行比较</p><p><strong>等级：</strong>功能多少叫做等级</p><p><strong>精确：</strong>精密程度的度量，重复测量的结果非常聚合，离散度很小</p><p><strong>准确：</strong>对正确性的评估，测量值非常接近实际值</p><h3 id="三个过程组"><a href="#三个过程组" class="headerlink" title="三个过程组"></a>三个过程组</h3><h4 id="一、规划质量管理（规划）"><a href="#一、规划质量管理（规划）" class="headerlink" title="一、规划质量管理（规划）"></a>一、规划质量管理（规划）</h4><blockquote><p>识别项目及其可交付成果的质量要求和标准，并书面描述项目将如何证明符合质量要求和标准的过程</p><p>作用：在整个项目奇迹如何管理和核实质量提供指南和方向</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>需求管理计划</li><li>风险管理计划</li><li>相关方参与计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>假设日志</li><li>需求文件</li><li>需求跟踪矩阵</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集<ul><li>标杆对照</li><li>头脑风暴</li><li>访谈</li></ul></li><li>数据分析<ul><li>成本效益分析</li><li>质量成本</li></ul></li><li>决策<ul><li>多标准决策分析</li></ul></li><li>数据表现<ul><li>流程图</li><li>逻辑数据模型</li><li>矩阵图</li><li>思维导图</li></ul></li><li>测试和检查规划</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>质量管理计划</li><li>质量测量指标</li><li>项目管理计划更新<ul><li>风险管理计划</li><li>范围基准</li></ul></li><li>项目文件更新<ul><li>经验教训登记册</li><li>风险登记册</li><li>相关方登记册</li></ul></li></ol><h4 id="二、管理质量（规划）"><a href="#二、管理质量（规划）" class="headerlink" title="二、管理质量（规划）"></a>二、管理质量（规划）</h4><blockquote><p>把组织的主梁政策用于项目，并且质量管理计划转化为可执行的质量活动的过程</p><p>作用：提高实现质量目标的可能性，一级识别无效过程的导致质量低劣的原因</p><p>管理质量使用控制质量过程的数据和结果向相关方专事项目的总体质量状态</p></blockquote><p><strong>问题解决：</strong></p><ol><li>定义问题</li><li>识别根本性原因</li><li>生成可能的解决方案</li><li>选择最佳解决方案</li><li>执行解决方案</li><li>验证解决方案的有效性</li></ol><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>质量管理计划</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>质量控制测量结果</li><li>质量测量指标</li><li>风险报告</li></ul></li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>数据收集<ul><li>核对单</li></ul></li><li>数据分析<ul><li>备选方案分析</li><li>文件分析</li><li>过程分析</li><li>根本原因分析</li></ul></li><li>决策<ul><li>多标准决策分析</li></ul></li><li>数据表现<ul><li>亲和图</li><li>因果图</li><li>流程图</li><li>直方图</li><li>矩阵图</li><li>散点图</li></ul></li><li>审计</li><li>面向X的设计</li><li>问题解决</li><li>质量改进方法</li></ol><p><strong>输出：</strong></p><ol><li>质量报告</li><li>测试与凭借文件（测试用例）</li><li>变更请求</li><li>项目管理计划更新<ul><li>质量管理计划</li><li>范围基准</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>问题日志</li><li>经验教训登记册</li><li>风险登记册</li></ul></li></ol><h4 id="三、控制质量（监控）"><a href="#三、控制质量（监控）" class="headerlink" title="三、控制质量（监控）"></a>三、控制质量（监控）</h4><blockquote><p>评估绩效，确保项目输出完整、正确且满足客户期望，而监督和记录质量管理活动执行结果的过程</p><p>作用：核实项目可交付成果和工作已经达到主要相关方的质量要求，可供最终验证（先内部确认满足验收标准）</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>质量管理计划</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>质量测量指标</li><li>测试与评价文件</li></ul></li><li>批准的变更请求</li><li>可交付成果</li><li>工作绩效数据</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>数据收集<ul><li>核对单</li><li>核查表</li><li>统计抽样</li><li>问卷调查</li></ul></li><li>数据分析<ul><li>绩效审查</li><li>根本原因分析</li></ul></li><li>检查</li><li>测试&#x2F;产品评估</li><li>数据表现<ul><li>因果图</li><li>控制图</li><li>直方图</li><li>散点图</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>质量控制测量结果</li><li>核实的可交付成果</li><li>工作绩效信息</li><li>变更请求</li><li>项目管理计划更新<ul><li>质量管理计划</li></ul></li><li>项目文件更新<ul><li>问题日志</li></ul></li><li>经验教训登记册</li><li>风险登记册</li><li>测试与评估文件</li></ol><h2 id="资源-项目资源管理"><a href="#资源-项目资源管理" class="headerlink" title="资源-项目资源管理"></a>资源-项目资源管理</h2><blockquote><p>识别、获取和管理所需资源以成功完成项目的各个过程，这些过程有助于确保项目经理和项目团队在正确的时间和正确的地点使用正确的资源</p></blockquote><h3 id="六个过程组-2"><a href="#六个过程组-2" class="headerlink" title="六个过程组"></a>六个过程组</h3><h4 id="一、规划资源管理（规划）"><a href="#一、规划资源管理（规划）" class="headerlink" title="一、规划资源管理（规划）"></a>一、规划资源管理（规划）</h4><blockquote><p>如何估算、获取、管理和利用团队以及实物资源的过程。</p><p>作用：根据项目类型和复杂程度确定适用于项目资源的管理方法和管理程度</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>质量管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>项目进度计划</li><li>需求文件</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据表现<ul><li>层级型</li><li>责任分配矩阵</li><li>文本型</li></ul></li><li>组织理论</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>资源管理计划</li><li>团队章程</li><li>项目文件更新<ul><li>假设日志</li><li>风险登记册</li></ul></li></ol><h4 id="二、估算活动资源（规划）"><a href="#二、估算活动资源（规划）" class="headerlink" title="二、估算活动资源（规划）"></a>二、估算活动资源（规划）</h4><blockquote><p>是估算执行项目所需的团队资源，以及材料、设备和用品的类型和数量的过程</p><p>作用：明确完成项目所需的资源种类、数量和特性</p><p>以便做出更准确的成本和持续时间估算</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>活动属性</li><li>活动清单</li><li>假设日志</li><li>成本估算</li><li>资源日历</li><li>风险登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>自下而上估算</li><li>类比估算</li><li>参数估算</li><li>数据分析<ul><li>备选方案分析</li></ul></li><li>项目管理信息系统</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>资源需求</li><li>估算依据</li><li>资源分解结构</li><li>项目文件更新<ul><li>活动属性</li><li>假设日志</li><li>经验教训登记册</li></ul></li></ol><h4 id="三、获取资源（执行）"><a href="#三、获取资源（执行）" class="headerlink" title="三、获取资源（执行）"></a>三、获取资源（执行）</h4><blockquote><p>获取团队成员、设施、设备、材料、用品和其他资源的过程</p><p>作用：概述和指导资源的选择，并将其分配给相应的活动</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li><li>采购管理计划</li><li>成本基准</li></ul></li><li>项目文件<ul><li>项目进度计划</li><li>资源日历</li><li>资源需求</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>决策<ul><li>多标准决策分析</li></ul></li><li>人际关系与团队技能<ul><li>谈判</li></ul></li><li>预分派</li><li>虚拟团队</li></ol><p><strong>输出：</strong></p><ol><li>物质资源分派单</li><li>项目团队派工单</li><li>资源日历</li><li>变更请求</li><li>项目管理计划更新<ul><li>资源管理计划</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>经验教训登记册</li><li>项目进度计划</li><li>资源分解结构</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><h4 id="四、建设项目团队（执行）"><a href="#四、建设项目团队（执行）" class="headerlink" title="四、建设项目团队（执行）"></a>四、建设项目团队（执行）</h4><blockquote><p>提高工作能力，促进团队成员互动，改善团队整体氛围，以提高项目绩效的过程</p><p>作用：提升整体项目绩效</p><ol><li>改进团队协作</li><li>增强人际技能</li><li>激励团队成员</li><li>降低人员离职率</li></ol></blockquote><p>特克曼阶梯理论：</p><p>非正式沟通和活动有助于建立信任和良好的工作关系；团队建设是持续性过程</p><ol><li><p>形成阶段</p><blockquote><p>项目认识，并了解项目情况以及在项目中的正式角色与职责。倾向于相互独立，不怎么开诚布公</p></blockquote></li><li><p>震荡阶段</p><blockquote><p>开始从事项目工作，制定技术决策和讨论项目管理方法。对不同观点和意见不能采取合作开放的态度，团队环境能恶化成破坏性的</p></blockquote></li><li><p>规范阶段</p><blockquote><p>开始协同工作，并按团队的需要来调整各自的工作习惯和行为，团队成员相互信任</p></blockquote></li><li><p>成熟阶段</p><blockquote><p>像一个组织有序的单位那样工作。团队成员之间相互依靠，平稳高效的解决问题</p></blockquote></li><li><p>解散阶段</p><blockquote><p>团队完成所有工作，团队成员离开项目</p></blockquote></li></ol><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>项目团队派工单</li><li>资源日历</li><li>团队章程</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li><p>集中办公</p><blockquote><p>作用：增进沟通和集体感的设施</p></blockquote></li><li><p>虚拟团队</p></li><li><p>沟通技术</p><blockquote><p>作用：为集中办公团队营造融洽的环境；促进虚拟团队更好的相互理解</p></blockquote><ul><li><p>冲突管理</p></li><li><p>影响力</p></li><li><p>激励</p></li><li><p>谈判</p></li><li><p>团队建设</p><blockquote><p>通过举办各种活动，强化团队的社交关系，打造积极合作的工作环境</p></blockquote></li></ul></li><li><p>认可与奖励</p><blockquote><p>对成员的优良香味给予认可与奖励；满足被将奖励者的某个重要需求的奖励才是有效的奖励。（大多人都能做好的工作）</p></blockquote></li><li><p>培训</p><blockquote><p>弥补差距</p></blockquote></li><li><p>个人和团队评估</p><blockquote><p>让项目经理和项目团队洞察成员的优势和劣势</p><p>帮助项目经理评估团队成员的偏好和愿望，团队成员如何处理和整理信息、如何制定决策，以及如何与他人打交道</p><p>增进团队成员间的理解、信任、承诺和沟通，不断提高团队成效</p></blockquote></li><li><p>会议</p></li></ol><p><strong>输出：</strong></p><ol><li>团队绩效评价</li><li>变更请求</li><li>项目管理计划更新<ul><li>资源管理计划</li></ul></li><li>项目文件更新<ul><li>经验教训登记册</li><li>项目进度计划</li><li>项目团队派工单</li><li>资源日历</li><li>团队章程</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><h4 id="五、管理项目团队（执行）"><a href="#五、管理项目团队（执行）" class="headerlink" title="五、管理项目团队（执行）"></a>五、管理项目团队（执行）</h4><blockquote><p>跟踪团队成员工作表现，提供反馈，解决问题并管理团队变更，以优化项目绩效的过程</p><p>作用：影响团队行为、管理冲突以解决问题</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li></ul></li><li>项目文件<ul><li>问题日志</li><li>经验教训登记册</li><li>项目团队派工单</li><li>团队章程</li></ul></li><li>工作绩效报告</li><li>团队绩效评价</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>人际关系与团队技能<ul><li>冲突管理</li><li>制定决策</li><li>情商</li><li>影响力</li><li>领导力</li></ul></li><li>项目管理信息系统</li></ol><p><strong>输出：</strong></p><ol><li>变更请求</li><li>项目管理计划更新<ul><li>资源管理计划</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>问题日志</li><li>经验教训登记册</li><li>项目团队派工单</li></ul></li><li>事业环境因素</li></ol><h4 id="六、控制资源-（监控）"><a href="#六、控制资源-（监控）" class="headerlink" title="六、控制资源 （监控）"></a>六、控制资源 （监控）</h4><blockquote><p>确定按计划为项目分配实物资源，以及根据资源使用计划监督资源实际使用情况，并采取必要纠正措施的过程</p><p>作用：确保分配的资源适时的可用于项目，且在不再需要时被释放</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li></ul></li><li>项目文件<ul><li>问题日志</li><li>经验教训登记册</li><li>物质资源分配单</li><li>项目进度计划</li><li>资源分解结构</li><li>资源需求</li><li>风险登记册</li></ul></li><li>工作绩效数据</li><li>协议</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>数据分析<ul><li>备选方案分析</li><li>成本效益分析</li><li>绩效审查</li><li>趋势分析</li></ul></li><li>问题解决</li><li>人际关系与团队技能<ul><li>谈判</li><li>影响力</li></ul></li><li>项目管理信息系统</li></ol><p><strong>输出：</strong></p><ol><li>工作绩效信息</li><li>变更请求</li><li>项目管理计划更新<ul><li>资源管理计划</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>假设日志</li><li>问题日志</li><li>经验教训登记册</li><li>物质资源分配单</li><li>资源分解结构</li><li>风险登记册</li></ul></li></ol><h2 id="沟通-项目沟通管理"><a href="#沟通-项目沟通管理" class="headerlink" title="沟通-项目沟通管理"></a>沟通-项目沟通管理</h2><blockquote><p>通过开发工件，以及执行用于有效交换信息的各种活动，来确保项目及其相关方的信息需求得以满足的各个过程</p></blockquote><h3 id="三个过程组-1"><a href="#三个过程组-1" class="headerlink" title="三个过程组"></a>三个过程组</h3><h4 id="一、规划沟通管理（规划）"><a href="#一、规划沟通管理（规划）" class="headerlink" title="一、规划沟通管理（规划）"></a>一、规划沟通管理（规划）</h4><blockquote><p>基于每个相关方或相关方群体信息需求、可用的组织资产，以及具体项目的需求，为项目沟通活动制定恰当的方法和计划的过程</p><p>作用：为及时向相关方提供相关信息，引导相关方有效参与项目，编制书面沟通计划</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>资源管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件<ul><li>需求文件</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>沟通需求分析</li><li>沟通技术</li><li>沟通模型</li><li>沟通方法</li><li>人际关系与团队技能<ul><li>沟通风格评估</li><li>政治意识</li><li>文化意识</li></ul></li><li>数据分析<ul><li>相关方参与度评估矩阵</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>沟通管理计划</li><li>项目管理计划更新<ul><li>相关方管理计划</li></ul></li><li>项目文件更新<ul><li>项目进度计划</li><li>相关方登记册</li></ul></li></ol><h4 id="二、管理沟通（执行）"><a href="#二、管理沟通（执行）" class="headerlink" title="二、管理沟通（执行）"></a>二、管理沟通（执行）</h4><blockquote><p>确保项目信息及时且恰当的收集、生成、发布、存储、检索、管理、监督和最终处置的过程</p><p>作用：促成项目团队与相关方之间的有效信息流动</p></blockquote><p>沟通渠道计算：n X（n - 1）&#x2F; 2</p><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件<ul><li>变更日志</li><li>问题日志</li><li>经验教训登记册</li><li>质量报告</li><li>风险报告</li><li>相关方登记册</li></ul></li><li>工作绩效报告</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>沟通技术</li><li>沟通方法</li><li>沟通技能<ul><li>沟通能力</li><li>反馈</li><li>非语言</li><li>演示</li></ul></li><li>项目关系信息系统</li><li>人际关系与团队技能<ul><li>积极倾听</li><li>冲突管理</li><li>文化意识</li><li>会议管理</li><li>人际交往</li><li>政治意识</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>项目沟通管理计划</li><li>项目管理计划更新<ul><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件更新<ul><li>问题日志</li><li>经验教训登记册</li><li>项目进度计划</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>组织过程资产</li></ol><h4 id="三、监督沟通（监控）"><a href="#三、监督沟通（监控）" class="headerlink" title="三、监督沟通（监控）"></a>三、监督沟通（监控）</h4><blockquote><p>确保满足项目及相关放的信息需求过程</p><p>作用：按沟通计划和相关方参与计划的要求优化信息传递流程</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件<ul><li>问题日志</li><li>经验教训登记册</li><li>项目沟通记录</li></ul></li><li>工作绩效数据</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>项目管理信息系统</li><li>数据表现<ul><li>相关方参与度评估矩阵</li></ul></li><li>人际关系与团队技能<ul><li>观察、交谈</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>工作绩效信息</li><li>变更请求</li><li>项目沟通计划更新<ul><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件更新<ul><li>问题日志</li><li>经验教训登记册</li><li>相关方登记册</li></ul></li></ol><h2 id="风险-项目风险管理"><a href="#风险-项目风险管理" class="headerlink" title="风险-项目风险管理"></a>风险-项目风险管理</h2><blockquote><p>规划风险管理、识别风险、开展风险分析、规划风险应对、实时风险应对和监督风险的各个过程</p><p>作用：提高积极事件的概率和影响；降低消极事件的概率和影响，从而提高项目成功的可能性</p></blockquote><p>风险态度：风险承受力、风险偏好、风险临界值</p><h3 id="七个过程组-1"><a href="#七个过程组-1" class="headerlink" title="七个过程组"></a>七个过程组</h3><h4 id="一、规划风险管理（规划）"><a href="#一、规划风险管理（规划）" class="headerlink" title="一、规划风险管理（规划）"></a>一、规划风险管理（规划）</h4><blockquote><p>定义如何实施项目风险管理活动的过程</p><p>作用：确保风险管理水平、方法和可监督与项目风险程度，以及项目对组织和其他相关方的重要程序相匹配</p></blockquote><p>已知风险：项目团队能够识别和分析的风险；也就是风险事件、概率和影响都知道的风险</p><p>未知风险：指无法进行主动管理的风险，就是风险事件、概率、影响这3个要素至少有一个不知道的风险</p><blockquote><ul><li>已知-未知：风险是已知的，但是不知道风险发生的概率和影响（应急储备）</li><li>未知-未知：风险是未知的，发生的概率和影响也不知道（管理储备）</li></ul></blockquote><p>概率影响矩阵：</p><blockquote><p>概率 X 影响 &#x3D; 风险值（敞口）</p></blockquote><ul><li>对风险进行优先排序</li><li>用颜色深浅代表风险高低</li><li>优先处理威胁高或机会大的风险</li></ul><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>所有组件</li></ul></li><li>项目文件<ul><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据分析<ul><li>相关方分析</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>风险管理计划</li></ol><h4 id="二、识别风险（规划）"><a href="#二、识别风险（规划）" class="headerlink" title="二、识别风险（规划）"></a>二、识别风险（规划）</h4><blockquote><p>识别单个项目风险以及整体项目风险的来源，并记录风险特征的过程；识别风险时，要同时开率单个项目风险，以及整体项目风险的来源</p><p>作用：</p><ul><li>记录单个风险</li><li>记录整体风险来源</li><li>汇集相关信息</li><li>以便项目团队能够恰当对已识别的风险</li></ul></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>需求管理计划</li><li>进度管理计划</li><li>成本管理计划</li><li>质量管理计划</li><li>资源管理计划</li><li>风险管理计划</li><li>范围基准</li><li>成本基准</li><li>进度基准</li></ul></li><li>项目文件<ul><li>假设日志</li><li>成本估算</li><li>持续时间估算</li><li>问题日志</li><li>经验教训登记册</li><li>需求文件</li><li>资源需求</li><li>相关方登记册</li></ul></li><li>协议</li><li>采购文件</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集<ul><li>头脑风暴</li><li>核对单</li><li>访谈</li></ul></li><li>数据分析<ul><li>根本原因分析</li><li>假设条件</li><li>制约因素分析</li><li>SWOT分析</li><li>文件分析</li></ul></li><li>人机关及与团队技能<ul><li>引导</li></ul></li><li>提示清单</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>风险登记册（单个）</li><li>风险报告（整体）</li><li>项目文件更新<ul><li>假设日志</li><li>问题日志</li><li>经验教训登记册</li></ul></li></ol><h4 id="三、实施定性风险分析（规划）"><a href="#三、实施定性风险分析（规划）" class="headerlink" title="三、实施定性风险分析（规划）"></a>三、实施定性风险分析（规划）</h4><blockquote><p>通过评估单个项目风险发生的概率和影响以及特征，对风险进行优先级排序，从而为后续分析或行动提供基础的过程</p><p>作用：重点关注高优先级的风险</p><p>定性四步走：</p><ol><li>以主观方式评价风险发生的相对概率湖可能性，风险发生后对项目目标的影响</li><li>根据上述分析结果评估风险的优先级</li><li>考虑风险态度、评估风险紧迫性、识别风险责任人</li><li>确定哪些风险进度实施定量风险分析过程</li></ol></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>风险管理计划</li></ul></li><li>项目文件<ul><li>假设日志</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li><p>专家判断</p></li><li><p>数据收集</p><ul><li>访谈</li></ul></li><li><p>数据分析</p><ul><li><p>风险数据质量评估</p><blockquote><p>单个项目风险的数据的准确性和可靠性，消除主观偏见的影响</p></blockquote></li><li><p>风险概率影响评估</p><blockquote><p>特定风险发生的可能性，影响评估考虑的是风险对一项或多项项目目标的潜在影响</p></blockquote></li><li><p>其他风险参数评估</p><blockquote><p>在对单个项目风险进行优先级排序时，项目团队可能考虑（除概率和影响以外的）其他风险特征</p></blockquote></li></ul></li><li><p>人际关系与团队技能</p><ul><li>引导</li></ul></li><li><p>风险分类</p></li><li><p>数据表现</p><ul><li>概率影响矩阵</li><li>层级图</li></ul></li><li><p>会议</p></li></ol><p><strong>输出：</strong></p><ol><li>项目文件更新<ul><li>假设日志</li><li>问题日志</li><li>风险登记册</li><li>风险报告</li></ul></li></ol><h4 id="四、实施定量风险分析（规划）"><a href="#四、实施定量风险分析（规划）" class="headerlink" title="四、实施定量风险分析（规划）"></a>四、实施定量风险分析（规划）</h4><blockquote><p>已识别的单个项目风险和不确定性的其他来源对整体项目目标的影响进行定量分析过程（不是每个项目必须）</p><p>作用：量化整体项目风险敞口，并提供额外的定量风险信息，以支持风险应对规划</p></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>风险管理计划</li><li>范围基准</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件<ul><li>假设日志</li><li>估算依据</li><li>成本估算</li><li>成本预测</li><li>持续时间估算</li><li>理成本清单</li><li>资源需求</li><li>风险登记册</li><li>风险报告</li><li>进度预测</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集<ul><li>访谈</li></ul></li><li>人际关系与团队技能<ul><li>引导</li></ul></li><li>不确定性表现方式</li><li>数据分析<ul><li>模拟</li><li>敏感性分析</li><li>决策树分析</li><li>影响图</li></ul></li></ol><p><strong>输出：</strong></p><ol><li>项目文件更新<ul><li>风险报告</li></ul></li></ol><h4 id="五、规划风险应对（规划）"><a href="#五、规划风险应对（规划）" class="headerlink" title="五、规划风险应对（规划）"></a>五、规划风险应对（规划）</h4><blockquote><p>处理整体项目风险敞口，以及应对单个项目风险，而制定可选方案、选择应对策略并商定应对行动的过程</p><p>作用：</p><ul><li>制定应对整体项目风险和单个项目风险的适当方法</li><li>分配资源，并根据需要将相关活动添加进项目文件和项目管理计划</li></ul></blockquote><p>风险应对措施：有效和适当的风险对应可以最小化单位畏怯，最大化单个机会，并降低整体项目风险敞口；不恰当的风险应对则会适得其反</p><blockquote><ul><li>必须与风险重要性匹配</li><li>能经济有效的应对挑战，选择最可能有效的策略和策略组合</li><li>获得全体相关方同意</li><li>有一名责任人具体负责</li><li>PM还需应对项目整体风险</li></ul></blockquote><p>残余风险：采取措施后仍然存在的风险，以及有意接收的风险（如：买车险）</p><p>次生风险：执行应对风险措施导致新的风险，即如果不应对前一个风险便不会发生这个风险（如：买房要承担房价波动）</p><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>资源管理计划</li><li>风险管理计划</li><li>成本基准</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>项目进度计划</li><li>项目团队派工单</li><li>资源日历</li><li>风险登记册</li><li>风险报告</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集<ul><li>访谈</li></ul></li><li>人际关系与团队技能<ul><li>引导</li></ul></li><li>威胁应对策略</li><li>机会应对策略</li><li>应急应对策略</li><li>整体项目风险应对策略</li><li>数据分析<ul><li>备选方案分析</li><li>成本效益分析</li></ul></li><li>决策<ul><li>多标准决策分析</li></ul></li></ol><p><strong>输出：</strong></p><ol><li>变更请求</li><li>项目管理计划更新<ul><li>进度管理计划</li><li>成本管理计划</li><li>质量管理计划</li><li>资源管理计划</li><li>采购管理计划</li><li>范围基准</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>假设日志</li><li>成本预测</li><li>经验教训登记册</li><li>项目进度计划</li><li>项目团队派工单</li><li>风险登记册</li><li>风险报告</li></ul></li></ol><h4 id="六、实施风险应对（执行）"><a href="#六、实施风险应对（执行）" class="headerlink" title="六、实施风险应对（执行）"></a>六、实施风险应对（执行）</h4><blockquote><p>执行商定的风险应对计划的过程</p><p>作用：</p><ul><li>确保按计划执行商定风险应对措施</li><li>来管理整体项目风险敞口</li><li>最小化单个项目威胁</li><li>最大化单个项目机会</li></ul></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>风险管理计划</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>风险登记册</li><li>风险报告</li></ul></li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>人际关系与团队技能<ul><li>影响力</li></ul></li><li>项目管理信息系统</li></ol><p><strong>输出：</strong></p><ol><li>变更请求</li><li>项目文件更新<ul><li>问题日志</li><li>经验教训登记册</li><li>项目团队派工单</li><li>风险登记册</li><li>风险报告</li></ul></li></ol><h4 id="七、监督风险（监控）"><a href="#七、监督风险（监控）" class="headerlink" title="七、监督风险（监控）"></a>七、监督风险（监控）</h4><blockquote><p>监督商定的风险应对计划的实施、跟踪已识别风险、识别和分析新风险，以及评估风险管理有效性的过程</p><p>作用：</p><ul><li>使项目决策都基于关于整体项目风险敞口和单个项目风险的当前信息</li><li>确保项目团队和关键相关方了解当前的风险敞口级别</li><li>通过监督风险过程对项目工作尽享持续监督</li><li>发现新出现、正在变化和已过时的单个项目风险</li></ul></blockquote><p>监督风险的目的：</p><blockquote><p>采用项目执行期间生成的绩效信息，以确定：</p><ul><li>实施的风险应对是否有效</li><li>整体项目风险级别是否已改变</li><li>已识别单个项目风险的状态是否已改变</li><li>是否出现新的单个项目风险</li><li>风险管理方法是否依然适用</li><li>项目假设条件是否仍然成立</li><li>风险管理政策和程序是否已得到遵守</li><li>成本或进度应急储备是否需要修改</li><li>项目策略是否让然有效</li></ul></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>风险管理计划</li></ul></li><li>项目文件<ul><li>问题日志</li><li>经验教训登记册</li><li>风险报告</li></ul></li><li>工作绩效数据</li><li>工作绩效报告</li></ol><p><strong>工具与技术：</strong></p><ol><li>数据分析<ul><li>技术绩效分析</li><li>储备分析</li></ul></li><li>审计</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>工作绩效信息</li><li>变更请求</li><li>项目管理计划更新<ul><li>任何组件</li></ul></li><li>项目文件更新<ul><li>假设日志</li><li>问题日志</li><li>经验教训登记册</li><li>风险登记册</li><li>风险报告</li></ul></li><li>组织过程资产更新</li></ol><h2 id="采购-项目采购管理"><a href="#采购-项目采购管理" class="headerlink" title="采购-项目采购管理"></a>采购-项目采购管理</h2><blockquote><p>从项目团队外部采购或获取所需产品、服务或成果的各个过程</p><ul><li>包括编制和管理协议所需的管理和控制过程，如：合同、订购单、协议备忘录，或服务书评</li><li>被授权采购的人员：项目团队、管理层或组织采购部的成员</li></ul></blockquote><h3 id="三个过程组-2"><a href="#三个过程组-2" class="headerlink" title="三个过程组"></a>三个过程组</h3><h4 id="一、规划采购管理（规划）"><a href="#一、规划采购管理（规划）" class="headerlink" title="一、规划采购管理（规划）"></a>一、规划采购管理（规划）</h4><blockquote><p>记录项目的采购决策、明确采购方法、及识别潜在卖方的过程</p><p>作用：确定是否需要外部支持，如果需要，则还要决定采购什么、如何采购、采购多少，以及何时采购</p></blockquote><p>合同类型比较：</p><table><thead><tr><th align="center">名称</th><th align="center">缩写</th><th align="center">特点</th><th align="center">风险（买方）</th><th align="center">使用场景</th></tr></thead><tbody><tr><td align="center">固定总价</td><td align="center">FFP</td><td align="center">一口价：不容易改变范围</td><td align="center">买方最小</td><td align="center">产品外围很明确时</td></tr><tr><td align="center">总价加激励</td><td align="center">FPIF</td><td align="center">总价基础上加激励费用</td><td align="center">买方小，但比FFP大</td><td align="center">增加灵活性，激励买方</td></tr><tr><td align="center">总价加经济价格调整</td><td align="center">FPEPA</td><td align="center">允许条件变化，调整价格</td><td align="center">买方小，但比FPIF大</td><td align="center">履约时间长；买方支付货币不同于卖方</td></tr><tr><td align="center">工料合同</td><td align="center">T&amp;M</td><td align="center">单位时间固定价格，谈判快，不能快速确定范围</td><td align="center">双方均等</td><td align="center">范围不明确，缺乏项目管理能力</td></tr><tr><td align="center">成本价激励费</td><td align="center">CPIF</td><td align="center">奖励节约反对浪费</td><td align="center">买方大，卖方小</td><td align="center">范围不明确，有分摊比例的惩罚奖励条件</td></tr><tr><td align="center">成本价奖励费</td><td align="center">CPAF</td><td align="center">费用凭主观判断</td><td align="center">买方大，比CPIF大</td><td align="center">范围不明确，有买方主观的惩罚奖励条件</td></tr><tr><td align="center">成本价固定费</td><td align="center">CPFF</td><td align="center">费用是固定的额度</td><td align="center">买方大，比CPAF大</td><td align="center">范围不明确时</td></tr><tr><td align="center">成本加百分比</td><td align="center">CPPC</td><td align="center">花的多，给的多，买方参与多</td><td align="center">买方最大</td><td align="center">范围不明确，买方有较强的项目管理能力</td></tr></tbody></table><p><strong>输入：</strong></p><ol><li>项目章程</li><li>商业文件<ul><li>商业论证效</li><li>益管理计划</li></ul></li><li>项目管理计划<ul><li>范围管理计划</li><li>质量管理计划</li><li>资源管理计划</li><li>范围基准</li></ul></li><li>项目文件<ul><li>里程碑清单</li><li>项目团队派工单</li><li>需求文件</li><li>需求跟踪矩阵</li><li>资源需求</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li><p>专家判断</p></li><li><p>数据收集</p><ul><li>市场调研</li></ul></li><li><p>数据分析</p><ul><li>自制或外购分析</li></ul></li><li><p>供方选择分析</p></li><li><p>会议</p></li><li><p>采购管理计划</p></li><li><p>自制或外购决策</p></li><li><p>采购策略</p></li><li><p>招标文件</p></li><li><p>采购工作说明书</p></li><li><p>供方选择标准</p></li><li><p>独立成本估计</p></li><li><p>变更请求</p></li><li><p>项目文件更新</p><ul><li>经验教训登记册</li><li>里程碑清单</li><li>需求文件</li><li>需求跟踪矩阵</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li><p>组织过程资产</p></li></ol><h4 id="二、实施采购（执行）"><a href="#二、实施采购（执行）" class="headerlink" title="二、实施采购（执行）"></a>二、实施采购（执行）</h4><blockquote><p>获取卖方应答、选择卖方并授权合同的过程</p><p>作用：</p><ul><li>选定合格卖方并签署关于火舞或服务交付的法律协议</li><li>本过程的最后成果就是签订协议、包括正式合同</li></ul></blockquote><p>采购流程：资格预审》<strong>招标》投标》评标》授标》</strong>签协议</p><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>范围管理计划</li><li>需求管理计划</li><li>沟通管理计划</li><li>风险管理计划</li><li>采购管理计划</li><li>配置管理计划</li><li>成本基准</li></ul></li><li>项目文件<ul><li>经验教训登记册</li><li>项目进度计划</li><li>需求文件</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>采购文件</li><li>卖方建议书</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>广告投标人会议</li><li>数据分析<ul><li>建议书评价</li></ul></li><li>人际关系与团队技能<ul><li>谈判</li></ul></li></ol><p><strong>输出：</strong></p><ol><li>选定的卖方</li><li>协议</li><li>变更请求</li><li>项目管理计划更新<ul><li>需求管理计划</li><li>质量管理计划</li><li>沟通管理计划</li><li>风险管理计划</li><li>采购管理计划</li><li>范围基准</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>经验教训登记册</li><li>需求文件</li><li>需求跟踪矩阵</li><li>资源日历</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>组织过程资产</li></ol><h4 id="三、控制采购（监督）"><a href="#三、控制采购（监督）" class="headerlink" title="三、控制采购（监督）"></a>三、控制采购（监督）</h4><blockquote><p>管理采购关系，监督合同绩效，实施必要的变更和纠偏，以及关闭合同的过程</p><p>作用：</p><ul><li>确保买卖双方履行法律协议，满足项目需求</li><li>对大型项目，合同管理重点管理各个供应商之间的沟通</li><li>有的组织把合同管理当做独立于项目的一种组织职能</li><li>采购管理员可以是项目团队成员，但他通常向另一部门经理报告</li><li>需要把适当的项目管理过程应用于合同关系，实施多个层面的整合</li></ul></blockquote><p><strong>输入：</strong></p><ol><li><p>项目管理计划</p><ul><li>需求管理计划</li><li>风险管理计划</li><li>采购管理计划</li><li>变更管理计划</li><li>进度基准</li></ul></li><li><p>项目文件</p><ul><li>假设日志</li><li>经验教训登记册</li><li>里程碑清单</li><li>质量报告</li><li>需求文件</li><li>需求跟踪矩阵</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li><p>协议</p></li><li><p>采购文件</p></li><li><p>批准的变更请求</p></li><li><p>工作绩效数据</p></li><li><p>事业环境因素</p></li><li><p>组织过程资产</p></li><li><p>专家判断</p></li><li><p>索赔管理</p></li><li><p>数据分析</p><ul><li>绩效审查</li><li>挣值分析</li><li>趋势分析</li></ul></li><li><p>检查</p></li><li><p>审计</p></li></ol><p><strong>输出：</strong></p><ol><li>结束的采购</li><li>工作绩效信息</li><li>采购文档更新</li><li>变更请求</li><li>项目管理计划更新<ul><li>风险管理计划</li><li>采购管理计划</li><li>进度基准</li><li>成本基准</li></ul></li><li>项目文件更新<ul><li>经验教训登记册</li><li>资源需求</li><li>需求跟踪矩阵</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>组织过程资产</li></ol><h2 id="相关方-项目相关方管理"><a href="#相关方-项目相关方管理" class="headerlink" title="相关方-项目相关方管理"></a>相关方-项目相关方管理</h2><blockquote><p>识别能够影响项目或会受项目影响的人员、团体或组织，分析相关方对项目的期望和影响，制定合适的管理策略来有效调动相关方参与项目决策和执行</p><ul><li>项目相关方管理过程分析相关方期望</li><li>评估他们对项目或受项目影响程度</li><li>制定策略来有效的引导相关方支持项目决策、规划和执行</li><li>这些过程能够支持项目团队的工作</li></ul></blockquote><p>相关方管理原则：项目经理和团队正确识别并合理引导所有相关方参与的能力，能觉得项目的成败</p><blockquote><ol><li>需要反复识别出全部相关方（全部识别）</li><li>根据相关方的利益和影响对其分类，项目经理应该专注于与项目成功密切相关的重要关系上（重点管理）</li><li>相关方尽早参与项目工作，对项目至关重要，相关方的参与有助于其了解项目状况、从而支持项目（尽早参与）</li><li>充分发挥相关方的作用来促进项目成功</li><li>尽早面对消极相关方，如何面对积极相关方一样</li></ol></blockquote><p>相关方管理关注满意度：满意度、期望、态度、利益冲突</p><blockquote><ul><li>相关方满意度作为项目目标加以识别管理</li><li>引导相关方参与的关键是重视与所有相关方保持持续沟通（包括团队成员）</li><li>理解他们的需求和期望、处理所发生的问题、管理利益冲突</li><li>促进相关方参与项目决策和活动</li></ul></blockquote><p>相关方管理步骤：</p><ol><li>识别相关方</li><li>相关方优先级排序</li><li>管理相关方期望</li><li>持续识别相关方</li><li>收尾时获得关键相关方认可</li></ol><h3 id="四个-过程组"><a href="#四个-过程组" class="headerlink" title="四个 过程组"></a>四个 过程组</h3><h4 id="一、识别相关方（启动）"><a href="#一、识别相关方（启动）" class="headerlink" title="一、识别相关方（启动）"></a>一、识别相关方（启动）</h4><blockquote><p>定期识别项目相关方，分析和记录他们的利益、参与度、相互依赖性、影响力和对项目成功的潜在影响过程</p><p>作用：帮助项目经理经理对各个相关方或相关方群体的适度关注</p></blockquote><p>分类方法：</p><ul><li>权力：相关方的职权级别</li><li>利益：对项目成果的关心程度</li><li>影响：主动参与项目的程度</li><li>作用：改变项目计划或执行的能力</li></ul><p>权力-利益方格：</p><blockquote><p>权力高-利益高：重点管理</p><p>权力高-利益低：令其满意</p><p>权力低-利益高：随时告知</p><p>权力低-利益低：监督</p></blockquote><p><strong>输入：</strong></p><ol><li>项目章程</li><li>商业文件<ul><li>商业论证</li><li>效益管理计划</li></ul></li><li>项目管理计划<ul><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件<ul><li>变更日志</li><li>问题日志</li><li>需求文件</li></ul></li><li>协议</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集<ul><li>头脑风暴</li></ul></li><li>数据分析<ul><li>相关方分析</li><li>文件分析</li></ul></li><li>数据表现<ul><li>相关方映射分析&#x2F;表现</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>相关方登记册</li><li>变更请求</li><li>项目管理计划更新<ul><li>需求管理计划</li><li>沟通管理计划</li><li>风险管理计划</li><li>相关方参与管理计划</li></ul></li><li>项目文件更新<ul><li>假设日志</li><li>问题日志</li><li>风险登记册</li></ul></li></ol><h4 id="二、规划相关方参与（规划）"><a href="#二、规划相关方参与（规划）" class="headerlink" title="二、规划相关方参与（规划）"></a>二、规划相关方参与（规划）</h4><blockquote><p>根据相关方的需求、期望、利益和对项目的潜在影响，制定项目相关方参与项目的方法过程</p><p>作用：提供相关方进行有效互动的可行计划</p></blockquote><p>相关方参与水平：</p><ol><li>不知晓：不知道项目及其潜在影响</li><li>抵制：知晓项目和潜在影响，抵制变更</li><li>中立：知晓项目，既不支持，也不反对</li><li>支持：了解项目及其潜在影响，支持项目工作及其成果</li><li>领导：知晓项目和潜在影响，积极参与确保项目取得成功</li></ol><p><strong>输入：</strong></p><ol><li>项目章程</li><li>项目管理计划<ul><li>资源管理计划</li><li>沟通管理计划</li><li>风险管理计划</li></ul></li><li>项目文件<ul><li>假设日志</li><li>变更日志</li><li>问题日志</li><li>项目进度计划</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>协议</li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>数据收集<ul><li>标杆对照</li></ul></li><li>数据分析<ul><li>假设条件与制约因素分析</li><li>根本原因分析</li></ul></li><li>决策<ul><li>排列优先级&#x2F;排名</li></ul></li><li>数据表现<ul><li>思维导图</li><li>相关方参与度评估矩阵</li></ul></li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>相关方参与计划</li></ol><h4 id="三、管理相关方参与（执行）"><a href="#三、管理相关方参与（执行）" class="headerlink" title="三、管理相关方参与（执行）"></a>三、管理相关方参与（执行）</h4><blockquote><p>与相关方进行沟通和协作以满足其需求与期望、处理问题，并促进相关方合理参与的过程</p><p>作用：</p><ul><li>让项目经理能够提供相关方的支持，并尽可能降低相关方的地址</li><li>确保相关方明确了解项目目的、目标、收益和风险，以及他们的贡献将如何促进项目成功</li></ul></blockquote><p><strong>输入：</strong></p><ol><li>项目管理计划<ul><li>沟通管理计划</li><li>风险管理计划</li><li>相关方参与计划</li><li>变更管理计划</li></ul></li><li>项目文件<ul><li>变更日志</li><li>问题日志</li><li>经验教训登记册</li><li>相关方登记册</li></ul></li><li>事业环境因素</li><li>组织过程资产</li></ol><p><strong>工具与技术：</strong></p><ol><li>专家判断</li><li>沟通技巧<ul><li>反馈</li></ul></li><li>人际关系与团队技能<ul><li>冲突管理</li><li>文化意识</li><li>谈判</li><li>观察&#x2F;交谈</li><li>政治意识</li></ul></li><li>基本规则</li><li>会议</li></ol><p><strong>输出：</strong></p><ol><li>变更请求</li><li>项目管理计划更新<ul><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件更新<ul><li>变更日志</li><li>问题日志</li><li>经验教训登记册</li><li>相关方登记册</li></ul></li></ol><h4 id="四、控制相关方参与（监督）"><a href="#四、控制相关方参与（监督）" class="headerlink" title="四、控制相关方参与（监督）"></a>四、控制相关方参与（监督）</h4><blockquote><p>监督相关方关系，并通过修订参与策略和计划来引导相关方合理参与项目的过程</p><p>作用：随着项目进展和环境变化，维持或提升相关方参与活动的效率和效果</p><blockquote><p>效率：确保相关方按照计划参与了应该参与的项目活动</p><p>效果：相关方仅需要参加需要参与的项目活动</p></blockquote></blockquote><p><strong>输入：</strong></p><ol><li><p>项目管理计划</p><ul><li>资源管理计划</li><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li><p>项目文件</p><ul><li>问题日志</li><li>经验校训登记册</li><li>项目沟通记录</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li><p>工作绩效数据</p></li><li><p>事业环境因素</p></li><li><p>组织过程资产</p></li><li><p>数据分析</p><ul><li>备选方案分析</li><li>根本原因分析</li><li>相关方分析</li></ul></li><li><p>决策</p><ul><li>多标准决策分析</li><li>投票</li></ul></li><li><p>数据表现</p><ul><li>相关方参与度评估矩阵</li></ul></li><li><p>沟通技能</p><ul><li>反馈</li><li>演示</li></ul></li><li><p>人际关系与团队技能</p><ul><li>积极倾听</li><li>文化意识</li><li>领导力</li><li>人际交往</li><li>政治意识</li></ul></li><li><p>会议</p></li></ol><p><strong>输出：</strong></p><ol><li>工作绩效信息</li><li>变更请求</li><li>项目管理计划更新<ul><li>资源管理计划</li><li>沟通管理计划</li><li>相关方参与计划</li></ul></li><li>项目文件更新<ul><li>问题日志</li><li>经验教训登记册</li><li>风险登记册</li><li>相关方登记册</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>PMP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAC替换Homebrew源</title>
    <link href="/20201119/4ac54c55147f.html"/>
    <url>/20201119/4ac54c55147f.html</url>
    
    <content type="html"><![CDATA[<h1 id="homebrew长时间停在Updating-Homebrew-这个步骤"><a href="#homebrew长时间停在Updating-Homebrew-这个步骤" class="headerlink" title="homebrew长时间停在Updating Homebrew 这个步骤"></a>homebrew长时间停在Updating Homebrew 这个步骤</h1><p>在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。</p><p>例：执行 brew install composer 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ brew install composer<br>Updating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法<br></code></pre></td></tr></table></figure><h2 id="方法-1：按住-control-c-取消本次更新操作"><a href="#方法-1：按住-control-c-取消本次更新操作" class="headerlink" title="方法 1：按住 control + c 取消本次更新操作"></a>方法 1：按住 control + c 取消本次更新操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ brew install composer<br>Updating Homebrew...<br>^C<br></code></pre></td></tr></table></figure><p>按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作</p><p>大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  ~ brew install composer<br>Updating Homebrew...<br>^C==&gt; Satisfying dependencies<br>==&gt; Downloading https://getcomposer.org/download/1.7.2/composer.phar<br>...<br></code></pre></td></tr></table></figure><p>这个方法是临时的、一次性的</p><h2 id="方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速"><a href="#方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速" class="headerlink" title="方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速"></a>方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速</h2><p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：</p><ol><li>brew.git</li><li>homebrew-core.git</li><li>homebrew-bottles</li></ol><p>通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址</p><h3 id="1-替换-x2F-还原-brew-git-仓库地址"><a href="#1-替换-x2F-还原-brew-git-仓库地址" class="headerlink" title="1. 替换 &#x2F; 还原 brew.git 仓库地址"></a>1. 替换 &#x2F; 还原 brew.git 仓库地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">替换成阿里巴巴的 brew.git 仓库地址:</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">=======================================================</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还原为官方提供的 brew.git 仓库地址</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://github.com/Homebrew/brew.git<br></code></pre></td></tr></table></figure><h3 id="2-替换-x2F-还原-homebrew-core-git-仓库地址"><a href="#2-替换-x2F-还原-homebrew-core-git-仓库地址" class="headerlink" title="2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址"></a>2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">替换成阿里巴巴的 homebrew-core.git 仓库地址:</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">=======================================================</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还原为官方提供的 homebrew-core.git 仓库地址</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://github.com/Homebrew/homebrew-core.git<br></code></pre></td></tr></table></figure><h3 id="3-替换-x2F-还原-homebrew-bottles-访问地址"><a href="#3-替换-x2F-还原-homebrew-bottles-访问地址" class="headerlink" title="3. 替换 &#x2F; 还原 homebrew-bottles 访问地址"></a>3. 替换 &#x2F; 还原 homebrew-bottles 访问地址</h3><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p><p>所以，先来查看当前使用的 shell 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $SHELL<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式</span><br></code></pre></td></tr></table></figure><h4 id="3-1-zsh-终端操作方式"><a href="#3-1-zsh-终端操作方式" class="headerlink" title="3.1 zsh 终端操作方式"></a>3.1 zsh 终端操作方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">替换成阿里巴巴的 homebrew-bottles 访问地址:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">=======================================================</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.zshrc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure><h4 id="3-2-bash-终端操作方式"><a href="#3-2-bash-终端操作方式" class="headerlink" title="3.2 bash 终端操作方式"></a>3.2 bash 终端操作方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">替换 homebrew-bottles 访问 URL:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">=======================================================</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.bash_profile<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.bash_profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>奇淫技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MAC</tag>
      
      <tag>Homebrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins打Docker镜像推送到私有仓库</title>
    <link href="/20200923/627cd0e638e2.html"/>
    <url>/20200923/627cd0e638e2.html</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins打Docker镜像推送到私有仓库"><a href="#Jenkins打Docker镜像推送到私有仓库" class="headerlink" title="Jenkins打Docker镜像推送到私有仓库"></a>Jenkins打Docker镜像推送到私有仓库</h1><blockquote><p>因为我的Jenkins是安装在群晖NAS中的docker，所以我这边就以Docker安装Jenkins为例</p></blockquote><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923212025.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;================Docker开始==============&#x27;<br><br>echo &#x27;================登陆阿里云私有镜像仓库==============&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">定义镜像名称</span><br>IMAGE_NAME=&quot;scm&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前目录</span><br>pwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下</span><br>cd scm-web<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前目录</span><br>pwd<br>echo &quot;# 登陆阿里云docker私有仓库&quot;<br>docker login --username=$&#123;username&#125; --password=$&#123;password&#125; registry.cn-hangzhou.aliyuncs.com<br>echo &quot;# 打镜像tag&quot;<br>docker -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125; $WORKSPACE/scm-web<br>echo &quot;# 推送到仓库&quot;<br>docker push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 删除本地镜像&quot;<br>docker rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 退出私有仓库&quot;<br>docker logout <br><br>echo &#x27;================Docker结束==============&#x27;<br><br>echo &quot;部署镜像 ===============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;&quot;<br></code></pre></td></tr></table></figure><p>如果上来就直接jenkins sh构建运行shell脚本会报：<code> docker: command not found</code></p><p>如果普通docker，把宿主机的这两个文件挂载到jenkins容器中，就可以执行docker命令了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/var/run/docker.sock<br>/bin/docker<br></code></pre></td></tr></table></figure><p>这个是我在网上看到的教程，我还没试过。。。</p><p>有空会试试的，看看行不行。</p><hr><p>可以是我群晖NAS的docker，我是先在NAS的shell命令下找到docker文件，之后将该文件复制到homes目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">群晖NAS的docker文件在/usr/local/bin/下</span><br>cp /usr/local/bin/docker /volume1/homes/admin/jenkins_docker/bin<br></code></pre></td></tr></table></figure><p>之后就在群晖NAS的web页面去操作docker容器，挂载目录。</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923213259.png"></p><p>再然后jenkins sh构建运行shell脚本会报：<code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p><p>这个是因为docker找不到守护进程，那么我们开启宿主机的2375端口。通过这种方式：<code>docker -H tcp://172.17.0.1:2375 version</code></p><p>参考文档：<a href="https://blog.csdn.net/liumiaocn/article/details/93749435">https://blog.csdn.net/liumiaocn/article/details/93749435</a></p><p>然后我们在脚本中添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;================Docker开始==============&#x27;<br><br>echo &#x27;================登陆阿里云私有镜像仓库==============&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">定义镜像名称</span><br>IMAGE_NAME=&quot;scm&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前目录</span><br>pwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下</span><br>cd scm-web<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前目录</span><br>pwd<br>echo &quot;# 登陆阿里云docker私有仓库&quot;<br>docker login --username=$&#123;username&#125; --password=$&#123;password&#125; registry.cn-hangzhou.aliyuncs.com<br>echo &quot;# 打镜像tag&quot;<br>docker -H tcp://172.17.0.1:2375 build -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125; $WORKSPACE/scm-web<br>echo &quot;# 推送到仓库&quot;<br>docker -H tcp://172.17.0.1:2375 push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 删除本地镜像&quot;<br>docker -H tcp://172.17.0.1:2375 rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 退出私有仓库&quot;<br>docker logout <br><br>echo &#x27;================Docker结束==============&#x27;<br><br>echo &quot;部署镜像 ===============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;&quot;<br></code></pre></td></tr></table></figure><p>至此就在Jenkins中应用保存。</p><p>接下来直接构建，查看控制台输出：</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214015.png"></p><p>我们在看下阿里云容器服务的镜像仓库有没有</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214126.png"></p><p>BingGo！！！</p><p>打完收工~~~</p>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins 集成 SonarQube Scanner</title>
    <link href="/20200922/23f659b1f714.html"/>
    <url>/20200922/23f659b1f714.html</url>
    
    <content type="html"><![CDATA[<h1 id="Jenkins-集成-SonarQube-Scanner"><a href="#Jenkins-集成-SonarQube-Scanner" class="headerlink" title="Jenkins 集成 SonarQube Scanner"></a>Jenkins 集成 SonarQube Scanner</h1><h2 id="1-安装Jenkins"><a href="#1-安装Jenkins" class="headerlink" title="1. 安装Jenkins"></a>1. 安装Jenkins</h2><p>下载安装包，这里我们下载war包：<a href="https://jenkins.io/download/">https://jenkins.io/download/</a></p><p>运行<strong>jenkins.war</strong>的方式有两种：</p><p>第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）</p><p>第二种：直接执行 <strong>java -jar jenkins.war –httpPort&#x3D;8080</strong></p><p>第三种：Docker方式部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看jenkins版本命令</span><br>docker search jenkins<br><span class="hljs-meta prompt_">#</span><span class="language-bash">拉取镜像命令(不标注表示最新的)</span><br>docker pull jenkins<br><span class="hljs-meta prompt_">#</span><span class="language-bash">本文的挂载目录是home下</span><br>mkdir /home/jenkins<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误</span><br>chown -R 1000:1000 /home/jenkins/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">运用镜像启动容器命令</span><br>docker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins<br></code></pre></td></tr></table></figure><p><a href="https://jenkins.io/doc/pipeline/tour/getting-started/">https://jenkins.io/doc/pipeline/tour/getting-started/</a></p><p>这里我们选择第一种方式</p><p>启动tomcat（bin&#x2F;startup.sh）访问 <a href="http://localhost:8080/jenkins/">http://localhost:8080/jenkins/</a></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png"></p><p>Jenkins安装完成。</p><h2 id="2-安装SonarQube-Scanner插件"><a href="#2-安装SonarQube-Scanner插件" class="headerlink" title="2.安装SonarQube Scanner插件"></a>2.安装SonarQube Scanner插件</h2><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png"></p><p>安装完成后、配置SonarQube</p><p>在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png"></p><p>接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token</p><p>在Jenkins中的系统配置中设置SonarQube servers的token</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png"></p><p>在Jenkins中的全局配置中安装SonarQube servers</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png"></p><h2 id="3-创建任务"><a href="#3-创建任务" class="headerlink" title="3.创建任务"></a>3.创建任务</h2><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png"></p><p>配置SVN或者GIT的配置</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png"></p><p>最最重要的是，配置SonarQube <strong>analysis properties</strong></p><p>可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">sonar.projectKey</span>=<span class="hljs-string">$&#123;JOB_NAME&#125;</span><br><span class="hljs-attr">sonar.sources</span>=<span class="hljs-string">.</span><br><span class="hljs-attr">sonar.projectName</span>=<span class="hljs-string">$&#123;JOB_NAME&#125;</span><br><span class="hljs-attr">sonar.projectVersion</span>=<span class="hljs-string">$&#123;BUILD_VERSION&#125;</span><br><br><span class="hljs-attr">sonar.language</span>=<span class="hljs-string">java</span><br><span class="hljs-attr">sonar.sourceEncoding</span>=<span class="hljs-string">UTF-8</span><br><br><span class="hljs-attr">sonar.sources</span>=<span class="hljs-string">$WORKSPACE</span><br><span class="hljs-attr">sonar.java.binaries</span>=<span class="hljs-string">$WORKSPACE</span><br></code></pre></td></tr></table></figure><p>其中，sonar.java.binaries属性至关重要，笔者也是试了好多次</p><p>相关文档在这里：</p><p><a href="https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties">https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties</a></p><p><a href="https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode">https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode</a></p>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>SonarQube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值</title>
    <link href="/20200702/3dc0d5e6a82c.html"/>
    <url>/20200702/3dc0d5e6a82c.html</url>
    
    <content type="html"><![CDATA[<h1 id="【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值"><a href="#【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值" class="headerlink" title="【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值"></a>【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值</h1><blockquote><p>实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。</p></blockquote><h2 id="获取请求参数RequestBody"><a href="#获取请求参数RequestBody" class="headerlink" title="获取请求参数RequestBody"></a>获取请求参数RequestBody</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpRequestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethodValue();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> request.getHeaders().getFirst(<span class="hljs-string">&quot;Content-Type&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equals(method)) &#123;<br>            <span class="hljs-keyword">return</span> DataBufferUtils.join(exchange.getRequest().getBody())<br>                    .flatMap(dataBuffer -&gt; &#123;<br>                        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[dataBuffer.readableByteCount()];<br>                        dataBuffer.read(bytes);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">bodyString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                            log.info(bodyString);<span class="hljs-comment">//打印请求参数</span><br>                            exchange.getAttributes().put(<span class="hljs-string">&quot;POST_BODY&quot;</span>, bodyString);<br>                        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        DataBufferUtils.release(dataBuffer);<br>                        Flux&lt;DataBuffer&gt; cachedFlux = Flux.defer(() -&gt; &#123;<br>                            <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> exchange.getResponse().bufferFactory()<br>                                    .wrap(bytes);<br>                            <span class="hljs-keyword">return</span> Mono.just(buffer);<br>                        &#125;);<br><br>                        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">mutatedRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerHttpRequestDecorator</span>(<br>                                exchange.getRequest()) &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> Flux&lt;DataBuffer&gt; <span class="hljs-title function_">getBody</span><span class="hljs-params">()</span> &#123;<br>                                <span class="hljs-keyword">return</span> cachedFlux;<br>                            &#125;<br>                        &#125;;<br>                        <span class="hljs-keyword">return</span> chain.filter(exchange.mutate().request(mutatedRequest)<br>                                .build());<br>                    &#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取请求响应值ResponseBody"><a href="#获取请求响应值ResponseBody" class="headerlink" title="获取请求响应值ResponseBody"></a>获取请求响应值ResponseBody</h2><p><strong>POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpResponseFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getPath().toString();<br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">originalResponse</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>        System.out.println(originalResponse.isCommitted());<br>        <span class="hljs-type">DataBufferFactory</span> <span class="hljs-variable">bufferFactory</span> <span class="hljs-operator">=</span> originalResponse.bufferFactory();<br><br>        <span class="hljs-type">ServerHttpResponseDecorator</span> <span class="hljs-variable">decoratedResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerHttpResponseDecorator</span>(originalResponse) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">writeWith</span><span class="hljs-params">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;<br><br>                <span class="hljs-keyword">if</span> (body <span class="hljs-keyword">instanceof</span> Flux) &#123;<br>                    Flux&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataBuffer</span>&gt; fluxBody = (Flux&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataBuffer</span>&gt;) body;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.writeWith(fluxBody.buffer().map(dataBuffer -&gt; &#123;<br>                        <span class="hljs-type">DataBufferFactory</span> <span class="hljs-variable">dataBufferFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultDataBufferFactory</span>();<br>                        <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">join</span> <span class="hljs-operator">=</span> dataBufferFactory.join(dataBuffer);<br>                        <span class="hljs-type">byte</span>[] content = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[join.readableByteCount()];<br>                        join.read(content);<br>                        <span class="hljs-comment">//释放掉内存</span><br>                        DataBufferUtils.release(join);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(content, StandardCharsets.UTF_8);<br><br>                        List&lt;String&gt; strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);<br>                        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(strings) &amp;&amp; strings.contains(<span class="hljs-string">&quot;gzip&quot;</span>)) &#123;<br>                            <span class="hljs-type">GZIPInputStream</span> <span class="hljs-variable">gzipInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                gzipInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GZIPInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(content), content.length);<br>                                <span class="hljs-type">StringWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>                                IOUtils.copy(gzipInputStream, writer, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                                s = writer.toString();<br><br>                            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                                log.error(<span class="hljs-string">&quot;====Gzip IO error&quot;</span>, e);<br>                            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                                <span class="hljs-keyword">if</span> (gzipInputStream != <span class="hljs-literal">null</span>) &#123;<br>                                    <span class="hljs-keyword">try</span> &#123;<br>                                        gzipInputStream.close();<br>                                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                                        log.error(<span class="hljs-string">&quot;===Gzip IO close error&quot;</span>, e);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(content, StandardCharsets.UTF_8);<br>                        &#125;<br>                        log.info(<span class="hljs-string">&quot;bodyString: &#123;&#125;&quot;</span>, s);<span class="hljs-comment">//打印请求响应值</span><br>                        <span class="hljs-keyword">return</span> bufferFactory.wrap(content);<br>                    &#125;));<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.writeWith(body);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Gateway</tag>
      
      <tag>全局过滤器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-JVM垃圾回收算法和垃圾收集器</title>
    <link href="/20200609/45bd6c7c3187.html"/>
    <url>/20200609/45bd6c7c3187.html</url>
    
    <content type="html"><![CDATA[<h1 id="JVM垃圾回收算法和垃圾收集器"><a href="#JVM垃圾回收算法和垃圾收集器" class="headerlink" title="JVM垃圾回收算法和垃圾收集器"></a>JVM垃圾回收算法和垃圾收集器</h1><h2 id="1-什么是垃圾回收"><a href="#1-什么是垃圾回收" class="headerlink" title="1.什么是垃圾回收"></a>1.什么是垃圾回收</h2><p>对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。</p><h3 id="引用计数法："><a href="#引用计数法：" class="headerlink" title="引用计数法："></a>引用计数法：</h3><p><em>每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。</em></p><p><strong>但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。</strong></p><h3 id="可达性分析："><a href="#可达性分析：" class="headerlink" title="可达性分析："></a>可达性分析：</h3><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png"></p><p>判断某个对象是否可到达。有两种方式判断是否可到达：</p><ol><li><p>直接引用（上帝视角GC Roots）：就是<strong>虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等</strong>中的引用直接到达。</p><p>为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？</p><p>因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。</p></li><li><p>间接引用：通过别人的引用来达到。</p></li></ol><p><strong>并发的可达性分析（并发标记、浮动垃圾）：<a href="https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A">https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A</a></strong></p><h2 id="2-垃圾回收的策略"><a href="#2-垃圾回收的策略" class="headerlink" title="2.垃圾回收的策略"></a>2.垃圾回收的策略</h2><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><ul><li><p><strong>标记-清除</strong></p><p>先标记</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png"></p><p>后清除</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png"></p><p>弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。</p><p>弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。</p><p>有点：简单、明了、好操作。</p></li><li><p><strong>标记-复制</strong></p><p>一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png"></p><p>在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png"></p><p>之后以此反复、两个循环往返。</p><p>类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。</p></li><li><p><strong>标记-整理</strong></p><p>先标记</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png"></p><p>后整理。</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png"></p><p>整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。</p></li></ul><hr><h3 id="垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】"><a href="#垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】" class="headerlink" title="垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】"></a>垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】</h3><p>串行：Serial系列；</p><p>并行【吞吐量优先】：Paraller系列；</p><blockquote><p>吞吐量：用户代码执行的时间 &#x2F; （用户代码执行的时间+垃圾收集时间）99&#x2F;(99+1)&#x3D;99%。</p><p>适用于后台运算，不需要太多的交互场景。</p></blockquote><p>并发【停顿时间优先】：CMS、G1；</p><blockquote><p>​适用于用户交互较多的场景，给用户更好的体验感；如Web应用。</p></blockquote><p>JVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。</p><p><strong>官方JVM垃圾收集器建议：</strong></p><ol><li>使用默认垃圾收集器</li><li>调整JVM堆的大小</li><li><ul><li>如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC</li><li>如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC</li><li>如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC</li><li>如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC</li></ul></li></ol><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png"></p><p><strong>G1（Garbage-First）：</strong>JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。</p><p>G1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png"></p><p>重新设计内存空间如图所示：</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png"></p><p>整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。</p><p>区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。</p><p>官方文档（G1垃圾收集器的前世今生）：<a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p><hr><h4 id="Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现"><a href="#Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现" class="headerlink" title="Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现"></a>Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现</h4><p><strong>Serial：</strong>JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配<strong>老年代的SerialOld</strong>配合使用。</p><p>这时会出现Stop The World（STW）</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png"></p><hr><p><strong>ParNew：</strong>并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量</p><p>复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png"></p><hr><p><strong>ParallelScavenge</strong></p><p>同上</p><hr><h4 id="Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现"><a href="#Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现" class="headerlink" title="Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现"></a>Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现</h4><p><strong>CMS：</strong>JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。</p><p>并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。</p><p>因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png"></p><p><strong>划分为四个阶段：初始标记、并发标记、重新标记、并发清理。</strong></p><p><strong>初始标记：</strong>第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。</p><p><strong>并发标记：</strong>第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是<strong>浮动垃圾（把原本消亡的对象错误的标记为存活状态）</strong>，只能等待下次清理。</p><p><strong>重新标记：</strong>第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。</p><p><strong>并发清理：</strong>第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。</p><p>特点：并发收集，停顿时间较少。</p><p>缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。</p><hr><p><strong>Serial Old：</strong>串行的</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png"></p><p><strong>Paraller Old：</strong>并行的</p><hr><p>如何查看当前JAVA程序应用使用的是什么垃圾收集器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看进程ID</span><br>jps -l<br>8720 org.jetbrains.jps.cmdline.Launcher<br>10212 org.jetbrains.idea.maven.server.RemoteMavenServer36<br>3764<br>15480 sun.tools.jps.Jps<br>4216 com.hopefun.scm.WebApplication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前进程下是否使用UseParallelGC</span><br>jinfo -flag UseParallelGC 4216<br>-XX:+UseParallelGC<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>垃圾收集器</tag>
      
      <tag>垃圾回收算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【环境安装】Kibana安装</title>
    <link href="/20200606/196696a206d9.html"/>
    <url>/20200606/196696a206d9.html</url>
    
    <content type="html"><![CDATA[<h1 id="【环境安装】Kibana安装"><a href="#【环境安装】Kibana安装" class="headerlink" title="【环境安装】Kibana安装"></a>【环境安装】Kibana安装</h1><p><strong>Kibana官方下载地址：<a href="https://www.elastic.co/cn/kibana">https://www.elastic.co/cn/kibana</a></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压安装包</span><br>tar -zxvf kibana-7.7.1-linux-x86_64.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser kibana #创建kibana用户<br>chown -R kibana $&#123;kibana解压所在目录&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换用户</span><br>su kibana<br></code></pre></td></tr></table></figure><p>Kibana配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server.port:</span> <span class="hljs-number">5601</span> <span class="hljs-comment">#启动端口号</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-comment">#ip访问限制</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://192.168.1.70:9200&quot;</span>]<span class="hljs-comment">#配置ES连接地址</span><br><span class="hljs-attr">elasticsearch.requestTimeout:</span> <span class="hljs-number">50000</span> <span class="hljs-comment">#Kibana连接ES超时时，可修改</span><br><span class="hljs-comment">#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span> <span class="hljs-comment">#就支持中文显示了。</span><br></code></pre></td></tr></table></figure><p>进入bin目录下，启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/kibana<br><span class="hljs-meta prompt_"># </span><span class="language-bash">后台启动</span><br>nohup bin/kibana &amp;<br></code></pre></td></tr></table></figure><p>插件安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/kibana-plugin list#查看已安装插件<br>bin/kibana-plugin install $&#123;插件名称&#125;  #安装插件<br>bin/kibana-plugin remove#卸载插件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>环境集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kibana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-JVM常用工具和优化</title>
    <link href="/20200515/3af21c7f6638.html"/>
    <url>/20200515/3af21c7f6638.html</url>
    
    <content type="html"><![CDATA[<h1 id="JVM-常用工具和优化"><a href="#JVM-常用工具和优化" class="headerlink" title="JVM 常用工具和优化"></a>JVM 常用工具和优化</h1><h2 id="JDK-自带的"><a href="#JDK-自带的" class="headerlink" title="JDK 自带的"></a>JDK 自带的</h2><h3 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h3><h3 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h3><h2 id="三方的工具"><a href="#三方的工具" class="headerlink" title="三方的工具"></a>三方的工具</h2><h3 id="arthas"><a href="#arthas" class="headerlink" title="arthas"></a>arthas</h3><h2 id="调优关注点（内存、GC）："><a href="#调优关注点（内存、GC）：" class="headerlink" title="调优关注点（内存、GC）："></a>调优关注点（内存、GC）：</h2><p><strong>内存</strong></p><ul><li>MAT</li><li>XElephant</li><li>在线：perfma</li></ul><p><strong>GC</strong></p><p>拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）</p><ul><li>本地：GCViewer</li><li>在线：gceasy.io</li></ul><hr><h1 id="在什么情况下调优"><a href="#在什么情况下调优" class="headerlink" title="在什么情况下调优"></a>在什么情况下调优</h1><h2 id="体现系统性能的参考因素"><a href="#体现系统性能的参考因素" class="headerlink" title="体现系统性能的参考因素"></a><strong>体现系统性能的参考因素</strong></h2><p>首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ </p><ul><li><strong>响应时间：</strong>响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。</li><li><strong>TPS：</strong>指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。</li><li><strong>计算机资源分配使用率：</strong>通常由 CPU 占用率、内存使用率、磁盘 I&#x2F;O、网络 I&#x2F;O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。</li></ul><h2 id="JVM-调优都做些什么？"><a href="#JVM-调优都做些什么？" class="headerlink" title="JVM 调优都做些什么？"></a><strong>JVM</strong> <strong>调优都做些什么？</strong></h2><p>具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。</p><ul><li><strong>内存空间的分配设置：</strong>JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。</li><li><strong>选择合适的垃圾回收器：</strong>垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。</li></ul><h2 id="是否需要-JVM-调优？"><a href="#是否需要-JVM-调优？" class="headerlink" title="是否需要 JVM 调优？"></a><strong>是否需要 JVM</strong> <strong>调优？</strong></h2><p>一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 </p><p>在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 </p><p>再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 </p><p>JVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。</p><h2 id="JVM错误排查与解决案例"><a href="#JVM错误排查与解决案例" class="headerlink" title="JVM错误排查与解决案例"></a>JVM错误排查与解决案例</h2><p><strong>JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题</strong></p><h3 id="案列一："><a href="#案列一：" class="headerlink" title="案列一："></a>案列一：</h3><p><strong>发现问题：</strong>JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】</p><p><strong>排查问题：</strong>打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）</p><p><strong>解决问题：</strong>适当增加堆内存空间，或者选择合适的垃圾收集器</p><h3 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a>案例二：</h3><p><strong>发现问题：</strong>OOM</p><p><strong>排查问题：</strong>在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）</p><p><strong>解决问题：</strong>如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例</p><h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><p><strong>发现问题：</strong>CPU负载过高</p><p><strong>排查问题：</strong>命令：topjpsjinfojstatjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大</p><p><strong>解决问题：</strong>具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求</p><h3 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h3><p><strong>发现问题：</strong>死锁</p><p><strong>排查问题：</strong>可以通过 jstack 命令去查看相关线程锁的信息</p><p><strong>解决问题：</strong>找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁</p><h3 id="案例五"><a href="#案例五" class="headerlink" title="案例五"></a>案例五</h3><p><strong>发现问题：</strong>线程池不够用了</p><p><strong>排查问题：</strong>通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的</p><p><strong>解决问题：</strong>适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-内存模型</title>
    <link href="/20200515/6249325e8128.html"/>
    <url>/20200515/6249325e8128.html</url>
    
    <content type="html"><![CDATA[<h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png"></p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png"></p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><blockquote><p>JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代</p><p>JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。</p></blockquote><h2 id="堆（分配内存会大一些）"><a href="#堆（分配内存会大一些）" class="headerlink" title="堆（分配内存会大一些）"></a>堆（分配内存会大一些）</h2><blockquote><p>分配对象、new 实例。</p><p>堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）</p><p>如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。</p></blockquote><h4 id="1-新生代（Young）"><a href="#1-新生代（Young）" class="headerlink" title="1.新生代（Young）"></a>1.新生代（Young）</h4><ol><li>new Object() ，实例化10个单位为1的对象 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 新生代分配</li><li>新生代内存不够用时，触发GC</li><li>GC之后，释放空间，会存在空间碎片</li><li>这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC</li><li>GC的弊端就是会消耗线程资源，stop the world。</li></ol><p><strong>以上的设计显然是不合理的，重新设计之后</strong></p><p>新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；</p><p>新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。</p><p>如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。</p><p><em>举例说明：</em></p><p>老年代：2G内存</p><p>新生代：1G内存</p><blockquote><p>Eden区800MB</p><p>S0，S1各100MB</p></blockquote><p>这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。</p><p><strong>新生代（Young）GC：Minor GC</strong></p><p><strong>老年代（Old）GC：Major GC</strong></p><ul><li><strong>Eden区</strong></li></ul><p>所有刚刚new出来的对象，就会分配在Eden区。</p><ul><li><strong>Survivor区</strong></li></ul><ol><li><p>S0、S1永远有一块内存是浪费的，一块被使用；</p></li><li><p>S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；</p></li><li><p>Eden&#x3D;80%；S0&#x3D;10%；S1&#x3D;10%；Eden：S0：S1&#x3D;8：1：1；</p></li><li><p>比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；</p></li><li><p>如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 &gt; 年龄15之后，会将该对象存放到老年代（Old）区；</p><p>假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。</p></li><li><p>极端情况，如果有个对象超过老年代内存直接OOM。</p></li></ol><h4 id="2-老年代（Old）"><a href="#2-老年代（Old）" class="headerlink" title="2.老年代（Old）"></a>2.老年代（Old）</h4><p>如果老年代的内存不够用了，会触发 <strong>Old GC</strong> 也可 称为 <strong>Major GC</strong>。Old GC会比较耗时。当然一旦触发了<strong>Old GC（Major GC）</strong>通常都会伴随着<strong>Young GC（Minor GC）</strong>。</p><p><strong>Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）&#x3D; Full GC</strong></p><p>调优的原则：</p><p>避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。</p><ol><li>尽量减少GC次数</li><li>尽量只触发Young GC（Minor GC）</li></ol><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png" style="zoom:150%;" /><p><strong>实操：</strong></p><p>在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test/jvm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJvmController</span> &#123;<br>    List&lt;AuthAccount&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-meta">@GetMapping(&quot;/jvmTest&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jvmTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthAccount</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的<strong>jvisualvm</strong>工具（这个工具是JDK自带的），<strong>首先还要安装Visual GC的插件才能查看到JVM GC运行时状况</strong>。</p><p>之后等待程序运行后，打开这个<strong>jvisualvm</strong>工具就可以查看到JVM内存运行时的状况</p><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png"></p><p>如果堆内存中，没有可分配的内存空间了，就会报OOM。</p><p>同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize&#x3D;40M -XX:MaxMetaspaceSize&#x3D;40M。</p><p>栈也会报OOM，首先我们先测试栈的深度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过递归操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">long</span> i)</span> &#123;<br>       System.out.println(count++);<br>       test(i);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       test(count);<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png"></p><p>通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。</p><p>可以根据需求去调整栈的深度大小；</p><p>一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。</p><p>通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-JVM常用的命令</title>
    <link href="/20200514/96a9eeac3fe1.html"/>
    <url>/20200514/96a9eeac3fe1.html</url>
    
    <content type="html"><![CDATA[<h1 id="JVM常用的命令"><a href="#JVM常用的命令" class="headerlink" title="JVM常用的命令"></a>JVM常用的命令</h1><h2 id="jps-：基础工具"><a href="#jps-：基础工具" class="headerlink" title="jps ：基础工具"></a>jps ：基础工具</h2><p>查看JAVA进程PID。</p><p><code>jps</code> 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。</p><p><code>jps</code> 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 <code>ps</code> 命令。</p><p><strong>jps 常用参数</strong></p><ul><li><code>jps -l</code> 如果是以 class 方式运行，会显示进程的主类 <code>main.class</code> 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名</li></ul><p>第一列的数字就是进程的 <code>pid</code></p><ul><li><code>jps -v</code> 输出传递给 JVM 的参数，<code>v</code> 表示虚拟机，<code>jps -vl</code> 比较常见的组合；</li><li><code>jps -V</code> 大写 <code>v</code>，表示通过文件传递给 JVM 的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Copy# michael @ Michael-MBP in ~ [<span class="hljs-number">16</span>:<span class="hljs-number">37</span>:<span class="hljs-number">59</span>]<br>$ jps -v |grep Mybatis<br><span class="hljs-number">8005</span> MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">53364</span>,suspend=y,server=n -XX:TieredStopAtLevel=<span class="hljs-number">1</span> -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=<span class="hljs-number">53363</span> -Dcom.sun.management.jmxremote.authenticate=<span class="hljs-literal">false</span> -Dcom.sun.management.jmxremote.ssl=<span class="hljs-literal">false</span> -Djava.rmi.server.hostname=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=<span class="hljs-literal">true</span> -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018<span class="hljs-number">.2</span>/captureAgent/debugger-agent.jar=file:/<span class="hljs-keyword">private</span>/<span class="hljs-keyword">var</span>/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><ul><li><code>jps -m</code> 输出传递给 <code>main.class</code> 方法的参数，实用的一个命令，<code>jps -ml</code> 比较实用的组合，会显示包名&#x2F;类名&#x2F;参数</li><li><code>jps -q</code> 只输出进程的 pid</li></ul><p>jps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。</p><p>有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 <code>jps -v</code> 查看进程的jvm参数情况。</p><hr><h2 id="jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、"><a href="#jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、" class="headerlink" title="jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、"></a>jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、</h2><p>参考原文：<a href="https://blog.csdn.net/yx0628/article/details/80958488">https://blog.csdn.net/yx0628/article/details/80958488</a></p><p><code>jinfo -flag initilHeapSize $&#123;PID&#125; </code>查看某个<strong>JAVA进程</strong>中，JVM的参数值是什么。</p><p><code>jinfo -flag $&#123;PID&#125; </code> 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@admin ~]# jinfo --help<br>Usage:<br>    jinfo [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jinfo [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br>where &lt;option&gt; is one of:<br>    -flag &lt;name&gt;         to print the value of the named VM flag<br>    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag<br>    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value<br>    -flags               to print VM flags<br>    -sysprops            to print Java system properties<br>    &lt;no option&gt;          to print both of the above<br>    -h | -help           to print this help message<br></code></pre></td></tr></table></figure><p>我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@admin ~]# jps<br>43520 Test<br>35900 Jps<br></code></pre></td></tr></table></figure><p>查看 JVM 参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@admin ~]# jinfo -flags 43520<br>Attaching to process ID 43520, please wait...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.45-b08<br><br>-Dfile.encoding=GBK<br></code></pre></td></tr></table></figure><p>查看系统参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@admin ~]# jinfo -sysflags 43520<br></code></pre></td></tr></table></figure><p>虚拟机的参数可以通过这个命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -XX:+PrintFlagsFinal -version | grep manageable<br></code></pre></td></tr></table></figure><p>除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">jinfo -flag +PrintGC 43520<br>jinfo -flag +PrintGCDetails 43520<br></code></pre></td></tr></table></figure><p>关闭 GC 日志的话同理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">jinfo -flag -PrintGC 43520<br>jinfo -flag -PrintGCDetails 43520<br></code></pre></td></tr></table></figure><p>查看是否开启 GC 日志的打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">jinfo -flag PrintGC 43520<br>jinfo -flag PrintGCDetails 43520<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@admin ~]# jinfo -flag PrintGC 43520<br>-XX:-PrintGC<br><br>[root@admin ~]# jinfo -flag PrintGCDetails 43520<br>-XX:-PrintGCDetails<br></code></pre></td></tr></table></figure><p>常用 JVM 参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">-Xms：初始堆大小，默认为物理内存的1/64(&lt;1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制<br>-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制<br>-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。<br>-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。<br>-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:&quot;-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。<br>-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。<br>-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。<br></code></pre></td></tr></table></figure><hr><h2 id="jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控"><a href="#jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控" class="headerlink" title="jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控"></a>jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控</h2><p>原文参考：<a href="https://blog.csdn.net/cockroach02/article/details/82670500">https://blog.csdn.net/cockroach02/article/details/82670500</a></p><p>查看JVM中相关性能的信息。</p><p>jstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java&#x2F;bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。</p><blockquote><p>类装载信息：<code>jstat -class $&#123;PID&#125;</code></p><p>举例：<code>jstat -class $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -class $&#123;PID&#125; 1000 10</code>。打印出过去10秒类加载的数据。</p></blockquote><blockquote><p>GC相关的情况：<code>jstat -gc $&#123;PID&#125;</code></p><p>举例：<code>jstat -gc $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -gc $&#123;PID&#125; 1000 10</code>。打印出过去10秒GC的数据。</p></blockquote><p><strong>参数说明：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -help<br>Usage: jstat -help|-options<br>       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br><br>Definitions:<br>  &lt;option&gt;      An option reported by the -options option<br>  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:<br>                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]<br>                Where &lt;lvmid&gt; is the local vm identifier for the target<br>                Java virtual machine, typically a process id; &lt;hostname&gt; is<br>                the name of the host running the target Java virtual machine;<br>                and &lt;port&gt; is the port number for the rmiregistry on the<br>                target host. See the jvmstat documentation for a more complete<br>                description of the Virtual Machine Identifier.<br>  &lt;lines&gt;       Number of samples between header lines.<br>  &lt;interval&gt;    Sampling interval. The following forms are allowed:<br>                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]<br>                Where &lt;n&gt; is an integer and the suffix specifies the units as<br>                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.<br>  &lt;count&gt;       Number of samples to take before terminating.<br>  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.<br></code></pre></td></tr></table></figure><p>由以上可知，jstat的命令的格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br></code></pre></td></tr></table></figure><p>我们可以通过jstat -options查看可以支持的具体参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -options<br>-class<br>-compiler<br>-gc<br>-gccapacity<br>-gccause<br>-gcmetacapacity<br>-gcnew<br>-gcnewcapacity<br>-gcold<br>-gcoldcapacity<br>-gcutil<br>-printcompilation<br></code></pre></td></tr></table></figure><p><strong>Option参数说明：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-class</td><td align="center">类加载的行为统计 Displays statistics about the behavior of the class loader.</td></tr><tr><td align="center">-compiler</td><td align="center">HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler.</td></tr><tr><td align="center">-gc</td><td align="center">垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap.</td></tr><tr><td align="center">-gccapacity</td><td align="center">各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces.</td></tr><tr><td align="center">-gccause</td><td align="center">垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events.</td></tr><tr><td align="center">-gcmetacapacity</td><td align="center">统计元空间使用情况 Displays statistics about the sizes of the metaspace.</td></tr><tr><td align="center">-gcnew</td><td align="center">显示新生代统计信息 Displays statistics of the behavior of the new generation.</td></tr><tr><td align="center">-gcnewcapacity</td><td align="center">统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces.</td></tr><tr><td align="center">-gcold</td><td align="center">统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics.</td></tr><tr><td align="center">-gcoldcapacity</td><td align="center">统计老年代内存使用情况 Displays statistics about the sizes of the old generation.</td></tr><tr><td align="center">-gcutil</td><td align="center">显示各个各代内存使用百分比 Displays a summary about garbage collection statistics.</td></tr><tr><td align="center">-printcompilation</td><td align="center">Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics.</td></tr></tbody></table><p><strong>使用示例：</strong></p><p><strong>jstat -class ： 类加载的行为统计</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -class 2284<br>Loaded  Bytes  Unloaded  Bytes     Time<br> 30116 75021.8       26    51.4      86.72<br></code></pre></td></tr></table></figure><ul><li>Loaded ：加载class的数量</li><li>Bytes ： 加载class的大小（单位KB）</li><li>Unloaded ：卸载class的数量</li><li>Bytes： 卸载class的大小（单位KB）</li><li>Time ： 加载和卸载class所耗费的时间</li></ul><p><strong>jstat -compiler ：HotSpt JIT编译器行为统计</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -compiler 2284<br>Compiled Failed Invalid   Time   FailedType FailedMethod<br>   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink<br></code></pre></td></tr></table></figure><ul><li>Compiled ：编译成功数</li><li>Failed ： 编译失败数</li><li>Invalid ： 无效数量</li><li>FailedType ： 最后一次编译失效类型</li><li>FailedMethod ：最后一次编译失效的方法</li></ul><p><strong>jstat -gc：垃圾回收堆的行为统计</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gc 2284<br> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br>104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221<br></code></pre></td></tr></table></figure><ul><li>S0C ： 第一个幸存区的总容量（KB）</li><li>S1C ： 第二个幸存区的总容量（KB）</li><li>S0U ： 第一个幸存区已使用的容量（KB）</li><li>S1U ： 第二个幸存区已使用的容量（KB）</li><li>EC ： 伊甸区的总容量（KB）</li><li>EU ： 伊甸区已使用容量（KB）</li><li>OC ： 老年区的总容量（KB）</li><li>MC ： 元空间的总容量（KB）</li><li>MU ： 元空间已使用容量（KB）</li><li>CCSC ： 压缩类空间总容量（KB）</li><li>CCSU ： 压缩类空间已使用总容量（KB）</li><li>YGC ： 新生代GC次数</li><li>YGCT ：新生代GC总耗费时间</li><li>FGC ： 老年代GC次数</li><li>FGCT ： 老年代GC总耗费时间</li><li>GCT ： GC总耗费时间</li></ul><p><strong>jstat -gccapacity ： 各个回收区内存情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gccapacity 2284<br> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC<br>1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0<br>59    11<br></code></pre></td></tr></table></figure><ul><li>NGCMN ： 新生代占用的最小空间大小（KB）</li><li>NGCMX ： 新生代占用的最大空间大小（KB）</li><li>NGC ： 当前新生代空间大小（KB）</li><li>S0C ： 第一幸存区当前空间大小（KB）</li><li>S1C ：第二幸存区当前空间大小（KB）</li><li>EC ： 伊甸区当前空间大小（KB）</li><li>OGCMN ： 老年区最小空间大小（KB）</li><li>OGCMX ： 老年区最大空间大小（KB）</li><li>OGC ： 老年区当前空间大小（KB）</li><li>MCMN ： 元空间最小空间大小（KB）</li><li>MCMX ： 元空间最大空间大小（KB）</li><li>MC ： 元空间当前空间大小（KB）</li><li>CCSMN ： 压缩类空间最小大小（KB）</li><li>CCSMX ： 压缩类最大空间大小（KB）</li><li>CCSC ： 压缩类当前空间大小（KB）</li><li>YGC ： 新生代GC次数</li><li>FGC ： 老年代GC次数</li></ul><p><strong>jstat -gccause ：垃圾收集统计概述</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gccause 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC<br>  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC<br></code></pre></td></tr></table></figure><ul><li>S0 ：第一幸存区已使用空间百分比.</li><li>S1 ： 第二幸存区已使用空间百分比</li><li>E ： 伊甸区已使用空间百分比</li><li>O ： 老年区已使用空间百分比</li><li>M ： 元空间使用百分比</li><li>CCS ： 压缩类空间使用百分比</li><li>YGC ： 新生代GC次数</li><li>FGC ： 老年代GC次数</li><li>LGCC ：最近一次GC原因</li><li>GCC ： 当前GC原因</li></ul><p><strong>6 . gc -gcmetacapacity ：元空间使用情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gcmetacapacity 2284<br>   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT<br>       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221<br><br></code></pre></td></tr></table></figure><ul><li>MCMN ： 元空间最小空间大小（KB）</li><li>MCMX ： 元空间最大空间大小（KB）</li><li>MC ： 元空间当前空间大小（KB）</li><li>CCSMN ： 压缩类空间最小空间大小（KB）</li><li>CCSMX ： 压缩类空间最大空间大小（KB）</li><li>CCSC ： 压缩类空间当前空间大小（KB）</li><li>YGC ： 新生代GC次数</li><li>FGC ： 老年代GC次数</li><li>FGCT： 老年代GC耗费时间</li><li>GCT ： GC总耗费时间</li></ul><p><strong>7 . jstat -gcnew ： 显示新生代统计信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gcnew 2284<br> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT<br>104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972<br></code></pre></td></tr></table></figure><ul><li>S0C ： 第一幸存区总空间大小（KB）</li><li>S1C ： 第二幸存区总空间大小（KB）</li><li>S0U ： 第一幸存区已使用空间大小（KB）</li><li>S1U ： 第二幸存区已使用空间大小（KB）</li><li>TT ： 提升阈值(提升阈值)</li><li>MTT ： 最大阈值</li><li>DSS ： survivor区域大小 (KB)</li><li>EC ： 伊甸区总空间大小（KB）</li><li>EU ： 伊甸区已使用空间大小（KB）</li></ul><p><strong>8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gcnewcapacity 2284<br>  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC<br> 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11<br></code></pre></td></tr></table></figure><ul><li>NGCMN ： 新生代最小空间大小（KB）</li><li>NGCMX ： 新生代最大空间大小（KB）</li><li>NGC ： 当前新生代空间大小（KB）</li><li>S0CMX ： 第一幸存区最大空间大小（KB）</li><li>S0C ： 第一幸存区当前空间大小（KB）</li><li>S1CMX ： 第二幸存区最大空间大小（KB）</li><li>S1C ： 第二幸存区当前空间大小（KB）</li><li>ECMX ： 伊甸区最大空间大小（KB）</li><li>EC ： 伊甸区当前空间大小（KB）</li><li>YGC ： 新生代GC次数</li><li>FGC ： 老年代GC次数</li></ul><p><strong>9 . jstat -gcold ： 统计老年代和元空间使用情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gcold 2284<br>   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT<br>251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295<br></code></pre></td></tr></table></figure><ul><li>MC ： 元空间总大小（KB）</li><li>MU ： 元空间已使用大小（KB）</li><li>CCSC ： 压缩类空间总大小（KB）</li><li>CCSU ： 压缩类空间已使用大小（KB）</li><li>OC ： 老年区空间总大小（KB）</li><li>OU ： 老年区已使用大小（KB）</li><li>YGC ： 新生代GC次数</li><li>FGC ： 老年代GC次数</li><li>FGCT ： 老年代GC总耗时</li><li>GCT ： GC总耗时</li></ul><p><strong>10 . jstat -gcoldcapacity ： 统计老年代内存使用情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gcoldcapacity 2284<br>   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT<br>  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295<br></code></pre></td></tr></table></figure><ul><li>OGCMN ：老年区占用最小空间（KB）</li><li>OGCMX ： 老年区占用最大空间（KB）</li><li>OGC ： 当前老年区空间（KB）</li><li>OC ： 当前老年区空间（KB）</li><li>YGC ：新生代GC次数</li><li>FGC ： 老年代GC次数</li><li>FGCT ： 老年代GC总耗时</li><li>GCT ： GC总耗时</li></ul><p><strong>11 . jstat -gcutil ： 垃圾回收统计</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -gcutil 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT<br> 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295<br></code></pre></td></tr></table></figure><ul><li>S0 ：第一幸存区已使用空间百分比.</li><li>S1 ： 第二幸存区已使用空间百分比</li><li>E ： 伊甸区已使用空间百分比</li><li>O ： 老年区已使用空间百分比</li><li>M ： 元空间使用百分比</li><li>CCS ： 压缩类空间使用百分比</li><li>YGC ： 新生代GC次数</li><li>FGC ： 老年代GC次数</li><li>GCT ：GC总耗时</li></ul><p><strong>12 . jstat -printcompilation ： Hotspot方法编译统计情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\Administrator&gt;jstat -printcompilation 2284<br>Compiled  Size  Type Method<br>   21538    150    1 java/util/Collections reverse<br></code></pre></td></tr></table></figure><ul><li>Compiled ： 已编译方法次数</li><li>Size ： 最近一次方法编译大小</li><li>Type ： 最近一次编译方法类型</li><li>Method ： 最近一次编译方法</li></ul><p>参考：</p><p>jstat：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html</a><br>jstat命令使用：<a href="https://www.cnblogs.com/lizhonghua34/p/7307139.html">https://www.cnblogs.com/lizhonghua34/p/7307139.html</a><br>JVM调优命令-jstat：<a href="https://www.cnblogs.com/myna/p/7567769.html">https://www.cnblogs.com/myna/p/7567769.html</a></p><hr><h2 id="jstack：查看某个Java进程内的线程堆栈信息"><a href="#jstack：查看某个Java进程内的线程堆栈信息" class="headerlink" title="jstack：查看某个Java进程内的线程堆栈信息"></a>jstack：查看某个Java进程内的线程堆栈信息</h2><p>参考原文：<a href="https://www.jianshu.com/p/8d5782bc596e">https://www.jianshu.com/p/8d5782bc596e</a></p><p>查看JAVA进程当中，线程内容。</p><p><strong>jstack用法</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">/opt/java8/bin/jstack<br><br>Usage:<br>    jstack [-l] &lt;pid&gt;<br>        (to connect to running process) 连接活动线程<br>    jstack -F [-m] [-l] &lt;pid&gt;<br>        (to connect to a hung process) 连接阻塞线程<br>    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;<br>        (to connect to a core file) 连接dump的文件<br>    jstack [-m] [-l] [<span class="hljs-symbol">server_id@</span>]&lt;remote server IP or hostname&gt;<br>        (to connect to a remote debug server) 连接远程服务器<br><br>Options:<br>    -F  to force a thread dump. Use <span class="hljs-keyword">when</span> jstack &lt;pid&gt; does not respond (process <span class="hljs-keyword">is</span> hung)<br>    -m  to print both java and native frames (mixed mode)<br>    -l  long listing. Prints additional information about locks<br>    -h or -help to print <span class="hljs-keyword">this</span> help message<br></code></pre></td></tr></table></figure><p><strong>jstack查看输出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/java8/bin/jstack -l 28367<br><br>2019-06-25 15:04:46<br>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):<br><br><span class="hljs-string">&quot;Attach Listener&quot;</span> <span class="hljs-comment">#453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]</span><br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class="hljs-string">&quot;grpc-default-executor-263&quot;</span> <span class="hljs-comment">#452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]</span><br>   java.lang.Thread.State: TIMED_WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x00000007400243f0&gt; (a java.util.concurrent.SynchronousQueue<span class="hljs-variable">$TransferStack</span>)<br>        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)<br>        at java.util.concurrent.SynchronousQueue<span class="hljs-variable">$TransferStack</span>.awaitFulfill(SynchronousQueue.java:460)<br>        at java.util.concurrent.SynchronousQueue<span class="hljs-variable">$TransferStack</span>.transfer(SynchronousQueue.java:362)<br>        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class="hljs-variable">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class="hljs-string">&quot;http-bio-8080-exec-10&quot;</span> <span class="hljs-comment">#235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x0000000743d26638&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="hljs-variable">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="hljs-variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)<br>        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class="hljs-variable">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at org.apache.tomcat.util.threads.TaskThread<span class="hljs-variable">$WrappingRunnable</span>.run(TaskThread.java:61)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br></code></pre></td></tr></table></figure><p><strong>jstack统计线程数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/opt/java8/bin/jstack -l 28367 | grep <span class="hljs-string">&#x27;java.lang.Thread.State&#x27;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p><strong>jstack检测死锁</strong></p><p><em>死锁代码</em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DeathLock</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lock lock1 = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Lock lock2 = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deathLock</span>()</span> &#123;<br>        Thread t1 = <span class="hljs-keyword">new</span> Thread() &#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock1.<span class="hljs-keyword">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                    lock2.<span class="hljs-keyword">lock</span>();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread t2 = <span class="hljs-keyword">new</span> Thread() &#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock2.<span class="hljs-keyword">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                    lock1.<span class="hljs-keyword">lock</span>();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        t1.setName(<span class="hljs-string">&quot;thread1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;thread2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        deathLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>死锁日志</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;mythread2&quot;</span> <span class="hljs-comment">#12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class="hljs-variable">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class="hljs-variable">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class="hljs-variable">$2</span>.run(DeathLock.java:34)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d640&gt; (a java.util.concurrent.locks.ReentrantLock<span class="hljs-variable">$Nonfa</span><br>irSync)<br><br><span class="hljs-string">&quot;mythread1&quot;</span> <span class="hljs-comment">#11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class="hljs-variable">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class="hljs-variable">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class="hljs-variable">$1</span>.run(DeathLock.java:22)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d610&gt; (a java.util.concurrent.locks.ReentrantLock<span class="hljs-variable">$Nonfa</span><br>irSync)<br><br><br>Found one Java-level deadlock:<br>=============================<br><span class="hljs-string">&quot;mythread2&quot;</span>:<br>  waiting <span class="hljs-keyword">for</span> ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class="hljs-variable">$NonfairSync</span>),<br>  <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;mythread1&quot;</span><br><span class="hljs-string">&quot;mythread1&quot;</span>:<br>  waiting <span class="hljs-keyword">for</span> ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class="hljs-variable">$NonfairSync</span>),<br>  <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;mythread2&quot;</span><br><br>Java stack information <span class="hljs-keyword">for</span> the threads listed above:<br>===================================================<br><span class="hljs-string">&quot;mythread2&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class="hljs-variable">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class="hljs-variable">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class="hljs-variable">$2</span>.run(DeathLock.java:34)<br><span class="hljs-string">&quot;mythread1&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class="hljs-variable">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class="hljs-variable">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class="hljs-variable">$1</span>.run(DeathLock.java:22)<br><br>Found 1 deadlock.<br></code></pre></td></tr></table></figure><p><strong>jstack检测cpu高</strong></p><p><em>步骤一：查看cpu占用高进程</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">top<br><br>Mem:  <span class="hljs-number">16333644</span>k total,  <span class="hljs-number">9472968</span>k used,  <span class="hljs-number">6860676</span>k free,   <span class="hljs-number">165616</span>k buffers<br>Swap:        <span class="hljs-number">0</span>k total,        <span class="hljs-number">0</span>k used,        <span class="hljs-number">0</span>k free,  <span class="hljs-number">6665292</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     <br><span class="hljs-number">17850</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m S <span class="hljs-number">100.7</span>  <span class="hljs-number">0.7</span>  <span class="hljs-number">47</span>:<span class="hljs-number">53.80</span> java       <br> <span class="hljs-number">1552</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span>  <span class="hljs-number">121</span>m  <span class="hljs-number">13</span>m <span class="hljs-number">8524</span> S  <span class="hljs-number">0.7</span>  <span class="hljs-number">0.1</span>  <span class="hljs-number">14</span>:<span class="hljs-number">37.75</span> AliYunDun   <br> <span class="hljs-number">3581</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">9750</span>m <span class="hljs-number">2.0</span>g  <span class="hljs-number">13</span>m S  <span class="hljs-number">0.7</span> <span class="hljs-number">12.9</span> <span class="hljs-number">298</span>:<span class="hljs-number">30.20</span> java        <br>    <span class="hljs-number">1</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">19360</span> <span class="hljs-number">1612</span> <span class="hljs-number">1308</span> S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00.81</span> init        <br>    <span class="hljs-number">2</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span> S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00.00</span> kthreadd    <br>    <span class="hljs-number">3</span> root      RT   <span class="hljs-number">0</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span> S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00.14</span> migration/<span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><p><em>步骤二：查看cpu占用高线程</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">top</span> -H -<span class="hljs-selector-tag">p</span> <span class="hljs-number">17850</span><br><br><span class="hljs-attribute">top</span> - <span class="hljs-number">17</span>:<span class="hljs-number">43</span>:<span class="hljs-number">15</span> up <span class="hljs-number">5</span> days,  <span class="hljs-number">7</span>:<span class="hljs-number">31</span>,  <span class="hljs-number">1</span> user,  load average: <span class="hljs-number">0.99</span>, <span class="hljs-number">0.97</span>, <span class="hljs-number">0.91</span><br>Tasks:  <span class="hljs-number">32</span> total,   <span class="hljs-number">1</span> running,  <span class="hljs-number">31</span> sleeping,   <span class="hljs-number">0</span> stopped,   <span class="hljs-number">0</span> zombie<br><span class="hljs-built_in">Cpu</span>(s):  <span class="hljs-number">3.7%</span>us,  <span class="hljs-number">8.9%</span>sy,  <span class="hljs-number">0.0%</span>ni, <span class="hljs-number">87.4%</span>id,  <span class="hljs-number">0.0%</span>wa,  <span class="hljs-number">0.0%</span>hi,  <span class="hljs-number">0.0%</span>si,  <span class="hljs-number">0.0%</span>st<br>Mem:  <span class="hljs-number">16333644</span>k total,  <span class="hljs-number">9592504</span>k used,  <span class="hljs-number">6741140</span>k free,   <span class="hljs-number">165700</span>k buffers<br>Swap:        <span class="hljs-number">0</span>k total,        <span class="hljs-number">0</span>k used,        <span class="hljs-number">0</span>k free,  <span class="hljs-number">6781620</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br><span class="hljs-number">17880</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m R <span class="hljs-number">99.9</span>  <span class="hljs-number">0.7</span>  <span class="hljs-number">50</span>:<span class="hljs-number">47.43</span> java<br><span class="hljs-number">17856</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m S  <span class="hljs-number">0.3</span>  <span class="hljs-number">0.7</span>   <span class="hljs-number">0</span>:<span class="hljs-number">02.08</span> java<br><span class="hljs-number">17850</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.7</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00.00</span> java<br><span class="hljs-number">17851</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.7</span>   <span class="hljs-number">0</span>:<span class="hljs-number">00.23</span> java<br><span class="hljs-number">17852</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.7</span>   <span class="hljs-number">0</span>:<span class="hljs-number">02.09</span> java<br><span class="hljs-number">17853</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.7</span>   <span class="hljs-number">0</span>:<span class="hljs-number">02.12</span> java<br><span class="hljs-number">17854</span> root      <span class="hljs-number">20</span>   <span class="hljs-number">0</span> <span class="hljs-number">7588</span>m <span class="hljs-number">112</span>m  <span class="hljs-number">11</span>m S  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.7</span>   <span class="hljs-number">0</span>:<span class="hljs-number">02.07</span> java<br></code></pre></td></tr></table></figure><p><em>步骤三：转换线程ID</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%x\n&quot;</span> 17880          <br>45d8<br></code></pre></td></tr></table></figure><p><em>步骤四：定位cpu占用线程</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">jstack 17850|grep 45d8 -A 30<br><span class="hljs-string">&quot;pool-1-thread-11&quot;</span> <span class="hljs-comment">#20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]</span><br>   java.lang.Thread.State: RUNNABLE<br>        at java.io.FileOutputStream.writeBytes(Native Method)<br>        at java.io.FileOutputStream.write(FileOutputStream.java:326)<br>        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)<br>        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)<br>        - locked &lt;0x00000006c6c2e708&gt; (a java.io.BufferedOutputStream)<br>        at java.io.PrintStream.write(PrintStream.java:482)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)<br>        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)<br>        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)<br>        - locked &lt;0x00000006c6c26620&gt; (a java.io.OutputStreamWriter)<br>        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)<br>        at java.io.PrintStream.write(PrintStream.java:527)<br>        - eliminated &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at java.io.PrintStream.<span class="hljs-built_in">print</span>(PrintStream.java:597)<br>        at java.io.PrintStream.println(PrintStream.java:736)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at com.demo.guava.HardTask.call(HardTask.java:18)<br>        at com.demo.guava.HardTask.call(HardTask.java:9)<br>        at java.util.concurrent.FutureTask.run(FutureTask.java:266)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>        at java.util.concurrent.ThreadPoolExecutor<span class="hljs-variable">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br><span class="hljs-string">&quot;pool-1-thread-10&quot;</span> <span class="hljs-comment">#19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span>  &lt;0x00000006c6c14178&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="hljs-variable">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br></code></pre></td></tr></table></figure><hr><h2 id="Jmap"><a href="#Jmap" class="headerlink" title="Jmap"></a>Jmap</h2><p>原文参考：<a href="https://www.jianshu.com/p/c52ffaca40a5">https://www.jianshu.com/p/c52ffaca40a5</a></p><blockquote><p>jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的<code>共享对象内存映射或堆内存细节</code>。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍<code>Java的堆Dump</code>以及jmap命令</p></blockquote><h3 id="什么是堆Dump"><a href="#什么是堆Dump" class="headerlink" title="什么是堆Dump"></a>什么是堆Dump</h3><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">Java虚拟机的内存组成以及堆内存介绍</a><br> <a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">Java GC工作原理</a></p><p>常见内存错误：</p><blockquote><p>outOfMemoryError 年老代内存不足。<br> outOfMemoryError:PermGen Space 永久代内存不足。<br> outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。</p></blockquote><p><strong>jmap 用法摘要</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage:<br>    jmap [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jmap [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br><span class="hljs-built_in">where</span> &lt;option&gt; is one of:<br>    &lt;none&gt;               to <span class="hljs-built_in">print</span> same info as Solaris pmap<br>    -heap                to <span class="hljs-built_in">print</span> java heap summary<br>    -histo[:live]        to <span class="hljs-built_in">print</span> histogram of java object heap; <span class="hljs-keyword">if</span> the <span class="hljs-string">&quot;live&quot;</span><br>                         suboption is specified, only count live objects<br>    -permstat            to <span class="hljs-built_in">print</span> permanent generation statistics<br>    -finalizerinfo       to <span class="hljs-built_in">print</span> information on objects awaiting finalization<br>    -dump:&lt;dump-options&gt; to dump java heap <span class="hljs-keyword">in</span> hprof binary format<br>                         dump-options:<br>                           live         dump only live objects; <span class="hljs-keyword">if</span> not specified,<br>                                        all objects <span class="hljs-keyword">in</span> the heap are dumped.<br>                           format=b     binary format<br>                           file=&lt;file&gt;  dump heap to &lt;file&gt;<br>                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;<br>    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo<br>                         to force a heap dump or histogram when &lt;pid&gt; does not<br>                         respond. The <span class="hljs-string">&quot;live&quot;</span> suboption is not supported<br>                         <span class="hljs-keyword">in</span> this mode.<br>    -h | -<span class="hljs-built_in">help</span>           to <span class="hljs-built_in">print</span> this <span class="hljs-built_in">help</span> message<br>    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system<br></code></pre></td></tr></table></figure><ul><li>指定进程号(pid)的进程 jmap [ option ]</li><li>指定核心文件 jmap [ option ]</li><li>指定远程调试服务器 jmap [ option ] [server-id@]</li></ul><p><strong>参数：</strong></p><ul><li>option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</li><li>pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</li><li>executable 产生核心dump的Java可执行文件。</li><li>core 需要打印配置信息的核心文件。</li><li>remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。</li><li>server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</li></ul><p><strong>选项:</strong></p><ul><li><no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。</li><li>-dump:[live,]format&#x3D;b,file&#x3D;<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。</li><li>-finalizerinfo 打印等待终结的对象信息。</li><li>-heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。</li><li>-histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。</li><li>-permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</li><li>-F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。</li><li>-h 打印帮助信息。</li><li>-help 打印帮助信息。</li><li>-J<flag> 指定传递给运行jmap的JVM的参数。</li></ul><p><strong>示例：</strong></p><p><em>查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">Attaching to process ID 31846, please <span class="hljs-built_in">wait</span>...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.71-b01<br><br>using thread-local object allocation.<br>Parallel GC with 4 thread(s)//GC 方式<br><br>Heap Configuration: //堆内存初始化配置<br>   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)<br>   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)<br>   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小<br>   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小<br>   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小<br>   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小<br>   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率<br>   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 <br>   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小<br>   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小<br>   G1HeapRegionSize = 0 (0.0MB)<br><br>Heap Usage://堆内存使用情况<br>PS Young Generation<br>Eden Space://Eden区内存分布<br>   capacity = 33030144 (31.5MB)//Eden区总容量<br>   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用<br>   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量<br>   4.614088270399305% used //Eden区使用比率<br>From Space:  //其中一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>To Space:  //另一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>PS Old Generation //当前的Old区内存分布<br>   capacity = 86507520 (82.5MB)<br>   used     = 0 (0.0MB)<br>   free     = 86507520 (82.5MB)<br>   0.0% used<br>PS Perm Generation//当前的 “永生代” 内存分布<br>   capacity = 22020096 (21.0MB)<br>   used     = 2496528 (2.3808746337890625MB)<br>   free     = 19523568 (18.619125366210938MB)<br>   11.337498256138392% used<br><br>670 interned Strings occupying 43720 bytes.<br></code></pre></td></tr></table></figure><p><strong>查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">num     <span class="hljs-comment">#instances         #bytes  class name</span><br>编号     个数                字节     类名<br>----------------------------------------------<br>   1:             7        1322080  [I<br>   2:          5603         722368  &lt;methodKlass&gt;<br>   3:          5603         641944  &lt;constMethodKlass&gt;<br>   4:         34022         544352  java.lang.Integer<br>   5:           371         437208  &lt;constantPoolKlass&gt;<br>   6:           336         270624  &lt;constantPoolCacheKlass&gt;<br>   7:           371         253816  &lt;instanceKlassKlass&gt;<br></code></pre></td></tr></table></figure><p><strong>将内存使用的详细情况输出到文件，执行命令： jmap -dump:format&#x3D;b,file&#x3D;heapDump 6900</strong></p><p>然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：<a href="http://localhost:5000/">http://localhost:5000/</a> 查看详细信息</p><blockquote><p>这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。<br> 2.要制作堆Dump可以直接使用jvm自带的jmap命令<br> 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。<br> 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。<br> 5.也可以使用 jmap -dump:format&#x3D;b,file&#x3D;<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容<br> 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。</p><h3 id="出现问题："><a href="#出现问题：" class="headerlink" title="出现问题："></a>出现问题：</h3><ol><li>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process<br> 在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process，这是oracla文档中提到的一个bug:<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E5%A6%82%E4%B8%8B%EF%BC%9A">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：</a></li></ol><ul><li>echo 0 | sudo tee &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;yama&#x2F;ptrace_scope 该方法在下次重启前有效。</li><li>永久有效方法 sudo vi &#x2F;etc&#x2F;sysctl.d&#x2F;10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope &#x3D; 1 修改为: kernel.yama.ptrace_scope &#x3D; 0 重启系统，使修改生效。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-JVM 参数</title>
    <link href="/20200507/3364a1445abf.html"/>
    <url>/20200507/3364a1445abf.html</url>
    
    <content type="html"><![CDATA[<h1 id="JVM-参数"><a href="#JVM-参数" class="headerlink" title="JVM 参数"></a>JVM 参数</h1><ol><li><p>标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help</p></li><li><p>非标准参数：随着JDK版本的变化而变化。</p><p>-X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">修改执行方式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">compiled 编译执行方式，第一次使用就编译成本地代码</span><br>java -Xcomp -version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">interpreted 解释执行方式</span><br>java -Xini -version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mixed 默认的混合执行方式，混合模式，JVM自己来决定</span><br>java -Xmixed -version<br></code></pre></td></tr></table></figure><p>-XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。</p><p>boolean类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">格式：-XX:[+-]&lt;name&gt;      +或-表示启用或者禁用name属性<br>比如：<br>-XX:+UseConcMarkSweepGC  表示启用CMS类型的垃圾回收器<br>-XX:+UseG1GC       表示启用G1类型的垃圾回收器<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置JVM使用垃圾收集器 +：使用，-：未使用</span><br>-XX:+/-UseG1GC<br><br><br></code></pre></td></tr></table></figure><p>非boolean类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">格式：-XX&lt;name&gt;=&lt;value&gt;表示name属性的值是value<br>比如：<br>-XX:MaxGCPauseMillis=500<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置初始堆内存</span><br>-XX:initialHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xms100M<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置最大堆内存</span><br>-XX:MaxHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xmx100M<br></code></pre></td></tr></table></figure></li></ol><p>打印出JAVA进程中所有JVM的参数：</p><ul><li>执行命令 <code>java -XX:+PrintFlagsFinal -version</code> 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：<code>java -XX:+PrintFlagsFinal -version &gt; xxx.txt</code></li><li>使用  <code>jinfo -flag $&#123;参数名&#125; $&#123;PID&#125; </code>也可查看对应JVM参数值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-XX:+PrintFlagsFinal<br></code></pre></td></tr></table></figure><p><strong>如何设置JVM参数：</strong></p><p><em>以下方式是JAVA进程还未启动</em></p><ol><li>在开发工具中，比如IDEA中的启动配置项中 VM options</li><li>SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar</li><li>在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh&#x2F;bat 中的JAVA_OPTIONS&#x3D;””</li></ol><p><em>以下方式是当JAVA进程已经启动后该如何设置</em></p><ol start="4"><li>实时修改某个JVM参数的值 <strong>jinfo修改（参数只有被标记为manageable的flags可以被实时修改)</strong></li></ol><p><strong>常用参数：</strong></p><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">XX:CICompilerCount&#x3D;3</td><td align="center">最大并行编译数</td><td align="center">如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能</td></tr><tr><td align="center">-XX:InitialHeapSize&#x3D;100M</td><td align="center">初始化堆大小</td><td align="center">简写-Xms100M</td></tr><tr><td align="center">-XX:MaxHeapSize&#x3D;100M</td><td align="center">最大堆大小</td><td align="center">简写-Xm x 100M</td></tr><tr><td align="center">-XX:NewSize&#x3D;20M</td><td align="center">设置年轻代的大小</td><td align="center"></td></tr><tr><td align="center">-XX:MaxNewSize&#x3D;50M</td><td align="center">年轻代最大大小</td><td align="center"></td></tr><tr><td align="center">-XX:OldSize&#x3D;50M</td><td align="center">设置老年代大小</td><td align="center"></td></tr><tr><td align="center">-XX:MetaspaceSize&#x3D;50M</td><td align="center">设置方法区大小</td><td align="center"></td></tr><tr><td align="center">-XX:MaxMetaspaceSize&#x3D;50M</td><td align="center">方法区最大大小</td><td align="center"></td></tr><tr><td align="center">-XX:+UseParallelGC</td><td align="center">使用UseParallelGC</td><td align="center">新生代，吞吐量优先</td></tr><tr><td align="center">-XX:+UseParallelOldGC</td><td align="center">使用UseParallelOldGC</td><td align="center">老年代，吞吐量优先</td></tr><tr><td align="center">-XX:+UseConcMarkSweepGC</td><td align="center">使用CMS</td><td align="center">老年代，停顿时间优先</td></tr><tr><td align="center">-XX:+UseG1GC</td><td align="center">使用G1GC</td><td align="center">新生代，老年代，停顿时间优先</td></tr><tr><td align="center">-XX:NewRatio</td><td align="center">新老生代的比值</td><td align="center">比如-XX:Ratio&#x3D;4，则表示新生代:老年代&#x3D;1:4，也就是新生代占整个堆内存的1&#x2F;5</td></tr><tr><td align="center">-XX:SurvivorRatio</td><td align="center">两个S区和Eden区的比值</td><td align="center">比如-XX:SurvivorRatio&#x3D;8，也就是(S0+S1):Eden&#x3D;2:8，也就是一个S占整个新生代的1&#x2F;10</td></tr><tr><td align="center">-XX:+HeapDumpOnOutOfMemoryError</td><td align="center">启动堆内存溢出打印</td><td align="center">当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件</td></tr><tr><td align="center">-XX:HeapDumpPath&#x3D;heap.hprof</td><td align="center">指定堆内存溢出打印目录</td><td align="center">表示在当前目录生成一个heap.hprof文件</td></tr><tr><td align="center">XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME&#x2F;logs&#x2F;gc.log</td><td align="center">打印出GC日志</td><td align="center">可以使用不同的垃圾收集器，对比查看GC情况</td></tr><tr><td align="center">-Xss128k</td><td align="center">设置每个线程的堆栈大小</td><td align="center">经验值是3000-5000最佳</td></tr><tr><td align="center">-XX:MaxTenuringThreshold&#x3D;6</td><td align="center">提升年老代的最大临界值</td><td align="center">默认值为 15</td></tr><tr><td align="center">-XX:InitiatingHeapOccupancyPercent</td><td align="center">启动并发GC周期时堆内存使用占比</td><td align="center">G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45.</td></tr><tr><td align="center">-XX:G1HeapWastePercent</td><td align="center">允许的浪费堆空间的占比</td><td align="center">默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。</td></tr><tr><td align="center">-XX:MaxGCPauseMillis&#x3D;200ms</td><td align="center">G1最大停顿时间</td><td align="center">暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态</td></tr><tr><td align="center">-XX:ConcGCThreads&#x3D;n</td><td align="center">并发垃圾收集器使用的线程数量</td><td align="center">默认值随JVM运行的平台不同而不同</td></tr><tr><td align="center">-XX:G1MixedGCLiveThresholdPercent&#x3D;65</td><td align="center">混合垃圾回收周期中要包括的旧区域设置占用率阈值</td><td align="center">默认占用率为 65%</td></tr><tr><td align="center">-XX:G1MixedGCCountTarget&#x3D;8</td><td align="center">设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数</td><td align="center">默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内</td></tr><tr><td align="center">XX:G1OldCSetRegionThresholdPercent&#x3D;1</td><td align="center">描述Mixed GC时，Old Region被加入到CSet中</td><td align="center">默认情况下，G1只把10%的Old Region加入到CSet中</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-JVM基础</title>
    <link href="/20200425/cb6006ce99db.html"/>
    <url>/20200425/cb6006ce99db.html</url>
    
    <content type="html"><![CDATA[<h1 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h1><p><strong>java源码文件，通过javac 转换成class文件。</strong></p><blockquote><p>找到.java文件</p><p>词法分析器</p><p>tokens流</p><p>语法分析器</p><p>语义分析器</p><p>字节码生成器</p><p>转成.class文件</p></blockquote><ul><li><h3 id="装载"><a href="#装载" class="headerlink" title="装载"></a>装载</h3><ol><li><p>根据全限定路径名寻找class文件，转换成二进制流。<strong>通过ClassLoder.load(String name)（类装载器，name：全限定路径名）</strong>不同路径下的类，设置不同路径的类装载器。</p><blockquote><ol><li><p>Bootstrap ClassLoader（根装载器由C语言编写）：加载 <code>$JAVA_HOME</code> 中的 <code>jar/lib/rt.jar</code> 里所有的class或 <code>Xbootclassoath</code> 选项指定的jar包</p></li><li><p>Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 <code>$JAVA_HOME</code> 中 <code>jar/lib/*.jar</code> 或 <code>-Djava.ext.dirs</code> 指定目录下的 <code>jar</code> 包</p></li><li><p>App ClassLoader：加载classpath中指定的jar包及 <code>Djava.class.path</code> 所指定目录下的类和 <code>jar</code> 包</p></li><li><p>Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 <code>java.lang.ClassLoader</code> 的子类自定义加载class，属于应用程序根据自身需要自定义的 <code>ClassLoader</code>，如 <code>Tomcat</code>、<code>JBoss</code> 都会根据j2ee规范自行实现 <code>ClassLoader</code></p></li></ol></blockquote></li><li><p>需要把类文件<strong>静态存储结构</strong>里面对应的内容存储到JVM里面<strong>（方法区的运行时数据结构）</strong></p><blockquote><p>代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。</p></blockquote></li><li><p>java.lang.Class对象存储到堆内存</p></li></ol></li><li><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol><li><p>验证</p><blockquote><p>保证被加载的正确性。验证class文件中的<strong>cafe babe</strong>。注：class文件中，已<strong>cafe babe</strong>为开头的是java文件。</p></blockquote></li><li><p>准备</p><blockquote><p>为类的静态变量分配内存。如：<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code></p></blockquote></li><li><p>解析</p><blockquote><p>将类中的<strong>符号引用</strong>转换为<strong>直接引用</strong>。静态的转换。</p><p><strong>符号引用</strong>：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。</p><p><strong>直接引用</strong>：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。</p></blockquote></li></ol></li><li><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code>。将3正真的赋值 a &#x3D; 3。</p></li></ul><h3 id="JVM运行时划分的区域："><a href="#JVM运行时划分的区域：" class="headerlink" title="JVM运行时划分的区域："></a>JVM运行时划分的区域：</h3><blockquote><p>程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。</p><p>线程是进程最小的执行单位。</p><p>栈：只要符合栈结构，都遵循先进后出的原则</p></blockquote><ul><li><p><strong>方法区 Method Area（进程）、非堆：</strong>类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。<strong>与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p></li><li><p><strong>堆 Heap（进程）：</strong>代表某个类的java.lang.Class对象。存储对象、String、数组。<strong>如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p></li><li><p><strong>Java虚拟机栈（线程）：</strong>一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。</p><p>在Java方法中如何去调用C语言的方法，通过<strong>动态链接</strong>去调用完成。</p></li><li><p><strong>本地方法栈（线程）：</strong>存储C语言方法。</p></li><li><p><strong>栈帧（Java虚拟机栈、本地方法栈）Frame：</strong>代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//伪代码1</span><br>a()&#123;<br>    b();<br>&#125;<br>b()&#123;<br>    c();<br>&#125;<br>c()&#123;<br>    <br>&#125;<br><span class="hljs-comment">//先进行压栈</span><br><span class="hljs-comment">//先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。</span><br><span class="hljs-comment">//之后是出栈</span><br><span class="hljs-comment">//在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。</span><br><span class="hljs-comment">//先进后出的概念。</span><br><br><span class="hljs-comment">//伪代码2</span><br>a()&#123;<br>    a();<br>&#125;<br><span class="hljs-comment">//如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。</span><br></code></pre></td></tr></table></figure><ol><li><p><strong>局部变量表：</strong>存储方法中的局部变量</p></li><li><p><strong>操作数栈：</strong>栈结构，用来描述运算过程当中数据暂时的存储位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//伪代码.java文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> op1,<span class="hljs-type">int</span> op2)</span>&#123;<br>    op1 = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> op1 + op2;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment">//.java文件的.class文件翻译的JVM字节码。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> op1,<span class="hljs-type">int</span> op2)</span>;<br>Code:<br><span class="hljs-number">0</span>:iconst_3 <span class="hljs-comment">// 将3放到操作数栈中</span><br><span class="hljs-comment">//局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。</span><br><span class="hljs-number">1</span>:istore_0 <span class="hljs-comment">//将操作数占中的3赋值给局部变量表中的局部变量</span><br><span class="hljs-number">2</span>:iload_0 <span class="hljs-comment">//将局部变量0值放到操作数栈中</span><br><span class="hljs-number">3</span>:iload_1 <span class="hljs-comment">//</span><br><span class="hljs-number">4</span>:iadd<br><span class="hljs-number">5</span>:istore_2<br><span class="hljs-number">6</span>:iload_2<br><span class="hljs-number">7</span>:ireturn<br></code></pre></td></tr></table></figure></li><li><p><strong>动态链接：</strong>符号引用<strong>转换为</strong>直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。</p></li><li><p><strong>正常或异常方法的返回：</strong></p></li></ol></li><li><p><strong>程序计数器（线程）：</strong>是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p></li></ul><h3 id="JAVA-对象内存布局"><a href="#JAVA-对象内存布局" class="headerlink" title="JAVA 对象内存布局"></a>JAVA 对象内存布局</h3><h4 id="对象头："><a href="#对象头：" class="headerlink" title="对象头："></a>对象头：</h4><blockquote><p>Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节</p></blockquote><blockquote><p>Class Pointer：指向对象对应的类元数据的内存地址64位系统：8字节</p></blockquote><blockquote><p>Length数组对象特有：数组长度4字节</p></blockquote><h4 id="实例数据："><a href="#实例数据：" class="headerlink" title="实例数据："></a>实例数据：</h4><p>包含了对象的所有成员变量，大小由各个变量类型决定</p><blockquote><p>boolean和byte：1字节</p></blockquote><blockquote><p>short和char：2字节</p></blockquote><blockquote><p>int和float：4字节</p></blockquote><blockquote><p>long和double：8字节</p></blockquote><blockquote><p>reference：8字节（64位系统）</p></blockquote><h4 id="对齐填充："><a href="#对齐填充：" class="headerlink" title="对齐填充："></a>对齐填充：</h4><p>为了保证对象的大小为8字节的整数倍，会进行填充字节</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON字符串带BOM头</title>
    <link href="/20200325/8086ff66de56.html"/>
    <url>/20200325/8086ff66de56.html</url>
    
    <content type="html"><![CDATA[<p><strong>调用三方接口返回值JSON字符串带BOM头”\ufeff”，JSON解析死活报错。</strong></p><blockquote><p>我是用SpringBoot的<code>RestTemplate</code>调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是<code>RestTemplate</code>的接收转换有问题，就将返回值换成了<code>String</code>类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。</p></blockquote><p>接口返回值日志如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2020</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">13</span>:<span class="hljs-number">18</span>:<span class="hljs-number">55.687</span> DEBUG <span class="hljs-number">8595</span> --- <span class="hljs-selector-attr">[           main]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RestTemplate</span>              : Response <span class="hljs-number">200</span> OK<br><span class="hljs-number">2020</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">13</span>:<span class="hljs-number">18</span>:<span class="hljs-number">55.688</span> DEBUG <span class="hljs-number">8595</span> --- <span class="hljs-selector-attr">[           main]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.client</span><span class="hljs-selector-class">.RestTemplate</span>              : Reading to <span class="hljs-selector-attr">[java.lang.String]</span> as <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span><br><span class="hljs-number">2020</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">13</span>:<span class="hljs-number">19</span>:<span class="hljs-number">57.370</span> DEBUG <span class="hljs-number">8595</span> --- <span class="hljs-selector-attr">[           main]</span> com<span class="hljs-selector-class">.hopefun</span><span class="hljs-selector-class">.scm</span><span class="hljs-selector-class">.open</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.EyuanApi</span>        : 返回值：﻿&#123;<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;成功&quot;</span>,<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。</p></blockquote><blockquote><p>一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着”\ufeff”，导致JSON字符串解析报错，原来罪魁祸首是这个玩意”\ufeff”。Debug还是个好玩意啊。</p></blockquote><blockquote><p>终于发现问题所在解决就轻松多了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BOM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\ufeff&quot;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 去除BOM</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bomStr JSON字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 去除BOM后的JSON字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">recursiveBom</span><span class="hljs-params">(String bomStr)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (bomStr.startsWith(BOM)) &#123;<br>        str = bomStr.substring(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (str.startsWith(BOM)) &#123;<br>            recursiveBom(str);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-comment">//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。</span><br>recursiveBom(bomStr.trim());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot Redis 配置详解</title>
    <link href="/20200322/e17c6e837cd0.html"/>
    <url>/20200322/e17c6e837cd0.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Redis-配置详解"><a href="#SpringBoot-Redis-配置详解" class="headerlink" title="SpringBoot Redis 配置详解"></a>SpringBoot Redis 配置详解</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;host&#125;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;port&#125;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;password&#125;</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">10000</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1ms</span> <span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 连接池中的最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 连接池中的最小空闲连接</span><br>        <span class="hljs-comment">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class="hljs-comment">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class="hljs-comment">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class="hljs-attr">time-between-eviction-runs:</span> <span class="hljs-string">1s</span><br></code></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage">原文连接</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot Druid 配置详解</title>
    <link href="/20200318/04561bfb9fbe.html"/>
    <url>/20200318/04561bfb9fbe.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Druid-配置详解"><a href="#SpringBoot-Druid-配置详解" class="headerlink" title="SpringBoot Druid 配置详解"></a>SpringBoot Druid 配置详解</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;username&#125;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;password&#125;</span><br>  <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 最小连接池数量</span><br>      <span class="hljs-attr">maxActive:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大连接池数量</span><br>      <span class="hljs-attr">maxWait:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span> <span class="hljs-comment"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class="hljs-attr">validationQuery:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-string">FROM</span> <span class="hljs-string">DUAL</span> <span class="hljs-comment"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class="hljs-attr">testWhileIdle:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class="hljs-attr">poolPreparedStatements:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启PSCache</span><br>      <span class="hljs-attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#设置PSCache值</span><br>      <span class="hljs-attr">connectionErrorRetryAttempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 连接出错后再尝试连接三次</span><br>      <span class="hljs-attr">breakAfterAcquireFailure:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 数据库服务宕机自动重连机制</span><br>      <span class="hljs-attr">timeBetweenConnectErrorMillis:</span> <span class="hljs-number">300000</span> <span class="hljs-comment"># 连接出错后重试时间间隔</span><br>      <span class="hljs-attr">asyncInit:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 异步初始化策略</span><br>      <span class="hljs-attr">remove-abandoned:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否自动回收超时连接</span><br>      <span class="hljs-attr">remove-abandoned-timeout:</span> <span class="hljs-number">1800</span> <span class="hljs-comment"># 超时时间(以秒数为单位)</span><br>      <span class="hljs-attr">transaction-query-timeout:</span> <span class="hljs-number">6000</span> <span class="hljs-comment"># 事务超时时间</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall,log4j2</span><br>      <span class="hljs-attr">connectionProperties:</span> <span class="hljs-string">druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">&quot;/*&quot;</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">&quot;/druid/*&quot;</span><br>        <span class="hljs-attr">allow:</span><br>        <span class="hljs-attr">deny:</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">admin</span><br></code></pre></td></tr></table></figure><h3 id="druid监控数据的外部化调用"><a href="#druid监控数据的外部化调用" class="headerlink" title="druid监控数据的外部化调用"></a>druid监控数据的外部化调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidStatController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/stat&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">druidStat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class="hljs-keyword">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png"></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Druid</tag>
      
      <tag>Mysql连接池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot Shiro 配置自定义密码加密器</title>
    <link href="/20200313/00267f611c07.html"/>
    <url>/20200313/00267f611c07.html</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Shiro-配置自定义密码加密器"><a href="#SpringBoot-Shiro-配置自定义密码加密器" class="headerlink" title="SpringBoot Shiro 配置自定义密码加密器"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义认证加密方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomCredentialsMatcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleCredentialsMatcher</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">doCredentialsMatch</span><span class="hljs-params">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> (UsernamePasswordToken) authcToken;<br>        <span class="hljs-comment">//加密类型，密码，盐值，迭代次数</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tokenCredentials</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHash</span>(<span class="hljs-string">&quot;md5&quot;</span>, password, username, <span class="hljs-number">2</span>).toHex();<br>        <span class="hljs-comment">//数据库存储密码</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">accountCredentials</span> <span class="hljs-operator">=</span> getCredentials(info);<br>        <span class="hljs-comment">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class="hljs-keyword">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第一种方式：配置Bean"><a href="#第一种方式：配置Bean" class="headerlink" title="第一种方式：配置Bean"></a>第一种方式：配置Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shiro自带密码管理器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> HashedCredentialsMatcher</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> HashedCredentialsMatcher <span class="hljs-title function_">hashedCredentialsMatcher</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//Shiro自带加密</span><br>  <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>  <span class="hljs-comment">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);<br>  <span class="hljs-comment">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class="hljs-number">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> credentialsMatcher;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将自己的身份验证器验证方式加入容器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> CustomRealm</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CustomRealm <span class="hljs-title function_">shiroRealm</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">CustomRealm</span> <span class="hljs-variable">shiroRealm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomRealm</span>();<br>  <span class="hljs-comment">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class="hljs-comment">//加入密码管理</span><br>  <span class="hljs-comment">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomCredentialsMatcher</span>());<span class="hljs-comment">//自定义密码管理器</span><br>  <span class="hljs-keyword">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法"><a href="#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法" class="headerlink" title="第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置自定义认证加密方式</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> credentialsMatcher 默认加密方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCredentialsMatcher</span><span class="hljs-params">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    <span class="hljs-comment">//自定义认证加密方式</span><br>        <span class="hljs-type">CustomCredentialsMatcher</span> <span class="hljs-variable">customCredentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomCredentialsMatcher</span>();<br>        <span class="hljs-comment">// 设置自定义认证加密方式</span><br>        <span class="hljs-built_in">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
