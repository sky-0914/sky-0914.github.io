{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/bg/bg.png","path":"img/bg/bg.png","modified":0,"renderable":0},{"_id":"source/img/bg/bg1.jpg","path":"img/bg/bg1.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/the_moon.jpg","path":"img/bg/the_moon.jpg","modified":0,"renderable":0},{"_id":"source/img/icon.png","path":"img/icon.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery-master/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/echarts.min.js","path":"js/echarts.min.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/公共关系学/20221027183201783077630932029440.md","hash":"4999650a2d19724156d0b7d36850ee445a6d88dc","modified":1666866733903},{"_id":"source/_posts/hello-world.md","hash":"466eae895f59911269bf4b76cbb9f57104994294","modified":1666780515166},{"_id":"source/_posts/公共关系学/20221027183201783077630944612352.md","hash":"0676927a361158981b30cd5aa1a3aa93355d8be7","modified":1666866733904},{"_id":"source/_posts/公共关系学/20221027183201783077630948806656.md","hash":"4b92f8f6908d229b6a3dd69d9b13a5bfe2c0a9fe","modified":1666866733905},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252224.md","hash":"40af35da5e0515777bfc7c6e990903dd5eefa497","modified":1666866733880},{"_id":"source/_posts/人力资源管理/20221027183201783077630898475008.md","hash":"1e69c5bb46056a60360fac1280812e0cc50dd569","modified":1666866733875},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252225.md","hash":"cecfdcf424165f74105c548b866ee32d8c3733e9","modified":1666866733881},{"_id":"source/_posts/基础会计学/20221027183201783077630919446530.md","hash":"874b43527792c6682b7aafa2bee52db7d9197c2c","modified":1666866733887},{"_id":"source/_posts/基础会计学/20221027183201783077630919446531.md","hash":"7f9698b5e433f1c876d5cba973ee8b44929188d3","modified":1666866733888},{"_id":"source/_posts/基础会计学/20221027183201783077630919446532.md","hash":"d2f397d251d3bd5dfeeb232e98568da201872808","modified":1666866733890},{"_id":"source/_posts/生产与运作管理/20221027183201783077630915252226.md","hash":"ddb7e48b0f65279d9f46fc50015023cf3f7aa1c3","modified":1666866733882},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446528.md","hash":"71977e01a37f6337f2b7c4dfe2393e776dedd607","modified":1666866733883},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446529.md","hash":"f04baa196ea84957549825d37fc3ca6ee44f516f","modified":1666866733885},{"_id":"source/_posts/电子商务/20221027183201783077630923640832.md","hash":"39fa8741dbf944b16411979cd6cf79fdd9263f22","modified":1666866733891},{"_id":"source/_posts/电子商务/20221027183201783077630923640833.md","hash":"a30749bb9a96d360c51b3a60b3beb8b04aa0cec8","modified":1666866733893},{"_id":"source/_posts/电子商务/20221027183201783077630923640834.md","hash":"6ef4d354dc3571574dee6ad9a397fcd23f95e940","modified":1666866733895},{"_id":"source/_posts/电子商务/20221027183201783077630927835136.md","hash":"0d57904d8be5db69fe687b46cc152235a86e672c","modified":1666866733900},{"_id":"source/_posts/电子商务/20221027183201783077630927835137.md","hash":"012c800e38a1f0eac9e431e01231f8af0ac1ec73","modified":1666866733902},{"_id":"source/_posts/电子商务/20221027183201783077630923640835.md","hash":"45f85df297e3fa309461a95a8af0e6e96a5c7a04","modified":1666866733897},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663049159000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1663049159000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1663049159000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663049159000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1663049159000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663049159000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1663049159000},{"_id":"themes/fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663049159000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1663049159000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663049159000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663049159000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663049159000},{"_id":"themes/fluid/_config.yml","hash":"39baa882da9b0af5178c7767306be14bcf992a55","modified":1669401735501},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663049159000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663049159000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663049159000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1669295849869},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663049159000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663049159000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663049159000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663049159000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1669287378074},{"_id":"themes/fluid/layout/categories.ejs","hash":"05b27f4f725ccda872b683b4ed8b884c1df0e11a","modified":1669398228234},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663049159000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1669403303509},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663049159000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663049159000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663049159000},{"_id":"themes/fluid/layout/tags.ejs","hash":"d6f3245460d77355dd90888707e1d64c550539b0","modified":1669398211154},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1669395149326},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1663049159000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1669293264335},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"f8d7df0354c56f82d8e11468b6a707033ddaa150","modified":1669287421075},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1669395640672},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663049159000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663049159000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663049159000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663049159000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663049159000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663049159000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663049159000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663049159000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663049159000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663049159000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663049159000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663049159000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663049159000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663049159000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663049159000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1669286283168},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663049159000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663049159000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"b10378cbccdb553d1f2fa88357de7eaf0687c8d1","modified":1669287292229},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663049159000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"42588ae4cf07a948df61c6940bd2f8f6d138326b","modified":1669395888290},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663049159000},{"_id":"source/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1666828158000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663049159000},{"_id":"source/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1666773579596},{"_id":"source/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1666857270158},{"_id":"public/local-search.xml","hash":"fc73dfd440992a7e90440f8a613fcf18d8f204f6","modified":1669399150341},{"_id":"public/archives/index.html","hash":"86a79ddd410b5399cc6315f15ec8ea59ce5763c8","modified":1669399150341},{"_id":"public/archives/page/2/index.html","hash":"da36426b6edb486649bc7ec738caeb87e00a329d","modified":1669399150341},{"_id":"public/archives/2022/index.html","hash":"c6a9cbbab47796917d07b1e71e066f40706046ff","modified":1669399150341},{"_id":"public/archives/2022/page/2/index.html","hash":"c4f80dc84170db5c98f3fe38b6298eaa9a4abffb","modified":1669399150341},{"_id":"public/archives/2022/10/index.html","hash":"e9a01a0c26f5fba13b8dd0cb9c996382775bbd64","modified":1666883713352},{"_id":"public/archives/2022/10/page/2/index.html","hash":"3c48b4b927fe6114b9e888a7e001b2876d93e71c","modified":1666883713352},{"_id":"public/categories/公共关系学/index.html","hash":"fa944995a28ccbb26340c1959c5175d6beb975d0","modified":1666883713352},{"_id":"public/categories/人力资源管理/index.html","hash":"837d033345ce6060c5560438ddcd63a00800215c","modified":1666883713352},{"_id":"public/categories/基础会计学/index.html","hash":"db67c1e0a75cc7c9c23f8487b50fdb8f25f99c28","modified":1666883713352},{"_id":"public/categories/生产与运作管理/index.html","hash":"cb7ad07d74dbdda927b4a29698b33cd66ae43947","modified":1666883713352},{"_id":"public/categories/电子商务/index.html","hash":"7ae71c0bc4de23530459cc7581ec890dbb1c95ae","modified":1666883713352},{"_id":"public/tags/默认/index.html","hash":"b58bbf01a69a9e25ed8edf69ac0e644eca0958e8","modified":1669114060060},{"_id":"public/tags/默认/page/2/index.html","hash":"62c192f539ecfc0a79b7897f3024d4d6655a9764","modified":1666883713352},{"_id":"public/404.html","hash":"3bbbe569f2ebed12e556ef756a98c1d08bea7dc1","modified":1669399150341},{"_id":"public/tags/index.html","hash":"69140d702f3e3009119eab8644a8fb1762a0c8b2","modified":1669399150341},{"_id":"public/2022/10/27/20221027183201783077630932029440/index.html","hash":"e4fcf377709d96909aea004452598067886e6fa1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630944612352/index.html","hash":"eeb4623f3a8548ff69577037d388a1dbb5ba3bff","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630948806656/index.html","hash":"d271e7edfbec194fe400865e6b047e5401482128","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630898475008/index.html","hash":"adba5a524b587579133f9af3edb5878f41acb15f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252224/index.html","hash":"71331217f513fe3a35542c13f4230db22756415d","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252225/index.html","hash":"1adf686cb814d36bad0ac5a8c01f642fe2c57e4a","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446530/index.html","hash":"37160cc8999f3f1a8b2e8d4496adb8b1f7ee22a1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446531/index.html","hash":"f092a9b828386991bf1a1c6e21027943bf83b09f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446532/index.html","hash":"33162fa41055ec21894e6236c64d030063b95c0c","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252226/index.html","hash":"7ed8ab5fced6e44038f687106dd65378d4c53751","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446528/index.html","hash":"3eab15006c48f5199c6d914d09447e9181b96b27","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446529/index.html","hash":"304cac6a5311d471559240ba900bf6d657e85e4f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640832/index.html","hash":"ba67c52ce2413c628a9b4a23ffe3e7c410ff1caa","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640833/index.html","hash":"ce89a338e1c4c55e50aa98097e5fe02e4590f7ef","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640834/index.html","hash":"23f5d9652368ee3e77a9473f57eebc9eb7b94c2f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640835/index.html","hash":"7ad658895e4518b9215d39e21e7f03372548809b","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835136/index.html","hash":"a93afbed5e4c6ad24cdcd9fa4d1e94dec05a6a21","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835137/index.html","hash":"5ca081cedf0d41828523d54947a9cfa2d42dd134","modified":1666883713352},{"_id":"public/2022/10/10/123/index.html","hash":"8dcd8b21f750f2299f43ed3c1271ff402f39d1b4","modified":1666883713352},{"_id":"public/index.html","hash":"f87adaced9f0f77c6a218aba9e24bc981135eba6","modified":1669399150341},{"_id":"public/page/2/index.html","hash":"c0d1cdbdd76107cce651e9c481fee49afbc9323b","modified":1669399150341},{"_id":"public/categories/index.html","hash":"ca5176381e13b27b63659a1cb6284a877314fffa","modified":1669399150341},{"_id":"public/links/index.html","hash":"8c587e53c2ec8d8de81ea2476aa43108d78cad7d","modified":1669399150341},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1669399150341},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1669399150341},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1669399150341},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1669399150341},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1669399150341},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1669399150341},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1669399150341},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1669399150341},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1669399150341},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1669399150341},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1669399150341},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1669399150341},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1669399150341},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1669399150341},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1669399150341},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1669399150341},{"_id":"public/css/main.css","hash":"a6b5a8d8f9255bf7d2d679d8adc264052dbac51d","modified":1669399150341},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669399150341},{"_id":"public/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1669399150341},{"_id":"public/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1669399150341},{"_id":"public/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1669399150341},{"_id":"source/_posts/Untitled Folder/Github刷提交记录.md","hash":"615b2f0c2f2c906a6aed5588310ab9b3933d7375","modified":1668674385578},{"_id":"source/_posts/环境安装/ElasticSearch入门.md","hash":"35d0a32a9f57c969e65c4d36ae0804e482090fe4","modified":1668674385578},{"_id":"source/_posts/Untitled Folder/构建自己的jar包上传至Mvaen中央仓库和版本更新.md","hash":"6f7d633936b93ec7d5a1ba46885be617d06c0e53","modified":1614957892000},{"_id":"source/_posts/环境安装/Jenkins打Docker镜像推送到私有仓库.md","hash":"71665cafcc9f63af36f43b9399f1c0e7583fb10c","modified":1600869317000},{"_id":"source/_posts/环境安装/Jenkins集成SonarQube.md","hash":"6fa39767faa30693fcf4a7666f872458ee0dded3","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】CerebroKibana7ES.md","hash":"1b84e63609712d17ced5dfb3c07e973d9d0fde9f","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Docker安装.md","hash":"1581e6bf565af11e4550c81a2630645c56f19b5d","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】ElasticSearch安装.md","hash":"6254f3d782e983a9cd81857db99c6741704e74a4","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】Logstash安装.md","hash":"dd39ba2f936ecbb90ec53c28c415d77cf302aa6c","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Kibana安装.md","hash":"fcbd4185d3c2c182b9ffbc5489b5102257d54bf9","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】阿里Arthas安装.md","hash":"44d5e1730d7dff9c054cda4ac561e414e4fdea0a","modified":1668674385578},{"_id":"source/_posts/环境安装/未完成.md","hash":"7760c5f4073cdfa34845b5bace190e316ba9c4ba","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/idea插件.md","hash":"4e41f12822cc5ecdce566782f4a179d2ef380afb","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/软件工具.md","hash":"cc726c9042308217b9c60617c15612d4158a59bc","modified":1668674385578},{"_id":"source/_posts/JAVA/CAS.md","hash":"8ede033f81cf21ac203c2e5dcf4435927d669a96","modified":1669397428024},{"_id":"source/_posts/JAVA/Synchronized锁升级过程.md","hash":"95bd1edf15660790dc26366b06f8158501bb44a9","modified":1669397428023},{"_id":"source/_posts/JAVA/指令乱序，指令重排序.md","hash":"556f320c2a5f29633af5d461eeeea8f5e249f40a","modified":1669397428024},{"_id":"source/_posts/JAVA/对象内存布局.md","hash":"063d55173608775f725223c832c9945adfc90fad","modified":1669397428024},{"_id":"source/_posts/DDD/领域驱动设计-DDD.md","hash":"ea4d132bdb967f61ad1db7dd1dd93a52ad494100","modified":1668674592999},{"_id":"source/_posts/JVM/1-JVM基础.md","hash":"dedc0ab81ad877482fef9669bfb142dade6bacc0","modified":1669397929923},{"_id":"source/_posts/JVM/2-JVM内存模型.md","hash":"120d7cbde38eeb927229abd2233b8778967e3782","modified":1669397955226},{"_id":"source/_posts/JVM/3-JVM垃圾回收算法和垃圾收集器.md","hash":"f1141c3d11ca32a7204f5ac8782c07b46e58ed2f","modified":1669397955222},{"_id":"source/_posts/JVM/4-JVM 参数.md","hash":"c84b76d7e0d8754bff560e42b6c75a590298870f","modified":1669397955224},{"_id":"source/_posts/JVM/5-JVM常用的命令.md","hash":"eb379b3261fed2713d7e6e26590c1e526d551116","modified":1669397955229},{"_id":"source/_posts/JVM/6-JVM常用工具和优化.md","hash":"c518fda92396d200eaf5aa77dc1fb6bb13aeccd2","modified":1669397955231},{"_id":"source/_posts/Mysql/1、Mysql执行流程与架构.md","hash":"af70fc0577d3f581ea554240a8648a998c59b51a","modified":1669397967046},{"_id":"source/_posts/Mysql/2、Mysql索引原理与使用规则.md","hash":"1928ca35db3cc879c43d7dc5455deb526adbc4b6","modified":1669397967045},{"_id":"source/_posts/Mysql/3、Mysql事务与锁详解.md","hash":"7e1453897f21b03373ec209bed9e22747e627e9d","modified":1669397967042},{"_id":"source/_posts/PMP/PMP概念.md","hash":"5404941651fcb57363169f55e9094de32be547f2","modified":1668674387069},{"_id":"source/_posts/PMP/知识领域.md","hash":"5404941651fcb57363169f55e9094de32be547f2","modified":1668674387069},{"_id":"source/_posts/React/React基础.md","hash":"0f5cad25ca0face4d7b3b7dd403b14536a904553","modified":1669397862025},{"_id":"source/_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","hash":"e4f4cd2b595536e755e661a90d1a97dd585452c6","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","hash":"4b097c1c339a8a4f71c6f6b511e609e5ad6ce90d","modified":1669190880308},{"_id":"source/_posts/SpringCloud/【SpringCloud】Eueka注册中心.md","hash":"29b7bda7a31d48754b53ed22f58f96106e8f73a5","modified":1668674386921},{"_id":"source/_posts/SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值.md","hash":"befdfdf196eaf0418e6a06f5832c20731637f6b0","modified":1668674386098},{"_id":"source/_posts/IDEA 常用插件.md","hash":"1adbcafb49cd51e5412108030082a0001401afec","modified":1668674385579},{"_id":"source/_posts/JAVA 转换 树结构数据.md","hash":"691e65abe92fb2393c8aa1ef7f797400d1bb3eba","modified":1668674385579},{"_id":"source/_posts/MySQL数据和索引占用空间查询.md","hash":"a30f3293042051d442aa3749ac11a436d96f9567","modified":1668674386099},{"_id":"source/_posts/JSON字符串带BOM头.md","hash":"5a9b28230f0557cea5cced1cb8d4595e2f841ae4","modified":1668674386099},{"_id":"source/_posts/JAVA自定义注解.md","hash":"190f228a4e13ebc33b72204bc5bddd892e170df2","modified":1668674386099},{"_id":"source/_posts/MySQL 学习笔记.md","hash":"47ee5ee2f590858af3879364f0ca32166915f7e5","modified":1668674386099},{"_id":"source/_posts/MySQL数据库设计规范.md","hash":"330b58853cae73bcd9a62614f3cd12df7343baaf","modified":1668674386099},{"_id":"source/_posts/MAC替换Homebrew源.md","hash":"2abd747d20abd096e06fafe4b0227d9cc83de0f9","modified":1668674386099},{"_id":"source/_posts/Mycat配置.md","hash":"81c9e2958870630cdc3603b8bd823dd02a805fef","modified":1668674386099},{"_id":"source/_posts/NAS搭建黑群晖5.2稳定版本.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/Mysql ONLY_FULL_GROUP_BY.md","hash":"29d128543a36bbbd9e47d0be63b0437cbcadfbf6","modified":1668674386099},{"_id":"source/_posts/Mysql 查询天、周，月，季度、年的数据.md","hash":"4b6a174f37708cd5e80b42094126f85b0f762d30","modified":1668674386099},{"_id":"source/_posts/SSR搭建科学上网服务VPN.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/SpringBoot Druid 配置详解.md","hash":"a6f87cc0c73d7fea23c463037d92952928f51ccb","modified":1668674386099},{"_id":"source/_posts/SpringBoot AOP处理请求日志处理打印.md","hash":"1cd1a114a3b1da1203413dd676bb81dfa05b3685","modified":1668674386099},{"_id":"source/_posts/SpringBoot Redis 配置详解.md","hash":"85f0ddfa33e1317a68896a0391911963717f7590","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 整合 Swagger2.md","hash":"70ae30f9d7029a530de4e4d226dc5e6ac69ff7e5","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 线程池的定义和使用.md","hash":"67f77c607f8be47fa83f947508712c5c7191cad0","modified":1668674386099},{"_id":"source/_posts/SpringBoot 全局异常处理.md","hash":"cd14bcdb40bb964fa4f6664a5495a6c9d84f4324","modified":1668674386099},{"_id":"source/_posts/SpringBoot Shiro 配置自定义密码加密器.md","hash":"26c8a3e3bc1037e89cf8d1496cf4e30f0f65cdd7","modified":1668674386099},{"_id":"source/_posts/redis命令和RedisTemplate操作对应表.md","hash":"1d9bcce312a879eb1337dd7f880f52223e9c1bf8","modified":1668674386099},{"_id":"public/categories/DDD/index.html","hash":"390e8b764225aa4a32b3702a773b24c489d5a415","modified":1669114060060},{"_id":"public/archives/2021/index.html","hash":"feece2b553131f19657d06e65bec7d0dbe49055a","modified":1669399150341},{"_id":"public/archives/2021/09/index.html","hash":"5f133a2319cadf1423730df3e87063000aa8d772","modified":1669114060060},{"_id":"public/2021/09/01/DDD/领域驱动设计-DDD/index.html","hash":"0ce2e39e078950f93240679ded1a1ff9d3183749","modified":1669114060060},{"_id":"source/img/bg/icon.png","hash":"f29760ef646e0f9648a2b8bce601f0e4cb599a56","modified":1669112972476},{"_id":"public/img/bg/icon.png","hash":"f29760ef646e0f9648a2b8bce601f0e4cb599a56","modified":1669113050201},{"_id":"source/img/icon.png","hash":"552f90d7db4846ad4da6d97bf85a004185a0ff4b","modified":1669115067299},{"_id":"public/img/icon.png","hash":"552f90d7db4846ad4da6d97bf85a004185a0ff4b","modified":1669399150341},{"_id":"source/_posts/SpringBoot/【SpringBoot2】整合 Swagger2.md","hash":"7a44b9880de44e5da5357726d2f45fd0c9d839f3","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot2】线程池的定义和使用.md","hash":"9199670fad5693c03d48d4c03f5f409345680b0d","modified":1669193615681},{"_id":"source/_posts/SpringBoot/【SpringBoot】AOP处理请求日志处理打印.md","hash":"b157ce4c7f091c8dee1e44076c57a7096f85504e","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Druid 配置详解.md","hash":"b5b8b1560bac4ad0eb34072b4abdb635a8d2c779","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Redis 配置详解.md","hash":"812f97602fbd74b345e79f9f80957ab877cae742","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器.md","hash":"5bf83989c9fbe9c2d3dbd9097bddaa2bf5ee23f6","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】全局异常处理.md","hash":"3ca38fb10fff347cc40d9e97ad7f450d8d15334b","modified":1669190880308},{"_id":"public/archives/2020/index.html","hash":"52984f2f2c6d2b3afafdc9945e348130a8271d45","modified":1669399150341},{"_id":"public/archives/2020/03/index.html","hash":"cb330e303549f680a5dcd2f7c52760a90e30a120","modified":1669399150341},{"_id":"public/archives/2022/11/index.html","hash":"5226b77cddc838e2882dc9e7746c40c5d36be709","modified":1669399150341},{"_id":"public/categories/SpringBoot/index.html","hash":"26ae4a272753735ca737e335620b69574f00303d","modified":1669399150341},{"_id":"public/tags/SpringBoot/index.html","hash":"4170417cd17191759eba4f4b38e67dace86bc3ad","modified":1669399150341},{"_id":"public/tags/Swagger2/index.html","hash":"c706bde29d178636f44d9cf9e9bd6bb385553a76","modified":1669399150341},{"_id":"public/tags/序列化/index.html","hash":"30cc084c1b228231b025d87fd76b306747c0360c","modified":1669399150341},{"_id":"public/tags/时间格式/index.html","hash":"782d57ae7a31fbd83f64bfd6a82fd988b111063f","modified":1669399150341},{"_id":"public/tags/AOP/index.html","hash":"35aeea5d9afdabe0ed5aa5b1a9baf316b7ab5960","modified":1669399150341},{"_id":"public/tags/切面/index.html","hash":"b6e442bf62ea3e0b24c8410d5c10c8e4fa8edcd6","modified":1669399150341},{"_id":"public/tags/日志处理/index.html","hash":"157b526c309977abadc72bdc6e8f337f653ba9b2","modified":1669399150341},{"_id":"public/tags/Druid/index.html","hash":"688ffaa1dc0c9744c0939e5addf441b6226ade36","modified":1669399150341},{"_id":"public/tags/Mysql连接池/index.html","hash":"b9260a3f85fa4a2ea2becba1141f5998a65c06de","modified":1669399150341},{"_id":"public/tags/Redis/index.html","hash":"d47e3443371d4822afe0c66f48641fee70968823","modified":1669399150341},{"_id":"public/tags/Shiro/index.html","hash":"b591f4201bf1b9a64bf808f5fc2ab08878848739","modified":1669399150341},{"_id":"public/tags/自动配置/index.html","hash":"8765d8be058f85fca4b194dd2f28146ba4945154","modified":1669399150341},{"_id":"public/tags/全局异常/index.html","hash":"06963fe163a04accb9fedb43d5958ed21e8cdd36","modified":1669399150341},{"_id":"public/tags/线程池/index.html","hash":"839639a5716f98eb04970a0b122aca1fa5c27051","modified":1669399150341},{"_id":"public/20221123/a71082abf1bd.html","hash":"9b2e527ca16da6d4a972459934b2bcb695f0784b","modified":1669399150341},{"_id":"public/20221123/ede4d722a64c.html","hash":"0281c53a22f9c372aa9e31fe456183254a5aa06f","modified":1669399150341},{"_id":"public/20221123/40dba990c09b.html","hash":"7fa4db4d9adbf2f837542441fafe48b0923797a0","modified":1669399150341},{"_id":"public/20221123/af4853386d96.html","hash":"f05ca36f1ac69e14dca4ac7b82a98067b75e876c","modified":1669399150341},{"_id":"public/20221123/e91f888d1c7e.html","hash":"29fe35a01226c2f9a96aa5357cdcf0afcde07805","modified":1669399150341},{"_id":"public/20221123/f2126e09480c.html","hash":"8db435787e1d8cc903224b0feaca588e618a7b23","modified":1669399150341},{"_id":"public/20200322/e17c6e837cd0.html","hash":"09698b6b7022817495bd863faed0fc4673cb10b2","modified":1669399150341},{"_id":"public/20200318/04561bfb9fbe.html","hash":"5408e9f5dd129558f8311ce06d50b3cb91e5f843","modified":1669399150341},{"_id":"public/20200313/00267f611c07.html","hash":"7edcf577c724fec357e1c02b768e66452479dd94","modified":1669399150341},{"_id":"themes/hexo-theme-matery-master/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/_config.yml","hash":"056cf5f020e9a240522808b6872897f6dcee79fa","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1669280362197},{"_id":"source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1669280362197},{"_id":"source/about/index.md","hash":"27716ad12695774908760b4b4efa667654c1f754","modified":1669282621446},{"_id":"source/tags/index.md","hash":"9897e22b3e10cb380eacc82eed0f1267b00ea810","modified":1669282594358},{"_id":"themes/fluid/layout/_widget/post-calendar.ejs","hash":"aa9e9c6bbd79ade19f829dc6bc0e13637cdfd016","modified":1669395941380},{"_id":"themes/fluid/source/css/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/fluid/source/js/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/fluid/layout/_partials/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/fluid/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/fluid/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/fluid/layout/_widget/tag-cloud.ejs","hash":"ca71d908ce37bbbc66e32b456388e75848cd112f","modified":1669395486176},{"_id":"themes/fluid/layout/_widget/category-radar.ejs","hash":"81424bf3eb85d6b4fbc3ceb7a5cb065eb83c1b32","modified":1669398917261},{"_id":"public/page/3/index.html","hash":"4c8802de2226cef21607770d3cd563e828e73f10","modified":1669399150341},{"_id":"public/20220707/9e1b7d3d81ac.html","hash":"4025eeb367c7a0743e3a0369669ddf961948e9b5","modified":1669399150341},{"_id":"public/20220707/044c18a37b50.html","hash":"708dbfbdda7c991fd5295d857489040a12a956dd","modified":1669399150341},{"_id":"public/20220408/8a96b0831a59.html","hash":"de36e80b435aa48d609983716bd5603d3dd8232d","modified":1669399150341},{"_id":"public/20220408/8978ac0726f6.html","hash":"6720df7f653681ebde20aea4e387c42de07375c6","modified":1669399150341},{"_id":"public/20220301/f139a5fffab3.html","hash":"5c884c06e26cfdaa0b8ba6c9d0fd0c3576382384","modified":1669399150341},{"_id":"public/20210401/c121bd1e199e.html","hash":"f9c180f0299ddbbdee779124c0e6bd9488402833","modified":1669399150341},{"_id":"public/20210208/0559ae4aad3c.html","hash":"cfd386da66af75b6a59174bdf4db1f94160affb4","modified":1669399150341},{"_id":"public/20210208/a768595c9778.html","hash":"2c94eb7a077e4a5ab570be48690fb2cb39b9b39f","modified":1669399150341},{"_id":"public/20200609/45bd6c7c3187.html","hash":"234bcc00d3e571a85f5fda0d2349958de782da36","modified":1669399150341},{"_id":"public/20200515/3af21c7f6638.html","hash":"cd608497989078887363baaeb4910a65e90aac49","modified":1669399150341},{"_id":"public/20200515/6249325e8128.html","hash":"8cb93772bd3cc451e5cc770f10537aee7cf7d773","modified":1669399150341},{"_id":"public/20200514/96a9eeac3fe1.html","hash":"4f0e247605a77fba32edeb832bf628e7064b3d25","modified":1669399150341},{"_id":"public/20200507/3364a1445abf.html","hash":"328f3c56b53f0f79f018ad0f89a9722922b4bf4f","modified":1669399150341},{"_id":"public/20200425/cb6006ce99db.html","hash":"f99b655c6ca4617fb671431175abec1bbee6d720","modified":1669399150341},{"_id":"public/archives/page/3/index.html","hash":"b08f3686bebbc9e63283b98fd6399efb20ab3d5e","modified":1669399150341},{"_id":"public/archives/2020/04/index.html","hash":"83a153929b352a365154caf4bb77826ba99fd6cf","modified":1669399150341},{"_id":"public/archives/2020/05/index.html","hash":"d4252381bc3daa4c34521fbc967f690b40fff7ef","modified":1669399150341},{"_id":"public/archives/2020/06/index.html","hash":"85a07a0b88d95076cd23b70280354766baf0711a","modified":1669399150341},{"_id":"public/archives/2021/02/index.html","hash":"caa557a46fc02e961e387245cbc9c60fc99689ae","modified":1669399150341},{"_id":"public/archives/2021/04/index.html","hash":"bdf096fd2455950dd3e696dd088e8b3d153a61d3","modified":1669399150341},{"_id":"public/archives/2022/03/index.html","hash":"18c90aaf11e0349a8beb10f67e6670d47bd4fe0c","modified":1669399150341},{"_id":"public/archives/2022/04/index.html","hash":"b3925502c7c75544f1cbe71327e466329ed7b052","modified":1669399150341},{"_id":"public/archives/2022/07/index.html","hash":"bbb4464047aa5d2d08fbdb2da42843c297c85a82","modified":1669399150341},{"_id":"public/categories/JAVA/index.html","hash":"e2f9f5637b83b4f1d0647bb398731794836feb23","modified":1669399150341},{"_id":"public/categories/JVM/index.html","hash":"d787da5d8a8fb9e08e40dc927071e97e3d2830ba","modified":1669399150341},{"_id":"public/categories/React/index.html","hash":"b78604917ad11b8fd8300bfcdd61587a29146657","modified":1669399150341},{"_id":"public/categories/Mysql/index.html","hash":"04c72146458218d3dd0738c921619388f2d5fed0","modified":1669399150341},{"_id":"public/tags/CAS/index.html","hash":"c5ce4f6b8201db01f9083ae4c71676a5f63ba466","modified":1669399150341},{"_id":"public/tags/锁/index.html","hash":"c9afe90775a8bd9b5da00a41cd333b80074bdbf9","modified":1669399150341},{"_id":"public/tags/Synchronized/index.html","hash":"06d7de5e39e74109373b182de375323d082bce55","modified":1669399150341},{"_id":"public/tags/对象内存布局/index.html","hash":"3f26ddadc10e151216f761c7a70f7b8af1413053","modified":1669399150341},{"_id":"public/tags/指令乱序/index.html","hash":"84385727135647cfb4a2939c13e6f67b4784873c","modified":1669399150341},{"_id":"public/tags/指令重排序/index.html","hash":"e360d80f94349d7f695513bd1953d1300b6a9dcb","modified":1669399150341},{"_id":"public/tags/JVM/index.html","hash":"2a30009cd48f726913814c2561a612a51744d4d5","modified":1669399150341},{"_id":"public/tags/垃圾收集器/index.html","hash":"fea0d5716a0910eb527de03980d3533fda095353","modified":1669399150341},{"_id":"public/tags/垃圾回收算法/index.html","hash":"b124dca939803cb25721d1ffbb50895b568b97a7","modified":1669399150341},{"_id":"public/tags/Mysql/index.html","hash":"11f02f02ef994965e3670a87d9b5e39199f66956","modified":1669399150341},{"_id":"public/tags/React/index.html","hash":"c6a8493ec0618c9fe254dfd7e65ac5490e92a24b","modified":1669399150341},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1669399150341},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1669399150341},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1669399150341},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1669399150341},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1669399150341},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1669399150341},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1669399150341},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1669399150341},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1669399150341},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1669399150341},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1669399150341},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1669399150341},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1669399150341},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1669399150341},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1669399150341},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1669399150341},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1669399150341},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1669399150341},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1669399150341},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1669399150341},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1669399150341},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1669399150341},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1669399150341},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1669399150341},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1669399150341},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1669399150341},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1669399150341},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1669399150341},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1669399150341},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1669399150341},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1669399150341},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1669399150341},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1669399150341},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1669399150341},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1669399150341},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1669399150341},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1669399150341},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1669399150341},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1669399150341},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1669399150341},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1669399150341},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1669399150341},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1669399150341},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1669399150341},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1669399150341},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1669399150341},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1669399150341},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1669399150341},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1669399150341},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1669399150341},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1669399150341},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1669399150341},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1669399150341},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1669399150341},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1669399150341},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1669399150341},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1669399150341},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1669399150341},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1669399150341},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1669399150341},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1669399150341},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1669399150341},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1669399150341},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1669399150341},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1669399150341},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1669399150341},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1669399150341},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1669399150341},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1669399150341},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1669399150341},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1669399150341},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1669399150341},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1669399150341},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1669399150341},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1669399150341},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1669399150341},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1669399150341},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1669399150341},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1669399150341},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1669399150341},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1669399150341},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1669399150341},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1669399150341},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1669399150341},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1669399150341},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1669399150341},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1669399150341},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1669399150341},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1669399150341},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1669399150341},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1669399150341},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1669399150341},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1669399150341},{"_id":"public/js/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1669399150341},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1669399150341},{"_id":"source/CNAME","hash":"b1329bca2f0294779b2256d4668244a1c52808fe","modified":1669400397848},{"_id":"public/CNAME","hash":"b1329bca2f0294779b2256d4668244a1c52808fe","modified":1669400455047},{"_id":"source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669279924868}],"Category":[{"name":"公共关系学","_id":"cl9qxfdag0003bz2b3usu7bn6"},{"name":"人力资源管理","_id":"cl9qxfdar000lbz2b65jr6ibc"},{"name":"基础会计学","_id":"cl9qxfday0013bz2b8x6ah7kp"},{"name":"生产与运作管理","_id":"cl9qxfdb1001ibz2bbirqdwpc"},{"name":"电子商务","_id":"cl9qxfdb3001qbz2beosz70ge"},{"name":"环境安装","_id":"claktn8on001g19iaczrn7pwc"},{"name":"Untitled Folder","_id":"claktn8or001l19ia98kx1vom"},{"name":"开源分享","_id":"claktn8os001p19iaapni6an3"},{"name":"JAVA","_id":"claktn8ov001t19ia2fh650b6"},{"name":"DDD","_id":"claktn8p0002219ia9vejebtx"},{"name":"SpringCloud","_id":"claktn8p6002819iagynuahf6"},{"name":"JVM","_id":"claktn92i002a19ia8xah0dmq"},{"name":"SpringBoot","_id":"claktn9bh002f19ia0pub5jqs"},{"name":"React","_id":"claktn9nj002i19iah8za5g87"},{"name":"PMP","_id":"claktn9nk002k19ia8cd0fpx2"},{"name":"Mysql","_id":"claktn9nl002m19ia5h4raevy"}],"Data":[],"Page":[],"Post":[{"title":"SpringBoot2 整合 Swagger2","_content":"\n# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html\n","source":"_posts/SpringBoot/【SpringBoot2】整合 Swagger2.md","raw":"---\ntitle: SpringBoot2 整合 Swagger2\ntags:\n  - SpringBoot\n  - Swagger2\ncategories:\n  - SpringBoot\n---\n\n# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html\n","slug":"SpringBoot/【SpringBoot2】整合 Swagger2","published":1,"date":"2022-11-23T07:56:45.740Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i160000ryiaeqtp3qds","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n"},{"title":"SpringBoot中时间类型 序列化、反序列化、格式处理","_content":"# SpringBoot中时间类型 序列化、反序列化、格式处理\n\n## Date\n\n**yml全局配置**\n\n```yaml\nspring:  \n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss #配置POST请求Body中Date时间类型序列化格式处理，并返回\n```\n\n**请求参数类型转换**\n\n```java\n/**\n * 时间Date转换\n * 配置GET请求，Query查询Date时间类型参数转换\n */\n@Component\npublic class DateConverter implements Converter<String, Date> {\n  @Override\n  public Date convert(String source) {\n    if (StringUtils.isBlank(source)) {\n      return null;\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd\");\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd HH:mm:ss\");\n    }\n    throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n  }\n\n  public Date parseDate(String dateStr, String format) {\n    Date date = null;\n    try {\n      date = new SimpleDateFormat(format).parse(dateStr);\n    } catch (ParseException e) {\n      log.warn(\"转换{}为日期(pattern={})错误！\", dateStr, format);\n    }\n    return date;\n  }\n}\n```\n\n## JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\n\n```java\n/**\n * 序列化,反序列化,格式处理\n *\n * @author zc\n * @date 2020/7/9 01:42\n */\n@Slf4j\n@Configuration\npublic class JacksonCustomizerConfig {\n\n    @Value(\"${spring.jackson.date-format:yyyy-MM-dd HH:mm:ss}\")\n    private String localDateTimePattern;\n\n    @Value(\"${spring.jackson.local-date-format:yyyy-MM-dd}\")\n    private String localDatePattern;\n\n    @Value(\"${spring.jackson.local-time-format:HH:mm:ss}\")\n    private String localTimePattern;\n\n    @Bean\n    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {\n        return builder -> {\n            builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.serializerByType(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.serializerByType(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(localTimePattern)));\n            builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.deserializerByType(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.deserializerByType(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(localTimePattern)));\n        };\n    }\n  \n  \t/**\n     * 时间LocalDateTime转换\n     */\n    @Component\n    public static class LocalDateTimeConverter implements Converter<String, LocalDateTime> {\n        @Override\n        public LocalDateTime convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n                return LocalDateTime.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n\n    /**\n     * 时间LocalDate转换\n     */\n    @Component\n    public static class LocalDateConverter implements Converter<String, LocalDate> {\n        @Override\n        public LocalDate convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n                return LocalDate.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n  \n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","raw":"---\ntitle: SpringBoot中时间类型 序列化、反序列化、格式处理\ntags:\n  - SpringBoot\n  - 序列化\n  - 时间格式\ncategories:\n  - SpringBoot\n---\n# SpringBoot中时间类型 序列化、反序列化、格式处理\n\n## Date\n\n**yml全局配置**\n\n```yaml\nspring:  \n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss #配置POST请求Body中Date时间类型序列化格式处理，并返回\n```\n\n**请求参数类型转换**\n\n```java\n/**\n * 时间Date转换\n * 配置GET请求，Query查询Date时间类型参数转换\n */\n@Component\npublic class DateConverter implements Converter<String, Date> {\n  @Override\n  public Date convert(String source) {\n    if (StringUtils.isBlank(source)) {\n      return null;\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd\");\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd HH:mm:ss\");\n    }\n    throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n  }\n\n  public Date parseDate(String dateStr, String format) {\n    Date date = null;\n    try {\n      date = new SimpleDateFormat(format).parse(dateStr);\n    } catch (ParseException e) {\n      log.warn(\"转换{}为日期(pattern={})错误！\", dateStr, format);\n    }\n    return date;\n  }\n}\n```\n\n## JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\n\n```java\n/**\n * 序列化,反序列化,格式处理\n *\n * @author zc\n * @date 2020/7/9 01:42\n */\n@Slf4j\n@Configuration\npublic class JacksonCustomizerConfig {\n\n    @Value(\"${spring.jackson.date-format:yyyy-MM-dd HH:mm:ss}\")\n    private String localDateTimePattern;\n\n    @Value(\"${spring.jackson.local-date-format:yyyy-MM-dd}\")\n    private String localDatePattern;\n\n    @Value(\"${spring.jackson.local-time-format:HH:mm:ss}\")\n    private String localTimePattern;\n\n    @Bean\n    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {\n        return builder -> {\n            builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.serializerByType(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.serializerByType(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(localTimePattern)));\n            builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.deserializerByType(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.deserializerByType(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(localTimePattern)));\n        };\n    }\n  \n  \t/**\n     * 时间LocalDateTime转换\n     */\n    @Component\n    public static class LocalDateTimeConverter implements Converter<String, LocalDateTime> {\n        @Override\n        public LocalDateTime convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n                return LocalDateTime.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n\n    /**\n     * 时间LocalDate转换\n     */\n    @Component\n    public static class LocalDateConverter implements Converter<String, LocalDate> {\n        @Override\n        public LocalDate convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n                return LocalDate.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n  \n}\n```\n\n","slug":"SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理","published":1,"date":"2022-11-23T07:34:20.580Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1g0001ryiaelkr34w4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot中时间类型-序列化、反序列化、格式处理\"><a href=\"#SpringBoot中时间类型-序列化、反序列化、格式处理\" class=\"headerlink\" title=\"SpringBoot中时间类型 序列化、反序列化、格式处理\"></a>SpringBoot中时间类型 序列化、反序列化、格式处理</h1><h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><p><strong>yml全局配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>  <br>  <span class=\"hljs-attr\">jackson:</span><br>    <span class=\"hljs-attr\">time-zone:</span> <span class=\"hljs-string\">GMT+8</span><br>    <span class=\"hljs-attr\">date-format:</span> <span class=\"hljs-string\">yyyy-MM-dd</span> <span class=\"hljs-string\">HH:mm:ss</span> <span class=\"hljs-comment\">#配置POST请求Body中Date时间类型序列化格式处理，并返回</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请求参数类型转换</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 时间Date转换</span><br><span class=\"hljs-comment\"> * 配置GET请求，Query查询Date时间类型参数转换</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">parseDate</span><span class=\"hljs-params\">(String dateStr, String format)</span> &#123;<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(format).parse(dateStr);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (ParseException e) &#123;<br>      log.warn(<span class=\"hljs-string\">&quot;转换&#123;&#125;为日期(pattern=&#123;&#125;)错误！&quot;</span>, dateStr, format);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"><a href=\"#JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\" class=\"headerlink\" title=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"></a>JDK8-时间类型-LocalDateTime、LocalDate、LocalTime</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 序列化,反序列化,格式处理</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/7/9 01:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JacksonCustomizerConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDateTimePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-date-format:yyyy-MM-dd&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDatePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-time-format:HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localTimePattern;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"hljs-title function_\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> builder -&gt; &#123;<br>            builder.serializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.serializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.serializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>            builder.deserializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.deserializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.deserializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>        &#125;;<br>    &#125;<br>  <br>  \t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDateTime转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateTimeConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDateTime <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDate转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDate&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDate <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot中时间类型-序列化、反序列化、格式处理\"><a href=\"#SpringBoot中时间类型-序列化、反序列化、格式处理\" class=\"headerlink\" title=\"SpringBoot中时间类型 序列化、反序列化、格式处理\"></a>SpringBoot中时间类型 序列化、反序列化、格式处理</h1><h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><p><strong>yml全局配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>  <br>  <span class=\"hljs-attr\">jackson:</span><br>    <span class=\"hljs-attr\">time-zone:</span> <span class=\"hljs-string\">GMT+8</span><br>    <span class=\"hljs-attr\">date-format:</span> <span class=\"hljs-string\">yyyy-MM-dd</span> <span class=\"hljs-string\">HH:mm:ss</span> <span class=\"hljs-comment\">#配置POST请求Body中Date时间类型序列化格式处理，并返回</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请求参数类型转换</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 时间Date转换</span><br><span class=\"hljs-comment\"> * 配置GET请求，Query查询Date时间类型参数转换</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">parseDate</span><span class=\"hljs-params\">(String dateStr, String format)</span> &#123;<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(format).parse(dateStr);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (ParseException e) &#123;<br>      log.warn(<span class=\"hljs-string\">&quot;转换&#123;&#125;为日期(pattern=&#123;&#125;)错误！&quot;</span>, dateStr, format);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"><a href=\"#JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\" class=\"headerlink\" title=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"></a>JDK8-时间类型-LocalDateTime、LocalDate、LocalTime</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 序列化,反序列化,格式处理</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/7/9 01:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JacksonCustomizerConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDateTimePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-date-format:yyyy-MM-dd&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDatePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-time-format:HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localTimePattern;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"hljs-title function_\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> builder -&gt; &#123;<br>            builder.serializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.serializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.serializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>            builder.deserializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.deserializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.deserializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>        &#125;;<br>    &#125;<br>  <br>  \t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDateTime转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateTimeConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDateTime <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDate转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDate&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDate <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot AOP处理请求日志处理打印","_content":"# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】AOP处理请求日志处理打印.md","raw":"---\ntitle: SpringBoot AOP处理请求日志处理打印\ntags:\n  - SpringBoot\n  - AOP\n  - 切面\n  - 日志处理\ncategories:\n  - SpringBoot\n---\n# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】AOP处理请求日志处理打印","published":1,"date":"2022-11-23T07:34:50.506Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1j0003ryia8p9n5h2c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot Druid 配置详解","_content":"# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","source":"_posts/SpringBoot/【SpringBoot】Druid 配置详解.md","raw":"---\ntitle: SpringBoot Druid 配置详解\ntags:\n  - SpringBoot\n  - Druid\n  - Mysql连接池\ncategories:\n  - SpringBoot\n---\n# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","slug":"SpringBoot/【SpringBoot】Druid 配置详解","published":1,"date":"2020-03-17T16:35:09.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1k0004ryiad5q060oj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n"},{"title":"SpringBoot Redis 配置详解","_content":"# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)\n","source":"_posts/SpringBoot/【SpringBoot】Redis 配置详解.md","raw":"---\ntitle: SpringBoot Redis 配置详解\ntags:\n  - SpringBoot\n  - Redis\ncategories:\n  - SpringBoot\n---\n# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)\n","slug":"SpringBoot/【SpringBoot】Redis 配置详解","published":1,"date":"2020-03-22T12:24:41.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1k0005ryia0anwhmwa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n"},{"title":"SpringBoot Shiro 配置自定义密码加密器","_content":"# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器.md","raw":"---\ntitle: SpringBoot Shiro 配置自定义密码加密器\ntags:\n  - SpringBoot\n  - Shiro\ncategories:\n  - SpringBoot\n---\n# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器","published":1,"date":"2020-03-12T17:34:28.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1r000vryia1fguhxko","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot 全局异常处理","_content":"# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】全局异常处理.md","raw":"---\ntitle: SpringBoot 全局异常处理\ntags:\n  - SpringBoot\n  - 全局异常\ncategories:\n  - SpringBoot\n---\n# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】全局异常处理","published":1,"date":"2022-11-23T07:33:47.331Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1s000wryia138m5zxw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot自动配置与@Enable方式配置","_content":"# SpringBoot自动配置与@Enable方式配置\n\n## SpringBoot自动配置：\n\n在`resources`目录下新建`META-INF`目录，创建`spring.factories`文件。\n\n```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig\n```\n\n```java\n/**\n * @author zc\n * @date 2020/12/22 00:53\n */\n@Slf4j\n@Configuration\npublic class TestAutoConfig {\n\n    @Data\n    public class Test {\n\n    }\n\n    @Bean\n    public Test user() {\n        log.error(\"=======\");\n        return new Test();\n    }\n}\n```\n\n此种方式就可以实现SpringBoot的自动配置加载。\n\n## 通过`@Enable`注解方式实现自动配置\n\n```java\n/**\n * 启用注解：@EnableTest\n *\n * @author ZC\n * @date 2020/6/8-22:05\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import({TestAutoConfig.class})\npublic @interface EnableTest {\n}\n```\n\n**不要在`spring.factories`文件里配置加载类，不然SpringBoot就自动加载配置了**\n\n此时只需要在启动类上加上`@EnableTest`就可以实现加载配置类了\n\n","source":"_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","raw":"---\ntitle: SpringBoot自动配置与@Enable方式配置\ntags:\n  - SpringBoot\n  - 自动配置\ncategories:\n  - SpringBoot\n---\n# SpringBoot自动配置与@Enable方式配置\n\n## SpringBoot自动配置：\n\n在`resources`目录下新建`META-INF`目录，创建`spring.factories`文件。\n\n```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig\n```\n\n```java\n/**\n * @author zc\n * @date 2020/12/22 00:53\n */\n@Slf4j\n@Configuration\npublic class TestAutoConfig {\n\n    @Data\n    public class Test {\n\n    }\n\n    @Bean\n    public Test user() {\n        log.error(\"=======\");\n        return new Test();\n    }\n}\n```\n\n此种方式就可以实现SpringBoot的自动配置加载。\n\n## 通过`@Enable`注解方式实现自动配置\n\n```java\n/**\n * 启用注解：@EnableTest\n *\n * @author ZC\n * @date 2020/6/8-22:05\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import({TestAutoConfig.class})\npublic @interface EnableTest {\n}\n```\n\n**不要在`spring.factories`文件里配置加载类，不然SpringBoot就自动加载配置了**\n\n此时只需要在启动类上加上`@EnableTest`就可以实现加载配置类了\n\n","slug":"SpringBoot/【SpringBoot】自动配置与@Enable方式配置","published":1,"date":"2022-11-23T07:34:27.960Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1t000yryia313qftj5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot自动配置与-Enable方式配置\"><a href=\"#SpringBoot自动配置与-Enable方式配置\" class=\"headerlink\" title=\"SpringBoot自动配置与@Enable方式配置\"></a>SpringBoot自动配置与@Enable方式配置</h1><h2 id=\"SpringBoot自动配置：\"><a href=\"#SpringBoot自动配置：\" class=\"headerlink\" title=\"SpringBoot自动配置：\"></a>SpringBoot自动配置：</h2><p>在<code>resources</code>目录下新建<code>META-INF</code>目录，创建<code>spring.factories</code>文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/12/22 00:53</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestAutoConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Test <span class=\"hljs-title function_\">user</span><span class=\"hljs-params\">()</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;=======&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Test</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此种方式就可以实现SpringBoot的自动配置加载。</p>\n<h2 id=\"通过-Enable注解方式实现自动配置\"><a href=\"#通过-Enable注解方式实现自动配置\" class=\"headerlink\" title=\"通过@Enable注解方式实现自动配置\"></a>通过<code>@Enable</code>注解方式实现自动配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 启用注解：<span class=\"hljs-doctag\">@EnableTest</span></span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> ZC</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/6/8-22:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(&#123;TestAutoConfig.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>不要在<code>spring.factories</code>文件里配置加载类，不然SpringBoot就自动加载配置了</strong></p>\n<p>此时只需要在启动类上加上<code>@EnableTest</code>就可以实现加载配置类了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot自动配置与-Enable方式配置\"><a href=\"#SpringBoot自动配置与-Enable方式配置\" class=\"headerlink\" title=\"SpringBoot自动配置与@Enable方式配置\"></a>SpringBoot自动配置与@Enable方式配置</h1><h2 id=\"SpringBoot自动配置：\"><a href=\"#SpringBoot自动配置：\" class=\"headerlink\" title=\"SpringBoot自动配置：\"></a>SpringBoot自动配置：</h2><p>在<code>resources</code>目录下新建<code>META-INF</code>目录，创建<code>spring.factories</code>文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/12/22 00:53</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestAutoConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Test <span class=\"hljs-title function_\">user</span><span class=\"hljs-params\">()</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;=======&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Test</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此种方式就可以实现SpringBoot的自动配置加载。</p>\n<h2 id=\"通过-Enable注解方式实现自动配置\"><a href=\"#通过-Enable注解方式实现自动配置\" class=\"headerlink\" title=\"通过@Enable注解方式实现自动配置\"></a>通过<code>@Enable</code>注解方式实现自动配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 启用注解：<span class=\"hljs-doctag\">@EnableTest</span></span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> ZC</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/6/8-22:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(&#123;TestAutoConfig.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>不要在<code>spring.factories</code>文件里配置加载类，不然SpringBoot就自动加载配置了</strong></p>\n<p>此时只需要在启动类上加上<code>@EnableTest</code>就可以实现加载配置类了</p>\n"},{"title":"SpringBoot2 线程池的定义和使用","abbrlink":"8a11e15c","_content":"\n# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot2】线程池的定义和使用.md","raw":"---\ntitle: SpringBoot2 线程池的定义和使用\ntags:\n  - SpringBoot\n  - 线程池\ncategories:\n  - SpringBoot\nabbrlink: 8a11e15c\n---\n\n# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","slug":"SpringBoot/【SpringBoot2】线程池的定义和使用","published":1,"date":"2022-11-23T07:56:35.069Z","updated":"2022-11-23T08:53:35.681Z","_id":"clates4c90000fiiadchxbgky","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"CAS","_content":"# CAS\n\n**compare and swap/comparen and exchange (比较并交换)**\n\n![](https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png)\n\n![](https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png)\n\n**注意ABA问题：**\n\na=0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作=0，线程二又写回到a，此时a又=0；当线程一执行写回的时候去判断a是不是等于原来的值0。\n\n但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？\n\n那么如何解决这个问题呢？\n\nCAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。\n\n**举例说明：**\n\nJDK里提供的原子类在这个包下`java.util.concurrent.atomic`\n\n```java\n//Integer原子类\nAtomicInteger i = new AtomicInteger();\ni.incrementAndGet();\n\n//源码\n//Atomically increments by one the current value. 将当前值原子地加1。\n//Returns:the updated value 返回:更新后的值\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n\n//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。\n//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。\n//Unsafe类是\"final\"的，不允许继承。且构造函数是private的:\n//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe\npublic Unsafe getUnsafe() throws IllegalAccessException {\n    Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n    unsafeField.setAccessible(true);\n    Unsafe unsafe = (Unsafe) unsafeField.get(null);\n    return unsafe;\n}\n//Java中的Unsafe类\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n//native C++方法\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n//汇编指令，硬件直接支持 lock cmpxchg\n```\n\n","source":"_posts/JAVA/CAS.md","raw":"---\ntitle: CAS\ntags:\n  - CAS\ncategories:\n  - JAVA\n---\n# CAS\n\n**compare and swap/comparen and exchange (比较并交换)**\n\n![](https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png)\n\n![](https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png)\n\n**注意ABA问题：**\n\na=0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作=0，线程二又写回到a，此时a又=0；当线程一执行写回的时候去判断a是不是等于原来的值0。\n\n但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？\n\n那么如何解决这个问题呢？\n\nCAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。\n\n**举例说明：**\n\nJDK里提供的原子类在这个包下`java.util.concurrent.atomic`\n\n```java\n//Integer原子类\nAtomicInteger i = new AtomicInteger();\ni.incrementAndGet();\n\n//源码\n//Atomically increments by one the current value. 将当前值原子地加1。\n//Returns:the updated value 返回:更新后的值\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n\n//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。\n//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。\n//Unsafe类是\"final\"的，不允许继承。且构造函数是private的:\n//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe\npublic Unsafe getUnsafe() throws IllegalAccessException {\n    Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n    unsafeField.setAccessible(true);\n    Unsafe unsafe = (Unsafe) unsafeField.get(null);\n    return unsafe;\n}\n//Java中的Unsafe类\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n//native C++方法\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n//汇编指令，硬件直接支持 lock cmpxchg\n```\n\n","slug":"JAVA/CAS","published":1,"date":"2021-02-08T10:02:05.000Z","updated":"2022-11-25T17:30:28.024Z","_id":"clawrzu8b0000u42bcbtsgk30","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p><strong>compare and swap&#x2F;comparen and exchange (比较并交换)</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png\"></p>\n<p><strong>注意ABA问题：</strong></p>\n<p>a&#x3D;0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作&#x3D;0，线程二又写回到a，此时a又&#x3D;0；当线程一执行写回的时候去判断a是不是等于原来的值0。</p>\n<p>但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？</p>\n<p>那么如何解决这个问题呢？</p>\n<p>CAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。</p>\n<p><strong>举例说明：</strong></p>\n<p>JDK里提供的原子类在这个包下<code>java.util.concurrent.atomic</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Integer原子类</span><br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>i.incrementAndGet();<br><br><span class=\"hljs-comment\">//源码</span><br><span class=\"hljs-comment\">//Atomically increments by one the current value. 将当前值原子地加1。</span><br><span class=\"hljs-comment\">//Returns:the updated value 返回:更新后的值</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">incrementAndGet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> unsafe.getAndAddInt(<span class=\"hljs-built_in\">this</span>, valueOffset, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。</span><br><span class=\"hljs-comment\">//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。</span><br><span class=\"hljs-comment\">//Unsafe类是&quot;final&quot;的，不允许继承。且构造函数是private的:</span><br><span class=\"hljs-comment\">//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe</span><br><span class=\"hljs-keyword\">public</span> Unsafe <span class=\"hljs-title function_\">getUnsafe</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>    <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">unsafeField</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredFields()[<span class=\"hljs-number\">0</span>];<br>    unsafeField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-type\">Unsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> (Unsafe) unsafeField.get(<span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-keyword\">return</span> unsafe;<br>&#125;<br><span class=\"hljs-comment\">//Java中的Unsafe类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAndAddInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4)</span> &#123;<br>    <span class=\"hljs-type\">int</span> var5;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        var5 = <span class=\"hljs-built_in\">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class=\"hljs-keyword\">return</span> var5;<br>&#125;<br><span class=\"hljs-comment\">//native C++方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compareAndSwapInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4, <span class=\"hljs-type\">int</span> var5)</span>;<br><span class=\"hljs-comment\">//汇编指令，硬件直接支持 lock cmpxchg</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p><strong>compare and swap&#x2F;comparen and exchange (比较并交换)</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png\"></p>\n<p><strong>注意ABA问题：</strong></p>\n<p>a&#x3D;0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作&#x3D;0，线程二又写回到a，此时a又&#x3D;0；当线程一执行写回的时候去判断a是不是等于原来的值0。</p>\n<p>但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？</p>\n<p>那么如何解决这个问题呢？</p>\n<p>CAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。</p>\n<p><strong>举例说明：</strong></p>\n<p>JDK里提供的原子类在这个包下<code>java.util.concurrent.atomic</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Integer原子类</span><br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>i.incrementAndGet();<br><br><span class=\"hljs-comment\">//源码</span><br><span class=\"hljs-comment\">//Atomically increments by one the current value. 将当前值原子地加1。</span><br><span class=\"hljs-comment\">//Returns:the updated value 返回:更新后的值</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">incrementAndGet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> unsafe.getAndAddInt(<span class=\"hljs-built_in\">this</span>, valueOffset, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。</span><br><span class=\"hljs-comment\">//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。</span><br><span class=\"hljs-comment\">//Unsafe类是&quot;final&quot;的，不允许继承。且构造函数是private的:</span><br><span class=\"hljs-comment\">//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe</span><br><span class=\"hljs-keyword\">public</span> Unsafe <span class=\"hljs-title function_\">getUnsafe</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>    <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">unsafeField</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredFields()[<span class=\"hljs-number\">0</span>];<br>    unsafeField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-type\">Unsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> (Unsafe) unsafeField.get(<span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-keyword\">return</span> unsafe;<br>&#125;<br><span class=\"hljs-comment\">//Java中的Unsafe类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAndAddInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4)</span> &#123;<br>    <span class=\"hljs-type\">int</span> var5;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        var5 = <span class=\"hljs-built_in\">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class=\"hljs-keyword\">return</span> var5;<br>&#125;<br><span class=\"hljs-comment\">//native C++方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compareAndSwapInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4, <span class=\"hljs-type\">int</span> var5)</span>;<br><span class=\"hljs-comment\">//汇编指令，硬件直接支持 lock cmpxchg</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Synchronized锁升级过程","_content":"# Synchronized锁升级过程\n\n![](https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png)\n\n## 无锁\n\n表示刚刚new出来的对象\n\n## 偏向锁\n\n此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程\n\n## 轻量级锁（自旋锁、自适应锁、CAS）\n\n这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。\n\nJDK1.6中-XX:+UseSpinning开启；\n-XX:PreBlockSpin=10 为自旋次数；\nJDK1.7后，去掉此参数，由jvm自动控制；\n\n## 重量级锁\n\n向硬件级别CPU去申请锁资源\n","source":"_posts/JAVA/Synchronized锁升级过程.md","raw":"---\ntitle: Synchronized锁升级过程\ntags:\n  - 锁\n  - Synchronized\ncategories:\n  - JAVA\n---\n# Synchronized锁升级过程\n\n![](https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png)\n\n## 无锁\n\n表示刚刚new出来的对象\n\n## 偏向锁\n\n此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程\n\n## 轻量级锁（自旋锁、自适应锁、CAS）\n\n这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。\n\nJDK1.6中-XX:+UseSpinning开启；\n-XX:PreBlockSpin=10 为自旋次数；\nJDK1.7后，去掉此参数，由jvm自动控制；\n\n## 重量级锁\n\n向硬件级别CPU去申请锁资源\n","slug":"JAVA/Synchronized锁升级过程","published":1,"date":"2021-02-08T08:09:10.000Z","updated":"2022-11-25T17:30:28.023Z","_id":"clawrzuaa0001u42bh3ap7g4f","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Synchronized锁升级过程\"><a href=\"#Synchronized锁升级过程\" class=\"headerlink\" title=\"Synchronized锁升级过程\"></a>Synchronized锁升级过程</h1><p><img src=\"https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png\"></p>\n<h2 id=\"无锁\"><a href=\"#无锁\" class=\"headerlink\" title=\"无锁\"></a>无锁</h2><p>表示刚刚new出来的对象</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程</p>\n<h2 id=\"轻量级锁（自旋锁、自适应锁、CAS）\"><a href=\"#轻量级锁（自旋锁、自适应锁、CAS）\" class=\"headerlink\" title=\"轻量级锁（自旋锁、自适应锁、CAS）\"></a>轻量级锁（自旋锁、自适应锁、CAS）</h2><p>这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。</p>\n<p>JDK1.6中-XX:+UseSpinning开启；<br>-XX:PreBlockSpin&#x3D;10 为自旋次数；<br>JDK1.7后，去掉此参数，由jvm自动控制；</p>\n<h2 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h2><p>向硬件级别CPU去申请锁资源</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Synchronized锁升级过程\"><a href=\"#Synchronized锁升级过程\" class=\"headerlink\" title=\"Synchronized锁升级过程\"></a>Synchronized锁升级过程</h1><p><img src=\"https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png\"></p>\n<h2 id=\"无锁\"><a href=\"#无锁\" class=\"headerlink\" title=\"无锁\"></a>无锁</h2><p>表示刚刚new出来的对象</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程</p>\n<h2 id=\"轻量级锁（自旋锁、自适应锁、CAS）\"><a href=\"#轻量级锁（自旋锁、自适应锁、CAS）\" class=\"headerlink\" title=\"轻量级锁（自旋锁、自适应锁、CAS）\"></a>轻量级锁（自旋锁、自适应锁、CAS）</h2><p>这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。</p>\n<p>JDK1.6中-XX:+UseSpinning开启；<br>-XX:PreBlockSpin&#x3D;10 为自旋次数；<br>JDK1.7后，去掉此参数，由jvm自动控制；</p>\n<h2 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h2><p>向硬件级别CPU去申请锁资源</p>\n"},{"title":"JAVA对象内存布局","_content":"# JAVA对象内存布局\n\n![](https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png)\n\n对象头：\n\n- markword：记录锁的信息、GC信息\n- 类型指针class pointer：记录对象属于哪个Class类型的\n\n实例数据instance data：成员变量\n\n对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快\n\n```pom\n<!-- 工具：JOL=JAVA Object Layout -->\n<dependency>\n    <groupId>org.openjdk.jol</groupId>\n    <artifactId>jol-core</artifactId>\n    <version>0.14</version>\n</dependency>\n```\n\n```java\npublic static void main(String[] args) {\n    Object o = new Object();\n    System.out.println(ClassLayout.parseInstance(o).toPrintable());\n}\n```\n\n```shell\njava.lang.Object object internals:\n OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE\n      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)[padding]\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n```\n\n```shell\njava -XX:+PrintCommandLineFlags -version\n-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节\n\n-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节\n\n数组的话会有一个数组长度length，占用4个字节。\n\n|  类型   | 占用字节 | 占用位数 |\n| :-----: | :------: | :------: |\n|  byte   |    1     |    8     |\n|  short  |    2     |    16    |\n|   int   |    4     |    32    |\n|  long   |    8     |    64    |\n|  float  |    4     |    32    |\n| double  |    8     |    64    |\n|  char   |    2     |    16    |\n| boolean |    1     |    8     |\n\n**示例：**\n\n```java\n@Data\npublic class Account {\n    private long id;\n    private String username;\n    private String password;\n\n    public static void main(String[] args) {\n        Object o1 = new Object();\n        System.out.println(\"空对象：\" + ClassLayout.parseInstance(o1).toPrintable());\n        Object o2 = new Account();\n        System.out.println(\"带属性对象：\" + ClassLayout.parseInstance(o2).toPrintable());\n        Object o3 = new int[1];\n        System.out.println(\"数组：\" + ClassLayout.parseInstance(o3).toPrintable());\n        Object o4 = new ArrayList<>();\n        System.out.println(\"空List：\" + ClassLayout.parseInstance(o4).toPrintable());\n    }\n}\n```\n\n**控制台输出：**\n\n```\n空对象：java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n带属性对象：cn.happyloves.example.dto.Account object internals:\n OFFSET  SIZE               TYPE DESCRIPTION                               VALUE\n      0     4                    (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                    (object header)                           54 c3 00 f8 (01010100 11000011 00000000 11111000) (-134167724)\n     12     4   java.lang.String Account.username                          null\n     16     8               long Account.id                                0\n     24     4   java.lang.String Account.password                          null\n     28     4                    (loss due to the next object alignment)\nInstance size: 32 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n数组：[I object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)\n     12     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n     16     4    int [I.<elements>                             N/A\n     20     4        (loss due to the next object alignment)\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n空List：java.util.ArrayList object internals:\n OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE\n      0     4                      (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                      (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                      (object header)                           7f 2f 00 f8 (01111111 00101111 00000000 11111000) (-134205569)\n     12     4                  int AbstractList.modCount                     0\n     16     4                  int ArrayList.size                            0\n     20     4   java.lang.Object[] ArrayList.elementData                     []\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n```\n\n","source":"_posts/JAVA/对象内存布局.md","raw":"---\ntitle: JAVA对象内存布局\ntags:\n  - 对象内存布局\ncategories:\n  - JAVA\n---\n# JAVA对象内存布局\n\n![](https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png)\n\n对象头：\n\n- markword：记录锁的信息、GC信息\n- 类型指针class pointer：记录对象属于哪个Class类型的\n\n实例数据instance data：成员变量\n\n对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快\n\n```pom\n<!-- 工具：JOL=JAVA Object Layout -->\n<dependency>\n    <groupId>org.openjdk.jol</groupId>\n    <artifactId>jol-core</artifactId>\n    <version>0.14</version>\n</dependency>\n```\n\n```java\npublic static void main(String[] args) {\n    Object o = new Object();\n    System.out.println(ClassLayout.parseInstance(o).toPrintable());\n}\n```\n\n```shell\njava.lang.Object object internals:\n OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE\n      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)[padding]\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n```\n\n```shell\njava -XX:+PrintCommandLineFlags -version\n-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节\n\n-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节\n\n数组的话会有一个数组长度length，占用4个字节。\n\n|  类型   | 占用字节 | 占用位数 |\n| :-----: | :------: | :------: |\n|  byte   |    1     |    8     |\n|  short  |    2     |    16    |\n|   int   |    4     |    32    |\n|  long   |    8     |    64    |\n|  float  |    4     |    32    |\n| double  |    8     |    64    |\n|  char   |    2     |    16    |\n| boolean |    1     |    8     |\n\n**示例：**\n\n```java\n@Data\npublic class Account {\n    private long id;\n    private String username;\n    private String password;\n\n    public static void main(String[] args) {\n        Object o1 = new Object();\n        System.out.println(\"空对象：\" + ClassLayout.parseInstance(o1).toPrintable());\n        Object o2 = new Account();\n        System.out.println(\"带属性对象：\" + ClassLayout.parseInstance(o2).toPrintable());\n        Object o3 = new int[1];\n        System.out.println(\"数组：\" + ClassLayout.parseInstance(o3).toPrintable());\n        Object o4 = new ArrayList<>();\n        System.out.println(\"空List：\" + ClassLayout.parseInstance(o4).toPrintable());\n    }\n}\n```\n\n**控制台输出：**\n\n```\n空对象：java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n带属性对象：cn.happyloves.example.dto.Account object internals:\n OFFSET  SIZE               TYPE DESCRIPTION                               VALUE\n      0     4                    (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                    (object header)                           54 c3 00 f8 (01010100 11000011 00000000 11111000) (-134167724)\n     12     4   java.lang.String Account.username                          null\n     16     8               long Account.id                                0\n     24     4   java.lang.String Account.password                          null\n     28     4                    (loss due to the next object alignment)\nInstance size: 32 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n数组：[I object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)\n     12     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n     16     4    int [I.<elements>                             N/A\n     20     4        (loss due to the next object alignment)\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n空List：java.util.ArrayList object internals:\n OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE\n      0     4                      (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                      (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                      (object header)                           7f 2f 00 f8 (01111111 00101111 00000000 11111000) (-134205569)\n     12     4                  int AbstractList.modCount                     0\n     16     4                  int ArrayList.size                            0\n     20     4   java.lang.Object[] ArrayList.elementData                     []\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n```\n\n","slug":"JAVA/对象内存布局","published":1,"date":"2022-07-07T08:21:10.758Z","updated":"2022-11-25T17:30:28.024Z","_id":"clawrzuab0002u42bfuxx6olf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JAVA对象内存布局\"><a href=\"#JAVA对象内存布局\" class=\"headerlink\" title=\"JAVA对象内存布局\"></a>JAVA对象内存布局</h1><p><img src=\"https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png\"></p>\n<p>对象头：</p>\n<ul>\n<li>markword：记录锁的信息、GC信息</li>\n<li>类型指针class pointer：记录对象属于哪个Class类型的</li>\n</ul>\n<p>实例数据instance data：成员变量</p>\n<p>对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 工具：JOL=JAVA Object Layout --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;<br>    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;<br>    &lt;version&gt;0.14&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    System.out.println(ClassLayout.parseInstance(o).toPrintable());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java.lang.Object object internals:<br> OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE<br>      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br>      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br>      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)<br>     12     4        (loss due to the next object alignment)[padding]<br>Instance size: 16 bytes<br>Space losses: 0 bytes internal + 4 bytes external = 4 bytes total<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintCommandLineFlags -version<br>-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC<br>java version &quot;1.8.0_221&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<br></code></pre></td></tr></table></figure>\n\n<p>-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节</p>\n<p>-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节</p>\n<p>数组的话会有一个数组长度length，占用4个字节。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">占用字节</th>\n<th align=\"center\">占用位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;空对象：&quot;</span> + ClassLayout.parseInstance(o1).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;带属性对象：&quot;</span> + ClassLayout.parseInstance(o2).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">1</span>];<br>        System.out.println(<span class=\"hljs-string\">&quot;数组：&quot;</span> + ClassLayout.parseInstance(o3).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        System.out.println(<span class=\"hljs-string\">&quot;空List：&quot;</span> + ClassLayout.parseInstance(o4).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>控制台输出：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">空对象：java.lang.Object object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           e5<span class=\"hljs-number\"> 01 </span>00 f8 (11100101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217243)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 16 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>带属性对象：cn.happyloves.example.dto.Account object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 54 </span>c3<span class=\"hljs-number\"> 00 </span>f8 (01010100<span class=\"hljs-number\"> 11000011 </span>00000000 11111000) (-134167724)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.username                          null<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 8 </span>              long Account.id                                0<br>    <span class=\"hljs-number\"> 24 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.password                          null<br>    <span class=\"hljs-number\"> 28 </span>   <span class=\"hljs-number\"> 4 </span>                   (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 32 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>数组：[I object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           6d<span class=\"hljs-number\"> 01 </span>00 f8 (01101101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217363)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>   int [I.&lt;elements&gt;                             N/A<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>空List：java.util.ArrayList object internals:<br> OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                           7f 2f<span class=\"hljs-number\"> 00 </span>f8 (01111111<span class=\"hljs-number\"> 00101111 </span>00000000 11111000) (-134205569)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>                 int AbstractList.modCount                     0<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>                 int ArrayList.size                            0<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.Object[] ArrayList.elementData                     []<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 0 </span>bytes external =<span class=\"hljs-number\"> 0 </span>bytes total<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA对象内存布局\"><a href=\"#JAVA对象内存布局\" class=\"headerlink\" title=\"JAVA对象内存布局\"></a>JAVA对象内存布局</h1><p><img src=\"https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png\"></p>\n<p>对象头：</p>\n<ul>\n<li>markword：记录锁的信息、GC信息</li>\n<li>类型指针class pointer：记录对象属于哪个Class类型的</li>\n</ul>\n<p>实例数据instance data：成员变量</p>\n<p>对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 工具：JOL=JAVA Object Layout --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;<br>    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;<br>    &lt;version&gt;0.14&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    System.out.println(ClassLayout.parseInstance(o).toPrintable());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java.lang.Object object internals:<br> OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE<br>      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br>      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br>      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)<br>     12     4        (loss due to the next object alignment)[padding]<br>Instance size: 16 bytes<br>Space losses: 0 bytes internal + 4 bytes external = 4 bytes total<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintCommandLineFlags -version<br>-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC<br>java version &quot;1.8.0_221&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<br></code></pre></td></tr></table></figure>\n\n<p>-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节</p>\n<p>-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节</p>\n<p>数组的话会有一个数组长度length，占用4个字节。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">占用字节</th>\n<th align=\"center\">占用位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;空对象：&quot;</span> + ClassLayout.parseInstance(o1).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;带属性对象：&quot;</span> + ClassLayout.parseInstance(o2).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">1</span>];<br>        System.out.println(<span class=\"hljs-string\">&quot;数组：&quot;</span> + ClassLayout.parseInstance(o3).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        System.out.println(<span class=\"hljs-string\">&quot;空List：&quot;</span> + ClassLayout.parseInstance(o4).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>控制台输出：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">空对象：java.lang.Object object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           e5<span class=\"hljs-number\"> 01 </span>00 f8 (11100101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217243)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 16 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>带属性对象：cn.happyloves.example.dto.Account object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 54 </span>c3<span class=\"hljs-number\"> 00 </span>f8 (01010100<span class=\"hljs-number\"> 11000011 </span>00000000 11111000) (-134167724)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.username                          null<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 8 </span>              long Account.id                                0<br>    <span class=\"hljs-number\"> 24 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.password                          null<br>    <span class=\"hljs-number\"> 28 </span>   <span class=\"hljs-number\"> 4 </span>                   (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 32 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>数组：[I object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           6d<span class=\"hljs-number\"> 01 </span>00 f8 (01101101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217363)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>   int [I.&lt;elements&gt;                             N/A<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>空List：java.util.ArrayList object internals:<br> OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                           7f 2f<span class=\"hljs-number\"> 00 </span>f8 (01111111<span class=\"hljs-number\"> 00101111 </span>00000000 11111000) (-134205569)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>                 int AbstractList.modCount                     0<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>                 int ArrayList.size                            0<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.Object[] ArrayList.elementData                     []<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 0 </span>bytes external =<span class=\"hljs-number\"> 0 </span>bytes total<br></code></pre></td></tr></table></figure>\n\n"},{"title":"指令乱序，指令重排序","_content":"# 指令乱序，指令重排序\n\n```java\n/**\n * 指令乱序，指令重排序\n * <p>\n * 弟2948605次（0,1)\n * 弟2948606次（0,1)\n * 弟2948607次（0,1)\n * 弟2948608次（0,0)\n *\n * @author zc\n * @date 2021/1/15 10:04\n */\npublic class Demo1 {\n    private static int x = 0, y = 0;\n    private static int a = 0, b = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        for (int i = 0; ; i++) {\n            x = 0;\n            y = 0;\n            a = 0;\n            b = 0;\n            Thread thread1 = new Thread(() -> {\n                a = 1;\n                x = b;\n            });\n            Thread thread2 = new Thread(() -> {\n                b = 1;\n                y = a;\n            });\n            thread1.start();\n            thread2.start();\n            thread1.join();\n            thread2.join();\n            String result = \"弟\" + i + \"次（\" + x + \",\" + y + \")\";\n            if (x == 0 && y == 0) {\n                System.out.println(result);\n                break;\n            } else {\n                System.out.println(result);\n            }\n        }\n    }\n}\n```\n\n定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，\n\n**第一个线程执行a=1;x=b;**\n\n**第二个线程执行b=1;y=a。**\n\n>  这段程序正常来看有3个结果：\n>\n> 1. 第一个线程执行到a=1的时候，第二个线程执行到了b=1，最后x=1，y=1；\n> 2. 第一个线程执行完，第二个线程才刚开始，最后x=0，y=1；\n> 3. 第二个线程执行完，第一个线程才开始，最后x=1，y=0；\n>\n> 理论上无论怎么样都不可能x=0,y=0;但是当程序执行到几万次之后，竟然出现了00的结果：`弟2948608次（0,0)`\n\n**因为指令被重排序了，x=b先于a=1执行，y=a先于b=1执行。**\n\n参考链接：\n\nhttps://blog.csdn.net/qq_41973594/article/details/110452849 \n\nhttps://blog.csdn.net/yjp198713/article/details/78839698\n\n","source":"_posts/JAVA/指令乱序，指令重排序.md","raw":"---\ntitle: 指令乱序，指令重排序\ntags:\n  - 指令乱序\n  - 指令重排序\ncategories:\n  - JAVA\n---\n# 指令乱序，指令重排序\n\n```java\n/**\n * 指令乱序，指令重排序\n * <p>\n * 弟2948605次（0,1)\n * 弟2948606次（0,1)\n * 弟2948607次（0,1)\n * 弟2948608次（0,0)\n *\n * @author zc\n * @date 2021/1/15 10:04\n */\npublic class Demo1 {\n    private static int x = 0, y = 0;\n    private static int a = 0, b = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        for (int i = 0; ; i++) {\n            x = 0;\n            y = 0;\n            a = 0;\n            b = 0;\n            Thread thread1 = new Thread(() -> {\n                a = 1;\n                x = b;\n            });\n            Thread thread2 = new Thread(() -> {\n                b = 1;\n                y = a;\n            });\n            thread1.start();\n            thread2.start();\n            thread1.join();\n            thread2.join();\n            String result = \"弟\" + i + \"次（\" + x + \",\" + y + \")\";\n            if (x == 0 && y == 0) {\n                System.out.println(result);\n                break;\n            } else {\n                System.out.println(result);\n            }\n        }\n    }\n}\n```\n\n定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，\n\n**第一个线程执行a=1;x=b;**\n\n**第二个线程执行b=1;y=a。**\n\n>  这段程序正常来看有3个结果：\n>\n> 1. 第一个线程执行到a=1的时候，第二个线程执行到了b=1，最后x=1，y=1；\n> 2. 第一个线程执行完，第二个线程才刚开始，最后x=0，y=1；\n> 3. 第二个线程执行完，第一个线程才开始，最后x=1，y=0；\n>\n> 理论上无论怎么样都不可能x=0,y=0;但是当程序执行到几万次之后，竟然出现了00的结果：`弟2948608次（0,0)`\n\n**因为指令被重排序了，x=b先于a=1执行，y=a先于b=1执行。**\n\n参考链接：\n\nhttps://blog.csdn.net/qq_41973594/article/details/110452849 \n\nhttps://blog.csdn.net/yjp198713/article/details/78839698\n\n","slug":"JAVA/指令乱序，指令重排序","published":1,"date":"2021-04-01T08:34:03.000Z","updated":"2022-11-25T17:30:28.024Z","_id":"clawrzuac0003u42b71f9czva","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"指令乱序，指令重排序\"><a href=\"#指令乱序，指令重排序\" class=\"headerlink\" title=\"指令乱序，指令重排序\"></a>指令乱序，指令重排序</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 指令乱序，指令重排序</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 弟2948605次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948606次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948607次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948608次（0,0)</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2021/1/15 10:04</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; ; i++) &#123;<br>            x = <span class=\"hljs-number\">0</span>;<br>            y = <span class=\"hljs-number\">0</span>;<br>            a = <span class=\"hljs-number\">0</span>;<br>            b = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                a = <span class=\"hljs-number\">1</span>;<br>                x = b;<br>            &#125;);<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                b = <span class=\"hljs-number\">1</span>;<br>                y = a;<br>            &#125;);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;弟&quot;</span> + i + <span class=\"hljs-string\">&quot;次（&quot;</span> + x + <span class=\"hljs-string\">&quot;,&quot;</span> + y + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span> &amp;&amp; y == <span class=\"hljs-number\">0</span>) &#123;<br>                System.out.println(result);<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，</p>\n<p><strong>第一个线程执行a&#x3D;1;x&#x3D;b;</strong></p>\n<p><strong>第二个线程执行b&#x3D;1;y&#x3D;a。</strong></p>\n<blockquote>\n<p> 这段程序正常来看有3个结果：</p>\n<ol>\n<li>第一个线程执行到a&#x3D;1的时候，第二个线程执行到了b&#x3D;1，最后x&#x3D;1，y&#x3D;1；</li>\n<li>第一个线程执行完，第二个线程才刚开始，最后x&#x3D;0，y&#x3D;1；</li>\n<li>第二个线程执行完，第一个线程才开始，最后x&#x3D;1，y&#x3D;0；</li>\n</ol>\n<p>理论上无论怎么样都不可能x&#x3D;0,y&#x3D;0;但是当程序执行到几万次之后，竟然出现了00的结果：<code>弟2948608次（0,0)</code></p>\n</blockquote>\n<p><strong>因为指令被重排序了，x&#x3D;b先于a&#x3D;1执行，y&#x3D;a先于b&#x3D;1执行。</strong></p>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41973594/article/details/110452849\">https://blog.csdn.net/qq_41973594/article/details/110452849</a> </p>\n<p><a href=\"https://blog.csdn.net/yjp198713/article/details/78839698\">https://blog.csdn.net/yjp198713/article/details/78839698</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"指令乱序，指令重排序\"><a href=\"#指令乱序，指令重排序\" class=\"headerlink\" title=\"指令乱序，指令重排序\"></a>指令乱序，指令重排序</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 指令乱序，指令重排序</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 弟2948605次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948606次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948607次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948608次（0,0)</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2021/1/15 10:04</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; ; i++) &#123;<br>            x = <span class=\"hljs-number\">0</span>;<br>            y = <span class=\"hljs-number\">0</span>;<br>            a = <span class=\"hljs-number\">0</span>;<br>            b = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                a = <span class=\"hljs-number\">1</span>;<br>                x = b;<br>            &#125;);<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                b = <span class=\"hljs-number\">1</span>;<br>                y = a;<br>            &#125;);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;弟&quot;</span> + i + <span class=\"hljs-string\">&quot;次（&quot;</span> + x + <span class=\"hljs-string\">&quot;,&quot;</span> + y + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span> &amp;&amp; y == <span class=\"hljs-number\">0</span>) &#123;<br>                System.out.println(result);<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，</p>\n<p><strong>第一个线程执行a&#x3D;1;x&#x3D;b;</strong></p>\n<p><strong>第二个线程执行b&#x3D;1;y&#x3D;a。</strong></p>\n<blockquote>\n<p> 这段程序正常来看有3个结果：</p>\n<ol>\n<li>第一个线程执行到a&#x3D;1的时候，第二个线程执行到了b&#x3D;1，最后x&#x3D;1，y&#x3D;1；</li>\n<li>第一个线程执行完，第二个线程才刚开始，最后x&#x3D;0，y&#x3D;1；</li>\n<li>第二个线程执行完，第一个线程才开始，最后x&#x3D;1，y&#x3D;0；</li>\n</ol>\n<p>理论上无论怎么样都不可能x&#x3D;0,y&#x3D;0;但是当程序执行到几万次之后，竟然出现了00的结果：<code>弟2948608次（0,0)</code></p>\n</blockquote>\n<p><strong>因为指令被重排序了，x&#x3D;b先于a&#x3D;1执行，y&#x3D;a先于b&#x3D;1执行。</strong></p>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41973594/article/details/110452849\">https://blog.csdn.net/qq_41973594/article/details/110452849</a> </p>\n<p><a href=\"https://blog.csdn.net/yjp198713/article/details/78839698\">https://blog.csdn.net/yjp198713/article/details/78839698</a></p>\n"},{"title":"1-JVM基础","_content":"# JVM基础\n\n**java源码文件，通过javac 转换成class文件。**\n\n> 找到.java文件\n>\n> 词法分析器\n>\n> tokens流\n>\n> 语法分析器\n>\n> 语义分析器\n>\n> 字节码生成器\n>\n> 转成.class文件\n\n+ ### 装载\n\n  1. 根据全限定路径名寻找class文件，转换成二进制流。**通过ClassLoder.load(String name)（类装载器，name：全限定路径名）**不同路径下的类，设置不同路径的类装载器。\n\n     > 1. Bootstrap ClassLoader（根装载器由C语言编写）：加载 ``$JAVA_HOME`` 中的 ``jar/lib/rt.jar`` 里所有的class或 ``Xbootclassoath`` 选项指定的jar包\n     >\n     > 2. Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 ``$JAVA_HOME`` 中 ``jar/lib/*.jar`` 或 ``-Djava.ext.dirs`` 指定目录下的 ``jar`` 包\n     >\n     > 3. App ClassLoader：加载classpath中指定的jar包及 ``Djava.class.path`` 所指定目录下的类和 ``jar`` 包\n     >\n     > 4. Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 ``java.lang.ClassLoader`` 的子类自定义加载class，属于应用程序根据自身需要自定义的 ``ClassLoader``，如 ``Tomcat``、``JBoss`` 都会根据j2ee规范自行实现 ``ClassLoader``\n\n  2. 需要把类文件**静态存储结构**里面对应的内容存储到JVM里面**（方法区的运行时数据结构）**\n\n     > 代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。\n\n  3. java.lang.Class对象存储到堆内存\n\n+ ### 链接\n\n  1. 验证\n\n     > 保证被加载的正确性。验证class文件中的**cafe babe**。注：class文件中，已**cafe babe**为开头的是java文件。\n\n  2. 准备\n\n     > 为类的静态变量分配内存。如：``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``\n\n  3. 解析\n\n     > 将类中的**符号引用**转换为**直接引用**。静态的转换。\n     >\n     > **符号引用**：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。\n     >\n     > **直接引用**：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。\n\n+ ### 初始化 \n\n  对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``。将3正真的赋值 a = 3。\n\n### JVM运行时划分的区域：\n\n> 程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。\n>\n> 线程是进程最小的执行单位。\n>\n> 栈：只要符合栈结构，都遵循先进后出的原则\n\n+ **方法区 Method Area（进程）、非堆：**类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。**与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **堆 Heap（进程）：**代表某个类的java.lang.Class对象。存储对象、String、数组。**如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **Java虚拟机栈（线程）：**一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。\n\n  在Java方法中如何去调用C语言的方法，通过**动态链接**去调用完成。\n\n+ **本地方法栈（线程）：**存储C语言方法。\n\n+ **栈帧（Java虚拟机栈、本地方法栈）Frame：**代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。\n\n  ```java\n  //伪代码1\n  a(){\n      b();\n  }\n  b(){\n      c();\n  }\n  c(){\n      \n  }\n  //先进行压栈\n  //先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。\n  //之后是出栈\n  //在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。\n  //先进后出的概念。\n  \n  //伪代码2\n  a(){\n      a();\n  }\n  //如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。\n  ```\n\n  1. **局部变量表：**存储方法中的局部变量\n\n  2. **操作数栈：**栈结构，用来描述运算过程当中数据暂时的存储位置\n\n     ```java\n     //伪代码.java文件\n     public static int calc(int op1,int op2){\n         op1 = 3;\n         int result = op1 + op2;\n         return result;\n     }\n     //.java文件的.class文件翻译的JVM字节码。\n     public static int calc(int op1,int op2);\n     Code:\n     0:iconst_3 // 将3放到操作数栈中\n     //局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。\n     1:istore_0 //将操作数占中的3赋值给局部变量表中的局部变量\n     2:iload_0 //将局部变量0值放到操作数栈中\n     3:iload_1 //\n     4:iadd\n     5:istore_2\n     6:iload_2\n     7:ireturn\n     ```\n\n  3. **动态链接：**符号引用**转换为**直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。\n\n  4. **正常或异常方法的返回：**\n\n+ **程序计数器（线程）：**是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n\n### JAVA 对象内存布局\n\n#### 对象头：\n\n> Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节\n\n> Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节\n\n> Length数组对象特有：数组长度\t4字节\n\n#### 实例数据：\n\n包含了对象的所有成员变量，大小由各个变量类型决定\n\n> boolean和byte：1字节\n\n> short和char：2字节\n\n> int和float：4字节\n\n> long和double：8字节\n\n> reference：8字节（64位系统）\n\n#### 对齐填充：\n\n为了保证对象的大小为8字节的整数倍，会进行填充字节\n","source":"_posts/JVM/1-JVM基础.md","raw":"---\ntitle: 1-JVM基础\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM基础\n\n**java源码文件，通过javac 转换成class文件。**\n\n> 找到.java文件\n>\n> 词法分析器\n>\n> tokens流\n>\n> 语法分析器\n>\n> 语义分析器\n>\n> 字节码生成器\n>\n> 转成.class文件\n\n+ ### 装载\n\n  1. 根据全限定路径名寻找class文件，转换成二进制流。**通过ClassLoder.load(String name)（类装载器，name：全限定路径名）**不同路径下的类，设置不同路径的类装载器。\n\n     > 1. Bootstrap ClassLoader（根装载器由C语言编写）：加载 ``$JAVA_HOME`` 中的 ``jar/lib/rt.jar`` 里所有的class或 ``Xbootclassoath`` 选项指定的jar包\n     >\n     > 2. Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 ``$JAVA_HOME`` 中 ``jar/lib/*.jar`` 或 ``-Djava.ext.dirs`` 指定目录下的 ``jar`` 包\n     >\n     > 3. App ClassLoader：加载classpath中指定的jar包及 ``Djava.class.path`` 所指定目录下的类和 ``jar`` 包\n     >\n     > 4. Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 ``java.lang.ClassLoader`` 的子类自定义加载class，属于应用程序根据自身需要自定义的 ``ClassLoader``，如 ``Tomcat``、``JBoss`` 都会根据j2ee规范自行实现 ``ClassLoader``\n\n  2. 需要把类文件**静态存储结构**里面对应的内容存储到JVM里面**（方法区的运行时数据结构）**\n\n     > 代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。\n\n  3. java.lang.Class对象存储到堆内存\n\n+ ### 链接\n\n  1. 验证\n\n     > 保证被加载的正确性。验证class文件中的**cafe babe**。注：class文件中，已**cafe babe**为开头的是java文件。\n\n  2. 准备\n\n     > 为类的静态变量分配内存。如：``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``\n\n  3. 解析\n\n     > 将类中的**符号引用**转换为**直接引用**。静态的转换。\n     >\n     > **符号引用**：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。\n     >\n     > **直接引用**：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。\n\n+ ### 初始化 \n\n  对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``。将3正真的赋值 a = 3。\n\n### JVM运行时划分的区域：\n\n> 程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。\n>\n> 线程是进程最小的执行单位。\n>\n> 栈：只要符合栈结构，都遵循先进后出的原则\n\n+ **方法区 Method Area（进程）、非堆：**类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。**与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **堆 Heap（进程）：**代表某个类的java.lang.Class对象。存储对象、String、数组。**如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **Java虚拟机栈（线程）：**一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。\n\n  在Java方法中如何去调用C语言的方法，通过**动态链接**去调用完成。\n\n+ **本地方法栈（线程）：**存储C语言方法。\n\n+ **栈帧（Java虚拟机栈、本地方法栈）Frame：**代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。\n\n  ```java\n  //伪代码1\n  a(){\n      b();\n  }\n  b(){\n      c();\n  }\n  c(){\n      \n  }\n  //先进行压栈\n  //先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。\n  //之后是出栈\n  //在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。\n  //先进后出的概念。\n  \n  //伪代码2\n  a(){\n      a();\n  }\n  //如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。\n  ```\n\n  1. **局部变量表：**存储方法中的局部变量\n\n  2. **操作数栈：**栈结构，用来描述运算过程当中数据暂时的存储位置\n\n     ```java\n     //伪代码.java文件\n     public static int calc(int op1,int op2){\n         op1 = 3;\n         int result = op1 + op2;\n         return result;\n     }\n     //.java文件的.class文件翻译的JVM字节码。\n     public static int calc(int op1,int op2);\n     Code:\n     0:iconst_3 // 将3放到操作数栈中\n     //局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。\n     1:istore_0 //将操作数占中的3赋值给局部变量表中的局部变量\n     2:iload_0 //将局部变量0值放到操作数栈中\n     3:iload_1 //\n     4:iadd\n     5:istore_2\n     6:iload_2\n     7:ireturn\n     ```\n\n  3. **动态链接：**符号引用**转换为**直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。\n\n  4. **正常或异常方法的返回：**\n\n+ **程序计数器（线程）：**是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n\n### JAVA 对象内存布局\n\n#### 对象头：\n\n> Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节\n\n> Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节\n\n> Length数组对象特有：数组长度\t4字节\n\n#### 实例数据：\n\n包含了对象的所有成员变量，大小由各个变量类型决定\n\n> boolean和byte：1字节\n\n> short和char：2字节\n\n> int和float：4字节\n\n> long和double：8字节\n\n> reference：8字节（64位系统）\n\n#### 对齐填充：\n\n为了保证对象的大小为8字节的整数倍，会进行填充字节\n","slug":"JVM/1-JVM基础","published":1,"date":"2020-04-25T06:56:00.000Z","updated":"2022-11-25T17:38:49.923Z","_id":"clawrzuah0004u42b2ba7guby","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM基础\"><a href=\"#JVM基础\" class=\"headerlink\" title=\"JVM基础\"></a>JVM基础</h1><p><strong>java源码文件，通过javac 转换成class文件。</strong></p>\n<blockquote>\n<p>找到.java文件</p>\n<p>词法分析器</p>\n<p>tokens流</p>\n<p>语法分析器</p>\n<p>语义分析器</p>\n<p>字节码生成器</p>\n<p>转成.class文件</p>\n</blockquote>\n<ul>\n<li><h3 id=\"装载\"><a href=\"#装载\" class=\"headerlink\" title=\"装载\"></a>装载</h3><ol>\n<li><p>根据全限定路径名寻找class文件，转换成二进制流。<strong>通过ClassLoder.load(String name)（类装载器，name：全限定路径名）</strong>不同路径下的类，设置不同路径的类装载器。</p>\n<blockquote>\n<ol>\n<li><p>Bootstrap ClassLoader（根装载器由C语言编写）：加载 <code>$JAVA_HOME</code> 中的 <code>jar/lib/rt.jar</code> 里所有的class或 <code>Xbootclassoath</code> 选项指定的jar包</p>\n</li>\n<li><p>Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 <code>$JAVA_HOME</code> 中 <code>jar/lib/*.jar</code> 或 <code>-Djava.ext.dirs</code> 指定目录下的 <code>jar</code> 包</p>\n</li>\n<li><p>App ClassLoader：加载classpath中指定的jar包及 <code>Djava.class.path</code> 所指定目录下的类和 <code>jar</code> 包</p>\n</li>\n<li><p>Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 <code>java.lang.ClassLoader</code> 的子类自定义加载class，属于应用程序根据自身需要自定义的 <code>ClassLoader</code>，如 <code>Tomcat</code>、<code>JBoss</code> 都会根据j2ee规范自行实现 <code>ClassLoader</code></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>需要把类文件<strong>静态存储结构</strong>里面对应的内容存储到JVM里面<strong>（方法区的运行时数据结构）</strong></p>\n<blockquote>\n<p>代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。</p>\n</blockquote>\n</li>\n<li><p>java.lang.Class对象存储到堆内存</p>\n</li>\n</ol>\n</li>\n<li><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ol>\n<li><p>验证</p>\n<blockquote>\n<p>保证被加载的正确性。验证class文件中的<strong>cafe babe</strong>。注：class文件中，已<strong>cafe babe</strong>为开头的是java文件。</p>\n</blockquote>\n</li>\n<li><p>准备</p>\n<blockquote>\n<p>为类的静态变量分配内存。如：<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code></p>\n</blockquote>\n</li>\n<li><p>解析</p>\n<blockquote>\n<p>将类中的<strong>符号引用</strong>转换为<strong>直接引用</strong>。静态的转换。</p>\n<p><strong>符号引用</strong>：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。</p>\n<p><strong>直接引用</strong>：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code>。将3正真的赋值 a &#x3D; 3。</p>\n</li>\n</ul>\n<h3 id=\"JVM运行时划分的区域：\"><a href=\"#JVM运行时划分的区域：\" class=\"headerlink\" title=\"JVM运行时划分的区域：\"></a>JVM运行时划分的区域：</h3><blockquote>\n<p>程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。</p>\n<p>线程是进程最小的执行单位。</p>\n<p>栈：只要符合栈结构，都遵循先进后出的原则</p>\n</blockquote>\n<ul>\n<li><p><strong>方法区 Method Area（进程）、非堆：</strong>类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。<strong>与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>堆 Heap（进程）：</strong>代表某个类的java.lang.Class对象。存储对象、String、数组。<strong>如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>Java虚拟机栈（线程）：</strong>一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。</p>\n<p>在Java方法中如何去调用C语言的方法，通过<strong>动态链接</strong>去调用完成。</p>\n</li>\n<li><p><strong>本地方法栈（线程）：</strong>存储C语言方法。</p>\n</li>\n<li><p><strong>栈帧（Java虚拟机栈、本地方法栈）Frame：</strong>代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码1</span><br>a()&#123;<br>    b();<br>&#125;<br>b()&#123;<br>    c();<br>&#125;<br>c()&#123;<br>    <br>&#125;<br><span class=\"hljs-comment\">//先进行压栈</span><br><span class=\"hljs-comment\">//先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。</span><br><span class=\"hljs-comment\">//之后是出栈</span><br><span class=\"hljs-comment\">//在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。</span><br><span class=\"hljs-comment\">//先进后出的概念。</span><br><br><span class=\"hljs-comment\">//伪代码2</span><br>a()&#123;<br>    a();<br>&#125;<br><span class=\"hljs-comment\">//如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>局部变量表：</strong>存储方法中的局部变量</p>\n</li>\n<li><p><strong>操作数栈：</strong>栈结构，用来描述运算过程当中数据暂时的存储位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码.java文件</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>&#123;<br>    op1 = <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> op1 + op2;<br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-comment\">//.java文件的.class文件翻译的JVM字节码。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>;<br>Code:<br><span class=\"hljs-number\">0</span>:iconst_3 <span class=\"hljs-comment\">// 将3放到操作数栈中</span><br><span class=\"hljs-comment\">//局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。</span><br><span class=\"hljs-number\">1</span>:istore_0 <span class=\"hljs-comment\">//将操作数占中的3赋值给局部变量表中的局部变量</span><br><span class=\"hljs-number\">2</span>:iload_0 <span class=\"hljs-comment\">//将局部变量0值放到操作数栈中</span><br><span class=\"hljs-number\">3</span>:iload_1 <span class=\"hljs-comment\">//</span><br><span class=\"hljs-number\">4</span>:iadd<br><span class=\"hljs-number\">5</span>:istore_2<br><span class=\"hljs-number\">6</span>:iload_2<br><span class=\"hljs-number\">7</span>:ireturn<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>动态链接：</strong>符号引用<strong>转换为</strong>直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。</p>\n</li>\n<li><p><strong>正常或异常方法的返回：</strong></p>\n</li>\n</ol>\n</li>\n<li><p><strong>程序计数器（线程）：</strong>是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>\n</li>\n</ul>\n<h3 id=\"JAVA-对象内存布局\"><a href=\"#JAVA-对象内存布局\" class=\"headerlink\" title=\"JAVA 对象内存布局\"></a>JAVA 对象内存布局</h3><h4 id=\"对象头：\"><a href=\"#对象头：\" class=\"headerlink\" title=\"对象头：\"></a>对象头：</h4><blockquote>\n<p>Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Length数组对象特有：数组长度\t4字节</p>\n</blockquote>\n<h4 id=\"实例数据：\"><a href=\"#实例数据：\" class=\"headerlink\" title=\"实例数据：\"></a>实例数据：</h4><p>包含了对象的所有成员变量，大小由各个变量类型决定</p>\n<blockquote>\n<p>boolean和byte：1字节</p>\n</blockquote>\n<blockquote>\n<p>short和char：2字节</p>\n</blockquote>\n<blockquote>\n<p>int和float：4字节</p>\n</blockquote>\n<blockquote>\n<p>long和double：8字节</p>\n</blockquote>\n<blockquote>\n<p>reference：8字节（64位系统）</p>\n</blockquote>\n<h4 id=\"对齐填充：\"><a href=\"#对齐填充：\" class=\"headerlink\" title=\"对齐填充：\"></a>对齐填充：</h4><p>为了保证对象的大小为8字节的整数倍，会进行填充字节</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM基础\"><a href=\"#JVM基础\" class=\"headerlink\" title=\"JVM基础\"></a>JVM基础</h1><p><strong>java源码文件，通过javac 转换成class文件。</strong></p>\n<blockquote>\n<p>找到.java文件</p>\n<p>词法分析器</p>\n<p>tokens流</p>\n<p>语法分析器</p>\n<p>语义分析器</p>\n<p>字节码生成器</p>\n<p>转成.class文件</p>\n</blockquote>\n<ul>\n<li><h3 id=\"装载\"><a href=\"#装载\" class=\"headerlink\" title=\"装载\"></a>装载</h3><ol>\n<li><p>根据全限定路径名寻找class文件，转换成二进制流。<strong>通过ClassLoder.load(String name)（类装载器，name：全限定路径名）</strong>不同路径下的类，设置不同路径的类装载器。</p>\n<blockquote>\n<ol>\n<li><p>Bootstrap ClassLoader（根装载器由C语言编写）：加载 <code>$JAVA_HOME</code> 中的 <code>jar/lib/rt.jar</code> 里所有的class或 <code>Xbootclassoath</code> 选项指定的jar包</p>\n</li>\n<li><p>Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 <code>$JAVA_HOME</code> 中 <code>jar/lib/*.jar</code> 或 <code>-Djava.ext.dirs</code> 指定目录下的 <code>jar</code> 包</p>\n</li>\n<li><p>App ClassLoader：加载classpath中指定的jar包及 <code>Djava.class.path</code> 所指定目录下的类和 <code>jar</code> 包</p>\n</li>\n<li><p>Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 <code>java.lang.ClassLoader</code> 的子类自定义加载class，属于应用程序根据自身需要自定义的 <code>ClassLoader</code>，如 <code>Tomcat</code>、<code>JBoss</code> 都会根据j2ee规范自行实现 <code>ClassLoader</code></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>需要把类文件<strong>静态存储结构</strong>里面对应的内容存储到JVM里面<strong>（方法区的运行时数据结构）</strong></p>\n<blockquote>\n<p>代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。</p>\n</blockquote>\n</li>\n<li><p>java.lang.Class对象存储到堆内存</p>\n</li>\n</ol>\n</li>\n<li><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ol>\n<li><p>验证</p>\n<blockquote>\n<p>保证被加载的正确性。验证class文件中的<strong>cafe babe</strong>。注：class文件中，已<strong>cafe babe</strong>为开头的是java文件。</p>\n</blockquote>\n</li>\n<li><p>准备</p>\n<blockquote>\n<p>为类的静态变量分配内存。如：<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code></p>\n</blockquote>\n</li>\n<li><p>解析</p>\n<blockquote>\n<p>将类中的<strong>符号引用</strong>转换为<strong>直接引用</strong>。静态的转换。</p>\n<p><strong>符号引用</strong>：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。</p>\n<p><strong>直接引用</strong>：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code>。将3正真的赋值 a &#x3D; 3。</p>\n</li>\n</ul>\n<h3 id=\"JVM运行时划分的区域：\"><a href=\"#JVM运行时划分的区域：\" class=\"headerlink\" title=\"JVM运行时划分的区域：\"></a>JVM运行时划分的区域：</h3><blockquote>\n<p>程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。</p>\n<p>线程是进程最小的执行单位。</p>\n<p>栈：只要符合栈结构，都遵循先进后出的原则</p>\n</blockquote>\n<ul>\n<li><p><strong>方法区 Method Area（进程）、非堆：</strong>类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。<strong>与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>堆 Heap（进程）：</strong>代表某个类的java.lang.Class对象。存储对象、String、数组。<strong>如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>Java虚拟机栈（线程）：</strong>一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。</p>\n<p>在Java方法中如何去调用C语言的方法，通过<strong>动态链接</strong>去调用完成。</p>\n</li>\n<li><p><strong>本地方法栈（线程）：</strong>存储C语言方法。</p>\n</li>\n<li><p><strong>栈帧（Java虚拟机栈、本地方法栈）Frame：</strong>代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码1</span><br>a()&#123;<br>    b();<br>&#125;<br>b()&#123;<br>    c();<br>&#125;<br>c()&#123;<br>    <br>&#125;<br><span class=\"hljs-comment\">//先进行压栈</span><br><span class=\"hljs-comment\">//先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。</span><br><span class=\"hljs-comment\">//之后是出栈</span><br><span class=\"hljs-comment\">//在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。</span><br><span class=\"hljs-comment\">//先进后出的概念。</span><br><br><span class=\"hljs-comment\">//伪代码2</span><br>a()&#123;<br>    a();<br>&#125;<br><span class=\"hljs-comment\">//如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>局部变量表：</strong>存储方法中的局部变量</p>\n</li>\n<li><p><strong>操作数栈：</strong>栈结构，用来描述运算过程当中数据暂时的存储位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码.java文件</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>&#123;<br>    op1 = <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> op1 + op2;<br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-comment\">//.java文件的.class文件翻译的JVM字节码。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>;<br>Code:<br><span class=\"hljs-number\">0</span>:iconst_3 <span class=\"hljs-comment\">// 将3放到操作数栈中</span><br><span class=\"hljs-comment\">//局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。</span><br><span class=\"hljs-number\">1</span>:istore_0 <span class=\"hljs-comment\">//将操作数占中的3赋值给局部变量表中的局部变量</span><br><span class=\"hljs-number\">2</span>:iload_0 <span class=\"hljs-comment\">//将局部变量0值放到操作数栈中</span><br><span class=\"hljs-number\">3</span>:iload_1 <span class=\"hljs-comment\">//</span><br><span class=\"hljs-number\">4</span>:iadd<br><span class=\"hljs-number\">5</span>:istore_2<br><span class=\"hljs-number\">6</span>:iload_2<br><span class=\"hljs-number\">7</span>:ireturn<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>动态链接：</strong>符号引用<strong>转换为</strong>直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。</p>\n</li>\n<li><p><strong>正常或异常方法的返回：</strong></p>\n</li>\n</ol>\n</li>\n<li><p><strong>程序计数器（线程）：</strong>是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>\n</li>\n</ul>\n<h3 id=\"JAVA-对象内存布局\"><a href=\"#JAVA-对象内存布局\" class=\"headerlink\" title=\"JAVA 对象内存布局\"></a>JAVA 对象内存布局</h3><h4 id=\"对象头：\"><a href=\"#对象头：\" class=\"headerlink\" title=\"对象头：\"></a>对象头：</h4><blockquote>\n<p>Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Length数组对象特有：数组长度\t4字节</p>\n</blockquote>\n<h4 id=\"实例数据：\"><a href=\"#实例数据：\" class=\"headerlink\" title=\"实例数据：\"></a>实例数据：</h4><p>包含了对象的所有成员变量，大小由各个变量类型决定</p>\n<blockquote>\n<p>boolean和byte：1字节</p>\n</blockquote>\n<blockquote>\n<p>short和char：2字节</p>\n</blockquote>\n<blockquote>\n<p>int和float：4字节</p>\n</blockquote>\n<blockquote>\n<p>long和double：8字节</p>\n</blockquote>\n<blockquote>\n<p>reference：8字节（64位系统）</p>\n</blockquote>\n<h4 id=\"对齐填充：\"><a href=\"#对齐填充：\" class=\"headerlink\" title=\"对齐填充：\"></a>对齐填充：</h4><p>为了保证对象的大小为8字节的整数倍，会进行填充字节</p>\n"},{"title":"2-内存模型","_content":"# 内存模型\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png)\n\n## 方法区\n\n> JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代\n>\n> JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。\n\n## 堆（分配内存会大一些）\n\n> 分配对象、new 实例。\n>\n> 堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）\n>\n> 如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。\n\n#### 1.新生代（Young）\n\n1. new Object() ，实例化10个单位为1的对象 ===>>> 新生代分配\n2. 新生代内存不够用时，触发GC\n3. GC之后，释放空间，会存在空间碎片\n4. 这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC\n5. GC的弊端就是会消耗线程资源，stop the world。\n\n**以上的设计显然是不合理的，重新设计之后**\n\n新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；\n\n新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。\n\n如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。\n\n*举例说明：*\n\n老年代：2G内存\n\n新生代：1G内存\n\n> Eden区800MB\n>\n> S0，S1各100MB\n\n这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。\n\n**新生代（Young）GC：Minor GC**\n\n**老年代（Old）GC：Major GC**\n\n+ **Eden区**\n\n所有刚刚new出来的对象，就会分配在Eden区。\n\n+ **Survivor区**\n\n1. S0、S1永远有一块内存是浪费的，一块被使用；\n\n2. S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；\n\n3. Eden=80%；S0=10%；S1=10%；Eden：S0：S1=8：1：1；\n\n4. 比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；\n\n5. 如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 > 年龄15之后，会将该对象存放到老年代（Old）区；\n\n   假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。\n\n6. 极端情况，如果有个对象超过老年代内存直接OOM。\n\n#### 2.老年代（Old）\n\n如果老年代的内存不够用了，会触发 **Old GC** 也可 称为 **Major GC**。Old GC会比较耗时。当然一旦触发了**Old GC（Major GC）**通常都会伴随着**Young GC（Minor GC）**。\n\n**Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）= Full GC**\n\n调优的原则：\n\n避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。\n\n1. 尽量减少GC次数\n2. 尽量只触发Young GC（Minor GC）\n\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n**实操：**\n\n在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）\n\n```java\n@RestController\n@RequestMapping(\"/test/jvm\")\npublic class TestJvmController {\n    List<AuthAccount> list = new ArrayList<>();\n    @GetMapping(\"/jvmTest\")\n    public void jvmTest() {\n        while (true) {\n            list.add(new AuthAccount());\n        }\n    }\n}\n```\n\n运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的**jvisualvm**工具（这个工具是JDK自带的），**首先还要安装Visual GC的插件才能查看到JVM GC运行时状况**。\n\n之后等待程序运行后，打开这个**jvisualvm**工具就可以查看到JVM内存运行时的状况\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png)\n\n如果堆内存中，没有可分配的内存空间了，就会报OOM。\n\n同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize=40M -XX:MaxMetaspaceSize=40M。\n\n栈也会报OOM，首先我们先测试栈的深度：\n\n```java\n\t// 通过递归操作\n\tpublic static long count = 0;\n\n    public static void test(long i) {\n        System.out.println(count++);\n        test(i);\n    }\n\n    public static void main(String[] args) {\n        test(count);\n    }\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png)\n\n通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。\n\n可以根据需求去调整栈的深度大小；\n\n一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。\n\n通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。\n","source":"_posts/JVM/2-JVM内存模型.md","raw":"---\ntitle: 2-内存模型\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# 内存模型\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png)\n\n## 方法区\n\n> JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代\n>\n> JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。\n\n## 堆（分配内存会大一些）\n\n> 分配对象、new 实例。\n>\n> 堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）\n>\n> 如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。\n\n#### 1.新生代（Young）\n\n1. new Object() ，实例化10个单位为1的对象 ===>>> 新生代分配\n2. 新生代内存不够用时，触发GC\n3. GC之后，释放空间，会存在空间碎片\n4. 这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC\n5. GC的弊端就是会消耗线程资源，stop the world。\n\n**以上的设计显然是不合理的，重新设计之后**\n\n新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；\n\n新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。\n\n如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。\n\n*举例说明：*\n\n老年代：2G内存\n\n新生代：1G内存\n\n> Eden区800MB\n>\n> S0，S1各100MB\n\n这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。\n\n**新生代（Young）GC：Minor GC**\n\n**老年代（Old）GC：Major GC**\n\n+ **Eden区**\n\n所有刚刚new出来的对象，就会分配在Eden区。\n\n+ **Survivor区**\n\n1. S0、S1永远有一块内存是浪费的，一块被使用；\n\n2. S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；\n\n3. Eden=80%；S0=10%；S1=10%；Eden：S0：S1=8：1：1；\n\n4. 比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；\n\n5. 如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 > 年龄15之后，会将该对象存放到老年代（Old）区；\n\n   假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。\n\n6. 极端情况，如果有个对象超过老年代内存直接OOM。\n\n#### 2.老年代（Old）\n\n如果老年代的内存不够用了，会触发 **Old GC** 也可 称为 **Major GC**。Old GC会比较耗时。当然一旦触发了**Old GC（Major GC）**通常都会伴随着**Young GC（Minor GC）**。\n\n**Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）= Full GC**\n\n调优的原则：\n\n避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。\n\n1. 尽量减少GC次数\n2. 尽量只触发Young GC（Minor GC）\n\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n**实操：**\n\n在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）\n\n```java\n@RestController\n@RequestMapping(\"/test/jvm\")\npublic class TestJvmController {\n    List<AuthAccount> list = new ArrayList<>();\n    @GetMapping(\"/jvmTest\")\n    public void jvmTest() {\n        while (true) {\n            list.add(new AuthAccount());\n        }\n    }\n}\n```\n\n运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的**jvisualvm**工具（这个工具是JDK自带的），**首先还要安装Visual GC的插件才能查看到JVM GC运行时状况**。\n\n之后等待程序运行后，打开这个**jvisualvm**工具就可以查看到JVM内存运行时的状况\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png)\n\n如果堆内存中，没有可分配的内存空间了，就会报OOM。\n\n同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize=40M -XX:MaxMetaspaceSize=40M。\n\n栈也会报OOM，首先我们先测试栈的深度：\n\n```java\n\t// 通过递归操作\n\tpublic static long count = 0;\n\n    public static void test(long i) {\n        System.out.println(count++);\n        test(i);\n    }\n\n    public static void main(String[] args) {\n        test(count);\n    }\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png)\n\n通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。\n\n可以根据需求去调整栈的深度大小；\n\n一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。\n\n通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。\n","slug":"JVM/2-JVM内存模型","published":1,"date":"2020-05-14T16:06:21.000Z","updated":"2022-11-25T17:39:15.226Z","_id":"clawrzuai0005u42b6wis8ywv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png\"></p>\n<h2 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h2><blockquote>\n<p>JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代</p>\n<p>JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。</p>\n</blockquote>\n<h2 id=\"堆（分配内存会大一些）\"><a href=\"#堆（分配内存会大一些）\" class=\"headerlink\" title=\"堆（分配内存会大一些）\"></a>堆（分配内存会大一些）</h2><blockquote>\n<p>分配对象、new 实例。</p>\n<p>堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）</p>\n<p>如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。</p>\n</blockquote>\n<h4 id=\"1-新生代（Young）\"><a href=\"#1-新生代（Young）\" class=\"headerlink\" title=\"1.新生代（Young）\"></a>1.新生代（Young）</h4><ol>\n<li>new Object() ，实例化10个单位为1的对象 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 新生代分配</li>\n<li>新生代内存不够用时，触发GC</li>\n<li>GC之后，释放空间，会存在空间碎片</li>\n<li>这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC</li>\n<li>GC的弊端就是会消耗线程资源，stop the world。</li>\n</ol>\n<p><strong>以上的设计显然是不合理的，重新设计之后</strong></p>\n<p>新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；</p>\n<p>新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。</p>\n<p>如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。</p>\n<p><em>举例说明：</em></p>\n<p>老年代：2G内存</p>\n<p>新生代：1G内存</p>\n<blockquote>\n<p>Eden区800MB</p>\n<p>S0，S1各100MB</p>\n</blockquote>\n<p>这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。</p>\n<p><strong>新生代（Young）GC：Minor GC</strong></p>\n<p><strong>老年代（Old）GC：Major GC</strong></p>\n<ul>\n<li><strong>Eden区</strong></li>\n</ul>\n<p>所有刚刚new出来的对象，就会分配在Eden区。</p>\n<ul>\n<li><strong>Survivor区</strong></li>\n</ul>\n<ol>\n<li><p>S0、S1永远有一块内存是浪费的，一块被使用；</p>\n</li>\n<li><p>S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；</p>\n</li>\n<li><p>Eden&#x3D;80%；S0&#x3D;10%；S1&#x3D;10%；Eden：S0：S1&#x3D;8：1：1；</p>\n</li>\n<li><p>比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；</p>\n</li>\n<li><p>如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 &gt; 年龄15之后，会将该对象存放到老年代（Old）区；</p>\n<p>假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。</p>\n</li>\n<li><p>极端情况，如果有个对象超过老年代内存直接OOM。</p>\n</li>\n</ol>\n<h4 id=\"2-老年代（Old）\"><a href=\"#2-老年代（Old）\" class=\"headerlink\" title=\"2.老年代（Old）\"></a>2.老年代（Old）</h4><p>如果老年代的内存不够用了，会触发 <strong>Old GC</strong> 也可 称为 <strong>Major GC</strong>。Old GC会比较耗时。当然一旦触发了<strong>Old GC（Major GC）</strong>通常都会伴随着<strong>Young GC（Minor GC）</strong>。</p>\n<p><strong>Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）&#x3D; Full GC</strong></p>\n<p>调优的原则：</p>\n<p>避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。</p>\n<ol>\n<li>尽量减少GC次数</li>\n<li>尽量只触发Young GC（Minor GC）</li>\n</ol>\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n<p><strong>实操：</strong></p>\n<p>在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/test/jvm&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestJvmController</span> &#123;<br>    List&lt;AuthAccount&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/jvmTest&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">jvmTest</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AuthAccount</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的<strong>jvisualvm</strong>工具（这个工具是JDK自带的），<strong>首先还要安装Visual GC的插件才能查看到JVM GC运行时状况</strong>。</p>\n<p>之后等待程序运行后，打开这个<strong>jvisualvm</strong>工具就可以查看到JVM内存运行时的状况</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png\"></p>\n<p>如果堆内存中，没有可分配的内存空间了，就会报OOM。</p>\n<p>同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize&#x3D;40M -XX:MaxMetaspaceSize&#x3D;40M。</p>\n<p>栈也会报OOM，首先我们先测试栈的深度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 通过递归操作</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> i)</span> &#123;<br>       System.out.println(count++);<br>       test(i);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>       test(count);<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png\"></p>\n<p>通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。</p>\n<p>可以根据需求去调整栈的深度大小；</p>\n<p>一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。</p>\n<p>通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png\"></p>\n<h2 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h2><blockquote>\n<p>JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代</p>\n<p>JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。</p>\n</blockquote>\n<h2 id=\"堆（分配内存会大一些）\"><a href=\"#堆（分配内存会大一些）\" class=\"headerlink\" title=\"堆（分配内存会大一些）\"></a>堆（分配内存会大一些）</h2><blockquote>\n<p>分配对象、new 实例。</p>\n<p>堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）</p>\n<p>如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。</p>\n</blockquote>\n<h4 id=\"1-新生代（Young）\"><a href=\"#1-新生代（Young）\" class=\"headerlink\" title=\"1.新生代（Young）\"></a>1.新生代（Young）</h4><ol>\n<li>new Object() ，实例化10个单位为1的对象 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 新生代分配</li>\n<li>新生代内存不够用时，触发GC</li>\n<li>GC之后，释放空间，会存在空间碎片</li>\n<li>这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC</li>\n<li>GC的弊端就是会消耗线程资源，stop the world。</li>\n</ol>\n<p><strong>以上的设计显然是不合理的，重新设计之后</strong></p>\n<p>新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；</p>\n<p>新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。</p>\n<p>如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。</p>\n<p><em>举例说明：</em></p>\n<p>老年代：2G内存</p>\n<p>新生代：1G内存</p>\n<blockquote>\n<p>Eden区800MB</p>\n<p>S0，S1各100MB</p>\n</blockquote>\n<p>这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。</p>\n<p><strong>新生代（Young）GC：Minor GC</strong></p>\n<p><strong>老年代（Old）GC：Major GC</strong></p>\n<ul>\n<li><strong>Eden区</strong></li>\n</ul>\n<p>所有刚刚new出来的对象，就会分配在Eden区。</p>\n<ul>\n<li><strong>Survivor区</strong></li>\n</ul>\n<ol>\n<li><p>S0、S1永远有一块内存是浪费的，一块被使用；</p>\n</li>\n<li><p>S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；</p>\n</li>\n<li><p>Eden&#x3D;80%；S0&#x3D;10%；S1&#x3D;10%；Eden：S0：S1&#x3D;8：1：1；</p>\n</li>\n<li><p>比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；</p>\n</li>\n<li><p>如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 &gt; 年龄15之后，会将该对象存放到老年代（Old）区；</p>\n<p>假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。</p>\n</li>\n<li><p>极端情况，如果有个对象超过老年代内存直接OOM。</p>\n</li>\n</ol>\n<h4 id=\"2-老年代（Old）\"><a href=\"#2-老年代（Old）\" class=\"headerlink\" title=\"2.老年代（Old）\"></a>2.老年代（Old）</h4><p>如果老年代的内存不够用了，会触发 <strong>Old GC</strong> 也可 称为 <strong>Major GC</strong>。Old GC会比较耗时。当然一旦触发了<strong>Old GC（Major GC）</strong>通常都会伴随着<strong>Young GC（Minor GC）</strong>。</p>\n<p><strong>Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）&#x3D; Full GC</strong></p>\n<p>调优的原则：</p>\n<p>避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。</p>\n<ol>\n<li>尽量减少GC次数</li>\n<li>尽量只触发Young GC（Minor GC）</li>\n</ol>\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n<p><strong>实操：</strong></p>\n<p>在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/test/jvm&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestJvmController</span> &#123;<br>    List&lt;AuthAccount&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/jvmTest&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">jvmTest</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AuthAccount</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的<strong>jvisualvm</strong>工具（这个工具是JDK自带的），<strong>首先还要安装Visual GC的插件才能查看到JVM GC运行时状况</strong>。</p>\n<p>之后等待程序运行后，打开这个<strong>jvisualvm</strong>工具就可以查看到JVM内存运行时的状况</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png\"></p>\n<p>如果堆内存中，没有可分配的内存空间了，就会报OOM。</p>\n<p>同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize&#x3D;40M -XX:MaxMetaspaceSize&#x3D;40M。</p>\n<p>栈也会报OOM，首先我们先测试栈的深度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 通过递归操作</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> i)</span> &#123;<br>       System.out.println(count++);<br>       test(i);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>       test(count);<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png\"></p>\n<p>通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。</p>\n<p>可以根据需求去调整栈的深度大小；</p>\n<p>一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。</p>\n<p>通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。</p>\n"},{"title":"5-JVM常用的命令","_content":"# JVM常用的命令\n\n## jps ：基础工具\n\n查看JAVA进程PID。\n\n`jps` 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。\n\n`jps` 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 `ps` 命令。\n\n**jps 常用参数**\n\n- `jps -l` 如果是以 class 方式运行，会显示进程的主类 `main.class` 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名\n\n第一列的数字就是进程的 `pid`\n\n- `jps -v` 输出传递给 JVM 的参数，`v` 表示虚拟机，`jps -vl` 比较常见的组合；\n- `jps -V` 大写 `v`，表示通过文件传递给 JVM 的参数\n\n```java\nCopy# michael @ Michael-MBP in ~ [16:37:59]\n$ jps -v |grep Mybatis\n8005 MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:53364,suspend=y,server=n -XX:TieredStopAtLevel=1 -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=53363 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018.2/captureAgent/debugger-agent.jar=file:/private/var/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-8\n```\n\n- `jps -m` 输出传递给 `main.class` 方法的参数，实用的一个命令，`jps -ml` 比较实用的组合，会显示包名/类名/参数\n- `jps -q` 只输出进程的 pid\n\njps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。\n\n有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 `jps -v` 查看进程的jvm参数情况。\n\n---\n\n\n\n##\tjinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\n\n参考原文：https://blog.csdn.net/yx0628/article/details/80958488\n\n`jinfo -flag initilHeapSize ${PID} `查看某个**JAVA进程**中，JVM的参数值是什么。\n\n`jinfo -flag ${PID} ` 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。\n\n```shell\n[root@admin ~]# jinfo --help\nUsage:\n    jinfo [option] <pid>\n        (to connect to running process)\n    jinfo [option] <executable <core>\n        (to connect to a core file)\n    jinfo [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    -flag <name>         to print the value of the named VM flag\n    -flag [+|-]<name>    to enable or disable the named VM flag\n    -flag <name>=<value> to set the named VM flag to the given value\n    -flags               to print VM flags\n    -sysprops            to print Java system properties\n    <no option>          to print both of the above\n    -h | -help           to print this help message\n```\n\n我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：\n\n```shell\n[root@admin ~]# jps\n43520 Test\n35900 Jps\n```\n\n查看 JVM 参数：\n\n```shell\n[root@admin ~]# jinfo -flags 43520\nAttaching to process ID 43520, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.45-b08\n\n-Dfile.encoding=GBK\n```\n\n查看系统参数：\n\n```shell\n[root@admin ~]# jinfo -sysflags 43520\n```\n\n虚拟机的参数可以通过这个命令查看：\n\n```shell\njava -XX:+PrintFlagsFinal -version | grep manageable\n```\n\n除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。\n\n```shell\njinfo -flag +PrintGC 43520\njinfo -flag +PrintGCDetails 43520\n```\n\n关闭 GC 日志的话同理：\n\n```shell\njinfo -flag -PrintGC 43520\njinfo -flag -PrintGCDetails 43520\n```\n\n查看是否开启 GC 日志的打印：\n\n```shell\njinfo -flag PrintGC 43520\njinfo -flag PrintGCDetails 43520\n```\n\n```shell\n[root@admin ~]# jinfo -flag PrintGC 43520\n-XX:-PrintGC\n\n[root@admin ~]# jinfo -flag PrintGCDetails 43520\n-XX:-PrintGCDetails\n```\n\n常用 JVM 参数：\n\n```shell\n-Xms：初始堆大小，默认为物理内存的1/64(<1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制\n-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制\n-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。\n-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。\n-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:\"-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。\n-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。\n-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。\n```\n\n---\n\n\n\n##\tjstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\n\n原文参考：https://blog.csdn.net/cockroach02/article/details/82670500\n\n查看JVM中相关性能的信息。\n\njstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java/bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。\n\n> 类装载信息：`jstat -class ${PID}`\n>\n> 举例：`jstat -class ${PID} ${几秒内打印一次} ${打印10次} = jstat -class ${PID} 1000 10`。打印出过去10秒类加载的数据。\n\n> GC相关的情况：`jstat -gc ${PID}`\n>\n> 举例：`jstat -gc ${PID} ${几秒内打印一次} ${打印10次} = jstat -gc ${PID} 1000 10`。打印出过去10秒GC的数据。\n\n**参数说明：**\n\n```shell\nC:\\Users\\Administrator>jstat -help\nUsage: jstat -help|-options\n       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n\nDefinitions:\n  <option>      An option reported by the -options option\n  <vmid>        Virtual Machine Identifier. A vmid takes the following form:\n                     <lvmid>[@<hostname>[:<port>]]\n                Where <lvmid> is the local vm identifier for the target\n                Java virtual machine, typically a process id; <hostname> is\n                the name of the host running the target Java virtual machine;\n                and <port> is the port number for the rmiregistry on the\n                target host. See the jvmstat documentation for a more complete\n                description of the Virtual Machine Identifier.\n  <lines>       Number of samples between header lines.\n  <interval>    Sampling interval. The following forms are allowed:\n                    <n>[\"ms\"|\"s\"]\n                Where <n> is an integer and the suffix specifies the units as\n                milliseconds(\"ms\") or seconds(\"s\"). The default units are \"ms\".\n  <count>       Number of samples to take before terminating.\n  -J<flag>      Pass <flag> directly to the runtime system.\n```\n\n由以上可知，jstat的命令的格式如下：\n\n```shell\njstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n```\n\n我们可以通过jstat -options查看可以支持的具体参数\n\n```shell\nC:\\Users\\Administrator>jstat -options\n-class\n-compiler\n-gc\n-gccapacity\n-gccause\n-gcmetacapacity\n-gcnew\n-gcnewcapacity\n-gcold\n-gcoldcapacity\n-gcutil\n-printcompilation\n```\n\n**Option参数说明：**\n\n|       参数        |                             说明                             |\n| :---------------: | :----------------------------------------------------------: |\n|      -class       | 类加载的行为统计 Displays statistics about the behavior of the class loader. |\n|     -compiler     | HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler. |\n|        -gc        | 垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap. |\n|    -gccapacity    | 各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces. |\n|     -gccause      | 垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events. |\n|  -gcmetacapacity  | 统计元空间使用情况 Displays statistics about the sizes of the metaspace. |\n|      -gcnew       | 显示新生代统计信息 Displays statistics of the behavior of the new generation. |\n|  -gcnewcapacity   | 统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces. |\n|      -gcold       | 统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics. |\n|  -gcoldcapacity   | 统计老年代内存使用情况 Displays statistics about the sizes of the old generation. |\n|      -gcutil      | 显示各个各代内存使用百分比 Displays a summary about garbage collection statistics. |\n| -printcompilation | Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics. |\n\n**使用示例：**\n\n**jstat -class ： 类加载的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -class 2284\nLoaded  Bytes  Unloaded  Bytes     Time\n 30116 75021.8       26    51.4      86.72\n```\n\n- Loaded ：加载class的数量\n- Bytes ： 加载class的大小（单位KB）\n- Unloaded ：卸载class的数量\n- Bytes： 卸载class的大小（单位KB）\n- Time ： 加载和卸载class所耗费的时间\n\n**jstat -compiler ：HotSpt JIT编译器行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -compiler 2284\nCompiled Failed Invalid   Time   FailedType FailedMethod\n   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink\n```\n\n- Compiled ：编译成功数\n- Failed ： 编译失败数\n- Invalid ： 无效数量\n- FailedType ： 最后一次编译失效类型\n- FailedMethod ：最后一次编译失效的方法\n\n**jstat -gc：垃圾回收堆的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gc 2284\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT\n104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221\n```\n\n+ S0C ： 第一个幸存区的总容量（KB）\n+ S1C ： 第二个幸存区的总容量（KB）\n+ S0U ： 第一个幸存区已使用的容量（KB）\n+ S1U ： 第二个幸存区已使用的容量（KB）\n+ EC ： 伊甸区的总容量（KB）\n+ EU ： 伊甸区已使用容量（KB）\n+ OC ： 老年区的总容量（KB）\n+ MC ： 元空间的总容量（KB）\n+ MU ： 元空间已使用容量（KB）\n+ CCSC ： 压缩类空间总容量（KB）\n+ CCSU ： 压缩类空间已使用总容量（KB）\n+ YGC ： 新生代GC次数\n+ YGCT ：新生代GC总耗费时间\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗费时间\n+ GCT ： GC总耗费时间\n\n**jstat -gccapacity ： 各个回收区内存情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gccapacity 2284\n NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC\n1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0\n59    11\n```\n\n+ NGCMN ： 新生代占用的最小空间大小（KB）\n+ NGCMX ： 新生代占用的最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1C ：第二幸存区当前空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ OGCMN ： 老年区最小空间大小（KB）\n+ OGCMX ： 老年区最大空间大小（KB）\n+ OGC ： 老年区当前空间大小（KB）\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小大小（KB）\n+ CCSMX ： 压缩类最大空间大小（KB）\n+ CCSC ： 压缩类当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**jstat -gccause ：垃圾收集统计概述**\n\n```shell\nC:\\Users\\Administrator>jstat -gccause 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC\n  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ LGCC ：最近一次GC原因\n+ GCC ： 当前GC原因\n\n**6 . gc -gcmetacapacity ：元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcmetacapacity 2284\n   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT\n       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221\n\n```\n\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小空间大小（KB）\n+ CCSMX ： 压缩类空间最大空间大小（KB）\n+ CCSC ： 压缩类空间当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT： 老年代GC耗费时间\n+ GCT ： GC总耗费时间\n\n**7 . jstat -gcnew ： 显示新生代统计信息**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnew 2284\n S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972\n```\n\n+ S0C ： 第一幸存区总空间大小（KB）\n+ S1C ： 第二幸存区总空间大小（KB）\n+ S0U ： 第一幸存区已使用空间大小（KB）\n+ S1U ： 第二幸存区已使用空间大小（KB）\n+ TT ： 提升阈值(提升阈值)\n+ MTT ： 最大阈值\n+ DSS ： survivor区域大小 (KB)\n+ EC ： 伊甸区总空间大小（KB）\n+ EU ： 伊甸区已使用空间大小（KB）\n\n**8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnewcapacity 2284\n  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC\n 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11\n```\n\n+ NGCMN ： 新生代最小空间大小（KB）\n+ NGCMX ： 新生代最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0CMX ： 第一幸存区最大空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1CMX ： 第二幸存区最大空间大小（KB）\n+ S1C ： 第二幸存区当前空间大小（KB）\n+ ECMX ： 伊甸区最大空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**9 . jstat -gcold ： 统计老年代和元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcold 2284\n   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT\n251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295\n```\n\n+ MC ： 元空间总大小（KB）\n+ MU ： 元空间已使用大小（KB）\n+ CCSC ： 压缩类空间总大小（KB）\n+ CCSU ： 压缩类空间已使用大小（KB）\n+ OC ： 老年区空间总大小（KB）\n+ OU ： 老年区已使用大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**10 . jstat -gcoldcapacity ： 统计老年代内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcoldcapacity 2284\n   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT\n  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295\n```\n\n+ OGCMN ：老年区占用最小空间（KB）\n+ OGCMX ： 老年区占用最大空间（KB）\n+ OGC ： 当前老年区空间（KB）\n+ OC ： 当前老年区空间（KB）\n+ YGC ：新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**11 . jstat -gcutil ： 垃圾回收统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gcutil 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ GCT ：GC总耗时\n\n**12 . jstat -printcompilation ： Hotspot方法编译统计情况**\n\n```shell\nC:\\Users\\Administrator>jstat -printcompilation 2284\nCompiled  Size  Type Method\n   21538    150    1 java/util/Collections reverse\n```\n\n+ Compiled ： 已编译方法次数\n+ Size ： 最近一次方法编译大小\n+ Type ： 最近一次编译方法类型\n+ Method ： 最近一次编译方法\n\n参考：\n\njstat：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\njstat命令使用：https://www.cnblogs.com/lizhonghua34/p/7307139.html\nJVM调优命令-jstat：https://www.cnblogs.com/myna/p/7567769.html\n\n---\n\n\n\n##\tjstack：查看某个Java进程内的线程堆栈信息\n\n参考原文：https://www.jianshu.com/p/8d5782bc596e\n\n查看JAVA进程当中，线程内容。\n\n**jstack用法**\n\n```kotlin\n/opt/java8/bin/jstack\n\nUsage:\n    jstack [-l] <pid>\n        (to connect to running process) 连接活动线程\n    jstack -F [-m] [-l] <pid>\n        (to connect to a hung process) 连接阻塞线程\n    jstack [-m] [-l] <executable> <core>\n        (to connect to a core file) 连接dump的文件\n    jstack [-m] [-l] [server_id@]<remote server IP or hostname>\n        (to connect to a remote debug server) 连接远程服务器\n\nOptions:\n    -F  to force a thread dump. Use when jstack <pid> does not respond (process is hung)\n    -m  to print both java and native frames (mixed mode)\n    -l  long listing. Prints additional information about locks\n    -h or -help to print this help message\n```\n\n**jstack查看输出**\n\n```bash\n/opt/java8/bin/jstack -l 28367\n\n2019-06-25 15:04:46\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):\n\n\"Attach Listener\" #453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n        - None\n\n\"grpc-default-executor-263\" #452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000007400243f0> (a java.util.concurrent.SynchronousQueue$TransferStack)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)\n        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:362)\n        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n\n\"http-bio-8080-exec-10\" #235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x0000000743d26638> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n```\n\n**jstack统计线程数**\n\n```bash\n/opt/java8/bin/jstack -l 28367 | grep 'java.lang.Thread.State' | wc -l\n```\n\n**jstack检测死锁**\n\n*死锁代码*\n\n```csharp\npublic class DeathLock {\n\n    private static Lock lock1 = new ReentrantLock();\n    private static Lock lock2 = new ReentrantLock();\n\n    public static void deathLock() {\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock1.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock2.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        Thread t2 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock2.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock1.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n\n        t1.setName(\"thread1\");\n        t2.setName(\"thread2\");\n        t1.start();\n        t2.start();\n    }\n\n    public static void main(String[] args) {\n        deathLock();\n    }\n}\n```\n\n*死锁日志*\n\n```bash\n\"mythread2\" #12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d640> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\"mythread1\" #11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d610> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\nFound one Java-level deadlock:\n=============================\n\"mythread2\":\n  waiting for ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread1\"\n\"mythread1\":\n  waiting for ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread2\"\n\nJava stack information for the threads listed above:\n===================================================\n\"mythread2\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\"mythread1\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\nFound 1 deadlock.\n```\n\n**jstack检测cpu高**\n\n*步骤一：查看cpu占用高进程*\n\n```cpp\ntop\n\nMem:  16333644k total,  9472968k used,  6860676k free,   165616k buffers\nSwap:        0k total,        0k used,        0k free,  6665292k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     \n17850 root      20   0 7588m 112m  11m S 100.7  0.7  47:53.80 java       \n 1552 root      20   0  121m  13m 8524 S  0.7  0.1  14:37.75 AliYunDun   \n 3581 root      20   0 9750m 2.0g  13m S  0.7 12.9 298:30.20 java        \n    1 root      20   0 19360 1612 1308 S  0.0  0.0   0:00.81 init        \n    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd    \n    3 root      RT   0     0    0    0 S  0.0  0.0   0:00.14 migration/0 \n```\n\n*步骤二：查看cpu占用高线程*\n\n```css\ntop -H -p 17850\n\ntop - 17:43:15 up 5 days,  7:31,  1 user,  load average: 0.99, 0.97, 0.91\nTasks:  32 total,   1 running,  31 sleeping,   0 stopped,   0 zombie\nCpu(s):  3.7%us,  8.9%sy,  0.0%ni, 87.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:  16333644k total,  9592504k used,  6741140k free,   165700k buffers\nSwap:        0k total,        0k used,        0k free,  6781620k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n17880 root      20   0 7588m 112m  11m R 99.9  0.7  50:47.43 java\n17856 root      20   0 7588m 112m  11m S  0.3  0.7   0:02.08 java\n17850 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.00 java\n17851 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.23 java\n17852 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.09 java\n17853 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.12 java\n17854 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.07 java\n```\n\n*步骤三：转换线程ID*\n\n```bash\nprintf \"%x\\n\" 17880          \n45d8\n```\n\n*步骤四：定位cpu占用线程*\n\n```bash\njstack 17850|grep 45d8 -A 30\n\"pool-1-thread-11\" #20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]\n   java.lang.Thread.State: RUNNABLE\n        at java.io.FileOutputStream.writeBytes(Native Method)\n        at java.io.FileOutputStream.write(FileOutputStream.java:326)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)\n        - locked <0x00000006c6c2e708> (a java.io.BufferedOutputStream)\n        at java.io.PrintStream.write(PrintStream.java:482)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)\n        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)\n        - locked <0x00000006c6c26620> (a java.io.OutputStreamWriter)\n        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)\n        at java.io.PrintStream.write(PrintStream.java:527)\n        - eliminated <0x00000006c6c10178> (a java.io.PrintStream)\n        at java.io.PrintStream.print(PrintStream.java:597)\n        at java.io.PrintStream.println(PrintStream.java:736)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at com.demo.guava.HardTask.call(HardTask.java:18)\n        at com.demo.guava.HardTask.call(HardTask.java:9)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n\"pool-1-thread-10\" #19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000006c6c14178> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n```\n\n---\n\n\n\n## Jmap\n\n原文参考：https://www.jianshu.com/p/c52ffaca40a5\n\n> jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的`共享对象内存映射或堆内存细节`。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍`Java的堆Dump`以及jmap命令\n\n### 什么是堆Dump\n\n### 基础知识\n\n[Java虚拟机的内存组成以及堆内存介绍](链接地址)\n [Java GC工作原理](链接地址)\n\n常见内存错误：\n\n> outOfMemoryError 年老代内存不足。\n>  outOfMemoryError:PermGen Space 永久代内存不足。\n>  outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。\n\n**jmap 用法摘要**\n\n```bash\nUsage:\n    jmap [option] <pid>\n        (to connect to running process)\n    jmap [option] <executable <core>\n        (to connect to a core file)\n    jmap [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    <none>               to print same info as Solaris pmap\n    -heap                to print java heap summary\n    -histo[:live]        to print histogram of java object heap; if the \"live\"\n                         suboption is specified, only count live objects\n    -permstat            to print permanent generation statistics\n    -finalizerinfo       to print information on objects awaiting finalization\n    -dump:<dump-options> to dump java heap in hprof binary format\n                         dump-options:\n                           live         dump only live objects; if not specified,\n                                        all objects in the heap are dumped.\n                           format=b     binary format\n                           file=<file>  dump heap to <file>\n                         Example: jmap -dump:live,format=b,file=heap.bin <pid>\n    -F                   force. Use with -dump:<dump-options> <pid> or -histo\n                         to force a heap dump or histogram when <pid> does not\n                         respond. The \"live\" suboption is not supported\n                         in this mode.\n    -h | -help           to print this help message\n    -J<flag>             to pass <flag> directly to the runtime system\n```\n\n- 指定进程号(pid)的进程 jmap [ option ]\n- 指定核心文件 jmap [ option ]\n- 指定远程调试服务器 jmap [ option ] [server-id@]\n\n**参数：**\n\n- option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。\n- pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。\n- executable 产生核心dump的Java可执行文件。\n- core 需要打印配置信息的核心文件。\n- remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。\n- server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。\n\n**选项:**\n\n- <no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。\n- -dump:[live,]format=b,file=<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。\n- -finalizerinfo 打印等待终结的对象信息。\n- -heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。\n- -histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。\n- -permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。\n- -F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。\n- -h 打印帮助信息。\n- -help 打印帮助信息。\n- -J<flag> 指定传递给运行jmap的JVM的参数。\n\n**示例：**\n\n*查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846*\n\n```bash\nAttaching to process ID 31846, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.71-b01\n\nusing thread-local object allocation.\nParallel GC with 4 thread(s)//GC 方式\n\nHeap Configuration: //堆内存初始化配置\n   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)\n   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)\n   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小\n   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小\n   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小\n   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=<value>:设置JVM堆的‘老生代’的大小\n   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率\n   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 \n   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=<value>:设置JVM堆的‘永生代’的初始大小\n   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=<value>:设置JVM堆的‘永生代’的最大大小\n   G1HeapRegionSize = 0 (0.0MB)\n\nHeap Usage://堆内存使用情况\nPS Young Generation\nEden Space://Eden区内存分布\n   capacity = 33030144 (31.5MB)//Eden区总容量\n   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用\n   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量\n   4.614088270399305% used //Eden区使用比率\nFrom Space:  //其中一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nTo Space:  //另一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nPS Old Generation //当前的Old区内存分布\n   capacity = 86507520 (82.5MB)\n   used     = 0 (0.0MB)\n   free     = 86507520 (82.5MB)\n   0.0% used\nPS Perm Generation//当前的 “永生代” 内存分布\n   capacity = 22020096 (21.0MB)\n   used     = 2496528 (2.3808746337890625MB)\n   free     = 19523568 (18.619125366210938MB)\n   11.337498256138392% used\n\n670 interned Strings occupying 43720 bytes.\n```\n\n**查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331**\n\n```bash\nnum     #instances         #bytes  class name\n编号     个数                字节     类名\n----------------------------------------------\n   1:             7        1322080  [I\n   2:          5603         722368  <methodKlass>\n   3:          5603         641944  <constMethodKlass>\n   4:         34022         544352  java.lang.Integer\n   5:           371         437208  <constantPoolKlass>\n   6:           336         270624  <constantPoolCacheKlass>\n   7:           371         253816  <instanceKlassKlass>\n```\n\n**将内存使用的详细情况输出到文件，执行命令： jmap -dump:format=b,file=heapDump 6900**\n\n然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：http://localhost:5000/ 查看详细信息\n\n> 这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。\n\n### 总结\n\n1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。\n 2.要制作堆Dump可以直接使用jvm自带的jmap命令\n 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。\n 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。\n 5.也可以使用 jmap -dump:format=b,file=<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容\n 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。\n\n### 出现问题：\n\n1. Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process\n    在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process，这是oracla文档中提到的一个bug:http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：\n\n- echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope 该方法在下次重启前有效。\n- 永久有效方法 sudo vi /etc/sysctl.d/10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope = 1 修改为: kernel.yama.ptrace_scope = 0 重启系统，使修改生效。\n\n","source":"_posts/JVM/5-JVM常用的命令.md","raw":"---\ntitle: 5-JVM常用的命令\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM常用的命令\n\n## jps ：基础工具\n\n查看JAVA进程PID。\n\n`jps` 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。\n\n`jps` 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 `ps` 命令。\n\n**jps 常用参数**\n\n- `jps -l` 如果是以 class 方式运行，会显示进程的主类 `main.class` 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名\n\n第一列的数字就是进程的 `pid`\n\n- `jps -v` 输出传递给 JVM 的参数，`v` 表示虚拟机，`jps -vl` 比较常见的组合；\n- `jps -V` 大写 `v`，表示通过文件传递给 JVM 的参数\n\n```java\nCopy# michael @ Michael-MBP in ~ [16:37:59]\n$ jps -v |grep Mybatis\n8005 MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:53364,suspend=y,server=n -XX:TieredStopAtLevel=1 -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=53363 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018.2/captureAgent/debugger-agent.jar=file:/private/var/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-8\n```\n\n- `jps -m` 输出传递给 `main.class` 方法的参数，实用的一个命令，`jps -ml` 比较实用的组合，会显示包名/类名/参数\n- `jps -q` 只输出进程的 pid\n\njps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。\n\n有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 `jps -v` 查看进程的jvm参数情况。\n\n---\n\n\n\n##\tjinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\n\n参考原文：https://blog.csdn.net/yx0628/article/details/80958488\n\n`jinfo -flag initilHeapSize ${PID} `查看某个**JAVA进程**中，JVM的参数值是什么。\n\n`jinfo -flag ${PID} ` 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。\n\n```shell\n[root@admin ~]# jinfo --help\nUsage:\n    jinfo [option] <pid>\n        (to connect to running process)\n    jinfo [option] <executable <core>\n        (to connect to a core file)\n    jinfo [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    -flag <name>         to print the value of the named VM flag\n    -flag [+|-]<name>    to enable or disable the named VM flag\n    -flag <name>=<value> to set the named VM flag to the given value\n    -flags               to print VM flags\n    -sysprops            to print Java system properties\n    <no option>          to print both of the above\n    -h | -help           to print this help message\n```\n\n我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：\n\n```shell\n[root@admin ~]# jps\n43520 Test\n35900 Jps\n```\n\n查看 JVM 参数：\n\n```shell\n[root@admin ~]# jinfo -flags 43520\nAttaching to process ID 43520, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.45-b08\n\n-Dfile.encoding=GBK\n```\n\n查看系统参数：\n\n```shell\n[root@admin ~]# jinfo -sysflags 43520\n```\n\n虚拟机的参数可以通过这个命令查看：\n\n```shell\njava -XX:+PrintFlagsFinal -version | grep manageable\n```\n\n除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。\n\n```shell\njinfo -flag +PrintGC 43520\njinfo -flag +PrintGCDetails 43520\n```\n\n关闭 GC 日志的话同理：\n\n```shell\njinfo -flag -PrintGC 43520\njinfo -flag -PrintGCDetails 43520\n```\n\n查看是否开启 GC 日志的打印：\n\n```shell\njinfo -flag PrintGC 43520\njinfo -flag PrintGCDetails 43520\n```\n\n```shell\n[root@admin ~]# jinfo -flag PrintGC 43520\n-XX:-PrintGC\n\n[root@admin ~]# jinfo -flag PrintGCDetails 43520\n-XX:-PrintGCDetails\n```\n\n常用 JVM 参数：\n\n```shell\n-Xms：初始堆大小，默认为物理内存的1/64(<1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制\n-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制\n-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。\n-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。\n-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:\"-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。\n-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。\n-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。\n```\n\n---\n\n\n\n##\tjstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\n\n原文参考：https://blog.csdn.net/cockroach02/article/details/82670500\n\n查看JVM中相关性能的信息。\n\njstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java/bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。\n\n> 类装载信息：`jstat -class ${PID}`\n>\n> 举例：`jstat -class ${PID} ${几秒内打印一次} ${打印10次} = jstat -class ${PID} 1000 10`。打印出过去10秒类加载的数据。\n\n> GC相关的情况：`jstat -gc ${PID}`\n>\n> 举例：`jstat -gc ${PID} ${几秒内打印一次} ${打印10次} = jstat -gc ${PID} 1000 10`。打印出过去10秒GC的数据。\n\n**参数说明：**\n\n```shell\nC:\\Users\\Administrator>jstat -help\nUsage: jstat -help|-options\n       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n\nDefinitions:\n  <option>      An option reported by the -options option\n  <vmid>        Virtual Machine Identifier. A vmid takes the following form:\n                     <lvmid>[@<hostname>[:<port>]]\n                Where <lvmid> is the local vm identifier for the target\n                Java virtual machine, typically a process id; <hostname> is\n                the name of the host running the target Java virtual machine;\n                and <port> is the port number for the rmiregistry on the\n                target host. See the jvmstat documentation for a more complete\n                description of the Virtual Machine Identifier.\n  <lines>       Number of samples between header lines.\n  <interval>    Sampling interval. The following forms are allowed:\n                    <n>[\"ms\"|\"s\"]\n                Where <n> is an integer and the suffix specifies the units as\n                milliseconds(\"ms\") or seconds(\"s\"). The default units are \"ms\".\n  <count>       Number of samples to take before terminating.\n  -J<flag>      Pass <flag> directly to the runtime system.\n```\n\n由以上可知，jstat的命令的格式如下：\n\n```shell\njstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n```\n\n我们可以通过jstat -options查看可以支持的具体参数\n\n```shell\nC:\\Users\\Administrator>jstat -options\n-class\n-compiler\n-gc\n-gccapacity\n-gccause\n-gcmetacapacity\n-gcnew\n-gcnewcapacity\n-gcold\n-gcoldcapacity\n-gcutil\n-printcompilation\n```\n\n**Option参数说明：**\n\n|       参数        |                             说明                             |\n| :---------------: | :----------------------------------------------------------: |\n|      -class       | 类加载的行为统计 Displays statistics about the behavior of the class loader. |\n|     -compiler     | HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler. |\n|        -gc        | 垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap. |\n|    -gccapacity    | 各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces. |\n|     -gccause      | 垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events. |\n|  -gcmetacapacity  | 统计元空间使用情况 Displays statistics about the sizes of the metaspace. |\n|      -gcnew       | 显示新生代统计信息 Displays statistics of the behavior of the new generation. |\n|  -gcnewcapacity   | 统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces. |\n|      -gcold       | 统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics. |\n|  -gcoldcapacity   | 统计老年代内存使用情况 Displays statistics about the sizes of the old generation. |\n|      -gcutil      | 显示各个各代内存使用百分比 Displays a summary about garbage collection statistics. |\n| -printcompilation | Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics. |\n\n**使用示例：**\n\n**jstat -class ： 类加载的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -class 2284\nLoaded  Bytes  Unloaded  Bytes     Time\n 30116 75021.8       26    51.4      86.72\n```\n\n- Loaded ：加载class的数量\n- Bytes ： 加载class的大小（单位KB）\n- Unloaded ：卸载class的数量\n- Bytes： 卸载class的大小（单位KB）\n- Time ： 加载和卸载class所耗费的时间\n\n**jstat -compiler ：HotSpt JIT编译器行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -compiler 2284\nCompiled Failed Invalid   Time   FailedType FailedMethod\n   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink\n```\n\n- Compiled ：编译成功数\n- Failed ： 编译失败数\n- Invalid ： 无效数量\n- FailedType ： 最后一次编译失效类型\n- FailedMethod ：最后一次编译失效的方法\n\n**jstat -gc：垃圾回收堆的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gc 2284\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT\n104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221\n```\n\n+ S0C ： 第一个幸存区的总容量（KB）\n+ S1C ： 第二个幸存区的总容量（KB）\n+ S0U ： 第一个幸存区已使用的容量（KB）\n+ S1U ： 第二个幸存区已使用的容量（KB）\n+ EC ： 伊甸区的总容量（KB）\n+ EU ： 伊甸区已使用容量（KB）\n+ OC ： 老年区的总容量（KB）\n+ MC ： 元空间的总容量（KB）\n+ MU ： 元空间已使用容量（KB）\n+ CCSC ： 压缩类空间总容量（KB）\n+ CCSU ： 压缩类空间已使用总容量（KB）\n+ YGC ： 新生代GC次数\n+ YGCT ：新生代GC总耗费时间\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗费时间\n+ GCT ： GC总耗费时间\n\n**jstat -gccapacity ： 各个回收区内存情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gccapacity 2284\n NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC\n1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0\n59    11\n```\n\n+ NGCMN ： 新生代占用的最小空间大小（KB）\n+ NGCMX ： 新生代占用的最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1C ：第二幸存区当前空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ OGCMN ： 老年区最小空间大小（KB）\n+ OGCMX ： 老年区最大空间大小（KB）\n+ OGC ： 老年区当前空间大小（KB）\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小大小（KB）\n+ CCSMX ： 压缩类最大空间大小（KB）\n+ CCSC ： 压缩类当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**jstat -gccause ：垃圾收集统计概述**\n\n```shell\nC:\\Users\\Administrator>jstat -gccause 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC\n  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ LGCC ：最近一次GC原因\n+ GCC ： 当前GC原因\n\n**6 . gc -gcmetacapacity ：元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcmetacapacity 2284\n   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT\n       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221\n\n```\n\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小空间大小（KB）\n+ CCSMX ： 压缩类空间最大空间大小（KB）\n+ CCSC ： 压缩类空间当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT： 老年代GC耗费时间\n+ GCT ： GC总耗费时间\n\n**7 . jstat -gcnew ： 显示新生代统计信息**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnew 2284\n S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972\n```\n\n+ S0C ： 第一幸存区总空间大小（KB）\n+ S1C ： 第二幸存区总空间大小（KB）\n+ S0U ： 第一幸存区已使用空间大小（KB）\n+ S1U ： 第二幸存区已使用空间大小（KB）\n+ TT ： 提升阈值(提升阈值)\n+ MTT ： 最大阈值\n+ DSS ： survivor区域大小 (KB)\n+ EC ： 伊甸区总空间大小（KB）\n+ EU ： 伊甸区已使用空间大小（KB）\n\n**8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnewcapacity 2284\n  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC\n 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11\n```\n\n+ NGCMN ： 新生代最小空间大小（KB）\n+ NGCMX ： 新生代最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0CMX ： 第一幸存区最大空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1CMX ： 第二幸存区最大空间大小（KB）\n+ S1C ： 第二幸存区当前空间大小（KB）\n+ ECMX ： 伊甸区最大空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**9 . jstat -gcold ： 统计老年代和元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcold 2284\n   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT\n251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295\n```\n\n+ MC ： 元空间总大小（KB）\n+ MU ： 元空间已使用大小（KB）\n+ CCSC ： 压缩类空间总大小（KB）\n+ CCSU ： 压缩类空间已使用大小（KB）\n+ OC ： 老年区空间总大小（KB）\n+ OU ： 老年区已使用大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**10 . jstat -gcoldcapacity ： 统计老年代内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcoldcapacity 2284\n   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT\n  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295\n```\n\n+ OGCMN ：老年区占用最小空间（KB）\n+ OGCMX ： 老年区占用最大空间（KB）\n+ OGC ： 当前老年区空间（KB）\n+ OC ： 当前老年区空间（KB）\n+ YGC ：新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**11 . jstat -gcutil ： 垃圾回收统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gcutil 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ GCT ：GC总耗时\n\n**12 . jstat -printcompilation ： Hotspot方法编译统计情况**\n\n```shell\nC:\\Users\\Administrator>jstat -printcompilation 2284\nCompiled  Size  Type Method\n   21538    150    1 java/util/Collections reverse\n```\n\n+ Compiled ： 已编译方法次数\n+ Size ： 最近一次方法编译大小\n+ Type ： 最近一次编译方法类型\n+ Method ： 最近一次编译方法\n\n参考：\n\njstat：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\njstat命令使用：https://www.cnblogs.com/lizhonghua34/p/7307139.html\nJVM调优命令-jstat：https://www.cnblogs.com/myna/p/7567769.html\n\n---\n\n\n\n##\tjstack：查看某个Java进程内的线程堆栈信息\n\n参考原文：https://www.jianshu.com/p/8d5782bc596e\n\n查看JAVA进程当中，线程内容。\n\n**jstack用法**\n\n```kotlin\n/opt/java8/bin/jstack\n\nUsage:\n    jstack [-l] <pid>\n        (to connect to running process) 连接活动线程\n    jstack -F [-m] [-l] <pid>\n        (to connect to a hung process) 连接阻塞线程\n    jstack [-m] [-l] <executable> <core>\n        (to connect to a core file) 连接dump的文件\n    jstack [-m] [-l] [server_id@]<remote server IP or hostname>\n        (to connect to a remote debug server) 连接远程服务器\n\nOptions:\n    -F  to force a thread dump. Use when jstack <pid> does not respond (process is hung)\n    -m  to print both java and native frames (mixed mode)\n    -l  long listing. Prints additional information about locks\n    -h or -help to print this help message\n```\n\n**jstack查看输出**\n\n```bash\n/opt/java8/bin/jstack -l 28367\n\n2019-06-25 15:04:46\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):\n\n\"Attach Listener\" #453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n        - None\n\n\"grpc-default-executor-263\" #452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000007400243f0> (a java.util.concurrent.SynchronousQueue$TransferStack)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)\n        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:362)\n        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n\n\"http-bio-8080-exec-10\" #235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x0000000743d26638> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n```\n\n**jstack统计线程数**\n\n```bash\n/opt/java8/bin/jstack -l 28367 | grep 'java.lang.Thread.State' | wc -l\n```\n\n**jstack检测死锁**\n\n*死锁代码*\n\n```csharp\npublic class DeathLock {\n\n    private static Lock lock1 = new ReentrantLock();\n    private static Lock lock2 = new ReentrantLock();\n\n    public static void deathLock() {\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock1.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock2.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        Thread t2 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock2.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock1.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n\n        t1.setName(\"thread1\");\n        t2.setName(\"thread2\");\n        t1.start();\n        t2.start();\n    }\n\n    public static void main(String[] args) {\n        deathLock();\n    }\n}\n```\n\n*死锁日志*\n\n```bash\n\"mythread2\" #12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d640> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\"mythread1\" #11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d610> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\nFound one Java-level deadlock:\n=============================\n\"mythread2\":\n  waiting for ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread1\"\n\"mythread1\":\n  waiting for ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread2\"\n\nJava stack information for the threads listed above:\n===================================================\n\"mythread2\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\"mythread1\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\nFound 1 deadlock.\n```\n\n**jstack检测cpu高**\n\n*步骤一：查看cpu占用高进程*\n\n```cpp\ntop\n\nMem:  16333644k total,  9472968k used,  6860676k free,   165616k buffers\nSwap:        0k total,        0k used,        0k free,  6665292k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     \n17850 root      20   0 7588m 112m  11m S 100.7  0.7  47:53.80 java       \n 1552 root      20   0  121m  13m 8524 S  0.7  0.1  14:37.75 AliYunDun   \n 3581 root      20   0 9750m 2.0g  13m S  0.7 12.9 298:30.20 java        \n    1 root      20   0 19360 1612 1308 S  0.0  0.0   0:00.81 init        \n    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd    \n    3 root      RT   0     0    0    0 S  0.0  0.0   0:00.14 migration/0 \n```\n\n*步骤二：查看cpu占用高线程*\n\n```css\ntop -H -p 17850\n\ntop - 17:43:15 up 5 days,  7:31,  1 user,  load average: 0.99, 0.97, 0.91\nTasks:  32 total,   1 running,  31 sleeping,   0 stopped,   0 zombie\nCpu(s):  3.7%us,  8.9%sy,  0.0%ni, 87.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:  16333644k total,  9592504k used,  6741140k free,   165700k buffers\nSwap:        0k total,        0k used,        0k free,  6781620k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n17880 root      20   0 7588m 112m  11m R 99.9  0.7  50:47.43 java\n17856 root      20   0 7588m 112m  11m S  0.3  0.7   0:02.08 java\n17850 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.00 java\n17851 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.23 java\n17852 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.09 java\n17853 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.12 java\n17854 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.07 java\n```\n\n*步骤三：转换线程ID*\n\n```bash\nprintf \"%x\\n\" 17880          \n45d8\n```\n\n*步骤四：定位cpu占用线程*\n\n```bash\njstack 17850|grep 45d8 -A 30\n\"pool-1-thread-11\" #20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]\n   java.lang.Thread.State: RUNNABLE\n        at java.io.FileOutputStream.writeBytes(Native Method)\n        at java.io.FileOutputStream.write(FileOutputStream.java:326)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)\n        - locked <0x00000006c6c2e708> (a java.io.BufferedOutputStream)\n        at java.io.PrintStream.write(PrintStream.java:482)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)\n        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)\n        - locked <0x00000006c6c26620> (a java.io.OutputStreamWriter)\n        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)\n        at java.io.PrintStream.write(PrintStream.java:527)\n        - eliminated <0x00000006c6c10178> (a java.io.PrintStream)\n        at java.io.PrintStream.print(PrintStream.java:597)\n        at java.io.PrintStream.println(PrintStream.java:736)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at com.demo.guava.HardTask.call(HardTask.java:18)\n        at com.demo.guava.HardTask.call(HardTask.java:9)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n\"pool-1-thread-10\" #19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000006c6c14178> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n```\n\n---\n\n\n\n## Jmap\n\n原文参考：https://www.jianshu.com/p/c52ffaca40a5\n\n> jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的`共享对象内存映射或堆内存细节`。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍`Java的堆Dump`以及jmap命令\n\n### 什么是堆Dump\n\n### 基础知识\n\n[Java虚拟机的内存组成以及堆内存介绍](链接地址)\n [Java GC工作原理](链接地址)\n\n常见内存错误：\n\n> outOfMemoryError 年老代内存不足。\n>  outOfMemoryError:PermGen Space 永久代内存不足。\n>  outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。\n\n**jmap 用法摘要**\n\n```bash\nUsage:\n    jmap [option] <pid>\n        (to connect to running process)\n    jmap [option] <executable <core>\n        (to connect to a core file)\n    jmap [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    <none>               to print same info as Solaris pmap\n    -heap                to print java heap summary\n    -histo[:live]        to print histogram of java object heap; if the \"live\"\n                         suboption is specified, only count live objects\n    -permstat            to print permanent generation statistics\n    -finalizerinfo       to print information on objects awaiting finalization\n    -dump:<dump-options> to dump java heap in hprof binary format\n                         dump-options:\n                           live         dump only live objects; if not specified,\n                                        all objects in the heap are dumped.\n                           format=b     binary format\n                           file=<file>  dump heap to <file>\n                         Example: jmap -dump:live,format=b,file=heap.bin <pid>\n    -F                   force. Use with -dump:<dump-options> <pid> or -histo\n                         to force a heap dump or histogram when <pid> does not\n                         respond. The \"live\" suboption is not supported\n                         in this mode.\n    -h | -help           to print this help message\n    -J<flag>             to pass <flag> directly to the runtime system\n```\n\n- 指定进程号(pid)的进程 jmap [ option ]\n- 指定核心文件 jmap [ option ]\n- 指定远程调试服务器 jmap [ option ] [server-id@]\n\n**参数：**\n\n- option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。\n- pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。\n- executable 产生核心dump的Java可执行文件。\n- core 需要打印配置信息的核心文件。\n- remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。\n- server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。\n\n**选项:**\n\n- <no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。\n- -dump:[live,]format=b,file=<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。\n- -finalizerinfo 打印等待终结的对象信息。\n- -heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。\n- -histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。\n- -permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。\n- -F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。\n- -h 打印帮助信息。\n- -help 打印帮助信息。\n- -J<flag> 指定传递给运行jmap的JVM的参数。\n\n**示例：**\n\n*查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846*\n\n```bash\nAttaching to process ID 31846, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.71-b01\n\nusing thread-local object allocation.\nParallel GC with 4 thread(s)//GC 方式\n\nHeap Configuration: //堆内存初始化配置\n   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)\n   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)\n   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小\n   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小\n   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小\n   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=<value>:设置JVM堆的‘老生代’的大小\n   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率\n   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 \n   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=<value>:设置JVM堆的‘永生代’的初始大小\n   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=<value>:设置JVM堆的‘永生代’的最大大小\n   G1HeapRegionSize = 0 (0.0MB)\n\nHeap Usage://堆内存使用情况\nPS Young Generation\nEden Space://Eden区内存分布\n   capacity = 33030144 (31.5MB)//Eden区总容量\n   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用\n   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量\n   4.614088270399305% used //Eden区使用比率\nFrom Space:  //其中一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nTo Space:  //另一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nPS Old Generation //当前的Old区内存分布\n   capacity = 86507520 (82.5MB)\n   used     = 0 (0.0MB)\n   free     = 86507520 (82.5MB)\n   0.0% used\nPS Perm Generation//当前的 “永生代” 内存分布\n   capacity = 22020096 (21.0MB)\n   used     = 2496528 (2.3808746337890625MB)\n   free     = 19523568 (18.619125366210938MB)\n   11.337498256138392% used\n\n670 interned Strings occupying 43720 bytes.\n```\n\n**查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331**\n\n```bash\nnum     #instances         #bytes  class name\n编号     个数                字节     类名\n----------------------------------------------\n   1:             7        1322080  [I\n   2:          5603         722368  <methodKlass>\n   3:          5603         641944  <constMethodKlass>\n   4:         34022         544352  java.lang.Integer\n   5:           371         437208  <constantPoolKlass>\n   6:           336         270624  <constantPoolCacheKlass>\n   7:           371         253816  <instanceKlassKlass>\n```\n\n**将内存使用的详细情况输出到文件，执行命令： jmap -dump:format=b,file=heapDump 6900**\n\n然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：http://localhost:5000/ 查看详细信息\n\n> 这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。\n\n### 总结\n\n1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。\n 2.要制作堆Dump可以直接使用jvm自带的jmap命令\n 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。\n 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。\n 5.也可以使用 jmap -dump:format=b,file=<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容\n 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。\n\n### 出现问题：\n\n1. Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process\n    在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process，这是oracla文档中提到的一个bug:http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：\n\n- echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope 该方法在下次重启前有效。\n- 永久有效方法 sudo vi /etc/sysctl.d/10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope = 1 修改为: kernel.yama.ptrace_scope = 0 重启系统，使修改生效。\n\n","slug":"JVM/5-JVM常用的命令","published":1,"date":"2020-05-14T14:36:15.000Z","updated":"2022-11-25T17:39:15.229Z","_id":"clawrzuaj0006u42bhq5l6t2b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM常用的命令\"><a href=\"#JVM常用的命令\" class=\"headerlink\" title=\"JVM常用的命令\"></a>JVM常用的命令</h1><h2 id=\"jps-：基础工具\"><a href=\"#jps-：基础工具\" class=\"headerlink\" title=\"jps ：基础工具\"></a>jps ：基础工具</h2><p>查看JAVA进程PID。</p>\n<p><code>jps</code> 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。</p>\n<p><code>jps</code> 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 <code>ps</code> 命令。</p>\n<p><strong>jps 常用参数</strong></p>\n<ul>\n<li><code>jps -l</code> 如果是以 class 方式运行，会显示进程的主类 <code>main.class</code> 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名</li>\n</ul>\n<p>第一列的数字就是进程的 <code>pid</code></p>\n<ul>\n<li><code>jps -v</code> 输出传递给 JVM 的参数，<code>v</code> 表示虚拟机，<code>jps -vl</code> 比较常见的组合；</li>\n<li><code>jps -V</code> 大写 <code>v</code>，表示通过文件传递给 JVM 的参数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Copy# michael @ Michael-MBP in ~ [<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">37</span>:<span class=\"hljs-number\">59</span>]<br>$ jps -v |grep Mybatis<br><span class=\"hljs-number\">8005</span> MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">53364</span>,suspend=y,server=n -XX:TieredStopAtLevel=<span class=\"hljs-number\">1</span> -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=<span class=\"hljs-number\">53363</span> -Dcom.sun.management.jmxremote.authenticate=<span class=\"hljs-literal\">false</span> -Dcom.sun.management.jmxremote.ssl=<span class=\"hljs-literal\">false</span> -Djava.rmi.server.hostname=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=<span class=\"hljs-literal\">true</span> -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018<span class=\"hljs-number\">.2</span>/captureAgent/debugger-agent.jar=file:/<span class=\"hljs-keyword\">private</span>/<span class=\"hljs-keyword\">var</span>/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-<span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>jps -m</code> 输出传递给 <code>main.class</code> 方法的参数，实用的一个命令，<code>jps -ml</code> 比较实用的组合，会显示包名&#x2F;类名&#x2F;参数</li>\n<li><code>jps -q</code> 只输出进程的 pid</li>\n</ul>\n<p>jps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。</p>\n<p>有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 <code>jps -v</code> 查看进程的jvm参数情况。</p>\n<hr>\n<h2 id=\"jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\"><a href=\"#jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\" class=\"headerlink\" title=\"jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\"></a>jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、</h2><p>参考原文：<a href=\"https://blog.csdn.net/yx0628/article/details/80958488\">https://blog.csdn.net/yx0628/article/details/80958488</a></p>\n<p><code>jinfo -flag initilHeapSize $&#123;PID&#125; </code>查看某个<strong>JAVA进程</strong>中，JVM的参数值是什么。</p>\n<p><code>jinfo -flag $&#123;PID&#125; </code> 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo --help<br>Usage:<br>    jinfo [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jinfo [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br>where &lt;option&gt; is one of:<br>    -flag &lt;name&gt;         to print the value of the named VM flag<br>    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag<br>    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value<br>    -flags               to print VM flags<br>    -sysprops            to print Java system properties<br>    &lt;no option&gt;          to print both of the above<br>    -h | -help           to print this help message<br></code></pre></td></tr></table></figure>\n\n<p>我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jps<br>43520 Test<br>35900 Jps<br></code></pre></td></tr></table></figure>\n\n<p>查看 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flags 43520<br>Attaching to process ID 43520, please wait...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.45-b08<br><br>-Dfile.encoding=GBK<br></code></pre></td></tr></table></figure>\n\n<p>查看系统参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -sysflags 43520<br></code></pre></td></tr></table></figure>\n\n<p>虚拟机的参数可以通过这个命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintFlagsFinal -version | grep manageable<br></code></pre></td></tr></table></figure>\n\n<p>除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag +PrintGC 43520<br>jinfo -flag +PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>关闭 GC 日志的话同理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag -PrintGC 43520<br>jinfo -flag -PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>查看是否开启 GC 日志的打印：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag PrintGC 43520<br>jinfo -flag PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flag PrintGC 43520<br>-XX:-PrintGC<br><br>[root@admin ~]# jinfo -flag PrintGCDetails 43520<br>-XX:-PrintGCDetails<br></code></pre></td></tr></table></figure>\n\n<p>常用 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-Xms：初始堆大小，默认为物理内存的1/64(&lt;1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制<br>-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制<br>-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。<br>-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。<br>-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:&quot;-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。<br>-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。<br>-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\"><a href=\"#jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\" class=\"headerlink\" title=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\"></a>jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控</h2><p>原文参考：<a href=\"https://blog.csdn.net/cockroach02/article/details/82670500\">https://blog.csdn.net/cockroach02/article/details/82670500</a></p>\n<p>查看JVM中相关性能的信息。</p>\n<p>jstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java&#x2F;bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。</p>\n<blockquote>\n<p>类装载信息：<code>jstat -class $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -class $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -class $&#123;PID&#125; 1000 10</code>。打印出过去10秒类加载的数据。</p>\n</blockquote>\n<blockquote>\n<p>GC相关的情况：<code>jstat -gc $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -gc $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -gc $&#123;PID&#125; 1000 10</code>。打印出过去10秒GC的数据。</p>\n</blockquote>\n<p><strong>参数说明：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -help<br>Usage: jstat -help|-options<br>       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br><br>Definitions:<br>  &lt;option&gt;      An option reported by the -options option<br>  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:<br>                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]<br>                Where &lt;lvmid&gt; is the local vm identifier for the target<br>                Java virtual machine, typically a process id; &lt;hostname&gt; is<br>                the name of the host running the target Java virtual machine;<br>                and &lt;port&gt; is the port number for the rmiregistry on the<br>                target host. See the jvmstat documentation for a more complete<br>                description of the Virtual Machine Identifier.<br>  &lt;lines&gt;       Number of samples between header lines.<br>  &lt;interval&gt;    Sampling interval. The following forms are allowed:<br>                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]<br>                Where &lt;n&gt; is an integer and the suffix specifies the units as<br>                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.<br>  &lt;count&gt;       Number of samples to take before terminating.<br>  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.<br></code></pre></td></tr></table></figure>\n\n<p>由以上可知，jstat的命令的格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br></code></pre></td></tr></table></figure>\n\n<p>我们可以通过jstat -options查看可以支持的具体参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -options<br>-class<br>-compiler<br>-gc<br>-gccapacity<br>-gccause<br>-gcmetacapacity<br>-gcnew<br>-gcnewcapacity<br>-gcold<br>-gcoldcapacity<br>-gcutil<br>-printcompilation<br></code></pre></td></tr></table></figure>\n\n<p><strong>Option参数说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-class</td>\n<td align=\"center\">类加载的行为统计 Displays statistics about the behavior of the class loader.</td>\n</tr>\n<tr>\n<td align=\"center\">-compiler</td>\n<td align=\"center\">HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler.</td>\n</tr>\n<tr>\n<td align=\"center\">-gc</td>\n<td align=\"center\">垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccapacity</td>\n<td align=\"center\">各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccause</td>\n<td align=\"center\">垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcmetacapacity</td>\n<td align=\"center\">统计元空间使用情况 Displays statistics about the sizes of the metaspace.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnew</td>\n<td align=\"center\">显示新生代统计信息 Displays statistics of the behavior of the new generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnewcapacity</td>\n<td align=\"center\">统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcold</td>\n<td align=\"center\">统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcoldcapacity</td>\n<td align=\"center\">统计老年代内存使用情况 Displays statistics about the sizes of the old generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcutil</td>\n<td align=\"center\">显示各个各代内存使用百分比 Displays a summary about garbage collection statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-printcompilation</td>\n<td align=\"center\">Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics.</td>\n</tr>\n</tbody></table>\n<p><strong>使用示例：</strong></p>\n<p><strong>jstat -class ： 类加载的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -class 2284<br>Loaded  Bytes  Unloaded  Bytes     Time<br> 30116 75021.8       26    51.4      86.72<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Loaded ：加载class的数量</li>\n<li>Bytes ： 加载class的大小（单位KB）</li>\n<li>Unloaded ：卸载class的数量</li>\n<li>Bytes： 卸载class的大小（单位KB）</li>\n<li>Time ： 加载和卸载class所耗费的时间</li>\n</ul>\n<p><strong>jstat -compiler ：HotSpt JIT编译器行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -compiler 2284<br>Compiled Failed Invalid   Time   FailedType FailedMethod<br>   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ：编译成功数</li>\n<li>Failed ： 编译失败数</li>\n<li>Invalid ： 无效数量</li>\n<li>FailedType ： 最后一次编译失效类型</li>\n<li>FailedMethod ：最后一次编译失效的方法</li>\n</ul>\n<p><strong>jstat -gc：垃圾回收堆的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gc 2284<br> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br>104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一个幸存区的总容量（KB）</li>\n<li>S1C ： 第二个幸存区的总容量（KB）</li>\n<li>S0U ： 第一个幸存区已使用的容量（KB）</li>\n<li>S1U ： 第二个幸存区已使用的容量（KB）</li>\n<li>EC ： 伊甸区的总容量（KB）</li>\n<li>EU ： 伊甸区已使用容量（KB）</li>\n<li>OC ： 老年区的总容量（KB）</li>\n<li>MC ： 元空间的总容量（KB）</li>\n<li>MU ： 元空间已使用容量（KB）</li>\n<li>CCSC ： 压缩类空间总容量（KB）</li>\n<li>CCSU ： 压缩类空间已使用总容量（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>YGCT ：新生代GC总耗费时间</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>jstat -gccapacity ： 各个回收区内存情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccapacity 2284<br> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC<br>1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0<br>59    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代占用的最小空间大小（KB）</li>\n<li>NGCMX ： 新生代占用的最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1C ：第二幸存区当前空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>OGCMN ： 老年区最小空间大小（KB）</li>\n<li>OGCMX ： 老年区最大空间大小（KB）</li>\n<li>OGC ： 老年区当前空间大小（KB）</li>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小大小（KB）</li>\n<li>CCSMX ： 压缩类最大空间大小（KB）</li>\n<li>CCSC ： 压缩类当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>jstat -gccause ：垃圾收集统计概述</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccause 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC<br>  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>LGCC ：最近一次GC原因</li>\n<li>GCC ： 当前GC原因</li>\n</ul>\n<p><strong>6 . gc -gcmetacapacity ：元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcmetacapacity 2284<br>   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT<br>       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小空间大小（KB）</li>\n<li>CCSMX ： 压缩类空间最大空间大小（KB）</li>\n<li>CCSC ： 压缩类空间当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT： 老年代GC耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>7 . jstat -gcnew ： 显示新生代统计信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnew 2284<br> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT<br>104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一幸存区总空间大小（KB）</li>\n<li>S1C ： 第二幸存区总空间大小（KB）</li>\n<li>S0U ： 第一幸存区已使用空间大小（KB）</li>\n<li>S1U ： 第二幸存区已使用空间大小（KB）</li>\n<li>TT ： 提升阈值(提升阈值)</li>\n<li>MTT ： 最大阈值</li>\n<li>DSS ： survivor区域大小 (KB)</li>\n<li>EC ： 伊甸区总空间大小（KB）</li>\n<li>EU ： 伊甸区已使用空间大小（KB）</li>\n</ul>\n<p><strong>8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnewcapacity 2284<br>  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC<br> 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代最小空间大小（KB）</li>\n<li>NGCMX ： 新生代最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0CMX ： 第一幸存区最大空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1CMX ： 第二幸存区最大空间大小（KB）</li>\n<li>S1C ： 第二幸存区当前空间大小（KB）</li>\n<li>ECMX ： 伊甸区最大空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>9 . jstat -gcold ： 统计老年代和元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcold 2284<br>   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT<br>251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MC ： 元空间总大小（KB）</li>\n<li>MU ： 元空间已使用大小（KB）</li>\n<li>CCSC ： 压缩类空间总大小（KB）</li>\n<li>CCSU ： 压缩类空间已使用大小（KB）</li>\n<li>OC ： 老年区空间总大小（KB）</li>\n<li>OU ： 老年区已使用大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>10 . jstat -gcoldcapacity ： 统计老年代内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcoldcapacity 2284<br>   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT<br>  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OGCMN ：老年区占用最小空间（KB）</li>\n<li>OGCMX ： 老年区占用最大空间（KB）</li>\n<li>OGC ： 当前老年区空间（KB）</li>\n<li>OC ： 当前老年区空间（KB）</li>\n<li>YGC ：新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>11 . jstat -gcutil ： 垃圾回收统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcutil 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT<br> 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>GCT ：GC总耗时</li>\n</ul>\n<p><strong>12 . jstat -printcompilation ： Hotspot方法编译统计情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -printcompilation 2284<br>Compiled  Size  Type Method<br>   21538    150    1 java/util/Collections reverse<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ： 已编译方法次数</li>\n<li>Size ： 最近一次方法编译大小</li>\n<li>Type ： 最近一次编译方法类型</li>\n<li>Method ： 最近一次编译方法</li>\n</ul>\n<p>参考：</p>\n<p>jstat：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html</a><br>jstat命令使用：<a href=\"https://www.cnblogs.com/lizhonghua34/p/7307139.html\">https://www.cnblogs.com/lizhonghua34/p/7307139.html</a><br>JVM调优命令-jstat：<a href=\"https://www.cnblogs.com/myna/p/7567769.html\">https://www.cnblogs.com/myna/p/7567769.html</a></p>\n<hr>\n<h2 id=\"jstack：查看某个Java进程内的线程堆栈信息\"><a href=\"#jstack：查看某个Java进程内的线程堆栈信息\" class=\"headerlink\" title=\"jstack：查看某个Java进程内的线程堆栈信息\"></a>jstack：查看某个Java进程内的线程堆栈信息</h2><p>参考原文：<a href=\"https://www.jianshu.com/p/8d5782bc596e\">https://www.jianshu.com/p/8d5782bc596e</a></p>\n<p>查看JAVA进程当中，线程内容。</p>\n<p><strong>jstack用法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">/opt/java8/bin/jstack<br><br>Usage:<br>    jstack [-l] &lt;pid&gt;<br>        (to connect to running process) 连接活动线程<br>    jstack -F [-m] [-l] &lt;pid&gt;<br>        (to connect to a hung process) 连接阻塞线程<br>    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;<br>        (to connect to a core file) 连接dump的文件<br>    jstack [-m] [-l] [<span class=\"hljs-symbol\">server_id@</span>]&lt;remote server IP or hostname&gt;<br>        (to connect to a remote debug server) 连接远程服务器<br><br>Options:<br>    -F  to force a thread dump. Use <span class=\"hljs-keyword\">when</span> jstack &lt;pid&gt; does not respond (process <span class=\"hljs-keyword\">is</span> hung)<br>    -m  to print both java and native frames (mixed mode)<br>    -l  long listing. Prints additional information about locks<br>    -h or -help to print <span class=\"hljs-keyword\">this</span> help message<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack查看输出</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367<br><br>2019-06-25 15:04:46<br>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):<br><br><span class=\"hljs-string\">&quot;Attach Listener&quot;</span> <span class=\"hljs-comment\">#453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]</span><br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;grpc-default-executor-263&quot;</span> <span class=\"hljs-comment\">#452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]</span><br>   java.lang.Thread.State: TIMED_WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000007400243f0&gt; (a java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>)<br>        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.awaitFulfill(SynchronousQueue.java:460)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.transfer(SynchronousQueue.java:362)<br>        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;http-bio-8080-exec-10&quot;</span> <span class=\"hljs-comment\">#235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x0000000743d26638&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)<br>        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at org.apache.tomcat.util.threads.TaskThread<span class=\"hljs-variable\">$WrappingRunnable</span>.run(TaskThread.java:61)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack统计线程数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367 | grep <span class=\"hljs-string\">&#x27;java.lang.Thread.State&#x27;</span> | <span class=\"hljs-built_in\">wc</span> -l<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测死锁</strong></p>\n<p><em>死锁代码</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeathLock</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock1 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock2 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deathLock</span>()</span> &#123;<br>        Thread t1 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread t2 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        t1.setName(<span class=\"hljs-string\">&quot;thread1&quot;</span>);<br>        t2.setName(<span class=\"hljs-string\">&quot;thread2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span> &#123;<br>        deathLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>死锁日志</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;mythread2&quot;</span> <span class=\"hljs-comment\">#12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d640&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><span class=\"hljs-string\">&quot;mythread1&quot;</span> <span class=\"hljs-comment\">#11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d610&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><br>Found one Java-level deadlock:<br>=============================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread1&quot;</span><br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread2&quot;</span><br><br>Java stack information <span class=\"hljs-keyword\">for</span> the threads listed above:<br>===================================================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>Found 1 deadlock.<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测cpu高</strong></p>\n<p><em>步骤一：查看cpu占用高进程</em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">top<br><br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9472968</span>k used,  <span class=\"hljs-number\">6860676</span>k free,   <span class=\"hljs-number\">165616</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6665292</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     <br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S <span class=\"hljs-number\">100.7</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">47</span>:<span class=\"hljs-number\">53.80</span> java       <br> <span class=\"hljs-number\">1552</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">121</span>m  <span class=\"hljs-number\">13</span>m <span class=\"hljs-number\">8524</span> S  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">0.1</span>  <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">37.75</span> AliYunDun   <br> <span class=\"hljs-number\">3581</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">9750</span>m <span class=\"hljs-number\">2.0</span>g  <span class=\"hljs-number\">13</span>m S  <span class=\"hljs-number\">0.7</span> <span class=\"hljs-number\">12.9</span> <span class=\"hljs-number\">298</span>:<span class=\"hljs-number\">30.20</span> java        <br>    <span class=\"hljs-number\">1</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">19360</span> <span class=\"hljs-number\">1612</span> <span class=\"hljs-number\">1308</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.81</span> init        <br>    <span class=\"hljs-number\">2</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> kthreadd    <br>    <span class=\"hljs-number\">3</span> root      RT   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.14</span> migration/<span class=\"hljs-number\">0</span> <br></code></pre></td></tr></table></figure>\n\n<p><em>步骤二：查看cpu占用高线程</em></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">top</span> -H -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">17850</span><br><br><span class=\"hljs-attribute\">top</span> - <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">43</span>:<span class=\"hljs-number\">15</span> up <span class=\"hljs-number\">5</span> days,  <span class=\"hljs-number\">7</span>:<span class=\"hljs-number\">31</span>,  <span class=\"hljs-number\">1</span> user,  load average: <span class=\"hljs-number\">0.99</span>, <span class=\"hljs-number\">0.97</span>, <span class=\"hljs-number\">0.91</span><br>Tasks:  <span class=\"hljs-number\">32</span> total,   <span class=\"hljs-number\">1</span> running,  <span class=\"hljs-number\">31</span> sleeping,   <span class=\"hljs-number\">0</span> stopped,   <span class=\"hljs-number\">0</span> zombie<br><span class=\"hljs-built_in\">Cpu</span>(s):  <span class=\"hljs-number\">3.7%</span>us,  <span class=\"hljs-number\">8.9%</span>sy,  <span class=\"hljs-number\">0.0%</span>ni, <span class=\"hljs-number\">87.4%</span>id,  <span class=\"hljs-number\">0.0%</span>wa,  <span class=\"hljs-number\">0.0%</span>hi,  <span class=\"hljs-number\">0.0%</span>si,  <span class=\"hljs-number\">0.0%</span>st<br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9592504</span>k used,  <span class=\"hljs-number\">6741140</span>k free,   <span class=\"hljs-number\">165700</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6781620</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br><span class=\"hljs-number\">17880</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m R <span class=\"hljs-number\">99.9</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">47.43</span> java<br><span class=\"hljs-number\">17856</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.3</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.08</span> java<br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> java<br><span class=\"hljs-number\">17851</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.23</span> java<br><span class=\"hljs-number\">17852</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.09</span> java<br><span class=\"hljs-number\">17853</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.12</span> java<br><span class=\"hljs-number\">17854</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.07</span> java<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤三：转换线程ID</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">&quot;%x\\n&quot;</span> 17880          <br>45d8<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤四：定位cpu占用线程</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">jstack 17850|grep 45d8 -A 30<br><span class=\"hljs-string\">&quot;pool-1-thread-11&quot;</span> <span class=\"hljs-comment\">#20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]</span><br>   java.lang.Thread.State: RUNNABLE<br>        at java.io.FileOutputStream.writeBytes(Native Method)<br>        at java.io.FileOutputStream.write(FileOutputStream.java:326)<br>        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)<br>        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)<br>        - locked &lt;0x00000006c6c2e708&gt; (a java.io.BufferedOutputStream)<br>        at java.io.PrintStream.write(PrintStream.java:482)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)<br>        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)<br>        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)<br>        - locked &lt;0x00000006c6c26620&gt; (a java.io.OutputStreamWriter)<br>        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)<br>        at java.io.PrintStream.write(PrintStream.java:527)<br>        - eliminated &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at java.io.PrintStream.<span class=\"hljs-built_in\">print</span>(PrintStream.java:597)<br>        at java.io.PrintStream.println(PrintStream.java:736)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at com.demo.guava.HardTask.call(HardTask.java:18)<br>        at com.demo.guava.HardTask.call(HardTask.java:9)<br>        at java.util.concurrent.FutureTask.run(FutureTask.java:266)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br><span class=\"hljs-string\">&quot;pool-1-thread-10&quot;</span> <span class=\"hljs-comment\">#19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000006c6c14178&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Jmap\"><a href=\"#Jmap\" class=\"headerlink\" title=\"Jmap\"></a>Jmap</h2><p>原文参考：<a href=\"https://www.jianshu.com/p/c52ffaca40a5\">https://www.jianshu.com/p/c52ffaca40a5</a></p>\n<blockquote>\n<p>jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的<code>共享对象内存映射或堆内存细节</code>。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍<code>Java的堆Dump</code>以及jmap命令</p>\n</blockquote>\n<h3 id=\"什么是堆Dump\"><a href=\"#什么是堆Dump\" class=\"headerlink\" title=\"什么是堆Dump\"></a>什么是堆Dump</h3><h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p><a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java虚拟机的内存组成以及堆内存介绍</a><br> <a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java GC工作原理</a></p>\n<p>常见内存错误：</p>\n<blockquote>\n<p>outOfMemoryError 年老代内存不足。<br> outOfMemoryError:PermGen Space 永久代内存不足。<br> outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。</p>\n</blockquote>\n<p><strong>jmap 用法摘要</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Usage:<br>    jmap [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jmap [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br><span class=\"hljs-built_in\">where</span> &lt;option&gt; is one of:<br>    &lt;none&gt;               to <span class=\"hljs-built_in\">print</span> same info as Solaris pmap<br>    -heap                to <span class=\"hljs-built_in\">print</span> java heap summary<br>    -histo[:live]        to <span class=\"hljs-built_in\">print</span> histogram of java object heap; <span class=\"hljs-keyword\">if</span> the <span class=\"hljs-string\">&quot;live&quot;</span><br>                         suboption is specified, only count live objects<br>    -permstat            to <span class=\"hljs-built_in\">print</span> permanent generation statistics<br>    -finalizerinfo       to <span class=\"hljs-built_in\">print</span> information on objects awaiting finalization<br>    -dump:&lt;dump-options&gt; to dump java heap <span class=\"hljs-keyword\">in</span> hprof binary format<br>                         dump-options:<br>                           live         dump only live objects; <span class=\"hljs-keyword\">if</span> not specified,<br>                                        all objects <span class=\"hljs-keyword\">in</span> the heap are dumped.<br>                           format=b     binary format<br>                           file=&lt;file&gt;  dump heap to &lt;file&gt;<br>                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;<br>    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo<br>                         to force a heap dump or histogram when &lt;pid&gt; does not<br>                         respond. The <span class=\"hljs-string\">&quot;live&quot;</span> suboption is not supported<br>                         <span class=\"hljs-keyword\">in</span> this mode.<br>    -h | -<span class=\"hljs-built_in\">help</span>           to <span class=\"hljs-built_in\">print</span> this <span class=\"hljs-built_in\">help</span> message<br>    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>指定进程号(pid)的进程 jmap [ option ]</li>\n<li>指定核心文件 jmap [ option ]</li>\n<li>指定远程调试服务器 jmap [ option ] [server-id@]</li>\n</ul>\n<p><strong>参数：</strong></p>\n<ul>\n<li>option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</li>\n<li>pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</li>\n<li>executable 产生核心dump的Java可执行文件。</li>\n<li>core 需要打印配置信息的核心文件。</li>\n<li>remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。</li>\n<li>server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</li>\n</ul>\n<p><strong>选项:</strong></p>\n<ul>\n<li><no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。</li>\n<li>-dump:[live,]format&#x3D;b,file&#x3D;<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。</li>\n<li>-finalizerinfo 打印等待终结的对象信息。</li>\n<li>-heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。</li>\n<li>-histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。</li>\n<li>-permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</li>\n<li>-F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。</li>\n<li>-h 打印帮助信息。</li>\n<li>-help 打印帮助信息。</li>\n<li>-J<flag> 指定传递给运行jmap的JVM的参数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p><em>查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Attaching to process ID 31846, please <span class=\"hljs-built_in\">wait</span>...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.71-b01<br><br>using thread-local object allocation.<br>Parallel GC with 4 thread(s)//GC 方式<br><br>Heap Configuration: //堆内存初始化配置<br>   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)<br>   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)<br>   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小<br>   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小<br>   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小<br>   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小<br>   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率<br>   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 <br>   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小<br>   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小<br>   G1HeapRegionSize = 0 (0.0MB)<br><br>Heap Usage://堆内存使用情况<br>PS Young Generation<br>Eden Space://Eden区内存分布<br>   capacity = 33030144 (31.5MB)//Eden区总容量<br>   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用<br>   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量<br>   4.614088270399305% used //Eden区使用比率<br>From Space:  //其中一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>To Space:  //另一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>PS Old Generation //当前的Old区内存分布<br>   capacity = 86507520 (82.5MB)<br>   used     = 0 (0.0MB)<br>   free     = 86507520 (82.5MB)<br>   0.0% used<br>PS Perm Generation//当前的 “永生代” 内存分布<br>   capacity = 22020096 (21.0MB)<br>   used     = 2496528 (2.3808746337890625MB)<br>   free     = 19523568 (18.619125366210938MB)<br>   11.337498256138392% used<br><br>670 interned Strings occupying 43720 bytes.<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">num     <span class=\"hljs-comment\">#instances         #bytes  class name</span><br>编号     个数                字节     类名<br>----------------------------------------------<br>   1:             7        1322080  [I<br>   2:          5603         722368  &lt;methodKlass&gt;<br>   3:          5603         641944  &lt;constMethodKlass&gt;<br>   4:         34022         544352  java.lang.Integer<br>   5:           371         437208  &lt;constantPoolKlass&gt;<br>   6:           336         270624  &lt;constantPoolCacheKlass&gt;<br>   7:           371         253816  &lt;instanceKlassKlass&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>将内存使用的详细情况输出到文件，执行命令： jmap -dump:format&#x3D;b,file&#x3D;heapDump 6900</strong></p>\n<p>然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：<a href=\"http://localhost:5000/\">http://localhost:5000/</a> 查看详细信息</p>\n<blockquote>\n<p>这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。<br> 2.要制作堆Dump可以直接使用jvm自带的jmap命令<br> 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。<br> 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。<br> 5.也可以使用 jmap -dump:format&#x3D;b,file&#x3D;<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容<br> 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。</p>\n<h3 id=\"出现问题：\"><a href=\"#出现问题：\" class=\"headerlink\" title=\"出现问题：\"></a>出现问题：</h3><ol>\n<li>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process<br> 在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process，这是oracla文档中提到的一个bug:<a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：</a></li>\n</ol>\n<ul>\n<li>echo 0 | sudo tee &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;yama&#x2F;ptrace_scope 该方法在下次重启前有效。</li>\n<li>永久有效方法 sudo vi &#x2F;etc&#x2F;sysctl.d&#x2F;10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope &#x3D; 1 修改为: kernel.yama.ptrace_scope &#x3D; 0 重启系统，使修改生效。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM常用的命令\"><a href=\"#JVM常用的命令\" class=\"headerlink\" title=\"JVM常用的命令\"></a>JVM常用的命令</h1><h2 id=\"jps-：基础工具\"><a href=\"#jps-：基础工具\" class=\"headerlink\" title=\"jps ：基础工具\"></a>jps ：基础工具</h2><p>查看JAVA进程PID。</p>\n<p><code>jps</code> 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。</p>\n<p><code>jps</code> 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 <code>ps</code> 命令。</p>\n<p><strong>jps 常用参数</strong></p>\n<ul>\n<li><code>jps -l</code> 如果是以 class 方式运行，会显示进程的主类 <code>main.class</code> 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名</li>\n</ul>\n<p>第一列的数字就是进程的 <code>pid</code></p>\n<ul>\n<li><code>jps -v</code> 输出传递给 JVM 的参数，<code>v</code> 表示虚拟机，<code>jps -vl</code> 比较常见的组合；</li>\n<li><code>jps -V</code> 大写 <code>v</code>，表示通过文件传递给 JVM 的参数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Copy# michael @ Michael-MBP in ~ [<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">37</span>:<span class=\"hljs-number\">59</span>]<br>$ jps -v |grep Mybatis<br><span class=\"hljs-number\">8005</span> MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">53364</span>,suspend=y,server=n -XX:TieredStopAtLevel=<span class=\"hljs-number\">1</span> -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=<span class=\"hljs-number\">53363</span> -Dcom.sun.management.jmxremote.authenticate=<span class=\"hljs-literal\">false</span> -Dcom.sun.management.jmxremote.ssl=<span class=\"hljs-literal\">false</span> -Djava.rmi.server.hostname=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=<span class=\"hljs-literal\">true</span> -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018<span class=\"hljs-number\">.2</span>/captureAgent/debugger-agent.jar=file:/<span class=\"hljs-keyword\">private</span>/<span class=\"hljs-keyword\">var</span>/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-<span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>jps -m</code> 输出传递给 <code>main.class</code> 方法的参数，实用的一个命令，<code>jps -ml</code> 比较实用的组合，会显示包名&#x2F;类名&#x2F;参数</li>\n<li><code>jps -q</code> 只输出进程的 pid</li>\n</ul>\n<p>jps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。</p>\n<p>有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 <code>jps -v</code> 查看进程的jvm参数情况。</p>\n<hr>\n<h2 id=\"jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\"><a href=\"#jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\" class=\"headerlink\" title=\"jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\"></a>jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、</h2><p>参考原文：<a href=\"https://blog.csdn.net/yx0628/article/details/80958488\">https://blog.csdn.net/yx0628/article/details/80958488</a></p>\n<p><code>jinfo -flag initilHeapSize $&#123;PID&#125; </code>查看某个<strong>JAVA进程</strong>中，JVM的参数值是什么。</p>\n<p><code>jinfo -flag $&#123;PID&#125; </code> 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo --help<br>Usage:<br>    jinfo [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jinfo [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br>where &lt;option&gt; is one of:<br>    -flag &lt;name&gt;         to print the value of the named VM flag<br>    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag<br>    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value<br>    -flags               to print VM flags<br>    -sysprops            to print Java system properties<br>    &lt;no option&gt;          to print both of the above<br>    -h | -help           to print this help message<br></code></pre></td></tr></table></figure>\n\n<p>我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jps<br>43520 Test<br>35900 Jps<br></code></pre></td></tr></table></figure>\n\n<p>查看 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flags 43520<br>Attaching to process ID 43520, please wait...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.45-b08<br><br>-Dfile.encoding=GBK<br></code></pre></td></tr></table></figure>\n\n<p>查看系统参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -sysflags 43520<br></code></pre></td></tr></table></figure>\n\n<p>虚拟机的参数可以通过这个命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintFlagsFinal -version | grep manageable<br></code></pre></td></tr></table></figure>\n\n<p>除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag +PrintGC 43520<br>jinfo -flag +PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>关闭 GC 日志的话同理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag -PrintGC 43520<br>jinfo -flag -PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>查看是否开启 GC 日志的打印：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag PrintGC 43520<br>jinfo -flag PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flag PrintGC 43520<br>-XX:-PrintGC<br><br>[root@admin ~]# jinfo -flag PrintGCDetails 43520<br>-XX:-PrintGCDetails<br></code></pre></td></tr></table></figure>\n\n<p>常用 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-Xms：初始堆大小，默认为物理内存的1/64(&lt;1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制<br>-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制<br>-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。<br>-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。<br>-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:&quot;-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。<br>-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。<br>-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\"><a href=\"#jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\" class=\"headerlink\" title=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\"></a>jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控</h2><p>原文参考：<a href=\"https://blog.csdn.net/cockroach02/article/details/82670500\">https://blog.csdn.net/cockroach02/article/details/82670500</a></p>\n<p>查看JVM中相关性能的信息。</p>\n<p>jstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java&#x2F;bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。</p>\n<blockquote>\n<p>类装载信息：<code>jstat -class $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -class $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -class $&#123;PID&#125; 1000 10</code>。打印出过去10秒类加载的数据。</p>\n</blockquote>\n<blockquote>\n<p>GC相关的情况：<code>jstat -gc $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -gc $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -gc $&#123;PID&#125; 1000 10</code>。打印出过去10秒GC的数据。</p>\n</blockquote>\n<p><strong>参数说明：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -help<br>Usage: jstat -help|-options<br>       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br><br>Definitions:<br>  &lt;option&gt;      An option reported by the -options option<br>  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:<br>                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]<br>                Where &lt;lvmid&gt; is the local vm identifier for the target<br>                Java virtual machine, typically a process id; &lt;hostname&gt; is<br>                the name of the host running the target Java virtual machine;<br>                and &lt;port&gt; is the port number for the rmiregistry on the<br>                target host. See the jvmstat documentation for a more complete<br>                description of the Virtual Machine Identifier.<br>  &lt;lines&gt;       Number of samples between header lines.<br>  &lt;interval&gt;    Sampling interval. The following forms are allowed:<br>                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]<br>                Where &lt;n&gt; is an integer and the suffix specifies the units as<br>                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.<br>  &lt;count&gt;       Number of samples to take before terminating.<br>  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.<br></code></pre></td></tr></table></figure>\n\n<p>由以上可知，jstat的命令的格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br></code></pre></td></tr></table></figure>\n\n<p>我们可以通过jstat -options查看可以支持的具体参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -options<br>-class<br>-compiler<br>-gc<br>-gccapacity<br>-gccause<br>-gcmetacapacity<br>-gcnew<br>-gcnewcapacity<br>-gcold<br>-gcoldcapacity<br>-gcutil<br>-printcompilation<br></code></pre></td></tr></table></figure>\n\n<p><strong>Option参数说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-class</td>\n<td align=\"center\">类加载的行为统计 Displays statistics about the behavior of the class loader.</td>\n</tr>\n<tr>\n<td align=\"center\">-compiler</td>\n<td align=\"center\">HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler.</td>\n</tr>\n<tr>\n<td align=\"center\">-gc</td>\n<td align=\"center\">垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccapacity</td>\n<td align=\"center\">各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccause</td>\n<td align=\"center\">垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcmetacapacity</td>\n<td align=\"center\">统计元空间使用情况 Displays statistics about the sizes of the metaspace.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnew</td>\n<td align=\"center\">显示新生代统计信息 Displays statistics of the behavior of the new generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnewcapacity</td>\n<td align=\"center\">统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcold</td>\n<td align=\"center\">统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcoldcapacity</td>\n<td align=\"center\">统计老年代内存使用情况 Displays statistics about the sizes of the old generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcutil</td>\n<td align=\"center\">显示各个各代内存使用百分比 Displays a summary about garbage collection statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-printcompilation</td>\n<td align=\"center\">Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics.</td>\n</tr>\n</tbody></table>\n<p><strong>使用示例：</strong></p>\n<p><strong>jstat -class ： 类加载的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -class 2284<br>Loaded  Bytes  Unloaded  Bytes     Time<br> 30116 75021.8       26    51.4      86.72<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Loaded ：加载class的数量</li>\n<li>Bytes ： 加载class的大小（单位KB）</li>\n<li>Unloaded ：卸载class的数量</li>\n<li>Bytes： 卸载class的大小（单位KB）</li>\n<li>Time ： 加载和卸载class所耗费的时间</li>\n</ul>\n<p><strong>jstat -compiler ：HotSpt JIT编译器行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -compiler 2284<br>Compiled Failed Invalid   Time   FailedType FailedMethod<br>   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ：编译成功数</li>\n<li>Failed ： 编译失败数</li>\n<li>Invalid ： 无效数量</li>\n<li>FailedType ： 最后一次编译失效类型</li>\n<li>FailedMethod ：最后一次编译失效的方法</li>\n</ul>\n<p><strong>jstat -gc：垃圾回收堆的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gc 2284<br> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br>104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一个幸存区的总容量（KB）</li>\n<li>S1C ： 第二个幸存区的总容量（KB）</li>\n<li>S0U ： 第一个幸存区已使用的容量（KB）</li>\n<li>S1U ： 第二个幸存区已使用的容量（KB）</li>\n<li>EC ： 伊甸区的总容量（KB）</li>\n<li>EU ： 伊甸区已使用容量（KB）</li>\n<li>OC ： 老年区的总容量（KB）</li>\n<li>MC ： 元空间的总容量（KB）</li>\n<li>MU ： 元空间已使用容量（KB）</li>\n<li>CCSC ： 压缩类空间总容量（KB）</li>\n<li>CCSU ： 压缩类空间已使用总容量（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>YGCT ：新生代GC总耗费时间</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>jstat -gccapacity ： 各个回收区内存情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccapacity 2284<br> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC<br>1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0<br>59    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代占用的最小空间大小（KB）</li>\n<li>NGCMX ： 新生代占用的最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1C ：第二幸存区当前空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>OGCMN ： 老年区最小空间大小（KB）</li>\n<li>OGCMX ： 老年区最大空间大小（KB）</li>\n<li>OGC ： 老年区当前空间大小（KB）</li>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小大小（KB）</li>\n<li>CCSMX ： 压缩类最大空间大小（KB）</li>\n<li>CCSC ： 压缩类当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>jstat -gccause ：垃圾收集统计概述</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccause 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC<br>  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>LGCC ：最近一次GC原因</li>\n<li>GCC ： 当前GC原因</li>\n</ul>\n<p><strong>6 . gc -gcmetacapacity ：元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcmetacapacity 2284<br>   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT<br>       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小空间大小（KB）</li>\n<li>CCSMX ： 压缩类空间最大空间大小（KB）</li>\n<li>CCSC ： 压缩类空间当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT： 老年代GC耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>7 . jstat -gcnew ： 显示新生代统计信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnew 2284<br> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT<br>104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一幸存区总空间大小（KB）</li>\n<li>S1C ： 第二幸存区总空间大小（KB）</li>\n<li>S0U ： 第一幸存区已使用空间大小（KB）</li>\n<li>S1U ： 第二幸存区已使用空间大小（KB）</li>\n<li>TT ： 提升阈值(提升阈值)</li>\n<li>MTT ： 最大阈值</li>\n<li>DSS ： survivor区域大小 (KB)</li>\n<li>EC ： 伊甸区总空间大小（KB）</li>\n<li>EU ： 伊甸区已使用空间大小（KB）</li>\n</ul>\n<p><strong>8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnewcapacity 2284<br>  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC<br> 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代最小空间大小（KB）</li>\n<li>NGCMX ： 新生代最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0CMX ： 第一幸存区最大空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1CMX ： 第二幸存区最大空间大小（KB）</li>\n<li>S1C ： 第二幸存区当前空间大小（KB）</li>\n<li>ECMX ： 伊甸区最大空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>9 . jstat -gcold ： 统计老年代和元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcold 2284<br>   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT<br>251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MC ： 元空间总大小（KB）</li>\n<li>MU ： 元空间已使用大小（KB）</li>\n<li>CCSC ： 压缩类空间总大小（KB）</li>\n<li>CCSU ： 压缩类空间已使用大小（KB）</li>\n<li>OC ： 老年区空间总大小（KB）</li>\n<li>OU ： 老年区已使用大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>10 . jstat -gcoldcapacity ： 统计老年代内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcoldcapacity 2284<br>   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT<br>  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OGCMN ：老年区占用最小空间（KB）</li>\n<li>OGCMX ： 老年区占用最大空间（KB）</li>\n<li>OGC ： 当前老年区空间（KB）</li>\n<li>OC ： 当前老年区空间（KB）</li>\n<li>YGC ：新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>11 . jstat -gcutil ： 垃圾回收统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcutil 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT<br> 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>GCT ：GC总耗时</li>\n</ul>\n<p><strong>12 . jstat -printcompilation ： Hotspot方法编译统计情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -printcompilation 2284<br>Compiled  Size  Type Method<br>   21538    150    1 java/util/Collections reverse<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ： 已编译方法次数</li>\n<li>Size ： 最近一次方法编译大小</li>\n<li>Type ： 最近一次编译方法类型</li>\n<li>Method ： 最近一次编译方法</li>\n</ul>\n<p>参考：</p>\n<p>jstat：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html</a><br>jstat命令使用：<a href=\"https://www.cnblogs.com/lizhonghua34/p/7307139.html\">https://www.cnblogs.com/lizhonghua34/p/7307139.html</a><br>JVM调优命令-jstat：<a href=\"https://www.cnblogs.com/myna/p/7567769.html\">https://www.cnblogs.com/myna/p/7567769.html</a></p>\n<hr>\n<h2 id=\"jstack：查看某个Java进程内的线程堆栈信息\"><a href=\"#jstack：查看某个Java进程内的线程堆栈信息\" class=\"headerlink\" title=\"jstack：查看某个Java进程内的线程堆栈信息\"></a>jstack：查看某个Java进程内的线程堆栈信息</h2><p>参考原文：<a href=\"https://www.jianshu.com/p/8d5782bc596e\">https://www.jianshu.com/p/8d5782bc596e</a></p>\n<p>查看JAVA进程当中，线程内容。</p>\n<p><strong>jstack用法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">/opt/java8/bin/jstack<br><br>Usage:<br>    jstack [-l] &lt;pid&gt;<br>        (to connect to running process) 连接活动线程<br>    jstack -F [-m] [-l] &lt;pid&gt;<br>        (to connect to a hung process) 连接阻塞线程<br>    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;<br>        (to connect to a core file) 连接dump的文件<br>    jstack [-m] [-l] [<span class=\"hljs-symbol\">server_id@</span>]&lt;remote server IP or hostname&gt;<br>        (to connect to a remote debug server) 连接远程服务器<br><br>Options:<br>    -F  to force a thread dump. Use <span class=\"hljs-keyword\">when</span> jstack &lt;pid&gt; does not respond (process <span class=\"hljs-keyword\">is</span> hung)<br>    -m  to print both java and native frames (mixed mode)<br>    -l  long listing. Prints additional information about locks<br>    -h or -help to print <span class=\"hljs-keyword\">this</span> help message<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack查看输出</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367<br><br>2019-06-25 15:04:46<br>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):<br><br><span class=\"hljs-string\">&quot;Attach Listener&quot;</span> <span class=\"hljs-comment\">#453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]</span><br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;grpc-default-executor-263&quot;</span> <span class=\"hljs-comment\">#452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]</span><br>   java.lang.Thread.State: TIMED_WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000007400243f0&gt; (a java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>)<br>        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.awaitFulfill(SynchronousQueue.java:460)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.transfer(SynchronousQueue.java:362)<br>        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;http-bio-8080-exec-10&quot;</span> <span class=\"hljs-comment\">#235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x0000000743d26638&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)<br>        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at org.apache.tomcat.util.threads.TaskThread<span class=\"hljs-variable\">$WrappingRunnable</span>.run(TaskThread.java:61)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack统计线程数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367 | grep <span class=\"hljs-string\">&#x27;java.lang.Thread.State&#x27;</span> | <span class=\"hljs-built_in\">wc</span> -l<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测死锁</strong></p>\n<p><em>死锁代码</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeathLock</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock1 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock2 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deathLock</span>()</span> &#123;<br>        Thread t1 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread t2 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        t1.setName(<span class=\"hljs-string\">&quot;thread1&quot;</span>);<br>        t2.setName(<span class=\"hljs-string\">&quot;thread2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span> &#123;<br>        deathLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>死锁日志</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;mythread2&quot;</span> <span class=\"hljs-comment\">#12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d640&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><span class=\"hljs-string\">&quot;mythread1&quot;</span> <span class=\"hljs-comment\">#11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d610&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><br>Found one Java-level deadlock:<br>=============================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread1&quot;</span><br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread2&quot;</span><br><br>Java stack information <span class=\"hljs-keyword\">for</span> the threads listed above:<br>===================================================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>Found 1 deadlock.<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测cpu高</strong></p>\n<p><em>步骤一：查看cpu占用高进程</em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">top<br><br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9472968</span>k used,  <span class=\"hljs-number\">6860676</span>k free,   <span class=\"hljs-number\">165616</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6665292</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     <br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S <span class=\"hljs-number\">100.7</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">47</span>:<span class=\"hljs-number\">53.80</span> java       <br> <span class=\"hljs-number\">1552</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">121</span>m  <span class=\"hljs-number\">13</span>m <span class=\"hljs-number\">8524</span> S  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">0.1</span>  <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">37.75</span> AliYunDun   <br> <span class=\"hljs-number\">3581</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">9750</span>m <span class=\"hljs-number\">2.0</span>g  <span class=\"hljs-number\">13</span>m S  <span class=\"hljs-number\">0.7</span> <span class=\"hljs-number\">12.9</span> <span class=\"hljs-number\">298</span>:<span class=\"hljs-number\">30.20</span> java        <br>    <span class=\"hljs-number\">1</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">19360</span> <span class=\"hljs-number\">1612</span> <span class=\"hljs-number\">1308</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.81</span> init        <br>    <span class=\"hljs-number\">2</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> kthreadd    <br>    <span class=\"hljs-number\">3</span> root      RT   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.14</span> migration/<span class=\"hljs-number\">0</span> <br></code></pre></td></tr></table></figure>\n\n<p><em>步骤二：查看cpu占用高线程</em></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">top</span> -H -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">17850</span><br><br><span class=\"hljs-attribute\">top</span> - <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">43</span>:<span class=\"hljs-number\">15</span> up <span class=\"hljs-number\">5</span> days,  <span class=\"hljs-number\">7</span>:<span class=\"hljs-number\">31</span>,  <span class=\"hljs-number\">1</span> user,  load average: <span class=\"hljs-number\">0.99</span>, <span class=\"hljs-number\">0.97</span>, <span class=\"hljs-number\">0.91</span><br>Tasks:  <span class=\"hljs-number\">32</span> total,   <span class=\"hljs-number\">1</span> running,  <span class=\"hljs-number\">31</span> sleeping,   <span class=\"hljs-number\">0</span> stopped,   <span class=\"hljs-number\">0</span> zombie<br><span class=\"hljs-built_in\">Cpu</span>(s):  <span class=\"hljs-number\">3.7%</span>us,  <span class=\"hljs-number\">8.9%</span>sy,  <span class=\"hljs-number\">0.0%</span>ni, <span class=\"hljs-number\">87.4%</span>id,  <span class=\"hljs-number\">0.0%</span>wa,  <span class=\"hljs-number\">0.0%</span>hi,  <span class=\"hljs-number\">0.0%</span>si,  <span class=\"hljs-number\">0.0%</span>st<br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9592504</span>k used,  <span class=\"hljs-number\">6741140</span>k free,   <span class=\"hljs-number\">165700</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6781620</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br><span class=\"hljs-number\">17880</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m R <span class=\"hljs-number\">99.9</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">47.43</span> java<br><span class=\"hljs-number\">17856</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.3</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.08</span> java<br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> java<br><span class=\"hljs-number\">17851</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.23</span> java<br><span class=\"hljs-number\">17852</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.09</span> java<br><span class=\"hljs-number\">17853</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.12</span> java<br><span class=\"hljs-number\">17854</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.07</span> java<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤三：转换线程ID</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">&quot;%x\\n&quot;</span> 17880          <br>45d8<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤四：定位cpu占用线程</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">jstack 17850|grep 45d8 -A 30<br><span class=\"hljs-string\">&quot;pool-1-thread-11&quot;</span> <span class=\"hljs-comment\">#20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]</span><br>   java.lang.Thread.State: RUNNABLE<br>        at java.io.FileOutputStream.writeBytes(Native Method)<br>        at java.io.FileOutputStream.write(FileOutputStream.java:326)<br>        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)<br>        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)<br>        - locked &lt;0x00000006c6c2e708&gt; (a java.io.BufferedOutputStream)<br>        at java.io.PrintStream.write(PrintStream.java:482)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)<br>        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)<br>        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)<br>        - locked &lt;0x00000006c6c26620&gt; (a java.io.OutputStreamWriter)<br>        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)<br>        at java.io.PrintStream.write(PrintStream.java:527)<br>        - eliminated &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at java.io.PrintStream.<span class=\"hljs-built_in\">print</span>(PrintStream.java:597)<br>        at java.io.PrintStream.println(PrintStream.java:736)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at com.demo.guava.HardTask.call(HardTask.java:18)<br>        at com.demo.guava.HardTask.call(HardTask.java:9)<br>        at java.util.concurrent.FutureTask.run(FutureTask.java:266)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br><span class=\"hljs-string\">&quot;pool-1-thread-10&quot;</span> <span class=\"hljs-comment\">#19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000006c6c14178&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Jmap\"><a href=\"#Jmap\" class=\"headerlink\" title=\"Jmap\"></a>Jmap</h2><p>原文参考：<a href=\"https://www.jianshu.com/p/c52ffaca40a5\">https://www.jianshu.com/p/c52ffaca40a5</a></p>\n<blockquote>\n<p>jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的<code>共享对象内存映射或堆内存细节</code>。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍<code>Java的堆Dump</code>以及jmap命令</p>\n</blockquote>\n<h3 id=\"什么是堆Dump\"><a href=\"#什么是堆Dump\" class=\"headerlink\" title=\"什么是堆Dump\"></a>什么是堆Dump</h3><h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p><a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java虚拟机的内存组成以及堆内存介绍</a><br> <a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java GC工作原理</a></p>\n<p>常见内存错误：</p>\n<blockquote>\n<p>outOfMemoryError 年老代内存不足。<br> outOfMemoryError:PermGen Space 永久代内存不足。<br> outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。</p>\n</blockquote>\n<p><strong>jmap 用法摘要</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Usage:<br>    jmap [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jmap [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br><span class=\"hljs-built_in\">where</span> &lt;option&gt; is one of:<br>    &lt;none&gt;               to <span class=\"hljs-built_in\">print</span> same info as Solaris pmap<br>    -heap                to <span class=\"hljs-built_in\">print</span> java heap summary<br>    -histo[:live]        to <span class=\"hljs-built_in\">print</span> histogram of java object heap; <span class=\"hljs-keyword\">if</span> the <span class=\"hljs-string\">&quot;live&quot;</span><br>                         suboption is specified, only count live objects<br>    -permstat            to <span class=\"hljs-built_in\">print</span> permanent generation statistics<br>    -finalizerinfo       to <span class=\"hljs-built_in\">print</span> information on objects awaiting finalization<br>    -dump:&lt;dump-options&gt; to dump java heap <span class=\"hljs-keyword\">in</span> hprof binary format<br>                         dump-options:<br>                           live         dump only live objects; <span class=\"hljs-keyword\">if</span> not specified,<br>                                        all objects <span class=\"hljs-keyword\">in</span> the heap are dumped.<br>                           format=b     binary format<br>                           file=&lt;file&gt;  dump heap to &lt;file&gt;<br>                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;<br>    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo<br>                         to force a heap dump or histogram when &lt;pid&gt; does not<br>                         respond. The <span class=\"hljs-string\">&quot;live&quot;</span> suboption is not supported<br>                         <span class=\"hljs-keyword\">in</span> this mode.<br>    -h | -<span class=\"hljs-built_in\">help</span>           to <span class=\"hljs-built_in\">print</span> this <span class=\"hljs-built_in\">help</span> message<br>    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>指定进程号(pid)的进程 jmap [ option ]</li>\n<li>指定核心文件 jmap [ option ]</li>\n<li>指定远程调试服务器 jmap [ option ] [server-id@]</li>\n</ul>\n<p><strong>参数：</strong></p>\n<ul>\n<li>option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</li>\n<li>pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</li>\n<li>executable 产生核心dump的Java可执行文件。</li>\n<li>core 需要打印配置信息的核心文件。</li>\n<li>remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。</li>\n<li>server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</li>\n</ul>\n<p><strong>选项:</strong></p>\n<ul>\n<li><no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。</li>\n<li>-dump:[live,]format&#x3D;b,file&#x3D;<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。</li>\n<li>-finalizerinfo 打印等待终结的对象信息。</li>\n<li>-heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。</li>\n<li>-histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。</li>\n<li>-permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</li>\n<li>-F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。</li>\n<li>-h 打印帮助信息。</li>\n<li>-help 打印帮助信息。</li>\n<li>-J<flag> 指定传递给运行jmap的JVM的参数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p><em>查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Attaching to process ID 31846, please <span class=\"hljs-built_in\">wait</span>...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.71-b01<br><br>using thread-local object allocation.<br>Parallel GC with 4 thread(s)//GC 方式<br><br>Heap Configuration: //堆内存初始化配置<br>   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)<br>   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)<br>   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小<br>   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小<br>   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小<br>   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小<br>   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率<br>   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 <br>   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小<br>   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小<br>   G1HeapRegionSize = 0 (0.0MB)<br><br>Heap Usage://堆内存使用情况<br>PS Young Generation<br>Eden Space://Eden区内存分布<br>   capacity = 33030144 (31.5MB)//Eden区总容量<br>   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用<br>   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量<br>   4.614088270399305% used //Eden区使用比率<br>From Space:  //其中一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>To Space:  //另一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>PS Old Generation //当前的Old区内存分布<br>   capacity = 86507520 (82.5MB)<br>   used     = 0 (0.0MB)<br>   free     = 86507520 (82.5MB)<br>   0.0% used<br>PS Perm Generation//当前的 “永生代” 内存分布<br>   capacity = 22020096 (21.0MB)<br>   used     = 2496528 (2.3808746337890625MB)<br>   free     = 19523568 (18.619125366210938MB)<br>   11.337498256138392% used<br><br>670 interned Strings occupying 43720 bytes.<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">num     <span class=\"hljs-comment\">#instances         #bytes  class name</span><br>编号     个数                字节     类名<br>----------------------------------------------<br>   1:             7        1322080  [I<br>   2:          5603         722368  &lt;methodKlass&gt;<br>   3:          5603         641944  &lt;constMethodKlass&gt;<br>   4:         34022         544352  java.lang.Integer<br>   5:           371         437208  &lt;constantPoolKlass&gt;<br>   6:           336         270624  &lt;constantPoolCacheKlass&gt;<br>   7:           371         253816  &lt;instanceKlassKlass&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>将内存使用的详细情况输出到文件，执行命令： jmap -dump:format&#x3D;b,file&#x3D;heapDump 6900</strong></p>\n<p>然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：<a href=\"http://localhost:5000/\">http://localhost:5000/</a> 查看详细信息</p>\n<blockquote>\n<p>这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。<br> 2.要制作堆Dump可以直接使用jvm自带的jmap命令<br> 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。<br> 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。<br> 5.也可以使用 jmap -dump:format&#x3D;b,file&#x3D;<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容<br> 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。</p>\n<h3 id=\"出现问题：\"><a href=\"#出现问题：\" class=\"headerlink\" title=\"出现问题：\"></a>出现问题：</h3><ol>\n<li>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process<br> 在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process，这是oracla文档中提到的一个bug:<a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：</a></li>\n</ol>\n<ul>\n<li>echo 0 | sudo tee &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;yama&#x2F;ptrace_scope 该方法在下次重启前有效。</li>\n<li>永久有效方法 sudo vi &#x2F;etc&#x2F;sysctl.d&#x2F;10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope &#x3D; 1 修改为: kernel.yama.ptrace_scope &#x3D; 0 重启系统，使修改生效。</li>\n</ul>\n"},{"title":"4-JVM 参数","_content":"# JVM 参数\n\n1. 标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help\n\n2. 非标准参数：随着JDK版本的变化而变化。\n\n   -X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动\n\n   ```shell\n   # 修改执行方式\n   # compiled 编译执行方式，第一次使用就编译成本地代码\n   java -Xcomp -version\n   # interpreted 解释执行方式\n   java -Xini -version\n   # mixed 默认的混合执行方式，混合模式，JVM自己来决定\n   java -Xmixed -version\n   ```\n\n   -XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。\n\n   boolean类型\n\n   ```shell\n   格式：-XX:[+-]<name>      \t\t+或-表示启用或者禁用name属性\n   比如：\n   -XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器\n   -XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器\n   # 设置JVM使用垃圾收集器 +：使用，-：未使用\n   -XX:+/-UseG1GC\n   \n   \n   ```\n\n   非boolean类型\n\n   ```shell\n   格式：-XX<name>=<value>表示name属性的值是value\n   比如：\n   -XX:MaxGCPauseMillis=500\n   # 设置初始堆内存\n   -XX:initialHeapSize=100M # 简写方式 ===>>> -Xms100M\n   # 设置最大堆内存\n   -XX:MaxHeapSize=100M # 简写方式 ===>>> -Xmx100M\n   ```\n\n打印出JAVA进程中所有JVM的参数：\n\n+ 执行命令 `java -XX:+PrintFlagsFinal -version` 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t`java -XX:+PrintFlagsFinal -version > xxx.txt`\n+ 使用  `jinfo -flag ${参数名} ${PID} `也可查看对应JVM参数值\n\n```shell\n-XX:+PrintFlagsFinal\n```\n\n**如何设置JVM参数：**\n\n*以下方式是JAVA进程还未启动*\n\n1. 在开发工具中，比如IDEA中的启动配置项中 VM options\n2. SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar\n3. 在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh/bat 中的JAVA_OPTIONS=\"\"\n\n*以下方式是当JAVA进程已经启动后该如何设置*\n\n4. 实时修改某个JVM参数的值 **jinfo修改（参数只有被标记为manageable的flags可以被实时修改)**\n\n**常用参数：**\n\n|                             参数                             |                             含义                             |                             说明                             |\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n|                     XX:CICompilerCount=3                     |                        最大并行编译数                        | 如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能 |\n|                   -XX:InitialHeapSize=100M                   |                         初始化堆大小                         |                         简写-Xms100M                         |\n|                     -XX:MaxHeapSize=100M                     |                          最大堆大小                          |                        简写-Xm x 100M                        |\n|                       -XX:NewSize=20M                        |                       设置年轻代的大小                       |                                                              |\n|                      -XX:MaxNewSize=50M                      |                        年轻代最大大小                        |                                                              |\n|                       -XX:OldSize=50M                        |                        设置老年代大小                        |                                                              |\n|                    -XX:MetaspaceSize=50M                     |                        设置方法区大小                        |                                                              |\n|                   -XX:MaxMetaspaceSize=50M                   |                        方法区最大大小                        |                                                              |\n|                      -XX:+UseParallelGC                      |                      使用UseParallelGC                       |                      新生代，吞吐量优先                      |\n|                    -XX:+UseParallelOldGC                     |                     使用UseParallelOldGC                     |                      老年代，吞吐量优先                      |\n|                   -XX:+UseConcMarkSweepGC                    |                           使用CMS                            |                     老年代，停顿时间优先                     |\n|                         -XX:+UseG1GC                         |                           使用G1GC                           |                 新生代，老年代，停顿时间优先                 |\n|                         -XX:NewRatio                         |                        新老生代的比值                        | 比如-XX:Ratio=4，则表示新生代:老年代=1:4，也就是新生代占整个堆内存的1/5 |\n|                      -XX:SurvivorRatio                       |                    两个S区和Eden区的比值                     | 比如-XX:SurvivorRatio=8，也就是(S0+S1):Eden=2:8，也就是一个S占整个新生代的1/10 |\n|               -XX:+HeapDumpOnOutOfMemoryError                |                      启动堆内存溢出打印                      |      当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件      |\n|                 -XX:HeapDumpPath=heap.hprof                  |                    指定堆内存溢出打印目录                    |             表示在当前目录生成一个heap.hprof文件             |\n| XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME/logs/gc.log |                         打印出GC日志                         |           可以使用不同的垃圾收集器，对比查看GC情况           |\n|                           -Xss128k                           |                    设置每个线程的堆栈大小                    |                    经验值是3000-5000最佳                     |\n|                  -XX:MaxTenuringThreshold=6                  |                    提升年老代的最大临界值                    |                         默认值为 15                          |\n|              -XX:InitiatingHeapOccupancyPercent              |                启动并发GC周期时堆内存使用占比                | G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45. |\n|                    -XX:G1HeapWastePercent                    |                    允许的浪费堆空间的占比                    | 默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。 |\n|                  -XX:MaxGCPauseMillis=200ms                  |                        G1最大停顿时间                        | 暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态 |\n|                     -XX:ConcGCThreads=n                      |                 并发垃圾收集器使用的线程数量                 |               默认值随JVM运行的平台不同而不同                |\n|             -XX:G1MixedGCLiveThresholdPercent=65             |        混合垃圾回收周期中要包括的旧区域设置占用率阈值        |                       默认占用率为 65%                       |\n|                  -XX:G1MixedGCCountTarget=8                  | 设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数 | 默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内  |\n|             XX:G1OldCSetRegionThresholdPercent=1             |           描述Mixed GC时，Old Region被加入到CSet中           |        默认情况下，G1只把10%的Old Region加入到CSet中         |\n","source":"_posts/JVM/4-JVM 参数.md","raw":"---\ntitle: 4-JVM 参数\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM 参数\n\n1. 标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help\n\n2. 非标准参数：随着JDK版本的变化而变化。\n\n   -X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动\n\n   ```shell\n   # 修改执行方式\n   # compiled 编译执行方式，第一次使用就编译成本地代码\n   java -Xcomp -version\n   # interpreted 解释执行方式\n   java -Xini -version\n   # mixed 默认的混合执行方式，混合模式，JVM自己来决定\n   java -Xmixed -version\n   ```\n\n   -XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。\n\n   boolean类型\n\n   ```shell\n   格式：-XX:[+-]<name>      \t\t+或-表示启用或者禁用name属性\n   比如：\n   -XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器\n   -XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器\n   # 设置JVM使用垃圾收集器 +：使用，-：未使用\n   -XX:+/-UseG1GC\n   \n   \n   ```\n\n   非boolean类型\n\n   ```shell\n   格式：-XX<name>=<value>表示name属性的值是value\n   比如：\n   -XX:MaxGCPauseMillis=500\n   # 设置初始堆内存\n   -XX:initialHeapSize=100M # 简写方式 ===>>> -Xms100M\n   # 设置最大堆内存\n   -XX:MaxHeapSize=100M # 简写方式 ===>>> -Xmx100M\n   ```\n\n打印出JAVA进程中所有JVM的参数：\n\n+ 执行命令 `java -XX:+PrintFlagsFinal -version` 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t`java -XX:+PrintFlagsFinal -version > xxx.txt`\n+ 使用  `jinfo -flag ${参数名} ${PID} `也可查看对应JVM参数值\n\n```shell\n-XX:+PrintFlagsFinal\n```\n\n**如何设置JVM参数：**\n\n*以下方式是JAVA进程还未启动*\n\n1. 在开发工具中，比如IDEA中的启动配置项中 VM options\n2. SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar\n3. 在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh/bat 中的JAVA_OPTIONS=\"\"\n\n*以下方式是当JAVA进程已经启动后该如何设置*\n\n4. 实时修改某个JVM参数的值 **jinfo修改（参数只有被标记为manageable的flags可以被实时修改)**\n\n**常用参数：**\n\n|                             参数                             |                             含义                             |                             说明                             |\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n|                     XX:CICompilerCount=3                     |                        最大并行编译数                        | 如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能 |\n|                   -XX:InitialHeapSize=100M                   |                         初始化堆大小                         |                         简写-Xms100M                         |\n|                     -XX:MaxHeapSize=100M                     |                          最大堆大小                          |                        简写-Xm x 100M                        |\n|                       -XX:NewSize=20M                        |                       设置年轻代的大小                       |                                                              |\n|                      -XX:MaxNewSize=50M                      |                        年轻代最大大小                        |                                                              |\n|                       -XX:OldSize=50M                        |                        设置老年代大小                        |                                                              |\n|                    -XX:MetaspaceSize=50M                     |                        设置方法区大小                        |                                                              |\n|                   -XX:MaxMetaspaceSize=50M                   |                        方法区最大大小                        |                                                              |\n|                      -XX:+UseParallelGC                      |                      使用UseParallelGC                       |                      新生代，吞吐量优先                      |\n|                    -XX:+UseParallelOldGC                     |                     使用UseParallelOldGC                     |                      老年代，吞吐量优先                      |\n|                   -XX:+UseConcMarkSweepGC                    |                           使用CMS                            |                     老年代，停顿时间优先                     |\n|                         -XX:+UseG1GC                         |                           使用G1GC                           |                 新生代，老年代，停顿时间优先                 |\n|                         -XX:NewRatio                         |                        新老生代的比值                        | 比如-XX:Ratio=4，则表示新生代:老年代=1:4，也就是新生代占整个堆内存的1/5 |\n|                      -XX:SurvivorRatio                       |                    两个S区和Eden区的比值                     | 比如-XX:SurvivorRatio=8，也就是(S0+S1):Eden=2:8，也就是一个S占整个新生代的1/10 |\n|               -XX:+HeapDumpOnOutOfMemoryError                |                      启动堆内存溢出打印                      |      当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件      |\n|                 -XX:HeapDumpPath=heap.hprof                  |                    指定堆内存溢出打印目录                    |             表示在当前目录生成一个heap.hprof文件             |\n| XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME/logs/gc.log |                         打印出GC日志                         |           可以使用不同的垃圾收集器，对比查看GC情况           |\n|                           -Xss128k                           |                    设置每个线程的堆栈大小                    |                    经验值是3000-5000最佳                     |\n|                  -XX:MaxTenuringThreshold=6                  |                    提升年老代的最大临界值                    |                         默认值为 15                          |\n|              -XX:InitiatingHeapOccupancyPercent              |                启动并发GC周期时堆内存使用占比                | G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45. |\n|                    -XX:G1HeapWastePercent                    |                    允许的浪费堆空间的占比                    | 默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。 |\n|                  -XX:MaxGCPauseMillis=200ms                  |                        G1最大停顿时间                        | 暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态 |\n|                     -XX:ConcGCThreads=n                      |                 并发垃圾收集器使用的线程数量                 |               默认值随JVM运行的平台不同而不同                |\n|             -XX:G1MixedGCLiveThresholdPercent=65             |        混合垃圾回收周期中要包括的旧区域设置占用率阈值        |                       默认占用率为 65%                       |\n|                  -XX:G1MixedGCCountTarget=8                  | 设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数 | 默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内  |\n|             XX:G1OldCSetRegionThresholdPercent=1             |           描述Mixed GC时，Old Region被加入到CSet中           |        默认情况下，G1只把10%的Old Region加入到CSet中         |\n","slug":"JVM/4-JVM 参数","published":1,"date":"2020-05-07T15:20:49.000Z","updated":"2022-11-25T17:39:15.224Z","_id":"clawrzuaj0007u42b6duf1b3v","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM-参数\"><a href=\"#JVM-参数\" class=\"headerlink\" title=\"JVM 参数\"></a>JVM 参数</h1><ol>\n<li><p>标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help</p>\n</li>\n<li><p>非标准参数：随着JDK版本的变化而变化。</p>\n<p>-X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改执行方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">compiled 编译执行方式，第一次使用就编译成本地代码</span><br>java -Xcomp -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interpreted 解释执行方式</span><br>java -Xini -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">mixed 默认的混合执行方式，混合模式，JVM自己来决定</span><br>java -Xmixed -version<br></code></pre></td></tr></table></figure>\n\n<p>-XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。</p>\n<p>boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX:[+-]&lt;name&gt;      \t\t+或-表示启用或者禁用name属性<br>比如：<br>-XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器<br>-XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置JVM使用垃圾收集器 +：使用，-：未使用</span><br>-XX:+/-UseG1GC<br><br><br></code></pre></td></tr></table></figure>\n\n<p>非boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX&lt;name&gt;=&lt;value&gt;表示name属性的值是value<br>比如：<br>-XX:MaxGCPauseMillis=500<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置初始堆内存</span><br>-XX:initialHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xms100M<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置最大堆内存</span><br>-XX:MaxHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xmx100M<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>打印出JAVA进程中所有JVM的参数：</p>\n<ul>\n<li>执行命令 <code>java -XX:+PrintFlagsFinal -version</code> 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t<code>java -XX:+PrintFlagsFinal -version &gt; xxx.txt</code></li>\n<li>使用  <code>jinfo -flag $&#123;参数名&#125; $&#123;PID&#125; </code>也可查看对应JVM参数值</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-XX:+PrintFlagsFinal<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何设置JVM参数：</strong></p>\n<p><em>以下方式是JAVA进程还未启动</em></p>\n<ol>\n<li>在开发工具中，比如IDEA中的启动配置项中 VM options</li>\n<li>SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar</li>\n<li>在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh&#x2F;bat 中的JAVA_OPTIONS&#x3D;””</li>\n</ol>\n<p><em>以下方式是当JAVA进程已经启动后该如何设置</em></p>\n<ol start=\"4\">\n<li>实时修改某个JVM参数的值 <strong>jinfo修改（参数只有被标记为manageable的flags可以被实时修改)</strong></li>\n</ol>\n<p><strong>常用参数：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">XX:CICompilerCount&#x3D;3</td>\n<td align=\"center\">最大并行编译数</td>\n<td align=\"center\">如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitialHeapSize&#x3D;100M</td>\n<td align=\"center\">初始化堆大小</td>\n<td align=\"center\">简写-Xms100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxHeapSize&#x3D;100M</td>\n<td align=\"center\">最大堆大小</td>\n<td align=\"center\">简写-Xm x 100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewSize&#x3D;20M</td>\n<td align=\"center\">设置年轻代的大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxNewSize&#x3D;50M</td>\n<td align=\"center\">年轻代最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:OldSize&#x3D;50M</td>\n<td align=\"center\">设置老年代大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MetaspaceSize&#x3D;50M</td>\n<td align=\"center\">设置方法区大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxMetaspaceSize&#x3D;50M</td>\n<td align=\"center\">方法区最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelGC</td>\n<td align=\"center\">使用UseParallelGC</td>\n<td align=\"center\">新生代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelOldGC</td>\n<td align=\"center\">使用UseParallelOldGC</td>\n<td align=\"center\">老年代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseConcMarkSweepGC</td>\n<td align=\"center\">使用CMS</td>\n<td align=\"center\">老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseG1GC</td>\n<td align=\"center\">使用G1GC</td>\n<td align=\"center\">新生代，老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewRatio</td>\n<td align=\"center\">新老生代的比值</td>\n<td align=\"center\">比如-XX:Ratio&#x3D;4，则表示新生代:老年代&#x3D;1:4，也就是新生代占整个堆内存的1&#x2F;5</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:SurvivorRatio</td>\n<td align=\"center\">两个S区和Eden区的比值</td>\n<td align=\"center\">比如-XX:SurvivorRatio&#x3D;8，也就是(S0+S1):Eden&#x3D;2:8，也就是一个S占整个新生代的1&#x2F;10</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+HeapDumpOnOutOfMemoryError</td>\n<td align=\"center\">启动堆内存溢出打印</td>\n<td align=\"center\">当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:HeapDumpPath&#x3D;heap.hprof</td>\n<td align=\"center\">指定堆内存溢出打印目录</td>\n<td align=\"center\">表示在当前目录生成一个heap.hprof文件</td>\n</tr>\n<tr>\n<td align=\"center\">XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME&#x2F;logs&#x2F;gc.log</td>\n<td align=\"center\">打印出GC日志</td>\n<td align=\"center\">可以使用不同的垃圾收集器，对比查看GC情况</td>\n</tr>\n<tr>\n<td align=\"center\">-Xss128k</td>\n<td align=\"center\">设置每个线程的堆栈大小</td>\n<td align=\"center\">经验值是3000-5000最佳</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxTenuringThreshold&#x3D;6</td>\n<td align=\"center\">提升年老代的最大临界值</td>\n<td align=\"center\">默认值为 15</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitiatingHeapOccupancyPercent</td>\n<td align=\"center\">启动并发GC周期时堆内存使用占比</td>\n<td align=\"center\">G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45.</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1HeapWastePercent</td>\n<td align=\"center\">允许的浪费堆空间的占比</td>\n<td align=\"center\">默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxGCPauseMillis&#x3D;200ms</td>\n<td align=\"center\">G1最大停顿时间</td>\n<td align=\"center\">暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:ConcGCThreads&#x3D;n</td>\n<td align=\"center\">并发垃圾收集器使用的线程数量</td>\n<td align=\"center\">默认值随JVM运行的平台不同而不同</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCLiveThresholdPercent&#x3D;65</td>\n<td align=\"center\">混合垃圾回收周期中要包括的旧区域设置占用率阈值</td>\n<td align=\"center\">默认占用率为 65%</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCCountTarget&#x3D;8</td>\n<td align=\"center\">设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数</td>\n<td align=\"center\">默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内</td>\n</tr>\n<tr>\n<td align=\"center\">XX:G1OldCSetRegionThresholdPercent&#x3D;1</td>\n<td align=\"center\">描述Mixed GC时，Old Region被加入到CSet中</td>\n<td align=\"center\">默认情况下，G1只把10%的Old Region加入到CSet中</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM-参数\"><a href=\"#JVM-参数\" class=\"headerlink\" title=\"JVM 参数\"></a>JVM 参数</h1><ol>\n<li><p>标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help</p>\n</li>\n<li><p>非标准参数：随着JDK版本的变化而变化。</p>\n<p>-X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改执行方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">compiled 编译执行方式，第一次使用就编译成本地代码</span><br>java -Xcomp -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interpreted 解释执行方式</span><br>java -Xini -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">mixed 默认的混合执行方式，混合模式，JVM自己来决定</span><br>java -Xmixed -version<br></code></pre></td></tr></table></figure>\n\n<p>-XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。</p>\n<p>boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX:[+-]&lt;name&gt;      \t\t+或-表示启用或者禁用name属性<br>比如：<br>-XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器<br>-XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置JVM使用垃圾收集器 +：使用，-：未使用</span><br>-XX:+/-UseG1GC<br><br><br></code></pre></td></tr></table></figure>\n\n<p>非boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX&lt;name&gt;=&lt;value&gt;表示name属性的值是value<br>比如：<br>-XX:MaxGCPauseMillis=500<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置初始堆内存</span><br>-XX:initialHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xms100M<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置最大堆内存</span><br>-XX:MaxHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xmx100M<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>打印出JAVA进程中所有JVM的参数：</p>\n<ul>\n<li>执行命令 <code>java -XX:+PrintFlagsFinal -version</code> 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t<code>java -XX:+PrintFlagsFinal -version &gt; xxx.txt</code></li>\n<li>使用  <code>jinfo -flag $&#123;参数名&#125; $&#123;PID&#125; </code>也可查看对应JVM参数值</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-XX:+PrintFlagsFinal<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何设置JVM参数：</strong></p>\n<p><em>以下方式是JAVA进程还未启动</em></p>\n<ol>\n<li>在开发工具中，比如IDEA中的启动配置项中 VM options</li>\n<li>SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar</li>\n<li>在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh&#x2F;bat 中的JAVA_OPTIONS&#x3D;””</li>\n</ol>\n<p><em>以下方式是当JAVA进程已经启动后该如何设置</em></p>\n<ol start=\"4\">\n<li>实时修改某个JVM参数的值 <strong>jinfo修改（参数只有被标记为manageable的flags可以被实时修改)</strong></li>\n</ol>\n<p><strong>常用参数：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">XX:CICompilerCount&#x3D;3</td>\n<td align=\"center\">最大并行编译数</td>\n<td align=\"center\">如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitialHeapSize&#x3D;100M</td>\n<td align=\"center\">初始化堆大小</td>\n<td align=\"center\">简写-Xms100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxHeapSize&#x3D;100M</td>\n<td align=\"center\">最大堆大小</td>\n<td align=\"center\">简写-Xm x 100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewSize&#x3D;20M</td>\n<td align=\"center\">设置年轻代的大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxNewSize&#x3D;50M</td>\n<td align=\"center\">年轻代最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:OldSize&#x3D;50M</td>\n<td align=\"center\">设置老年代大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MetaspaceSize&#x3D;50M</td>\n<td align=\"center\">设置方法区大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxMetaspaceSize&#x3D;50M</td>\n<td align=\"center\">方法区最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelGC</td>\n<td align=\"center\">使用UseParallelGC</td>\n<td align=\"center\">新生代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelOldGC</td>\n<td align=\"center\">使用UseParallelOldGC</td>\n<td align=\"center\">老年代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseConcMarkSweepGC</td>\n<td align=\"center\">使用CMS</td>\n<td align=\"center\">老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseG1GC</td>\n<td align=\"center\">使用G1GC</td>\n<td align=\"center\">新生代，老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewRatio</td>\n<td align=\"center\">新老生代的比值</td>\n<td align=\"center\">比如-XX:Ratio&#x3D;4，则表示新生代:老年代&#x3D;1:4，也就是新生代占整个堆内存的1&#x2F;5</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:SurvivorRatio</td>\n<td align=\"center\">两个S区和Eden区的比值</td>\n<td align=\"center\">比如-XX:SurvivorRatio&#x3D;8，也就是(S0+S1):Eden&#x3D;2:8，也就是一个S占整个新生代的1&#x2F;10</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+HeapDumpOnOutOfMemoryError</td>\n<td align=\"center\">启动堆内存溢出打印</td>\n<td align=\"center\">当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:HeapDumpPath&#x3D;heap.hprof</td>\n<td align=\"center\">指定堆内存溢出打印目录</td>\n<td align=\"center\">表示在当前目录生成一个heap.hprof文件</td>\n</tr>\n<tr>\n<td align=\"center\">XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME&#x2F;logs&#x2F;gc.log</td>\n<td align=\"center\">打印出GC日志</td>\n<td align=\"center\">可以使用不同的垃圾收集器，对比查看GC情况</td>\n</tr>\n<tr>\n<td align=\"center\">-Xss128k</td>\n<td align=\"center\">设置每个线程的堆栈大小</td>\n<td align=\"center\">经验值是3000-5000最佳</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxTenuringThreshold&#x3D;6</td>\n<td align=\"center\">提升年老代的最大临界值</td>\n<td align=\"center\">默认值为 15</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitiatingHeapOccupancyPercent</td>\n<td align=\"center\">启动并发GC周期时堆内存使用占比</td>\n<td align=\"center\">G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45.</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1HeapWastePercent</td>\n<td align=\"center\">允许的浪费堆空间的占比</td>\n<td align=\"center\">默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxGCPauseMillis&#x3D;200ms</td>\n<td align=\"center\">G1最大停顿时间</td>\n<td align=\"center\">暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:ConcGCThreads&#x3D;n</td>\n<td align=\"center\">并发垃圾收集器使用的线程数量</td>\n<td align=\"center\">默认值随JVM运行的平台不同而不同</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCLiveThresholdPercent&#x3D;65</td>\n<td align=\"center\">混合垃圾回收周期中要包括的旧区域设置占用率阈值</td>\n<td align=\"center\">默认占用率为 65%</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCCountTarget&#x3D;8</td>\n<td align=\"center\">设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数</td>\n<td align=\"center\">默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内</td>\n</tr>\n<tr>\n<td align=\"center\">XX:G1OldCSetRegionThresholdPercent&#x3D;1</td>\n<td align=\"center\">描述Mixed GC时，Old Region被加入到CSet中</td>\n<td align=\"center\">默认情况下，G1只把10%的Old Region加入到CSet中</td>\n</tr>\n</tbody></table>\n"},{"title":"1-Mysql执行流程与架构","_content":"# Mysql执行流程与架构\n\n```mysql\nshow global status like \"Thread%\" -- 查看当前客户端连接数\n\nSHOW VARIABLES -- 查看系统变量及其值\nshow global variables like 'wait_timeout' -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）\nshow global variables like 'interactive_timeout' -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）\n```\n\n### 1、mysql 缓存\n\n> 将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。`show variables like \"query_cache%\"`查看状态已是OFF状态。\n>\n> 为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）\n\n### 2、预处理器\n\n> 分析表是否存在，相关权限的校验（用户权限，表增删改查权限）\n\n### 3、解析器Parser\n\n> 主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号\"(\"，那么右边一定要有个括号\")\"\n\n**解析树：**\n\n![](https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png)\n\n### 4、优化器Optimizer\n\n> 成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。\n>\n> 关联查询：决定优先查哪张表\n>\n> 索引：决定是否使用索引或者使用哪个索引\n>\n> 优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。\n\n### 5、执行计划\n\n> 优化器得到的结果就是执行计划。\n>\n> 那么如何去查看一条sql语句执行的成本呢？通过这个：`show status like 'Last_query_cost'`在调整过sql语句后执行后，前后对比下。\n>\n> 格式化成JSON形式查看：`EXPLAIN FORMAT=JSON SELECT t.* FROM t` \n\n### 6、执行器\n\n> 执行执行计划，并且读写数据。\n\n#### 那么从哪里读写数据呢？\n\n**存储引擎-表类型：**\n\n> 查看mysql支持的存储引擎：`show engines` 插件式的\n\n1. archive\n\n   > + 用于历史存储\n\n2. csv\n\n   > + 纯文本格式\n   > + 不支持索引\n   > + 用于迁移数据\n\n3. innodb（5.5版本及之后默认）\n\n   > 每次从磁盘读取的大小是16KB，一页=16KB。\n\n   > + 支持事务\n   > + 行级锁\n   > + 读写并发操作\n   > + 聚簇索引、非聚簇索引\n\n4. myisam\n\n   > + 锁表\n   > + 用于只读场景\n\n5. memory\n\n   > + 数据放在内存\n   > + 用于临时表\n\n   .\n\n   .\n\n   .\n\n![](https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png)\n\nmysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。\n\n当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做**“脏页”**，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页\n\nmysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做**“刷脏”**\n\n验证bufferpool在mysql中的状态：`SHOW STATUS LIKE \"%innodb_buffer_pool%\"`\n\n![](https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png)\n\n当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；\n\n**“redo log”：**\n\n> 作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，\n>\n> 特性：崩溃恢复（crash safe）。\n>\n> 为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO > 随机IO）。\n>\n> 文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。\n\n**“undo log”：**\n\n> 记录的是事务发生前的数据的状态\n>\n> 保证原子性：要么全部成功，要么全部失败\n>\n> 只有增删改的记录，查询是没有的\n\n**更新语句执行流程：**\n\n![](https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png)\n","source":"_posts/Mysql/1、Mysql执行流程与架构.md","raw":"---\ntitle: 1-Mysql执行流程与架构\ntags:\n  - Mysql\ncategories:\n  - Mysql\n---\n# Mysql执行流程与架构\n\n```mysql\nshow global status like \"Thread%\" -- 查看当前客户端连接数\n\nSHOW VARIABLES -- 查看系统变量及其值\nshow global variables like 'wait_timeout' -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）\nshow global variables like 'interactive_timeout' -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）\n```\n\n### 1、mysql 缓存\n\n> 将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。`show variables like \"query_cache%\"`查看状态已是OFF状态。\n>\n> 为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）\n\n### 2、预处理器\n\n> 分析表是否存在，相关权限的校验（用户权限，表增删改查权限）\n\n### 3、解析器Parser\n\n> 主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号\"(\"，那么右边一定要有个括号\")\"\n\n**解析树：**\n\n![](https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png)\n\n### 4、优化器Optimizer\n\n> 成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。\n>\n> 关联查询：决定优先查哪张表\n>\n> 索引：决定是否使用索引或者使用哪个索引\n>\n> 优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。\n\n### 5、执行计划\n\n> 优化器得到的结果就是执行计划。\n>\n> 那么如何去查看一条sql语句执行的成本呢？通过这个：`show status like 'Last_query_cost'`在调整过sql语句后执行后，前后对比下。\n>\n> 格式化成JSON形式查看：`EXPLAIN FORMAT=JSON SELECT t.* FROM t` \n\n### 6、执行器\n\n> 执行执行计划，并且读写数据。\n\n#### 那么从哪里读写数据呢？\n\n**存储引擎-表类型：**\n\n> 查看mysql支持的存储引擎：`show engines` 插件式的\n\n1. archive\n\n   > + 用于历史存储\n\n2. csv\n\n   > + 纯文本格式\n   > + 不支持索引\n   > + 用于迁移数据\n\n3. innodb（5.5版本及之后默认）\n\n   > 每次从磁盘读取的大小是16KB，一页=16KB。\n\n   > + 支持事务\n   > + 行级锁\n   > + 读写并发操作\n   > + 聚簇索引、非聚簇索引\n\n4. myisam\n\n   > + 锁表\n   > + 用于只读场景\n\n5. memory\n\n   > + 数据放在内存\n   > + 用于临时表\n\n   .\n\n   .\n\n   .\n\n![](https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png)\n\nmysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。\n\n当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做**“脏页”**，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页\n\nmysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做**“刷脏”**\n\n验证bufferpool在mysql中的状态：`SHOW STATUS LIKE \"%innodb_buffer_pool%\"`\n\n![](https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png)\n\n当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；\n\n**“redo log”：**\n\n> 作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，\n>\n> 特性：崩溃恢复（crash safe）。\n>\n> 为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO > 随机IO）。\n>\n> 文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。\n\n**“undo log”：**\n\n> 记录的是事务发生前的数据的状态\n>\n> 保证原子性：要么全部成功，要么全部失败\n>\n> 只有增删改的记录，查询是没有的\n\n**更新语句执行流程：**\n\n![](https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png)\n","slug":"Mysql/1、Mysql执行流程与架构","published":1,"date":"2022-04-07T16:55:21.000Z","updated":"2022-11-25T17:39:27.046Z","_id":"clawrzuak0008u42b3itw94d5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql执行流程与架构\"><a href=\"#Mysql执行流程与架构\" class=\"headerlink\" title=\"Mysql执行流程与架构\"></a>Mysql执行流程与架构</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">show global status like &quot;Thread%&quot; -- 查看当前客户端连接数<br><br>SHOW VARIABLES -- 查看系统变量及其值<br>show global variables like &#x27;wait_timeout&#x27; -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）<br>show global variables like &#x27;interactive_timeout&#x27; -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1、mysql-缓存\"><a href=\"#1、mysql-缓存\" class=\"headerlink\" title=\"1、mysql 缓存\"></a>1、mysql 缓存</h3><blockquote>\n<p>将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。<code>show variables like &quot;query_cache%&quot;</code>查看状态已是OFF状态。</p>\n<p>为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）</p>\n</blockquote>\n<h3 id=\"2、预处理器\"><a href=\"#2、预处理器\" class=\"headerlink\" title=\"2、预处理器\"></a>2、预处理器</h3><blockquote>\n<p>分析表是否存在，相关权限的校验（用户权限，表增删改查权限）</p>\n</blockquote>\n<h3 id=\"3、解析器Parser\"><a href=\"#3、解析器Parser\" class=\"headerlink\" title=\"3、解析器Parser\"></a>3、解析器Parser</h3><blockquote>\n<p>主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号”(“，那么右边一定要有个括号”)”</p>\n</blockquote>\n<p><strong>解析树：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png\"></p>\n<h3 id=\"4、优化器Optimizer\"><a href=\"#4、优化器Optimizer\" class=\"headerlink\" title=\"4、优化器Optimizer\"></a>4、优化器Optimizer</h3><blockquote>\n<p>成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。</p>\n<p>关联查询：决定优先查哪张表</p>\n<p>索引：决定是否使用索引或者使用哪个索引</p>\n<p>优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。</p>\n</blockquote>\n<h3 id=\"5、执行计划\"><a href=\"#5、执行计划\" class=\"headerlink\" title=\"5、执行计划\"></a>5、执行计划</h3><blockquote>\n<p>优化器得到的结果就是执行计划。</p>\n<p>那么如何去查看一条sql语句执行的成本呢？通过这个：<code>show status like &#39;Last_query_cost&#39;</code>在调整过sql语句后执行后，前后对比下。</p>\n<p>格式化成JSON形式查看：<code>EXPLAIN FORMAT=JSON SELECT t.* FROM t</code> </p>\n</blockquote>\n<h3 id=\"6、执行器\"><a href=\"#6、执行器\" class=\"headerlink\" title=\"6、执行器\"></a>6、执行器</h3><blockquote>\n<p>执行执行计划，并且读写数据。</p>\n</blockquote>\n<h4 id=\"那么从哪里读写数据呢？\"><a href=\"#那么从哪里读写数据呢？\" class=\"headerlink\" title=\"那么从哪里读写数据呢？\"></a>那么从哪里读写数据呢？</h4><p><strong>存储引擎-表类型：</strong></p>\n<blockquote>\n<p>查看mysql支持的存储引擎：<code>show engines</code> 插件式的</p>\n</blockquote>\n<ol>\n<li><p>archive</p>\n<blockquote>\n<ul>\n<li>用于历史存储</li>\n</ul>\n</blockquote>\n</li>\n<li><p>csv</p>\n<blockquote>\n<ul>\n<li>纯文本格式</li>\n<li>不支持索引</li>\n<li>用于迁移数据</li>\n</ul>\n</blockquote>\n</li>\n<li><p>innodb（5.5版本及之后默认）</p>\n<blockquote>\n<p>每次从磁盘读取的大小是16KB，一页&#x3D;16KB。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>支持事务</li>\n<li>行级锁</li>\n<li>读写并发操作</li>\n<li>聚簇索引、非聚簇索引</li>\n</ul>\n</blockquote>\n</li>\n<li><p>myisam</p>\n<blockquote>\n<ul>\n<li>锁表</li>\n<li>用于只读场景</li>\n</ul>\n</blockquote>\n</li>\n<li><p>memory</p>\n<blockquote>\n<ul>\n<li>数据放在内存</li>\n<li>用于临时表</li>\n</ul>\n</blockquote>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n</li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png\"></p>\n<p>mysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。</p>\n<p>当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做<strong>“脏页”</strong>，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页</p>\n<p>mysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做<strong>“刷脏”</strong></p>\n<p>验证bufferpool在mysql中的状态：<code>SHOW STATUS LIKE &quot;%innodb_buffer_pool%&quot;</code></p>\n<p><img src=\"https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png\"></p>\n<p>当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；</p>\n<p><strong>“redo log”：</strong></p>\n<blockquote>\n<p>作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，</p>\n<p>特性：崩溃恢复（crash safe）。</p>\n<p>为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO &gt; 随机IO）。</p>\n<p>文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。</p>\n</blockquote>\n<p><strong>“undo log”：</strong></p>\n<blockquote>\n<p>记录的是事务发生前的数据的状态</p>\n<p>保证原子性：要么全部成功，要么全部失败</p>\n<p>只有增删改的记录，查询是没有的</p>\n</blockquote>\n<p><strong>更新语句执行流程：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql执行流程与架构\"><a href=\"#Mysql执行流程与架构\" class=\"headerlink\" title=\"Mysql执行流程与架构\"></a>Mysql执行流程与架构</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">show global status like &quot;Thread%&quot; -- 查看当前客户端连接数<br><br>SHOW VARIABLES -- 查看系统变量及其值<br>show global variables like &#x27;wait_timeout&#x27; -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）<br>show global variables like &#x27;interactive_timeout&#x27; -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1、mysql-缓存\"><a href=\"#1、mysql-缓存\" class=\"headerlink\" title=\"1、mysql 缓存\"></a>1、mysql 缓存</h3><blockquote>\n<p>将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。<code>show variables like &quot;query_cache%&quot;</code>查看状态已是OFF状态。</p>\n<p>为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）</p>\n</blockquote>\n<h3 id=\"2、预处理器\"><a href=\"#2、预处理器\" class=\"headerlink\" title=\"2、预处理器\"></a>2、预处理器</h3><blockquote>\n<p>分析表是否存在，相关权限的校验（用户权限，表增删改查权限）</p>\n</blockquote>\n<h3 id=\"3、解析器Parser\"><a href=\"#3、解析器Parser\" class=\"headerlink\" title=\"3、解析器Parser\"></a>3、解析器Parser</h3><blockquote>\n<p>主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号”(“，那么右边一定要有个括号”)”</p>\n</blockquote>\n<p><strong>解析树：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png\"></p>\n<h3 id=\"4、优化器Optimizer\"><a href=\"#4、优化器Optimizer\" class=\"headerlink\" title=\"4、优化器Optimizer\"></a>4、优化器Optimizer</h3><blockquote>\n<p>成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。</p>\n<p>关联查询：决定优先查哪张表</p>\n<p>索引：决定是否使用索引或者使用哪个索引</p>\n<p>优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。</p>\n</blockquote>\n<h3 id=\"5、执行计划\"><a href=\"#5、执行计划\" class=\"headerlink\" title=\"5、执行计划\"></a>5、执行计划</h3><blockquote>\n<p>优化器得到的结果就是执行计划。</p>\n<p>那么如何去查看一条sql语句执行的成本呢？通过这个：<code>show status like &#39;Last_query_cost&#39;</code>在调整过sql语句后执行后，前后对比下。</p>\n<p>格式化成JSON形式查看：<code>EXPLAIN FORMAT=JSON SELECT t.* FROM t</code> </p>\n</blockquote>\n<h3 id=\"6、执行器\"><a href=\"#6、执行器\" class=\"headerlink\" title=\"6、执行器\"></a>6、执行器</h3><blockquote>\n<p>执行执行计划，并且读写数据。</p>\n</blockquote>\n<h4 id=\"那么从哪里读写数据呢？\"><a href=\"#那么从哪里读写数据呢？\" class=\"headerlink\" title=\"那么从哪里读写数据呢？\"></a>那么从哪里读写数据呢？</h4><p><strong>存储引擎-表类型：</strong></p>\n<blockquote>\n<p>查看mysql支持的存储引擎：<code>show engines</code> 插件式的</p>\n</blockquote>\n<ol>\n<li><p>archive</p>\n<blockquote>\n<ul>\n<li>用于历史存储</li>\n</ul>\n</blockquote>\n</li>\n<li><p>csv</p>\n<blockquote>\n<ul>\n<li>纯文本格式</li>\n<li>不支持索引</li>\n<li>用于迁移数据</li>\n</ul>\n</blockquote>\n</li>\n<li><p>innodb（5.5版本及之后默认）</p>\n<blockquote>\n<p>每次从磁盘读取的大小是16KB，一页&#x3D;16KB。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>支持事务</li>\n<li>行级锁</li>\n<li>读写并发操作</li>\n<li>聚簇索引、非聚簇索引</li>\n</ul>\n</blockquote>\n</li>\n<li><p>myisam</p>\n<blockquote>\n<ul>\n<li>锁表</li>\n<li>用于只读场景</li>\n</ul>\n</blockquote>\n</li>\n<li><p>memory</p>\n<blockquote>\n<ul>\n<li>数据放在内存</li>\n<li>用于临时表</li>\n</ul>\n</blockquote>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n</li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png\"></p>\n<p>mysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。</p>\n<p>当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做<strong>“脏页”</strong>，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页</p>\n<p>mysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做<strong>“刷脏”</strong></p>\n<p>验证bufferpool在mysql中的状态：<code>SHOW STATUS LIKE &quot;%innodb_buffer_pool%&quot;</code></p>\n<p><img src=\"https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png\"></p>\n<p>当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；</p>\n<p><strong>“redo log”：</strong></p>\n<blockquote>\n<p>作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，</p>\n<p>特性：崩溃恢复（crash safe）。</p>\n<p>为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO &gt; 随机IO）。</p>\n<p>文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。</p>\n</blockquote>\n<p><strong>“undo log”：</strong></p>\n<blockquote>\n<p>记录的是事务发生前的数据的状态</p>\n<p>保证原子性：要么全部成功，要么全部失败</p>\n<p>只有增删改的记录，查询是没有的</p>\n</blockquote>\n<p><strong>更新语句执行流程：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png\"></p>\n"},{"title":"2-Mysql索引原理与使用规则","_content":"# Mysql索引原理与使用规则\n\n## 数据库索引到底是什么\n\n> 是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。\n\n![](https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png)\n\n索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。\n\n## 索引的数据结构\n\n<font style=\"color:red\">数据结构图形工具：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</font>\n\n### 二叉查找树（Binary Search Tree）\n\n> 左子树的节点小于父节点\n>\n> 右子树的节点大于父节点\n\n![](https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png) \n\n在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）\n\n![](https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png)\n\n### 平衡二叉树（AVL Tree - Balanced Binary Search Tree）\n\n> 约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font>\n>\n> 插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整\n\n![](https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png)\n\n#### AVL 数据存储\n\n> 1. 键值：建立索引的字段值\n> 2. 数据磁盘地址\n> 3. 子节点引用\n\n![](https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png)\n\n**注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb = 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）**\n\n### 多路平衡查找树（Balanced Tree B树）\n\n> 特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。\n>\n> 大大的降低了树的深度\n\n![](https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png)\n\n#### 通过分裂、合并保持B树的平衡\n\n> 当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡\n\n![](https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png)\n\n### B+Tree 加强版多路平衡查找树\n\n> 特点：深度更低、I/O稳定、范围，排序查询的性能大幅度的提升\n>\n> 与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。\n>\n> 根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。\n>\n> 查找任何数据时，它的I/O次数都是相同的；树整体的深度决定I/O的次数。\n>\n> 叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。\n>\n> 优势：\n>\n> 1. B-Tree能解决的，B+Tree都能解决\n> 2. 扫库、扫表能力更强\n> 3. 磁盘读写能力更强\n> 4. 排序能力更强\n> 5. 效率更加稳定\n\n![](https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png)\n\n### Hash\n\n> 在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。\n>\n> 在memory存储引擎中是可以简历hash索引的。\n\n## 索引\n\n### 聚集索引（聚簇索引）\n\n> 索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引\n\n在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）\n\n### 二级索引（辅助索引、非聚集索引）\n\n创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。\n\n![](https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png)\n\n### 覆盖索引\n\n查询的数据已经包含在了索引里了；\n\n比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。\n\n```sql\nSELECT name FROM t WHERE name = '张三';\n```\n\n## 索引的使用原则\n\n列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。\n\n联合索引的最左匹配原则\n\n![](https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png)\n\n## 索引下推\n\n![](https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png)\n\n```sql\nSELECT * FROM t WHERE age = '18' AND name LIKE '%三';\n```\n\n正常情况下，存储引擎层根据索引查出`age='18'`的数据，拿到Server层再根据`name LIKE '%三'`条件再过滤；如果`age='18'`的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；\n\n所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。\n\n```sql\n-- 默认是开启 on\nshow variables like 'optimizer_switch';\n```\n\n> 得到结果值：index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on,engine_condition_pushdown=on,<font style=\"color:red\">index_condition_pushdown=on</font>,mrr=on,mrr_cost_based=on,block_nested_loop=on,batched_key_access=off,materialization=on,semijoin=on,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on,use_index_extensions=on,condition_fanout_filter=on,derived_merge=on\n>\n> index_condition_pushdown=on 表示开启索引下推\n\n\n\n","source":"_posts/Mysql/2、Mysql索引原理与使用规则.md","raw":"---\ntitle: 2-Mysql索引原理与使用规则\ntags:\n  - Mysql\ncategories:\n  - Mysql\n---\n# Mysql索引原理与使用规则\n\n## 数据库索引到底是什么\n\n> 是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。\n\n![](https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png)\n\n索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。\n\n## 索引的数据结构\n\n<font style=\"color:red\">数据结构图形工具：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</font>\n\n### 二叉查找树（Binary Search Tree）\n\n> 左子树的节点小于父节点\n>\n> 右子树的节点大于父节点\n\n![](https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png) \n\n在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）\n\n![](https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png)\n\n### 平衡二叉树（AVL Tree - Balanced Binary Search Tree）\n\n> 约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font>\n>\n> 插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整\n\n![](https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png)\n\n#### AVL 数据存储\n\n> 1. 键值：建立索引的字段值\n> 2. 数据磁盘地址\n> 3. 子节点引用\n\n![](https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png)\n\n**注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb = 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）**\n\n### 多路平衡查找树（Balanced Tree B树）\n\n> 特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。\n>\n> 大大的降低了树的深度\n\n![](https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png)\n\n#### 通过分裂、合并保持B树的平衡\n\n> 当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡\n\n![](https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png)\n\n### B+Tree 加强版多路平衡查找树\n\n> 特点：深度更低、I/O稳定、范围，排序查询的性能大幅度的提升\n>\n> 与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。\n>\n> 根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。\n>\n> 查找任何数据时，它的I/O次数都是相同的；树整体的深度决定I/O的次数。\n>\n> 叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。\n>\n> 优势：\n>\n> 1. B-Tree能解决的，B+Tree都能解决\n> 2. 扫库、扫表能力更强\n> 3. 磁盘读写能力更强\n> 4. 排序能力更强\n> 5. 效率更加稳定\n\n![](https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png)\n\n### Hash\n\n> 在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。\n>\n> 在memory存储引擎中是可以简历hash索引的。\n\n## 索引\n\n### 聚集索引（聚簇索引）\n\n> 索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引\n\n在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）\n\n### 二级索引（辅助索引、非聚集索引）\n\n创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。\n\n![](https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png)\n\n### 覆盖索引\n\n查询的数据已经包含在了索引里了；\n\n比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。\n\n```sql\nSELECT name FROM t WHERE name = '张三';\n```\n\n## 索引的使用原则\n\n列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。\n\n联合索引的最左匹配原则\n\n![](https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png)\n\n## 索引下推\n\n![](https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png)\n\n```sql\nSELECT * FROM t WHERE age = '18' AND name LIKE '%三';\n```\n\n正常情况下，存储引擎层根据索引查出`age='18'`的数据，拿到Server层再根据`name LIKE '%三'`条件再过滤；如果`age='18'`的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；\n\n所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。\n\n```sql\n-- 默认是开启 on\nshow variables like 'optimizer_switch';\n```\n\n> 得到结果值：index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on,engine_condition_pushdown=on,<font style=\"color:red\">index_condition_pushdown=on</font>,mrr=on,mrr_cost_based=on,block_nested_loop=on,batched_key_access=off,materialization=on,semijoin=on,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on,use_index_extensions=on,condition_fanout_filter=on,derived_merge=on\n>\n> index_condition_pushdown=on 表示开启索引下推\n\n\n\n","slug":"Mysql/2、Mysql索引原理与使用规则","published":1,"date":"2022-03-01T15:19:16.000Z","updated":"2022-11-25T17:39:27.045Z","_id":"clawrzual0009u42b12w4gkqr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql索引原理与使用规则\"><a href=\"#Mysql索引原理与使用规则\" class=\"headerlink\" title=\"Mysql索引原理与使用规则\"></a>Mysql索引原理与使用规则</h1><h2 id=\"数据库索引到底是什么\"><a href=\"#数据库索引到底是什么\" class=\"headerlink\" title=\"数据库索引到底是什么\"></a>数据库索引到底是什么</h2><blockquote>\n<p>是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png\"></p>\n<p>索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。</p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h2><p><font style=\"color:red\">数据结构图形工具：<a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></font></p>\n<h3 id=\"二叉查找树（Binary-Search-Tree）\"><a href=\"#二叉查找树（Binary-Search-Tree）\" class=\"headerlink\" title=\"二叉查找树（Binary Search Tree）\"></a>二叉查找树（Binary Search Tree）</h3><blockquote>\n<p>左子树的节点小于父节点</p>\n<p>右子树的节点大于父节点</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png\"> </p>\n<p>在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）</p>\n<p><img src=\"https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png\"></p>\n<h3 id=\"平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\"><a href=\"#平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\" class=\"headerlink\" title=\"平衡二叉树（AVL Tree - Balanced Binary Search Tree）\"></a>平衡二叉树（AVL Tree - Balanced Binary Search Tree）</h3><blockquote>\n<p>约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font></p>\n<p>插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png\"></p>\n<h4 id=\"AVL-数据存储\"><a href=\"#AVL-数据存储\" class=\"headerlink\" title=\"AVL 数据存储\"></a>AVL 数据存储</h4><blockquote>\n<ol>\n<li>键值：建立索引的字段值</li>\n<li>数据磁盘地址</li>\n<li>子节点引用</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png\"></p>\n<p><strong>注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb &#x3D; 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）</strong></p>\n<h3 id=\"多路平衡查找树（Balanced-Tree-B树）\"><a href=\"#多路平衡查找树（Balanced-Tree-B树）\" class=\"headerlink\" title=\"多路平衡查找树（Balanced Tree B树）\"></a>多路平衡查找树（Balanced Tree B树）</h3><blockquote>\n<p>特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。</p>\n<p>大大的降低了树的深度</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png\"></p>\n<h4 id=\"通过分裂、合并保持B树的平衡\"><a href=\"#通过分裂、合并保持B树的平衡\" class=\"headerlink\" title=\"通过分裂、合并保持B树的平衡\"></a>通过分裂、合并保持B树的平衡</h4><blockquote>\n<p>当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png\"></p>\n<h3 id=\"B-Tree-加强版多路平衡查找树\"><a href=\"#B-Tree-加强版多路平衡查找树\" class=\"headerlink\" title=\"B+Tree 加强版多路平衡查找树\"></a>B+Tree 加强版多路平衡查找树</h3><blockquote>\n<p>特点：深度更低、I&#x2F;O稳定、范围，排序查询的性能大幅度的提升</p>\n<p>与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。</p>\n<p>根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。</p>\n<p>查找任何数据时，它的I&#x2F;O次数都是相同的；树整体的深度决定I&#x2F;O的次数。</p>\n<p>叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。</p>\n<p>优势：</p>\n<ol>\n<li>B-Tree能解决的，B+Tree都能解决</li>\n<li>扫库、扫表能力更强</li>\n<li>磁盘读写能力更强</li>\n<li>排序能力更强</li>\n<li>效率更加稳定</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png\"></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><blockquote>\n<p>在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。</p>\n<p>在memory存储引擎中是可以简历hash索引的。</p>\n</blockquote>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"聚集索引（聚簇索引）\"><a href=\"#聚集索引（聚簇索引）\" class=\"headerlink\" title=\"聚集索引（聚簇索引）\"></a>聚集索引（聚簇索引）</h3><blockquote>\n<p>索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引</p>\n</blockquote>\n<p>在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）</p>\n<h3 id=\"二级索引（辅助索引、非聚集索引）\"><a href=\"#二级索引（辅助索引、非聚集索引）\" class=\"headerlink\" title=\"二级索引（辅助索引、非聚集索引）\"></a>二级索引（辅助索引、非聚集索引）</h3><p>创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png\"></p>\n<h3 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h3><p>查询的数据已经包含在了索引里了；</p>\n<p>比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> name <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"索引的使用原则\"><a href=\"#索引的使用原则\" class=\"headerlink\" title=\"索引的使用原则\"></a>索引的使用原则</h2><p>列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。</p>\n<p>联合索引的最左匹配原则</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png\"></p>\n<h2 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h2><p><img src=\"https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> age <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;18&#x27;</span> <span class=\"hljs-keyword\">AND</span> name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">&#x27;%三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>正常情况下，存储引擎层根据索引查出<code>age=&#39;18&#39;</code>的数据，拿到Server层再根据<code>name LIKE &#39;%三&#39;</code>条件再过滤；如果<code>age=&#39;18&#39;</code>的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；</p>\n<p>所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 默认是开启 on</span><br><span class=\"hljs-keyword\">show</span> variables <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;optimizer_switch&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>得到结果值：index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,engine_condition_pushdown&#x3D;on,<font style=\"color:red\">index_condition_pushdown&#x3D;on</font>,mrr&#x3D;on,mrr_cost_based&#x3D;on,block_nested_loop&#x3D;on,batched_key_access&#x3D;off,materialization&#x3D;on,semijoin&#x3D;on,loosescan&#x3D;on,firstmatch&#x3D;on,duplicateweedout&#x3D;on,subquery_materialization_cost_based&#x3D;on,use_index_extensions&#x3D;on,condition_fanout_filter&#x3D;on,derived_merge&#x3D;on</p>\n<p>index_condition_pushdown&#x3D;on 表示开启索引下推</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql索引原理与使用规则\"><a href=\"#Mysql索引原理与使用规则\" class=\"headerlink\" title=\"Mysql索引原理与使用规则\"></a>Mysql索引原理与使用规则</h1><h2 id=\"数据库索引到底是什么\"><a href=\"#数据库索引到底是什么\" class=\"headerlink\" title=\"数据库索引到底是什么\"></a>数据库索引到底是什么</h2><blockquote>\n<p>是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png\"></p>\n<p>索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。</p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h2><p><font style=\"color:red\">数据结构图形工具：<a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></font></p>\n<h3 id=\"二叉查找树（Binary-Search-Tree）\"><a href=\"#二叉查找树（Binary-Search-Tree）\" class=\"headerlink\" title=\"二叉查找树（Binary Search Tree）\"></a>二叉查找树（Binary Search Tree）</h3><blockquote>\n<p>左子树的节点小于父节点</p>\n<p>右子树的节点大于父节点</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png\"> </p>\n<p>在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）</p>\n<p><img src=\"https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png\"></p>\n<h3 id=\"平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\"><a href=\"#平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\" class=\"headerlink\" title=\"平衡二叉树（AVL Tree - Balanced Binary Search Tree）\"></a>平衡二叉树（AVL Tree - Balanced Binary Search Tree）</h3><blockquote>\n<p>约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font></p>\n<p>插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png\"></p>\n<h4 id=\"AVL-数据存储\"><a href=\"#AVL-数据存储\" class=\"headerlink\" title=\"AVL 数据存储\"></a>AVL 数据存储</h4><blockquote>\n<ol>\n<li>键值：建立索引的字段值</li>\n<li>数据磁盘地址</li>\n<li>子节点引用</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png\"></p>\n<p><strong>注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb &#x3D; 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）</strong></p>\n<h3 id=\"多路平衡查找树（Balanced-Tree-B树）\"><a href=\"#多路平衡查找树（Balanced-Tree-B树）\" class=\"headerlink\" title=\"多路平衡查找树（Balanced Tree B树）\"></a>多路平衡查找树（Balanced Tree B树）</h3><blockquote>\n<p>特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。</p>\n<p>大大的降低了树的深度</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png\"></p>\n<h4 id=\"通过分裂、合并保持B树的平衡\"><a href=\"#通过分裂、合并保持B树的平衡\" class=\"headerlink\" title=\"通过分裂、合并保持B树的平衡\"></a>通过分裂、合并保持B树的平衡</h4><blockquote>\n<p>当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png\"></p>\n<h3 id=\"B-Tree-加强版多路平衡查找树\"><a href=\"#B-Tree-加强版多路平衡查找树\" class=\"headerlink\" title=\"B+Tree 加强版多路平衡查找树\"></a>B+Tree 加强版多路平衡查找树</h3><blockquote>\n<p>特点：深度更低、I&#x2F;O稳定、范围，排序查询的性能大幅度的提升</p>\n<p>与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。</p>\n<p>根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。</p>\n<p>查找任何数据时，它的I&#x2F;O次数都是相同的；树整体的深度决定I&#x2F;O的次数。</p>\n<p>叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。</p>\n<p>优势：</p>\n<ol>\n<li>B-Tree能解决的，B+Tree都能解决</li>\n<li>扫库、扫表能力更强</li>\n<li>磁盘读写能力更强</li>\n<li>排序能力更强</li>\n<li>效率更加稳定</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png\"></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><blockquote>\n<p>在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。</p>\n<p>在memory存储引擎中是可以简历hash索引的。</p>\n</blockquote>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"聚集索引（聚簇索引）\"><a href=\"#聚集索引（聚簇索引）\" class=\"headerlink\" title=\"聚集索引（聚簇索引）\"></a>聚集索引（聚簇索引）</h3><blockquote>\n<p>索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引</p>\n</blockquote>\n<p>在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）</p>\n<h3 id=\"二级索引（辅助索引、非聚集索引）\"><a href=\"#二级索引（辅助索引、非聚集索引）\" class=\"headerlink\" title=\"二级索引（辅助索引、非聚集索引）\"></a>二级索引（辅助索引、非聚集索引）</h3><p>创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png\"></p>\n<h3 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h3><p>查询的数据已经包含在了索引里了；</p>\n<p>比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> name <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"索引的使用原则\"><a href=\"#索引的使用原则\" class=\"headerlink\" title=\"索引的使用原则\"></a>索引的使用原则</h2><p>列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。</p>\n<p>联合索引的最左匹配原则</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png\"></p>\n<h2 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h2><p><img src=\"https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> age <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;18&#x27;</span> <span class=\"hljs-keyword\">AND</span> name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">&#x27;%三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>正常情况下，存储引擎层根据索引查出<code>age=&#39;18&#39;</code>的数据，拿到Server层再根据<code>name LIKE &#39;%三&#39;</code>条件再过滤；如果<code>age=&#39;18&#39;</code>的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；</p>\n<p>所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 默认是开启 on</span><br><span class=\"hljs-keyword\">show</span> variables <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;optimizer_switch&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>得到结果值：index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,engine_condition_pushdown&#x3D;on,<font style=\"color:red\">index_condition_pushdown&#x3D;on</font>,mrr&#x3D;on,mrr_cost_based&#x3D;on,block_nested_loop&#x3D;on,batched_key_access&#x3D;off,materialization&#x3D;on,semijoin&#x3D;on,loosescan&#x3D;on,firstmatch&#x3D;on,duplicateweedout&#x3D;on,subquery_materialization_cost_based&#x3D;on,use_index_extensions&#x3D;on,condition_fanout_filter&#x3D;on,derived_merge&#x3D;on</p>\n<p>index_condition_pushdown&#x3D;on 表示开启索引下推</p>\n</blockquote>\n"},{"title":"3-Mysql事务与锁详解","_content":"# Mysql事务与锁详解\n\n## 数据库事务的定义\n\n> 事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。\n\n## 事务的四大特性（ACID）\n\n### 原子性（Atomicity）\n\n> 最小逻辑单位，不可分割，要么都成功，要么都失败。\n>\n> 依赖事务日志 undo.log实现。\n\n### 一致性（Consistency）\n\n> 事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束\n\n### <font style=\"color:red\">隔离性（Isolation）</font>\n\n> 多个事务间互不干扰。\n\n### 持久性（Durability）\n\n> 依赖 redo.log +双写缓冲实现。\n\n## 事务并发的问题\n\n### 脏读\n\n> 在一个事务内读取到另一个事务未提交的数据。\n\n![image-20220302224922097](https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png)\n\n### 不可重复读\n\n> 在一个事务内读取到另一个事务已提交的数据。\n>\n> 更新update或删除delete导致的数据变化叫做不可重复读。\n\n![](https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png)\n\n### 幻读\n\n> 在一个事务内读取到另一个事务已提交的插入数据。\n>\n> 只有当插入insert导致行数的增加才叫做幻读。\n\n![](https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png)\n\n**总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。**\n\n## 事务隔离级别\n\n### Read Uncommitted(未提交读)一未解决任何并发问题\n> 事务未提交的数据对其他事务也是可见的，会出现脏读。\n\n### Read Committed(已提交读)一解决脏读问题\n> 一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。\n\n### Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\n> 在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。\n>\n> 但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。\n\n### Serializable(串行化)一解决所有问题\n> 最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。\n\n**Mysql InnoDB 对事务隔离级别的支持程度**\n\n![](https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png)\n\n\n\n**快照读：**\t***<u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u>***\n\n```sql\n-- 普通的select语句\nSELECT * FROM t;\n```\n\n**当前读：**\t***<u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u>***\n\n```sql\n-- 加锁的select语句\nSELECT * FROM t FOR UPDATE\n-- DML语句\n```\n\n**RC和RR的区别**\n\nRR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。\n\nRC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。\n\n具体的机制就是两种隔离级别的ReadView的差异。\n\n## Mysql 锁基本类型\n\n> **行锁与表锁区别**\n>\n> 锁定粒度：表锁\t>\t行锁\n>\n> 加锁效率：表锁\t>\t行锁\n>\n> 冲突概率：表锁\t>\t行锁\n>\n> 并发性能：表锁\t<\t行锁\n\n![](https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png)\n\n1、一张表没有索引，为什么会锁表？\n\n> 一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。\n\n2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？\n\n> 二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。\n\n### InnoDB Locking\n\n#### 行锁：共享锁（Shared Locks）\n\n> 共享锁又称为读锁，简称S锁\n>\n> 共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。\n\n加锁方式：\n\n```sql\nSELECT * FROM t WHERE id = 1 LOCK IN SHARE MODE;\n```\n\n释放锁方式：事务结束释放锁\n\n#### 行锁：排他锁（Exclusive Locks）\n\n> 排他锁又称为写锁，简称X锁。\n>\n> 排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。\n\n加锁方式：\n\n+ 自动：`DELETE/UPDATE/INSERT`DML语句默认动加上排他锁（X锁）\n+ 手动：`FOR UPDATE`语句\n\n释放锁方式：事务结束释放锁\n\n#### 意向共享锁（IS）/意向排他锁（IX）\n\n> 意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。\n>\n> 作用：为了提升加表锁的效率。\n\n+ **意向共享锁（Intention Shared Locks，简称IS锁）：**表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。\n+ **意向排他锁（Intention Exclusive Locks，简称IX锁）：**表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。\n\n### 锁的算法（在什么样的情况下锁的范围）\n\n![](https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png)\n\n#### 记录锁（Record Locks）：锁定记录\n\n> 当你使用`FOR UPDATE`语句进行加锁时，精准命中一条记录，就会锁住该条记录；\n\n![](https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png)\n\n#### 间隙锁（Gap locks）:锁定范围\n\n> 当你使用`FOR UPDATE`语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；\n>\n> 注意：相同的间隙锁不排斥，排斥的是插入\n>\n> > 比如我使用\n> >\n> > ```sql\n> > SELECT * FROM t WHERE id = 6 FOR UPDATE;\n> > ```\n> >\n> > 这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥\n> >\n> > ```sql\n> > INSERT INTO `t`(`id`,`name`) VALUES (5,\"张三\");\n> > INSERT INTO `t`(`id`,`name`) VALUES (6,\"张三\");\n> > ```\n\n![](https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png)\n\n#### 临键锁（Nest-key Locks）：锁定范围加记录\n\n> InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；\n>\n> 条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；\n>\n> 会锁住最后一个记录（Record）的下一个key的左开右闭的区间。\n\n![](https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png)\n\n\n\n\n\n\n\n\n\n","source":"_posts/Mysql/3、Mysql事务与锁详解.md","raw":"---\ntitle: 3-Mysql事务与锁详解\ntags:\n  - Mysql\n  - 锁\ncategories:\n  - Mysql\n---\n# Mysql事务与锁详解\n\n## 数据库事务的定义\n\n> 事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。\n\n## 事务的四大特性（ACID）\n\n### 原子性（Atomicity）\n\n> 最小逻辑单位，不可分割，要么都成功，要么都失败。\n>\n> 依赖事务日志 undo.log实现。\n\n### 一致性（Consistency）\n\n> 事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束\n\n### <font style=\"color:red\">隔离性（Isolation）</font>\n\n> 多个事务间互不干扰。\n\n### 持久性（Durability）\n\n> 依赖 redo.log +双写缓冲实现。\n\n## 事务并发的问题\n\n### 脏读\n\n> 在一个事务内读取到另一个事务未提交的数据。\n\n![image-20220302224922097](https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png)\n\n### 不可重复读\n\n> 在一个事务内读取到另一个事务已提交的数据。\n>\n> 更新update或删除delete导致的数据变化叫做不可重复读。\n\n![](https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png)\n\n### 幻读\n\n> 在一个事务内读取到另一个事务已提交的插入数据。\n>\n> 只有当插入insert导致行数的增加才叫做幻读。\n\n![](https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png)\n\n**总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。**\n\n## 事务隔离级别\n\n### Read Uncommitted(未提交读)一未解决任何并发问题\n> 事务未提交的数据对其他事务也是可见的，会出现脏读。\n\n### Read Committed(已提交读)一解决脏读问题\n> 一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。\n\n### Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\n> 在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。\n>\n> 但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。\n\n### Serializable(串行化)一解决所有问题\n> 最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。\n\n**Mysql InnoDB 对事务隔离级别的支持程度**\n\n![](https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png)\n\n\n\n**快照读：**\t***<u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u>***\n\n```sql\n-- 普通的select语句\nSELECT * FROM t;\n```\n\n**当前读：**\t***<u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u>***\n\n```sql\n-- 加锁的select语句\nSELECT * FROM t FOR UPDATE\n-- DML语句\n```\n\n**RC和RR的区别**\n\nRR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。\n\nRC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。\n\n具体的机制就是两种隔离级别的ReadView的差异。\n\n## Mysql 锁基本类型\n\n> **行锁与表锁区别**\n>\n> 锁定粒度：表锁\t>\t行锁\n>\n> 加锁效率：表锁\t>\t行锁\n>\n> 冲突概率：表锁\t>\t行锁\n>\n> 并发性能：表锁\t<\t行锁\n\n![](https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png)\n\n1、一张表没有索引，为什么会锁表？\n\n> 一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。\n\n2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？\n\n> 二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。\n\n### InnoDB Locking\n\n#### 行锁：共享锁（Shared Locks）\n\n> 共享锁又称为读锁，简称S锁\n>\n> 共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。\n\n加锁方式：\n\n```sql\nSELECT * FROM t WHERE id = 1 LOCK IN SHARE MODE;\n```\n\n释放锁方式：事务结束释放锁\n\n#### 行锁：排他锁（Exclusive Locks）\n\n> 排他锁又称为写锁，简称X锁。\n>\n> 排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。\n\n加锁方式：\n\n+ 自动：`DELETE/UPDATE/INSERT`DML语句默认动加上排他锁（X锁）\n+ 手动：`FOR UPDATE`语句\n\n释放锁方式：事务结束释放锁\n\n#### 意向共享锁（IS）/意向排他锁（IX）\n\n> 意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。\n>\n> 作用：为了提升加表锁的效率。\n\n+ **意向共享锁（Intention Shared Locks，简称IS锁）：**表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。\n+ **意向排他锁（Intention Exclusive Locks，简称IX锁）：**表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。\n\n### 锁的算法（在什么样的情况下锁的范围）\n\n![](https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png)\n\n#### 记录锁（Record Locks）：锁定记录\n\n> 当你使用`FOR UPDATE`语句进行加锁时，精准命中一条记录，就会锁住该条记录；\n\n![](https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png)\n\n#### 间隙锁（Gap locks）:锁定范围\n\n> 当你使用`FOR UPDATE`语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；\n>\n> 注意：相同的间隙锁不排斥，排斥的是插入\n>\n> > 比如我使用\n> >\n> > ```sql\n> > SELECT * FROM t WHERE id = 6 FOR UPDATE;\n> > ```\n> >\n> > 这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥\n> >\n> > ```sql\n> > INSERT INTO `t`(`id`,`name`) VALUES (5,\"张三\");\n> > INSERT INTO `t`(`id`,`name`) VALUES (6,\"张三\");\n> > ```\n\n![](https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png)\n\n#### 临键锁（Nest-key Locks）：锁定范围加记录\n\n> InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；\n>\n> 条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；\n>\n> 会锁住最后一个记录（Record）的下一个key的左开右闭的区间。\n\n![](https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png)\n\n\n\n\n\n\n\n\n\n","slug":"Mysql/3、Mysql事务与锁详解","published":1,"date":"2022-07-07T08:15:57.607Z","updated":"2022-11-25T17:39:27.042Z","_id":"clawrzuan000au42bb8nzby08","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql事务与锁详解\"><a href=\"#Mysql事务与锁详解\" class=\"headerlink\" title=\"Mysql事务与锁详解\"></a>Mysql事务与锁详解</h1><h2 id=\"数据库事务的定义\"><a href=\"#数据库事务的定义\" class=\"headerlink\" title=\"数据库事务的定义\"></a>数据库事务的定义</h2><blockquote>\n<p>事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。</p>\n</blockquote>\n<h2 id=\"事务的四大特性（ACID）\"><a href=\"#事务的四大特性（ACID）\" class=\"headerlink\" title=\"事务的四大特性（ACID）\"></a>事务的四大特性（ACID）</h2><h3 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h3><blockquote>\n<p>最小逻辑单位，不可分割，要么都成功，要么都失败。</p>\n<p>依赖事务日志 undo.log实现。</p>\n</blockquote>\n<h3 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h3><blockquote>\n<p>事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束</p>\n</blockquote>\n<h3 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a><font style=\"color:red\">隔离性（Isolation）</font></h3><blockquote>\n<p>多个事务间互不干扰。</p>\n</blockquote>\n<h3 id=\"持久性（Durability）\"><a href=\"#持久性（Durability）\" class=\"headerlink\" title=\"持久性（Durability）\"></a>持久性（Durability）</h3><blockquote>\n<p>依赖 redo.log +双写缓冲实现。</p>\n</blockquote>\n<h2 id=\"事务并发的问题\"><a href=\"#事务并发的问题\" class=\"headerlink\" title=\"事务并发的问题\"></a>事务并发的问题</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><blockquote>\n<p>在一个事务内读取到另一个事务未提交的数据。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png\" alt=\"image-20220302224922097\"></p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的数据。</p>\n<p>更新update或删除delete导致的数据变化叫做不可重复读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png\"></p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的插入数据。</p>\n<p>只有当插入insert导致行数的增加才叫做幻读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png\"></p>\n<p><strong>总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</strong></p>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><h3 id=\"Read-Uncommitted-未提交读-一未解决任何并发问题\"><a href=\"#Read-Uncommitted-未提交读-一未解决任何并发问题\" class=\"headerlink\" title=\"Read Uncommitted(未提交读)一未解决任何并发问题\"></a>Read Uncommitted(未提交读)一未解决任何并发问题</h3><blockquote>\n<p>事务未提交的数据对其他事务也是可见的，会出现脏读。</p>\n</blockquote>\n<h3 id=\"Read-Committed-已提交读-一解决脏读问题\"><a href=\"#Read-Committed-已提交读-一解决脏读问题\" class=\"headerlink\" title=\"Read Committed(已提交读)一解决脏读问题\"></a>Read Committed(已提交读)一解决脏读问题</h3><blockquote>\n<p>一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。</p>\n</blockquote>\n<h3 id=\"Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\"><a href=\"#Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\" class=\"headerlink\" title=\"Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\"></a>Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题</h3><blockquote>\n<p>在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。</p>\n<p>但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。</p>\n</blockquote>\n<h3 id=\"Serializable-串行化-一解决所有问题\"><a href=\"#Serializable-串行化-一解决所有问题\" class=\"headerlink\" title=\"Serializable(串行化)一解决所有问题\"></a>Serializable(串行化)一解决所有问题</h3><blockquote>\n<p>最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。</p>\n</blockquote>\n<p><strong>Mysql InnoDB 对事务隔离级别的支持程度</strong></p>\n<p><img src=\"https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png\"></p>\n<p><strong>快照读：</strong>\t<em><strong><u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 普通的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t;<br></code></pre></td></tr></table></figure>\n\n<p><strong>当前读：</strong>\t<em><strong><u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 加锁的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span><br><span class=\"hljs-comment\">-- DML语句</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>RC和RR的区别</strong></p>\n<p>RR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。</p>\n<p>RC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。</p>\n<p>具体的机制就是两种隔离级别的ReadView的差异。</p>\n<h2 id=\"Mysql-锁基本类型\"><a href=\"#Mysql-锁基本类型\" class=\"headerlink\" title=\"Mysql 锁基本类型\"></a>Mysql 锁基本类型</h2><blockquote>\n<p><strong>行锁与表锁区别</strong></p>\n<p>锁定粒度：表锁\t&gt;\t行锁</p>\n<p>加锁效率：表锁\t&gt;\t行锁</p>\n<p>冲突概率：表锁\t&gt;\t行锁</p>\n<p>并发性能：表锁\t&lt;\t行锁</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png\"></p>\n<p>1、一张表没有索引，为什么会锁表？</p>\n<blockquote>\n<p>一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。</p>\n</blockquote>\n<p>2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？</p>\n<blockquote>\n<p>二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。</p>\n</blockquote>\n<h3 id=\"InnoDB-Locking\"><a href=\"#InnoDB-Locking\" class=\"headerlink\" title=\"InnoDB Locking\"></a>InnoDB Locking</h3><h4 id=\"行锁：共享锁（Shared-Locks）\"><a href=\"#行锁：共享锁（Shared-Locks）\" class=\"headerlink\" title=\"行锁：共享锁（Shared Locks）\"></a>行锁：共享锁（Shared Locks）</h4><blockquote>\n<p>共享锁又称为读锁，简称S锁</p>\n<p>共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> LOCK <span class=\"hljs-keyword\">IN</span> SHARE MODE;<br></code></pre></td></tr></table></figure>\n\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"行锁：排他锁（Exclusive-Locks）\"><a href=\"#行锁：排他锁（Exclusive-Locks）\" class=\"headerlink\" title=\"行锁：排他锁（Exclusive Locks）\"></a>行锁：排他锁（Exclusive Locks）</h4><blockquote>\n<p>排他锁又称为写锁，简称X锁。</p>\n<p>排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<ul>\n<li>自动：<code>DELETE/UPDATE/INSERT</code>DML语句默认动加上排他锁（X锁）</li>\n<li>手动：<code>FOR UPDATE</code>语句</li>\n</ul>\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"意向共享锁（IS）-x2F-意向排他锁（IX）\"><a href=\"#意向共享锁（IS）-x2F-意向排他锁（IX）\" class=\"headerlink\" title=\"意向共享锁（IS）&#x2F;意向排他锁（IX）\"></a>意向共享锁（IS）&#x2F;意向排他锁（IX）</h4><blockquote>\n<p>意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。</p>\n<p>作用：为了提升加表锁的效率。</p>\n</blockquote>\n<ul>\n<li><strong>意向共享锁（Intention Shared Locks，简称IS锁）：</strong>表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。</li>\n<li><strong>意向排他锁（Intention Exclusive Locks，简称IX锁）：</strong>表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。</li>\n</ul>\n<h3 id=\"锁的算法（在什么样的情况下锁的范围）\"><a href=\"#锁的算法（在什么样的情况下锁的范围）\" class=\"headerlink\" title=\"锁的算法（在什么样的情况下锁的范围）\"></a>锁的算法（在什么样的情况下锁的范围）</h3><p><img src=\"https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png\"></p>\n<h4 id=\"记录锁（Record-Locks）：锁定记录\"><a href=\"#记录锁（Record-Locks）：锁定记录\" class=\"headerlink\" title=\"记录锁（Record Locks）：锁定记录\"></a>记录锁（Record Locks）：锁定记录</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行加锁时，精准命中一条记录，就会锁住该条记录；</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png\"></p>\n<h4 id=\"间隙锁（Gap-locks）-锁定范围\"><a href=\"#间隙锁（Gap-locks）-锁定范围\" class=\"headerlink\" title=\"间隙锁（Gap locks）:锁定范围\"></a>间隙锁（Gap locks）:锁定范围</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；</p>\n<p>注意：相同的间隙锁不排斥，排斥的是插入</p>\n<blockquote>\n<p>比如我使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">5</span>,&quot;张三&quot;);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">6</span>,&quot;张三&quot;);<br></code></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png\"></p>\n<h4 id=\"临键锁（Nest-key-Locks）：锁定范围加记录\"><a href=\"#临键锁（Nest-key-Locks）：锁定范围加记录\" class=\"headerlink\" title=\"临键锁（Nest-key Locks）：锁定范围加记录\"></a>临键锁（Nest-key Locks）：锁定范围加记录</h4><blockquote>\n<p>InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；</p>\n<p>条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；</p>\n<p>会锁住最后一个记录（Record）的下一个key的左开右闭的区间。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql事务与锁详解\"><a href=\"#Mysql事务与锁详解\" class=\"headerlink\" title=\"Mysql事务与锁详解\"></a>Mysql事务与锁详解</h1><h2 id=\"数据库事务的定义\"><a href=\"#数据库事务的定义\" class=\"headerlink\" title=\"数据库事务的定义\"></a>数据库事务的定义</h2><blockquote>\n<p>事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。</p>\n</blockquote>\n<h2 id=\"事务的四大特性（ACID）\"><a href=\"#事务的四大特性（ACID）\" class=\"headerlink\" title=\"事务的四大特性（ACID）\"></a>事务的四大特性（ACID）</h2><h3 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h3><blockquote>\n<p>最小逻辑单位，不可分割，要么都成功，要么都失败。</p>\n<p>依赖事务日志 undo.log实现。</p>\n</blockquote>\n<h3 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h3><blockquote>\n<p>事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束</p>\n</blockquote>\n<h3 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a><font style=\"color:red\">隔离性（Isolation）</font></h3><blockquote>\n<p>多个事务间互不干扰。</p>\n</blockquote>\n<h3 id=\"持久性（Durability）\"><a href=\"#持久性（Durability）\" class=\"headerlink\" title=\"持久性（Durability）\"></a>持久性（Durability）</h3><blockquote>\n<p>依赖 redo.log +双写缓冲实现。</p>\n</blockquote>\n<h2 id=\"事务并发的问题\"><a href=\"#事务并发的问题\" class=\"headerlink\" title=\"事务并发的问题\"></a>事务并发的问题</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><blockquote>\n<p>在一个事务内读取到另一个事务未提交的数据。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png\" alt=\"image-20220302224922097\"></p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的数据。</p>\n<p>更新update或删除delete导致的数据变化叫做不可重复读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png\"></p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的插入数据。</p>\n<p>只有当插入insert导致行数的增加才叫做幻读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png\"></p>\n<p><strong>总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</strong></p>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><h3 id=\"Read-Uncommitted-未提交读-一未解决任何并发问题\"><a href=\"#Read-Uncommitted-未提交读-一未解决任何并发问题\" class=\"headerlink\" title=\"Read Uncommitted(未提交读)一未解决任何并发问题\"></a>Read Uncommitted(未提交读)一未解决任何并发问题</h3><blockquote>\n<p>事务未提交的数据对其他事务也是可见的，会出现脏读。</p>\n</blockquote>\n<h3 id=\"Read-Committed-已提交读-一解决脏读问题\"><a href=\"#Read-Committed-已提交读-一解决脏读问题\" class=\"headerlink\" title=\"Read Committed(已提交读)一解决脏读问题\"></a>Read Committed(已提交读)一解决脏读问题</h3><blockquote>\n<p>一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。</p>\n</blockquote>\n<h3 id=\"Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\"><a href=\"#Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\" class=\"headerlink\" title=\"Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\"></a>Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题</h3><blockquote>\n<p>在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。</p>\n<p>但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。</p>\n</blockquote>\n<h3 id=\"Serializable-串行化-一解决所有问题\"><a href=\"#Serializable-串行化-一解决所有问题\" class=\"headerlink\" title=\"Serializable(串行化)一解决所有问题\"></a>Serializable(串行化)一解决所有问题</h3><blockquote>\n<p>最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。</p>\n</blockquote>\n<p><strong>Mysql InnoDB 对事务隔离级别的支持程度</strong></p>\n<p><img src=\"https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png\"></p>\n<p><strong>快照读：</strong>\t<em><strong><u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 普通的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t;<br></code></pre></td></tr></table></figure>\n\n<p><strong>当前读：</strong>\t<em><strong><u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 加锁的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span><br><span class=\"hljs-comment\">-- DML语句</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>RC和RR的区别</strong></p>\n<p>RR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。</p>\n<p>RC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。</p>\n<p>具体的机制就是两种隔离级别的ReadView的差异。</p>\n<h2 id=\"Mysql-锁基本类型\"><a href=\"#Mysql-锁基本类型\" class=\"headerlink\" title=\"Mysql 锁基本类型\"></a>Mysql 锁基本类型</h2><blockquote>\n<p><strong>行锁与表锁区别</strong></p>\n<p>锁定粒度：表锁\t&gt;\t行锁</p>\n<p>加锁效率：表锁\t&gt;\t行锁</p>\n<p>冲突概率：表锁\t&gt;\t行锁</p>\n<p>并发性能：表锁\t&lt;\t行锁</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png\"></p>\n<p>1、一张表没有索引，为什么会锁表？</p>\n<blockquote>\n<p>一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。</p>\n</blockquote>\n<p>2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？</p>\n<blockquote>\n<p>二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。</p>\n</blockquote>\n<h3 id=\"InnoDB-Locking\"><a href=\"#InnoDB-Locking\" class=\"headerlink\" title=\"InnoDB Locking\"></a>InnoDB Locking</h3><h4 id=\"行锁：共享锁（Shared-Locks）\"><a href=\"#行锁：共享锁（Shared-Locks）\" class=\"headerlink\" title=\"行锁：共享锁（Shared Locks）\"></a>行锁：共享锁（Shared Locks）</h4><blockquote>\n<p>共享锁又称为读锁，简称S锁</p>\n<p>共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> LOCK <span class=\"hljs-keyword\">IN</span> SHARE MODE;<br></code></pre></td></tr></table></figure>\n\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"行锁：排他锁（Exclusive-Locks）\"><a href=\"#行锁：排他锁（Exclusive-Locks）\" class=\"headerlink\" title=\"行锁：排他锁（Exclusive Locks）\"></a>行锁：排他锁（Exclusive Locks）</h4><blockquote>\n<p>排他锁又称为写锁，简称X锁。</p>\n<p>排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<ul>\n<li>自动：<code>DELETE/UPDATE/INSERT</code>DML语句默认动加上排他锁（X锁）</li>\n<li>手动：<code>FOR UPDATE</code>语句</li>\n</ul>\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"意向共享锁（IS）-x2F-意向排他锁（IX）\"><a href=\"#意向共享锁（IS）-x2F-意向排他锁（IX）\" class=\"headerlink\" title=\"意向共享锁（IS）&#x2F;意向排他锁（IX）\"></a>意向共享锁（IS）&#x2F;意向排他锁（IX）</h4><blockquote>\n<p>意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。</p>\n<p>作用：为了提升加表锁的效率。</p>\n</blockquote>\n<ul>\n<li><strong>意向共享锁（Intention Shared Locks，简称IS锁）：</strong>表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。</li>\n<li><strong>意向排他锁（Intention Exclusive Locks，简称IX锁）：</strong>表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。</li>\n</ul>\n<h3 id=\"锁的算法（在什么样的情况下锁的范围）\"><a href=\"#锁的算法（在什么样的情况下锁的范围）\" class=\"headerlink\" title=\"锁的算法（在什么样的情况下锁的范围）\"></a>锁的算法（在什么样的情况下锁的范围）</h3><p><img src=\"https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png\"></p>\n<h4 id=\"记录锁（Record-Locks）：锁定记录\"><a href=\"#记录锁（Record-Locks）：锁定记录\" class=\"headerlink\" title=\"记录锁（Record Locks）：锁定记录\"></a>记录锁（Record Locks）：锁定记录</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行加锁时，精准命中一条记录，就会锁住该条记录；</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png\"></p>\n<h4 id=\"间隙锁（Gap-locks）-锁定范围\"><a href=\"#间隙锁（Gap-locks）-锁定范围\" class=\"headerlink\" title=\"间隙锁（Gap locks）:锁定范围\"></a>间隙锁（Gap locks）:锁定范围</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；</p>\n<p>注意：相同的间隙锁不排斥，排斥的是插入</p>\n<blockquote>\n<p>比如我使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">5</span>,&quot;张三&quot;);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">6</span>,&quot;张三&quot;);<br></code></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png\"></p>\n<h4 id=\"临键锁（Nest-key-Locks）：锁定范围加记录\"><a href=\"#临键锁（Nest-key-Locks）：锁定范围加记录\" class=\"headerlink\" title=\"临键锁（Nest-key Locks）：锁定范围加记录\"></a>临键锁（Nest-key Locks）：锁定范围加记录</h4><blockquote>\n<p>InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；</p>\n<p>条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；</p>\n<p>会锁住最后一个记录（Record）的下一个key的左开右闭的区间。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png\"></p>\n"},{"title":"React基础入门教程","_content":"\n# React 基础入门教程\n\n[React中文官网](https://react.docschina.org/)\n\n**demo样例：**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>TEST</title>\n</head>\n<body>\n<div id=\"test\"></div>\n</body>\n\n<!-- react核心库 -->\n<script src=\"https://unpkg.com/react@17/umd/react.production.min.js\" crossorigin></script>\n<!-- React虚拟DOM，用于支持react操作DOM -->\n<script src=\"https://unpkg.com/react-dom@17/umd/react-dom.production.min.js\" crossorigin></script>\n<!-- 用于将jsx转为js -->\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\n<script type=\"text/babel\">\n\t//1.创建虚拟DOM\n    const DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n    //2.渲染虚拟DOM到页面\n    ReactDOM.render(DOM,document.getElementById('test'))\n</script>\n</html>\n```\n\n## JSX规则\n```\n1. 定义虚拟DOM时，不要写引号。\n2. 标签中混入JS表达式时要用{}。\n3. 样式的类名指定不要用class，要用className。\n4. 内联样式，要用style={{key:value}}的形式去写。\n5. 只有一个根标签\n6. 标签必须闭合\n7. 标签首字母\n   1. 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错\n   2. 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错\n```\n\n## 创建虚拟DOM方式\n\n### 方式一（JSX）\n\n```jsx\n//1.创建虚拟DOM\nconst DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n//2.渲染虚拟DOM到页面\nReactDOM.render(DOM,document.getElementById('test'))\n```\n\n### 方式二（JS）\n\n```js\n//1.创建虚拟DOM\nconst VDOM = React.createElement('h1',{id:'title'},React.createElement('span',{},'Hello,React'))\n//2.渲染虚拟DOM到页面\nReactDOM.render(VDOM,document.getElementById('test'))\n```\n\n## 组件的定义方式\n\n### 方式一（函数式组件）\n\n```jsx\n\t\t//1.创建函数式组件\n\t\tfunction MyComponent(){\n\t\t\tconsole.log(this); //此处的this是undefined，因为babel编译后开启了严格模式\n\t\t\treturn <h2>我是用函数定义的组件(适用于【简单组件】的定义)</h2>\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n### 方式二（类式组件）\n\n```jsx\n\t\t//1.创建类式组件\n\t\tclass MyComponent extends React.Component {\n\t\t\trender(){\n\t\t\t\t//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。\n\t\t\t\t//render中的this是谁？—— MyComponent的实例对象 <=> MyComponent组件实例对象。\n\t\t\t\tconsole.log('render中的this:',this);\n\t\t\t\treturn <h2>我是用类定义的组件(适用于【复杂组件】的定义)</h2>\n\t\t\t}\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。\n\t\t\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n## 组件实例的三大属性\n\n### State（状态）\n\n> React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。\n>\n> React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n\n```jsx\nclass TestComponent extends React.Component {\n    //在组件中定义state属性，并且给它赋值。state必须是个对象\n    state = {\n        flag: false\n    }\n    changeFlag(flag){\n        console.log(\"changeFlag\")\n        //必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面\n        //【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。\n        this.setState({flag: flag})\n        //【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！\n\t\t//this.state.flag = !flag //这是错误的写法\n    }\n\trender() {\n        console.log(\"render\")\n        //取出赋值属性\n        const {flag} = this.state\n        return (\n            <div>\n                <h1>今天天气好{flag ? \"炎热\" : \"凉爽\"}</h1>\n                <button onClick={() => this.changeFlag(!this.state.flag)}>点击我</button>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n### Props（传参）\n\n> state 和 props 主要的区别在于 **props** 是不可变的，而 state 可以根据与用户交互来改变。\n>\n> 这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n\n```jsx\nclass TestComponent extends React.Component {\n    render() {\n        console.log(\"render\")\n        //取出传过来参数\n        const {className, grade, list} = this.props\n        return (\n            <div>\n                 <h2>{schoolName}-年级：{grade}-{classNum}班</h2>\n                <div>\n                    {\n                        list.map((item, index) => {\n                            return (\n                                <ul key={item.id} onClick={() => this.alertInfo(item)}>\n                                    <li>姓名：{item.name}</li>\n                                    <li>年龄：{item.age}</li>\n                                </ul>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nconst cla = {\n    schoolName: \"XX高级中学\",\n    classNum: 1,\n    grade: \"高中\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla}/>, document.getElementById(\"test\"))\n```\n\n#### 参数限制\n\n> 自 React v15.5 起，`React.PropTypes` 已移入另一个包中。请使用 [`prop-types` 库](https://www.npmjs.com/package/prop-types) 代替。\n\n```js\nclass TestComponent extends React.Component{}...//组件类\n//对标签属性进行类型、必要性的限制\nTestComponent.propTypes = {\n    schoolName: PropTypes.string.isRequired,    //限制schoolName必传，且为字符串\n    classNum: PropTypes.number,                 //限制classNum为数值\n    afterSchool: PropTypes.func.isRequired,     //限制afterSchool为函数\n}\n\n//指定默认标签属性值\nTestComponent.defaultProps = {\n    grade:'高中',   //grade默认值\n    classNum:1,         //classNum默认值\n}\n\nconst cla = {\n    schoolName:\"江宁高级中学\",\n    classNum: 1,\n    // grade: \"高三\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla} afterSchool={afterSchool}/>, document.getElementById(\"test\"))\n\nfunction afterSchool() {\n    console.info(\"放学啦。。。\");\n}\n```\n\n**函数式组件使用**\n\n```js\n//创建组件\nfunction Person (props){\n    const {name,age,sex} = props\n    return (\n        <ul>\n            <li>姓名：{name}</li>\n            <li>性别：{sex}</li>\n            <li>年龄：{age}</li>\n        </ul>\n\t)\n}\nPerson.propTypes = {\n    name:PropTypes.string.isRequired, //限制name必传，且为字符串\n    sex:PropTypes.string,//限制sex为字符串\n    age:PropTypes.number,//限制age为数值\n}\n\n//指定默认标签属性值\nPerson.defaultProps = {\n    sex:'男',//sex默认值为男\n    age:18 //age默认值为18\n}\n//渲染组件到页面\nReactDOM.render(<Person name=\"jerry\"/>,document.getElementById('test'))\n```\n\n### Ref（可以获取真实DOM节点）\n\n> React提供的这个`ref`属性，**表示为对组件真正实例的引用，其实就是`ReactDOM.render()返回的组件实例`**；需要区分一下，`ReactDOM.render()`渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。\n>\n> **通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref**\n>\n> 官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 [状态提升](https://react.docschina.org/docs/lifting-state-up.html) 以获取更多有关示例\n\n\n#### 字符串形式\n\n```js\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {test1} = this.refs;\n        console.info(test1, test1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref=\"test1\" placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### 回调函数形式\n\n```js\n//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {input1} = this;\n        console.info(input1, input1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    // 方式二\n    saveInput = (a)=>{\n        this.input1 = a;\n        console.log('@',a);\n    }\n    render() {\n        return (\n            <div>\n                {/*JSX里的注释得这么写*/}\n                {/* 方式一 */}\n                {/* a标识当前元素，{}方法体里表示：将当前元素a赋值给当前实例中的属性input1 */}\n                {/* <input ref={a => {this.input1 = a;console.log('@',a)}} placeholder=\"test1\"/>*/}\n                {/* 方式二 */}\n                <input ref={this.saveInput}  placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### `React.createRef()`形式\n\n```js\n//React 16.3 版本引入的 React.createRef() API\n//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。\nclass TestComponent extends React.Component {\n    input1 = React.createRef();\n    input2 = React.createRef();\n    test1 = (e) => {\n        console.info(this.input1, this.input1.current.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, this.input2.current.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref={this.input1} placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input ref={this.input2} placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n## React的受控组件和非受控组件\n\n> 受控组件就是可以被 react 状态控制的组件\n> 在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。\n> 好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。\n>\n> **React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件**\n\n## 高阶函数定义\n\n> 如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。\n>\n> 1. 若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。\n> 2. 若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。\n>\n> 常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。\n\n## React生命周期\n\n### （旧）生命周期\n\n![](https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png)\n\n#### （旧）生命周期详解：\n\n> 18版本可能会移除的钩子函数：\n>\n> ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n>\n> ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n>\n> ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n>\n> 17版本还可以用，但是必须得加上`UNSAFE_`前缀\n>\n> 举例：`UNSAFE_componentWillMount()`\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n   1. `constructor(props)`【构造器】\n   2. ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n   \n2. 更新阶段: 由组件内部`this.setSate()`或父组件`render()`触发\n   1. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n   2. ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. `componentDidUpdate()`【组件更新完毕的钩子】\n   \n   > ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n   \n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n   \n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n   \n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 组件将要挂载的钩子\n     */\n    componentWillMount() {\n        console.info(\"componentWillMount-组件将要挂载的钩子\")\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate() {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\")\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件将要更新的钩子\n     */\n    componentWillUpdate() {\n        console.info(\"componentWillUpdate-组件将要更新的钩子\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     */\n    componentDidUpdate() {\n        console.log('componentDidUpdate-组件更新完毕的钩子');\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n                <A count={this.state.count}></A>\n            </div>\n        )\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     * @param props\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\n//子组件\nclass A extends React.Component {\n    /**\n     * 组件将要接收新的props的钩子\n     * @param props\n     */\n    componentWillReceiveProps(props) {\n        console.log('A---componentWillReceiveProps', props);\n    }\n\n    //控制组件更新的“阀门”\n    shouldComponentUpdate() {\n        console.log('A---shouldComponentUpdate');\n        return true\n    }\n\n    //组件将要更新的钩子\n    componentWillUpdate() {\n        console.log('A---componentWillUpdate');\n    }\n\n    //组件更新完毕的钩子\n    componentDidUpdate() {\n        console.log('A---componentDidUpdate');\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>我是子组件“A”，父组件传过来的值是：{this.props.count}</h2>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n### （新）生命周期\n\n***展示不常用生命周期：**\n\n![](https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png)\n\n**展示常用生命周期：**\n\n![](https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png)\n\n#### （新）生命周期详解：\n\n[官方文档：生命周期](https://react.docschina.org/docs/react-component.html#shouldcomponentupdate)\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n\t1. `constructor(props)`【构造器】\n\t\n\t2. `getDerivedStateFromProps(props,state)`\n\t\n\t   > 代码示例：\n\t   >\n\t   > ```js\n\t   > static getDerivedStateFromProps(props,state){\n\t   >     console.log('getDerivedStateFromProps',props,state);\n\t   >     //返回快照值\n\t   >     return null\n\t   > }\n\t   > ```\n\t   >\n\t   > 新增（极少用到）\n\t   >\n\t   > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\t\n\t3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\t\n\t4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n\t\n2. 更新阶段: 由组件内部`this.setSate()`或父组件重新`render()`触发\n     1. `getDerivedStateFromProps(props,state)`\n\n        > 代码示例：\n        >\n        > ```js\n        > static getDerivedStateFromProps(props,state){\n        >     console.log('getDerivedStateFromProps',props,state);\n        >     //返回快照值\n        >     return null\n        > }\n        > ```\n        >\n        > 新增（极少用到）\n        >\n        > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\n     2. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n\n     3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\n     4. `getSnapshotBeforeUpdate(prevProps, prevState)`【在更新之前获取快照】\n\n        > 新增（极少用到）\n        >\n        > 使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。\n\n     5. `componentDidUpdate(prevProps, prevState, snapshot)`【组件更新完毕的钩子】\n\n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n\n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n\n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 若state的值在任何时候都取决于props\n     * @param props\n     * @param state\n     */\n    static getDerivedStateFromProps(props, state) {\n        console.log('getDerivedStateFromProps-若state的值在任何时候都取决于props', props, state);\n        // return {count: state.count + 1};\n        return null;\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @param props\n     * @param state\n     * @param value\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate(props, state, value) {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\", props, state, value)\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     * @param prevProps\n     * @param prevState\n     * @param snapshot\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('componentDidUpdate-组件更新完毕的钩子', prevProps, prevState, snapshot);\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n            </div>\n        )\n    }\n\n    /**\n     * 在更新之前获取快照\n     */\n    getSnapshotBeforeUpdate() {\n        console.log('getSnapshotBeforeUpdate-在更新之前获取快照');\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n## Diffing算法\n\n**diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务**\n\n![](https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png)\n\n**遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)**\n\n> 0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先\n\n![](https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png)\n\n## For循环为什么key不能用index索引值作为key\n\n> 可能会出现严重的效率问题\n\n```js\n\n\t/*\n   经典面试题:\n      1). react/vue中的key有什么作用？（key的内部原理是什么？）\n      2). 为什么遍历列表时，key最好不要用index?\n\n\t\t\t1. 虚拟DOM中key的作用：\n\t\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。\n\n\t\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,\n\t\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：\n\n\t\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：\n\t\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM\n\t\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM\n\n\t\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key\n\t\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面\n\n\t\t\t2. 用index作为key可能会引发的问题：\n\t\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:\n\t\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==> 界面效果没问题, 但效率低。\n\n\t\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：\n\t\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==> 界面有问题。\n\n\t\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，\n\t\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。\n\n\t\t\t3. 开发中如何选择key?:\n\t\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。\n\t\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。\n   */\n\n\t/*\n\t\t慢动作回放----使用index索引值作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=0>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=0>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t-----------------------------------------------------------------\n\n\t慢动作回放----使用id唯一标识作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=3>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\n\t */\n\tclass Person extends React.Component{\n\n\t\tstate = {\n\t\t\tpersons:[\n\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t]\n\t\t}\n\n\t\tadd = ()=>{\n\t\t\tconst {persons} = this.state\n\t\t\tconst p = {id:persons.length+1,name:'小王',age:20}\n\t\t\tthis.setState({persons:[p,...persons]})\n\t\t}\n\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>展示人员信息</h2>\n\t\t\t\t\t<button onClick={this.add}>添加一个小王</button>\n\t\t\t\t\t<h3>使用index（索引值）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj,index)=>{\n\t\t\t\t\t\t\t\treturn <li key={index}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<h3>使用id（数据的唯一标识）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj)=>{\n\t\t\t\t\t\t\t\treturn <li key={personObj.id}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\tReactDOM.render(<Person/>,document.getElementById('test'))\n```\n\n","source":"_posts/React/React基础.md","raw":"---\ntitle: React基础入门教程\ntags:\n  - React\ncategories:\n  - React\n---\n\n# React 基础入门教程\n\n[React中文官网](https://react.docschina.org/)\n\n**demo样例：**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>TEST</title>\n</head>\n<body>\n<div id=\"test\"></div>\n</body>\n\n<!-- react核心库 -->\n<script src=\"https://unpkg.com/react@17/umd/react.production.min.js\" crossorigin></script>\n<!-- React虚拟DOM，用于支持react操作DOM -->\n<script src=\"https://unpkg.com/react-dom@17/umd/react-dom.production.min.js\" crossorigin></script>\n<!-- 用于将jsx转为js -->\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\n<script type=\"text/babel\">\n\t//1.创建虚拟DOM\n    const DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n    //2.渲染虚拟DOM到页面\n    ReactDOM.render(DOM,document.getElementById('test'))\n</script>\n</html>\n```\n\n## JSX规则\n```\n1. 定义虚拟DOM时，不要写引号。\n2. 标签中混入JS表达式时要用{}。\n3. 样式的类名指定不要用class，要用className。\n4. 内联样式，要用style={{key:value}}的形式去写。\n5. 只有一个根标签\n6. 标签必须闭合\n7. 标签首字母\n   1. 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错\n   2. 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错\n```\n\n## 创建虚拟DOM方式\n\n### 方式一（JSX）\n\n```jsx\n//1.创建虚拟DOM\nconst DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n//2.渲染虚拟DOM到页面\nReactDOM.render(DOM,document.getElementById('test'))\n```\n\n### 方式二（JS）\n\n```js\n//1.创建虚拟DOM\nconst VDOM = React.createElement('h1',{id:'title'},React.createElement('span',{},'Hello,React'))\n//2.渲染虚拟DOM到页面\nReactDOM.render(VDOM,document.getElementById('test'))\n```\n\n## 组件的定义方式\n\n### 方式一（函数式组件）\n\n```jsx\n\t\t//1.创建函数式组件\n\t\tfunction MyComponent(){\n\t\t\tconsole.log(this); //此处的this是undefined，因为babel编译后开启了严格模式\n\t\t\treturn <h2>我是用函数定义的组件(适用于【简单组件】的定义)</h2>\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n### 方式二（类式组件）\n\n```jsx\n\t\t//1.创建类式组件\n\t\tclass MyComponent extends React.Component {\n\t\t\trender(){\n\t\t\t\t//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。\n\t\t\t\t//render中的this是谁？—— MyComponent的实例对象 <=> MyComponent组件实例对象。\n\t\t\t\tconsole.log('render中的this:',this);\n\t\t\t\treturn <h2>我是用类定义的组件(适用于【复杂组件】的定义)</h2>\n\t\t\t}\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。\n\t\t\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n## 组件实例的三大属性\n\n### State（状态）\n\n> React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。\n>\n> React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n\n```jsx\nclass TestComponent extends React.Component {\n    //在组件中定义state属性，并且给它赋值。state必须是个对象\n    state = {\n        flag: false\n    }\n    changeFlag(flag){\n        console.log(\"changeFlag\")\n        //必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面\n        //【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。\n        this.setState({flag: flag})\n        //【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！\n\t\t//this.state.flag = !flag //这是错误的写法\n    }\n\trender() {\n        console.log(\"render\")\n        //取出赋值属性\n        const {flag} = this.state\n        return (\n            <div>\n                <h1>今天天气好{flag ? \"炎热\" : \"凉爽\"}</h1>\n                <button onClick={() => this.changeFlag(!this.state.flag)}>点击我</button>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n### Props（传参）\n\n> state 和 props 主要的区别在于 **props** 是不可变的，而 state 可以根据与用户交互来改变。\n>\n> 这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n\n```jsx\nclass TestComponent extends React.Component {\n    render() {\n        console.log(\"render\")\n        //取出传过来参数\n        const {className, grade, list} = this.props\n        return (\n            <div>\n                 <h2>{schoolName}-年级：{grade}-{classNum}班</h2>\n                <div>\n                    {\n                        list.map((item, index) => {\n                            return (\n                                <ul key={item.id} onClick={() => this.alertInfo(item)}>\n                                    <li>姓名：{item.name}</li>\n                                    <li>年龄：{item.age}</li>\n                                </ul>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nconst cla = {\n    schoolName: \"XX高级中学\",\n    classNum: 1,\n    grade: \"高中\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla}/>, document.getElementById(\"test\"))\n```\n\n#### 参数限制\n\n> 自 React v15.5 起，`React.PropTypes` 已移入另一个包中。请使用 [`prop-types` 库](https://www.npmjs.com/package/prop-types) 代替。\n\n```js\nclass TestComponent extends React.Component{}...//组件类\n//对标签属性进行类型、必要性的限制\nTestComponent.propTypes = {\n    schoolName: PropTypes.string.isRequired,    //限制schoolName必传，且为字符串\n    classNum: PropTypes.number,                 //限制classNum为数值\n    afterSchool: PropTypes.func.isRequired,     //限制afterSchool为函数\n}\n\n//指定默认标签属性值\nTestComponent.defaultProps = {\n    grade:'高中',   //grade默认值\n    classNum:1,         //classNum默认值\n}\n\nconst cla = {\n    schoolName:\"江宁高级中学\",\n    classNum: 1,\n    // grade: \"高三\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla} afterSchool={afterSchool}/>, document.getElementById(\"test\"))\n\nfunction afterSchool() {\n    console.info(\"放学啦。。。\");\n}\n```\n\n**函数式组件使用**\n\n```js\n//创建组件\nfunction Person (props){\n    const {name,age,sex} = props\n    return (\n        <ul>\n            <li>姓名：{name}</li>\n            <li>性别：{sex}</li>\n            <li>年龄：{age}</li>\n        </ul>\n\t)\n}\nPerson.propTypes = {\n    name:PropTypes.string.isRequired, //限制name必传，且为字符串\n    sex:PropTypes.string,//限制sex为字符串\n    age:PropTypes.number,//限制age为数值\n}\n\n//指定默认标签属性值\nPerson.defaultProps = {\n    sex:'男',//sex默认值为男\n    age:18 //age默认值为18\n}\n//渲染组件到页面\nReactDOM.render(<Person name=\"jerry\"/>,document.getElementById('test'))\n```\n\n### Ref（可以获取真实DOM节点）\n\n> React提供的这个`ref`属性，**表示为对组件真正实例的引用，其实就是`ReactDOM.render()返回的组件实例`**；需要区分一下，`ReactDOM.render()`渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。\n>\n> **通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref**\n>\n> 官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 [状态提升](https://react.docschina.org/docs/lifting-state-up.html) 以获取更多有关示例\n\n\n#### 字符串形式\n\n```js\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {test1} = this.refs;\n        console.info(test1, test1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref=\"test1\" placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### 回调函数形式\n\n```js\n//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {input1} = this;\n        console.info(input1, input1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    // 方式二\n    saveInput = (a)=>{\n        this.input1 = a;\n        console.log('@',a);\n    }\n    render() {\n        return (\n            <div>\n                {/*JSX里的注释得这么写*/}\n                {/* 方式一 */}\n                {/* a标识当前元素，{}方法体里表示：将当前元素a赋值给当前实例中的属性input1 */}\n                {/* <input ref={a => {this.input1 = a;console.log('@',a)}} placeholder=\"test1\"/>*/}\n                {/* 方式二 */}\n                <input ref={this.saveInput}  placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### `React.createRef()`形式\n\n```js\n//React 16.3 版本引入的 React.createRef() API\n//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。\nclass TestComponent extends React.Component {\n    input1 = React.createRef();\n    input2 = React.createRef();\n    test1 = (e) => {\n        console.info(this.input1, this.input1.current.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, this.input2.current.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref={this.input1} placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input ref={this.input2} placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n## React的受控组件和非受控组件\n\n> 受控组件就是可以被 react 状态控制的组件\n> 在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。\n> 好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。\n>\n> **React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件**\n\n## 高阶函数定义\n\n> 如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。\n>\n> 1. 若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。\n> 2. 若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。\n>\n> 常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。\n\n## React生命周期\n\n### （旧）生命周期\n\n![](https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png)\n\n#### （旧）生命周期详解：\n\n> 18版本可能会移除的钩子函数：\n>\n> ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n>\n> ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n>\n> ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n>\n> 17版本还可以用，但是必须得加上`UNSAFE_`前缀\n>\n> 举例：`UNSAFE_componentWillMount()`\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n   1. `constructor(props)`【构造器】\n   2. ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n   \n2. 更新阶段: 由组件内部`this.setSate()`或父组件`render()`触发\n   1. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n   2. ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. `componentDidUpdate()`【组件更新完毕的钩子】\n   \n   > ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n   \n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n   \n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n   \n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 组件将要挂载的钩子\n     */\n    componentWillMount() {\n        console.info(\"componentWillMount-组件将要挂载的钩子\")\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate() {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\")\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件将要更新的钩子\n     */\n    componentWillUpdate() {\n        console.info(\"componentWillUpdate-组件将要更新的钩子\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     */\n    componentDidUpdate() {\n        console.log('componentDidUpdate-组件更新完毕的钩子');\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n                <A count={this.state.count}></A>\n            </div>\n        )\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     * @param props\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\n//子组件\nclass A extends React.Component {\n    /**\n     * 组件将要接收新的props的钩子\n     * @param props\n     */\n    componentWillReceiveProps(props) {\n        console.log('A---componentWillReceiveProps', props);\n    }\n\n    //控制组件更新的“阀门”\n    shouldComponentUpdate() {\n        console.log('A---shouldComponentUpdate');\n        return true\n    }\n\n    //组件将要更新的钩子\n    componentWillUpdate() {\n        console.log('A---componentWillUpdate');\n    }\n\n    //组件更新完毕的钩子\n    componentDidUpdate() {\n        console.log('A---componentDidUpdate');\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>我是子组件“A”，父组件传过来的值是：{this.props.count}</h2>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n### （新）生命周期\n\n***展示不常用生命周期：**\n\n![](https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png)\n\n**展示常用生命周期：**\n\n![](https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png)\n\n#### （新）生命周期详解：\n\n[官方文档：生命周期](https://react.docschina.org/docs/react-component.html#shouldcomponentupdate)\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n\t1. `constructor(props)`【构造器】\n\t\n\t2. `getDerivedStateFromProps(props,state)`\n\t\n\t   > 代码示例：\n\t   >\n\t   > ```js\n\t   > static getDerivedStateFromProps(props,state){\n\t   >     console.log('getDerivedStateFromProps',props,state);\n\t   >     //返回快照值\n\t   >     return null\n\t   > }\n\t   > ```\n\t   >\n\t   > 新增（极少用到）\n\t   >\n\t   > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\t\n\t3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\t\n\t4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n\t\n2. 更新阶段: 由组件内部`this.setSate()`或父组件重新`render()`触发\n     1. `getDerivedStateFromProps(props,state)`\n\n        > 代码示例：\n        >\n        > ```js\n        > static getDerivedStateFromProps(props,state){\n        >     console.log('getDerivedStateFromProps',props,state);\n        >     //返回快照值\n        >     return null\n        > }\n        > ```\n        >\n        > 新增（极少用到）\n        >\n        > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\n     2. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n\n     3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\n     4. `getSnapshotBeforeUpdate(prevProps, prevState)`【在更新之前获取快照】\n\n        > 新增（极少用到）\n        >\n        > 使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。\n\n     5. `componentDidUpdate(prevProps, prevState, snapshot)`【组件更新完毕的钩子】\n\n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n\n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n\n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 若state的值在任何时候都取决于props\n     * @param props\n     * @param state\n     */\n    static getDerivedStateFromProps(props, state) {\n        console.log('getDerivedStateFromProps-若state的值在任何时候都取决于props', props, state);\n        // return {count: state.count + 1};\n        return null;\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @param props\n     * @param state\n     * @param value\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate(props, state, value) {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\", props, state, value)\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     * @param prevProps\n     * @param prevState\n     * @param snapshot\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('componentDidUpdate-组件更新完毕的钩子', prevProps, prevState, snapshot);\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n            </div>\n        )\n    }\n\n    /**\n     * 在更新之前获取快照\n     */\n    getSnapshotBeforeUpdate() {\n        console.log('getSnapshotBeforeUpdate-在更新之前获取快照');\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n## Diffing算法\n\n**diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务**\n\n![](https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png)\n\n**遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)**\n\n> 0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先\n\n![](https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png)\n\n## For循环为什么key不能用index索引值作为key\n\n> 可能会出现严重的效率问题\n\n```js\n\n\t/*\n   经典面试题:\n      1). react/vue中的key有什么作用？（key的内部原理是什么？）\n      2). 为什么遍历列表时，key最好不要用index?\n\n\t\t\t1. 虚拟DOM中key的作用：\n\t\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。\n\n\t\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,\n\t\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：\n\n\t\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：\n\t\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM\n\t\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM\n\n\t\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key\n\t\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面\n\n\t\t\t2. 用index作为key可能会引发的问题：\n\t\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:\n\t\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==> 界面效果没问题, 但效率低。\n\n\t\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：\n\t\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==> 界面有问题。\n\n\t\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，\n\t\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。\n\n\t\t\t3. 开发中如何选择key?:\n\t\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。\n\t\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。\n   */\n\n\t/*\n\t\t慢动作回放----使用index索引值作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=0>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=0>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t-----------------------------------------------------------------\n\n\t慢动作回放----使用id唯一标识作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=3>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\n\t */\n\tclass Person extends React.Component{\n\n\t\tstate = {\n\t\t\tpersons:[\n\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t]\n\t\t}\n\n\t\tadd = ()=>{\n\t\t\tconst {persons} = this.state\n\t\t\tconst p = {id:persons.length+1,name:'小王',age:20}\n\t\t\tthis.setState({persons:[p,...persons]})\n\t\t}\n\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>展示人员信息</h2>\n\t\t\t\t\t<button onClick={this.add}>添加一个小王</button>\n\t\t\t\t\t<h3>使用index（索引值）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj,index)=>{\n\t\t\t\t\t\t\t\treturn <li key={index}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<h3>使用id（数据的唯一标识）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj)=>{\n\t\t\t\t\t\t\t\treturn <li key={personObj.id}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\tReactDOM.render(<Person/>,document.getElementById('test'))\n```\n\n","slug":"React/React基础","published":1,"date":"2022-04-07T17:04:24.000Z","updated":"2022-11-25T17:37:42.025Z","_id":"clawrzuao000bu42b1e2q0lcq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"React-基础入门教程\"><a href=\"#React-基础入门教程\" class=\"headerlink\" title=\"React 基础入门教程\"></a>React 基础入门教程</h1><p><a href=\"https://react.docschina.org/\">React中文官网</a></p>\n<p><strong>demo样例：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>TEST<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- react核心库 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- React虚拟DOM，用于支持react操作DOM --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 用于将jsx转为js --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-comment\">//1.创建虚拟DOM</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JSX规则\"><a href=\"#JSX规则\" class=\"headerlink\" title=\"JSX规则\"></a>JSX规则</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 定义虚拟DOM时，不要写引号。<br><span class=\"hljs-bullet\">2.</span> 标签中混入JS表达式时要用&#123;&#125;。<br><span class=\"hljs-bullet\">3.</span> 样式的类名指定不要用class，要用className。<br><span class=\"hljs-bullet\">4.</span> 内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。<br><span class=\"hljs-bullet\">5.</span> 只有一个根标签<br><span class=\"hljs-bullet\">6.</span> 标签必须闭合<br><span class=\"hljs-bullet\">7.</span> 标签首字母<br><span class=\"hljs-bullet\">   1.</span> 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错<br><span class=\"hljs-bullet\">   2.</span> 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建虚拟DOM方式\"><a href=\"#创建虚拟DOM方式\" class=\"headerlink\" title=\"创建虚拟DOM方式\"></a>创建虚拟DOM方式</h2><h3 id=\"方式一（JSX）\"><a href=\"#方式一（JSX）\" class=\"headerlink\" title=\"方式一（JSX）\"></a>方式一（JSX）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（JS）\"><a href=\"#方式二（JS）\" class=\"headerlink\" title=\"方式二（JS）\"></a>方式二（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VDOM</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;h1&#x27;</span>,&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;title&#x27;</span>&#125;,<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;span&#x27;</span>,&#123;&#125;,<span class=\"hljs-string\">&#x27;Hello,React&#x27;</span>))<br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">VDOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件的定义方式\"><a href=\"#组件的定义方式\" class=\"headerlink\" title=\"组件的定义方式\"></a>组件的定义方式</h2><h3 id=\"方式一（函数式组件）\"><a href=\"#方式一（函数式组件）\" class=\"headerlink\" title=\"方式一（函数式组件）\"></a>方式一（函数式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建函数式组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyComponent</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>); <span class=\"hljs-comment\">//此处的this是undefined，因为babel编译后开启了严格模式</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（类式组件）\"><a href=\"#方式二（类式组件）\" class=\"headerlink\" title=\"方式二（类式组件）\"></a>方式二（类式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建类式组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-comment\">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br>\t\t<span class=\"hljs-comment\">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span><br>\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;render中的this:&#x27;</span>,<span class=\"hljs-variable language_\">this</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span><br><span class=\"hljs-comment\">\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件实例的三大属性\"><a href=\"#组件实例的三大属性\" class=\"headerlink\" title=\"组件实例的三大属性\"></a>组件实例的三大属性</h2><h3 id=\"State（状态）\"><a href=\"#State（状态）\" class=\"headerlink\" title=\"State（状态）\"></a>State（状态）</h3><blockquote>\n<p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p>\n<p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">//在组件中定义state属性，并且给它赋值。state必须是个对象</span><br>    state = &#123;<br>        <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span><br>    &#125;<br>    <span class=\"hljs-title function_\">changeFlag</span>(<span class=\"hljs-params\">flag</span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;changeFlag&quot;</span>)<br>        <span class=\"hljs-comment\">//必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面</span><br>        <span class=\"hljs-comment\">//【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">flag</span>: flag&#125;)<br>        <span class=\"hljs-comment\">//【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！</span><br>\t\t<span class=\"hljs-comment\">//this.state.flag = !flag //这是错误的写法</span><br>    &#125;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出赋值属性</span><br>        <span class=\"hljs-keyword\">const</span> &#123;flag&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气好&#123;flag ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.changeFlag(!this.state.flag)&#125;&gt;点击我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Props（传参）\"><a href=\"#Props（传参）\" class=\"headerlink\" title=\"Props（传参）\"></a>Props（传参）</h3><blockquote>\n<p>state 和 props 主要的区别在于 <strong>props</strong> 是不可变的，而 state 可以根据与用户交互来改变。</p>\n<p>这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出传过来参数</span><br>        <span class=\"hljs-keyword\">const</span> &#123;className, grade, list&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;schoolName&#125;-年级：&#123;grade&#125;-&#123;classNum&#125;班<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                    &#123;</span><br><span class=\"language-xml\">                        list.map((item, index) =&gt; &#123;</span><br><span class=\"language-xml\">                            return (</span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;item.id&#125;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.alertInfo(item)&#125;&gt;</span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;item.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;item.age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">                            )</span><br><span class=\"language-xml\">                        &#125;)</span><br><span class=\"language-xml\">                    &#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-string\">&quot;XX高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attr\">grade</span>: <span class=\"hljs-string\">&quot;高中&quot;</span>,<br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125;/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数限制\"><a href=\"#参数限制\" class=\"headerlink\" title=\"参数限制\"></a>参数限制</h4><blockquote>\n<p>自 React v15.5 起，<code>React.PropTypes</code> 已移入另一个包中。请使用 <a href=\"https://www.npmjs.com/package/prop-types\"><code>prop-types</code> 库</a> 代替。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;&#125;...<span class=\"hljs-comment\">//组件类</span><br><span class=\"hljs-comment\">//对标签属性进行类型、必要性的限制</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>,    <span class=\"hljs-comment\">//限制schoolName必传，且为字符串</span><br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,                 <span class=\"hljs-comment\">//限制classNum为数值</span><br>    <span class=\"hljs-attr\">afterSchool</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">func</span>.<span class=\"hljs-property\">isRequired</span>,     <span class=\"hljs-comment\">//限制afterSchool为函数</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">grade</span>:<span class=\"hljs-string\">&#x27;高中&#x27;</span>,   <span class=\"hljs-comment\">//grade默认值</span><br>    <span class=\"hljs-attr\">classNum</span>:<span class=\"hljs-number\">1</span>,         <span class=\"hljs-comment\">//classNum默认值</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>:<span class=\"hljs-string\">&quot;江宁高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-comment\">// grade: &quot;高三&quot;,</span><br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125; <span class=\"hljs-attr\">afterSchool</span>=<span class=\"hljs-string\">&#123;afterSchool&#125;/</span>&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterSchool</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;放学啦。。。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>函数式组件使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span> (props)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name,age,sex&#125; = props<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>性别：&#123;sex&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>, <span class=\"hljs-comment\">//限制name必传，且为字符串</span><br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,<span class=\"hljs-comment\">//限制sex为字符串</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,<span class=\"hljs-comment\">//限制age为数值</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>,<span class=\"hljs-comment\">//sex默认值为男</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">//age默认值为18</span><br>&#125;<br><span class=\"hljs-comment\">//渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;jerry&quot;</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ref（可以获取真实DOM节点）\"><a href=\"#Ref（可以获取真实DOM节点）\" class=\"headerlink\" title=\"Ref（可以获取真实DOM节点）\"></a>Ref（可以获取真实DOM节点）</h3><blockquote>\n<p>React提供的这个<code>ref</code>属性，**表示为对组件真正实例的引用，其实就是<code>ReactDOM.render()返回的组件实例</code>**；需要区分一下，<code>ReactDOM.render()</code>渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。</p>\n<p><strong>通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref</strong></p>\n<p>官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 <a href=\"https://react.docschina.org/docs/lifting-state-up.html\">状态提升</a> 以获取更多有关示例</p>\n</blockquote>\n<h4 id=\"字符串形式\"><a href=\"#字符串形式\" class=\"headerlink\" title=\"字符串形式\"></a>字符串形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;test1&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(test1, test1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;test1&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"回调函数形式\"><a href=\"#回调函数形式\" class=\"headerlink\" title=\"回调函数形式\"></a>回调函数形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;input1&#125; = <span class=\"hljs-variable language_\">this</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(input1, input1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 方式二</span><br>    saveInput = <span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span> = a;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;@&#x27;</span>,a);<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                &#123;/*JSX里的注释得这么写*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式一 */&#125;</span><br><span class=\"language-xml\">                &#123;/* a标识当前元素，&#123;&#125;方法体里表示：将当前元素a赋值给当前实例中的属性input1 */&#125;</span><br><span class=\"language-xml\">                &#123;/* <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;a</span> =&gt;</span> &#123;this.input1 = a;console.log(&#x27;@&#x27;,a)&#125;&#125; placeholder=&quot;test1&quot;/&gt;*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式二 */&#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.saveInput&#125;</span>  <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"React-createRef-形式\"><a href=\"#React-createRef-形式\" class=\"headerlink\" title=\"React.createRef()形式\"></a><code>React.createRef()</code>形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//React 16.3 版本引入的 React.createRef() API</span><br><span class=\"hljs-comment\">//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    input1 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    input2 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input2</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input1&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input2&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"React的受控组件和非受控组件\"><a href=\"#React的受控组件和非受控组件\" class=\"headerlink\" title=\"React的受控组件和非受控组件\"></a>React的受控组件和非受控组件</h2><blockquote>\n<p>受控组件就是可以被 react 状态控制的组件<br>在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。<br>好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。</p>\n<p><strong>React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件</strong></p>\n</blockquote>\n<h2 id=\"高阶函数定义\"><a href=\"#高阶函数定义\" class=\"headerlink\" title=\"高阶函数定义\"></a>高阶函数定义</h2><blockquote>\n<p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p>\n<ol>\n<li>若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。</li>\n<li>若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。</li>\n</ol>\n<p>常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。</p>\n</blockquote>\n<h2 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h2><h3 id=\"（旧）生命周期\"><a href=\"#（旧）生命周期\" class=\"headerlink\" title=\"（旧）生命周期\"></a>（旧）生命周期</h3><p><img src=\"https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png\"></p>\n<h4 id=\"（旧）生命周期详解：\"><a href=\"#（旧）生命周期详解：\" class=\"headerlink\" title=\"（旧）生命周期详解：\"></a>（旧）生命周期详解：</h4><blockquote>\n<p>18版本可能会移除的钩子函数：</p>\n<p><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></p>\n<p><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></p>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n<p>17版本还可以用，但是必须得加上<code>UNSAFE_</code>前缀</p>\n<p>举例：<code>UNSAFE_componentWillMount()</code></p>\n</blockquote>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><code>constructor(props)</code>【构造器】</li>\n<li><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件<code>render()</code>触发</p>\n<ol>\n<li><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</li>\n<li><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><code>componentDidUpdate()</code>【组件更新完毕的钩子】</li>\n</ol>\n<blockquote>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n</blockquote>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要挂载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillMount-组件将要挂载的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要更新的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUpdate-组件将要更新的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">A</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&#123;this.state.count&#125;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">A</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//子组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要接收新的props的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillReceiveProps</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillReceiveProps&#x27;</span>, props);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//控制组件更新的“阀门”</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---shouldComponentUpdate&#x27;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件将要更新的钩子</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件更新完毕的钩子</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentDidUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是子组件“A”，父组件传过来的值是：&#123;this.props.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"（新）生命周期\"><a href=\"#（新）生命周期\" class=\"headerlink\" title=\"（新）生命周期\"></a>（新）生命周期</h3><p>*<strong>展示不常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png\"></p>\n<p><strong>展示常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png\"></p>\n<h4 id=\"（新）生命周期详解：\"><a href=\"#（新）生命周期详解：\" class=\"headerlink\" title=\"（新）生命周期详解：\"></a>（新）生命周期详解：</h4><p><a href=\"https://react.docschina.org/docs/react-component.html#shouldcomponentupdate\">官方文档：生命周期</a></p>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><p><code>constructor(props)</code>【构造器】</p>\n</li>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></p>\n</li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render()</code>触发</p>\n<ol>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</p>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><code>getSnapshotBeforeUpdate(prevProps, prevState)</code>【在更新之前获取快照】</p>\n<blockquote>\n<p>新增（极少用到）</p>\n<p>使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。</p>\n</blockquote>\n</li>\n<li><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code>【组件更新完毕的钩子】</p>\n</li>\n</ol>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 若state的值在任何时候都取决于props</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props, state</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps-若state的值在任何时候都取决于props&#x27;</span>, props, state);<br>        <span class=\"hljs-comment\">// return &#123;count: state.count + 1&#125;;</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">value</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\">props, state, value</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>, props, state, value)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevProps</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevState</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">snapshot</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\">prevProps, prevState, snapshot</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>, prevProps, prevState, snapshot);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 在更新之前获取快照</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">getSnapshotBeforeUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getSnapshotBeforeUpdate-在更新之前获取快照&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Diffing算法\"><a href=\"#Diffing算法\" class=\"headerlink\" title=\"Diffing算法\"></a>Diffing算法</h2><p><strong>diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png\"></p>\n<p><strong>遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)</strong></p>\n<blockquote>\n<p>0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png\"></p>\n<h2 id=\"For循环为什么key不能用index索引值作为key\"><a href=\"#For循环为什么key不能用index索引值作为key\" class=\"headerlink\" title=\"For循环为什么key不能用index索引值作为key\"></a>For循环为什么key不能用index索引值作为key</h2><blockquote>\n<p>可能会出现严重的效率问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  经典面试题:</span><br><span class=\"hljs-comment\">     1). react/vue中的key有什么作用？（key的内部原理是什么？）</span><br><span class=\"hljs-comment\">     2). 为什么遍历列表时，key最好不要用index?</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t1. 虚拟DOM中key的作用：</span><br><span class=\"hljs-comment\">\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t2. 用index作为key可能会引发的问题：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t3. 开发中如何选择key?:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。</span><br><span class=\"hljs-comment\">  */</span><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t慢动作回放----使用index索引值作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">-----------------------------------------------------------------</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">慢动作回放----使用id唯一标识作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=3&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br><br>\tstate = &#123;<br>\t\t<span class=\"hljs-attr\">persons</span>:[<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小张&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;,<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小李&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span>&#125;,<br>\t\t]<br>\t&#125;<br><br>\tadd = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>\t\t<span class=\"hljs-keyword\">const</span> &#123;persons&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>\t\t<span class=\"hljs-keyword\">const</span> p = &#123;<span class=\"hljs-attr\">id</span>:persons.<span class=\"hljs-property\">length</span>+<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小王&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">persons</span>:[p,...persons]&#125;)<br>\t&#125;<br><br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (<br>\t\t\t<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>展示人员信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用index（索引值）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj,index)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;index&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用id（数据的唯一标识）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>\t\t)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-基础入门教程\"><a href=\"#React-基础入门教程\" class=\"headerlink\" title=\"React 基础入门教程\"></a>React 基础入门教程</h1><p><a href=\"https://react.docschina.org/\">React中文官网</a></p>\n<p><strong>demo样例：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>TEST<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- react核心库 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- React虚拟DOM，用于支持react操作DOM --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 用于将jsx转为js --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-comment\">//1.创建虚拟DOM</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JSX规则\"><a href=\"#JSX规则\" class=\"headerlink\" title=\"JSX规则\"></a>JSX规则</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 定义虚拟DOM时，不要写引号。<br><span class=\"hljs-bullet\">2.</span> 标签中混入JS表达式时要用&#123;&#125;。<br><span class=\"hljs-bullet\">3.</span> 样式的类名指定不要用class，要用className。<br><span class=\"hljs-bullet\">4.</span> 内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。<br><span class=\"hljs-bullet\">5.</span> 只有一个根标签<br><span class=\"hljs-bullet\">6.</span> 标签必须闭合<br><span class=\"hljs-bullet\">7.</span> 标签首字母<br><span class=\"hljs-bullet\">   1.</span> 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错<br><span class=\"hljs-bullet\">   2.</span> 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建虚拟DOM方式\"><a href=\"#创建虚拟DOM方式\" class=\"headerlink\" title=\"创建虚拟DOM方式\"></a>创建虚拟DOM方式</h2><h3 id=\"方式一（JSX）\"><a href=\"#方式一（JSX）\" class=\"headerlink\" title=\"方式一（JSX）\"></a>方式一（JSX）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（JS）\"><a href=\"#方式二（JS）\" class=\"headerlink\" title=\"方式二（JS）\"></a>方式二（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VDOM</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;h1&#x27;</span>,&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;title&#x27;</span>&#125;,<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;span&#x27;</span>,&#123;&#125;,<span class=\"hljs-string\">&#x27;Hello,React&#x27;</span>))<br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">VDOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件的定义方式\"><a href=\"#组件的定义方式\" class=\"headerlink\" title=\"组件的定义方式\"></a>组件的定义方式</h2><h3 id=\"方式一（函数式组件）\"><a href=\"#方式一（函数式组件）\" class=\"headerlink\" title=\"方式一（函数式组件）\"></a>方式一（函数式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建函数式组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyComponent</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>); <span class=\"hljs-comment\">//此处的this是undefined，因为babel编译后开启了严格模式</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（类式组件）\"><a href=\"#方式二（类式组件）\" class=\"headerlink\" title=\"方式二（类式组件）\"></a>方式二（类式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建类式组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-comment\">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br>\t\t<span class=\"hljs-comment\">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span><br>\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;render中的this:&#x27;</span>,<span class=\"hljs-variable language_\">this</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span><br><span class=\"hljs-comment\">\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件实例的三大属性\"><a href=\"#组件实例的三大属性\" class=\"headerlink\" title=\"组件实例的三大属性\"></a>组件实例的三大属性</h2><h3 id=\"State（状态）\"><a href=\"#State（状态）\" class=\"headerlink\" title=\"State（状态）\"></a>State（状态）</h3><blockquote>\n<p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p>\n<p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">//在组件中定义state属性，并且给它赋值。state必须是个对象</span><br>    state = &#123;<br>        <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span><br>    &#125;<br>    <span class=\"hljs-title function_\">changeFlag</span>(<span class=\"hljs-params\">flag</span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;changeFlag&quot;</span>)<br>        <span class=\"hljs-comment\">//必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面</span><br>        <span class=\"hljs-comment\">//【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">flag</span>: flag&#125;)<br>        <span class=\"hljs-comment\">//【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！</span><br>\t\t<span class=\"hljs-comment\">//this.state.flag = !flag //这是错误的写法</span><br>    &#125;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出赋值属性</span><br>        <span class=\"hljs-keyword\">const</span> &#123;flag&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气好&#123;flag ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.changeFlag(!this.state.flag)&#125;&gt;点击我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Props（传参）\"><a href=\"#Props（传参）\" class=\"headerlink\" title=\"Props（传参）\"></a>Props（传参）</h3><blockquote>\n<p>state 和 props 主要的区别在于 <strong>props</strong> 是不可变的，而 state 可以根据与用户交互来改变。</p>\n<p>这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出传过来参数</span><br>        <span class=\"hljs-keyword\">const</span> &#123;className, grade, list&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;schoolName&#125;-年级：&#123;grade&#125;-&#123;classNum&#125;班<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                    &#123;</span><br><span class=\"language-xml\">                        list.map((item, index) =&gt; &#123;</span><br><span class=\"language-xml\">                            return (</span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;item.id&#125;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.alertInfo(item)&#125;&gt;</span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;item.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;item.age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">                            )</span><br><span class=\"language-xml\">                        &#125;)</span><br><span class=\"language-xml\">                    &#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-string\">&quot;XX高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attr\">grade</span>: <span class=\"hljs-string\">&quot;高中&quot;</span>,<br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125;/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数限制\"><a href=\"#参数限制\" class=\"headerlink\" title=\"参数限制\"></a>参数限制</h4><blockquote>\n<p>自 React v15.5 起，<code>React.PropTypes</code> 已移入另一个包中。请使用 <a href=\"https://www.npmjs.com/package/prop-types\"><code>prop-types</code> 库</a> 代替。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;&#125;...<span class=\"hljs-comment\">//组件类</span><br><span class=\"hljs-comment\">//对标签属性进行类型、必要性的限制</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>,    <span class=\"hljs-comment\">//限制schoolName必传，且为字符串</span><br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,                 <span class=\"hljs-comment\">//限制classNum为数值</span><br>    <span class=\"hljs-attr\">afterSchool</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">func</span>.<span class=\"hljs-property\">isRequired</span>,     <span class=\"hljs-comment\">//限制afterSchool为函数</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">grade</span>:<span class=\"hljs-string\">&#x27;高中&#x27;</span>,   <span class=\"hljs-comment\">//grade默认值</span><br>    <span class=\"hljs-attr\">classNum</span>:<span class=\"hljs-number\">1</span>,         <span class=\"hljs-comment\">//classNum默认值</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>:<span class=\"hljs-string\">&quot;江宁高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-comment\">// grade: &quot;高三&quot;,</span><br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125; <span class=\"hljs-attr\">afterSchool</span>=<span class=\"hljs-string\">&#123;afterSchool&#125;/</span>&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterSchool</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;放学啦。。。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>函数式组件使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span> (props)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name,age,sex&#125; = props<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>性别：&#123;sex&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>, <span class=\"hljs-comment\">//限制name必传，且为字符串</span><br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,<span class=\"hljs-comment\">//限制sex为字符串</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,<span class=\"hljs-comment\">//限制age为数值</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>,<span class=\"hljs-comment\">//sex默认值为男</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">//age默认值为18</span><br>&#125;<br><span class=\"hljs-comment\">//渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;jerry&quot;</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ref（可以获取真实DOM节点）\"><a href=\"#Ref（可以获取真实DOM节点）\" class=\"headerlink\" title=\"Ref（可以获取真实DOM节点）\"></a>Ref（可以获取真实DOM节点）</h3><blockquote>\n<p>React提供的这个<code>ref</code>属性，**表示为对组件真正实例的引用，其实就是<code>ReactDOM.render()返回的组件实例</code>**；需要区分一下，<code>ReactDOM.render()</code>渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。</p>\n<p><strong>通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref</strong></p>\n<p>官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 <a href=\"https://react.docschina.org/docs/lifting-state-up.html\">状态提升</a> 以获取更多有关示例</p>\n</blockquote>\n<h4 id=\"字符串形式\"><a href=\"#字符串形式\" class=\"headerlink\" title=\"字符串形式\"></a>字符串形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;test1&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(test1, test1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;test1&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"回调函数形式\"><a href=\"#回调函数形式\" class=\"headerlink\" title=\"回调函数形式\"></a>回调函数形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;input1&#125; = <span class=\"hljs-variable language_\">this</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(input1, input1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 方式二</span><br>    saveInput = <span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span> = a;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;@&#x27;</span>,a);<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                &#123;/*JSX里的注释得这么写*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式一 */&#125;</span><br><span class=\"language-xml\">                &#123;/* a标识当前元素，&#123;&#125;方法体里表示：将当前元素a赋值给当前实例中的属性input1 */&#125;</span><br><span class=\"language-xml\">                &#123;/* <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;a</span> =&gt;</span> &#123;this.input1 = a;console.log(&#x27;@&#x27;,a)&#125;&#125; placeholder=&quot;test1&quot;/&gt;*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式二 */&#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.saveInput&#125;</span>  <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"React-createRef-形式\"><a href=\"#React-createRef-形式\" class=\"headerlink\" title=\"React.createRef()形式\"></a><code>React.createRef()</code>形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//React 16.3 版本引入的 React.createRef() API</span><br><span class=\"hljs-comment\">//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    input1 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    input2 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input2</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input1&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input2&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"React的受控组件和非受控组件\"><a href=\"#React的受控组件和非受控组件\" class=\"headerlink\" title=\"React的受控组件和非受控组件\"></a>React的受控组件和非受控组件</h2><blockquote>\n<p>受控组件就是可以被 react 状态控制的组件<br>在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。<br>好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。</p>\n<p><strong>React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件</strong></p>\n</blockquote>\n<h2 id=\"高阶函数定义\"><a href=\"#高阶函数定义\" class=\"headerlink\" title=\"高阶函数定义\"></a>高阶函数定义</h2><blockquote>\n<p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p>\n<ol>\n<li>若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。</li>\n<li>若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。</li>\n</ol>\n<p>常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。</p>\n</blockquote>\n<h2 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h2><h3 id=\"（旧）生命周期\"><a href=\"#（旧）生命周期\" class=\"headerlink\" title=\"（旧）生命周期\"></a>（旧）生命周期</h3><p><img src=\"https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png\"></p>\n<h4 id=\"（旧）生命周期详解：\"><a href=\"#（旧）生命周期详解：\" class=\"headerlink\" title=\"（旧）生命周期详解：\"></a>（旧）生命周期详解：</h4><blockquote>\n<p>18版本可能会移除的钩子函数：</p>\n<p><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></p>\n<p><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></p>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n<p>17版本还可以用，但是必须得加上<code>UNSAFE_</code>前缀</p>\n<p>举例：<code>UNSAFE_componentWillMount()</code></p>\n</blockquote>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><code>constructor(props)</code>【构造器】</li>\n<li><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件<code>render()</code>触发</p>\n<ol>\n<li><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</li>\n<li><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><code>componentDidUpdate()</code>【组件更新完毕的钩子】</li>\n</ol>\n<blockquote>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n</blockquote>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要挂载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillMount-组件将要挂载的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要更新的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUpdate-组件将要更新的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">A</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&#123;this.state.count&#125;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">A</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//子组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要接收新的props的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillReceiveProps</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillReceiveProps&#x27;</span>, props);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//控制组件更新的“阀门”</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---shouldComponentUpdate&#x27;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件将要更新的钩子</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件更新完毕的钩子</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentDidUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是子组件“A”，父组件传过来的值是：&#123;this.props.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"（新）生命周期\"><a href=\"#（新）生命周期\" class=\"headerlink\" title=\"（新）生命周期\"></a>（新）生命周期</h3><p>*<strong>展示不常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png\"></p>\n<p><strong>展示常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png\"></p>\n<h4 id=\"（新）生命周期详解：\"><a href=\"#（新）生命周期详解：\" class=\"headerlink\" title=\"（新）生命周期详解：\"></a>（新）生命周期详解：</h4><p><a href=\"https://react.docschina.org/docs/react-component.html#shouldcomponentupdate\">官方文档：生命周期</a></p>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><p><code>constructor(props)</code>【构造器】</p>\n</li>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></p>\n</li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render()</code>触发</p>\n<ol>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</p>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><code>getSnapshotBeforeUpdate(prevProps, prevState)</code>【在更新之前获取快照】</p>\n<blockquote>\n<p>新增（极少用到）</p>\n<p>使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。</p>\n</blockquote>\n</li>\n<li><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code>【组件更新完毕的钩子】</p>\n</li>\n</ol>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 若state的值在任何时候都取决于props</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props, state</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps-若state的值在任何时候都取决于props&#x27;</span>, props, state);<br>        <span class=\"hljs-comment\">// return &#123;count: state.count + 1&#125;;</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">value</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\">props, state, value</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>, props, state, value)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevProps</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevState</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">snapshot</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\">prevProps, prevState, snapshot</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>, prevProps, prevState, snapshot);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 在更新之前获取快照</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">getSnapshotBeforeUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getSnapshotBeforeUpdate-在更新之前获取快照&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Diffing算法\"><a href=\"#Diffing算法\" class=\"headerlink\" title=\"Diffing算法\"></a>Diffing算法</h2><p><strong>diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png\"></p>\n<p><strong>遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)</strong></p>\n<blockquote>\n<p>0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png\"></p>\n<h2 id=\"For循环为什么key不能用index索引值作为key\"><a href=\"#For循环为什么key不能用index索引值作为key\" class=\"headerlink\" title=\"For循环为什么key不能用index索引值作为key\"></a>For循环为什么key不能用index索引值作为key</h2><blockquote>\n<p>可能会出现严重的效率问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  经典面试题:</span><br><span class=\"hljs-comment\">     1). react/vue中的key有什么作用？（key的内部原理是什么？）</span><br><span class=\"hljs-comment\">     2). 为什么遍历列表时，key最好不要用index?</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t1. 虚拟DOM中key的作用：</span><br><span class=\"hljs-comment\">\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t2. 用index作为key可能会引发的问题：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t3. 开发中如何选择key?:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。</span><br><span class=\"hljs-comment\">  */</span><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t慢动作回放----使用index索引值作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">-----------------------------------------------------------------</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">慢动作回放----使用id唯一标识作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=3&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br><br>\tstate = &#123;<br>\t\t<span class=\"hljs-attr\">persons</span>:[<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小张&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;,<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小李&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span>&#125;,<br>\t\t]<br>\t&#125;<br><br>\tadd = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>\t\t<span class=\"hljs-keyword\">const</span> &#123;persons&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>\t\t<span class=\"hljs-keyword\">const</span> p = &#123;<span class=\"hljs-attr\">id</span>:persons.<span class=\"hljs-property\">length</span>+<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小王&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">persons</span>:[p,...persons]&#125;)<br>\t&#125;<br><br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (<br>\t\t\t<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>展示人员信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用index（索引值）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj,index)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;index&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用id（数据的唯一标识）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>\t\t)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n"},{"title":"3-JVM垃圾回收算法和垃圾收集器","_content":"# JVM垃圾回收算法和垃圾收集器\n\n## 1.什么是垃圾回收\n\n对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。\n\n### 引用计数法：\n\n*每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。*\n\n**但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。**\n\n### 可达性分析：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png)\n\n判断某个对象是否可到达。有两种方式判断是否可到达：\n\n1. 直接引用（上帝视角GC Roots）：就是**虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等**中的引用直接到达。\n\n   为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？\n\n   因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。\n\n2. 间接引用：通过别人的引用来达到。\n\n**并发的可达性分析（并发标记、浮动垃圾）：https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A**\n\n## 2.垃圾回收的策略\n\n### 垃圾收集算法\n\n+ **标记-清除**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后清除\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png)\n\n  弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。\n\n  弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。\n\n  有点：简单、明了、好操作。\n\n+ **标记-复制**\n\n  一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png)\n\n  在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png)\n\n  之后以此反复、两个循环往返。\n  \n  类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。\n  \n+ **标记-整理**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后整理。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png)\n\n  整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。\n\n---\n\n\n\n### 垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\n\n串行：Serial系列；\n\n并行【吞吐量优先】：Paraller系列；\n\n> 吞吐量：用户代码执行的时间 / （用户代码执行的时间+垃圾收集时间）99/(99+1)=99%。\n>\n> 适用于后台运算，不需要太多的交互场景。\n\n并发【停顿时间优先】：CMS、G1；\n\n> ​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。\n\nJVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。\n\n**官方JVM垃圾收集器建议：**\n\n1. 使用默认垃圾收集器\n2. 调整JVM堆的大小\n3. + 如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC\n   + 如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png)\n\n**G1（Garbage-First）：**JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。\n\nG1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png)\n\n重新设计内存空间如图所示：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png)\n\n整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。\n\n区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。\n\n官方文档（G1垃圾收集器的前世今生）：https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\n\n---\n\n\n\n#### Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\n\n**Serial：**JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配**老年代的SerialOld**配合使用。\n\n这时会出现Stop The World（STW）\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png)\n\n---\n\n\n\n**ParNew：**并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量\n\n复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png)\n\n---\n\n\n\n**ParallelScavenge**\n\n同上\n\n---\n\n\n\n#### Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\n\n**CMS：**JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。\n\n并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。\n\n因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png)\n\n**划分为四个阶段：初始标记、并发标记、重新标记、并发清理。**\n\n**初始标记：**第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。\n\n**并发标记：**第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是**浮动垃圾（把原本消亡的对象错误的标记为存活状态）**，只能等待下次清理。\n\n**重新标记：**第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。\n\n**并发清理：**第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。\n\n特点：并发收集，停顿时间较少。\n\n缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。\n\n---\n\n\n\n**Serial Old：**串行的\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png)\n\n**Paraller Old：**并行的\n\n---\n\n如何查看当前JAVA程序应用使用的是什么垃圾收集器：\n\n```shell\n# 查看进程ID\njps -l\n8720 org.jetbrains.jps.cmdline.Launcher\n10212 org.jetbrains.idea.maven.server.RemoteMavenServer36\n3764\n15480 sun.tools.jps.Jps\n4216 com.hopefun.scm.WebApplication\n# 查看当前进程下是否使用UseParallelGC\njinfo -flag UseParallelGC 4216\n-XX:+UseParallelGC\n```\n","source":"_posts/JVM/3-JVM垃圾回收算法和垃圾收集器.md","raw":"---\ntitle: 3-JVM垃圾回收算法和垃圾收集器\ntags:\n  - JVM\n  - 垃圾收集器\n  - 垃圾回收算法\ncategories:\n  - JVM\n---\n# JVM垃圾回收算法和垃圾收集器\n\n## 1.什么是垃圾回收\n\n对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。\n\n### 引用计数法：\n\n*每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。*\n\n**但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。**\n\n### 可达性分析：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png)\n\n判断某个对象是否可到达。有两种方式判断是否可到达：\n\n1. 直接引用（上帝视角GC Roots）：就是**虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等**中的引用直接到达。\n\n   为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？\n\n   因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。\n\n2. 间接引用：通过别人的引用来达到。\n\n**并发的可达性分析（并发标记、浮动垃圾）：https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A**\n\n## 2.垃圾回收的策略\n\n### 垃圾收集算法\n\n+ **标记-清除**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后清除\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png)\n\n  弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。\n\n  弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。\n\n  有点：简单、明了、好操作。\n\n+ **标记-复制**\n\n  一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png)\n\n  在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png)\n\n  之后以此反复、两个循环往返。\n  \n  类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。\n  \n+ **标记-整理**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后整理。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png)\n\n  整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。\n\n---\n\n\n\n### 垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\n\n串行：Serial系列；\n\n并行【吞吐量优先】：Paraller系列；\n\n> 吞吐量：用户代码执行的时间 / （用户代码执行的时间+垃圾收集时间）99/(99+1)=99%。\n>\n> 适用于后台运算，不需要太多的交互场景。\n\n并发【停顿时间优先】：CMS、G1；\n\n> ​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。\n\nJVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。\n\n**官方JVM垃圾收集器建议：**\n\n1. 使用默认垃圾收集器\n2. 调整JVM堆的大小\n3. + 如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC\n   + 如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png)\n\n**G1（Garbage-First）：**JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。\n\nG1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png)\n\n重新设计内存空间如图所示：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png)\n\n整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。\n\n区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。\n\n官方文档（G1垃圾收集器的前世今生）：https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\n\n---\n\n\n\n#### Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\n\n**Serial：**JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配**老年代的SerialOld**配合使用。\n\n这时会出现Stop The World（STW）\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png)\n\n---\n\n\n\n**ParNew：**并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量\n\n复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png)\n\n---\n\n\n\n**ParallelScavenge**\n\n同上\n\n---\n\n\n\n#### Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\n\n**CMS：**JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。\n\n并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。\n\n因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png)\n\n**划分为四个阶段：初始标记、并发标记、重新标记、并发清理。**\n\n**初始标记：**第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。\n\n**并发标记：**第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是**浮动垃圾（把原本消亡的对象错误的标记为存活状态）**，只能等待下次清理。\n\n**重新标记：**第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。\n\n**并发清理：**第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。\n\n特点：并发收集，停顿时间较少。\n\n缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。\n\n---\n\n\n\n**Serial Old：**串行的\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png)\n\n**Paraller Old：**并行的\n\n---\n\n如何查看当前JAVA程序应用使用的是什么垃圾收集器：\n\n```shell\n# 查看进程ID\njps -l\n8720 org.jetbrains.jps.cmdline.Launcher\n10212 org.jetbrains.idea.maven.server.RemoteMavenServer36\n3764\n15480 sun.tools.jps.Jps\n4216 com.hopefun.scm.WebApplication\n# 查看当前进程下是否使用UseParallelGC\njinfo -flag UseParallelGC 4216\n-XX:+UseParallelGC\n```\n","slug":"JVM/3-JVM垃圾回收算法和垃圾收集器","published":1,"date":"2020-06-09T13:02:10.000Z","updated":"2022-11-25T17:39:15.222Z","_id":"claws4ivo00035u2bajkceyic","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM垃圾回收算法和垃圾收集器\"><a href=\"#JVM垃圾回收算法和垃圾收集器\" class=\"headerlink\" title=\"JVM垃圾回收算法和垃圾收集器\"></a>JVM垃圾回收算法和垃圾收集器</h1><h2 id=\"1-什么是垃圾回收\"><a href=\"#1-什么是垃圾回收\" class=\"headerlink\" title=\"1.什么是垃圾回收\"></a>1.什么是垃圾回收</h2><p>对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。</p>\n<h3 id=\"引用计数法：\"><a href=\"#引用计数法：\" class=\"headerlink\" title=\"引用计数法：\"></a>引用计数法：</h3><p><em>每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。</em></p>\n<p><strong>但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。</strong></p>\n<h3 id=\"可达性分析：\"><a href=\"#可达性分析：\" class=\"headerlink\" title=\"可达性分析：\"></a>可达性分析：</h3><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png\"></p>\n<p>判断某个对象是否可到达。有两种方式判断是否可到达：</p>\n<ol>\n<li><p>直接引用（上帝视角GC Roots）：就是<strong>虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等</strong>中的引用直接到达。</p>\n<p>为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？</p>\n<p>因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。</p>\n</li>\n<li><p>间接引用：通过别人的引用来达到。</p>\n</li>\n</ol>\n<p><strong>并发的可达性分析（并发标记、浮动垃圾）：<a href=\"https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A\">https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A</a></strong></p>\n<h2 id=\"2-垃圾回收的策略\"><a href=\"#2-垃圾回收的策略\" class=\"headerlink\" title=\"2.垃圾回收的策略\"></a>2.垃圾回收的策略</h2><h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><ul>\n<li><p><strong>标记-清除</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后清除</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png\"></p>\n<p>弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。</p>\n<p>弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。</p>\n<p>有点：简单、明了、好操作。</p>\n</li>\n<li><p><strong>标记-复制</strong></p>\n<p>一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png\"></p>\n<p>在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png\"></p>\n<p>之后以此反复、两个循环往返。</p>\n<p>类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。</p>\n</li>\n<li><p><strong>标记-整理</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后整理。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png\"></p>\n<p>整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"><a href=\"#垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\" class=\"headerlink\" title=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"></a>垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】</h3><p>串行：Serial系列；</p>\n<p>并行【吞吐量优先】：Paraller系列；</p>\n<blockquote>\n<p>吞吐量：用户代码执行的时间 &#x2F; （用户代码执行的时间+垃圾收集时间）99&#x2F;(99+1)&#x3D;99%。</p>\n<p>适用于后台运算，不需要太多的交互场景。</p>\n</blockquote>\n<p>并发【停顿时间优先】：CMS、G1；</p>\n<blockquote>\n<p>​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。</p>\n</blockquote>\n<p>JVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。</p>\n<p><strong>官方JVM垃圾收集器建议：</strong></p>\n<ol>\n<li>使用默认垃圾收集器</li>\n<li>调整JVM堆的大小</li>\n<li><ul>\n<li>如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC</li>\n<li>如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png\"></p>\n<p><strong>G1（Garbage-First）：</strong>JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。</p>\n<p>G1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png\"></p>\n<p>重新设计内存空间如图所示：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png\"></p>\n<p>整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。</p>\n<p>区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。</p>\n<p>官方文档（G1垃圾收集器的前世今生）：<a href=\"https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p>\n<hr>\n<h4 id=\"Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\"><a href=\"#Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\" class=\"headerlink\" title=\"Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\"></a>Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现</h4><p><strong>Serial：</strong>JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配<strong>老年代的SerialOld</strong>配合使用。</p>\n<p>这时会出现Stop The World（STW）</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png\"></p>\n<hr>\n<p><strong>ParNew：</strong>并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量</p>\n<p>复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png\"></p>\n<hr>\n<p><strong>ParallelScavenge</strong></p>\n<p>同上</p>\n<hr>\n<h4 id=\"Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\"><a href=\"#Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\" class=\"headerlink\" title=\"Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\"></a>Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现</h4><p><strong>CMS：</strong>JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。</p>\n<p>并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。</p>\n<p>因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png\"></p>\n<p><strong>划分为四个阶段：初始标记、并发标记、重新标记、并发清理。</strong></p>\n<p><strong>初始标记：</strong>第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。</p>\n<p><strong>并发标记：</strong>第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是<strong>浮动垃圾（把原本消亡的对象错误的标记为存活状态）</strong>，只能等待下次清理。</p>\n<p><strong>重新标记：</strong>第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。</p>\n<p><strong>并发清理：</strong>第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。</p>\n<p>特点：并发收集，停顿时间较少。</p>\n<p>缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。</p>\n<hr>\n<p><strong>Serial Old：</strong>串行的</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png\"></p>\n<p><strong>Paraller Old：</strong>并行的</p>\n<hr>\n<p>如何查看当前JAVA程序应用使用的是什么垃圾收集器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看进程ID</span><br>jps -l<br>8720 org.jetbrains.jps.cmdline.Launcher<br>10212 org.jetbrains.idea.maven.server.RemoteMavenServer36<br>3764<br>15480 sun.tools.jps.Jps<br>4216 com.hopefun.scm.WebApplication<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前进程下是否使用UseParallelGC</span><br>jinfo -flag UseParallelGC 4216<br>-XX:+UseParallelGC<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM垃圾回收算法和垃圾收集器\"><a href=\"#JVM垃圾回收算法和垃圾收集器\" class=\"headerlink\" title=\"JVM垃圾回收算法和垃圾收集器\"></a>JVM垃圾回收算法和垃圾收集器</h1><h2 id=\"1-什么是垃圾回收\"><a href=\"#1-什么是垃圾回收\" class=\"headerlink\" title=\"1.什么是垃圾回收\"></a>1.什么是垃圾回收</h2><p>对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。</p>\n<h3 id=\"引用计数法：\"><a href=\"#引用计数法：\" class=\"headerlink\" title=\"引用计数法：\"></a>引用计数法：</h3><p><em>每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。</em></p>\n<p><strong>但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。</strong></p>\n<h3 id=\"可达性分析：\"><a href=\"#可达性分析：\" class=\"headerlink\" title=\"可达性分析：\"></a>可达性分析：</h3><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png\"></p>\n<p>判断某个对象是否可到达。有两种方式判断是否可到达：</p>\n<ol>\n<li><p>直接引用（上帝视角GC Roots）：就是<strong>虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等</strong>中的引用直接到达。</p>\n<p>为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？</p>\n<p>因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。</p>\n</li>\n<li><p>间接引用：通过别人的引用来达到。</p>\n</li>\n</ol>\n<p><strong>并发的可达性分析（并发标记、浮动垃圾）：<a href=\"https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A\">https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A</a></strong></p>\n<h2 id=\"2-垃圾回收的策略\"><a href=\"#2-垃圾回收的策略\" class=\"headerlink\" title=\"2.垃圾回收的策略\"></a>2.垃圾回收的策略</h2><h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><ul>\n<li><p><strong>标记-清除</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后清除</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png\"></p>\n<p>弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。</p>\n<p>弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。</p>\n<p>有点：简单、明了、好操作。</p>\n</li>\n<li><p><strong>标记-复制</strong></p>\n<p>一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png\"></p>\n<p>在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png\"></p>\n<p>之后以此反复、两个循环往返。</p>\n<p>类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。</p>\n</li>\n<li><p><strong>标记-整理</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后整理。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png\"></p>\n<p>整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"><a href=\"#垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\" class=\"headerlink\" title=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"></a>垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】</h3><p>串行：Serial系列；</p>\n<p>并行【吞吐量优先】：Paraller系列；</p>\n<blockquote>\n<p>吞吐量：用户代码执行的时间 &#x2F; （用户代码执行的时间+垃圾收集时间）99&#x2F;(99+1)&#x3D;99%。</p>\n<p>适用于后台运算，不需要太多的交互场景。</p>\n</blockquote>\n<p>并发【停顿时间优先】：CMS、G1；</p>\n<blockquote>\n<p>​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。</p>\n</blockquote>\n<p>JVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。</p>\n<p><strong>官方JVM垃圾收集器建议：</strong></p>\n<ol>\n<li>使用默认垃圾收集器</li>\n<li>调整JVM堆的大小</li>\n<li><ul>\n<li>如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC</li>\n<li>如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png\"></p>\n<p><strong>G1（Garbage-First）：</strong>JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。</p>\n<p>G1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png\"></p>\n<p>重新设计内存空间如图所示：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png\"></p>\n<p>整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。</p>\n<p>区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。</p>\n<p>官方文档（G1垃圾收集器的前世今生）：<a href=\"https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p>\n<hr>\n<h4 id=\"Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\"><a href=\"#Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\" class=\"headerlink\" title=\"Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\"></a>Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现</h4><p><strong>Serial：</strong>JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配<strong>老年代的SerialOld</strong>配合使用。</p>\n<p>这时会出现Stop The World（STW）</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png\"></p>\n<hr>\n<p><strong>ParNew：</strong>并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量</p>\n<p>复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png\"></p>\n<hr>\n<p><strong>ParallelScavenge</strong></p>\n<p>同上</p>\n<hr>\n<h4 id=\"Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\"><a href=\"#Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\" class=\"headerlink\" title=\"Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\"></a>Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现</h4><p><strong>CMS：</strong>JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。</p>\n<p>并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。</p>\n<p>因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png\"></p>\n<p><strong>划分为四个阶段：初始标记、并发标记、重新标记、并发清理。</strong></p>\n<p><strong>初始标记：</strong>第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。</p>\n<p><strong>并发标记：</strong>第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是<strong>浮动垃圾（把原本消亡的对象错误的标记为存活状态）</strong>，只能等待下次清理。</p>\n<p><strong>重新标记：</strong>第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。</p>\n<p><strong>并发清理：</strong>第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。</p>\n<p>特点：并发收集，停顿时间较少。</p>\n<p>缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。</p>\n<hr>\n<p><strong>Serial Old：</strong>串行的</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png\"></p>\n<p><strong>Paraller Old：</strong>并行的</p>\n<hr>\n<p>如何查看当前JAVA程序应用使用的是什么垃圾收集器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看进程ID</span><br>jps -l<br>8720 org.jetbrains.jps.cmdline.Launcher<br>10212 org.jetbrains.idea.maven.server.RemoteMavenServer36<br>3764<br>15480 sun.tools.jps.Jps<br>4216 com.hopefun.scm.WebApplication<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前进程下是否使用UseParallelGC</span><br>jinfo -flag UseParallelGC 4216<br>-XX:+UseParallelGC<br></code></pre></td></tr></table></figure>\n"},{"title":"6-JVM常用工具和优化","_content":"# JVM 常用工具和优化\n\n## JDK 自带的\n\n### jconsole\n\n### jvisualvm\n\n## 三方的工具\n\n###\tarthas\n\n##\t调优关注点（内存、GC）：\n\n**内存**\n\n+ MAT\n+ XElephant\n+ 在线：perfma\n\n**GC**\n\n拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）\n\n+ 本地：GCViewer\n+ 在线：gceasy.io\n\n---\n\n\n\n# 在什么情况下调优 \n\n## **体现系统性能的参考因素**\n\n首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ \n\n- **响应时间：**响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。\n- **TPS：**指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。\n- **计算机资源分配使用率：**通常由 CPU 占用率、内存使用率、磁盘 I/O、网络 I/O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。\n\n## **JVM** **调优都做些什么？**\n\n具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。\n\n- **内存空间的分配设置：**JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。\n- **选择合适的垃圾回收器：**垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。\n\n## **是否需要 JVM** **调优？**\n\n一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 \n\n在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 \n\n再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 \n\nJVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。\n\n## JVM错误排查与解决案例\n\n**JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题**\n\n### 案列一：\n\n**发现问题：**JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】\n\n**排查问题：**打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）\n\n**解决问题：**适当增加堆内存空间，或者选择合适的垃圾收集器\n\n###\t案例二：\n\n**发现问题：**OOM\n\n**排查问题：**在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）\n\n**解决问题：**如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例\n\n### 案例三\n\n**发现问题：**CPU负载过高\n\n**排查问题：**命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大\n\n**解决问题：**具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求\n\n### 案例四\n\n**发现问题：**死锁\n\n**排查问题：**可以通过 jstack 命令去查看相关线程锁的信息\n\n**解决问题：**找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁\n\n###\t案例五\n\n**发现问题：**线程池不够用了\n\n**排查问题：**通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的\n\n**解决问题：**适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）\n\n","source":"_posts/JVM/6-JVM常用工具和优化.md","raw":"---\ntitle: 6-JVM常用工具和优化\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM 常用工具和优化\n\n## JDK 自带的\n\n### jconsole\n\n### jvisualvm\n\n## 三方的工具\n\n###\tarthas\n\n##\t调优关注点（内存、GC）：\n\n**内存**\n\n+ MAT\n+ XElephant\n+ 在线：perfma\n\n**GC**\n\n拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）\n\n+ 本地：GCViewer\n+ 在线：gceasy.io\n\n---\n\n\n\n# 在什么情况下调优 \n\n## **体现系统性能的参考因素**\n\n首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ \n\n- **响应时间：**响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。\n- **TPS：**指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。\n- **计算机资源分配使用率：**通常由 CPU 占用率、内存使用率、磁盘 I/O、网络 I/O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。\n\n## **JVM** **调优都做些什么？**\n\n具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。\n\n- **内存空间的分配设置：**JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。\n- **选择合适的垃圾回收器：**垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。\n\n## **是否需要 JVM** **调优？**\n\n一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 \n\n在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 \n\n再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 \n\nJVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。\n\n## JVM错误排查与解决案例\n\n**JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题**\n\n### 案列一：\n\n**发现问题：**JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】\n\n**排查问题：**打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）\n\n**解决问题：**适当增加堆内存空间，或者选择合适的垃圾收集器\n\n###\t案例二：\n\n**发现问题：**OOM\n\n**排查问题：**在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）\n\n**解决问题：**如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例\n\n### 案例三\n\n**发现问题：**CPU负载过高\n\n**排查问题：**命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大\n\n**解决问题：**具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求\n\n### 案例四\n\n**发现问题：**死锁\n\n**排查问题：**可以通过 jstack 命令去查看相关线程锁的信息\n\n**解决问题：**找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁\n\n###\t案例五\n\n**发现问题：**线程池不够用了\n\n**排查问题：**通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的\n\n**解决问题：**适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）\n\n","slug":"JVM/6-JVM常用工具和优化","published":1,"date":"2020-05-14T17:18:59.000Z","updated":"2022-11-25T17:39:15.231Z","_id":"claws4ivq00065u2b0mk1fa15","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM-常用工具和优化\"><a href=\"#JVM-常用工具和优化\" class=\"headerlink\" title=\"JVM 常用工具和优化\"></a>JVM 常用工具和优化</h1><h2 id=\"JDK-自带的\"><a href=\"#JDK-自带的\" class=\"headerlink\" title=\"JDK 自带的\"></a>JDK 自带的</h2><h3 id=\"jconsole\"><a href=\"#jconsole\" class=\"headerlink\" title=\"jconsole\"></a>jconsole</h3><h3 id=\"jvisualvm\"><a href=\"#jvisualvm\" class=\"headerlink\" title=\"jvisualvm\"></a>jvisualvm</h3><h2 id=\"三方的工具\"><a href=\"#三方的工具\" class=\"headerlink\" title=\"三方的工具\"></a>三方的工具</h2><h3 id=\"arthas\"><a href=\"#arthas\" class=\"headerlink\" title=\"arthas\"></a>arthas</h3><h2 id=\"调优关注点（内存、GC）：\"><a href=\"#调优关注点（内存、GC）：\" class=\"headerlink\" title=\"调优关注点（内存、GC）：\"></a>调优关注点（内存、GC）：</h2><p><strong>内存</strong></p>\n<ul>\n<li>MAT</li>\n<li>XElephant</li>\n<li>在线：perfma</li>\n</ul>\n<p><strong>GC</strong></p>\n<p>拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）</p>\n<ul>\n<li>本地：GCViewer</li>\n<li>在线：gceasy.io</li>\n</ul>\n<hr>\n<h1 id=\"在什么情况下调优\"><a href=\"#在什么情况下调优\" class=\"headerlink\" title=\"在什么情况下调优\"></a>在什么情况下调优</h1><h2 id=\"体现系统性能的参考因素\"><a href=\"#体现系统性能的参考因素\" class=\"headerlink\" title=\"体现系统性能的参考因素\"></a><strong>体现系统性能的参考因素</strong></h2><p>首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ </p>\n<ul>\n<li><strong>响应时间：</strong>响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。</li>\n<li><strong>TPS：</strong>指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。</li>\n<li><strong>计算机资源分配使用率：</strong>通常由 CPU 占用率、内存使用率、磁盘 I&#x2F;O、网络 I&#x2F;O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。</li>\n</ul>\n<h2 id=\"JVM-调优都做些什么？\"><a href=\"#JVM-调优都做些什么？\" class=\"headerlink\" title=\"JVM 调优都做些什么？\"></a><strong>JVM</strong> <strong>调优都做些什么？</strong></h2><p>具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。</p>\n<ul>\n<li><strong>内存空间的分配设置：</strong>JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。</li>\n<li><strong>选择合适的垃圾回收器：</strong>垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。</li>\n</ul>\n<h2 id=\"是否需要-JVM-调优？\"><a href=\"#是否需要-JVM-调优？\" class=\"headerlink\" title=\"是否需要 JVM 调优？\"></a><strong>是否需要 JVM</strong> <strong>调优？</strong></h2><p>一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 </p>\n<p>在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 </p>\n<p>再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 </p>\n<p>JVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。</p>\n<h2 id=\"JVM错误排查与解决案例\"><a href=\"#JVM错误排查与解决案例\" class=\"headerlink\" title=\"JVM错误排查与解决案例\"></a>JVM错误排查与解决案例</h2><p><strong>JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题</strong></p>\n<h3 id=\"案列一：\"><a href=\"#案列一：\" class=\"headerlink\" title=\"案列一：\"></a>案列一：</h3><p><strong>发现问题：</strong>JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】</p>\n<p><strong>排查问题：</strong>打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）</p>\n<p><strong>解决问题：</strong>适当增加堆内存空间，或者选择合适的垃圾收集器</p>\n<h3 id=\"案例二：\"><a href=\"#案例二：\" class=\"headerlink\" title=\"案例二：\"></a>案例二：</h3><p><strong>发现问题：</strong>OOM</p>\n<p><strong>排查问题：</strong>在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）</p>\n<p><strong>解决问题：</strong>如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例</p>\n<h3 id=\"案例三\"><a href=\"#案例三\" class=\"headerlink\" title=\"案例三\"></a>案例三</h3><p><strong>发现问题：</strong>CPU负载过高</p>\n<p><strong>排查问题：</strong>命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大</p>\n<p><strong>解决问题：</strong>具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求</p>\n<h3 id=\"案例四\"><a href=\"#案例四\" class=\"headerlink\" title=\"案例四\"></a>案例四</h3><p><strong>发现问题：</strong>死锁</p>\n<p><strong>排查问题：</strong>可以通过 jstack 命令去查看相关线程锁的信息</p>\n<p><strong>解决问题：</strong>找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁</p>\n<h3 id=\"案例五\"><a href=\"#案例五\" class=\"headerlink\" title=\"案例五\"></a>案例五</h3><p><strong>发现问题：</strong>线程池不够用了</p>\n<p><strong>排查问题：</strong>通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的</p>\n<p><strong>解决问题：</strong>适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM-常用工具和优化\"><a href=\"#JVM-常用工具和优化\" class=\"headerlink\" title=\"JVM 常用工具和优化\"></a>JVM 常用工具和优化</h1><h2 id=\"JDK-自带的\"><a href=\"#JDK-自带的\" class=\"headerlink\" title=\"JDK 自带的\"></a>JDK 自带的</h2><h3 id=\"jconsole\"><a href=\"#jconsole\" class=\"headerlink\" title=\"jconsole\"></a>jconsole</h3><h3 id=\"jvisualvm\"><a href=\"#jvisualvm\" class=\"headerlink\" title=\"jvisualvm\"></a>jvisualvm</h3><h2 id=\"三方的工具\"><a href=\"#三方的工具\" class=\"headerlink\" title=\"三方的工具\"></a>三方的工具</h2><h3 id=\"arthas\"><a href=\"#arthas\" class=\"headerlink\" title=\"arthas\"></a>arthas</h3><h2 id=\"调优关注点（内存、GC）：\"><a href=\"#调优关注点（内存、GC）：\" class=\"headerlink\" title=\"调优关注点（内存、GC）：\"></a>调优关注点（内存、GC）：</h2><p><strong>内存</strong></p>\n<ul>\n<li>MAT</li>\n<li>XElephant</li>\n<li>在线：perfma</li>\n</ul>\n<p><strong>GC</strong></p>\n<p>拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）</p>\n<ul>\n<li>本地：GCViewer</li>\n<li>在线：gceasy.io</li>\n</ul>\n<hr>\n<h1 id=\"在什么情况下调优\"><a href=\"#在什么情况下调优\" class=\"headerlink\" title=\"在什么情况下调优\"></a>在什么情况下调优</h1><h2 id=\"体现系统性能的参考因素\"><a href=\"#体现系统性能的参考因素\" class=\"headerlink\" title=\"体现系统性能的参考因素\"></a><strong>体现系统性能的参考因素</strong></h2><p>首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ </p>\n<ul>\n<li><strong>响应时间：</strong>响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。</li>\n<li><strong>TPS：</strong>指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。</li>\n<li><strong>计算机资源分配使用率：</strong>通常由 CPU 占用率、内存使用率、磁盘 I&#x2F;O、网络 I&#x2F;O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。</li>\n</ul>\n<h2 id=\"JVM-调优都做些什么？\"><a href=\"#JVM-调优都做些什么？\" class=\"headerlink\" title=\"JVM 调优都做些什么？\"></a><strong>JVM</strong> <strong>调优都做些什么？</strong></h2><p>具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。</p>\n<ul>\n<li><strong>内存空间的分配设置：</strong>JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。</li>\n<li><strong>选择合适的垃圾回收器：</strong>垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。</li>\n</ul>\n<h2 id=\"是否需要-JVM-调优？\"><a href=\"#是否需要-JVM-调优？\" class=\"headerlink\" title=\"是否需要 JVM 调优？\"></a><strong>是否需要 JVM</strong> <strong>调优？</strong></h2><p>一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 </p>\n<p>在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 </p>\n<p>再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 </p>\n<p>JVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。</p>\n<h2 id=\"JVM错误排查与解决案例\"><a href=\"#JVM错误排查与解决案例\" class=\"headerlink\" title=\"JVM错误排查与解决案例\"></a>JVM错误排查与解决案例</h2><p><strong>JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题</strong></p>\n<h3 id=\"案列一：\"><a href=\"#案列一：\" class=\"headerlink\" title=\"案列一：\"></a>案列一：</h3><p><strong>发现问题：</strong>JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】</p>\n<p><strong>排查问题：</strong>打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）</p>\n<p><strong>解决问题：</strong>适当增加堆内存空间，或者选择合适的垃圾收集器</p>\n<h3 id=\"案例二：\"><a href=\"#案例二：\" class=\"headerlink\" title=\"案例二：\"></a>案例二：</h3><p><strong>发现问题：</strong>OOM</p>\n<p><strong>排查问题：</strong>在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）</p>\n<p><strong>解决问题：</strong>如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例</p>\n<h3 id=\"案例三\"><a href=\"#案例三\" class=\"headerlink\" title=\"案例三\"></a>案例三</h3><p><strong>发现问题：</strong>CPU负载过高</p>\n<p><strong>排查问题：</strong>命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大</p>\n<p><strong>解决问题：</strong>具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求</p>\n<h3 id=\"案例四\"><a href=\"#案例四\" class=\"headerlink\" title=\"案例四\"></a>案例四</h3><p><strong>发现问题：</strong>死锁</p>\n<p><strong>排查问题：</strong>可以通过 jstack 命令去查看相关线程锁的信息</p>\n<p><strong>解决问题：</strong>找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁</p>\n<h3 id=\"案例五\"><a href=\"#案例五\" class=\"headerlink\" title=\"案例五\"></a>案例五</h3><p><strong>发现问题：</strong>线程池不够用了</p>\n<p><strong>排查问题：</strong>通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的</p>\n<p><strong>解决问题：</strong>适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clatd5i1g0001ryiaelkr34w4","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5ieh0017ryia0lhqfxaq"},{"post_id":"clatd5i160000ryiaeqtp3qds","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5ieh0018ryiafqvd0znx"},{"post_id":"clatd5i1s000wryia138m5zxw","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iei0019ryiafj7o84ij"},{"post_id":"clatd5i1t000yryia313qftj5","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001aryiahdd9atm4"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001bryia9i7y0vyt"},{"post_id":"clatd5i1k0005ryia0anwhmwa","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001cryiageusgoba"},{"post_id":"clatd5i1k0004ryiad5q060oj","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iel001dryia0u6u9dau"},{"post_id":"clatd5i1r000vryia1fguhxko","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iel001eryia2fieda6v"},{"post_id":"clates4c90000fiiadchxbgky","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clates4pc0004fiiaad76azdr"},{"post_id":"clawrzu8b0000u42bcbtsgk30","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626p0000b92b7zbh6zcm"},{"post_id":"clawrzuaa0001u42bh3ap7g4f","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626r0001b92b5rcag0lu"},{"post_id":"clawrzuab0002u42bfuxx6olf","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626r0002b92bem28b7s1"},{"post_id":"clawrzuac0003u42b71f9czva","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626t0003b92baljha9jo"},{"post_id":"clawrzuan000au42bb8nzby08","category_id":"claktn9nl002m19ia5h4raevy","_id":"claws626u0004b92bh9xodiax"},{"post_id":"clawrzual0009u42b12w4gkqr","category_id":"claktn9nl002m19ia5h4raevy","_id":"claws626v0005b92bbdnv1iqm"},{"post_id":"clawrzuak0008u42b3itw94d5","category_id":"claktn9nl002m19ia5h4raevy","_id":"claws626w0006b92bdg6z1cm3"},{"post_id":"clawrzuao000bu42b1e2q0lcq","category_id":"claktn9nj002i19iah8za5g87","_id":"claws626x0007b92b2m860i5h"},{"post_id":"clawrzuah0004u42b2ba7guby","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626x0008b92bf2pp4663"},{"post_id":"clawrzuai0005u42b6wis8ywv","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626x0009b92bcwn3fm0x"},{"post_id":"claws4ivo00035u2bajkceyic","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626x000ab92b4sd119s7"},{"post_id":"clawrzuaj0007u42b6duf1b3v","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626z000bb92bc8wqay3f"},{"post_id":"clawrzuaj0006u42bhq5l6t2b","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626z000cb92b140jbvam"},{"post_id":"claws4ivq00065u2b0mk1fa15","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626z000db92ba7skfx02"}],"PostTag":[{"post_id":"clatd5i160000ryiaeqtp3qds","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1m0008ryiacvq7g2mz"},{"post_id":"clatd5i160000ryiaeqtp3qds","tag_id":"clatd5i1l0006ryia5wjbh50n","_id":"clatd5i1n0009ryia0e6v3z3t"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1o000dryia889qeb3s"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1n000aryia7ge7dhqd","_id":"clatd5i1o000eryiagngra75q"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1n000bryia6jcb1ms4","_id":"clatd5i1o000gryia1wgc0gg6"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1p000kryiagvp68xdl"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000fryiabul7gulz","_id":"clatd5i1p000lryia9iqqedrq"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000hryiadwwze9gc","_id":"clatd5i1p000nryiabvr1hl26"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000iryiaesuqf25o","_id":"clatd5i1p000oryia87vadhmg"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1q000qryia25e71rx3"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1p000jryia2d6yd94z","_id":"clatd5i1q000rryia3s1ef67a"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1p000mryia9q434pho","_id":"clatd5i1q000sryia8pbl3n7o"},{"post_id":"clatd5i1k0005ryia0anwhmwa","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1q000tryia2j94c3dd"},{"post_id":"clatd5i1k0005ryia0anwhmwa","tag_id":"clatd5i1p000pryia34cs3u23","_id":"clatd5i1q000uryia15c8fmyp"},{"post_id":"clatd5i1r000vryia1fguhxko","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1u0010ryia7yzk5xry"},{"post_id":"clatd5i1r000vryia1fguhxko","tag_id":"clatd5i1t000xryiafkvp2obn","_id":"clatd5i1u0011ryiab2l510t4"},{"post_id":"clatd5i1s000wryia138m5zxw","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1v0013ryiabtwz6rb7"},{"post_id":"clatd5i1s000wryia138m5zxw","tag_id":"clatd5i1u000zryiahn581zn3","_id":"clatd5i1v0014ryia3a0dcslv"},{"post_id":"clatd5i1t000yryia313qftj5","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1v0015ryia8ddjgeqb"},{"post_id":"clatd5i1t000yryia313qftj5","tag_id":"clatd5i1u0012ryia8t2kf6w3","_id":"clatd5i1v0016ryiahx9cfh6o"},{"post_id":"clates4c90000fiiadchxbgky","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clates4cc0002fiia9lf3akf1"},{"post_id":"clates4c90000fiiadchxbgky","tag_id":"clates4cc0001fiiahbdrd214","_id":"clates4cc0003fiiab6sx3wdj"},{"post_id":"clawrzu8b0000u42bcbtsgk30","tag_id":"claws4ivg00005u2b0t08aljz","_id":"claws4ivn00025u2bh2v6ebxl"},{"post_id":"clawrzuaa0001u42bh3ap7g4f","tag_id":"claws4ivm00015u2b1456e5w1","_id":"claws4ivr00075u2b35c3c79k"},{"post_id":"clawrzuaa0001u42bh3ap7g4f","tag_id":"claws4ivp00045u2b7uy25h22","_id":"claws4ivr00085u2b4lvxek9w"},{"post_id":"clawrzuab0002u42bfuxx6olf","tag_id":"claws4ivq00055u2b2fsrf6l4","_id":"claws4ivs000a5u2b1lsd8crs"},{"post_id":"clawrzuac0003u42b71f9czva","tag_id":"claws4ivr00095u2bapu98r13","_id":"claws4ivt000d5u2bhi8754ci"},{"post_id":"clawrzuac0003u42b71f9czva","tag_id":"claws4ivs000b5u2b3qpp726m","_id":"claws4ivt000e5u2bhz587ink"},{"post_id":"clawrzuah0004u42b2ba7guby","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivu000g5u2beusnhg5e"},{"post_id":"clawrzuai0005u42b6wis8ywv","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivu000i5u2b46vfhnpe"},{"post_id":"claws4ivo00035u2bajkceyic","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivv000m5u2b24gvevyh"},{"post_id":"claws4ivo00035u2bajkceyic","tag_id":"claws4ivu000j5u2bfvukdht6","_id":"claws4ivv000n5u2b4gem0ism"},{"post_id":"claws4ivo00035u2bajkceyic","tag_id":"claws4ivv000k5u2bekht4rfx","_id":"claws4ivv000p5u2bapm4atib"},{"post_id":"clawrzuaj0007u42b6duf1b3v","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivv000q5u2bd5fohlzb"},{"post_id":"clawrzuaj0006u42bhq5l6t2b","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivw000s5u2bb0ga40ji"},{"post_id":"claws4ivq00065u2b0mk1fa15","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivw000u5u2b1xpah4t7"},{"post_id":"clawrzuak0008u42b3itw94d5","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"claws4ivw000w5u2b0qnjfkz5"},{"post_id":"clawrzuao000bu42b1e2q0lcq","tag_id":"claws4ivw000v5u2bg5zv6ba5","_id":"claws4ivw000y5u2b6pmxhy3h"},{"post_id":"clawrzuan000au42bb8nzby08","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"claws4ivw000z5u2b8hre4s6l"},{"post_id":"clawrzuan000au42bb8nzby08","tag_id":"claws4ivm00015u2b1456e5w1","_id":"claws4ivw00105u2bb1sydzu3"},{"post_id":"clawrzual0009u42b12w4gkqr","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"claws4ivy00115u2bhnl3e1bb"}],"Tag":[{"name":"默认","_id":"cl9qxfdah0004bz2b59t399l6"},{"name":"SpringBoot","_id":"clatd5i1i0002ryia5bf49tr2"},{"name":"Swagger2","_id":"clatd5i1l0006ryia5wjbh50n"},{"name":"序列化","_id":"clatd5i1n000aryia7ge7dhqd"},{"name":"时间格式","_id":"clatd5i1n000bryia6jcb1ms4"},{"name":"AOP","_id":"clatd5i1o000fryiabul7gulz"},{"name":"切面","_id":"clatd5i1o000hryiadwwze9gc"},{"name":"日志处理","_id":"clatd5i1o000iryiaesuqf25o"},{"name":"Druid","_id":"clatd5i1p000jryia2d6yd94z"},{"name":"Mysql连接池","_id":"clatd5i1p000mryia9q434pho"},{"name":"Redis","_id":"clatd5i1p000pryia34cs3u23"},{"name":"Shiro","_id":"clatd5i1t000xryiafkvp2obn"},{"name":"全局异常","_id":"clatd5i1u000zryiahn581zn3"},{"name":"自动配置","_id":"clatd5i1u0012ryia8t2kf6w3"},{"name":"线程池","_id":"clates4cc0001fiiahbdrd214"},{"name":"CAS","_id":"claws4ivg00005u2b0t08aljz"},{"name":"锁","_id":"claws4ivm00015u2b1456e5w1"},{"name":"Synchronized","_id":"claws4ivp00045u2b7uy25h22"},{"name":"对象内存布局","_id":"claws4ivq00055u2b2fsrf6l4"},{"name":"指令乱序","_id":"claws4ivr00095u2bapu98r13"},{"name":"指令重排序","_id":"claws4ivs000b5u2b3qpp726m"},{"name":"JVM","_id":"claws4ivt000c5u2b39ba99h5"},{"name":"垃圾收集器","_id":"claws4ivu000j5u2bfvukdht6"},{"name":"垃圾回收算法","_id":"claws4ivv000k5u2bekht4rfx"},{"name":"Mysql","_id":"claws4ivw000t5u2bgr9zhzm6"},{"name":"React","_id":"claws4ivw000v5u2bg5zv6ba5"}]}}