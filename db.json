{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/bg/bg.png","path":"img/bg/bg.png","modified":0,"renderable":0},{"_id":"source/img/bg/bg1.jpg","path":"img/bg/bg1.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/the_moon.jpg","path":"img/bg/the_moon.jpg","modified":0,"renderable":0},{"_id":"source/img/icon.png","path":"img/icon.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery-master/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/echarts.min.js","path":"js/echarts.min.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README","path":"README","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/公共关系学/20221027183201783077630932029440.md","hash":"4999650a2d19724156d0b7d36850ee445a6d88dc","modified":1666866733903},{"_id":"source/_posts/hello-world.md","hash":"466eae895f59911269bf4b76cbb9f57104994294","modified":1666780515166},{"_id":"source/_posts/公共关系学/20221027183201783077630944612352.md","hash":"0676927a361158981b30cd5aa1a3aa93355d8be7","modified":1666866733904},{"_id":"source/_posts/公共关系学/20221027183201783077630948806656.md","hash":"4b92f8f6908d229b6a3dd69d9b13a5bfe2c0a9fe","modified":1666866733905},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252224.md","hash":"40af35da5e0515777bfc7c6e990903dd5eefa497","modified":1666866733880},{"_id":"source/_posts/人力资源管理/20221027183201783077630898475008.md","hash":"1e69c5bb46056a60360fac1280812e0cc50dd569","modified":1666866733875},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252225.md","hash":"cecfdcf424165f74105c548b866ee32d8c3733e9","modified":1666866733881},{"_id":"source/_posts/基础会计学/20221027183201783077630919446530.md","hash":"874b43527792c6682b7aafa2bee52db7d9197c2c","modified":1666866733887},{"_id":"source/_posts/基础会计学/20221027183201783077630919446531.md","hash":"7f9698b5e433f1c876d5cba973ee8b44929188d3","modified":1666866733888},{"_id":"source/_posts/基础会计学/20221027183201783077630919446532.md","hash":"d2f397d251d3bd5dfeeb232e98568da201872808","modified":1666866733890},{"_id":"source/_posts/生产与运作管理/20221027183201783077630915252226.md","hash":"ddb7e48b0f65279d9f46fc50015023cf3f7aa1c3","modified":1666866733882},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446528.md","hash":"71977e01a37f6337f2b7c4dfe2393e776dedd607","modified":1666866733883},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446529.md","hash":"f04baa196ea84957549825d37fc3ca6ee44f516f","modified":1666866733885},{"_id":"source/_posts/电子商务/20221027183201783077630923640832.md","hash":"39fa8741dbf944b16411979cd6cf79fdd9263f22","modified":1666866733891},{"_id":"source/_posts/电子商务/20221027183201783077630923640833.md","hash":"a30749bb9a96d360c51b3a60b3beb8b04aa0cec8","modified":1666866733893},{"_id":"source/_posts/电子商务/20221027183201783077630923640834.md","hash":"6ef4d354dc3571574dee6ad9a397fcd23f95e940","modified":1666866733895},{"_id":"source/_posts/电子商务/20221027183201783077630927835136.md","hash":"0d57904d8be5db69fe687b46cc152235a86e672c","modified":1666866733900},{"_id":"source/_posts/电子商务/20221027183201783077630927835137.md","hash":"012c800e38a1f0eac9e431e01231f8af0ac1ec73","modified":1666866733902},{"_id":"source/_posts/电子商务/20221027183201783077630923640835.md","hash":"45f85df297e3fa309461a95a8af0e6e96a5c7a04","modified":1666866733897},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663049159000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1663049159000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1663049159000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663049159000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1663049159000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663049159000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1663049159000},{"_id":"themes/fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663049159000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1663049159000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663049159000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663049159000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663049159000},{"_id":"themes/fluid/_config.yml","hash":"39baa882da9b0af5178c7767306be14bcf992a55","modified":1669401735501},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663049159000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663049159000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663049159000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1669295849869},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663049159000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663049159000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663049159000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663049159000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1669287378074},{"_id":"themes/fluid/layout/categories.ejs","hash":"05b27f4f725ccda872b683b4ed8b884c1df0e11a","modified":1669398228234},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663049159000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1669403303509},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663049159000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663049159000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663049159000},{"_id":"themes/fluid/layout/tags.ejs","hash":"d6f3245460d77355dd90888707e1d64c550539b0","modified":1669398211154},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1669395149326},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1663049159000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1669293264335},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"f8d7df0354c56f82d8e11468b6a707033ddaa150","modified":1669287421075},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"76e7448783a46ae7f8f7b2388f73f2dd7919909a","modified":1669456270122},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1669395640672},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663049159000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663049159000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663049159000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663049159000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663049159000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663049159000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663049159000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663049159000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663049159000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663049159000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663049159000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663049159000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663049159000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663049159000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663049159000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1669286283168},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663049159000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663049159000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"b10378cbccdb553d1f2fa88357de7eaf0687c8d1","modified":1669287292229},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663049159000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"42588ae4cf07a948df61c6940bd2f8f6d138326b","modified":1669395888290},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663049159000},{"_id":"source/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1666828158000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663049159000},{"_id":"source/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1666773579596},{"_id":"source/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1666857270158},{"_id":"public/local-search.xml","hash":"a8bac0d480aacd64265e5587c57713352ed085fb","modified":1669633608685},{"_id":"public/archives/index.html","hash":"c6323027f550ae0701c4d68b9fce4b10baeda9ae","modified":1669633608685},{"_id":"public/archives/page/2/index.html","hash":"83e445713209ec9e8a9d1f9225fdd100c9383a2c","modified":1669633608685},{"_id":"public/archives/2022/index.html","hash":"3fa809d1473b3c3850569d7ad840acb781b6763a","modified":1669633608685},{"_id":"public/archives/2022/page/2/index.html","hash":"43a3cb05e89dcf6fbc78732f69541c673b8ba0ba","modified":1669633608685},{"_id":"public/archives/2022/10/index.html","hash":"e9a01a0c26f5fba13b8dd0cb9c996382775bbd64","modified":1666883713352},{"_id":"public/archives/2022/10/page/2/index.html","hash":"3c48b4b927fe6114b9e888a7e001b2876d93e71c","modified":1666883713352},{"_id":"public/categories/公共关系学/index.html","hash":"fa944995a28ccbb26340c1959c5175d6beb975d0","modified":1666883713352},{"_id":"public/categories/人力资源管理/index.html","hash":"837d033345ce6060c5560438ddcd63a00800215c","modified":1666883713352},{"_id":"public/categories/基础会计学/index.html","hash":"db67c1e0a75cc7c9c23f8487b50fdb8f25f99c28","modified":1666883713352},{"_id":"public/categories/生产与运作管理/index.html","hash":"cb7ad07d74dbdda927b4a29698b33cd66ae43947","modified":1666883713352},{"_id":"public/categories/电子商务/index.html","hash":"7ae71c0bc4de23530459cc7581ec890dbb1c95ae","modified":1666883713352},{"_id":"public/tags/默认/index.html","hash":"b58bbf01a69a9e25ed8edf69ac0e644eca0958e8","modified":1669114060060},{"_id":"public/tags/默认/page/2/index.html","hash":"62c192f539ecfc0a79b7897f3024d4d6655a9764","modified":1666883713352},{"_id":"public/404.html","hash":"50e2b80b54cc598cb195792467f2a166fb17c840","modified":1669622867524},{"_id":"public/tags/index.html","hash":"f451c8e4b38b8ddb688a30beaf30df17e3e3d332","modified":1669633608685},{"_id":"public/2022/10/27/20221027183201783077630932029440/index.html","hash":"e4fcf377709d96909aea004452598067886e6fa1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630944612352/index.html","hash":"eeb4623f3a8548ff69577037d388a1dbb5ba3bff","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630948806656/index.html","hash":"d271e7edfbec194fe400865e6b047e5401482128","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630898475008/index.html","hash":"adba5a524b587579133f9af3edb5878f41acb15f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252224/index.html","hash":"71331217f513fe3a35542c13f4230db22756415d","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252225/index.html","hash":"1adf686cb814d36bad0ac5a8c01f642fe2c57e4a","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446530/index.html","hash":"37160cc8999f3f1a8b2e8d4496adb8b1f7ee22a1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446531/index.html","hash":"f092a9b828386991bf1a1c6e21027943bf83b09f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446532/index.html","hash":"33162fa41055ec21894e6236c64d030063b95c0c","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252226/index.html","hash":"7ed8ab5fced6e44038f687106dd65378d4c53751","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446528/index.html","hash":"3eab15006c48f5199c6d914d09447e9181b96b27","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446529/index.html","hash":"304cac6a5311d471559240ba900bf6d657e85e4f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640832/index.html","hash":"ba67c52ce2413c628a9b4a23ffe3e7c410ff1caa","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640833/index.html","hash":"ce89a338e1c4c55e50aa98097e5fe02e4590f7ef","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640834/index.html","hash":"23f5d9652368ee3e77a9473f57eebc9eb7b94c2f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640835/index.html","hash":"7ad658895e4518b9215d39e21e7f03372548809b","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835136/index.html","hash":"a93afbed5e4c6ad24cdcd9fa4d1e94dec05a6a21","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835137/index.html","hash":"5ca081cedf0d41828523d54947a9cfa2d42dd134","modified":1666883713352},{"_id":"public/2022/10/10/123/index.html","hash":"8dcd8b21f750f2299f43ed3c1271ff402f39d1b4","modified":1666883713352},{"_id":"public/index.html","hash":"f3b96aa6aeb1a2b6c25c3a5bef1b4cde463a7a15","modified":1669633608685},{"_id":"public/page/2/index.html","hash":"5262f423cd8b1b24715db8d36cc6ea8be327cc78","modified":1669633608685},{"_id":"public/categories/index.html","hash":"d3f2b76b8da7b769135853ec7ed62896b0531ae4","modified":1669633608685},{"_id":"public/links/index.html","hash":"1d7fd4e30d752a715c6e3e57e2bf37efc109ef9a","modified":1669622867524},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1669399150341},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1669399150341},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1669399150341},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1669399150341},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1669399150341},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1669399150341},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1669399150341},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1669399150341},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1669399150341},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1669399150341},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1669399150341},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1669399150341},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1669399150341},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1669399150341},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1669399150341},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1669399150341},{"_id":"public/css/main.css","hash":"a6b5a8d8f9255bf7d2d679d8adc264052dbac51d","modified":1669399150341},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669399150341},{"_id":"public/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1669399150341},{"_id":"public/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1669399150341},{"_id":"public/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1669399150341},{"_id":"source/_posts/Untitled Folder/Github刷提交记录.md","hash":"615b2f0c2f2c906a6aed5588310ab9b3933d7375","modified":1668674385578},{"_id":"source/_posts/环境安装/ElasticSearch入门.md","hash":"35d0a32a9f57c969e65c4d36ae0804e482090fe4","modified":1668674385578},{"_id":"source/_posts/Untitled Folder/构建自己的jar包上传至Mvaen中央仓库和版本更新.md","hash":"6f7d633936b93ec7d5a1ba46885be617d06c0e53","modified":1614957892000},{"_id":"source/_posts/环境安装/Jenkins打Docker镜像推送到私有仓库.md","hash":"71665cafcc9f63af36f43b9399f1c0e7583fb10c","modified":1600869317000},{"_id":"source/_posts/环境安装/Jenkins集成SonarQube.md","hash":"6fa39767faa30693fcf4a7666f872458ee0dded3","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】CerebroKibana7ES.md","hash":"1b84e63609712d17ced5dfb3c07e973d9d0fde9f","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Docker安装.md","hash":"1581e6bf565af11e4550c81a2630645c56f19b5d","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】ElasticSearch安装.md","hash":"6254f3d782e983a9cd81857db99c6741704e74a4","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】Logstash安装.md","hash":"dd39ba2f936ecbb90ec53c28c415d77cf302aa6c","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Kibana安装.md","hash":"fcbd4185d3c2c182b9ffbc5489b5102257d54bf9","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】阿里Arthas安装.md","hash":"44d5e1730d7dff9c054cda4ac561e414e4fdea0a","modified":1668674385578},{"_id":"source/_posts/环境安装/未完成.md","hash":"7760c5f4073cdfa34845b5bace190e316ba9c4ba","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/idea插件.md","hash":"4e41f12822cc5ecdce566782f4a179d2ef380afb","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/软件工具.md","hash":"cc726c9042308217b9c60617c15612d4158a59bc","modified":1668674385578},{"_id":"source/_posts/JAVA/CAS.md","hash":"8ede033f81cf21ac203c2e5dcf4435927d669a96","modified":1669397428024},{"_id":"source/_posts/JAVA/Synchronized锁升级过程.md","hash":"95bd1edf15660790dc26366b06f8158501bb44a9","modified":1669397428023},{"_id":"source/_posts/JAVA/指令乱序，指令重排序.md","hash":"556f320c2a5f29633af5d461eeeea8f5e249f40a","modified":1669397428024},{"_id":"source/_posts/JAVA/对象内存布局.md","hash":"063d55173608775f725223c832c9945adfc90fad","modified":1669397428024},{"_id":"source/_posts/DDD/领域驱动设计-DDD.md","hash":"ea4d132bdb967f61ad1db7dd1dd93a52ad494100","modified":1668674592999},{"_id":"source/_posts/JVM/1-JVM基础.md","hash":"dedc0ab81ad877482fef9669bfb142dade6bacc0","modified":1669397929923},{"_id":"source/_posts/JVM/2-JVM内存模型.md","hash":"120d7cbde38eeb927229abd2233b8778967e3782","modified":1669397955226},{"_id":"source/_posts/JVM/3-JVM垃圾回收算法和垃圾收集器.md","hash":"f1141c3d11ca32a7204f5ac8782c07b46e58ed2f","modified":1669397955222},{"_id":"source/_posts/JVM/4-JVM 参数.md","hash":"c84b76d7e0d8754bff560e42b6c75a590298870f","modified":1669397955224},{"_id":"source/_posts/JVM/5-JVM常用的命令.md","hash":"eb379b3261fed2713d7e6e26590c1e526d551116","modified":1669397955229},{"_id":"source/_posts/JVM/6-JVM常用工具和优化.md","hash":"c518fda92396d200eaf5aa77dc1fb6bb13aeccd2","modified":1669397955231},{"_id":"source/_posts/Mysql/1、Mysql执行流程与架构.md","hash":"af70fc0577d3f581ea554240a8648a998c59b51a","modified":1669397967046},{"_id":"source/_posts/Mysql/2、Mysql索引原理与使用规则.md","hash":"1928ca35db3cc879c43d7dc5455deb526adbc4b6","modified":1669397967045},{"_id":"source/_posts/Mysql/3、Mysql事务与锁详解.md","hash":"7e1453897f21b03373ec209bed9e22747e627e9d","modified":1669397967042},{"_id":"source/_posts/PMP/PMP概念.md","hash":"fde21507573cd96ebf07fa8a84fb1050579957c3","modified":1669482506124},{"_id":"source/_posts/PMP/知识领域.md","hash":"e498f2ce531b7e29f001f6993d185781e936b8e2","modified":1669482510728},{"_id":"source/_posts/React/React基础.md","hash":"0f5cad25ca0face4d7b3b7dd403b14536a904553","modified":1669397862025},{"_id":"source/_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","hash":"e4f4cd2b595536e755e661a90d1a97dd585452c6","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","hash":"4b097c1c339a8a4f71c6f6b511e609e5ad6ce90d","modified":1669190880308},{"_id":"source/_posts/SpringCloud/【SpringCloud】Eueka注册中心.md","hash":"d287e3bea8d8bfde7cb412f4de659fc8f90d1142","modified":1669482690777},{"_id":"source/_posts/SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值.md","hash":"5435b4ab234773b29ee48e70fa0f0b1d88dc507d","modified":1669482690777},{"_id":"source/_posts/IDEA 常用插件.md","hash":"1adbcafb49cd51e5412108030082a0001401afec","modified":1668674385579},{"_id":"source/_posts/JAVA 转换 树结构数据.md","hash":"691e65abe92fb2393c8aa1ef7f797400d1bb3eba","modified":1668674385579},{"_id":"source/_posts/MySQL数据和索引占用空间查询.md","hash":"a30f3293042051d442aa3749ac11a436d96f9567","modified":1668674386099},{"_id":"source/_posts/JSON字符串带BOM头.md","hash":"5a9b28230f0557cea5cced1cb8d4595e2f841ae4","modified":1668674386099},{"_id":"source/_posts/JAVA自定义注解.md","hash":"190f228a4e13ebc33b72204bc5bddd892e170df2","modified":1668674386099},{"_id":"source/_posts/MySQL 学习笔记.md","hash":"47ee5ee2f590858af3879364f0ca32166915f7e5","modified":1668674386099},{"_id":"source/_posts/MySQL数据库设计规范.md","hash":"330b58853cae73bcd9a62614f3cd12df7343baaf","modified":1668674386099},{"_id":"source/_posts/MAC替换Homebrew源.md","hash":"2abd747d20abd096e06fafe4b0227d9cc83de0f9","modified":1668674386099},{"_id":"source/_posts/Mycat配置.md","hash":"81c9e2958870630cdc3603b8bd823dd02a805fef","modified":1668674386099},{"_id":"source/_posts/NAS搭建黑群晖5.2稳定版本.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/Mysql ONLY_FULL_GROUP_BY.md","hash":"29d128543a36bbbd9e47d0be63b0437cbcadfbf6","modified":1668674386099},{"_id":"source/_posts/Mysql 查询天、周，月，季度、年的数据.md","hash":"4b6a174f37708cd5e80b42094126f85b0f762d30","modified":1668674386099},{"_id":"source/_posts/SSR搭建科学上网服务VPN.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/SpringBoot Druid 配置详解.md","hash":"a6f87cc0c73d7fea23c463037d92952928f51ccb","modified":1668674386099},{"_id":"source/_posts/SpringBoot AOP处理请求日志处理打印.md","hash":"1cd1a114a3b1da1203413dd676bb81dfa05b3685","modified":1668674386099},{"_id":"source/_posts/SpringBoot Redis 配置详解.md","hash":"85f0ddfa33e1317a68896a0391911963717f7590","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 整合 Swagger2.md","hash":"70ae30f9d7029a530de4e4d226dc5e6ac69ff7e5","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 线程池的定义和使用.md","hash":"67f77c607f8be47fa83f947508712c5c7191cad0","modified":1668674386099},{"_id":"source/_posts/SpringBoot 全局异常处理.md","hash":"cd14bcdb40bb964fa4f6664a5495a6c9d84f4324","modified":1668674386099},{"_id":"source/_posts/SpringBoot Shiro 配置自定义密码加密器.md","hash":"26c8a3e3bc1037e89cf8d1496cf4e30f0f65cdd7","modified":1668674386099},{"_id":"source/_posts/redis命令和RedisTemplate操作对应表.md","hash":"1d9bcce312a879eb1337dd7f880f52223e9c1bf8","modified":1668674386099},{"_id":"public/categories/DDD/index.html","hash":"390e8b764225aa4a32b3702a773b24c489d5a415","modified":1669114060060},{"_id":"public/archives/2021/index.html","hash":"87c7f981cd6b2bda1056642e636dae5fbb827e43","modified":1669633608685},{"_id":"public/archives/2021/09/index.html","hash":"5f133a2319cadf1423730df3e87063000aa8d772","modified":1669114060060},{"_id":"public/2021/09/01/DDD/领域驱动设计-DDD/index.html","hash":"0ce2e39e078950f93240679ded1a1ff9d3183749","modified":1669114060060},{"_id":"source/img/bg/icon.png","hash":"f29760ef646e0f9648a2b8bce601f0e4cb599a56","modified":1669112972476},{"_id":"public/img/bg/icon.png","hash":"f29760ef646e0f9648a2b8bce601f0e4cb599a56","modified":1669113050201},{"_id":"source/img/icon.png","hash":"552f90d7db4846ad4da6d97bf85a004185a0ff4b","modified":1669115067299},{"_id":"public/img/icon.png","hash":"552f90d7db4846ad4da6d97bf85a004185a0ff4b","modified":1669399150341},{"_id":"source/_posts/SpringBoot/【SpringBoot2】整合 Swagger2.md","hash":"7a44b9880de44e5da5357726d2f45fd0c9d839f3","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot2】线程池的定义和使用.md","hash":"9199670fad5693c03d48d4c03f5f409345680b0d","modified":1669193615681},{"_id":"source/_posts/SpringBoot/【SpringBoot】AOP处理请求日志处理打印.md","hash":"b157ce4c7f091c8dee1e44076c57a7096f85504e","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Druid 配置详解.md","hash":"b5b8b1560bac4ad0eb34072b4abdb635a8d2c779","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Redis 配置详解.md","hash":"812f97602fbd74b345e79f9f80957ab877cae742","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器.md","hash":"5bf83989c9fbe9c2d3dbd9097bddaa2bf5ee23f6","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】全局异常处理.md","hash":"3ca38fb10fff347cc40d9e97ad7f450d8d15334b","modified":1669190880308},{"_id":"public/archives/2020/index.html","hash":"f4384f5eea2dd52dd394c1e0212d0de6956e1b35","modified":1669633608685},{"_id":"public/archives/2020/03/index.html","hash":"0b0c01732e871a850f6008f71e87af494331dd57","modified":1669633608685},{"_id":"public/archives/2022/11/index.html","hash":"f69a651a7974f9057393c49474b206675d8990d7","modified":1669633608685},{"_id":"public/categories/SpringBoot/index.html","hash":"6c73a0c4fe6c3cddc264a688e665cd67b8e29e72","modified":1669633608685},{"_id":"public/tags/SpringBoot/index.html","hash":"914f331ef6a7fa71f40daae166b6122d28dc7b84","modified":1669633608685},{"_id":"public/tags/Swagger2/index.html","hash":"8c182ea47fa4107665a15a7f84876d08802cc34f","modified":1669633608685},{"_id":"public/tags/序列化/index.html","hash":"4e68e3d8fe7f710ef57c3b03a94678355a568d63","modified":1669633608685},{"_id":"public/tags/时间格式/index.html","hash":"feb95bc58296f39ba32c0e192d11ec888a698e8a","modified":1669633608685},{"_id":"public/tags/AOP/index.html","hash":"ca13b4ad10ce64b46cbc648fa8c2a6a25506d14b","modified":1669633608685},{"_id":"public/tags/切面/index.html","hash":"b0c88cc1776dec4030efdcf20432cd688f596ab2","modified":1669633608685},{"_id":"public/tags/日志处理/index.html","hash":"c7cf9c421c03748f1a493add053f2afc31fca7eb","modified":1669633608685},{"_id":"public/tags/Druid/index.html","hash":"f2ddf6400cce2aadf3d551d09cfa5e8cb1c2d0db","modified":1669633608685},{"_id":"public/tags/Mysql连接池/index.html","hash":"bc67207a351a7f3c19dcd27ee6caddb97af5a149","modified":1669633608685},{"_id":"public/tags/Redis/index.html","hash":"125a52ed49d59c12e251a6c74ea51772bb036b89","modified":1669633608685},{"_id":"public/tags/Shiro/index.html","hash":"7acd4fe272d88ecd1c0af461f9d6537e879cec84","modified":1669633608685},{"_id":"public/tags/自动配置/index.html","hash":"f3e48530f8bbbe29e8d977b87a57e5a9b43693ef","modified":1669633608685},{"_id":"public/tags/全局异常/index.html","hash":"45e4ca69389724e7a230b99f04ce46f0d75acfa5","modified":1669633608685},{"_id":"public/tags/线程池/index.html","hash":"6400efe6fd2ec21d81106726daa90113893443fe","modified":1669633608685},{"_id":"public/20221123/a71082abf1bd.html","hash":"bba0c83bac429de6060950b075b447f8a0f8758a","modified":1669622867524},{"_id":"public/20221123/ede4d722a64c.html","hash":"93bb13a5445240625af98ab5fd142a629c03e651","modified":1669622867524},{"_id":"public/20221123/40dba990c09b.html","hash":"082b3292e5cfeb6b454e07e55bd06c7dd2d379cb","modified":1669622867524},{"_id":"public/20221123/af4853386d96.html","hash":"f0dbc78f1a9363ee1dd45d82e0cb5b66e1096266","modified":1669622867524},{"_id":"public/20221123/e91f888d1c7e.html","hash":"4dd09c6afb907029eedb8d1a46689553db136317","modified":1669622867524},{"_id":"public/20221123/f2126e09480c.html","hash":"2e082188f60139c25b15331fac6f06e79703c57d","modified":1669622867524},{"_id":"public/20200322/e17c6e837cd0.html","hash":"5adf8e39c33fb92f85bbd631f7dc4ea10748f2e9","modified":1669622867524},{"_id":"public/20200318/04561bfb9fbe.html","hash":"0285787722f0e5a201d071815db82944f0254e39","modified":1669622867524},{"_id":"public/20200313/00267f611c07.html","hash":"707ea88794a4032d761cf558f29b916ffc07aa98","modified":1669622867524},{"_id":"themes/hexo-theme-matery-master/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/_config.yml","hash":"056cf5f020e9a240522808b6872897f6dcee79fa","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery-master/source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1669280362197},{"_id":"source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1669280362197},{"_id":"source/about/index.md","hash":"27716ad12695774908760b4b4efa667654c1f754","modified":1669282621446},{"_id":"source/tags/index.md","hash":"9897e22b3e10cb380eacc82eed0f1267b00ea810","modified":1669282594358},{"_id":"themes/fluid/layout/_widget/post-calendar.ejs","hash":"aa9e9c6bbd79ade19f829dc6bc0e13637cdfd016","modified":1669395941380},{"_id":"themes/fluid/source/css/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/fluid/source/js/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/fluid/layout/_partials/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/fluid/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1606456707000},{"_id":"themes/fluid/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/fluid/layout/_widget/tag-cloud.ejs","hash":"ca71d908ce37bbbc66e32b456388e75848cd112f","modified":1669395486176},{"_id":"themes/fluid/layout/_widget/category-radar.ejs","hash":"81424bf3eb85d6b4fbc3ceb7a5cb065eb83c1b32","modified":1669398917261},{"_id":"public/page/3/index.html","hash":"43692fedb20352d1a7be63afee943e7dea1e2ea2","modified":1669633608685},{"_id":"public/20220707/9e1b7d3d81ac.html","hash":"535d528ef2c3e3217ab9fa658d009e60b6aebf85","modified":1669622867524},{"_id":"public/20220707/044c18a37b50.html","hash":"94183317d4c3c377c4c4727dd104408dded96d94","modified":1669403677563},{"_id":"public/20220408/8a96b0831a59.html","hash":"78a83d587154a35c2cdf48677557a51a8962390d","modified":1669403677563},{"_id":"public/20220408/8978ac0726f6.html","hash":"e282b7e9a1b61d9c154b6e98d1b8ec0a6e89f1f6","modified":1669403677563},{"_id":"public/20220301/f139a5fffab3.html","hash":"06085c07ef29ede76861d12d9472ba6ad258b8ee","modified":1669403677563},{"_id":"public/20210401/c121bd1e199e.html","hash":"bb2161f9e23cd44250b8cee85b010cd8f686f6a2","modified":1669622867524},{"_id":"public/20210208/0559ae4aad3c.html","hash":"93232344dd1233483864af832f2a2f444b9c7e92","modified":1669622867524},{"_id":"public/20210208/a768595c9778.html","hash":"312a705be49d0a4992599fafaeb73d7c2c90b24a","modified":1669622867524},{"_id":"public/20200609/45bd6c7c3187.html","hash":"963a28c9cf97308288c39b83598276aaed9e3b80","modified":1669622867524},{"_id":"public/20200515/3af21c7f6638.html","hash":"3ec8151075e43dcc93d20e00f743aa2a7a10dbaf","modified":1669622867524},{"_id":"public/20200515/6249325e8128.html","hash":"68afb4782fccedb7cafcbe6838399ad1ea7d36fe","modified":1669622867524},{"_id":"public/20200514/96a9eeac3fe1.html","hash":"6ae8d850810e046adbf7bce9721efbe4e333c48b","modified":1669622867524},{"_id":"public/20200507/3364a1445abf.html","hash":"99f67718b4e9bf91a620c15b6996957be0fc2290","modified":1669622867524},{"_id":"public/20200425/cb6006ce99db.html","hash":"c3a3053192116de9d5f593c632fee37c56d1a432","modified":1669622867524},{"_id":"public/archives/page/3/index.html","hash":"b882394f5970895b707b16d748be92d1cc3125e4","modified":1669633608685},{"_id":"public/archives/2020/04/index.html","hash":"3d59499c34c9b6b1fa67d50d8543182eb8165908","modified":1669633608685},{"_id":"public/archives/2020/05/index.html","hash":"35b704e1a001753d5a9d92bb11d2f0e25e1187c0","modified":1669633608685},{"_id":"public/archives/2020/06/index.html","hash":"b85b7fb0f28d0735d058aafbbac08bc300628eea","modified":1669633608685},{"_id":"public/archives/2021/02/index.html","hash":"eeccb9bad635a7edd0e19f004b260f21089c3072","modified":1669633608685},{"_id":"public/archives/2021/04/index.html","hash":"9d5b146ff08cc99f55bd4268f5561415aefc46bb","modified":1669633608685},{"_id":"public/archives/2022/03/index.html","hash":"207c75fabbb364236bb1d879ba0e1e2f1569aa04","modified":1669633608685},{"_id":"public/archives/2022/04/index.html","hash":"d781a76e163fda6d3da0bc5ff174b29be603c395","modified":1669633608685},{"_id":"public/archives/2022/07/index.html","hash":"65525f9218c8490d217be08785c1a5d673307c91","modified":1669633608685},{"_id":"public/categories/JAVA/index.html","hash":"884fd19292a81776715300467c1c4a8db165c773","modified":1669633608685},{"_id":"public/categories/JVM/index.html","hash":"44a662d4d825e92a35840bf6efb48b9da8d29063","modified":1669633608685},{"_id":"public/categories/React/index.html","hash":"69df6434c70c4038a3abe72723d21986f925edeb","modified":1669403677563},{"_id":"public/categories/Mysql/index.html","hash":"946ef93f1c571b3e0c405657bc9ec43e0a1ce78a","modified":1669403677563},{"_id":"public/tags/CAS/index.html","hash":"add204617482d9be7b165e98b9fdb3c1248a6e3f","modified":1669633608685},{"_id":"public/tags/锁/index.html","hash":"9b8a78ef4c7269b13b93b95f69239c43ef3b7f34","modified":1669633608685},{"_id":"public/tags/Synchronized/index.html","hash":"74c15bbbe327cf8ccd9f173b8413eba5b6d8dc68","modified":1669633608685},{"_id":"public/tags/对象内存布局/index.html","hash":"41379b703c84e2f68f0441d7a15de550207cc8e0","modified":1669633608685},{"_id":"public/tags/指令乱序/index.html","hash":"cc5c2890fb91ee70935b0a198f8da48e3c74ed33","modified":1669633608685},{"_id":"public/tags/指令重排序/index.html","hash":"2c941f893cabdd2ea54d183330960c7b0c52109f","modified":1669633608685},{"_id":"public/tags/JVM/index.html","hash":"000bd071634ab932f1d943a927eea07537239b66","modified":1669633608685},{"_id":"public/tags/垃圾收集器/index.html","hash":"070685f6b3fb09828bc7fc0de72b548705d5e368","modified":1669633608685},{"_id":"public/tags/垃圾回收算法/index.html","hash":"6ef1a428c06e765696c8415d8514c00576b94e17","modified":1669633608685},{"_id":"public/tags/Mysql/index.html","hash":"dea51cf5df8bfc3684979f34bbd8e502f07b94f4","modified":1669633608685},{"_id":"public/tags/React/index.html","hash":"68c08cc76a3c50fa752438eaf4deffed2d9f3326","modified":1669633608685},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1669399150341},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1669399150341},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1669399150341},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1669399150341},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1669399150341},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1669399150341},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1669399150341},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1669399150341},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1669399150341},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1669399150341},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1669399150341},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1669399150341},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1669399150341},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1669399150341},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1669399150341},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1669399150341},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1669399150341},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1669399150341},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1669399150341},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1669399150341},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1669399150341},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1669399150341},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1669399150341},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1669399150341},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1669399150341},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1669399150341},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1669399150341},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1669399150341},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1669399150341},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1669399150341},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1669399150341},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1669399150341},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1669399150341},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1669399150341},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1669399150341},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1669399150341},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1669399150341},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1669399150341},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1669399150341},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1669399150341},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1669399150341},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1669399150341},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1669399150341},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1669399150341},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1669399150341},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1669399150341},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1669399150341},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1669399150341},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1669399150341},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1669399150341},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1669399150341},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1669399150341},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1669399150341},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1669399150341},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1669399150341},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1669399150341},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1669399150341},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1669399150341},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1669399150341},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1669399150341},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1669399150341},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1669399150341},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1669399150341},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1669399150341},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1669399150341},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1669399150341},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1669399150341},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1669399150341},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1669399150341},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1669399150341},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1669399150341},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1669399150341},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1669399150341},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1669399150341},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1669399150341},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1669399150341},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1669399150341},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1669399150341},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1669399150341},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1669399150341},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1669399150341},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1669399150341},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1669399150341},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1669399150341},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1669399150341},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1669399150341},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1669399150341},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1669399150341},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1669399150341},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1669399150341},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1669399150341},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1669399150341},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1669399150341},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1669399150341},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1669399150341},{"_id":"public/js/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1669399150341},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1669399150341},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1669399150341},{"_id":"source/CNAME","hash":"b1329bca2f0294779b2256d4668244a1c52808fe","modified":1669400397848},{"_id":"public/CNAME","hash":"b1329bca2f0294779b2256d4668244a1c52808fe","modified":1669400455047},{"_id":"source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669279924868},{"_id":"source/README","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669403823619},{"_id":"source/_posts/JAVA/JSON字符串带BOM头.md","hash":"17b7d3e7e3d5dc8deae8922ca7ca5230564288da","modified":1669482690777},{"_id":"source/_posts/MAC/MAC替换Homebrew源.md","hash":"10b83c251a0f6418c7e64276a81a8c0722c38d0e","modified":1669482690778},{"_id":"source/_posts/环境集成/ElasticSearch入门.md","hash":"8f04d834bf521a6be201b59974a59addd68a17c7","modified":1669483498818},{"_id":"source/_posts/环境集成/Jenkins打Docker镜像推送到私有仓库.md","hash":"3b528bba519645a25d273b6f7c83a001b133d85f","modified":1669483498819},{"_id":"source/_posts/Maven/构建自己的jar包上传至Mvaen中央仓库和版本更新.md","hash":"9b455467c32526c21052340bde7c35d4f26ef0c1","modified":1669483498818},{"_id":"source/_posts/环境集成/Jenkins集成SonarQube.md","hash":"950dab70512861f3baf9da884eb7e19f55a08a9b","modified":1669483498818},{"_id":"source/_posts/奇淫技巧/Github刷提交记录.md","hash":"99961d905a89ab326d53b3f3299b7c75ff7cb3ab","modified":1669602190322},{"_id":"source/_posts/环境集成/【环境安装】Logstash安装.md","hash":"b0edbc2ab9dd205ff27babd1503d0c26647c7a51","modified":1669483498819},{"_id":"source/_posts/环境集成/【环境安装】ElasticSearch安装.md","hash":"d9d49d950cb050fe7bf70c8f7be7db2f179b574f","modified":1669483498818},{"_id":"source/_posts/环境集成/【环境安装】Kibana安装.md","hash":"4bb081c5076ce622a3005ed070d335d3970e1d72","modified":1669483498818},{"_id":"source/_posts/环境集成/【环境安装】CerebroKibana7ES.md","hash":"708a3cd3f95d79a5d9d5aa33e783e9e33a2a8d1e","modified":1669483498818},{"_id":"source/_posts/环境集成/【环境安装】Docker安装.md","hash":"3d394393abee8fdffc036f7208ee7e9b75879743","modified":1669483498818},{"_id":"source/_posts/环境集成/阿里Arthas如何使用.md","hash":"db84a403408aca24c64a1ad8a4ca7210df8af8ef","modified":1669483498819},{"_id":"source/_posts/环境集成/【环境搭建】Nexus搭建Maven私服.md","hash":"fcecce544016cd842e4f8f29ffaa5529838e1ccb","modified":1669483498819},{"_id":"source/_posts/前端/React/React基础.md","hash":"a06401d5913a61f705272fed7aa4ba30a446b076","modified":1669484372680},{"_id":"source/_posts/数据库/ElasticSearch/ElasticSearch入门.md","hash":"071bb1ee756f31b662480c90fc2a6e493aa017c8","modified":1669484430667},{"_id":"source/_posts/数据库/Mysql/1、Mysql执行流程与架构.md","hash":"2e074042beb2e4abc8a82aa2500a048974a1c783","modified":1669484559377},{"_id":"source/_posts/数据库/Mysql/2、Mysql索引原理与使用规则.md","hash":"d428260361a83375ad44abdeeb45346b336543c0","modified":1669484559374},{"_id":"source/_posts/数据库/Mysql/3、Mysql事务与锁详解.md","hash":"5cb30c9cccbfc25e0bd6b819494a7c75dee356e4","modified":1669484559380},{"_id":"public/page/5/index.html","hash":"ba2e77b7eda1da6e268a491ef884780dde57d930","modified":1669633608685},{"_id":"public/20221127/42466bcec765.html","hash":"3422ba389bc10a985072ef6874ec3f8687dc965d","modified":1669633608685},{"_id":"public/20220707/f9f1e678c9b4.html","hash":"39f862d31c54e9bc5037a1aecdc171d6a3a3df46","modified":1669622867524},{"_id":"public/20220408/2c42955d3e53.html","hash":"be3004a29406dab3372d743618709701683d416e","modified":1669622867524},{"_id":"public/20220408/a0d411e784b0.html","hash":"c0742d37b2737e4189b472aff6d95666a0bcb1d1","modified":1669622867524},{"_id":"public/20220301/65a387d339c2.html","hash":"9d73e41d0dc7e22710503428e3cc9f671e1e1e80","modified":1669622867524},{"_id":"public/20210525/1da1145904a0.html","hash":"f7f713f8a702d3cc5f781db9bb94891574b01afe","modified":1669622867524},{"_id":"public/20210310/e097651801dc.html","hash":"d2ec77a175dd43d16ace9076c1ab520f091fb8e0","modified":1669622867524},{"_id":"public/20210306/b4123b4c0c67.html","hash":"27c92c80848e6365aa1b6ce3fc3e09cdc955f3fd","modified":1669622867524},{"_id":"public/20210305/d4f25e7db0d2.html","hash":"0faa2d63396e9b7476ef1be9e230568d18bdf478","modified":1669622867524},{"_id":"public/20210301/93e01d4fe8ee.html","hash":"d0d867714eb4a0015c3568d851c52065587c37bb","modified":1669622867524},{"_id":"public/20210225/fa01ac8e46ec.html","hash":"e04068cf369393db5713fdf08523db7eba895fe6","modified":1669622867524},{"_id":"public/20210221/af1a2a9fd5c4.html","hash":"153e992d44778bb88376b3dd7fe72af201a63d89","modified":1669622867524},{"_id":"public/20210209/be7f567224e1.html","hash":"cf460f55bbffe38a26ec599a87e22ff61a590afc","modified":1669622867524},{"_id":"public/20210115/690e8aa4a988.html","hash":"c21150eee41b963335b890619a10a46368f63fdf","modified":1669622867524},{"_id":"public/20201203/37292c3e6a70.html","hash":"8fbe7c9964163882ceb8da5d1b35cacd8b081578","modified":1669622867524},{"_id":"public/20201203/d6f98e405197.html","hash":"6845b29231bd8c49ee056db29b1016563832a212","modified":1669622867524},{"_id":"public/20201119/54d4ab3e5943.html","hash":"cfb5d84946adc9d6f3986c44f5b004e29c61f42f","modified":1669622867524},{"_id":"public/20200923/627cd0e638e2.html","hash":"7862f744f2376d7b1ea5c695e1923aa2be5daef0","modified":1669622867524},{"_id":"public/20200922/23f659b1f714.html","hash":"ff9647eb1db5c544aba99fa8522d95753f6c6aa8","modified":1669622867524},{"_id":"public/20200702/3dc0d5e6a82c.html","hash":"15a9d26d40022a0c2a340233abc69b6b577193a6","modified":1669622867524},{"_id":"public/20200606/196696a206d9.html","hash":"da8f30eb3a92338e27ed752e6a8b6414817942d2","modified":1669622867524},{"_id":"public/20200325/8086ff66de56.html","hash":"c2c1caef6c4427de822faa7102952275e13bbda2","modified":1669622867524},{"_id":"public/archives/page/4/index.html","hash":"4c05e78796067b8065f6dfe4ba5957bd4d47a01a","modified":1669633608685},{"_id":"public/archives/page/5/index.html","hash":"dc5df0327aa8083f294ed673c64c5ab84184077e","modified":1669633608685},{"_id":"public/archives/2020/page/2/index.html","hash":"81bedf7ac9bba81ef4f974c80fdfe106c7c8517d","modified":1669633608685},{"_id":"public/archives/2020/07/index.html","hash":"8ed67ac937d5cab4497a193a188b5cd166f73129","modified":1669633608685},{"_id":"public/archives/2020/09/index.html","hash":"d7b3eee65c3a795e3b1b7484d3c0d2e7e4ea1728","modified":1669633608685},{"_id":"public/archives/2020/11/index.html","hash":"ab41e2d1ef94ed9eebd42c082d6a0e1d487df9df","modified":1669633608685},{"_id":"public/archives/2020/12/index.html","hash":"fad8b01927143f3374540890035bee56d0f1943d","modified":1669633608685},{"_id":"public/archives/2021/page/2/index.html","hash":"e6664b7cf18095e7f292e705efa9fd8f11914e77","modified":1669633608685},{"_id":"public/archives/2021/01/index.html","hash":"fba23ed3d1754aff63d4285bb019596c26d2790d","modified":1669633608685},{"_id":"public/archives/2021/03/index.html","hash":"1cd0446a173b981487a931ab666bb2ebebef9be9","modified":1669633608685},{"_id":"public/archives/2021/05/index.html","hash":"c6d4a7461d36ce968c38e0a4f6416746bc920490","modified":1669633608685},{"_id":"public/categories/SpringCloud/index.html","hash":"7f33b92e83bc00141f281e7f5e8b1043868311da","modified":1669633608685},{"_id":"public/categories/PMP/index.html","hash":"bc64748df4abc3cfa623b8474871ab2e97d5e250","modified":1669633608685},{"_id":"public/categories/MAC/index.html","hash":"40d74ffa1292c327df040ed2aab893b505da038d","modified":1669633608685},{"_id":"public/categories/奇淫技巧/index.html","hash":"38037d45d7cb2a92c9cdd1dff9f86045335ef6e9","modified":1669633608685},{"_id":"public/categories/Maven/index.html","hash":"21a0224c3195a67ff6460058828ad623a3d1137b","modified":1669633608685},{"_id":"public/categories/环境集成/index.html","hash":"0e7b8f697e9dd235d1f0fd75fc29c6bcbbc63083","modified":1669633608685},{"_id":"public/categories/前端/index.html","hash":"ef04d1b54e52774352f490240e510ca4876e6ae7","modified":1669633608685},{"_id":"public/categories/数据库/index.html","hash":"85cfb17f051e7b4e95de0763ba665656da78616d","modified":1669633608685},{"_id":"public/tags/JAVA/index.html","hash":"4c95515c6f3a2ad40811e7bb1fc657aecf5ea983","modified":1669633608685},{"_id":"public/tags/MAC/index.html","hash":"c5b278f61b13ab82abaee9fffae257c179743508","modified":1669633608685},{"_id":"public/tags/Homebrew/index.html","hash":"34b93bdd1fb063bac466192b8359b9536bfa1246","modified":1669633608685},{"_id":"public/tags/PMP/index.html","hash":"d9d7f73a8dd140c55449228b53aa5f1abe888d0f","modified":1669633608685},{"_id":"public/tags/SpringCloud/index.html","hash":"dc26618afa619e2a3f2bf73fd37b52ea063c3956","modified":1669633608685},{"_id":"public/tags/Eueka/index.html","hash":"d0df38c424934880ff6712fa56c2adae837cb4ca","modified":1669633608685},{"_id":"public/tags/注册中心/index.html","hash":"608c49db36e88ba569b87351e0834a816aaa47b0","modified":1669633608685},{"_id":"public/tags/Gateway/index.html","hash":"253fce2e1b9dfc760a77a8cb6b830391f7918e5e","modified":1669633608685},{"_id":"public/tags/全局过滤器/index.html","hash":"5a45990b0caae2eb69d069fb6f99f987dfbd4a2a","modified":1669633608685},{"_id":"public/tags/Github/index.html","hash":"909df1a8826972ad1a8537868d6f2fee80a556d9","modified":1669633608685},{"_id":"public/tags/Maven/index.html","hash":"8701fd3dbbc19f5ee2e4064d23bd6f8595979d7b","modified":1669633608685},{"_id":"public/tags/ElasticSearch/index.html","hash":"c86ab99a51202c0ae35f796350e15048a075818b","modified":1669633608685},{"_id":"public/tags/ES/index.html","hash":"62e3c18b4512a9acc9b9a4f3200e53a4e28199ee","modified":1669633608685},{"_id":"public/tags/Jenkins/index.html","hash":"e4998c6dc3e43466850058c7bbc76bacf2a13c54","modified":1669633608685},{"_id":"public/tags/Docker/index.html","hash":"0a8837fb863d079466ad9b3d4882eaa5a8a41745","modified":1669633608685},{"_id":"public/tags/SonarQube/index.html","hash":"0810522278b5966f1c28424ecf37ad0c78f411cd","modified":1669633608685},{"_id":"public/tags/Kibana/index.html","hash":"5c3aae37ed8dbbb568c61572347e3ce46d19cbd8","modified":1669633608685},{"_id":"public/tags/Logstash/index.html","hash":"0cc5051126cd80c88abdb70967417e19b4468162","modified":1669633608685},{"_id":"public/tags/Nexus/index.html","hash":"9e3ebecf204741a6a339354375ef453203e8e86f","modified":1669633608685},{"_id":"public/tags/Arthas/index.html","hash":"50a501ec387c14729266e84527d4972e144cd349","modified":1669633608685},{"_id":"public/tags/前端/index.html","hash":"c5d614e77a62e6dcf00e4e0f353d5b75962bbe35","modified":1669633608685},{"_id":"public/tags/数据库/index.html","hash":"3f785066872422a13a17024b2e190593da9a91c4","modified":1669633608685},{"_id":"public/page/4/index.html","hash":"134d83cdcc1aa88f498cc7ad6ae8be18d39c4e33","modified":1669633608685},{"_id":"public/README","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669622867524},{"_id":"source/_posts/JAVA/JAVA转换树结构数据.md","hash":"0aa94e12b1bfb3f17a80948ce352dfa71db50ab4","modified":1669633043997},{"_id":"source/_posts/SpringCloud/【SpringCloud】Eureka整合使用和配置.md","hash":"6dea7712b0c49a4ff05d0fd8c0c6b7a9538197ef","modified":1669633043997},{"_id":"source/_posts/SpringCloud/【SpringCloud】Feign组成和配置.md","hash":"45bd77cce95febfee1da516aacb1b7ddfa8a35f5","modified":1669633043997},{"_id":"source/_posts/SpringCloud/【SpringCloud】Ribbon组成和负载均衡规则.md","hash":"8723b41febf3f78c22f1eda9ed1cad5029b1f991","modified":1669633043997},{"_id":"source/_posts/SpringBoot/【SpringBoot2】整合Redis缓存.md","hash":"5d83f67a0cdc8010fb3ecd4ed55587b11ab0df08","modified":1669633043997},{"_id":"source/_posts/数据库/Mysql/MySQL学习笔记.md","hash":"4aaef07780b95568b52a0a0eb2158b1dc82dfdc3","modified":1669633043998},{"_id":"source/_posts/SpringBoot/【SpringBoot2】整合Redis多数据源.md","hash":"dacda58d8d8aae5fbc9d65d0ffe5df3934cf4cb8","modified":1669633043998},{"_id":"source/_posts/数据库/Mysql/Mysql 查询天、周，月，季度、年的数据.md","hash":"5c1bd5fd1e6c2d5cf67b04e33a640af27b130dcf","modified":1669633043998},{"_id":"source/_posts/数据库/Mysql/Mysql5.7及以上版本ONLY_FULL_GROUP_BY报错.md","hash":"1e147509b1ac9d21a1d175126fea6265d12c51fb","modified":1669633043997},{"_id":"source/_posts/SpringCloud/【SpringCloud】Feign性能优化.md","hash":"48cd6c7133962d57a27d68fd3970ef7bd394c5be","modified":1669633043998},{"_id":"source/_posts/数据库/Mysql/MySQL数据和索引占用空间查询.md","hash":"36cb3f01e68a6485e77c7643520a14a1c89c55b7","modified":1669629582654},{"_id":"source/_posts/SpringCloud/【SpringCloud】Feign 总结问题，注意点，性能调优，切换okhttp3.md","hash":"942b941115c6938a0e46cd038d8c4a5479147eef","modified":1669633043997},{"_id":"source/_posts/数据库/Mysql/MySQL数据库设计规范.md","hash":"612bb109074efd32b0cc5854789848ab94af21d6","modified":1669633043998},{"_id":"public/20221128/a49b129b0c4a.html","hash":"7a57993ff7fd1f743a99a9fb580b472fa29ba36f","modified":1669633608685},{"_id":"public/20221128/74c687698b2d.html","hash":"dbd864e912c36a2944e4b5032d04978727ccbdaa","modified":1669633608685},{"_id":"public/20221128/b36ebc5f1af0.html","hash":"f9df7087a5f22b7706d07da7bf55e119c6b2677a","modified":1669633608685},{"_id":"public/20221128/d0397353a18f.html","hash":"5564cfebda0bcb800436b64458b6a3d0502e66cf","modified":1669633608685},{"_id":"public/20221128/5a89e4a62e37.html","hash":"f72b97b8ea68d284c17429d791c1b10727023f78","modified":1669633608685},{"_id":"public/20221128/36806b7469c8.html","hash":"9f73ca4c0a18d477c1d5ee1f5c32984e0c190049","modified":1669633608685},{"_id":"public/20221128/187e0f792751.html","hash":"f47576b71472bc8a38370fed6012afd9ae657aa7","modified":1669633608685},{"_id":"public/20221128/02a986c2604f.html","hash":"456b2432d1284896b4532f639dcac4d334254de4","modified":1669633608685},{"_id":"public/20221128/fb1ac39b6320.html","hash":"931443e566a775eb5dde23ef4da6a602a23a5580","modified":1669633608685},{"_id":"public/20221128/57eb02bc63e9.html","hash":"bf830858997adcddfb86034dd70ff4b9af2b84f8","modified":1669633608685},{"_id":"public/20221128/54c88a5904d4.html","hash":"9d10a6c9eb979ea84a770359281a3cd46bd023b5","modified":1669633608685},{"_id":"public/20221128/98e49fdd16a6.html","hash":"608688bae3ecbbcb8653a1e463942900fefc6f42","modified":1669633608685},{"_id":"public/20221128/2630fef0426e.html","hash":"89a89b6c3ac92241794b1645b9d195a426b239cc","modified":1669633608685},{"_id":"public/archives/page/6/index.html","hash":"bc5defd371c110aa32c4efe2220d2c9ecc285723","modified":1669633608685},{"_id":"public/archives/2022/page/3/index.html","hash":"6318ce6e4376a6f7ee9216f8f7207bbbfa49b2e0","modified":1669633608685},{"_id":"public/archives/2022/11/page/2/index.html","hash":"1d333128baad99540ef625a0fbbf4bfb067ec18b","modified":1669633608685},{"_id":"public/categories/SpringBoot/page/2/index.html","hash":"5c5682d08d449a76193c6ca4f40a13ee1c0f04d3","modified":1669633608685},{"_id":"public/page/6/index.html","hash":"499489e3f2eefdb4ee45c6957ea1ac1be7d33776","modified":1669633608685},{"_id":"public/tags/SpringBoot/page/2/index.html","hash":"fa7174ba5e40ec7b01fa8ac4641ebb692a149c59","modified":1669633608685},{"_id":"public/tags/fastjson/index.html","hash":"8b446c44e109dd00a88cf93e319b42fb18460cde","modified":1669633608685},{"_id":"public/tags/Eureka/index.html","hash":"1c4aa142e7b191def474eabac518e604771c2213","modified":1669633608685},{"_id":"public/tags/Feign/index.html","hash":"0b333e70be3005d5401f12e3404148092a140303","modified":1669633608685},{"_id":"public/tags/okhttp/index.html","hash":"131dac34309f60e6421a44064c16e545726f15df","modified":1669633608685},{"_id":"public/tags/Ribbon/index.html","hash":"fb0af675055dd6095594827985e9199df27f23d2","modified":1669633608685},{"_id":"public/tags/缓存/index.html","hash":"c40203f70abcce276619be9aeac956e66c6c2279","modified":1669633608685},{"_id":"public/tags/MySQL/index.html","hash":"406d4ffa616e28c4e2742d94edcea0ae2e005b23","modified":1669633608685}],"Category":[{"name":"公共关系学","_id":"cl9qxfdag0003bz2b3usu7bn6"},{"name":"人力资源管理","_id":"cl9qxfdar000lbz2b65jr6ibc"},{"name":"基础会计学","_id":"cl9qxfday0013bz2b8x6ah7kp"},{"name":"生产与运作管理","_id":"cl9qxfdb1001ibz2bbirqdwpc"},{"name":"电子商务","_id":"cl9qxfdb3001qbz2beosz70ge"},{"name":"环境安装","_id":"claktn8on001g19iaczrn7pwc"},{"name":"Untitled Folder","_id":"claktn8or001l19ia98kx1vom"},{"name":"开源分享","_id":"claktn8os001p19iaapni6an3"},{"name":"JAVA","_id":"claktn8ov001t19ia2fh650b6"},{"name":"DDD","_id":"claktn8p0002219ia9vejebtx"},{"name":"SpringCloud","_id":"claktn8p6002819iagynuahf6"},{"name":"JVM","_id":"claktn92i002a19ia8xah0dmq"},{"name":"SpringBoot","_id":"claktn9bh002f19ia0pub5jqs"},{"name":"React","_id":"claktn9nj002i19iah8za5g87"},{"name":"PMP","_id":"claktn9nk002k19ia8cd0fpx2"},{"name":"Mysql","_id":"claktn9nl002m19ia5h4raevy"},{"name":"MAC","_id":"clay6w0sp000rsx2bgjyrbwha"},{"name":"奇淫技巧","_id":"clay6ykcj000usx2b70zsccj8"},{"name":"Maven","_id":"clay7dca800152r2b8hlkdgcr"},{"name":"环境集成","_id":"clay7dcaa00162r2b5okn5tpq"},{"name":"前端","_id":"clay7ozx10003cn2b8t17cvz6"},{"name":"数据库","_id":"clay7wsdo000bcn2b04n73lxq"}],"Data":[],"Page":[],"Post":[{"title":"SpringBoot2 整合 Swagger2","_content":"\n# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html\n","source":"_posts/SpringBoot/【SpringBoot2】整合 Swagger2.md","raw":"---\ntitle: SpringBoot2 整合 Swagger2\ntags:\n  - SpringBoot\n  - Swagger2\ncategories:\n  - SpringBoot\n---\n\n# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html\n","slug":"SpringBoot/【SpringBoot2】整合 Swagger2","published":1,"date":"2022-11-23T07:56:45.740Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i160000ryiaeqtp3qds","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n"},{"title":"SpringBoot中时间类型 序列化、反序列化、格式处理","_content":"# SpringBoot中时间类型 序列化、反序列化、格式处理\n\n## Date\n\n**yml全局配置**\n\n```yaml\nspring:  \n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss #配置POST请求Body中Date时间类型序列化格式处理，并返回\n```\n\n**请求参数类型转换**\n\n```java\n/**\n * 时间Date转换\n * 配置GET请求，Query查询Date时间类型参数转换\n */\n@Component\npublic class DateConverter implements Converter<String, Date> {\n  @Override\n  public Date convert(String source) {\n    if (StringUtils.isBlank(source)) {\n      return null;\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd\");\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd HH:mm:ss\");\n    }\n    throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n  }\n\n  public Date parseDate(String dateStr, String format) {\n    Date date = null;\n    try {\n      date = new SimpleDateFormat(format).parse(dateStr);\n    } catch (ParseException e) {\n      log.warn(\"转换{}为日期(pattern={})错误！\", dateStr, format);\n    }\n    return date;\n  }\n}\n```\n\n## JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\n\n```java\n/**\n * 序列化,反序列化,格式处理\n *\n * @author zc\n * @date 2020/7/9 01:42\n */\n@Slf4j\n@Configuration\npublic class JacksonCustomizerConfig {\n\n    @Value(\"${spring.jackson.date-format:yyyy-MM-dd HH:mm:ss}\")\n    private String localDateTimePattern;\n\n    @Value(\"${spring.jackson.local-date-format:yyyy-MM-dd}\")\n    private String localDatePattern;\n\n    @Value(\"${spring.jackson.local-time-format:HH:mm:ss}\")\n    private String localTimePattern;\n\n    @Bean\n    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {\n        return builder -> {\n            builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.serializerByType(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.serializerByType(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(localTimePattern)));\n            builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.deserializerByType(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.deserializerByType(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(localTimePattern)));\n        };\n    }\n  \n  \t/**\n     * 时间LocalDateTime转换\n     */\n    @Component\n    public static class LocalDateTimeConverter implements Converter<String, LocalDateTime> {\n        @Override\n        public LocalDateTime convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n                return LocalDateTime.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n\n    /**\n     * 时间LocalDate转换\n     */\n    @Component\n    public static class LocalDateConverter implements Converter<String, LocalDate> {\n        @Override\n        public LocalDate convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n                return LocalDate.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n  \n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","raw":"---\ntitle: SpringBoot中时间类型 序列化、反序列化、格式处理\ntags:\n  - SpringBoot\n  - 序列化\n  - 时间格式\ncategories:\n  - SpringBoot\n---\n# SpringBoot中时间类型 序列化、反序列化、格式处理\n\n## Date\n\n**yml全局配置**\n\n```yaml\nspring:  \n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss #配置POST请求Body中Date时间类型序列化格式处理，并返回\n```\n\n**请求参数类型转换**\n\n```java\n/**\n * 时间Date转换\n * 配置GET请求，Query查询Date时间类型参数转换\n */\n@Component\npublic class DateConverter implements Converter<String, Date> {\n  @Override\n  public Date convert(String source) {\n    if (StringUtils.isBlank(source)) {\n      return null;\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd\");\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd HH:mm:ss\");\n    }\n    throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n  }\n\n  public Date parseDate(String dateStr, String format) {\n    Date date = null;\n    try {\n      date = new SimpleDateFormat(format).parse(dateStr);\n    } catch (ParseException e) {\n      log.warn(\"转换{}为日期(pattern={})错误！\", dateStr, format);\n    }\n    return date;\n  }\n}\n```\n\n## JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\n\n```java\n/**\n * 序列化,反序列化,格式处理\n *\n * @author zc\n * @date 2020/7/9 01:42\n */\n@Slf4j\n@Configuration\npublic class JacksonCustomizerConfig {\n\n    @Value(\"${spring.jackson.date-format:yyyy-MM-dd HH:mm:ss}\")\n    private String localDateTimePattern;\n\n    @Value(\"${spring.jackson.local-date-format:yyyy-MM-dd}\")\n    private String localDatePattern;\n\n    @Value(\"${spring.jackson.local-time-format:HH:mm:ss}\")\n    private String localTimePattern;\n\n    @Bean\n    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {\n        return builder -> {\n            builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.serializerByType(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.serializerByType(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(localTimePattern)));\n            builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.deserializerByType(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.deserializerByType(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(localTimePattern)));\n        };\n    }\n  \n  \t/**\n     * 时间LocalDateTime转换\n     */\n    @Component\n    public static class LocalDateTimeConverter implements Converter<String, LocalDateTime> {\n        @Override\n        public LocalDateTime convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n                return LocalDateTime.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n\n    /**\n     * 时间LocalDate转换\n     */\n    @Component\n    public static class LocalDateConverter implements Converter<String, LocalDate> {\n        @Override\n        public LocalDate convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n                return LocalDate.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n  \n}\n```\n\n","slug":"SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理","published":1,"date":"2022-11-23T07:34:20.580Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1g0001ryiaelkr34w4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot中时间类型-序列化、反序列化、格式处理\"><a href=\"#SpringBoot中时间类型-序列化、反序列化、格式处理\" class=\"headerlink\" title=\"SpringBoot中时间类型 序列化、反序列化、格式处理\"></a>SpringBoot中时间类型 序列化、反序列化、格式处理</h1><h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><p><strong>yml全局配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>  <br>  <span class=\"hljs-attr\">jackson:</span><br>    <span class=\"hljs-attr\">time-zone:</span> <span class=\"hljs-string\">GMT+8</span><br>    <span class=\"hljs-attr\">date-format:</span> <span class=\"hljs-string\">yyyy-MM-dd</span> <span class=\"hljs-string\">HH:mm:ss</span> <span class=\"hljs-comment\">#配置POST请求Body中Date时间类型序列化格式处理，并返回</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请求参数类型转换</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 时间Date转换</span><br><span class=\"hljs-comment\"> * 配置GET请求，Query查询Date时间类型参数转换</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">parseDate</span><span class=\"hljs-params\">(String dateStr, String format)</span> &#123;<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(format).parse(dateStr);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (ParseException e) &#123;<br>      log.warn(<span class=\"hljs-string\">&quot;转换&#123;&#125;为日期(pattern=&#123;&#125;)错误！&quot;</span>, dateStr, format);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"><a href=\"#JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\" class=\"headerlink\" title=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"></a>JDK8-时间类型-LocalDateTime、LocalDate、LocalTime</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 序列化,反序列化,格式处理</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/7/9 01:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JacksonCustomizerConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDateTimePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-date-format:yyyy-MM-dd&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDatePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-time-format:HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localTimePattern;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"hljs-title function_\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> builder -&gt; &#123;<br>            builder.serializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.serializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.serializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>            builder.deserializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.deserializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.deserializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>        &#125;;<br>    &#125;<br>  <br>  \t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDateTime转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateTimeConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDateTime <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDate转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDate&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDate <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot中时间类型-序列化、反序列化、格式处理\"><a href=\"#SpringBoot中时间类型-序列化、反序列化、格式处理\" class=\"headerlink\" title=\"SpringBoot中时间类型 序列化、反序列化、格式处理\"></a>SpringBoot中时间类型 序列化、反序列化、格式处理</h1><h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><p><strong>yml全局配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>  <br>  <span class=\"hljs-attr\">jackson:</span><br>    <span class=\"hljs-attr\">time-zone:</span> <span class=\"hljs-string\">GMT+8</span><br>    <span class=\"hljs-attr\">date-format:</span> <span class=\"hljs-string\">yyyy-MM-dd</span> <span class=\"hljs-string\">HH:mm:ss</span> <span class=\"hljs-comment\">#配置POST请求Body中Date时间类型序列化格式处理，并返回</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请求参数类型转换</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 时间Date转换</span><br><span class=\"hljs-comment\"> * 配置GET请求，Query查询Date时间类型参数转换</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">parseDate</span><span class=\"hljs-params\">(String dateStr, String format)</span> &#123;<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(format).parse(dateStr);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (ParseException e) &#123;<br>      log.warn(<span class=\"hljs-string\">&quot;转换&#123;&#125;为日期(pattern=&#123;&#125;)错误！&quot;</span>, dateStr, format);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"><a href=\"#JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\" class=\"headerlink\" title=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"></a>JDK8-时间类型-LocalDateTime、LocalDate、LocalTime</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 序列化,反序列化,格式处理</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/7/9 01:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JacksonCustomizerConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDateTimePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-date-format:yyyy-MM-dd&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDatePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-time-format:HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localTimePattern;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"hljs-title function_\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> builder -&gt; &#123;<br>            builder.serializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.serializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.serializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>            builder.deserializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.deserializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.deserializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>        &#125;;<br>    &#125;<br>  <br>  \t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDateTime转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateTimeConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDateTime <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDate转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDate&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDate <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot AOP处理请求日志处理打印","_content":"# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】AOP处理请求日志处理打印.md","raw":"---\ntitle: SpringBoot AOP处理请求日志处理打印\ntags:\n  - SpringBoot\n  - AOP\n  - 切面\n  - 日志处理\ncategories:\n  - SpringBoot\n---\n# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】AOP处理请求日志处理打印","published":1,"date":"2022-11-23T07:34:50.506Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1j0003ryia8p9n5h2c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot Druid 配置详解","_content":"# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","source":"_posts/SpringBoot/【SpringBoot】Druid 配置详解.md","raw":"---\ntitle: SpringBoot Druid 配置详解\ntags:\n  - SpringBoot\n  - Druid\n  - Mysql连接池\ncategories:\n  - SpringBoot\n---\n# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","slug":"SpringBoot/【SpringBoot】Druid 配置详解","published":1,"date":"2020-03-17T16:35:09.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1k0004ryiad5q060oj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n"},{"title":"SpringBoot Redis 配置详解","_content":"# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)\n","source":"_posts/SpringBoot/【SpringBoot】Redis 配置详解.md","raw":"---\ntitle: SpringBoot Redis 配置详解\ntags:\n  - SpringBoot\n  - Redis\ncategories:\n  - SpringBoot\n---\n# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)\n","slug":"SpringBoot/【SpringBoot】Redis 配置详解","published":1,"date":"2020-03-22T12:24:41.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1k0005ryia0anwhmwa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n"},{"title":"SpringBoot Shiro 配置自定义密码加密器","_content":"# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器.md","raw":"---\ntitle: SpringBoot Shiro 配置自定义密码加密器\ntags:\n  - SpringBoot\n  - Shiro\ncategories:\n  - SpringBoot\n---\n# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器","published":1,"date":"2020-03-12T17:34:28.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1r000vryia1fguhxko","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot 全局异常处理","_content":"# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】全局异常处理.md","raw":"---\ntitle: SpringBoot 全局异常处理\ntags:\n  - SpringBoot\n  - 全局异常\ncategories:\n  - SpringBoot\n---\n# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】全局异常处理","published":1,"date":"2022-11-23T07:33:47.331Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1s000wryia138m5zxw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot自动配置与@Enable方式配置","_content":"# SpringBoot自动配置与@Enable方式配置\n\n## SpringBoot自动配置：\n\n在`resources`目录下新建`META-INF`目录，创建`spring.factories`文件。\n\n```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig\n```\n\n```java\n/**\n * @author zc\n * @date 2020/12/22 00:53\n */\n@Slf4j\n@Configuration\npublic class TestAutoConfig {\n\n    @Data\n    public class Test {\n\n    }\n\n    @Bean\n    public Test user() {\n        log.error(\"=======\");\n        return new Test();\n    }\n}\n```\n\n此种方式就可以实现SpringBoot的自动配置加载。\n\n## 通过`@Enable`注解方式实现自动配置\n\n```java\n/**\n * 启用注解：@EnableTest\n *\n * @author ZC\n * @date 2020/6/8-22:05\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import({TestAutoConfig.class})\npublic @interface EnableTest {\n}\n```\n\n**不要在`spring.factories`文件里配置加载类，不然SpringBoot就自动加载配置了**\n\n此时只需要在启动类上加上`@EnableTest`就可以实现加载配置类了\n\n","source":"_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","raw":"---\ntitle: SpringBoot自动配置与@Enable方式配置\ntags:\n  - SpringBoot\n  - 自动配置\ncategories:\n  - SpringBoot\n---\n# SpringBoot自动配置与@Enable方式配置\n\n## SpringBoot自动配置：\n\n在`resources`目录下新建`META-INF`目录，创建`spring.factories`文件。\n\n```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig\n```\n\n```java\n/**\n * @author zc\n * @date 2020/12/22 00:53\n */\n@Slf4j\n@Configuration\npublic class TestAutoConfig {\n\n    @Data\n    public class Test {\n\n    }\n\n    @Bean\n    public Test user() {\n        log.error(\"=======\");\n        return new Test();\n    }\n}\n```\n\n此种方式就可以实现SpringBoot的自动配置加载。\n\n## 通过`@Enable`注解方式实现自动配置\n\n```java\n/**\n * 启用注解：@EnableTest\n *\n * @author ZC\n * @date 2020/6/8-22:05\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import({TestAutoConfig.class})\npublic @interface EnableTest {\n}\n```\n\n**不要在`spring.factories`文件里配置加载类，不然SpringBoot就自动加载配置了**\n\n此时只需要在启动类上加上`@EnableTest`就可以实现加载配置类了\n\n","slug":"SpringBoot/【SpringBoot】自动配置与@Enable方式配置","published":1,"date":"2022-11-23T07:34:27.960Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1t000yryia313qftj5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot自动配置与-Enable方式配置\"><a href=\"#SpringBoot自动配置与-Enable方式配置\" class=\"headerlink\" title=\"SpringBoot自动配置与@Enable方式配置\"></a>SpringBoot自动配置与@Enable方式配置</h1><h2 id=\"SpringBoot自动配置：\"><a href=\"#SpringBoot自动配置：\" class=\"headerlink\" title=\"SpringBoot自动配置：\"></a>SpringBoot自动配置：</h2><p>在<code>resources</code>目录下新建<code>META-INF</code>目录，创建<code>spring.factories</code>文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/12/22 00:53</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestAutoConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Test <span class=\"hljs-title function_\">user</span><span class=\"hljs-params\">()</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;=======&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Test</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此种方式就可以实现SpringBoot的自动配置加载。</p>\n<h2 id=\"通过-Enable注解方式实现自动配置\"><a href=\"#通过-Enable注解方式实现自动配置\" class=\"headerlink\" title=\"通过@Enable注解方式实现自动配置\"></a>通过<code>@Enable</code>注解方式实现自动配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 启用注解：<span class=\"hljs-doctag\">@EnableTest</span></span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> ZC</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/6/8-22:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(&#123;TestAutoConfig.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>不要在<code>spring.factories</code>文件里配置加载类，不然SpringBoot就自动加载配置了</strong></p>\n<p>此时只需要在启动类上加上<code>@EnableTest</code>就可以实现加载配置类了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot自动配置与-Enable方式配置\"><a href=\"#SpringBoot自动配置与-Enable方式配置\" class=\"headerlink\" title=\"SpringBoot自动配置与@Enable方式配置\"></a>SpringBoot自动配置与@Enable方式配置</h1><h2 id=\"SpringBoot自动配置：\"><a href=\"#SpringBoot自动配置：\" class=\"headerlink\" title=\"SpringBoot自动配置：\"></a>SpringBoot自动配置：</h2><p>在<code>resources</code>目录下新建<code>META-INF</code>目录，创建<code>spring.factories</code>文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/12/22 00:53</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestAutoConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Test <span class=\"hljs-title function_\">user</span><span class=\"hljs-params\">()</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;=======&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Test</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此种方式就可以实现SpringBoot的自动配置加载。</p>\n<h2 id=\"通过-Enable注解方式实现自动配置\"><a href=\"#通过-Enable注解方式实现自动配置\" class=\"headerlink\" title=\"通过@Enable注解方式实现自动配置\"></a>通过<code>@Enable</code>注解方式实现自动配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 启用注解：<span class=\"hljs-doctag\">@EnableTest</span></span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> ZC</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/6/8-22:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(&#123;TestAutoConfig.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>不要在<code>spring.factories</code>文件里配置加载类，不然SpringBoot就自动加载配置了</strong></p>\n<p>此时只需要在启动类上加上<code>@EnableTest</code>就可以实现加载配置类了</p>\n"},{"title":"SpringBoot2 线程池的定义和使用","abbrlink":"8a11e15c","_content":"\n# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot2】线程池的定义和使用.md","raw":"---\ntitle: SpringBoot2 线程池的定义和使用\ntags:\n  - SpringBoot\n  - 线程池\ncategories:\n  - SpringBoot\nabbrlink: 8a11e15c\n---\n\n# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","slug":"SpringBoot/【SpringBoot2】线程池的定义和使用","published":1,"date":"2022-11-23T07:56:35.069Z","updated":"2022-11-23T08:53:35.681Z","_id":"clates4c90000fiiadchxbgky","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"CAS","_content":"# CAS\n\n**compare and swap/comparen and exchange (比较并交换)**\n\n![](https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png)\n\n![](https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png)\n\n**注意ABA问题：**\n\na=0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作=0，线程二又写回到a，此时a又=0；当线程一执行写回的时候去判断a是不是等于原来的值0。\n\n但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？\n\n那么如何解决这个问题呢？\n\nCAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。\n\n**举例说明：**\n\nJDK里提供的原子类在这个包下`java.util.concurrent.atomic`\n\n```java\n//Integer原子类\nAtomicInteger i = new AtomicInteger();\ni.incrementAndGet();\n\n//源码\n//Atomically increments by one the current value. 将当前值原子地加1。\n//Returns:the updated value 返回:更新后的值\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n\n//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。\n//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。\n//Unsafe类是\"final\"的，不允许继承。且构造函数是private的:\n//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe\npublic Unsafe getUnsafe() throws IllegalAccessException {\n    Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n    unsafeField.setAccessible(true);\n    Unsafe unsafe = (Unsafe) unsafeField.get(null);\n    return unsafe;\n}\n//Java中的Unsafe类\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n//native C++方法\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n//汇编指令，硬件直接支持 lock cmpxchg\n```\n\n","source":"_posts/JAVA/CAS.md","raw":"---\ntitle: CAS\ntags:\n  - CAS\ncategories:\n  - JAVA\n---\n# CAS\n\n**compare and swap/comparen and exchange (比较并交换)**\n\n![](https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png)\n\n![](https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png)\n\n**注意ABA问题：**\n\na=0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作=0，线程二又写回到a，此时a又=0；当线程一执行写回的时候去判断a是不是等于原来的值0。\n\n但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？\n\n那么如何解决这个问题呢？\n\nCAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。\n\n**举例说明：**\n\nJDK里提供的原子类在这个包下`java.util.concurrent.atomic`\n\n```java\n//Integer原子类\nAtomicInteger i = new AtomicInteger();\ni.incrementAndGet();\n\n//源码\n//Atomically increments by one the current value. 将当前值原子地加1。\n//Returns:the updated value 返回:更新后的值\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n\n//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。\n//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。\n//Unsafe类是\"final\"的，不允许继承。且构造函数是private的:\n//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe\npublic Unsafe getUnsafe() throws IllegalAccessException {\n    Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n    unsafeField.setAccessible(true);\n    Unsafe unsafe = (Unsafe) unsafeField.get(null);\n    return unsafe;\n}\n//Java中的Unsafe类\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n//native C++方法\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n//汇编指令，硬件直接支持 lock cmpxchg\n```\n\n","slug":"JAVA/CAS","published":1,"date":"2021-02-08T10:02:05.000Z","updated":"2022-11-25T17:30:28.024Z","_id":"clawrzu8b0000u42bcbtsgk30","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p><strong>compare and swap&#x2F;comparen and exchange (比较并交换)</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png\"></p>\n<p><strong>注意ABA问题：</strong></p>\n<p>a&#x3D;0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作&#x3D;0，线程二又写回到a，此时a又&#x3D;0；当线程一执行写回的时候去判断a是不是等于原来的值0。</p>\n<p>但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？</p>\n<p>那么如何解决这个问题呢？</p>\n<p>CAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。</p>\n<p><strong>举例说明：</strong></p>\n<p>JDK里提供的原子类在这个包下<code>java.util.concurrent.atomic</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Integer原子类</span><br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>i.incrementAndGet();<br><br><span class=\"hljs-comment\">//源码</span><br><span class=\"hljs-comment\">//Atomically increments by one the current value. 将当前值原子地加1。</span><br><span class=\"hljs-comment\">//Returns:the updated value 返回:更新后的值</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">incrementAndGet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> unsafe.getAndAddInt(<span class=\"hljs-built_in\">this</span>, valueOffset, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。</span><br><span class=\"hljs-comment\">//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。</span><br><span class=\"hljs-comment\">//Unsafe类是&quot;final&quot;的，不允许继承。且构造函数是private的:</span><br><span class=\"hljs-comment\">//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe</span><br><span class=\"hljs-keyword\">public</span> Unsafe <span class=\"hljs-title function_\">getUnsafe</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>    <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">unsafeField</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredFields()[<span class=\"hljs-number\">0</span>];<br>    unsafeField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-type\">Unsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> (Unsafe) unsafeField.get(<span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-keyword\">return</span> unsafe;<br>&#125;<br><span class=\"hljs-comment\">//Java中的Unsafe类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAndAddInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4)</span> &#123;<br>    <span class=\"hljs-type\">int</span> var5;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        var5 = <span class=\"hljs-built_in\">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class=\"hljs-keyword\">return</span> var5;<br>&#125;<br><span class=\"hljs-comment\">//native C++方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compareAndSwapInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4, <span class=\"hljs-type\">int</span> var5)</span>;<br><span class=\"hljs-comment\">//汇编指令，硬件直接支持 lock cmpxchg</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p><strong>compare and swap&#x2F;comparen and exchange (比较并交换)</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png\"></p>\n<p><strong>注意ABA问题：</strong></p>\n<p>a&#x3D;0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作&#x3D;0，线程二又写回到a，此时a又&#x3D;0；当线程一执行写回的时候去判断a是不是等于原来的值0。</p>\n<p>但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？</p>\n<p>那么如何解决这个问题呢？</p>\n<p>CAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。</p>\n<p><strong>举例说明：</strong></p>\n<p>JDK里提供的原子类在这个包下<code>java.util.concurrent.atomic</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Integer原子类</span><br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>i.incrementAndGet();<br><br><span class=\"hljs-comment\">//源码</span><br><span class=\"hljs-comment\">//Atomically increments by one the current value. 将当前值原子地加1。</span><br><span class=\"hljs-comment\">//Returns:the updated value 返回:更新后的值</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">incrementAndGet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> unsafe.getAndAddInt(<span class=\"hljs-built_in\">this</span>, valueOffset, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。</span><br><span class=\"hljs-comment\">//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。</span><br><span class=\"hljs-comment\">//Unsafe类是&quot;final&quot;的，不允许继承。且构造函数是private的:</span><br><span class=\"hljs-comment\">//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe</span><br><span class=\"hljs-keyword\">public</span> Unsafe <span class=\"hljs-title function_\">getUnsafe</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>    <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">unsafeField</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredFields()[<span class=\"hljs-number\">0</span>];<br>    unsafeField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-type\">Unsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> (Unsafe) unsafeField.get(<span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-keyword\">return</span> unsafe;<br>&#125;<br><span class=\"hljs-comment\">//Java中的Unsafe类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAndAddInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4)</span> &#123;<br>    <span class=\"hljs-type\">int</span> var5;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        var5 = <span class=\"hljs-built_in\">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class=\"hljs-keyword\">return</span> var5;<br>&#125;<br><span class=\"hljs-comment\">//native C++方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compareAndSwapInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4, <span class=\"hljs-type\">int</span> var5)</span>;<br><span class=\"hljs-comment\">//汇编指令，硬件直接支持 lock cmpxchg</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Synchronized锁升级过程","_content":"# Synchronized锁升级过程\n\n![](https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png)\n\n## 无锁\n\n表示刚刚new出来的对象\n\n## 偏向锁\n\n此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程\n\n## 轻量级锁（自旋锁、自适应锁、CAS）\n\n这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。\n\nJDK1.6中-XX:+UseSpinning开启；\n-XX:PreBlockSpin=10 为自旋次数；\nJDK1.7后，去掉此参数，由jvm自动控制；\n\n## 重量级锁\n\n向硬件级别CPU去申请锁资源\n","source":"_posts/JAVA/Synchronized锁升级过程.md","raw":"---\ntitle: Synchronized锁升级过程\ntags:\n  - 锁\n  - Synchronized\ncategories:\n  - JAVA\n---\n# Synchronized锁升级过程\n\n![](https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png)\n\n## 无锁\n\n表示刚刚new出来的对象\n\n## 偏向锁\n\n此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程\n\n## 轻量级锁（自旋锁、自适应锁、CAS）\n\n这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。\n\nJDK1.6中-XX:+UseSpinning开启；\n-XX:PreBlockSpin=10 为自旋次数；\nJDK1.7后，去掉此参数，由jvm自动控制；\n\n## 重量级锁\n\n向硬件级别CPU去申请锁资源\n","slug":"JAVA/Synchronized锁升级过程","published":1,"date":"2021-02-08T08:09:10.000Z","updated":"2022-11-25T17:30:28.023Z","_id":"clawrzuaa0001u42bh3ap7g4f","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Synchronized锁升级过程\"><a href=\"#Synchronized锁升级过程\" class=\"headerlink\" title=\"Synchronized锁升级过程\"></a>Synchronized锁升级过程</h1><p><img src=\"https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png\"></p>\n<h2 id=\"无锁\"><a href=\"#无锁\" class=\"headerlink\" title=\"无锁\"></a>无锁</h2><p>表示刚刚new出来的对象</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程</p>\n<h2 id=\"轻量级锁（自旋锁、自适应锁、CAS）\"><a href=\"#轻量级锁（自旋锁、自适应锁、CAS）\" class=\"headerlink\" title=\"轻量级锁（自旋锁、自适应锁、CAS）\"></a>轻量级锁（自旋锁、自适应锁、CAS）</h2><p>这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。</p>\n<p>JDK1.6中-XX:+UseSpinning开启；<br>-XX:PreBlockSpin&#x3D;10 为自旋次数；<br>JDK1.7后，去掉此参数，由jvm自动控制；</p>\n<h2 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h2><p>向硬件级别CPU去申请锁资源</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Synchronized锁升级过程\"><a href=\"#Synchronized锁升级过程\" class=\"headerlink\" title=\"Synchronized锁升级过程\"></a>Synchronized锁升级过程</h1><p><img src=\"https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png\"></p>\n<h2 id=\"无锁\"><a href=\"#无锁\" class=\"headerlink\" title=\"无锁\"></a>无锁</h2><p>表示刚刚new出来的对象</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程</p>\n<h2 id=\"轻量级锁（自旋锁、自适应锁、CAS）\"><a href=\"#轻量级锁（自旋锁、自适应锁、CAS）\" class=\"headerlink\" title=\"轻量级锁（自旋锁、自适应锁、CAS）\"></a>轻量级锁（自旋锁、自适应锁、CAS）</h2><p>这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。</p>\n<p>JDK1.6中-XX:+UseSpinning开启；<br>-XX:PreBlockSpin&#x3D;10 为自旋次数；<br>JDK1.7后，去掉此参数，由jvm自动控制；</p>\n<h2 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h2><p>向硬件级别CPU去申请锁资源</p>\n"},{"title":"JAVA对象内存布局","_content":"# JAVA对象内存布局\n\n![](https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png)\n\n对象头：\n\n- markword：记录锁的信息、GC信息\n- 类型指针class pointer：记录对象属于哪个Class类型的\n\n实例数据instance data：成员变量\n\n对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快\n\n```pom\n<!-- 工具：JOL=JAVA Object Layout -->\n<dependency>\n    <groupId>org.openjdk.jol</groupId>\n    <artifactId>jol-core</artifactId>\n    <version>0.14</version>\n</dependency>\n```\n\n```java\npublic static void main(String[] args) {\n    Object o = new Object();\n    System.out.println(ClassLayout.parseInstance(o).toPrintable());\n}\n```\n\n```shell\njava.lang.Object object internals:\n OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE\n      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)[padding]\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n```\n\n```shell\njava -XX:+PrintCommandLineFlags -version\n-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节\n\n-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节\n\n数组的话会有一个数组长度length，占用4个字节。\n\n|  类型   | 占用字节 | 占用位数 |\n| :-----: | :------: | :------: |\n|  byte   |    1     |    8     |\n|  short  |    2     |    16    |\n|   int   |    4     |    32    |\n|  long   |    8     |    64    |\n|  float  |    4     |    32    |\n| double  |    8     |    64    |\n|  char   |    2     |    16    |\n| boolean |    1     |    8     |\n\n**示例：**\n\n```java\n@Data\npublic class Account {\n    private long id;\n    private String username;\n    private String password;\n\n    public static void main(String[] args) {\n        Object o1 = new Object();\n        System.out.println(\"空对象：\" + ClassLayout.parseInstance(o1).toPrintable());\n        Object o2 = new Account();\n        System.out.println(\"带属性对象：\" + ClassLayout.parseInstance(o2).toPrintable());\n        Object o3 = new int[1];\n        System.out.println(\"数组：\" + ClassLayout.parseInstance(o3).toPrintable());\n        Object o4 = new ArrayList<>();\n        System.out.println(\"空List：\" + ClassLayout.parseInstance(o4).toPrintable());\n    }\n}\n```\n\n**控制台输出：**\n\n```\n空对象：java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n带属性对象：cn.happyloves.example.dto.Account object internals:\n OFFSET  SIZE               TYPE DESCRIPTION                               VALUE\n      0     4                    (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                    (object header)                           54 c3 00 f8 (01010100 11000011 00000000 11111000) (-134167724)\n     12     4   java.lang.String Account.username                          null\n     16     8               long Account.id                                0\n     24     4   java.lang.String Account.password                          null\n     28     4                    (loss due to the next object alignment)\nInstance size: 32 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n数组：[I object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)\n     12     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n     16     4    int [I.<elements>                             N/A\n     20     4        (loss due to the next object alignment)\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n空List：java.util.ArrayList object internals:\n OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE\n      0     4                      (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                      (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                      (object header)                           7f 2f 00 f8 (01111111 00101111 00000000 11111000) (-134205569)\n     12     4                  int AbstractList.modCount                     0\n     16     4                  int ArrayList.size                            0\n     20     4   java.lang.Object[] ArrayList.elementData                     []\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n```\n\n","source":"_posts/JAVA/对象内存布局.md","raw":"---\ntitle: JAVA对象内存布局\ntags:\n  - 对象内存布局\ncategories:\n  - JAVA\n---\n# JAVA对象内存布局\n\n![](https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png)\n\n对象头：\n\n- markword：记录锁的信息、GC信息\n- 类型指针class pointer：记录对象属于哪个Class类型的\n\n实例数据instance data：成员变量\n\n对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快\n\n```pom\n<!-- 工具：JOL=JAVA Object Layout -->\n<dependency>\n    <groupId>org.openjdk.jol</groupId>\n    <artifactId>jol-core</artifactId>\n    <version>0.14</version>\n</dependency>\n```\n\n```java\npublic static void main(String[] args) {\n    Object o = new Object();\n    System.out.println(ClassLayout.parseInstance(o).toPrintable());\n}\n```\n\n```shell\njava.lang.Object object internals:\n OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE\n      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)[padding]\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n```\n\n```shell\njava -XX:+PrintCommandLineFlags -version\n-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节\n\n-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节\n\n数组的话会有一个数组长度length，占用4个字节。\n\n|  类型   | 占用字节 | 占用位数 |\n| :-----: | :------: | :------: |\n|  byte   |    1     |    8     |\n|  short  |    2     |    16    |\n|   int   |    4     |    32    |\n|  long   |    8     |    64    |\n|  float  |    4     |    32    |\n| double  |    8     |    64    |\n|  char   |    2     |    16    |\n| boolean |    1     |    8     |\n\n**示例：**\n\n```java\n@Data\npublic class Account {\n    private long id;\n    private String username;\n    private String password;\n\n    public static void main(String[] args) {\n        Object o1 = new Object();\n        System.out.println(\"空对象：\" + ClassLayout.parseInstance(o1).toPrintable());\n        Object o2 = new Account();\n        System.out.println(\"带属性对象：\" + ClassLayout.parseInstance(o2).toPrintable());\n        Object o3 = new int[1];\n        System.out.println(\"数组：\" + ClassLayout.parseInstance(o3).toPrintable());\n        Object o4 = new ArrayList<>();\n        System.out.println(\"空List：\" + ClassLayout.parseInstance(o4).toPrintable());\n    }\n}\n```\n\n**控制台输出：**\n\n```\n空对象：java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n带属性对象：cn.happyloves.example.dto.Account object internals:\n OFFSET  SIZE               TYPE DESCRIPTION                               VALUE\n      0     4                    (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                    (object header)                           54 c3 00 f8 (01010100 11000011 00000000 11111000) (-134167724)\n     12     4   java.lang.String Account.username                          null\n     16     8               long Account.id                                0\n     24     4   java.lang.String Account.password                          null\n     28     4                    (loss due to the next object alignment)\nInstance size: 32 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n数组：[I object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)\n     12     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n     16     4    int [I.<elements>                             N/A\n     20     4        (loss due to the next object alignment)\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n空List：java.util.ArrayList object internals:\n OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE\n      0     4                      (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                      (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                      (object header)                           7f 2f 00 f8 (01111111 00101111 00000000 11111000) (-134205569)\n     12     4                  int AbstractList.modCount                     0\n     16     4                  int ArrayList.size                            0\n     20     4   java.lang.Object[] ArrayList.elementData                     []\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n```\n\n","slug":"JAVA/对象内存布局","published":1,"date":"2022-07-07T08:21:10.758Z","updated":"2022-11-25T17:30:28.024Z","_id":"clawrzuab0002u42bfuxx6olf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JAVA对象内存布局\"><a href=\"#JAVA对象内存布局\" class=\"headerlink\" title=\"JAVA对象内存布局\"></a>JAVA对象内存布局</h1><p><img src=\"https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png\"></p>\n<p>对象头：</p>\n<ul>\n<li>markword：记录锁的信息、GC信息</li>\n<li>类型指针class pointer：记录对象属于哪个Class类型的</li>\n</ul>\n<p>实例数据instance data：成员变量</p>\n<p>对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 工具：JOL=JAVA Object Layout --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;<br>    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;<br>    &lt;version&gt;0.14&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    System.out.println(ClassLayout.parseInstance(o).toPrintable());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java.lang.Object object internals:<br> OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE<br>      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br>      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br>      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)<br>     12     4        (loss due to the next object alignment)[padding]<br>Instance size: 16 bytes<br>Space losses: 0 bytes internal + 4 bytes external = 4 bytes total<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintCommandLineFlags -version<br>-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC<br>java version &quot;1.8.0_221&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<br></code></pre></td></tr></table></figure>\n\n<p>-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节</p>\n<p>-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节</p>\n<p>数组的话会有一个数组长度length，占用4个字节。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">占用字节</th>\n<th align=\"center\">占用位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;空对象：&quot;</span> + ClassLayout.parseInstance(o1).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;带属性对象：&quot;</span> + ClassLayout.parseInstance(o2).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">1</span>];<br>        System.out.println(<span class=\"hljs-string\">&quot;数组：&quot;</span> + ClassLayout.parseInstance(o3).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        System.out.println(<span class=\"hljs-string\">&quot;空List：&quot;</span> + ClassLayout.parseInstance(o4).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>控制台输出：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">空对象：java.lang.Object object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           e5<span class=\"hljs-number\"> 01 </span>00 f8 (11100101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217243)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 16 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>带属性对象：cn.happyloves.example.dto.Account object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 54 </span>c3<span class=\"hljs-number\"> 00 </span>f8 (01010100<span class=\"hljs-number\"> 11000011 </span>00000000 11111000) (-134167724)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.username                          null<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 8 </span>              long Account.id                                0<br>    <span class=\"hljs-number\"> 24 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.password                          null<br>    <span class=\"hljs-number\"> 28 </span>   <span class=\"hljs-number\"> 4 </span>                   (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 32 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>数组：[I object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           6d<span class=\"hljs-number\"> 01 </span>00 f8 (01101101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217363)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>   int [I.&lt;elements&gt;                             N/A<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>空List：java.util.ArrayList object internals:<br> OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                           7f 2f<span class=\"hljs-number\"> 00 </span>f8 (01111111<span class=\"hljs-number\"> 00101111 </span>00000000 11111000) (-134205569)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>                 int AbstractList.modCount                     0<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>                 int ArrayList.size                            0<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.Object[] ArrayList.elementData                     []<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 0 </span>bytes external =<span class=\"hljs-number\"> 0 </span>bytes total<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA对象内存布局\"><a href=\"#JAVA对象内存布局\" class=\"headerlink\" title=\"JAVA对象内存布局\"></a>JAVA对象内存布局</h1><p><img src=\"https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png\"></p>\n<p>对象头：</p>\n<ul>\n<li>markword：记录锁的信息、GC信息</li>\n<li>类型指针class pointer：记录对象属于哪个Class类型的</li>\n</ul>\n<p>实例数据instance data：成员变量</p>\n<p>对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 工具：JOL=JAVA Object Layout --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;<br>    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;<br>    &lt;version&gt;0.14&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    System.out.println(ClassLayout.parseInstance(o).toPrintable());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java.lang.Object object internals:<br> OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE<br>      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br>      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br>      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)<br>     12     4        (loss due to the next object alignment)[padding]<br>Instance size: 16 bytes<br>Space losses: 0 bytes internal + 4 bytes external = 4 bytes total<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintCommandLineFlags -version<br>-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC<br>java version &quot;1.8.0_221&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<br></code></pre></td></tr></table></figure>\n\n<p>-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节</p>\n<p>-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节</p>\n<p>数组的话会有一个数组长度length，占用4个字节。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">占用字节</th>\n<th align=\"center\">占用位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;空对象：&quot;</span> + ClassLayout.parseInstance(o1).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;带属性对象：&quot;</span> + ClassLayout.parseInstance(o2).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">1</span>];<br>        System.out.println(<span class=\"hljs-string\">&quot;数组：&quot;</span> + ClassLayout.parseInstance(o3).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        System.out.println(<span class=\"hljs-string\">&quot;空List：&quot;</span> + ClassLayout.parseInstance(o4).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>控制台输出：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">空对象：java.lang.Object object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           e5<span class=\"hljs-number\"> 01 </span>00 f8 (11100101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217243)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 16 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>带属性对象：cn.happyloves.example.dto.Account object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 54 </span>c3<span class=\"hljs-number\"> 00 </span>f8 (01010100<span class=\"hljs-number\"> 11000011 </span>00000000 11111000) (-134167724)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.username                          null<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 8 </span>              long Account.id                                0<br>    <span class=\"hljs-number\"> 24 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.password                          null<br>    <span class=\"hljs-number\"> 28 </span>   <span class=\"hljs-number\"> 4 </span>                   (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 32 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>数组：[I object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           6d<span class=\"hljs-number\"> 01 </span>00 f8 (01101101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217363)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>   int [I.&lt;elements&gt;                             N/A<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>空List：java.util.ArrayList object internals:<br> OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                           7f 2f<span class=\"hljs-number\"> 00 </span>f8 (01111111<span class=\"hljs-number\"> 00101111 </span>00000000 11111000) (-134205569)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>                 int AbstractList.modCount                     0<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>                 int ArrayList.size                            0<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.Object[] ArrayList.elementData                     []<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 0 </span>bytes external =<span class=\"hljs-number\"> 0 </span>bytes total<br></code></pre></td></tr></table></figure>\n\n"},{"title":"指令乱序，指令重排序","_content":"# 指令乱序，指令重排序\n\n```java\n/**\n * 指令乱序，指令重排序\n * <p>\n * 弟2948605次（0,1)\n * 弟2948606次（0,1)\n * 弟2948607次（0,1)\n * 弟2948608次（0,0)\n *\n * @author zc\n * @date 2021/1/15 10:04\n */\npublic class Demo1 {\n    private static int x = 0, y = 0;\n    private static int a = 0, b = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        for (int i = 0; ; i++) {\n            x = 0;\n            y = 0;\n            a = 0;\n            b = 0;\n            Thread thread1 = new Thread(() -> {\n                a = 1;\n                x = b;\n            });\n            Thread thread2 = new Thread(() -> {\n                b = 1;\n                y = a;\n            });\n            thread1.start();\n            thread2.start();\n            thread1.join();\n            thread2.join();\n            String result = \"弟\" + i + \"次（\" + x + \",\" + y + \")\";\n            if (x == 0 && y == 0) {\n                System.out.println(result);\n                break;\n            } else {\n                System.out.println(result);\n            }\n        }\n    }\n}\n```\n\n定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，\n\n**第一个线程执行a=1;x=b;**\n\n**第二个线程执行b=1;y=a。**\n\n>  这段程序正常来看有3个结果：\n>\n> 1. 第一个线程执行到a=1的时候，第二个线程执行到了b=1，最后x=1，y=1；\n> 2. 第一个线程执行完，第二个线程才刚开始，最后x=0，y=1；\n> 3. 第二个线程执行完，第一个线程才开始，最后x=1，y=0；\n>\n> 理论上无论怎么样都不可能x=0,y=0;但是当程序执行到几万次之后，竟然出现了00的结果：`弟2948608次（0,0)`\n\n**因为指令被重排序了，x=b先于a=1执行，y=a先于b=1执行。**\n\n参考链接：\n\nhttps://blog.csdn.net/qq_41973594/article/details/110452849 \n\nhttps://blog.csdn.net/yjp198713/article/details/78839698\n\n","source":"_posts/JAVA/指令乱序，指令重排序.md","raw":"---\ntitle: 指令乱序，指令重排序\ntags:\n  - 指令乱序\n  - 指令重排序\ncategories:\n  - JAVA\n---\n# 指令乱序，指令重排序\n\n```java\n/**\n * 指令乱序，指令重排序\n * <p>\n * 弟2948605次（0,1)\n * 弟2948606次（0,1)\n * 弟2948607次（0,1)\n * 弟2948608次（0,0)\n *\n * @author zc\n * @date 2021/1/15 10:04\n */\npublic class Demo1 {\n    private static int x = 0, y = 0;\n    private static int a = 0, b = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        for (int i = 0; ; i++) {\n            x = 0;\n            y = 0;\n            a = 0;\n            b = 0;\n            Thread thread1 = new Thread(() -> {\n                a = 1;\n                x = b;\n            });\n            Thread thread2 = new Thread(() -> {\n                b = 1;\n                y = a;\n            });\n            thread1.start();\n            thread2.start();\n            thread1.join();\n            thread2.join();\n            String result = \"弟\" + i + \"次（\" + x + \",\" + y + \")\";\n            if (x == 0 && y == 0) {\n                System.out.println(result);\n                break;\n            } else {\n                System.out.println(result);\n            }\n        }\n    }\n}\n```\n\n定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，\n\n**第一个线程执行a=1;x=b;**\n\n**第二个线程执行b=1;y=a。**\n\n>  这段程序正常来看有3个结果：\n>\n> 1. 第一个线程执行到a=1的时候，第二个线程执行到了b=1，最后x=1，y=1；\n> 2. 第一个线程执行完，第二个线程才刚开始，最后x=0，y=1；\n> 3. 第二个线程执行完，第一个线程才开始，最后x=1，y=0；\n>\n> 理论上无论怎么样都不可能x=0,y=0;但是当程序执行到几万次之后，竟然出现了00的结果：`弟2948608次（0,0)`\n\n**因为指令被重排序了，x=b先于a=1执行，y=a先于b=1执行。**\n\n参考链接：\n\nhttps://blog.csdn.net/qq_41973594/article/details/110452849 \n\nhttps://blog.csdn.net/yjp198713/article/details/78839698\n\n","slug":"JAVA/指令乱序，指令重排序","published":1,"date":"2021-04-01T08:34:03.000Z","updated":"2022-11-25T17:30:28.024Z","_id":"clawrzuac0003u42b71f9czva","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"指令乱序，指令重排序\"><a href=\"#指令乱序，指令重排序\" class=\"headerlink\" title=\"指令乱序，指令重排序\"></a>指令乱序，指令重排序</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 指令乱序，指令重排序</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 弟2948605次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948606次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948607次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948608次（0,0)</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2021/1/15 10:04</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; ; i++) &#123;<br>            x = <span class=\"hljs-number\">0</span>;<br>            y = <span class=\"hljs-number\">0</span>;<br>            a = <span class=\"hljs-number\">0</span>;<br>            b = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                a = <span class=\"hljs-number\">1</span>;<br>                x = b;<br>            &#125;);<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                b = <span class=\"hljs-number\">1</span>;<br>                y = a;<br>            &#125;);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;弟&quot;</span> + i + <span class=\"hljs-string\">&quot;次（&quot;</span> + x + <span class=\"hljs-string\">&quot;,&quot;</span> + y + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span> &amp;&amp; y == <span class=\"hljs-number\">0</span>) &#123;<br>                System.out.println(result);<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，</p>\n<p><strong>第一个线程执行a&#x3D;1;x&#x3D;b;</strong></p>\n<p><strong>第二个线程执行b&#x3D;1;y&#x3D;a。</strong></p>\n<blockquote>\n<p> 这段程序正常来看有3个结果：</p>\n<ol>\n<li>第一个线程执行到a&#x3D;1的时候，第二个线程执行到了b&#x3D;1，最后x&#x3D;1，y&#x3D;1；</li>\n<li>第一个线程执行完，第二个线程才刚开始，最后x&#x3D;0，y&#x3D;1；</li>\n<li>第二个线程执行完，第一个线程才开始，最后x&#x3D;1，y&#x3D;0；</li>\n</ol>\n<p>理论上无论怎么样都不可能x&#x3D;0,y&#x3D;0;但是当程序执行到几万次之后，竟然出现了00的结果：<code>弟2948608次（0,0)</code></p>\n</blockquote>\n<p><strong>因为指令被重排序了，x&#x3D;b先于a&#x3D;1执行，y&#x3D;a先于b&#x3D;1执行。</strong></p>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41973594/article/details/110452849\">https://blog.csdn.net/qq_41973594/article/details/110452849</a> </p>\n<p><a href=\"https://blog.csdn.net/yjp198713/article/details/78839698\">https://blog.csdn.net/yjp198713/article/details/78839698</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"指令乱序，指令重排序\"><a href=\"#指令乱序，指令重排序\" class=\"headerlink\" title=\"指令乱序，指令重排序\"></a>指令乱序，指令重排序</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 指令乱序，指令重排序</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 弟2948605次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948606次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948607次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948608次（0,0)</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2021/1/15 10:04</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; ; i++) &#123;<br>            x = <span class=\"hljs-number\">0</span>;<br>            y = <span class=\"hljs-number\">0</span>;<br>            a = <span class=\"hljs-number\">0</span>;<br>            b = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                a = <span class=\"hljs-number\">1</span>;<br>                x = b;<br>            &#125;);<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                b = <span class=\"hljs-number\">1</span>;<br>                y = a;<br>            &#125;);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;弟&quot;</span> + i + <span class=\"hljs-string\">&quot;次（&quot;</span> + x + <span class=\"hljs-string\">&quot;,&quot;</span> + y + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span> &amp;&amp; y == <span class=\"hljs-number\">0</span>) &#123;<br>                System.out.println(result);<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，</p>\n<p><strong>第一个线程执行a&#x3D;1;x&#x3D;b;</strong></p>\n<p><strong>第二个线程执行b&#x3D;1;y&#x3D;a。</strong></p>\n<blockquote>\n<p> 这段程序正常来看有3个结果：</p>\n<ol>\n<li>第一个线程执行到a&#x3D;1的时候，第二个线程执行到了b&#x3D;1，最后x&#x3D;1，y&#x3D;1；</li>\n<li>第一个线程执行完，第二个线程才刚开始，最后x&#x3D;0，y&#x3D;1；</li>\n<li>第二个线程执行完，第一个线程才开始，最后x&#x3D;1，y&#x3D;0；</li>\n</ol>\n<p>理论上无论怎么样都不可能x&#x3D;0,y&#x3D;0;但是当程序执行到几万次之后，竟然出现了00的结果：<code>弟2948608次（0,0)</code></p>\n</blockquote>\n<p><strong>因为指令被重排序了，x&#x3D;b先于a&#x3D;1执行，y&#x3D;a先于b&#x3D;1执行。</strong></p>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41973594/article/details/110452849\">https://blog.csdn.net/qq_41973594/article/details/110452849</a> </p>\n<p><a href=\"https://blog.csdn.net/yjp198713/article/details/78839698\">https://blog.csdn.net/yjp198713/article/details/78839698</a></p>\n"},{"title":"1-JVM基础","_content":"# JVM基础\n\n**java源码文件，通过javac 转换成class文件。**\n\n> 找到.java文件\n>\n> 词法分析器\n>\n> tokens流\n>\n> 语法分析器\n>\n> 语义分析器\n>\n> 字节码生成器\n>\n> 转成.class文件\n\n+ ### 装载\n\n  1. 根据全限定路径名寻找class文件，转换成二进制流。**通过ClassLoder.load(String name)（类装载器，name：全限定路径名）**不同路径下的类，设置不同路径的类装载器。\n\n     > 1. Bootstrap ClassLoader（根装载器由C语言编写）：加载 ``$JAVA_HOME`` 中的 ``jar/lib/rt.jar`` 里所有的class或 ``Xbootclassoath`` 选项指定的jar包\n     >\n     > 2. Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 ``$JAVA_HOME`` 中 ``jar/lib/*.jar`` 或 ``-Djava.ext.dirs`` 指定目录下的 ``jar`` 包\n     >\n     > 3. App ClassLoader：加载classpath中指定的jar包及 ``Djava.class.path`` 所指定目录下的类和 ``jar`` 包\n     >\n     > 4. Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 ``java.lang.ClassLoader`` 的子类自定义加载class，属于应用程序根据自身需要自定义的 ``ClassLoader``，如 ``Tomcat``、``JBoss`` 都会根据j2ee规范自行实现 ``ClassLoader``\n\n  2. 需要把类文件**静态存储结构**里面对应的内容存储到JVM里面**（方法区的运行时数据结构）**\n\n     > 代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。\n\n  3. java.lang.Class对象存储到堆内存\n\n+ ### 链接\n\n  1. 验证\n\n     > 保证被加载的正确性。验证class文件中的**cafe babe**。注：class文件中，已**cafe babe**为开头的是java文件。\n\n  2. 准备\n\n     > 为类的静态变量分配内存。如：``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``\n\n  3. 解析\n\n     > 将类中的**符号引用**转换为**直接引用**。静态的转换。\n     >\n     > **符号引用**：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。\n     >\n     > **直接引用**：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。\n\n+ ### 初始化 \n\n  对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``。将3正真的赋值 a = 3。\n\n### JVM运行时划分的区域：\n\n> 程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。\n>\n> 线程是进程最小的执行单位。\n>\n> 栈：只要符合栈结构，都遵循先进后出的原则\n\n+ **方法区 Method Area（进程）、非堆：**类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。**与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **堆 Heap（进程）：**代表某个类的java.lang.Class对象。存储对象、String、数组。**如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **Java虚拟机栈（线程）：**一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。\n\n  在Java方法中如何去调用C语言的方法，通过**动态链接**去调用完成。\n\n+ **本地方法栈（线程）：**存储C语言方法。\n\n+ **栈帧（Java虚拟机栈、本地方法栈）Frame：**代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。\n\n  ```java\n  //伪代码1\n  a(){\n      b();\n  }\n  b(){\n      c();\n  }\n  c(){\n      \n  }\n  //先进行压栈\n  //先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。\n  //之后是出栈\n  //在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。\n  //先进后出的概念。\n  \n  //伪代码2\n  a(){\n      a();\n  }\n  //如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。\n  ```\n\n  1. **局部变量表：**存储方法中的局部变量\n\n  2. **操作数栈：**栈结构，用来描述运算过程当中数据暂时的存储位置\n\n     ```java\n     //伪代码.java文件\n     public static int calc(int op1,int op2){\n         op1 = 3;\n         int result = op1 + op2;\n         return result;\n     }\n     //.java文件的.class文件翻译的JVM字节码。\n     public static int calc(int op1,int op2);\n     Code:\n     0:iconst_3 // 将3放到操作数栈中\n     //局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。\n     1:istore_0 //将操作数占中的3赋值给局部变量表中的局部变量\n     2:iload_0 //将局部变量0值放到操作数栈中\n     3:iload_1 //\n     4:iadd\n     5:istore_2\n     6:iload_2\n     7:ireturn\n     ```\n\n  3. **动态链接：**符号引用**转换为**直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。\n\n  4. **正常或异常方法的返回：**\n\n+ **程序计数器（线程）：**是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n\n### JAVA 对象内存布局\n\n#### 对象头：\n\n> Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节\n\n> Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节\n\n> Length数组对象特有：数组长度\t4字节\n\n#### 实例数据：\n\n包含了对象的所有成员变量，大小由各个变量类型决定\n\n> boolean和byte：1字节\n\n> short和char：2字节\n\n> int和float：4字节\n\n> long和double：8字节\n\n> reference：8字节（64位系统）\n\n#### 对齐填充：\n\n为了保证对象的大小为8字节的整数倍，会进行填充字节\n","source":"_posts/JVM/1-JVM基础.md","raw":"---\ntitle: 1-JVM基础\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM基础\n\n**java源码文件，通过javac 转换成class文件。**\n\n> 找到.java文件\n>\n> 词法分析器\n>\n> tokens流\n>\n> 语法分析器\n>\n> 语义分析器\n>\n> 字节码生成器\n>\n> 转成.class文件\n\n+ ### 装载\n\n  1. 根据全限定路径名寻找class文件，转换成二进制流。**通过ClassLoder.load(String name)（类装载器，name：全限定路径名）**不同路径下的类，设置不同路径的类装载器。\n\n     > 1. Bootstrap ClassLoader（根装载器由C语言编写）：加载 ``$JAVA_HOME`` 中的 ``jar/lib/rt.jar`` 里所有的class或 ``Xbootclassoath`` 选项指定的jar包\n     >\n     > 2. Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 ``$JAVA_HOME`` 中 ``jar/lib/*.jar`` 或 ``-Djava.ext.dirs`` 指定目录下的 ``jar`` 包\n     >\n     > 3. App ClassLoader：加载classpath中指定的jar包及 ``Djava.class.path`` 所指定目录下的类和 ``jar`` 包\n     >\n     > 4. Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 ``java.lang.ClassLoader`` 的子类自定义加载class，属于应用程序根据自身需要自定义的 ``ClassLoader``，如 ``Tomcat``、``JBoss`` 都会根据j2ee规范自行实现 ``ClassLoader``\n\n  2. 需要把类文件**静态存储结构**里面对应的内容存储到JVM里面**（方法区的运行时数据结构）**\n\n     > 代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。\n\n  3. java.lang.Class对象存储到堆内存\n\n+ ### 链接\n\n  1. 验证\n\n     > 保证被加载的正确性。验证class文件中的**cafe babe**。注：class文件中，已**cafe babe**为开头的是java文件。\n\n  2. 准备\n\n     > 为类的静态变量分配内存。如：``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``\n\n  3. 解析\n\n     > 将类中的**符号引用**转换为**直接引用**。静态的转换。\n     >\n     > **符号引用**：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。\n     >\n     > **直接引用**：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。\n\n+ ### 初始化 \n\n  对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的``private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0``。将3正真的赋值 a = 3。\n\n### JVM运行时划分的区域：\n\n> 程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。\n>\n> 线程是进程最小的执行单位。\n>\n> 栈：只要符合栈结构，都遵循先进后出的原则\n\n+ **方法区 Method Area（进程）、非堆：**类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。**与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **堆 Heap（进程）：**代表某个类的java.lang.Class对象。存储对象、String、数组。**如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。**\n\n+ **Java虚拟机栈（线程）：**一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。\n\n  在Java方法中如何去调用C语言的方法，通过**动态链接**去调用完成。\n\n+ **本地方法栈（线程）：**存储C语言方法。\n\n+ **栈帧（Java虚拟机栈、本地方法栈）Frame：**代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。\n\n  ```java\n  //伪代码1\n  a(){\n      b();\n  }\n  b(){\n      c();\n  }\n  c(){\n      \n  }\n  //先进行压栈\n  //先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。\n  //之后是出栈\n  //在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。\n  //先进后出的概念。\n  \n  //伪代码2\n  a(){\n      a();\n  }\n  //如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。\n  ```\n\n  1. **局部变量表：**存储方法中的局部变量\n\n  2. **操作数栈：**栈结构，用来描述运算过程当中数据暂时的存储位置\n\n     ```java\n     //伪代码.java文件\n     public static int calc(int op1,int op2){\n         op1 = 3;\n         int result = op1 + op2;\n         return result;\n     }\n     //.java文件的.class文件翻译的JVM字节码。\n     public static int calc(int op1,int op2);\n     Code:\n     0:iconst_3 // 将3放到操作数栈中\n     //局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。\n     1:istore_0 //将操作数占中的3赋值给局部变量表中的局部变量\n     2:iload_0 //将局部变量0值放到操作数栈中\n     3:iload_1 //\n     4:iadd\n     5:istore_2\n     6:iload_2\n     7:ireturn\n     ```\n\n  3. **动态链接：**符号引用**转换为**直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。\n\n  4. **正常或异常方法的返回：**\n\n+ **程序计数器（线程）：**是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n\n### JAVA 对象内存布局\n\n#### 对象头：\n\n> Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节\n\n> Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节\n\n> Length数组对象特有：数组长度\t4字节\n\n#### 实例数据：\n\n包含了对象的所有成员变量，大小由各个变量类型决定\n\n> boolean和byte：1字节\n\n> short和char：2字节\n\n> int和float：4字节\n\n> long和double：8字节\n\n> reference：8字节（64位系统）\n\n#### 对齐填充：\n\n为了保证对象的大小为8字节的整数倍，会进行填充字节\n","slug":"JVM/1-JVM基础","published":1,"date":"2020-04-25T06:56:00.000Z","updated":"2022-11-25T17:38:49.923Z","_id":"clawrzuah0004u42b2ba7guby","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM基础\"><a href=\"#JVM基础\" class=\"headerlink\" title=\"JVM基础\"></a>JVM基础</h1><p><strong>java源码文件，通过javac 转换成class文件。</strong></p>\n<blockquote>\n<p>找到.java文件</p>\n<p>词法分析器</p>\n<p>tokens流</p>\n<p>语法分析器</p>\n<p>语义分析器</p>\n<p>字节码生成器</p>\n<p>转成.class文件</p>\n</blockquote>\n<ul>\n<li><h3 id=\"装载\"><a href=\"#装载\" class=\"headerlink\" title=\"装载\"></a>装载</h3><ol>\n<li><p>根据全限定路径名寻找class文件，转换成二进制流。<strong>通过ClassLoder.load(String name)（类装载器，name：全限定路径名）</strong>不同路径下的类，设置不同路径的类装载器。</p>\n<blockquote>\n<ol>\n<li><p>Bootstrap ClassLoader（根装载器由C语言编写）：加载 <code>$JAVA_HOME</code> 中的 <code>jar/lib/rt.jar</code> 里所有的class或 <code>Xbootclassoath</code> 选项指定的jar包</p>\n</li>\n<li><p>Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 <code>$JAVA_HOME</code> 中 <code>jar/lib/*.jar</code> 或 <code>-Djava.ext.dirs</code> 指定目录下的 <code>jar</code> 包</p>\n</li>\n<li><p>App ClassLoader：加载classpath中指定的jar包及 <code>Djava.class.path</code> 所指定目录下的类和 <code>jar</code> 包</p>\n</li>\n<li><p>Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 <code>java.lang.ClassLoader</code> 的子类自定义加载class，属于应用程序根据自身需要自定义的 <code>ClassLoader</code>，如 <code>Tomcat</code>、<code>JBoss</code> 都会根据j2ee规范自行实现 <code>ClassLoader</code></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>需要把类文件<strong>静态存储结构</strong>里面对应的内容存储到JVM里面<strong>（方法区的运行时数据结构）</strong></p>\n<blockquote>\n<p>代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。</p>\n</blockquote>\n</li>\n<li><p>java.lang.Class对象存储到堆内存</p>\n</li>\n</ol>\n</li>\n<li><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ol>\n<li><p>验证</p>\n<blockquote>\n<p>保证被加载的正确性。验证class文件中的<strong>cafe babe</strong>。注：class文件中，已<strong>cafe babe</strong>为开头的是java文件。</p>\n</blockquote>\n</li>\n<li><p>准备</p>\n<blockquote>\n<p>为类的静态变量分配内存。如：<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code></p>\n</blockquote>\n</li>\n<li><p>解析</p>\n<blockquote>\n<p>将类中的<strong>符号引用</strong>转换为<strong>直接引用</strong>。静态的转换。</p>\n<p><strong>符号引用</strong>：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。</p>\n<p><strong>直接引用</strong>：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code>。将3正真的赋值 a &#x3D; 3。</p>\n</li>\n</ul>\n<h3 id=\"JVM运行时划分的区域：\"><a href=\"#JVM运行时划分的区域：\" class=\"headerlink\" title=\"JVM运行时划分的区域：\"></a>JVM运行时划分的区域：</h3><blockquote>\n<p>程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。</p>\n<p>线程是进程最小的执行单位。</p>\n<p>栈：只要符合栈结构，都遵循先进后出的原则</p>\n</blockquote>\n<ul>\n<li><p><strong>方法区 Method Area（进程）、非堆：</strong>类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。<strong>与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>堆 Heap（进程）：</strong>代表某个类的java.lang.Class对象。存储对象、String、数组。<strong>如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>Java虚拟机栈（线程）：</strong>一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。</p>\n<p>在Java方法中如何去调用C语言的方法，通过<strong>动态链接</strong>去调用完成。</p>\n</li>\n<li><p><strong>本地方法栈（线程）：</strong>存储C语言方法。</p>\n</li>\n<li><p><strong>栈帧（Java虚拟机栈、本地方法栈）Frame：</strong>代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码1</span><br>a()&#123;<br>    b();<br>&#125;<br>b()&#123;<br>    c();<br>&#125;<br>c()&#123;<br>    <br>&#125;<br><span class=\"hljs-comment\">//先进行压栈</span><br><span class=\"hljs-comment\">//先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。</span><br><span class=\"hljs-comment\">//之后是出栈</span><br><span class=\"hljs-comment\">//在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。</span><br><span class=\"hljs-comment\">//先进后出的概念。</span><br><br><span class=\"hljs-comment\">//伪代码2</span><br>a()&#123;<br>    a();<br>&#125;<br><span class=\"hljs-comment\">//如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>局部变量表：</strong>存储方法中的局部变量</p>\n</li>\n<li><p><strong>操作数栈：</strong>栈结构，用来描述运算过程当中数据暂时的存储位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码.java文件</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>&#123;<br>    op1 = <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> op1 + op2;<br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-comment\">//.java文件的.class文件翻译的JVM字节码。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>;<br>Code:<br><span class=\"hljs-number\">0</span>:iconst_3 <span class=\"hljs-comment\">// 将3放到操作数栈中</span><br><span class=\"hljs-comment\">//局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。</span><br><span class=\"hljs-number\">1</span>:istore_0 <span class=\"hljs-comment\">//将操作数占中的3赋值给局部变量表中的局部变量</span><br><span class=\"hljs-number\">2</span>:iload_0 <span class=\"hljs-comment\">//将局部变量0值放到操作数栈中</span><br><span class=\"hljs-number\">3</span>:iload_1 <span class=\"hljs-comment\">//</span><br><span class=\"hljs-number\">4</span>:iadd<br><span class=\"hljs-number\">5</span>:istore_2<br><span class=\"hljs-number\">6</span>:iload_2<br><span class=\"hljs-number\">7</span>:ireturn<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>动态链接：</strong>符号引用<strong>转换为</strong>直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。</p>\n</li>\n<li><p><strong>正常或异常方法的返回：</strong></p>\n</li>\n</ol>\n</li>\n<li><p><strong>程序计数器（线程）：</strong>是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>\n</li>\n</ul>\n<h3 id=\"JAVA-对象内存布局\"><a href=\"#JAVA-对象内存布局\" class=\"headerlink\" title=\"JAVA 对象内存布局\"></a>JAVA 对象内存布局</h3><h4 id=\"对象头：\"><a href=\"#对象头：\" class=\"headerlink\" title=\"对象头：\"></a>对象头：</h4><blockquote>\n<p>Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Length数组对象特有：数组长度\t4字节</p>\n</blockquote>\n<h4 id=\"实例数据：\"><a href=\"#实例数据：\" class=\"headerlink\" title=\"实例数据：\"></a>实例数据：</h4><p>包含了对象的所有成员变量，大小由各个变量类型决定</p>\n<blockquote>\n<p>boolean和byte：1字节</p>\n</blockquote>\n<blockquote>\n<p>short和char：2字节</p>\n</blockquote>\n<blockquote>\n<p>int和float：4字节</p>\n</blockquote>\n<blockquote>\n<p>long和double：8字节</p>\n</blockquote>\n<blockquote>\n<p>reference：8字节（64位系统）</p>\n</blockquote>\n<h4 id=\"对齐填充：\"><a href=\"#对齐填充：\" class=\"headerlink\" title=\"对齐填充：\"></a>对齐填充：</h4><p>为了保证对象的大小为8字节的整数倍，会进行填充字节</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM基础\"><a href=\"#JVM基础\" class=\"headerlink\" title=\"JVM基础\"></a>JVM基础</h1><p><strong>java源码文件，通过javac 转换成class文件。</strong></p>\n<blockquote>\n<p>找到.java文件</p>\n<p>词法分析器</p>\n<p>tokens流</p>\n<p>语法分析器</p>\n<p>语义分析器</p>\n<p>字节码生成器</p>\n<p>转成.class文件</p>\n</blockquote>\n<ul>\n<li><h3 id=\"装载\"><a href=\"#装载\" class=\"headerlink\" title=\"装载\"></a>装载</h3><ol>\n<li><p>根据全限定路径名寻找class文件，转换成二进制流。<strong>通过ClassLoder.load(String name)（类装载器，name：全限定路径名）</strong>不同路径下的类，设置不同路径的类装载器。</p>\n<blockquote>\n<ol>\n<li><p>Bootstrap ClassLoader（根装载器由C语言编写）：加载 <code>$JAVA_HOME</code> 中的 <code>jar/lib/rt.jar</code> 里所有的class或 <code>Xbootclassoath</code> 选项指定的jar包</p>\n</li>\n<li><p>Extension ClassLoader：加载Java平台中扩展功能的一些jar包，包括 <code>$JAVA_HOME</code> 中 <code>jar/lib/*.jar</code> 或 <code>-Djava.ext.dirs</code> 指定目录下的 <code>jar</code> 包</p>\n</li>\n<li><p>App ClassLoader：加载classpath中指定的jar包及 <code>Djava.class.path</code> 所指定目录下的类和 <code>jar</code> 包</p>\n</li>\n<li><p>Custom ClassLoader（自定义装载器改变装载原则，如Tomcat打破双亲委派机制）：通过 <code>java.lang.ClassLoader</code> 的子类自定义加载class，属于应用程序根据自身需要自定义的 <code>ClassLoader</code>，如 <code>Tomcat</code>、<code>JBoss</code> 都会根据j2ee规范自行实现 <code>ClassLoader</code></p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>需要把类文件<strong>静态存储结构</strong>里面对应的内容存储到JVM里面<strong>（方法区的运行时数据结构）</strong></p>\n<blockquote>\n<p>代码里一段方法不宜过长（阿里规范中提到一段方法不应超过80行）。方法存到JVM里的栈帧。内容一旦超过一定行数或者过长时，JVM就会从编译性改变为解释性，从而导致性能下降。</p>\n</blockquote>\n</li>\n<li><p>java.lang.Class对象存储到堆内存</p>\n</li>\n</ol>\n</li>\n<li><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ol>\n<li><p>验证</p>\n<blockquote>\n<p>保证被加载的正确性。验证class文件中的<strong>cafe babe</strong>。注：class文件中，已<strong>cafe babe</strong>为开头的是java文件。</p>\n</blockquote>\n</li>\n<li><p>准备</p>\n<blockquote>\n<p>为类的静态变量分配内存。如：<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code></p>\n</blockquote>\n</li>\n<li><p>解析</p>\n<blockquote>\n<p>将类中的<strong>符号引用</strong>转换为<strong>直接引用</strong>。静态的转换。</p>\n<p><strong>符号引用</strong>：就是class文件中的内容，符合JVM规范的内容，JVM认识的语言。</p>\n<p><strong>直接引用</strong>：在Java进程中能够代表真实含义的。JVM更底层，计算机能够认识的语言，并且操作的。比方说为某个静态变量分配了真实的内存。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>对类的静态变量，进行正真的初始化。就是将上一步中的准备过程中的<code>private static int a = 3;//为a分配内存，并且将a初始化默认值，默认值：a=0</code>。将3正真的赋值 a &#x3D; 3。</p>\n</li>\n</ul>\n<h3 id=\"JVM运行时划分的区域：\"><a href=\"#JVM运行时划分的区域：\" class=\"headerlink\" title=\"JVM运行时划分的区域：\"></a>JVM运行时划分的区域：</h3><blockquote>\n<p>程序最小单位是进程（数据不安全进程内的数据会被该进程内所有的线程共享），进程包含多个线程。</p>\n<p>线程是进程最小的执行单位。</p>\n<p>栈：只要符合栈结构，都遵循先进后出的原则</p>\n</blockquote>\n<ul>\n<li><p><strong>方法区 Method Area（进程）、非堆：</strong>类信息【类的创建时间、作者、元数据（数据描述信息）】、常量【final】、静态变量【static】、即时编译器编译后的代码。里面存储的是一些。类类型加载的东西（也就是反射中的.class之后的Class），用于存储已经被虚拟机加载的类的信息、常量、静态变量等。<strong>与堆一样，是被线程共享的内存区域，要注意线程安全问题。方法区逻辑上属于堆的一部分。如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>堆 Heap（进程）：</strong>代表某个类的java.lang.Class对象。存储对象、String、数组。<strong>如果存储数据大小超过了比方说1个G就会报OutOfMemoryError（OOM）异常。</strong></p>\n</li>\n<li><p><strong>Java虚拟机栈（线程）：</strong>一个线程当中会有一个私有Java虚拟机栈。生命周期是与线程绑定在一起。存储Java方法。</p>\n<p>在Java方法中如何去调用C语言的方法，通过<strong>动态链接</strong>去调用完成。</p>\n</li>\n<li><p><strong>本地方法栈（线程）：</strong>存储C语言方法。</p>\n</li>\n<li><p><strong>栈帧（Java虚拟机栈、本地方法栈）Frame：</strong>代表是方法的执行。一个栈帧被创建就表示一个方法被执行，方法压栈先进后出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码1</span><br>a()&#123;<br>    b();<br>&#125;<br>b()&#123;<br>    c();<br>&#125;<br>c()&#123;<br>    <br>&#125;<br><span class=\"hljs-comment\">//先进行压栈</span><br><span class=\"hljs-comment\">//先往Java虚拟机中压栈存入a()，之后是b(),在之后是c()。</span><br><span class=\"hljs-comment\">//之后是出栈</span><br><span class=\"hljs-comment\">//在c()方法执行完之后先出，b()执行完再出，最后是a()执行完再出。</span><br><span class=\"hljs-comment\">//先进后出的概念。</span><br><br><span class=\"hljs-comment\">//伪代码2</span><br>a()&#123;<br>    a();<br>&#125;<br><span class=\"hljs-comment\">//如果递归一直调用自己，超出栈的长度或深度，就会报StackOverflowError（栈溢出）。同理如果一个方法内部的调用链非常长或深的话也一样会报StackOverflowError（栈溢出）。</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>局部变量表：</strong>存储方法中的局部变量</p>\n</li>\n<li><p><strong>操作数栈：</strong>栈结构，用来描述运算过程当中数据暂时的存储位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//伪代码.java文件</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>&#123;<br>    op1 = <span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> op1 + op2;<br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-comment\">//.java文件的.class文件翻译的JVM字节码。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> op1,<span class=\"hljs-type\">int</span> op2)</span>;<br>Code:<br><span class=\"hljs-number\">0</span>:iconst_3 <span class=\"hljs-comment\">// 将3放到操作数栈中</span><br><span class=\"hljs-comment\">//局部变量下标：如果是类级别方法【static修饰的方法】下标是从0开始；如果是实例方法下标从1开始，0标识的是这个实例，保留给当前对象的引用this。</span><br><span class=\"hljs-number\">1</span>:istore_0 <span class=\"hljs-comment\">//将操作数占中的3赋值给局部变量表中的局部变量</span><br><span class=\"hljs-number\">2</span>:iload_0 <span class=\"hljs-comment\">//将局部变量0值放到操作数栈中</span><br><span class=\"hljs-number\">3</span>:iload_1 <span class=\"hljs-comment\">//</span><br><span class=\"hljs-number\">4</span>:iadd<br><span class=\"hljs-number\">5</span>:istore_2<br><span class=\"hljs-number\">6</span>:iload_2<br><span class=\"hljs-number\">7</span>:ireturn<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>动态链接：</strong>符号引用<strong>转换为</strong>直接引用**。动态的转换。比方说：一个方法调用某个接口或抽象类，这时是不知道这个方法内部具体实现的，只有等到程序运行时才能知道具体是调用了哪个子类或实现类的方法。</p>\n</li>\n<li><p><strong>正常或异常方法的返回：</strong></p>\n</li>\n</ol>\n</li>\n<li><p><strong>程序计数器（线程）：</strong>是一块较小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>\n</li>\n</ul>\n<h3 id=\"JAVA-对象内存布局\"><a href=\"#JAVA-对象内存布局\" class=\"headerlink\" title=\"JAVA 对象内存布局\"></a>JAVA 对象内存布局</h3><h4 id=\"对象头：\"><a href=\"#对象头：\" class=\"headerlink\" title=\"对象头：\"></a>对象头：</h4><blockquote>\n<p>Mark Word：一系列的标记为（哈希码，分代年龄，锁状态标志等）64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Class Pointer：指向对象对应的类元数据的内存地址\t64位系统：8字节</p>\n</blockquote>\n<blockquote>\n<p>Length数组对象特有：数组长度\t4字节</p>\n</blockquote>\n<h4 id=\"实例数据：\"><a href=\"#实例数据：\" class=\"headerlink\" title=\"实例数据：\"></a>实例数据：</h4><p>包含了对象的所有成员变量，大小由各个变量类型决定</p>\n<blockquote>\n<p>boolean和byte：1字节</p>\n</blockquote>\n<blockquote>\n<p>short和char：2字节</p>\n</blockquote>\n<blockquote>\n<p>int和float：4字节</p>\n</blockquote>\n<blockquote>\n<p>long和double：8字节</p>\n</blockquote>\n<blockquote>\n<p>reference：8字节（64位系统）</p>\n</blockquote>\n<h4 id=\"对齐填充：\"><a href=\"#对齐填充：\" class=\"headerlink\" title=\"对齐填充：\"></a>对齐填充：</h4><p>为了保证对象的大小为8字节的整数倍，会进行填充字节</p>\n"},{"title":"2-内存模型","_content":"# 内存模型\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png)\n\n## 方法区\n\n> JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代\n>\n> JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。\n\n## 堆（分配内存会大一些）\n\n> 分配对象、new 实例。\n>\n> 堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）\n>\n> 如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。\n\n#### 1.新生代（Young）\n\n1. new Object() ，实例化10个单位为1的对象 ===>>> 新生代分配\n2. 新生代内存不够用时，触发GC\n3. GC之后，释放空间，会存在空间碎片\n4. 这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC\n5. GC的弊端就是会消耗线程资源，stop the world。\n\n**以上的设计显然是不合理的，重新设计之后**\n\n新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；\n\n新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。\n\n如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。\n\n*举例说明：*\n\n老年代：2G内存\n\n新生代：1G内存\n\n> Eden区800MB\n>\n> S0，S1各100MB\n\n这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。\n\n**新生代（Young）GC：Minor GC**\n\n**老年代（Old）GC：Major GC**\n\n+ **Eden区**\n\n所有刚刚new出来的对象，就会分配在Eden区。\n\n+ **Survivor区**\n\n1. S0、S1永远有一块内存是浪费的，一块被使用；\n\n2. S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；\n\n3. Eden=80%；S0=10%；S1=10%；Eden：S0：S1=8：1：1；\n\n4. 比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；\n\n5. 如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 > 年龄15之后，会将该对象存放到老年代（Old）区；\n\n   假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。\n\n6. 极端情况，如果有个对象超过老年代内存直接OOM。\n\n#### 2.老年代（Old）\n\n如果老年代的内存不够用了，会触发 **Old GC** 也可 称为 **Major GC**。Old GC会比较耗时。当然一旦触发了**Old GC（Major GC）**通常都会伴随着**Young GC（Minor GC）**。\n\n**Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）= Full GC**\n\n调优的原则：\n\n避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。\n\n1. 尽量减少GC次数\n2. 尽量只触发Young GC（Minor GC）\n\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n**实操：**\n\n在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）\n\n```java\n@RestController\n@RequestMapping(\"/test/jvm\")\npublic class TestJvmController {\n    List<AuthAccount> list = new ArrayList<>();\n    @GetMapping(\"/jvmTest\")\n    public void jvmTest() {\n        while (true) {\n            list.add(new AuthAccount());\n        }\n    }\n}\n```\n\n运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的**jvisualvm**工具（这个工具是JDK自带的），**首先还要安装Visual GC的插件才能查看到JVM GC运行时状况**。\n\n之后等待程序运行后，打开这个**jvisualvm**工具就可以查看到JVM内存运行时的状况\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png)\n\n如果堆内存中，没有可分配的内存空间了，就会报OOM。\n\n同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize=40M -XX:MaxMetaspaceSize=40M。\n\n栈也会报OOM，首先我们先测试栈的深度：\n\n```java\n\t// 通过递归操作\n\tpublic static long count = 0;\n\n    public static void test(long i) {\n        System.out.println(count++);\n        test(i);\n    }\n\n    public static void main(String[] args) {\n        test(count);\n    }\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png)\n\n通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。\n\n可以根据需求去调整栈的深度大小；\n\n一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。\n\n通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。\n","source":"_posts/JVM/2-JVM内存模型.md","raw":"---\ntitle: 2-内存模型\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# 内存模型\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png)\n\n## 方法区\n\n> JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代\n>\n> JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。\n\n## 堆（分配内存会大一些）\n\n> 分配对象、new 实例。\n>\n> 堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）\n>\n> 如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。\n\n#### 1.新生代（Young）\n\n1. new Object() ，实例化10个单位为1的对象 ===>>> 新生代分配\n2. 新生代内存不够用时，触发GC\n3. GC之后，释放空间，会存在空间碎片\n4. 这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC\n5. GC的弊端就是会消耗线程资源，stop the world。\n\n**以上的设计显然是不合理的，重新设计之后**\n\n新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；\n\n新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。\n\n如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。\n\n*举例说明：*\n\n老年代：2G内存\n\n新生代：1G内存\n\n> Eden区800MB\n>\n> S0，S1各100MB\n\n这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。\n\n**新生代（Young）GC：Minor GC**\n\n**老年代（Old）GC：Major GC**\n\n+ **Eden区**\n\n所有刚刚new出来的对象，就会分配在Eden区。\n\n+ **Survivor区**\n\n1. S0、S1永远有一块内存是浪费的，一块被使用；\n\n2. S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；\n\n3. Eden=80%；S0=10%；S1=10%；Eden：S0：S1=8：1：1；\n\n4. 比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；\n\n5. 如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 > 年龄15之后，会将该对象存放到老年代（Old）区；\n\n   假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。\n\n6. 极端情况，如果有个对象超过老年代内存直接OOM。\n\n#### 2.老年代（Old）\n\n如果老年代的内存不够用了，会触发 **Old GC** 也可 称为 **Major GC**。Old GC会比较耗时。当然一旦触发了**Old GC（Major GC）**通常都会伴随着**Young GC（Minor GC）**。\n\n**Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）= Full GC**\n\n调优的原则：\n\n避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。\n\n1. 尽量减少GC次数\n2. 尽量只触发Young GC（Minor GC）\n\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n**实操：**\n\n在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）\n\n```java\n@RestController\n@RequestMapping(\"/test/jvm\")\npublic class TestJvmController {\n    List<AuthAccount> list = new ArrayList<>();\n    @GetMapping(\"/jvmTest\")\n    public void jvmTest() {\n        while (true) {\n            list.add(new AuthAccount());\n        }\n    }\n}\n```\n\n运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的**jvisualvm**工具（这个工具是JDK自带的），**首先还要安装Visual GC的插件才能查看到JVM GC运行时状况**。\n\n之后等待程序运行后，打开这个**jvisualvm**工具就可以查看到JVM内存运行时的状况\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png)\n\n如果堆内存中，没有可分配的内存空间了，就会报OOM。\n\n同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize=40M -XX:MaxMetaspaceSize=40M。\n\n栈也会报OOM，首先我们先测试栈的深度：\n\n```java\n\t// 通过递归操作\n\tpublic static long count = 0;\n\n    public static void test(long i) {\n        System.out.println(count++);\n        test(i);\n    }\n\n    public static void main(String[] args) {\n        test(count);\n    }\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png)\n\n通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。\n\n可以根据需求去调整栈的深度大小；\n\n一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。\n\n通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。\n","slug":"JVM/2-JVM内存模型","published":1,"date":"2020-05-14T16:06:21.000Z","updated":"2022-11-25T17:39:15.226Z","_id":"clawrzuai0005u42b6wis8ywv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png\"></p>\n<h2 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h2><blockquote>\n<p>JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代</p>\n<p>JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。</p>\n</blockquote>\n<h2 id=\"堆（分配内存会大一些）\"><a href=\"#堆（分配内存会大一些）\" class=\"headerlink\" title=\"堆（分配内存会大一些）\"></a>堆（分配内存会大一些）</h2><blockquote>\n<p>分配对象、new 实例。</p>\n<p>堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）</p>\n<p>如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。</p>\n</blockquote>\n<h4 id=\"1-新生代（Young）\"><a href=\"#1-新生代（Young）\" class=\"headerlink\" title=\"1.新生代（Young）\"></a>1.新生代（Young）</h4><ol>\n<li>new Object() ，实例化10个单位为1的对象 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 新生代分配</li>\n<li>新生代内存不够用时，触发GC</li>\n<li>GC之后，释放空间，会存在空间碎片</li>\n<li>这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC</li>\n<li>GC的弊端就是会消耗线程资源，stop the world。</li>\n</ol>\n<p><strong>以上的设计显然是不合理的，重新设计之后</strong></p>\n<p>新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；</p>\n<p>新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。</p>\n<p>如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。</p>\n<p><em>举例说明：</em></p>\n<p>老年代：2G内存</p>\n<p>新生代：1G内存</p>\n<blockquote>\n<p>Eden区800MB</p>\n<p>S0，S1各100MB</p>\n</blockquote>\n<p>这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。</p>\n<p><strong>新生代（Young）GC：Minor GC</strong></p>\n<p><strong>老年代（Old）GC：Major GC</strong></p>\n<ul>\n<li><strong>Eden区</strong></li>\n</ul>\n<p>所有刚刚new出来的对象，就会分配在Eden区。</p>\n<ul>\n<li><strong>Survivor区</strong></li>\n</ul>\n<ol>\n<li><p>S0、S1永远有一块内存是浪费的，一块被使用；</p>\n</li>\n<li><p>S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；</p>\n</li>\n<li><p>Eden&#x3D;80%；S0&#x3D;10%；S1&#x3D;10%；Eden：S0：S1&#x3D;8：1：1；</p>\n</li>\n<li><p>比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；</p>\n</li>\n<li><p>如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 &gt; 年龄15之后，会将该对象存放到老年代（Old）区；</p>\n<p>假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。</p>\n</li>\n<li><p>极端情况，如果有个对象超过老年代内存直接OOM。</p>\n</li>\n</ol>\n<h4 id=\"2-老年代（Old）\"><a href=\"#2-老年代（Old）\" class=\"headerlink\" title=\"2.老年代（Old）\"></a>2.老年代（Old）</h4><p>如果老年代的内存不够用了，会触发 <strong>Old GC</strong> 也可 称为 <strong>Major GC</strong>。Old GC会比较耗时。当然一旦触发了<strong>Old GC（Major GC）</strong>通常都会伴随着<strong>Young GC（Minor GC）</strong>。</p>\n<p><strong>Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）&#x3D; Full GC</strong></p>\n<p>调优的原则：</p>\n<p>避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。</p>\n<ol>\n<li>尽量减少GC次数</li>\n<li>尽量只触发Young GC（Minor GC）</li>\n</ol>\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n<p><strong>实操：</strong></p>\n<p>在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/test/jvm&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestJvmController</span> &#123;<br>    List&lt;AuthAccount&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/jvmTest&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">jvmTest</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AuthAccount</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的<strong>jvisualvm</strong>工具（这个工具是JDK自带的），<strong>首先还要安装Visual GC的插件才能查看到JVM GC运行时状况</strong>。</p>\n<p>之后等待程序运行后，打开这个<strong>jvisualvm</strong>工具就可以查看到JVM内存运行时的状况</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png\"></p>\n<p>如果堆内存中，没有可分配的内存空间了，就会报OOM。</p>\n<p>同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize&#x3D;40M -XX:MaxMetaspaceSize&#x3D;40M。</p>\n<p>栈也会报OOM，首先我们先测试栈的深度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 通过递归操作</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> i)</span> &#123;<br>       System.out.println(count++);<br>       test(i);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>       test(count);<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png\"></p>\n<p>通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。</p>\n<p>可以根据需求去调整栈的深度大小；</p>\n<p>一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。</p>\n<p>通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h1><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200507002258.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429225857.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233701.png\"></p>\n<h2 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h2><blockquote>\n<p>JDK1.7 之前包含1.7 将方法区称为 Perm Space 永久代</p>\n<p>JDK1.8之后包含1.8 将方法区称为 MetaSpace 元空间。</p>\n</blockquote>\n<h2 id=\"堆（分配内存会大一些）\"><a href=\"#堆（分配内存会大一些）\" class=\"headerlink\" title=\"堆（分配内存会大一些）\"></a>堆（分配内存会大一些）</h2><blockquote>\n<p>分配对象、new 实例。</p>\n<p>堆内存当中划分为两个区域：老年代和新生代。内存分配为3（老年代）：1（新生代）</p>\n<p>如何去划分老年代和新生代，根据对象的年龄。这个年龄是一个对象经过一次GC，如果还存在的话，年龄就加一。当年龄超过默认值（15）时，就会从新生代划分到老年代当中。</p>\n</blockquote>\n<h4 id=\"1-新生代（Young）\"><a href=\"#1-新生代（Young）\" class=\"headerlink\" title=\"1.新生代（Young）\"></a>1.新生代（Young）</h4><ol>\n<li>new Object() ，实例化10个单位为1的对象 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 新生代分配</li>\n<li>新生代内存不够用时，触发GC</li>\n<li>GC之后，释放空间，会存在空间碎片</li>\n<li>这时又new一个对象，这时这个对象的单位是3；GC之后释放的空间不连续，导致新生代不够分配，又会再一次触GC</li>\n<li>GC的弊端就是会消耗线程资源，stop the world。</li>\n</ol>\n<p><strong>以上的设计显然是不合理的，重新设计之后</strong></p>\n<p>新生代new出来的对象是朝生夕死，将新生代划分为两个区域：Eden区，Survivor区。Survivor区又划分为S0、S1两个区域；</p>\n<p>新生代内存分配情况是：Eden区80%，Survivor区20%（S0：10%，S1：10%）。</p>\n<p>如果刚new出来的对象太大，超过了新生代的Eden区内存，会直接存入在老年代。</p>\n<p><em>举例说明：</em></p>\n<p>老年代：2G内存</p>\n<p>新生代：1G内存</p>\n<blockquote>\n<p>Eden区800MB</p>\n<p>S0，S1各100MB</p>\n</blockquote>\n<p>这是new一个900MB的对象，会直接分配在老年代（Old）里，这时这个对象是老年代在管理，新生代发生GC的时候并不会清理这个对象，老年代发生GC时才会清除这个对象。</p>\n<p><strong>新生代（Young）GC：Minor GC</strong></p>\n<p><strong>老年代（Old）GC：Major GC</strong></p>\n<ul>\n<li><strong>Eden区</strong></li>\n</ul>\n<p>所有刚刚new出来的对象，就会分配在Eden区。</p>\n<ul>\n<li><strong>Survivor区</strong></li>\n</ul>\n<ol>\n<li><p>S0、S1永远有一块内存是浪费的，一块被使用；</p>\n</li>\n<li><p>S0、S1两个区域互相转换身份，以空间的浪费换取内存空间的连续性；</p>\n</li>\n<li><p>Eden&#x3D;80%；S0&#x3D;10%；S1&#x3D;10%；Eden：S0：S1&#x3D;8：1：1；</p>\n</li>\n<li><p>比如说直接new一个900MB的新对象，会直接在老年代（Old）区进行分配；</p>\n</li>\n<li><p>如果新生代（Young）区的Young GC之后对象的年龄不断的+1+1+1 &gt; 年龄15之后，会将该对象存放到老年代（Old）区；</p>\n<p>假如这时新生代（Young）区有120MB存活对象，S区不够放了，会跟老年代借20MB的空间存放，会触发担保机制，这20MB依旧还是属于老年代（Old）管理的。</p>\n</li>\n<li><p>极端情况，如果有个对象超过老年代内存直接OOM。</p>\n</li>\n</ol>\n<h4 id=\"2-老年代（Old）\"><a href=\"#2-老年代（Old）\" class=\"headerlink\" title=\"2.老年代（Old）\"></a>2.老年代（Old）</h4><p>如果老年代的内存不够用了，会触发 <strong>Old GC</strong> 也可 称为 <strong>Major GC</strong>。Old GC会比较耗时。当然一旦触发了<strong>Old GC（Major GC）</strong>通常都会伴随着<strong>Young GC（Minor GC）</strong>。</p>\n<p><strong>Old GC（Major GC）+ Young GC（Minor GC）+ MetaSpace GC（可以忽略它）&#x3D; Full GC</strong></p>\n<p>调优的原则：</p>\n<p>避免触发Full GC，换句话说避免触发Old GC（Major GC）；如果要触发GC，尽量只触发Young GC（Minor GC）。</p>\n<ol>\n<li>尽量减少GC次数</li>\n<li>尽量只触发Young GC（Minor GC）</li>\n</ol>\n<img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429224902.png\" style=\"zoom:150%;\" />\n\n<p><strong>实操：</strong></p>\n<p>在IDEA中VM options设置JVM堆内存：-Xms30M -Xmx30M（设置堆内存30MB，最大30MB）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/test/jvm&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestJvmController</span> &#123;<br>    List&lt;AuthAccount&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/jvmTest&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">jvmTest</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AuthAccount</span>());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>运行SpringBoot程序后、在JAVA安装目录中，找到bin文件夹下的<strong>jvisualvm</strong>工具（这个工具是JDK自带的），<strong>首先还要安装Visual GC的插件才能查看到JVM GC运行时状况</strong>。</p>\n<p>之后等待程序运行后，打开这个<strong>jvisualvm</strong>工具就可以查看到JVM内存运行时的状况</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429231237.png\"></p>\n<p>如果堆内存中，没有可分配的内存空间了，就会报OOM。</p>\n<p>同理方法区Metaspace也会报OOM，设置JVM中方法区大小：-XX:MetaspaceSize&#x3D;40M -XX:MaxMetaspaceSize&#x3D;40M。</p>\n<p>栈也会报OOM，首先我们先测试栈的深度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 通过递归操作</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> i)</span> &#123;<br>       System.out.println(count++);<br>       test(i);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>       test(count);<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429233002.png\"></p>\n<p>通过测试我们发现，栈的默认深度是7000左右。之后就会报OOM错误。</p>\n<p>可以根据需求去调整栈的深度大小；</p>\n<p>一个栈的深度大小，太大或太小都会有弊端，太小的话影响方法链调用的深度、太大的话在整个JAVA进程当中它能够创建这样一个的线程的数量是有限的，如果太大会影响到其他线程创建栈的深度。</p>\n<p>通过前人的经验来看，最佳值设置到5000左右就可以了。可以通过JVM参数去设置。</p>\n"},{"title":"5-JVM常用的命令","_content":"# JVM常用的命令\n\n## jps ：基础工具\n\n查看JAVA进程PID。\n\n`jps` 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。\n\n`jps` 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 `ps` 命令。\n\n**jps 常用参数**\n\n- `jps -l` 如果是以 class 方式运行，会显示进程的主类 `main.class` 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名\n\n第一列的数字就是进程的 `pid`\n\n- `jps -v` 输出传递给 JVM 的参数，`v` 表示虚拟机，`jps -vl` 比较常见的组合；\n- `jps -V` 大写 `v`，表示通过文件传递给 JVM 的参数\n\n```java\nCopy# michael @ Michael-MBP in ~ [16:37:59]\n$ jps -v |grep Mybatis\n8005 MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:53364,suspend=y,server=n -XX:TieredStopAtLevel=1 -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=53363 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018.2/captureAgent/debugger-agent.jar=file:/private/var/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-8\n```\n\n- `jps -m` 输出传递给 `main.class` 方法的参数，实用的一个命令，`jps -ml` 比较实用的组合，会显示包名/类名/参数\n- `jps -q` 只输出进程的 pid\n\njps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。\n\n有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 `jps -v` 查看进程的jvm参数情况。\n\n---\n\n\n\n##\tjinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\n\n参考原文：https://blog.csdn.net/yx0628/article/details/80958488\n\n`jinfo -flag initilHeapSize ${PID} `查看某个**JAVA进程**中，JVM的参数值是什么。\n\n`jinfo -flag ${PID} ` 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。\n\n```shell\n[root@admin ~]# jinfo --help\nUsage:\n    jinfo [option] <pid>\n        (to connect to running process)\n    jinfo [option] <executable <core>\n        (to connect to a core file)\n    jinfo [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    -flag <name>         to print the value of the named VM flag\n    -flag [+|-]<name>    to enable or disable the named VM flag\n    -flag <name>=<value> to set the named VM flag to the given value\n    -flags               to print VM flags\n    -sysprops            to print Java system properties\n    <no option>          to print both of the above\n    -h | -help           to print this help message\n```\n\n我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：\n\n```shell\n[root@admin ~]# jps\n43520 Test\n35900 Jps\n```\n\n查看 JVM 参数：\n\n```shell\n[root@admin ~]# jinfo -flags 43520\nAttaching to process ID 43520, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.45-b08\n\n-Dfile.encoding=GBK\n```\n\n查看系统参数：\n\n```shell\n[root@admin ~]# jinfo -sysflags 43520\n```\n\n虚拟机的参数可以通过这个命令查看：\n\n```shell\njava -XX:+PrintFlagsFinal -version | grep manageable\n```\n\n除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。\n\n```shell\njinfo -flag +PrintGC 43520\njinfo -flag +PrintGCDetails 43520\n```\n\n关闭 GC 日志的话同理：\n\n```shell\njinfo -flag -PrintGC 43520\njinfo -flag -PrintGCDetails 43520\n```\n\n查看是否开启 GC 日志的打印：\n\n```shell\njinfo -flag PrintGC 43520\njinfo -flag PrintGCDetails 43520\n```\n\n```shell\n[root@admin ~]# jinfo -flag PrintGC 43520\n-XX:-PrintGC\n\n[root@admin ~]# jinfo -flag PrintGCDetails 43520\n-XX:-PrintGCDetails\n```\n\n常用 JVM 参数：\n\n```shell\n-Xms：初始堆大小，默认为物理内存的1/64(<1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制\n-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制\n-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。\n-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。\n-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:\"-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。\n-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。\n-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。\n```\n\n---\n\n\n\n##\tjstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\n\n原文参考：https://blog.csdn.net/cockroach02/article/details/82670500\n\n查看JVM中相关性能的信息。\n\njstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java/bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。\n\n> 类装载信息：`jstat -class ${PID}`\n>\n> 举例：`jstat -class ${PID} ${几秒内打印一次} ${打印10次} = jstat -class ${PID} 1000 10`。打印出过去10秒类加载的数据。\n\n> GC相关的情况：`jstat -gc ${PID}`\n>\n> 举例：`jstat -gc ${PID} ${几秒内打印一次} ${打印10次} = jstat -gc ${PID} 1000 10`。打印出过去10秒GC的数据。\n\n**参数说明：**\n\n```shell\nC:\\Users\\Administrator>jstat -help\nUsage: jstat -help|-options\n       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n\nDefinitions:\n  <option>      An option reported by the -options option\n  <vmid>        Virtual Machine Identifier. A vmid takes the following form:\n                     <lvmid>[@<hostname>[:<port>]]\n                Where <lvmid> is the local vm identifier for the target\n                Java virtual machine, typically a process id; <hostname> is\n                the name of the host running the target Java virtual machine;\n                and <port> is the port number for the rmiregistry on the\n                target host. See the jvmstat documentation for a more complete\n                description of the Virtual Machine Identifier.\n  <lines>       Number of samples between header lines.\n  <interval>    Sampling interval. The following forms are allowed:\n                    <n>[\"ms\"|\"s\"]\n                Where <n> is an integer and the suffix specifies the units as\n                milliseconds(\"ms\") or seconds(\"s\"). The default units are \"ms\".\n  <count>       Number of samples to take before terminating.\n  -J<flag>      Pass <flag> directly to the runtime system.\n```\n\n由以上可知，jstat的命令的格式如下：\n\n```shell\njstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n```\n\n我们可以通过jstat -options查看可以支持的具体参数\n\n```shell\nC:\\Users\\Administrator>jstat -options\n-class\n-compiler\n-gc\n-gccapacity\n-gccause\n-gcmetacapacity\n-gcnew\n-gcnewcapacity\n-gcold\n-gcoldcapacity\n-gcutil\n-printcompilation\n```\n\n**Option参数说明：**\n\n|       参数        |                             说明                             |\n| :---------------: | :----------------------------------------------------------: |\n|      -class       | 类加载的行为统计 Displays statistics about the behavior of the class loader. |\n|     -compiler     | HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler. |\n|        -gc        | 垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap. |\n|    -gccapacity    | 各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces. |\n|     -gccause      | 垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events. |\n|  -gcmetacapacity  | 统计元空间使用情况 Displays statistics about the sizes of the metaspace. |\n|      -gcnew       | 显示新生代统计信息 Displays statistics of the behavior of the new generation. |\n|  -gcnewcapacity   | 统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces. |\n|      -gcold       | 统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics. |\n|  -gcoldcapacity   | 统计老年代内存使用情况 Displays statistics about the sizes of the old generation. |\n|      -gcutil      | 显示各个各代内存使用百分比 Displays a summary about garbage collection statistics. |\n| -printcompilation | Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics. |\n\n**使用示例：**\n\n**jstat -class ： 类加载的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -class 2284\nLoaded  Bytes  Unloaded  Bytes     Time\n 30116 75021.8       26    51.4      86.72\n```\n\n- Loaded ：加载class的数量\n- Bytes ： 加载class的大小（单位KB）\n- Unloaded ：卸载class的数量\n- Bytes： 卸载class的大小（单位KB）\n- Time ： 加载和卸载class所耗费的时间\n\n**jstat -compiler ：HotSpt JIT编译器行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -compiler 2284\nCompiled Failed Invalid   Time   FailedType FailedMethod\n   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink\n```\n\n- Compiled ：编译成功数\n- Failed ： 编译失败数\n- Invalid ： 无效数量\n- FailedType ： 最后一次编译失效类型\n- FailedMethod ：最后一次编译失效的方法\n\n**jstat -gc：垃圾回收堆的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gc 2284\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT\n104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221\n```\n\n+ S0C ： 第一个幸存区的总容量（KB）\n+ S1C ： 第二个幸存区的总容量（KB）\n+ S0U ： 第一个幸存区已使用的容量（KB）\n+ S1U ： 第二个幸存区已使用的容量（KB）\n+ EC ： 伊甸区的总容量（KB）\n+ EU ： 伊甸区已使用容量（KB）\n+ OC ： 老年区的总容量（KB）\n+ MC ： 元空间的总容量（KB）\n+ MU ： 元空间已使用容量（KB）\n+ CCSC ： 压缩类空间总容量（KB）\n+ CCSU ： 压缩类空间已使用总容量（KB）\n+ YGC ： 新生代GC次数\n+ YGCT ：新生代GC总耗费时间\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗费时间\n+ GCT ： GC总耗费时间\n\n**jstat -gccapacity ： 各个回收区内存情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gccapacity 2284\n NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC\n1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0\n59    11\n```\n\n+ NGCMN ： 新生代占用的最小空间大小（KB）\n+ NGCMX ： 新生代占用的最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1C ：第二幸存区当前空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ OGCMN ： 老年区最小空间大小（KB）\n+ OGCMX ： 老年区最大空间大小（KB）\n+ OGC ： 老年区当前空间大小（KB）\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小大小（KB）\n+ CCSMX ： 压缩类最大空间大小（KB）\n+ CCSC ： 压缩类当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**jstat -gccause ：垃圾收集统计概述**\n\n```shell\nC:\\Users\\Administrator>jstat -gccause 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC\n  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ LGCC ：最近一次GC原因\n+ GCC ： 当前GC原因\n\n**6 . gc -gcmetacapacity ：元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcmetacapacity 2284\n   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT\n       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221\n\n```\n\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小空间大小（KB）\n+ CCSMX ： 压缩类空间最大空间大小（KB）\n+ CCSC ： 压缩类空间当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT： 老年代GC耗费时间\n+ GCT ： GC总耗费时间\n\n**7 . jstat -gcnew ： 显示新生代统计信息**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnew 2284\n S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972\n```\n\n+ S0C ： 第一幸存区总空间大小（KB）\n+ S1C ： 第二幸存区总空间大小（KB）\n+ S0U ： 第一幸存区已使用空间大小（KB）\n+ S1U ： 第二幸存区已使用空间大小（KB）\n+ TT ： 提升阈值(提升阈值)\n+ MTT ： 最大阈值\n+ DSS ： survivor区域大小 (KB)\n+ EC ： 伊甸区总空间大小（KB）\n+ EU ： 伊甸区已使用空间大小（KB）\n\n**8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnewcapacity 2284\n  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC\n 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11\n```\n\n+ NGCMN ： 新生代最小空间大小（KB）\n+ NGCMX ： 新生代最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0CMX ： 第一幸存区最大空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1CMX ： 第二幸存区最大空间大小（KB）\n+ S1C ： 第二幸存区当前空间大小（KB）\n+ ECMX ： 伊甸区最大空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**9 . jstat -gcold ： 统计老年代和元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcold 2284\n   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT\n251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295\n```\n\n+ MC ： 元空间总大小（KB）\n+ MU ： 元空间已使用大小（KB）\n+ CCSC ： 压缩类空间总大小（KB）\n+ CCSU ： 压缩类空间已使用大小（KB）\n+ OC ： 老年区空间总大小（KB）\n+ OU ： 老年区已使用大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**10 . jstat -gcoldcapacity ： 统计老年代内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcoldcapacity 2284\n   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT\n  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295\n```\n\n+ OGCMN ：老年区占用最小空间（KB）\n+ OGCMX ： 老年区占用最大空间（KB）\n+ OGC ： 当前老年区空间（KB）\n+ OC ： 当前老年区空间（KB）\n+ YGC ：新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**11 . jstat -gcutil ： 垃圾回收统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gcutil 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ GCT ：GC总耗时\n\n**12 . jstat -printcompilation ： Hotspot方法编译统计情况**\n\n```shell\nC:\\Users\\Administrator>jstat -printcompilation 2284\nCompiled  Size  Type Method\n   21538    150    1 java/util/Collections reverse\n```\n\n+ Compiled ： 已编译方法次数\n+ Size ： 最近一次方法编译大小\n+ Type ： 最近一次编译方法类型\n+ Method ： 最近一次编译方法\n\n参考：\n\njstat：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\njstat命令使用：https://www.cnblogs.com/lizhonghua34/p/7307139.html\nJVM调优命令-jstat：https://www.cnblogs.com/myna/p/7567769.html\n\n---\n\n\n\n##\tjstack：查看某个Java进程内的线程堆栈信息\n\n参考原文：https://www.jianshu.com/p/8d5782bc596e\n\n查看JAVA进程当中，线程内容。\n\n**jstack用法**\n\n```kotlin\n/opt/java8/bin/jstack\n\nUsage:\n    jstack [-l] <pid>\n        (to connect to running process) 连接活动线程\n    jstack -F [-m] [-l] <pid>\n        (to connect to a hung process) 连接阻塞线程\n    jstack [-m] [-l] <executable> <core>\n        (to connect to a core file) 连接dump的文件\n    jstack [-m] [-l] [server_id@]<remote server IP or hostname>\n        (to connect to a remote debug server) 连接远程服务器\n\nOptions:\n    -F  to force a thread dump. Use when jstack <pid> does not respond (process is hung)\n    -m  to print both java and native frames (mixed mode)\n    -l  long listing. Prints additional information about locks\n    -h or -help to print this help message\n```\n\n**jstack查看输出**\n\n```bash\n/opt/java8/bin/jstack -l 28367\n\n2019-06-25 15:04:46\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):\n\n\"Attach Listener\" #453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n        - None\n\n\"grpc-default-executor-263\" #452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000007400243f0> (a java.util.concurrent.SynchronousQueue$TransferStack)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)\n        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:362)\n        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n\n\"http-bio-8080-exec-10\" #235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x0000000743d26638> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n```\n\n**jstack统计线程数**\n\n```bash\n/opt/java8/bin/jstack -l 28367 | grep 'java.lang.Thread.State' | wc -l\n```\n\n**jstack检测死锁**\n\n*死锁代码*\n\n```csharp\npublic class DeathLock {\n\n    private static Lock lock1 = new ReentrantLock();\n    private static Lock lock2 = new ReentrantLock();\n\n    public static void deathLock() {\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock1.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock2.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        Thread t2 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock2.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock1.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n\n        t1.setName(\"thread1\");\n        t2.setName(\"thread2\");\n        t1.start();\n        t2.start();\n    }\n\n    public static void main(String[] args) {\n        deathLock();\n    }\n}\n```\n\n*死锁日志*\n\n```bash\n\"mythread2\" #12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d640> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\"mythread1\" #11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d610> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\nFound one Java-level deadlock:\n=============================\n\"mythread2\":\n  waiting for ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread1\"\n\"mythread1\":\n  waiting for ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread2\"\n\nJava stack information for the threads listed above:\n===================================================\n\"mythread2\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\"mythread1\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\nFound 1 deadlock.\n```\n\n**jstack检测cpu高**\n\n*步骤一：查看cpu占用高进程*\n\n```cpp\ntop\n\nMem:  16333644k total,  9472968k used,  6860676k free,   165616k buffers\nSwap:        0k total,        0k used,        0k free,  6665292k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     \n17850 root      20   0 7588m 112m  11m S 100.7  0.7  47:53.80 java       \n 1552 root      20   0  121m  13m 8524 S  0.7  0.1  14:37.75 AliYunDun   \n 3581 root      20   0 9750m 2.0g  13m S  0.7 12.9 298:30.20 java        \n    1 root      20   0 19360 1612 1308 S  0.0  0.0   0:00.81 init        \n    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd    \n    3 root      RT   0     0    0    0 S  0.0  0.0   0:00.14 migration/0 \n```\n\n*步骤二：查看cpu占用高线程*\n\n```css\ntop -H -p 17850\n\ntop - 17:43:15 up 5 days,  7:31,  1 user,  load average: 0.99, 0.97, 0.91\nTasks:  32 total,   1 running,  31 sleeping,   0 stopped,   0 zombie\nCpu(s):  3.7%us,  8.9%sy,  0.0%ni, 87.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:  16333644k total,  9592504k used,  6741140k free,   165700k buffers\nSwap:        0k total,        0k used,        0k free,  6781620k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n17880 root      20   0 7588m 112m  11m R 99.9  0.7  50:47.43 java\n17856 root      20   0 7588m 112m  11m S  0.3  0.7   0:02.08 java\n17850 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.00 java\n17851 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.23 java\n17852 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.09 java\n17853 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.12 java\n17854 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.07 java\n```\n\n*步骤三：转换线程ID*\n\n```bash\nprintf \"%x\\n\" 17880          \n45d8\n```\n\n*步骤四：定位cpu占用线程*\n\n```bash\njstack 17850|grep 45d8 -A 30\n\"pool-1-thread-11\" #20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]\n   java.lang.Thread.State: RUNNABLE\n        at java.io.FileOutputStream.writeBytes(Native Method)\n        at java.io.FileOutputStream.write(FileOutputStream.java:326)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)\n        - locked <0x00000006c6c2e708> (a java.io.BufferedOutputStream)\n        at java.io.PrintStream.write(PrintStream.java:482)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)\n        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)\n        - locked <0x00000006c6c26620> (a java.io.OutputStreamWriter)\n        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)\n        at java.io.PrintStream.write(PrintStream.java:527)\n        - eliminated <0x00000006c6c10178> (a java.io.PrintStream)\n        at java.io.PrintStream.print(PrintStream.java:597)\n        at java.io.PrintStream.println(PrintStream.java:736)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at com.demo.guava.HardTask.call(HardTask.java:18)\n        at com.demo.guava.HardTask.call(HardTask.java:9)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n\"pool-1-thread-10\" #19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000006c6c14178> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n```\n\n---\n\n\n\n## Jmap\n\n原文参考：https://www.jianshu.com/p/c52ffaca40a5\n\n> jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的`共享对象内存映射或堆内存细节`。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍`Java的堆Dump`以及jmap命令\n\n### 什么是堆Dump\n\n### 基础知识\n\n[Java虚拟机的内存组成以及堆内存介绍](链接地址)\n [Java GC工作原理](链接地址)\n\n常见内存错误：\n\n> outOfMemoryError 年老代内存不足。\n>  outOfMemoryError:PermGen Space 永久代内存不足。\n>  outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。\n\n**jmap 用法摘要**\n\n```bash\nUsage:\n    jmap [option] <pid>\n        (to connect to running process)\n    jmap [option] <executable <core>\n        (to connect to a core file)\n    jmap [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    <none>               to print same info as Solaris pmap\n    -heap                to print java heap summary\n    -histo[:live]        to print histogram of java object heap; if the \"live\"\n                         suboption is specified, only count live objects\n    -permstat            to print permanent generation statistics\n    -finalizerinfo       to print information on objects awaiting finalization\n    -dump:<dump-options> to dump java heap in hprof binary format\n                         dump-options:\n                           live         dump only live objects; if not specified,\n                                        all objects in the heap are dumped.\n                           format=b     binary format\n                           file=<file>  dump heap to <file>\n                         Example: jmap -dump:live,format=b,file=heap.bin <pid>\n    -F                   force. Use with -dump:<dump-options> <pid> or -histo\n                         to force a heap dump or histogram when <pid> does not\n                         respond. The \"live\" suboption is not supported\n                         in this mode.\n    -h | -help           to print this help message\n    -J<flag>             to pass <flag> directly to the runtime system\n```\n\n- 指定进程号(pid)的进程 jmap [ option ]\n- 指定核心文件 jmap [ option ]\n- 指定远程调试服务器 jmap [ option ] [server-id@]\n\n**参数：**\n\n- option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。\n- pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。\n- executable 产生核心dump的Java可执行文件。\n- core 需要打印配置信息的核心文件。\n- remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。\n- server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。\n\n**选项:**\n\n- <no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。\n- -dump:[live,]format=b,file=<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。\n- -finalizerinfo 打印等待终结的对象信息。\n- -heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。\n- -histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。\n- -permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。\n- -F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。\n- -h 打印帮助信息。\n- -help 打印帮助信息。\n- -J<flag> 指定传递给运行jmap的JVM的参数。\n\n**示例：**\n\n*查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846*\n\n```bash\nAttaching to process ID 31846, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.71-b01\n\nusing thread-local object allocation.\nParallel GC with 4 thread(s)//GC 方式\n\nHeap Configuration: //堆内存初始化配置\n   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)\n   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)\n   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小\n   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小\n   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小\n   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=<value>:设置JVM堆的‘老生代’的大小\n   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率\n   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 \n   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=<value>:设置JVM堆的‘永生代’的初始大小\n   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=<value>:设置JVM堆的‘永生代’的最大大小\n   G1HeapRegionSize = 0 (0.0MB)\n\nHeap Usage://堆内存使用情况\nPS Young Generation\nEden Space://Eden区内存分布\n   capacity = 33030144 (31.5MB)//Eden区总容量\n   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用\n   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量\n   4.614088270399305% used //Eden区使用比率\nFrom Space:  //其中一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nTo Space:  //另一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nPS Old Generation //当前的Old区内存分布\n   capacity = 86507520 (82.5MB)\n   used     = 0 (0.0MB)\n   free     = 86507520 (82.5MB)\n   0.0% used\nPS Perm Generation//当前的 “永生代” 内存分布\n   capacity = 22020096 (21.0MB)\n   used     = 2496528 (2.3808746337890625MB)\n   free     = 19523568 (18.619125366210938MB)\n   11.337498256138392% used\n\n670 interned Strings occupying 43720 bytes.\n```\n\n**查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331**\n\n```bash\nnum     #instances         #bytes  class name\n编号     个数                字节     类名\n----------------------------------------------\n   1:             7        1322080  [I\n   2:          5603         722368  <methodKlass>\n   3:          5603         641944  <constMethodKlass>\n   4:         34022         544352  java.lang.Integer\n   5:           371         437208  <constantPoolKlass>\n   6:           336         270624  <constantPoolCacheKlass>\n   7:           371         253816  <instanceKlassKlass>\n```\n\n**将内存使用的详细情况输出到文件，执行命令： jmap -dump:format=b,file=heapDump 6900**\n\n然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：http://localhost:5000/ 查看详细信息\n\n> 这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。\n\n### 总结\n\n1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。\n 2.要制作堆Dump可以直接使用jvm自带的jmap命令\n 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。\n 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。\n 5.也可以使用 jmap -dump:format=b,file=<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容\n 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。\n\n### 出现问题：\n\n1. Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process\n    在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process，这是oracla文档中提到的一个bug:http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：\n\n- echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope 该方法在下次重启前有效。\n- 永久有效方法 sudo vi /etc/sysctl.d/10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope = 1 修改为: kernel.yama.ptrace_scope = 0 重启系统，使修改生效。\n\n","source":"_posts/JVM/5-JVM常用的命令.md","raw":"---\ntitle: 5-JVM常用的命令\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM常用的命令\n\n## jps ：基础工具\n\n查看JAVA进程PID。\n\n`jps` 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。\n\n`jps` 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 `ps` 命令。\n\n**jps 常用参数**\n\n- `jps -l` 如果是以 class 方式运行，会显示进程的主类 `main.class` 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名\n\n第一列的数字就是进程的 `pid`\n\n- `jps -v` 输出传递给 JVM 的参数，`v` 表示虚拟机，`jps -vl` 比较常见的组合；\n- `jps -V` 大写 `v`，表示通过文件传递给 JVM 的参数\n\n```java\nCopy# michael @ Michael-MBP in ~ [16:37:59]\n$ jps -v |grep Mybatis\n8005 MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:53364,suspend=y,server=n -XX:TieredStopAtLevel=1 -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=53363 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018.2/captureAgent/debugger-agent.jar=file:/private/var/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-8\n```\n\n- `jps -m` 输出传递给 `main.class` 方法的参数，实用的一个命令，`jps -ml` 比较实用的组合，会显示包名/类名/参数\n- `jps -q` 只输出进程的 pid\n\njps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。\n\n有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 `jps -v` 查看进程的jvm参数情况。\n\n---\n\n\n\n##\tjinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\n\n参考原文：https://blog.csdn.net/yx0628/article/details/80958488\n\n`jinfo -flag initilHeapSize ${PID} `查看某个**JAVA进程**中，JVM的参数值是什么。\n\n`jinfo -flag ${PID} ` 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。\n\n```shell\n[root@admin ~]# jinfo --help\nUsage:\n    jinfo [option] <pid>\n        (to connect to running process)\n    jinfo [option] <executable <core>\n        (to connect to a core file)\n    jinfo [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    -flag <name>         to print the value of the named VM flag\n    -flag [+|-]<name>    to enable or disable the named VM flag\n    -flag <name>=<value> to set the named VM flag to the given value\n    -flags               to print VM flags\n    -sysprops            to print Java system properties\n    <no option>          to print both of the above\n    -h | -help           to print this help message\n```\n\n我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：\n\n```shell\n[root@admin ~]# jps\n43520 Test\n35900 Jps\n```\n\n查看 JVM 参数：\n\n```shell\n[root@admin ~]# jinfo -flags 43520\nAttaching to process ID 43520, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.45-b08\n\n-Dfile.encoding=GBK\n```\n\n查看系统参数：\n\n```shell\n[root@admin ~]# jinfo -sysflags 43520\n```\n\n虚拟机的参数可以通过这个命令查看：\n\n```shell\njava -XX:+PrintFlagsFinal -version | grep manageable\n```\n\n除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。\n\n```shell\njinfo -flag +PrintGC 43520\njinfo -flag +PrintGCDetails 43520\n```\n\n关闭 GC 日志的话同理：\n\n```shell\njinfo -flag -PrintGC 43520\njinfo -flag -PrintGCDetails 43520\n```\n\n查看是否开启 GC 日志的打印：\n\n```shell\njinfo -flag PrintGC 43520\njinfo -flag PrintGCDetails 43520\n```\n\n```shell\n[root@admin ~]# jinfo -flag PrintGC 43520\n-XX:-PrintGC\n\n[root@admin ~]# jinfo -flag PrintGCDetails 43520\n-XX:-PrintGCDetails\n```\n\n常用 JVM 参数：\n\n```shell\n-Xms：初始堆大小，默认为物理内存的1/64(<1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制\n-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制\n-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。\n-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。\n-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:\"-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。\n-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。\n-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。\n```\n\n---\n\n\n\n##\tjstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\n\n原文参考：https://blog.csdn.net/cockroach02/article/details/82670500\n\n查看JVM中相关性能的信息。\n\njstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java/bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。\n\n> 类装载信息：`jstat -class ${PID}`\n>\n> 举例：`jstat -class ${PID} ${几秒内打印一次} ${打印10次} = jstat -class ${PID} 1000 10`。打印出过去10秒类加载的数据。\n\n> GC相关的情况：`jstat -gc ${PID}`\n>\n> 举例：`jstat -gc ${PID} ${几秒内打印一次} ${打印10次} = jstat -gc ${PID} 1000 10`。打印出过去10秒GC的数据。\n\n**参数说明：**\n\n```shell\nC:\\Users\\Administrator>jstat -help\nUsage: jstat -help|-options\n       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n\nDefinitions:\n  <option>      An option reported by the -options option\n  <vmid>        Virtual Machine Identifier. A vmid takes the following form:\n                     <lvmid>[@<hostname>[:<port>]]\n                Where <lvmid> is the local vm identifier for the target\n                Java virtual machine, typically a process id; <hostname> is\n                the name of the host running the target Java virtual machine;\n                and <port> is the port number for the rmiregistry on the\n                target host. See the jvmstat documentation for a more complete\n                description of the Virtual Machine Identifier.\n  <lines>       Number of samples between header lines.\n  <interval>    Sampling interval. The following forms are allowed:\n                    <n>[\"ms\"|\"s\"]\n                Where <n> is an integer and the suffix specifies the units as\n                milliseconds(\"ms\") or seconds(\"s\"). The default units are \"ms\".\n  <count>       Number of samples to take before terminating.\n  -J<flag>      Pass <flag> directly to the runtime system.\n```\n\n由以上可知，jstat的命令的格式如下：\n\n```shell\njstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n```\n\n我们可以通过jstat -options查看可以支持的具体参数\n\n```shell\nC:\\Users\\Administrator>jstat -options\n-class\n-compiler\n-gc\n-gccapacity\n-gccause\n-gcmetacapacity\n-gcnew\n-gcnewcapacity\n-gcold\n-gcoldcapacity\n-gcutil\n-printcompilation\n```\n\n**Option参数说明：**\n\n|       参数        |                             说明                             |\n| :---------------: | :----------------------------------------------------------: |\n|      -class       | 类加载的行为统计 Displays statistics about the behavior of the class loader. |\n|     -compiler     | HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler. |\n|        -gc        | 垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap. |\n|    -gccapacity    | 各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces. |\n|     -gccause      | 垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events. |\n|  -gcmetacapacity  | 统计元空间使用情况 Displays statistics about the sizes of the metaspace. |\n|      -gcnew       | 显示新生代统计信息 Displays statistics of the behavior of the new generation. |\n|  -gcnewcapacity   | 统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces. |\n|      -gcold       | 统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics. |\n|  -gcoldcapacity   | 统计老年代内存使用情况 Displays statistics about the sizes of the old generation. |\n|      -gcutil      | 显示各个各代内存使用百分比 Displays a summary about garbage collection statistics. |\n| -printcompilation | Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics. |\n\n**使用示例：**\n\n**jstat -class ： 类加载的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -class 2284\nLoaded  Bytes  Unloaded  Bytes     Time\n 30116 75021.8       26    51.4      86.72\n```\n\n- Loaded ：加载class的数量\n- Bytes ： 加载class的大小（单位KB）\n- Unloaded ：卸载class的数量\n- Bytes： 卸载class的大小（单位KB）\n- Time ： 加载和卸载class所耗费的时间\n\n**jstat -compiler ：HotSpt JIT编译器行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -compiler 2284\nCompiled Failed Invalid   Time   FailedType FailedMethod\n   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink\n```\n\n- Compiled ：编译成功数\n- Failed ： 编译失败数\n- Invalid ： 无效数量\n- FailedType ： 最后一次编译失效类型\n- FailedMethod ：最后一次编译失效的方法\n\n**jstat -gc：垃圾回收堆的行为统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gc 2284\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT\n104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221\n```\n\n+ S0C ： 第一个幸存区的总容量（KB）\n+ S1C ： 第二个幸存区的总容量（KB）\n+ S0U ： 第一个幸存区已使用的容量（KB）\n+ S1U ： 第二个幸存区已使用的容量（KB）\n+ EC ： 伊甸区的总容量（KB）\n+ EU ： 伊甸区已使用容量（KB）\n+ OC ： 老年区的总容量（KB）\n+ MC ： 元空间的总容量（KB）\n+ MU ： 元空间已使用容量（KB）\n+ CCSC ： 压缩类空间总容量（KB）\n+ CCSU ： 压缩类空间已使用总容量（KB）\n+ YGC ： 新生代GC次数\n+ YGCT ：新生代GC总耗费时间\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗费时间\n+ GCT ： GC总耗费时间\n\n**jstat -gccapacity ： 各个回收区内存情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gccapacity 2284\n NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC\n1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0\n59    11\n```\n\n+ NGCMN ： 新生代占用的最小空间大小（KB）\n+ NGCMX ： 新生代占用的最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1C ：第二幸存区当前空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ OGCMN ： 老年区最小空间大小（KB）\n+ OGCMX ： 老年区最大空间大小（KB）\n+ OGC ： 老年区当前空间大小（KB）\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小大小（KB）\n+ CCSMX ： 压缩类最大空间大小（KB）\n+ CCSC ： 压缩类当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**jstat -gccause ：垃圾收集统计概述**\n\n```shell\nC:\\Users\\Administrator>jstat -gccause 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC\n  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ LGCC ：最近一次GC原因\n+ GCC ： 当前GC原因\n\n**6 . gc -gcmetacapacity ：元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcmetacapacity 2284\n   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT\n       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221\n\n```\n\n+ MCMN ： 元空间最小空间大小（KB）\n+ MCMX ： 元空间最大空间大小（KB）\n+ MC ： 元空间当前空间大小（KB）\n+ CCSMN ： 压缩类空间最小空间大小（KB）\n+ CCSMX ： 压缩类空间最大空间大小（KB）\n+ CCSC ： 压缩类空间当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT： 老年代GC耗费时间\n+ GCT ： GC总耗费时间\n\n**7 . jstat -gcnew ： 显示新生代统计信息**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnew 2284\n S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT\n104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972\n```\n\n+ S0C ： 第一幸存区总空间大小（KB）\n+ S1C ： 第二幸存区总空间大小（KB）\n+ S0U ： 第一幸存区已使用空间大小（KB）\n+ S1U ： 第二幸存区已使用空间大小（KB）\n+ TT ： 提升阈值(提升阈值)\n+ MTT ： 最大阈值\n+ DSS ： survivor区域大小 (KB)\n+ EC ： 伊甸区总空间大小（KB）\n+ EU ： 伊甸区已使用空间大小（KB）\n\n**8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcnewcapacity 2284\n  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC\n 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11\n```\n\n+ NGCMN ： 新生代最小空间大小（KB）\n+ NGCMX ： 新生代最大空间大小（KB）\n+ NGC ： 当前新生代空间大小（KB）\n+ S0CMX ： 第一幸存区最大空间大小（KB）\n+ S0C ： 第一幸存区当前空间大小（KB）\n+ S1CMX ： 第二幸存区最大空间大小（KB）\n+ S1C ： 第二幸存区当前空间大小（KB）\n+ ECMX ： 伊甸区最大空间大小（KB）\n+ EC ： 伊甸区当前空间大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n\n**9 . jstat -gcold ： 统计老年代和元空间使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcold 2284\n   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT\n251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295\n```\n\n+ MC ： 元空间总大小（KB）\n+ MU ： 元空间已使用大小（KB）\n+ CCSC ： 压缩类空间总大小（KB）\n+ CCSU ： 压缩类空间已使用大小（KB）\n+ OC ： 老年区空间总大小（KB）\n+ OU ： 老年区已使用大小（KB）\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**10 . jstat -gcoldcapacity ： 统计老年代内存使用情况**\n\n```shell\nC:\\Users\\Administrator>jstat -gcoldcapacity 2284\n   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT\n  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295\n```\n\n+ OGCMN ：老年区占用最小空间（KB）\n+ OGCMX ： 老年区占用最大空间（KB）\n+ OGC ： 当前老年区空间（KB）\n+ OC ： 当前老年区空间（KB）\n+ YGC ：新生代GC次数\n+ FGC ： 老年代GC次数\n+ FGCT ： 老年代GC总耗时\n+ GCT ： GC总耗时\n\n**11 . jstat -gcutil ： 垃圾回收统计**\n\n```shell\nC:\\Users\\Administrator>jstat -gcutil 2284\n  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT\n 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295\n```\n\n+ S0 ：第一幸存区已使用空间百分比.\n+ S1 ： 第二幸存区已使用空间百分比\n+ E ： 伊甸区已使用空间百分比\n+ O ： 老年区已使用空间百分比\n+ M ： 元空间使用百分比\n+ CCS ： 压缩类空间使用百分比\n+ YGC ： 新生代GC次数\n+ FGC ： 老年代GC次数\n+ GCT ：GC总耗时\n\n**12 . jstat -printcompilation ： Hotspot方法编译统计情况**\n\n```shell\nC:\\Users\\Administrator>jstat -printcompilation 2284\nCompiled  Size  Type Method\n   21538    150    1 java/util/Collections reverse\n```\n\n+ Compiled ： 已编译方法次数\n+ Size ： 最近一次方法编译大小\n+ Type ： 最近一次编译方法类型\n+ Method ： 最近一次编译方法\n\n参考：\n\njstat：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\njstat命令使用：https://www.cnblogs.com/lizhonghua34/p/7307139.html\nJVM调优命令-jstat：https://www.cnblogs.com/myna/p/7567769.html\n\n---\n\n\n\n##\tjstack：查看某个Java进程内的线程堆栈信息\n\n参考原文：https://www.jianshu.com/p/8d5782bc596e\n\n查看JAVA进程当中，线程内容。\n\n**jstack用法**\n\n```kotlin\n/opt/java8/bin/jstack\n\nUsage:\n    jstack [-l] <pid>\n        (to connect to running process) 连接活动线程\n    jstack -F [-m] [-l] <pid>\n        (to connect to a hung process) 连接阻塞线程\n    jstack [-m] [-l] <executable> <core>\n        (to connect to a core file) 连接dump的文件\n    jstack [-m] [-l] [server_id@]<remote server IP or hostname>\n        (to connect to a remote debug server) 连接远程服务器\n\nOptions:\n    -F  to force a thread dump. Use when jstack <pid> does not respond (process is hung)\n    -m  to print both java and native frames (mixed mode)\n    -l  long listing. Prints additional information about locks\n    -h or -help to print this help message\n```\n\n**jstack查看输出**\n\n```bash\n/opt/java8/bin/jstack -l 28367\n\n2019-06-25 15:04:46\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):\n\n\"Attach Listener\" #453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n   Locked ownable synchronizers:\n        - None\n\n\"grpc-default-executor-263\" #452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000007400243f0> (a java.util.concurrent.SynchronousQueue$TransferStack)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:460)\n        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:362)\n        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n\n\"http-bio-8080-exec-10\" #235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x0000000743d26638> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)\n        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)\n        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\n\n   Locked ownable synchronizers:\n        - None\n```\n\n**jstack统计线程数**\n\n```bash\n/opt/java8/bin/jstack -l 28367 | grep 'java.lang.Thread.State' | wc -l\n```\n\n**jstack检测死锁**\n\n*死锁代码*\n\n```csharp\npublic class DeathLock {\n\n    private static Lock lock1 = new ReentrantLock();\n    private static Lock lock2 = new ReentrantLock();\n\n    public static void deathLock() {\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock1.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock2.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        Thread t2 = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock2.lock();\n                    TimeUnit.SECONDS.sleep(1);\n                    lock1.lock();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n\n        t1.setName(\"thread1\");\n        t2.setName(\"thread2\");\n        t1.start();\n        t2.start();\n    }\n\n    public static void main(String[] args) {\n        deathLock();\n    }\n}\n```\n\n*死锁日志*\n\n```bash\n\"mythread2\" #12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d640> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\"mythread1\" #11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\n   Locked ownable synchronizers:\n        - <0x00000000d602d610> (a java.util.concurrent.locks.ReentrantLock$Nonfa\nirSync)\n\n\nFound one Java-level deadlock:\n=============================\n\"mythread2\":\n  waiting for ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread1\"\n\"mythread1\":\n  waiting for ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l\nocks.ReentrantLock$NonfairSync),\n  which is held by \"mythread2\"\n\nJava stack information for the threads listed above:\n===================================================\n\"mythread2\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d610> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$2.run(DeathLock.java:34)\n\"mythread1\":\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000d602d640> (a java.util.concurrent.lock\ns.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt\nerrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A\nbstractQueuedSynchronizer.java:870)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac\ntQueuedSynchronizer.java:1199)\n        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLo\nck.java:209)\n        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)\n\n        at DeathLock$1.run(DeathLock.java:22)\n\nFound 1 deadlock.\n```\n\n**jstack检测cpu高**\n\n*步骤一：查看cpu占用高进程*\n\n```cpp\ntop\n\nMem:  16333644k total,  9472968k used,  6860676k free,   165616k buffers\nSwap:        0k total,        0k used,        0k free,  6665292k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     \n17850 root      20   0 7588m 112m  11m S 100.7  0.7  47:53.80 java       \n 1552 root      20   0  121m  13m 8524 S  0.7  0.1  14:37.75 AliYunDun   \n 3581 root      20   0 9750m 2.0g  13m S  0.7 12.9 298:30.20 java        \n    1 root      20   0 19360 1612 1308 S  0.0  0.0   0:00.81 init        \n    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd    \n    3 root      RT   0     0    0    0 S  0.0  0.0   0:00.14 migration/0 \n```\n\n*步骤二：查看cpu占用高线程*\n\n```css\ntop -H -p 17850\n\ntop - 17:43:15 up 5 days,  7:31,  1 user,  load average: 0.99, 0.97, 0.91\nTasks:  32 total,   1 running,  31 sleeping,   0 stopped,   0 zombie\nCpu(s):  3.7%us,  8.9%sy,  0.0%ni, 87.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st\nMem:  16333644k total,  9592504k used,  6741140k free,   165700k buffers\nSwap:        0k total,        0k used,        0k free,  6781620k cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n17880 root      20   0 7588m 112m  11m R 99.9  0.7  50:47.43 java\n17856 root      20   0 7588m 112m  11m S  0.3  0.7   0:02.08 java\n17850 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.00 java\n17851 root      20   0 7588m 112m  11m S  0.0  0.7   0:00.23 java\n17852 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.09 java\n17853 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.12 java\n17854 root      20   0 7588m 112m  11m S  0.0  0.7   0:02.07 java\n```\n\n*步骤三：转换线程ID*\n\n```bash\nprintf \"%x\\n\" 17880          \n45d8\n```\n\n*步骤四：定位cpu占用线程*\n\n```bash\njstack 17850|grep 45d8 -A 30\n\"pool-1-thread-11\" #20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]\n   java.lang.Thread.State: RUNNABLE\n        at java.io.FileOutputStream.writeBytes(Native Method)\n        at java.io.FileOutputStream.write(FileOutputStream.java:326)\n        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)\n        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)\n        - locked <0x00000006c6c2e708> (a java.io.BufferedOutputStream)\n        at java.io.PrintStream.write(PrintStream.java:482)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)\n        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)\n        - locked <0x00000006c6c26620> (a java.io.OutputStreamWriter)\n        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)\n        at java.io.PrintStream.write(PrintStream.java:527)\n        - eliminated <0x00000006c6c10178> (a java.io.PrintStream)\n        at java.io.PrintStream.print(PrintStream.java:597)\n        at java.io.PrintStream.println(PrintStream.java:736)\n        - locked <0x00000006c6c10178> (a java.io.PrintStream)\n        at com.demo.guava.HardTask.call(HardTask.java:18)\n        at com.demo.guava.HardTask.call(HardTask.java:9)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n\n\"pool-1-thread-10\" #19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000006c6c14178> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n```\n\n---\n\n\n\n## Jmap\n\n原文参考：https://www.jianshu.com/p/c52ffaca40a5\n\n> jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的`共享对象内存映射或堆内存细节`。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍`Java的堆Dump`以及jmap命令\n\n### 什么是堆Dump\n\n### 基础知识\n\n[Java虚拟机的内存组成以及堆内存介绍](链接地址)\n [Java GC工作原理](链接地址)\n\n常见内存错误：\n\n> outOfMemoryError 年老代内存不足。\n>  outOfMemoryError:PermGen Space 永久代内存不足。\n>  outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。\n\n**jmap 用法摘要**\n\n```bash\nUsage:\n    jmap [option] <pid>\n        (to connect to running process)\n    jmap [option] <executable <core>\n        (to connect to a core file)\n    jmap [option] [server_id@]<remote server IP or hostname>\n        (to connect to remote debug server)\n\nwhere <option> is one of:\n    <none>               to print same info as Solaris pmap\n    -heap                to print java heap summary\n    -histo[:live]        to print histogram of java object heap; if the \"live\"\n                         suboption is specified, only count live objects\n    -permstat            to print permanent generation statistics\n    -finalizerinfo       to print information on objects awaiting finalization\n    -dump:<dump-options> to dump java heap in hprof binary format\n                         dump-options:\n                           live         dump only live objects; if not specified,\n                                        all objects in the heap are dumped.\n                           format=b     binary format\n                           file=<file>  dump heap to <file>\n                         Example: jmap -dump:live,format=b,file=heap.bin <pid>\n    -F                   force. Use with -dump:<dump-options> <pid> or -histo\n                         to force a heap dump or histogram when <pid> does not\n                         respond. The \"live\" suboption is not supported\n                         in this mode.\n    -h | -help           to print this help message\n    -J<flag>             to pass <flag> directly to the runtime system\n```\n\n- 指定进程号(pid)的进程 jmap [ option ]\n- 指定核心文件 jmap [ option ]\n- 指定远程调试服务器 jmap [ option ] [server-id@]\n\n**参数：**\n\n- option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。\n- pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。\n- executable 产生核心dump的Java可执行文件。\n- core 需要打印配置信息的核心文件。\n- remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。\n- server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。\n\n**选项:**\n\n- <no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。\n- -dump:[live,]format=b,file=<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。\n- -finalizerinfo 打印等待终结的对象信息。\n- -heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。\n- -histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。\n- -permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。\n- -F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。\n- -h 打印帮助信息。\n- -help 打印帮助信息。\n- -J<flag> 指定传递给运行jmap的JVM的参数。\n\n**示例：**\n\n*查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846*\n\n```bash\nAttaching to process ID 31846, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 24.71-b01\n\nusing thread-local object allocation.\nParallel GC with 4 thread(s)//GC 方式\n\nHeap Configuration: //堆内存初始化配置\n   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)\n   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)\n   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小\n   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小\n   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小\n   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=<value>:设置JVM堆的‘老生代’的大小\n   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率\n   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 \n   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=<value>:设置JVM堆的‘永生代’的初始大小\n   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=<value>:设置JVM堆的‘永生代’的最大大小\n   G1HeapRegionSize = 0 (0.0MB)\n\nHeap Usage://堆内存使用情况\nPS Young Generation\nEden Space://Eden区内存分布\n   capacity = 33030144 (31.5MB)//Eden区总容量\n   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用\n   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量\n   4.614088270399305% used //Eden区使用比率\nFrom Space:  //其中一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nTo Space:  //另一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nPS Old Generation //当前的Old区内存分布\n   capacity = 86507520 (82.5MB)\n   used     = 0 (0.0MB)\n   free     = 86507520 (82.5MB)\n   0.0% used\nPS Perm Generation//当前的 “永生代” 内存分布\n   capacity = 22020096 (21.0MB)\n   used     = 2496528 (2.3808746337890625MB)\n   free     = 19523568 (18.619125366210938MB)\n   11.337498256138392% used\n\n670 interned Strings occupying 43720 bytes.\n```\n\n**查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331**\n\n```bash\nnum     #instances         #bytes  class name\n编号     个数                字节     类名\n----------------------------------------------\n   1:             7        1322080  [I\n   2:          5603         722368  <methodKlass>\n   3:          5603         641944  <constMethodKlass>\n   4:         34022         544352  java.lang.Integer\n   5:           371         437208  <constantPoolKlass>\n   6:           336         270624  <constantPoolCacheKlass>\n   7:           371         253816  <instanceKlassKlass>\n```\n\n**将内存使用的详细情况输出到文件，执行命令： jmap -dump:format=b,file=heapDump 6900**\n\n然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：http://localhost:5000/ 查看详细信息\n\n> 这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。\n\n### 总结\n\n1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。\n 2.要制作堆Dump可以直接使用jvm自带的jmap命令\n 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。\n 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。\n 5.也可以使用 jmap -dump:format=b,file=<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容\n 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。\n\n### 出现问题：\n\n1. Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process\n    在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can't attach to the process，这是oracla文档中提到的一个bug:http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：\n\n- echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope 该方法在下次重启前有效。\n- 永久有效方法 sudo vi /etc/sysctl.d/10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope = 1 修改为: kernel.yama.ptrace_scope = 0 重启系统，使修改生效。\n\n","slug":"JVM/5-JVM常用的命令","published":1,"date":"2020-05-14T14:36:15.000Z","updated":"2022-11-25T17:39:15.229Z","_id":"clawrzuaj0006u42bhq5l6t2b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM常用的命令\"><a href=\"#JVM常用的命令\" class=\"headerlink\" title=\"JVM常用的命令\"></a>JVM常用的命令</h1><h2 id=\"jps-：基础工具\"><a href=\"#jps-：基础工具\" class=\"headerlink\" title=\"jps ：基础工具\"></a>jps ：基础工具</h2><p>查看JAVA进程PID。</p>\n<p><code>jps</code> 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。</p>\n<p><code>jps</code> 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 <code>ps</code> 命令。</p>\n<p><strong>jps 常用参数</strong></p>\n<ul>\n<li><code>jps -l</code> 如果是以 class 方式运行，会显示进程的主类 <code>main.class</code> 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名</li>\n</ul>\n<p>第一列的数字就是进程的 <code>pid</code></p>\n<ul>\n<li><code>jps -v</code> 输出传递给 JVM 的参数，<code>v</code> 表示虚拟机，<code>jps -vl</code> 比较常见的组合；</li>\n<li><code>jps -V</code> 大写 <code>v</code>，表示通过文件传递给 JVM 的参数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Copy# michael @ Michael-MBP in ~ [<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">37</span>:<span class=\"hljs-number\">59</span>]<br>$ jps -v |grep Mybatis<br><span class=\"hljs-number\">8005</span> MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">53364</span>,suspend=y,server=n -XX:TieredStopAtLevel=<span class=\"hljs-number\">1</span> -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=<span class=\"hljs-number\">53363</span> -Dcom.sun.management.jmxremote.authenticate=<span class=\"hljs-literal\">false</span> -Dcom.sun.management.jmxremote.ssl=<span class=\"hljs-literal\">false</span> -Djava.rmi.server.hostname=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=<span class=\"hljs-literal\">true</span> -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018<span class=\"hljs-number\">.2</span>/captureAgent/debugger-agent.jar=file:/<span class=\"hljs-keyword\">private</span>/<span class=\"hljs-keyword\">var</span>/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-<span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>jps -m</code> 输出传递给 <code>main.class</code> 方法的参数，实用的一个命令，<code>jps -ml</code> 比较实用的组合，会显示包名&#x2F;类名&#x2F;参数</li>\n<li><code>jps -q</code> 只输出进程的 pid</li>\n</ul>\n<p>jps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。</p>\n<p>有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 <code>jps -v</code> 查看进程的jvm参数情况。</p>\n<hr>\n<h2 id=\"jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\"><a href=\"#jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\" class=\"headerlink\" title=\"jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\"></a>jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、</h2><p>参考原文：<a href=\"https://blog.csdn.net/yx0628/article/details/80958488\">https://blog.csdn.net/yx0628/article/details/80958488</a></p>\n<p><code>jinfo -flag initilHeapSize $&#123;PID&#125; </code>查看某个<strong>JAVA进程</strong>中，JVM的参数值是什么。</p>\n<p><code>jinfo -flag $&#123;PID&#125; </code> 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo --help<br>Usage:<br>    jinfo [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jinfo [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br>where &lt;option&gt; is one of:<br>    -flag &lt;name&gt;         to print the value of the named VM flag<br>    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag<br>    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value<br>    -flags               to print VM flags<br>    -sysprops            to print Java system properties<br>    &lt;no option&gt;          to print both of the above<br>    -h | -help           to print this help message<br></code></pre></td></tr></table></figure>\n\n<p>我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jps<br>43520 Test<br>35900 Jps<br></code></pre></td></tr></table></figure>\n\n<p>查看 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flags 43520<br>Attaching to process ID 43520, please wait...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.45-b08<br><br>-Dfile.encoding=GBK<br></code></pre></td></tr></table></figure>\n\n<p>查看系统参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -sysflags 43520<br></code></pre></td></tr></table></figure>\n\n<p>虚拟机的参数可以通过这个命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintFlagsFinal -version | grep manageable<br></code></pre></td></tr></table></figure>\n\n<p>除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag +PrintGC 43520<br>jinfo -flag +PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>关闭 GC 日志的话同理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag -PrintGC 43520<br>jinfo -flag -PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>查看是否开启 GC 日志的打印：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag PrintGC 43520<br>jinfo -flag PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flag PrintGC 43520<br>-XX:-PrintGC<br><br>[root@admin ~]# jinfo -flag PrintGCDetails 43520<br>-XX:-PrintGCDetails<br></code></pre></td></tr></table></figure>\n\n<p>常用 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-Xms：初始堆大小，默认为物理内存的1/64(&lt;1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制<br>-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制<br>-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。<br>-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。<br>-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:&quot;-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。<br>-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。<br>-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\"><a href=\"#jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\" class=\"headerlink\" title=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\"></a>jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控</h2><p>原文参考：<a href=\"https://blog.csdn.net/cockroach02/article/details/82670500\">https://blog.csdn.net/cockroach02/article/details/82670500</a></p>\n<p>查看JVM中相关性能的信息。</p>\n<p>jstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java&#x2F;bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。</p>\n<blockquote>\n<p>类装载信息：<code>jstat -class $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -class $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -class $&#123;PID&#125; 1000 10</code>。打印出过去10秒类加载的数据。</p>\n</blockquote>\n<blockquote>\n<p>GC相关的情况：<code>jstat -gc $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -gc $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -gc $&#123;PID&#125; 1000 10</code>。打印出过去10秒GC的数据。</p>\n</blockquote>\n<p><strong>参数说明：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -help<br>Usage: jstat -help|-options<br>       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br><br>Definitions:<br>  &lt;option&gt;      An option reported by the -options option<br>  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:<br>                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]<br>                Where &lt;lvmid&gt; is the local vm identifier for the target<br>                Java virtual machine, typically a process id; &lt;hostname&gt; is<br>                the name of the host running the target Java virtual machine;<br>                and &lt;port&gt; is the port number for the rmiregistry on the<br>                target host. See the jvmstat documentation for a more complete<br>                description of the Virtual Machine Identifier.<br>  &lt;lines&gt;       Number of samples between header lines.<br>  &lt;interval&gt;    Sampling interval. The following forms are allowed:<br>                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]<br>                Where &lt;n&gt; is an integer and the suffix specifies the units as<br>                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.<br>  &lt;count&gt;       Number of samples to take before terminating.<br>  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.<br></code></pre></td></tr></table></figure>\n\n<p>由以上可知，jstat的命令的格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br></code></pre></td></tr></table></figure>\n\n<p>我们可以通过jstat -options查看可以支持的具体参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -options<br>-class<br>-compiler<br>-gc<br>-gccapacity<br>-gccause<br>-gcmetacapacity<br>-gcnew<br>-gcnewcapacity<br>-gcold<br>-gcoldcapacity<br>-gcutil<br>-printcompilation<br></code></pre></td></tr></table></figure>\n\n<p><strong>Option参数说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-class</td>\n<td align=\"center\">类加载的行为统计 Displays statistics about the behavior of the class loader.</td>\n</tr>\n<tr>\n<td align=\"center\">-compiler</td>\n<td align=\"center\">HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler.</td>\n</tr>\n<tr>\n<td align=\"center\">-gc</td>\n<td align=\"center\">垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccapacity</td>\n<td align=\"center\">各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccause</td>\n<td align=\"center\">垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcmetacapacity</td>\n<td align=\"center\">统计元空间使用情况 Displays statistics about the sizes of the metaspace.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnew</td>\n<td align=\"center\">显示新生代统计信息 Displays statistics of the behavior of the new generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnewcapacity</td>\n<td align=\"center\">统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcold</td>\n<td align=\"center\">统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcoldcapacity</td>\n<td align=\"center\">统计老年代内存使用情况 Displays statistics about the sizes of the old generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcutil</td>\n<td align=\"center\">显示各个各代内存使用百分比 Displays a summary about garbage collection statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-printcompilation</td>\n<td align=\"center\">Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics.</td>\n</tr>\n</tbody></table>\n<p><strong>使用示例：</strong></p>\n<p><strong>jstat -class ： 类加载的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -class 2284<br>Loaded  Bytes  Unloaded  Bytes     Time<br> 30116 75021.8       26    51.4      86.72<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Loaded ：加载class的数量</li>\n<li>Bytes ： 加载class的大小（单位KB）</li>\n<li>Unloaded ：卸载class的数量</li>\n<li>Bytes： 卸载class的大小（单位KB）</li>\n<li>Time ： 加载和卸载class所耗费的时间</li>\n</ul>\n<p><strong>jstat -compiler ：HotSpt JIT编译器行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -compiler 2284<br>Compiled Failed Invalid   Time   FailedType FailedMethod<br>   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ：编译成功数</li>\n<li>Failed ： 编译失败数</li>\n<li>Invalid ： 无效数量</li>\n<li>FailedType ： 最后一次编译失效类型</li>\n<li>FailedMethod ：最后一次编译失效的方法</li>\n</ul>\n<p><strong>jstat -gc：垃圾回收堆的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gc 2284<br> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br>104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一个幸存区的总容量（KB）</li>\n<li>S1C ： 第二个幸存区的总容量（KB）</li>\n<li>S0U ： 第一个幸存区已使用的容量（KB）</li>\n<li>S1U ： 第二个幸存区已使用的容量（KB）</li>\n<li>EC ： 伊甸区的总容量（KB）</li>\n<li>EU ： 伊甸区已使用容量（KB）</li>\n<li>OC ： 老年区的总容量（KB）</li>\n<li>MC ： 元空间的总容量（KB）</li>\n<li>MU ： 元空间已使用容量（KB）</li>\n<li>CCSC ： 压缩类空间总容量（KB）</li>\n<li>CCSU ： 压缩类空间已使用总容量（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>YGCT ：新生代GC总耗费时间</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>jstat -gccapacity ： 各个回收区内存情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccapacity 2284<br> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC<br>1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0<br>59    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代占用的最小空间大小（KB）</li>\n<li>NGCMX ： 新生代占用的最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1C ：第二幸存区当前空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>OGCMN ： 老年区最小空间大小（KB）</li>\n<li>OGCMX ： 老年区最大空间大小（KB）</li>\n<li>OGC ： 老年区当前空间大小（KB）</li>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小大小（KB）</li>\n<li>CCSMX ： 压缩类最大空间大小（KB）</li>\n<li>CCSC ： 压缩类当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>jstat -gccause ：垃圾收集统计概述</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccause 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC<br>  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>LGCC ：最近一次GC原因</li>\n<li>GCC ： 当前GC原因</li>\n</ul>\n<p><strong>6 . gc -gcmetacapacity ：元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcmetacapacity 2284<br>   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT<br>       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小空间大小（KB）</li>\n<li>CCSMX ： 压缩类空间最大空间大小（KB）</li>\n<li>CCSC ： 压缩类空间当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT： 老年代GC耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>7 . jstat -gcnew ： 显示新生代统计信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnew 2284<br> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT<br>104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一幸存区总空间大小（KB）</li>\n<li>S1C ： 第二幸存区总空间大小（KB）</li>\n<li>S0U ： 第一幸存区已使用空间大小（KB）</li>\n<li>S1U ： 第二幸存区已使用空间大小（KB）</li>\n<li>TT ： 提升阈值(提升阈值)</li>\n<li>MTT ： 最大阈值</li>\n<li>DSS ： survivor区域大小 (KB)</li>\n<li>EC ： 伊甸区总空间大小（KB）</li>\n<li>EU ： 伊甸区已使用空间大小（KB）</li>\n</ul>\n<p><strong>8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnewcapacity 2284<br>  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC<br> 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代最小空间大小（KB）</li>\n<li>NGCMX ： 新生代最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0CMX ： 第一幸存区最大空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1CMX ： 第二幸存区最大空间大小（KB）</li>\n<li>S1C ： 第二幸存区当前空间大小（KB）</li>\n<li>ECMX ： 伊甸区最大空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>9 . jstat -gcold ： 统计老年代和元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcold 2284<br>   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT<br>251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MC ： 元空间总大小（KB）</li>\n<li>MU ： 元空间已使用大小（KB）</li>\n<li>CCSC ： 压缩类空间总大小（KB）</li>\n<li>CCSU ： 压缩类空间已使用大小（KB）</li>\n<li>OC ： 老年区空间总大小（KB）</li>\n<li>OU ： 老年区已使用大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>10 . jstat -gcoldcapacity ： 统计老年代内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcoldcapacity 2284<br>   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT<br>  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OGCMN ：老年区占用最小空间（KB）</li>\n<li>OGCMX ： 老年区占用最大空间（KB）</li>\n<li>OGC ： 当前老年区空间（KB）</li>\n<li>OC ： 当前老年区空间（KB）</li>\n<li>YGC ：新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>11 . jstat -gcutil ： 垃圾回收统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcutil 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT<br> 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>GCT ：GC总耗时</li>\n</ul>\n<p><strong>12 . jstat -printcompilation ： Hotspot方法编译统计情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -printcompilation 2284<br>Compiled  Size  Type Method<br>   21538    150    1 java/util/Collections reverse<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ： 已编译方法次数</li>\n<li>Size ： 最近一次方法编译大小</li>\n<li>Type ： 最近一次编译方法类型</li>\n<li>Method ： 最近一次编译方法</li>\n</ul>\n<p>参考：</p>\n<p>jstat：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html</a><br>jstat命令使用：<a href=\"https://www.cnblogs.com/lizhonghua34/p/7307139.html\">https://www.cnblogs.com/lizhonghua34/p/7307139.html</a><br>JVM调优命令-jstat：<a href=\"https://www.cnblogs.com/myna/p/7567769.html\">https://www.cnblogs.com/myna/p/7567769.html</a></p>\n<hr>\n<h2 id=\"jstack：查看某个Java进程内的线程堆栈信息\"><a href=\"#jstack：查看某个Java进程内的线程堆栈信息\" class=\"headerlink\" title=\"jstack：查看某个Java进程内的线程堆栈信息\"></a>jstack：查看某个Java进程内的线程堆栈信息</h2><p>参考原文：<a href=\"https://www.jianshu.com/p/8d5782bc596e\">https://www.jianshu.com/p/8d5782bc596e</a></p>\n<p>查看JAVA进程当中，线程内容。</p>\n<p><strong>jstack用法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">/opt/java8/bin/jstack<br><br>Usage:<br>    jstack [-l] &lt;pid&gt;<br>        (to connect to running process) 连接活动线程<br>    jstack -F [-m] [-l] &lt;pid&gt;<br>        (to connect to a hung process) 连接阻塞线程<br>    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;<br>        (to connect to a core file) 连接dump的文件<br>    jstack [-m] [-l] [<span class=\"hljs-symbol\">server_id@</span>]&lt;remote server IP or hostname&gt;<br>        (to connect to a remote debug server) 连接远程服务器<br><br>Options:<br>    -F  to force a thread dump. Use <span class=\"hljs-keyword\">when</span> jstack &lt;pid&gt; does not respond (process <span class=\"hljs-keyword\">is</span> hung)<br>    -m  to print both java and native frames (mixed mode)<br>    -l  long listing. Prints additional information about locks<br>    -h or -help to print <span class=\"hljs-keyword\">this</span> help message<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack查看输出</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367<br><br>2019-06-25 15:04:46<br>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):<br><br><span class=\"hljs-string\">&quot;Attach Listener&quot;</span> <span class=\"hljs-comment\">#453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]</span><br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;grpc-default-executor-263&quot;</span> <span class=\"hljs-comment\">#452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]</span><br>   java.lang.Thread.State: TIMED_WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000007400243f0&gt; (a java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>)<br>        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.awaitFulfill(SynchronousQueue.java:460)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.transfer(SynchronousQueue.java:362)<br>        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;http-bio-8080-exec-10&quot;</span> <span class=\"hljs-comment\">#235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x0000000743d26638&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)<br>        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at org.apache.tomcat.util.threads.TaskThread<span class=\"hljs-variable\">$WrappingRunnable</span>.run(TaskThread.java:61)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack统计线程数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367 | grep <span class=\"hljs-string\">&#x27;java.lang.Thread.State&#x27;</span> | <span class=\"hljs-built_in\">wc</span> -l<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测死锁</strong></p>\n<p><em>死锁代码</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeathLock</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock1 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock2 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deathLock</span>()</span> &#123;<br>        Thread t1 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread t2 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        t1.setName(<span class=\"hljs-string\">&quot;thread1&quot;</span>);<br>        t2.setName(<span class=\"hljs-string\">&quot;thread2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span> &#123;<br>        deathLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>死锁日志</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;mythread2&quot;</span> <span class=\"hljs-comment\">#12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d640&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><span class=\"hljs-string\">&quot;mythread1&quot;</span> <span class=\"hljs-comment\">#11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d610&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><br>Found one Java-level deadlock:<br>=============================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread1&quot;</span><br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread2&quot;</span><br><br>Java stack information <span class=\"hljs-keyword\">for</span> the threads listed above:<br>===================================================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>Found 1 deadlock.<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测cpu高</strong></p>\n<p><em>步骤一：查看cpu占用高进程</em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">top<br><br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9472968</span>k used,  <span class=\"hljs-number\">6860676</span>k free,   <span class=\"hljs-number\">165616</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6665292</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     <br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S <span class=\"hljs-number\">100.7</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">47</span>:<span class=\"hljs-number\">53.80</span> java       <br> <span class=\"hljs-number\">1552</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">121</span>m  <span class=\"hljs-number\">13</span>m <span class=\"hljs-number\">8524</span> S  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">0.1</span>  <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">37.75</span> AliYunDun   <br> <span class=\"hljs-number\">3581</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">9750</span>m <span class=\"hljs-number\">2.0</span>g  <span class=\"hljs-number\">13</span>m S  <span class=\"hljs-number\">0.7</span> <span class=\"hljs-number\">12.9</span> <span class=\"hljs-number\">298</span>:<span class=\"hljs-number\">30.20</span> java        <br>    <span class=\"hljs-number\">1</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">19360</span> <span class=\"hljs-number\">1612</span> <span class=\"hljs-number\">1308</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.81</span> init        <br>    <span class=\"hljs-number\">2</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> kthreadd    <br>    <span class=\"hljs-number\">3</span> root      RT   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.14</span> migration/<span class=\"hljs-number\">0</span> <br></code></pre></td></tr></table></figure>\n\n<p><em>步骤二：查看cpu占用高线程</em></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">top</span> -H -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">17850</span><br><br><span class=\"hljs-attribute\">top</span> - <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">43</span>:<span class=\"hljs-number\">15</span> up <span class=\"hljs-number\">5</span> days,  <span class=\"hljs-number\">7</span>:<span class=\"hljs-number\">31</span>,  <span class=\"hljs-number\">1</span> user,  load average: <span class=\"hljs-number\">0.99</span>, <span class=\"hljs-number\">0.97</span>, <span class=\"hljs-number\">0.91</span><br>Tasks:  <span class=\"hljs-number\">32</span> total,   <span class=\"hljs-number\">1</span> running,  <span class=\"hljs-number\">31</span> sleeping,   <span class=\"hljs-number\">0</span> stopped,   <span class=\"hljs-number\">0</span> zombie<br><span class=\"hljs-built_in\">Cpu</span>(s):  <span class=\"hljs-number\">3.7%</span>us,  <span class=\"hljs-number\">8.9%</span>sy,  <span class=\"hljs-number\">0.0%</span>ni, <span class=\"hljs-number\">87.4%</span>id,  <span class=\"hljs-number\">0.0%</span>wa,  <span class=\"hljs-number\">0.0%</span>hi,  <span class=\"hljs-number\">0.0%</span>si,  <span class=\"hljs-number\">0.0%</span>st<br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9592504</span>k used,  <span class=\"hljs-number\">6741140</span>k free,   <span class=\"hljs-number\">165700</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6781620</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br><span class=\"hljs-number\">17880</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m R <span class=\"hljs-number\">99.9</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">47.43</span> java<br><span class=\"hljs-number\">17856</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.3</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.08</span> java<br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> java<br><span class=\"hljs-number\">17851</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.23</span> java<br><span class=\"hljs-number\">17852</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.09</span> java<br><span class=\"hljs-number\">17853</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.12</span> java<br><span class=\"hljs-number\">17854</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.07</span> java<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤三：转换线程ID</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">&quot;%x\\n&quot;</span> 17880          <br>45d8<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤四：定位cpu占用线程</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">jstack 17850|grep 45d8 -A 30<br><span class=\"hljs-string\">&quot;pool-1-thread-11&quot;</span> <span class=\"hljs-comment\">#20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]</span><br>   java.lang.Thread.State: RUNNABLE<br>        at java.io.FileOutputStream.writeBytes(Native Method)<br>        at java.io.FileOutputStream.write(FileOutputStream.java:326)<br>        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)<br>        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)<br>        - locked &lt;0x00000006c6c2e708&gt; (a java.io.BufferedOutputStream)<br>        at java.io.PrintStream.write(PrintStream.java:482)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)<br>        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)<br>        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)<br>        - locked &lt;0x00000006c6c26620&gt; (a java.io.OutputStreamWriter)<br>        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)<br>        at java.io.PrintStream.write(PrintStream.java:527)<br>        - eliminated &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at java.io.PrintStream.<span class=\"hljs-built_in\">print</span>(PrintStream.java:597)<br>        at java.io.PrintStream.println(PrintStream.java:736)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at com.demo.guava.HardTask.call(HardTask.java:18)<br>        at com.demo.guava.HardTask.call(HardTask.java:9)<br>        at java.util.concurrent.FutureTask.run(FutureTask.java:266)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br><span class=\"hljs-string\">&quot;pool-1-thread-10&quot;</span> <span class=\"hljs-comment\">#19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000006c6c14178&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Jmap\"><a href=\"#Jmap\" class=\"headerlink\" title=\"Jmap\"></a>Jmap</h2><p>原文参考：<a href=\"https://www.jianshu.com/p/c52ffaca40a5\">https://www.jianshu.com/p/c52ffaca40a5</a></p>\n<blockquote>\n<p>jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的<code>共享对象内存映射或堆内存细节</code>。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍<code>Java的堆Dump</code>以及jmap命令</p>\n</blockquote>\n<h3 id=\"什么是堆Dump\"><a href=\"#什么是堆Dump\" class=\"headerlink\" title=\"什么是堆Dump\"></a>什么是堆Dump</h3><h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p><a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java虚拟机的内存组成以及堆内存介绍</a><br> <a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java GC工作原理</a></p>\n<p>常见内存错误：</p>\n<blockquote>\n<p>outOfMemoryError 年老代内存不足。<br> outOfMemoryError:PermGen Space 永久代内存不足。<br> outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。</p>\n</blockquote>\n<p><strong>jmap 用法摘要</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Usage:<br>    jmap [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jmap [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br><span class=\"hljs-built_in\">where</span> &lt;option&gt; is one of:<br>    &lt;none&gt;               to <span class=\"hljs-built_in\">print</span> same info as Solaris pmap<br>    -heap                to <span class=\"hljs-built_in\">print</span> java heap summary<br>    -histo[:live]        to <span class=\"hljs-built_in\">print</span> histogram of java object heap; <span class=\"hljs-keyword\">if</span> the <span class=\"hljs-string\">&quot;live&quot;</span><br>                         suboption is specified, only count live objects<br>    -permstat            to <span class=\"hljs-built_in\">print</span> permanent generation statistics<br>    -finalizerinfo       to <span class=\"hljs-built_in\">print</span> information on objects awaiting finalization<br>    -dump:&lt;dump-options&gt; to dump java heap <span class=\"hljs-keyword\">in</span> hprof binary format<br>                         dump-options:<br>                           live         dump only live objects; <span class=\"hljs-keyword\">if</span> not specified,<br>                                        all objects <span class=\"hljs-keyword\">in</span> the heap are dumped.<br>                           format=b     binary format<br>                           file=&lt;file&gt;  dump heap to &lt;file&gt;<br>                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;<br>    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo<br>                         to force a heap dump or histogram when &lt;pid&gt; does not<br>                         respond. The <span class=\"hljs-string\">&quot;live&quot;</span> suboption is not supported<br>                         <span class=\"hljs-keyword\">in</span> this mode.<br>    -h | -<span class=\"hljs-built_in\">help</span>           to <span class=\"hljs-built_in\">print</span> this <span class=\"hljs-built_in\">help</span> message<br>    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>指定进程号(pid)的进程 jmap [ option ]</li>\n<li>指定核心文件 jmap [ option ]</li>\n<li>指定远程调试服务器 jmap [ option ] [server-id@]</li>\n</ul>\n<p><strong>参数：</strong></p>\n<ul>\n<li>option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</li>\n<li>pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</li>\n<li>executable 产生核心dump的Java可执行文件。</li>\n<li>core 需要打印配置信息的核心文件。</li>\n<li>remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。</li>\n<li>server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</li>\n</ul>\n<p><strong>选项:</strong></p>\n<ul>\n<li><no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。</li>\n<li>-dump:[live,]format&#x3D;b,file&#x3D;<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。</li>\n<li>-finalizerinfo 打印等待终结的对象信息。</li>\n<li>-heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。</li>\n<li>-histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。</li>\n<li>-permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</li>\n<li>-F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。</li>\n<li>-h 打印帮助信息。</li>\n<li>-help 打印帮助信息。</li>\n<li>-J<flag> 指定传递给运行jmap的JVM的参数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p><em>查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Attaching to process ID 31846, please <span class=\"hljs-built_in\">wait</span>...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.71-b01<br><br>using thread-local object allocation.<br>Parallel GC with 4 thread(s)//GC 方式<br><br>Heap Configuration: //堆内存初始化配置<br>   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)<br>   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)<br>   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小<br>   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小<br>   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小<br>   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小<br>   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率<br>   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 <br>   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小<br>   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小<br>   G1HeapRegionSize = 0 (0.0MB)<br><br>Heap Usage://堆内存使用情况<br>PS Young Generation<br>Eden Space://Eden区内存分布<br>   capacity = 33030144 (31.5MB)//Eden区总容量<br>   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用<br>   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量<br>   4.614088270399305% used //Eden区使用比率<br>From Space:  //其中一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>To Space:  //另一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>PS Old Generation //当前的Old区内存分布<br>   capacity = 86507520 (82.5MB)<br>   used     = 0 (0.0MB)<br>   free     = 86507520 (82.5MB)<br>   0.0% used<br>PS Perm Generation//当前的 “永生代” 内存分布<br>   capacity = 22020096 (21.0MB)<br>   used     = 2496528 (2.3808746337890625MB)<br>   free     = 19523568 (18.619125366210938MB)<br>   11.337498256138392% used<br><br>670 interned Strings occupying 43720 bytes.<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">num     <span class=\"hljs-comment\">#instances         #bytes  class name</span><br>编号     个数                字节     类名<br>----------------------------------------------<br>   1:             7        1322080  [I<br>   2:          5603         722368  &lt;methodKlass&gt;<br>   3:          5603         641944  &lt;constMethodKlass&gt;<br>   4:         34022         544352  java.lang.Integer<br>   5:           371         437208  &lt;constantPoolKlass&gt;<br>   6:           336         270624  &lt;constantPoolCacheKlass&gt;<br>   7:           371         253816  &lt;instanceKlassKlass&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>将内存使用的详细情况输出到文件，执行命令： jmap -dump:format&#x3D;b,file&#x3D;heapDump 6900</strong></p>\n<p>然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：<a href=\"http://localhost:5000/\">http://localhost:5000/</a> 查看详细信息</p>\n<blockquote>\n<p>这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。<br> 2.要制作堆Dump可以直接使用jvm自带的jmap命令<br> 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。<br> 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。<br> 5.也可以使用 jmap -dump:format&#x3D;b,file&#x3D;<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容<br> 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。</p>\n<h3 id=\"出现问题：\"><a href=\"#出现问题：\" class=\"headerlink\" title=\"出现问题：\"></a>出现问题：</h3><ol>\n<li>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process<br> 在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process，这是oracla文档中提到的一个bug:<a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：</a></li>\n</ol>\n<ul>\n<li>echo 0 | sudo tee &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;yama&#x2F;ptrace_scope 该方法在下次重启前有效。</li>\n<li>永久有效方法 sudo vi &#x2F;etc&#x2F;sysctl.d&#x2F;10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope &#x3D; 1 修改为: kernel.yama.ptrace_scope &#x3D; 0 重启系统，使修改生效。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM常用的命令\"><a href=\"#JVM常用的命令\" class=\"headerlink\" title=\"JVM常用的命令\"></a>JVM常用的命令</h1><h2 id=\"jps-：基础工具\"><a href=\"#jps-：基础工具\" class=\"headerlink\" title=\"jps ：基础工具\"></a>jps ：基础工具</h2><p>查看JAVA进程PID。</p>\n<p><code>jps</code> 命令用来查看所有 Java 进程，每一行就是一个 Java 进程信息。</p>\n<p><code>jps</code> 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程，要显示其他用户的还只能用 <code>ps</code> 命令。</p>\n<p><strong>jps 常用参数</strong></p>\n<ul>\n<li><code>jps -l</code> 如果是以 class 方式运行，会显示进程的主类 <code>main.class</code> 的全名，如果是以 jar 包方式运行的，就会输出 jar 包的完整路径名</li>\n</ul>\n<p>第一列的数字就是进程的 <code>pid</code></p>\n<ul>\n<li><code>jps -v</code> 输出传递给 JVM 的参数，<code>v</code> 表示虚拟机，<code>jps -vl</code> 比较常见的组合；</li>\n<li><code>jps -V</code> 大写 <code>v</code>，表示通过文件传递给 JVM 的参数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Copy# michael @ Michael-MBP in ~ [<span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">37</span>:<span class=\"hljs-number\">59</span>]<br>$ jps -v |grep Mybatis<br><span class=\"hljs-number\">8005</span> MybatisDemoApplication -agentlib:jdwp=transport=dt_socket,address=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">53364</span>,suspend=y,server=n -XX:TieredStopAtLevel=<span class=\"hljs-number\">1</span> -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=<span class=\"hljs-number\">53363</span> -Dcom.sun.management.jmxremote.authenticate=<span class=\"hljs-literal\">false</span> -Dcom.sun.management.jmxremote.ssl=<span class=\"hljs-literal\">false</span> -Djava.rmi.server.hostname=<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=<span class=\"hljs-literal\">true</span> -javaagent:/Users/michael/Library/Caches/IntelliJIdea2018<span class=\"hljs-number\">.2</span>/captureAgent/debugger-agent.jar=file:/<span class=\"hljs-keyword\">private</span>/<span class=\"hljs-keyword\">var</span>/folders/m1/ydypchs901lffc5sms07mrp40000gn/T/capture.props -Dfile.encoding=UTF-<span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><code>jps -m</code> 输出传递给 <code>main.class</code> 方法的参数，实用的一个命令，<code>jps -ml</code> 比较实用的组合，会显示包名&#x2F;类名&#x2F;参数</li>\n<li><code>jps -q</code> 只输出进程的 pid</li>\n</ul>\n<p>jps 是比较常用的 Java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果运行了一个 web 应用（使用tomcat、jboss、jetty等启动）的时候，就可以使用 jps 查看启动情况。</p>\n<p>有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些javaagent，那么我可以使用 <code>jps -v</code> 查看进程的jvm参数情况。</p>\n<hr>\n<h2 id=\"jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\"><a href=\"#jinfo：命令可以用来查看-Java-进程运行的-JVM-参数、\" class=\"headerlink\" title=\"jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、\"></a>jinfo：命令可以用来查看 Java 进程运行的 JVM 参数、</h2><p>参考原文：<a href=\"https://blog.csdn.net/yx0628/article/details/80958488\">https://blog.csdn.net/yx0628/article/details/80958488</a></p>\n<p><code>jinfo -flag initilHeapSize $&#123;PID&#125; </code>查看某个<strong>JAVA进程</strong>中，JVM的参数值是什么。</p>\n<p><code>jinfo -flag $&#123;PID&#125; </code> 如果不加JVM参数的话，默认查看JVM中所有被修改过的值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo --help<br>Usage:<br>    jinfo [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jinfo [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br>where &lt;option&gt; is one of:<br>    -flag &lt;name&gt;         to print the value of the named VM flag<br>    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag<br>    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value<br>    -flags               to print VM flags<br>    -sysprops            to print Java system properties<br>    &lt;no option&gt;          to print both of the above<br>    -h | -help           to print this help message<br></code></pre></td></tr></table></figure>\n\n<p>我们先用 jps 命令查到 PID ，然后可以通过 jinfo 来查看对应进程的参数信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jps<br>43520 Test<br>35900 Jps<br></code></pre></td></tr></table></figure>\n\n<p>查看 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flags 43520<br>Attaching to process ID 43520, please wait...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.45-b08<br><br>-Dfile.encoding=GBK<br></code></pre></td></tr></table></figure>\n\n<p>查看系统参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -sysflags 43520<br></code></pre></td></tr></table></figure>\n\n<p>虚拟机的参数可以通过这个命令查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintFlagsFinal -version | grep manageable<br></code></pre></td></tr></table></figure>\n\n<p>除了通过启动脚本可以设置参数，PrintGC 默认是打开的，因此我们只需要打开 PrintGCDetails 参数。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag +PrintGC 43520<br>jinfo -flag +PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>关闭 GC 日志的话同理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag -PrintGC 43520<br>jinfo -flag -PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<p>查看是否开启 GC 日志的打印：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jinfo -flag PrintGC 43520<br>jinfo -flag PrintGCDetails 43520<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@admin ~]# jinfo -flag PrintGC 43520<br>-XX:-PrintGC<br><br>[root@admin ~]# jinfo -flag PrintGCDetails 43520<br>-XX:-PrintGCDetails<br></code></pre></td></tr></table></figure>\n\n<p>常用 JVM 参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-Xms：初始堆大小，默认为物理内存的1/64(&lt;1GB)；默认(MinHeapFreeRatio参数可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制<br>-Xmx：最大堆大小，默认(MaxHeapFreeRatio参数可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制<br>-Xmn：新生代的内存空间大小，注意：此处的大小是（eden+ 2 survivor space)。与jmap -heap中显示的New gen是不同的。整个堆大小=新生代大小 + 老生代大小 + 永久代大小。在保证堆大小不变的情况下，增大新生代后,将会减小老生代大小。此值对系统性能影响较大,Sun官方推荐配置为整个堆的3/8。<br>-XX:SurvivorRatio：新生代中Eden区域与Survivor区域的容量比值，默认值为8。两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10。<br>-Xss：每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K。应根据应用的线程所需内存大小进行适当调整。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。一般小的应用， 如果栈不是很深， 应该是128k够用的，大的应用建议使用256k。这个选项对性能影响比较大，需要严格的测试。和threadstacksize选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:&quot;-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了。<br>-XX:PermSize：设置永久代(perm gen)初始值。默认值为物理内存的1/64。<br>-XX:MaxPermSize：设置持久代最大值。物理内存的1/4。<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\"><a href=\"#jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap-size和垃圾回收状况的监控\" class=\"headerlink\" title=\"jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控\"></a>jstat：主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控</h2><p>原文参考：<a href=\"https://blog.csdn.net/cockroach02/article/details/82670500\">https://blog.csdn.net/cockroach02/article/details/82670500</a></p>\n<p>查看JVM中相关性能的信息。</p>\n<p>jstat（Java Virtual Machine Statistics Monitoring Tool）是从JDK1.5自带的一个轻量级小工具。它位于java&#x2F;bin目录下，主要利用JVM内建的指令对Java虚拟机的资源和性能进行实时的监控。</p>\n<blockquote>\n<p>类装载信息：<code>jstat -class $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -class $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -class $&#123;PID&#125; 1000 10</code>。打印出过去10秒类加载的数据。</p>\n</blockquote>\n<blockquote>\n<p>GC相关的情况：<code>jstat -gc $&#123;PID&#125;</code></p>\n<p>举例：<code>jstat -gc $&#123;PID&#125; $&#123;几秒内打印一次&#125; $&#123;打印10次&#125; = jstat -gc $&#123;PID&#125; 1000 10</code>。打印出过去10秒GC的数据。</p>\n</blockquote>\n<p><strong>参数说明：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -help<br>Usage: jstat -help|-options<br>       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br><br>Definitions:<br>  &lt;option&gt;      An option reported by the -options option<br>  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:<br>                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]<br>                Where &lt;lvmid&gt; is the local vm identifier for the target<br>                Java virtual machine, typically a process id; &lt;hostname&gt; is<br>                the name of the host running the target Java virtual machine;<br>                and &lt;port&gt; is the port number for the rmiregistry on the<br>                target host. See the jvmstat documentation for a more complete<br>                description of the Virtual Machine Identifier.<br>  &lt;lines&gt;       Number of samples between header lines.<br>  &lt;interval&gt;    Sampling interval. The following forms are allowed:<br>                    &lt;n&gt;[&quot;ms&quot;|&quot;s&quot;]<br>                Where &lt;n&gt; is an integer and the suffix specifies the units as<br>                milliseconds(&quot;ms&quot;) or seconds(&quot;s&quot;). The default units are &quot;ms&quot;.<br>  &lt;count&gt;       Number of samples to take before terminating.<br>  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.<br></code></pre></td></tr></table></figure>\n\n<p>由以上可知，jstat的命令的格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br></code></pre></td></tr></table></figure>\n\n<p>我们可以通过jstat -options查看可以支持的具体参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -options<br>-class<br>-compiler<br>-gc<br>-gccapacity<br>-gccause<br>-gcmetacapacity<br>-gcnew<br>-gcnewcapacity<br>-gcold<br>-gcoldcapacity<br>-gcutil<br>-printcompilation<br></code></pre></td></tr></table></figure>\n\n<p><strong>Option参数说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-class</td>\n<td align=\"center\">类加载的行为统计 Displays statistics about the behavior of the class loader.</td>\n</tr>\n<tr>\n<td align=\"center\">-compiler</td>\n<td align=\"center\">HotSpt JIT编译器行为统计 Displays statistics about the behavior of the Java HotSpot VM Just-in-Time compiler.</td>\n</tr>\n<tr>\n<td align=\"center\">-gc</td>\n<td align=\"center\">垃圾回收堆的行为统计。Displays statistics about the behavior of the garbage collected heap.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccapacity</td>\n<td align=\"center\">各个垃圾回收代容量(young,old,meta)和他们相应的空间统计。isplays statistics about the capacities of the generations and their corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gccause</td>\n<td align=\"center\">垃圾收集统计概述（同-gcutil）,附加最近两次垃圾回收事件的原因。Displays a summary about garbage collection statistics (same as -gcutil), with the cause of the last and current (when applicable) garbage collection events.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcmetacapacity</td>\n<td align=\"center\">统计元空间使用情况 Displays statistics about the sizes of the metaspace.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnew</td>\n<td align=\"center\">显示新生代统计信息 Displays statistics of the behavior of the new generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcnewcapacity</td>\n<td align=\"center\">统计新生代及内存使用情况 Displays statistics about the sizes of the new generations and its corresponding spaces.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcold</td>\n<td align=\"center\">统计老年代和元空间使用情况 Displays statistics about the behavior of the old generation and metaspace statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcoldcapacity</td>\n<td align=\"center\">统计老年代内存使用情况 Displays statistics about the sizes of the old generation.</td>\n</tr>\n<tr>\n<td align=\"center\">-gcutil</td>\n<td align=\"center\">显示各个各代内存使用百分比 Displays a summary about garbage collection statistics.</td>\n</tr>\n<tr>\n<td align=\"center\">-printcompilation</td>\n<td align=\"center\">Hotspot方法编译统计情况 Displays Java HotSpot VM compilation method statistics.</td>\n</tr>\n</tbody></table>\n<p><strong>使用示例：</strong></p>\n<p><strong>jstat -class ： 类加载的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -class 2284<br>Loaded  Bytes  Unloaded  Bytes     Time<br> 30116 75021.8       26    51.4      86.72<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Loaded ：加载class的数量</li>\n<li>Bytes ： 加载class的大小（单位KB）</li>\n<li>Unloaded ：卸载class的数量</li>\n<li>Bytes： 卸载class的大小（单位KB）</li>\n<li>Time ： 加载和卸载class所耗费的时间</li>\n</ul>\n<p><strong>jstat -compiler ：HotSpt JIT编译器行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -compiler 2284<br>Compiled Failed Invalid   Time   FailedType FailedMethod<br>   21247      8       0   189.38          1 com/fr/third/alibaba/druid/pool/DruidDataSource shrink<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ：编译成功数</li>\n<li>Failed ： 编译失败数</li>\n<li>Invalid ： 无效数量</li>\n<li>FailedType ： 最后一次编译失效类型</li>\n<li>FailedMethod ：最后一次编译失效的方法</li>\n</ul>\n<p><strong>jstat -gc：垃圾回收堆的行为统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gc 2284<br> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br>104832.0 104832.0  0.0    0.0   838912.0 600103.2 1048576.0   565828.4  238672.0 232272.3 22392.0 21028.5     59    4.898  11      6.323   11.221<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一个幸存区的总容量（KB）</li>\n<li>S1C ： 第二个幸存区的总容量（KB）</li>\n<li>S0U ： 第一个幸存区已使用的容量（KB）</li>\n<li>S1U ： 第二个幸存区已使用的容量（KB）</li>\n<li>EC ： 伊甸区的总容量（KB）</li>\n<li>EU ： 伊甸区已使用容量（KB）</li>\n<li>OC ： 老年区的总容量（KB）</li>\n<li>MC ： 元空间的总容量（KB）</li>\n<li>MU ： 元空间已使用容量（KB）</li>\n<li>CCSC ： 压缩类空间总容量（KB）</li>\n<li>CCSU ： 压缩类空间已使用总容量（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>YGCT ：新生代GC总耗费时间</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>jstat -gccapacity ： 各个回收区内存情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccapacity 2284<br> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC<br>1048576.0 1048576.0 1048576.0 104832.0 104832.0 838912.0  1048576.0  3145728.0  1048576.0  1048576.0      0.0 1265664.0 238672.0      0.0 1048576.0  22392.0<br>59    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代占用的最小空间大小（KB）</li>\n<li>NGCMX ： 新生代占用的最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1C ：第二幸存区当前空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>OGCMN ： 老年区最小空间大小（KB）</li>\n<li>OGCMX ： 老年区最大空间大小（KB）</li>\n<li>OGC ： 老年区当前空间大小（KB）</li>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小大小（KB）</li>\n<li>CCSMX ： 压缩类最大空间大小（KB）</li>\n<li>CCSC ： 压缩类当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>jstat -gccause ：垃圾收集统计概述</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gccause 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC<br>  0.00   0.00  91.90  53.96  97.32  93.91     59    4.898    11    6.323   11.221 System.gc()          No GC<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>LGCC ：最近一次GC原因</li>\n<li>GCC ： 当前GC原因</li>\n</ul>\n<p><strong>6 . gc -gcmetacapacity ：元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcmetacapacity 2284<br>   MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT<br>       0.0  1265664.0   238672.0        0.0  1048576.0    22392.0    59    11    6.323   11.221<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MCMN ： 元空间最小空间大小（KB）</li>\n<li>MCMX ： 元空间最大空间大小（KB）</li>\n<li>MC ： 元空间当前空间大小（KB）</li>\n<li>CCSMN ： 压缩类空间最小空间大小（KB）</li>\n<li>CCSMX ： 压缩类空间最大空间大小（KB）</li>\n<li>CCSC ： 压缩类空间当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT： 老年代GC耗费时间</li>\n<li>GCT ： GC总耗费时间</li>\n</ul>\n<p><strong>7 . jstat -gcnew ： 显示新生代统计信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnew 2284<br> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT<br>104832.0 104832.0 46710.2    0.0  6   6 52416.0 838912.0  22526.9     60    4.972<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0C ： 第一幸存区总空间大小（KB）</li>\n<li>S1C ： 第二幸存区总空间大小（KB）</li>\n<li>S0U ： 第一幸存区已使用空间大小（KB）</li>\n<li>S1U ： 第二幸存区已使用空间大小（KB）</li>\n<li>TT ： 提升阈值(提升阈值)</li>\n<li>MTT ： 最大阈值</li>\n<li>DSS ： survivor区域大小 (KB)</li>\n<li>EC ： 伊甸区总空间大小（KB）</li>\n<li>EU ： 伊甸区已使用空间大小（KB）</li>\n</ul>\n<p><strong>8 . jstat -gcnewcapacity ： 统计新生代及内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcnewcapacity 2284<br>  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC<br> 1048576.0  1048576.0  1048576.0 104832.0 104832.0 104832.0 104832.0   838912.0   838912.0    60    11<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>NGCMN ： 新生代最小空间大小（KB）</li>\n<li>NGCMX ： 新生代最大空间大小（KB）</li>\n<li>NGC ： 当前新生代空间大小（KB）</li>\n<li>S0CMX ： 第一幸存区最大空间大小（KB）</li>\n<li>S0C ： 第一幸存区当前空间大小（KB）</li>\n<li>S1CMX ： 第二幸存区最大空间大小（KB）</li>\n<li>S1C ： 第二幸存区当前空间大小（KB）</li>\n<li>ECMX ： 伊甸区最大空间大小（KB）</li>\n<li>EC ： 伊甸区当前空间大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n</ul>\n<p><strong>9 . jstat -gcold ： 统计老年代和元空间使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcold 2284<br>   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT<br>251088.0 244521.5  23544.0  22058.7   1048576.0    565828.4     60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>MC ： 元空间总大小（KB）</li>\n<li>MU ： 元空间已使用大小（KB）</li>\n<li>CCSC ： 压缩类空间总大小（KB）</li>\n<li>CCSU ： 压缩类空间已使用大小（KB）</li>\n<li>OC ： 老年区空间总大小（KB）</li>\n<li>OU ： 老年区已使用大小（KB）</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>10 . jstat -gcoldcapacity ： 统计老年代内存使用情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcoldcapacity 2284<br>   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT<br>  1048576.0   3145728.0   1048576.0   1048576.0    60    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>OGCMN ：老年区占用最小空间（KB）</li>\n<li>OGCMX ： 老年区占用最大空间（KB）</li>\n<li>OGC ： 当前老年区空间（KB）</li>\n<li>OC ： 当前老年区空间（KB）</li>\n<li>YGC ：新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>FGCT ： 老年代GC总耗时</li>\n<li>GCT ： GC总耗时</li>\n</ul>\n<p><strong>11 . jstat -gcutil ： 垃圾回收统计</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -gcutil 2284<br>  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT<br> 44.56   0.00   9.85  53.96  97.38  93.69     60    4.972    11    6.323   11.295<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>S0 ：第一幸存区已使用空间百分比.</li>\n<li>S1 ： 第二幸存区已使用空间百分比</li>\n<li>E ： 伊甸区已使用空间百分比</li>\n<li>O ： 老年区已使用空间百分比</li>\n<li>M ： 元空间使用百分比</li>\n<li>CCS ： 压缩类空间使用百分比</li>\n<li>YGC ： 新生代GC次数</li>\n<li>FGC ： 老年代GC次数</li>\n<li>GCT ：GC总耗时</li>\n</ul>\n<p><strong>12 . jstat -printcompilation ： Hotspot方法编译统计情况</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">C:\\Users\\Administrator&gt;jstat -printcompilation 2284<br>Compiled  Size  Type Method<br>   21538    150    1 java/util/Collections reverse<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Compiled ： 已编译方法次数</li>\n<li>Size ： 最近一次方法编译大小</li>\n<li>Type ： 最近一次编译方法类型</li>\n<li>Method ： 最近一次编译方法</li>\n</ul>\n<p>参考：</p>\n<p>jstat：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html</a><br>jstat命令使用：<a href=\"https://www.cnblogs.com/lizhonghua34/p/7307139.html\">https://www.cnblogs.com/lizhonghua34/p/7307139.html</a><br>JVM调优命令-jstat：<a href=\"https://www.cnblogs.com/myna/p/7567769.html\">https://www.cnblogs.com/myna/p/7567769.html</a></p>\n<hr>\n<h2 id=\"jstack：查看某个Java进程内的线程堆栈信息\"><a href=\"#jstack：查看某个Java进程内的线程堆栈信息\" class=\"headerlink\" title=\"jstack：查看某个Java进程内的线程堆栈信息\"></a>jstack：查看某个Java进程内的线程堆栈信息</h2><p>参考原文：<a href=\"https://www.jianshu.com/p/8d5782bc596e\">https://www.jianshu.com/p/8d5782bc596e</a></p>\n<p>查看JAVA进程当中，线程内容。</p>\n<p><strong>jstack用法</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">/opt/java8/bin/jstack<br><br>Usage:<br>    jstack [-l] &lt;pid&gt;<br>        (to connect to running process) 连接活动线程<br>    jstack -F [-m] [-l] &lt;pid&gt;<br>        (to connect to a hung process) 连接阻塞线程<br>    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;<br>        (to connect to a core file) 连接dump的文件<br>    jstack [-m] [-l] [<span class=\"hljs-symbol\">server_id@</span>]&lt;remote server IP or hostname&gt;<br>        (to connect to a remote debug server) 连接远程服务器<br><br>Options:<br>    -F  to force a thread dump. Use <span class=\"hljs-keyword\">when</span> jstack &lt;pid&gt; does not respond (process <span class=\"hljs-keyword\">is</span> hung)<br>    -m  to print both java and native frames (mixed mode)<br>    -l  long listing. Prints additional information about locks<br>    -h or -help to print <span class=\"hljs-keyword\">this</span> help message<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack查看输出</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367<br><br>2019-06-25 15:04:46<br>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.77-b03 mixed mode):<br><br><span class=\"hljs-string\">&quot;Attach Listener&quot;</span> <span class=\"hljs-comment\">#453 daemon prio=9 os_prio=0 tid=0x00007f9f94001000 nid=0xf30 waiting on condition [0x0000000000000000]</span><br>   java.lang.Thread.State: RUNNABLE<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;grpc-default-executor-263&quot;</span> <span class=\"hljs-comment\">#452 daemon prio=5 os_prio=0 tid=0x00007f9f4c01f800 nid=0x9aa waiting on condition [0x00007f9f398bd000]</span><br>   java.lang.Thread.State: TIMED_WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000007400243f0&gt; (a java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>)<br>        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.awaitFulfill(SynchronousQueue.java:460)<br>        at java.util.concurrent.SynchronousQueue<span class=\"hljs-variable\">$TransferStack</span>.transfer(SynchronousQueue.java:362)<br>        at java.util.concurrent.SynchronousQueue.poll(SynchronousQueue.java:941)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1066)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br><br><span class=\"hljs-string\">&quot;http-bio-8080-exec-10&quot;</span> <span class=\"hljs-comment\">#235 daemon prio=5 os_prio=0 tid=0x0000000001bcc800 nid=0x3c13 waiting on condition [0x00007f9f384a9000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x0000000743d26638&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)<br>        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:104)<br>        at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:32)<br>        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at org.apache.tomcat.util.threads.TaskThread<span class=\"hljs-variable\">$WrappingRunnable</span>.run(TaskThread.java:61)<br>        at java.lang.Thread.run(Thread.java:745)<br><br>   Locked ownable synchronizers:<br>        - None<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack统计线程数</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/opt/java8/bin/jstack -l 28367 | grep <span class=\"hljs-string\">&#x27;java.lang.Thread.State&#x27;</span> | <span class=\"hljs-built_in\">wc</span> -l<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测死锁</strong></p>\n<p><em>死锁代码</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeathLock</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock1 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Lock lock2 = <span class=\"hljs-keyword\">new</span> ReentrantLock();<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deathLock</span>()</span> &#123;<br>        Thread t1 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        Thread t2 = <span class=\"hljs-keyword\">new</span> Thread() &#123;<br>            @Override<br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>()</span> &#123;<br>                <span class=\"hljs-keyword\">try</span> &#123;<br>                    lock2.<span class=\"hljs-keyword\">lock</span>();<br>                    TimeUnit.SECONDS.sleep(<span class=\"hljs-number\">1</span>);<br>                    lock1.<span class=\"hljs-keyword\">lock</span>();<br>                &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        t1.setName(<span class=\"hljs-string\">&quot;thread1&quot;</span>);<br>        t2.setName(<span class=\"hljs-string\">&quot;thread2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\">String[] args</span>)</span> &#123;<br>        deathLock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><em>死锁日志</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-string\">&quot;mythread2&quot;</span> <span class=\"hljs-comment\">#12 prio=5 os_prio=0 tid=0x0000000058ef7800 nid=0x1ab4 waiting on condition [0x0000000059f8f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d640&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><span class=\"hljs-string\">&quot;mythread1&quot;</span> <span class=\"hljs-comment\">#11 prio=5 os_prio=0 tid=0x0000000058ef7000 nid=0x3e68 waiting on condition [0x000000005947f000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>   Locked ownable synchronizers:<br>        - &lt;0x00000000d602d610&gt; (a java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$Nonfa</span><br>irSync)<br><br><br>Found one Java-level deadlock:<br>=============================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d610, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread1&quot;</span><br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>  waiting <span class=\"hljs-keyword\">for</span> ownable synchronizer 0x00000000d602d640, (a java.util.concurrent.l<br>ocks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>),<br>  <span class=\"hljs-built_in\">which</span> is held by <span class=\"hljs-string\">&quot;mythread2&quot;</span><br><br>Java stack information <span class=\"hljs-keyword\">for</span> the threads listed above:<br>===================================================<br><span class=\"hljs-string\">&quot;mythread2&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d610&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$2</span>.run(DeathLock.java:34)<br><span class=\"hljs-string\">&quot;mythread1&quot;</span>:<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000000d602d640&gt; (a java.util.concurrent.lock<br>s.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInt<br>errupt(AbstractQueuedSynchronizer.java:836)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(A<br>bstractQueuedSynchronizer.java:870)<br>        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(Abstrac<br>tQueuedSynchronizer.java:1199)<br>        at java.util.concurrent.locks.ReentrantLock<span class=\"hljs-variable\">$NonfairSync</span>.lock(ReentrantLo<br>ck.java:209)<br>        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)<br><br>        at DeathLock<span class=\"hljs-variable\">$1</span>.run(DeathLock.java:22)<br><br>Found 1 deadlock.<br></code></pre></td></tr></table></figure>\n\n<p><strong>jstack检测cpu高</strong></p>\n<p><em>步骤一：查看cpu占用高进程</em></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">top<br><br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9472968</span>k used,  <span class=\"hljs-number\">6860676</span>k free,   <span class=\"hljs-number\">165616</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6665292</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND     <br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S <span class=\"hljs-number\">100.7</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">47</span>:<span class=\"hljs-number\">53.80</span> java       <br> <span class=\"hljs-number\">1552</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">121</span>m  <span class=\"hljs-number\">13</span>m <span class=\"hljs-number\">8524</span> S  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">0.1</span>  <span class=\"hljs-number\">14</span>:<span class=\"hljs-number\">37.75</span> AliYunDun   <br> <span class=\"hljs-number\">3581</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">9750</span>m <span class=\"hljs-number\">2.0</span>g  <span class=\"hljs-number\">13</span>m S  <span class=\"hljs-number\">0.7</span> <span class=\"hljs-number\">12.9</span> <span class=\"hljs-number\">298</span>:<span class=\"hljs-number\">30.20</span> java        <br>    <span class=\"hljs-number\">1</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">19360</span> <span class=\"hljs-number\">1612</span> <span class=\"hljs-number\">1308</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.81</span> init        <br>    <span class=\"hljs-number\">2</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> kthreadd    <br>    <span class=\"hljs-number\">3</span> root      RT   <span class=\"hljs-number\">0</span>     <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">0</span> S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.0</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.14</span> migration/<span class=\"hljs-number\">0</span> <br></code></pre></td></tr></table></figure>\n\n<p><em>步骤二：查看cpu占用高线程</em></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">top</span> -H -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">17850</span><br><br><span class=\"hljs-attribute\">top</span> - <span class=\"hljs-number\">17</span>:<span class=\"hljs-number\">43</span>:<span class=\"hljs-number\">15</span> up <span class=\"hljs-number\">5</span> days,  <span class=\"hljs-number\">7</span>:<span class=\"hljs-number\">31</span>,  <span class=\"hljs-number\">1</span> user,  load average: <span class=\"hljs-number\">0.99</span>, <span class=\"hljs-number\">0.97</span>, <span class=\"hljs-number\">0.91</span><br>Tasks:  <span class=\"hljs-number\">32</span> total,   <span class=\"hljs-number\">1</span> running,  <span class=\"hljs-number\">31</span> sleeping,   <span class=\"hljs-number\">0</span> stopped,   <span class=\"hljs-number\">0</span> zombie<br><span class=\"hljs-built_in\">Cpu</span>(s):  <span class=\"hljs-number\">3.7%</span>us,  <span class=\"hljs-number\">8.9%</span>sy,  <span class=\"hljs-number\">0.0%</span>ni, <span class=\"hljs-number\">87.4%</span>id,  <span class=\"hljs-number\">0.0%</span>wa,  <span class=\"hljs-number\">0.0%</span>hi,  <span class=\"hljs-number\">0.0%</span>si,  <span class=\"hljs-number\">0.0%</span>st<br>Mem:  <span class=\"hljs-number\">16333644</span>k total,  <span class=\"hljs-number\">9592504</span>k used,  <span class=\"hljs-number\">6741140</span>k free,   <span class=\"hljs-number\">165700</span>k buffers<br>Swap:        <span class=\"hljs-number\">0</span>k total,        <span class=\"hljs-number\">0</span>k used,        <span class=\"hljs-number\">0</span>k free,  <span class=\"hljs-number\">6781620</span>k cached<br><br>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND<br><span class=\"hljs-number\">17880</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m R <span class=\"hljs-number\">99.9</span>  <span class=\"hljs-number\">0.7</span>  <span class=\"hljs-number\">50</span>:<span class=\"hljs-number\">47.43</span> java<br><span class=\"hljs-number\">17856</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.3</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.08</span> java<br><span class=\"hljs-number\">17850</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.00</span> java<br><span class=\"hljs-number\">17851</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">00.23</span> java<br><span class=\"hljs-number\">17852</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.09</span> java<br><span class=\"hljs-number\">17853</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.12</span> java<br><span class=\"hljs-number\">17854</span> root      <span class=\"hljs-number\">20</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">7588</span>m <span class=\"hljs-number\">112</span>m  <span class=\"hljs-number\">11</span>m S  <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-number\">0.7</span>   <span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">02.07</span> java<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤三：转换线程ID</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">&quot;%x\\n&quot;</span> 17880          <br>45d8<br></code></pre></td></tr></table></figure>\n\n<p><em>步骤四：定位cpu占用线程</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">jstack 17850|grep 45d8 -A 30<br><span class=\"hljs-string\">&quot;pool-1-thread-11&quot;</span> <span class=\"hljs-comment\">#20 prio=5 os_prio=0 tid=0x00007fc860352800 nid=0x45d8 runnable [0x00007fc8417d2000]</span><br>   java.lang.Thread.State: RUNNABLE<br>        at java.io.FileOutputStream.writeBytes(Native Method)<br>        at java.io.FileOutputStream.write(FileOutputStream.java:326)<br>        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)<br>        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)<br>        - locked &lt;0x00000006c6c2e708&gt; (a java.io.BufferedOutputStream)<br>        at java.io.PrintStream.write(PrintStream.java:482)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)<br>        at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)<br>        at sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:104)<br>        - locked &lt;0x00000006c6c26620&gt; (a java.io.OutputStreamWriter)<br>        at java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:185)<br>        at java.io.PrintStream.write(PrintStream.java:527)<br>        - eliminated &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at java.io.PrintStream.<span class=\"hljs-built_in\">print</span>(PrintStream.java:597)<br>        at java.io.PrintStream.println(PrintStream.java:736)<br>        - locked &lt;0x00000006c6c10178&gt; (a java.io.PrintStream)<br>        at com.demo.guava.HardTask.call(HardTask.java:18)<br>        at com.demo.guava.HardTask.call(HardTask.java:9)<br>        at java.util.concurrent.FutureTask.run(FutureTask.java:266)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:617)<br>        at java.lang.Thread.run(Thread.java:745)<br><br><span class=\"hljs-string\">&quot;pool-1-thread-10&quot;</span> <span class=\"hljs-comment\">#19 prio=5 os_prio=0 tid=0x00007fc860345000 nid=0x45d7 waiting on condition [0x00007fc8418d3000]</span><br>   java.lang.Thread.State: WAITING (parking)<br>        at sun.misc.Unsafe.park(Native Method)<br>        - parking to <span class=\"hljs-built_in\">wait</span> <span class=\"hljs-keyword\">for</span>  &lt;0x00000006c6c14178&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class=\"hljs-variable\">$ConditionObject</span>)<br>        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Jmap\"><a href=\"#Jmap\" class=\"headerlink\" title=\"Jmap\"></a>Jmap</h2><p>原文参考：<a href=\"https://www.jianshu.com/p/c52ffaca40a5\">https://www.jianshu.com/p/c52ffaca40a5</a></p>\n<blockquote>\n<p>jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的<code>共享对象内存映射或堆内存细节</code>。可以使用jmap生成Heap Dump。在Java命令Java Dump和Java命令:Jstack中分别有关于Java Dump以及线程 Dump的介绍。 这篇文章主要介绍<code>Java的堆Dump</code>以及jmap命令</p>\n</blockquote>\n<h3 id=\"什么是堆Dump\"><a href=\"#什么是堆Dump\" class=\"headerlink\" title=\"什么是堆Dump\"></a>什么是堆Dump</h3><h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p><a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java虚拟机的内存组成以及堆内存介绍</a><br> <a href=\"%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80\">Java GC工作原理</a></p>\n<p>常见内存错误：</p>\n<blockquote>\n<p>outOfMemoryError 年老代内存不足。<br> outOfMemoryError:PermGen Space 永久代内存不足。<br> outOfMemoryError:GC overhead limit exceed 垃圾回收时间占用系统运行时间的98%或以上。</p>\n</blockquote>\n<p><strong>jmap 用法摘要</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Usage:<br>    jmap [option] &lt;pid&gt;<br>        (to connect to running process)<br>    jmap [option] &lt;executable &lt;core&gt;<br>        (to connect to a core file)<br>    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;<br>        (to connect to remote debug server)<br><br><span class=\"hljs-built_in\">where</span> &lt;option&gt; is one of:<br>    &lt;none&gt;               to <span class=\"hljs-built_in\">print</span> same info as Solaris pmap<br>    -heap                to <span class=\"hljs-built_in\">print</span> java heap summary<br>    -histo[:live]        to <span class=\"hljs-built_in\">print</span> histogram of java object heap; <span class=\"hljs-keyword\">if</span> the <span class=\"hljs-string\">&quot;live&quot;</span><br>                         suboption is specified, only count live objects<br>    -permstat            to <span class=\"hljs-built_in\">print</span> permanent generation statistics<br>    -finalizerinfo       to <span class=\"hljs-built_in\">print</span> information on objects awaiting finalization<br>    -dump:&lt;dump-options&gt; to dump java heap <span class=\"hljs-keyword\">in</span> hprof binary format<br>                         dump-options:<br>                           live         dump only live objects; <span class=\"hljs-keyword\">if</span> not specified,<br>                                        all objects <span class=\"hljs-keyword\">in</span> the heap are dumped.<br>                           format=b     binary format<br>                           file=&lt;file&gt;  dump heap to &lt;file&gt;<br>                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;<br>    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo<br>                         to force a heap dump or histogram when &lt;pid&gt; does not<br>                         respond. The <span class=\"hljs-string\">&quot;live&quot;</span> suboption is not supported<br>                         <span class=\"hljs-keyword\">in</span> this mode.<br>    -h | -<span class=\"hljs-built_in\">help</span>           to <span class=\"hljs-built_in\">print</span> this <span class=\"hljs-built_in\">help</span> message<br>    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>指定进程号(pid)的进程 jmap [ option ]</li>\n<li>指定核心文件 jmap [ option ]</li>\n<li>指定远程调试服务器 jmap [ option ] [server-id@]</li>\n</ul>\n<p><strong>参数：</strong></p>\n<ul>\n<li>option 选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</li>\n<li>pid 需要打印配置信息的进程ID。该进程必须是一个Java进程。想要获取运行的Java进程列表，你可以使用jps。</li>\n<li>executable 产生核心dump的Java可执行文件。</li>\n<li>core 需要打印配置信息的核心文件。</li>\n<li>remote-hostname-or-IP 远程调试服务器的(请查看jsadebugd)主机名或IP地址。</li>\n<li>server-id 可选的唯一id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</li>\n</ul>\n<p><strong>选项:</strong></p>\n<ul>\n<li><no option> 如果使用不带选项参数的jmap打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与Solaris的pmap工具比较相似。</li>\n<li>-dump:[live,]format&#x3D;b,file&#x3D;<filename> 以hprof二进制格式转储Java堆到指定filename的文件中。live子选项是可选的。如果指定了live子选项，堆中只有活动的对象会被转储。想要浏览heap dump，你可以使用jhat(Java堆分析工具)读取生成的文件。</li>\n<li>-finalizerinfo 打印等待终结的对象信息。</li>\n<li>-heap 打印一个堆的摘要信息，包括使用的GC算法、堆配置信息和generation wise heap usage。</li>\n<li>-histo[:live] 打印堆的柱状图。其中包括每个Java类、对象数量、内存大小(单位：字节)、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’*’前缀。如果指定了live子选项，则只计算活动的对象。</li>\n<li>-permstat 打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</li>\n<li>-F 强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。</li>\n<li>-h 打印帮助信息。</li>\n<li>-help 打印帮助信息。</li>\n<li>-J<flag> 指定传递给运行jmap的JVM的参数。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<p><em>查看java 堆（heap）使用情况,执行命令：  jmap -heap 31846</em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Attaching to process ID 31846, please <span class=\"hljs-built_in\">wait</span>...<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 24.71-b01<br><br>using thread-local object allocation.<br>Parallel GC with 4 thread(s)//GC 方式<br><br>Heap Configuration: //堆内存初始化配置<br>   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)<br>   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)<br>   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小<br>   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小<br>   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小<br>   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小<br>   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率<br>   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 <br>   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小<br>   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小<br>   G1HeapRegionSize = 0 (0.0MB)<br><br>Heap Usage://堆内存使用情况<br>PS Young Generation<br>Eden Space://Eden区内存分布<br>   capacity = 33030144 (31.5MB)//Eden区总容量<br>   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用<br>   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量<br>   4.614088270399305% used //Eden区使用比率<br>From Space:  //其中一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>To Space:  //另一个Survivor区的内存分布<br>   capacity = 5242880 (5.0MB)<br>   used     = 0 (0.0MB)<br>   free     = 5242880 (5.0MB)<br>   0.0% used<br>PS Old Generation //当前的Old区内存分布<br>   capacity = 86507520 (82.5MB)<br>   used     = 0 (0.0MB)<br>   free     = 86507520 (82.5MB)<br>   0.0% used<br>PS Perm Generation//当前的 “永生代” 内存分布<br>   capacity = 22020096 (21.0MB)<br>   used     = 2496528 (2.3808746337890625MB)<br>   free     = 19523568 (18.619125366210938MB)<br>   11.337498256138392% used<br><br>670 interned Strings occupying 43720 bytes.<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看堆内存(histogram)中的对象数量及大小。执行命令： jmap -histo 3331</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">num     <span class=\"hljs-comment\">#instances         #bytes  class name</span><br>编号     个数                字节     类名<br>----------------------------------------------<br>   1:             7        1322080  [I<br>   2:          5603         722368  &lt;methodKlass&gt;<br>   3:          5603         641944  &lt;constMethodKlass&gt;<br>   4:         34022         544352  java.lang.Integer<br>   5:           371         437208  &lt;constantPoolKlass&gt;<br>   6:           336         270624  &lt;constantPoolCacheKlass&gt;<br>   7:           371         253816  &lt;instanceKlassKlass&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>将内存使用的详细情况输出到文件，执行命令： jmap -dump:format&#x3D;b,file&#x3D;heapDump 6900</strong></p>\n<p>然后用jhat命令可以参看 jhat -port 5000 heapDump 在浏览器中访问：<a href=\"http://localhost:5000/\">http://localhost:5000/</a> 查看详细信息</p>\n<blockquote>\n<p>这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助Java堆Dump查看对象的情况。<br> 2.要制作堆Dump可以直接使用jvm自带的jmap命令<br> 3.可以先使用jmap -heap命令查看堆的使用情况，看一下各个堆空间的占用情况。<br> 4.使用jmap -histo:[live]查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。<br> 5.也可以使用 jmap -dump:format&#x3D;b,file&#x3D;<fileName>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容<br> 6.在内存出现泄露、溢出或者其它前提条件下，建议多dump几次内存，把内存文件进行编号归档，便于后续内存整理分析。</p>\n<h3 id=\"出现问题：\"><a href=\"#出现问题：\" class=\"headerlink\" title=\"出现问题：\"></a>出现问题：</h3><ol>\n<li>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process<br> 在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process，这是oracla文档中提到的一个bug:<a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：</a></li>\n</ol>\n<ul>\n<li>echo 0 | sudo tee &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;yama&#x2F;ptrace_scope 该方法在下次重启前有效。</li>\n<li>永久有效方法 sudo vi &#x2F;etc&#x2F;sysctl.d&#x2F;10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope &#x3D; 1 修改为: kernel.yama.ptrace_scope &#x3D; 0 重启系统，使修改生效。</li>\n</ul>\n"},{"title":"4-JVM 参数","_content":"# JVM 参数\n\n1. 标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help\n\n2. 非标准参数：随着JDK版本的变化而变化。\n\n   -X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动\n\n   ```shell\n   # 修改执行方式\n   # compiled 编译执行方式，第一次使用就编译成本地代码\n   java -Xcomp -version\n   # interpreted 解释执行方式\n   java -Xini -version\n   # mixed 默认的混合执行方式，混合模式，JVM自己来决定\n   java -Xmixed -version\n   ```\n\n   -XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。\n\n   boolean类型\n\n   ```shell\n   格式：-XX:[+-]<name>      \t\t+或-表示启用或者禁用name属性\n   比如：\n   -XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器\n   -XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器\n   # 设置JVM使用垃圾收集器 +：使用，-：未使用\n   -XX:+/-UseG1GC\n   \n   \n   ```\n\n   非boolean类型\n\n   ```shell\n   格式：-XX<name>=<value>表示name属性的值是value\n   比如：\n   -XX:MaxGCPauseMillis=500\n   # 设置初始堆内存\n   -XX:initialHeapSize=100M # 简写方式 ===>>> -Xms100M\n   # 设置最大堆内存\n   -XX:MaxHeapSize=100M # 简写方式 ===>>> -Xmx100M\n   ```\n\n打印出JAVA进程中所有JVM的参数：\n\n+ 执行命令 `java -XX:+PrintFlagsFinal -version` 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t`java -XX:+PrintFlagsFinal -version > xxx.txt`\n+ 使用  `jinfo -flag ${参数名} ${PID} `也可查看对应JVM参数值\n\n```shell\n-XX:+PrintFlagsFinal\n```\n\n**如何设置JVM参数：**\n\n*以下方式是JAVA进程还未启动*\n\n1. 在开发工具中，比如IDEA中的启动配置项中 VM options\n2. SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar\n3. 在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh/bat 中的JAVA_OPTIONS=\"\"\n\n*以下方式是当JAVA进程已经启动后该如何设置*\n\n4. 实时修改某个JVM参数的值 **jinfo修改（参数只有被标记为manageable的flags可以被实时修改)**\n\n**常用参数：**\n\n|                             参数                             |                             含义                             |                             说明                             |\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n|                     XX:CICompilerCount=3                     |                        最大并行编译数                        | 如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能 |\n|                   -XX:InitialHeapSize=100M                   |                         初始化堆大小                         |                         简写-Xms100M                         |\n|                     -XX:MaxHeapSize=100M                     |                          最大堆大小                          |                        简写-Xm x 100M                        |\n|                       -XX:NewSize=20M                        |                       设置年轻代的大小                       |                                                              |\n|                      -XX:MaxNewSize=50M                      |                        年轻代最大大小                        |                                                              |\n|                       -XX:OldSize=50M                        |                        设置老年代大小                        |                                                              |\n|                    -XX:MetaspaceSize=50M                     |                        设置方法区大小                        |                                                              |\n|                   -XX:MaxMetaspaceSize=50M                   |                        方法区最大大小                        |                                                              |\n|                      -XX:+UseParallelGC                      |                      使用UseParallelGC                       |                      新生代，吞吐量优先                      |\n|                    -XX:+UseParallelOldGC                     |                     使用UseParallelOldGC                     |                      老年代，吞吐量优先                      |\n|                   -XX:+UseConcMarkSweepGC                    |                           使用CMS                            |                     老年代，停顿时间优先                     |\n|                         -XX:+UseG1GC                         |                           使用G1GC                           |                 新生代，老年代，停顿时间优先                 |\n|                         -XX:NewRatio                         |                        新老生代的比值                        | 比如-XX:Ratio=4，则表示新生代:老年代=1:4，也就是新生代占整个堆内存的1/5 |\n|                      -XX:SurvivorRatio                       |                    两个S区和Eden区的比值                     | 比如-XX:SurvivorRatio=8，也就是(S0+S1):Eden=2:8，也就是一个S占整个新生代的1/10 |\n|               -XX:+HeapDumpOnOutOfMemoryError                |                      启动堆内存溢出打印                      |      当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件      |\n|                 -XX:HeapDumpPath=heap.hprof                  |                    指定堆内存溢出打印目录                    |             表示在当前目录生成一个heap.hprof文件             |\n| XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME/logs/gc.log |                         打印出GC日志                         |           可以使用不同的垃圾收集器，对比查看GC情况           |\n|                           -Xss128k                           |                    设置每个线程的堆栈大小                    |                    经验值是3000-5000最佳                     |\n|                  -XX:MaxTenuringThreshold=6                  |                    提升年老代的最大临界值                    |                         默认值为 15                          |\n|              -XX:InitiatingHeapOccupancyPercent              |                启动并发GC周期时堆内存使用占比                | G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45. |\n|                    -XX:G1HeapWastePercent                    |                    允许的浪费堆空间的占比                    | 默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。 |\n|                  -XX:MaxGCPauseMillis=200ms                  |                        G1最大停顿时间                        | 暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态 |\n|                     -XX:ConcGCThreads=n                      |                 并发垃圾收集器使用的线程数量                 |               默认值随JVM运行的平台不同而不同                |\n|             -XX:G1MixedGCLiveThresholdPercent=65             |        混合垃圾回收周期中要包括的旧区域设置占用率阈值        |                       默认占用率为 65%                       |\n|                  -XX:G1MixedGCCountTarget=8                  | 设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数 | 默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内  |\n|             XX:G1OldCSetRegionThresholdPercent=1             |           描述Mixed GC时，Old Region被加入到CSet中           |        默认情况下，G1只把10%的Old Region加入到CSet中         |\n","source":"_posts/JVM/4-JVM 参数.md","raw":"---\ntitle: 4-JVM 参数\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM 参数\n\n1. 标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help\n\n2. 非标准参数：随着JDK版本的变化而变化。\n\n   -X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动\n\n   ```shell\n   # 修改执行方式\n   # compiled 编译执行方式，第一次使用就编译成本地代码\n   java -Xcomp -version\n   # interpreted 解释执行方式\n   java -Xini -version\n   # mixed 默认的混合执行方式，混合模式，JVM自己来决定\n   java -Xmixed -version\n   ```\n\n   -XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。\n\n   boolean类型\n\n   ```shell\n   格式：-XX:[+-]<name>      \t\t+或-表示启用或者禁用name属性\n   比如：\n   -XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器\n   -XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器\n   # 设置JVM使用垃圾收集器 +：使用，-：未使用\n   -XX:+/-UseG1GC\n   \n   \n   ```\n\n   非boolean类型\n\n   ```shell\n   格式：-XX<name>=<value>表示name属性的值是value\n   比如：\n   -XX:MaxGCPauseMillis=500\n   # 设置初始堆内存\n   -XX:initialHeapSize=100M # 简写方式 ===>>> -Xms100M\n   # 设置最大堆内存\n   -XX:MaxHeapSize=100M # 简写方式 ===>>> -Xmx100M\n   ```\n\n打印出JAVA进程中所有JVM的参数：\n\n+ 执行命令 `java -XX:+PrintFlagsFinal -version` 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t`java -XX:+PrintFlagsFinal -version > xxx.txt`\n+ 使用  `jinfo -flag ${参数名} ${PID} `也可查看对应JVM参数值\n\n```shell\n-XX:+PrintFlagsFinal\n```\n\n**如何设置JVM参数：**\n\n*以下方式是JAVA进程还未启动*\n\n1. 在开发工具中，比如IDEA中的启动配置项中 VM options\n2. SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar\n3. 在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh/bat 中的JAVA_OPTIONS=\"\"\n\n*以下方式是当JAVA进程已经启动后该如何设置*\n\n4. 实时修改某个JVM参数的值 **jinfo修改（参数只有被标记为manageable的flags可以被实时修改)**\n\n**常用参数：**\n\n|                             参数                             |                             含义                             |                             说明                             |\n| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |\n|                     XX:CICompilerCount=3                     |                        最大并行编译数                        | 如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能 |\n|                   -XX:InitialHeapSize=100M                   |                         初始化堆大小                         |                         简写-Xms100M                         |\n|                     -XX:MaxHeapSize=100M                     |                          最大堆大小                          |                        简写-Xm x 100M                        |\n|                       -XX:NewSize=20M                        |                       设置年轻代的大小                       |                                                              |\n|                      -XX:MaxNewSize=50M                      |                        年轻代最大大小                        |                                                              |\n|                       -XX:OldSize=50M                        |                        设置老年代大小                        |                                                              |\n|                    -XX:MetaspaceSize=50M                     |                        设置方法区大小                        |                                                              |\n|                   -XX:MaxMetaspaceSize=50M                   |                        方法区最大大小                        |                                                              |\n|                      -XX:+UseParallelGC                      |                      使用UseParallelGC                       |                      新生代，吞吐量优先                      |\n|                    -XX:+UseParallelOldGC                     |                     使用UseParallelOldGC                     |                      老年代，吞吐量优先                      |\n|                   -XX:+UseConcMarkSweepGC                    |                           使用CMS                            |                     老年代，停顿时间优先                     |\n|                         -XX:+UseG1GC                         |                           使用G1GC                           |                 新生代，老年代，停顿时间优先                 |\n|                         -XX:NewRatio                         |                        新老生代的比值                        | 比如-XX:Ratio=4，则表示新生代:老年代=1:4，也就是新生代占整个堆内存的1/5 |\n|                      -XX:SurvivorRatio                       |                    两个S区和Eden区的比值                     | 比如-XX:SurvivorRatio=8，也就是(S0+S1):Eden=2:8，也就是一个S占整个新生代的1/10 |\n|               -XX:+HeapDumpOnOutOfMemoryError                |                      启动堆内存溢出打印                      |      当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件      |\n|                 -XX:HeapDumpPath=heap.hprof                  |                    指定堆内存溢出打印目录                    |             表示在当前目录生成一个heap.hprof文件             |\n| XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME/logs/gc.log |                         打印出GC日志                         |           可以使用不同的垃圾收集器，对比查看GC情况           |\n|                           -Xss128k                           |                    设置每个线程的堆栈大小                    |                    经验值是3000-5000最佳                     |\n|                  -XX:MaxTenuringThreshold=6                  |                    提升年老代的最大临界值                    |                         默认值为 15                          |\n|              -XX:InitiatingHeapOccupancyPercent              |                启动并发GC周期时堆内存使用占比                | G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45. |\n|                    -XX:G1HeapWastePercent                    |                    允许的浪费堆空间的占比                    | 默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。 |\n|                  -XX:MaxGCPauseMillis=200ms                  |                        G1最大停顿时间                        | 暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态 |\n|                     -XX:ConcGCThreads=n                      |                 并发垃圾收集器使用的线程数量                 |               默认值随JVM运行的平台不同而不同                |\n|             -XX:G1MixedGCLiveThresholdPercent=65             |        混合垃圾回收周期中要包括的旧区域设置占用率阈值        |                       默认占用率为 65%                       |\n|                  -XX:G1MixedGCCountTarget=8                  | 设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数 | 默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内  |\n|             XX:G1OldCSetRegionThresholdPercent=1             |           描述Mixed GC时，Old Region被加入到CSet中           |        默认情况下，G1只把10%的Old Region加入到CSet中         |\n","slug":"JVM/4-JVM 参数","published":1,"date":"2020-05-07T15:20:49.000Z","updated":"2022-11-25T17:39:15.224Z","_id":"clawrzuaj0007u42b6duf1b3v","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM-参数\"><a href=\"#JVM-参数\" class=\"headerlink\" title=\"JVM 参数\"></a>JVM 参数</h1><ol>\n<li><p>标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help</p>\n</li>\n<li><p>非标准参数：随着JDK版本的变化而变化。</p>\n<p>-X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改执行方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">compiled 编译执行方式，第一次使用就编译成本地代码</span><br>java -Xcomp -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interpreted 解释执行方式</span><br>java -Xini -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">mixed 默认的混合执行方式，混合模式，JVM自己来决定</span><br>java -Xmixed -version<br></code></pre></td></tr></table></figure>\n\n<p>-XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。</p>\n<p>boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX:[+-]&lt;name&gt;      \t\t+或-表示启用或者禁用name属性<br>比如：<br>-XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器<br>-XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置JVM使用垃圾收集器 +：使用，-：未使用</span><br>-XX:+/-UseG1GC<br><br><br></code></pre></td></tr></table></figure>\n\n<p>非boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX&lt;name&gt;=&lt;value&gt;表示name属性的值是value<br>比如：<br>-XX:MaxGCPauseMillis=500<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置初始堆内存</span><br>-XX:initialHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xms100M<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置最大堆内存</span><br>-XX:MaxHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xmx100M<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>打印出JAVA进程中所有JVM的参数：</p>\n<ul>\n<li>执行命令 <code>java -XX:+PrintFlagsFinal -version</code> 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t<code>java -XX:+PrintFlagsFinal -version &gt; xxx.txt</code></li>\n<li>使用  <code>jinfo -flag $&#123;参数名&#125; $&#123;PID&#125; </code>也可查看对应JVM参数值</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-XX:+PrintFlagsFinal<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何设置JVM参数：</strong></p>\n<p><em>以下方式是JAVA进程还未启动</em></p>\n<ol>\n<li>在开发工具中，比如IDEA中的启动配置项中 VM options</li>\n<li>SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar</li>\n<li>在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh&#x2F;bat 中的JAVA_OPTIONS&#x3D;””</li>\n</ol>\n<p><em>以下方式是当JAVA进程已经启动后该如何设置</em></p>\n<ol start=\"4\">\n<li>实时修改某个JVM参数的值 <strong>jinfo修改（参数只有被标记为manageable的flags可以被实时修改)</strong></li>\n</ol>\n<p><strong>常用参数：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">XX:CICompilerCount&#x3D;3</td>\n<td align=\"center\">最大并行编译数</td>\n<td align=\"center\">如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitialHeapSize&#x3D;100M</td>\n<td align=\"center\">初始化堆大小</td>\n<td align=\"center\">简写-Xms100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxHeapSize&#x3D;100M</td>\n<td align=\"center\">最大堆大小</td>\n<td align=\"center\">简写-Xm x 100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewSize&#x3D;20M</td>\n<td align=\"center\">设置年轻代的大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxNewSize&#x3D;50M</td>\n<td align=\"center\">年轻代最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:OldSize&#x3D;50M</td>\n<td align=\"center\">设置老年代大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MetaspaceSize&#x3D;50M</td>\n<td align=\"center\">设置方法区大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxMetaspaceSize&#x3D;50M</td>\n<td align=\"center\">方法区最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelGC</td>\n<td align=\"center\">使用UseParallelGC</td>\n<td align=\"center\">新生代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelOldGC</td>\n<td align=\"center\">使用UseParallelOldGC</td>\n<td align=\"center\">老年代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseConcMarkSweepGC</td>\n<td align=\"center\">使用CMS</td>\n<td align=\"center\">老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseG1GC</td>\n<td align=\"center\">使用G1GC</td>\n<td align=\"center\">新生代，老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewRatio</td>\n<td align=\"center\">新老生代的比值</td>\n<td align=\"center\">比如-XX:Ratio&#x3D;4，则表示新生代:老年代&#x3D;1:4，也就是新生代占整个堆内存的1&#x2F;5</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:SurvivorRatio</td>\n<td align=\"center\">两个S区和Eden区的比值</td>\n<td align=\"center\">比如-XX:SurvivorRatio&#x3D;8，也就是(S0+S1):Eden&#x3D;2:8，也就是一个S占整个新生代的1&#x2F;10</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+HeapDumpOnOutOfMemoryError</td>\n<td align=\"center\">启动堆内存溢出打印</td>\n<td align=\"center\">当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:HeapDumpPath&#x3D;heap.hprof</td>\n<td align=\"center\">指定堆内存溢出打印目录</td>\n<td align=\"center\">表示在当前目录生成一个heap.hprof文件</td>\n</tr>\n<tr>\n<td align=\"center\">XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME&#x2F;logs&#x2F;gc.log</td>\n<td align=\"center\">打印出GC日志</td>\n<td align=\"center\">可以使用不同的垃圾收集器，对比查看GC情况</td>\n</tr>\n<tr>\n<td align=\"center\">-Xss128k</td>\n<td align=\"center\">设置每个线程的堆栈大小</td>\n<td align=\"center\">经验值是3000-5000最佳</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxTenuringThreshold&#x3D;6</td>\n<td align=\"center\">提升年老代的最大临界值</td>\n<td align=\"center\">默认值为 15</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitiatingHeapOccupancyPercent</td>\n<td align=\"center\">启动并发GC周期时堆内存使用占比</td>\n<td align=\"center\">G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45.</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1HeapWastePercent</td>\n<td align=\"center\">允许的浪费堆空间的占比</td>\n<td align=\"center\">默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxGCPauseMillis&#x3D;200ms</td>\n<td align=\"center\">G1最大停顿时间</td>\n<td align=\"center\">暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:ConcGCThreads&#x3D;n</td>\n<td align=\"center\">并发垃圾收集器使用的线程数量</td>\n<td align=\"center\">默认值随JVM运行的平台不同而不同</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCLiveThresholdPercent&#x3D;65</td>\n<td align=\"center\">混合垃圾回收周期中要包括的旧区域设置占用率阈值</td>\n<td align=\"center\">默认占用率为 65%</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCCountTarget&#x3D;8</td>\n<td align=\"center\">设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数</td>\n<td align=\"center\">默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内</td>\n</tr>\n<tr>\n<td align=\"center\">XX:G1OldCSetRegionThresholdPercent&#x3D;1</td>\n<td align=\"center\">描述Mixed GC时，Old Region被加入到CSet中</td>\n<td align=\"center\">默认情况下，G1只把10%的Old Region加入到CSet中</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM-参数\"><a href=\"#JVM-参数\" class=\"headerlink\" title=\"JVM 参数\"></a>JVM 参数</h1><ol>\n<li><p>标准参数：不会随着jdk版本的变化而变化。比如：java -version、java -help</p>\n</li>\n<li><p>非标准参数：随着JDK版本的变化而变化。</p>\n<p>-X参数【用的较少】非标准参数，也就是在JDK各个版本中可能会变动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改执行方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">compiled 编译执行方式，第一次使用就编译成本地代码</span><br>java -Xcomp -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">interpreted 解释执行方式</span><br>java -Xini -version<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">mixed 默认的混合执行方式，混合模式，JVM自己来决定</span><br>java -Xmixed -version<br></code></pre></td></tr></table></figure>\n\n<p>-XX参数【用的最多：JVM调优额Debug】非标准化参数，相对不稳定。</p>\n<p>boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX:[+-]&lt;name&gt;      \t\t+或-表示启用或者禁用name属性<br>比如：<br>-XX:+UseConcMarkSweepGC  \t\t表示启用CMS类型的垃圾回收器<br>-XX:+UseG1GC       \t\t\t\t表示启用G1类型的垃圾回收器<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置JVM使用垃圾收集器 +：使用，-：未使用</span><br>-XX:+/-UseG1GC<br><br><br></code></pre></td></tr></table></figure>\n\n<p>非boolean类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">格式：-XX&lt;name&gt;=&lt;value&gt;表示name属性的值是value<br>比如：<br>-XX:MaxGCPauseMillis=500<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置初始堆内存</span><br>-XX:initialHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xms100M<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置最大堆内存</span><br>-XX:MaxHeapSize=100M # 简写方式 ===&gt;&gt;&gt; -Xmx100M<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>打印出JAVA进程中所有JVM的参数：</p>\n<ul>\n<li>执行命令 <code>java -XX:+PrintFlagsFinal -version</code> 即可打印出JVM中各参数。由于参数较多，建议将参数放入文件中查看：\t<code>java -XX:+PrintFlagsFinal -version &gt; xxx.txt</code></li>\n<li>使用  <code>jinfo -flag $&#123;参数名&#125; $&#123;PID&#125; </code>也可查看对应JVM参数值</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">-XX:+PrintFlagsFinal<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何设置JVM参数：</strong></p>\n<p><em>以下方式是JAVA进程还未启动</em></p>\n<ol>\n<li>在开发工具中，比如IDEA中的启动配置项中 VM options</li>\n<li>SpringBoot jar包 启动的命令 java -jar -Xms100M test.jar</li>\n<li>在java语言的中间件中如Tomcat中的 bin 目录下的 catalina.sh&#x2F;bat 中的JAVA_OPTIONS&#x3D;””</li>\n</ol>\n<p><em>以下方式是当JAVA进程已经启动后该如何设置</em></p>\n<ol start=\"4\">\n<li>实时修改某个JVM参数的值 <strong>jinfo修改（参数只有被标记为manageable的flags可以被实时修改)</strong></li>\n</ol>\n<p><strong>常用参数：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">含义</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">XX:CICompilerCount&#x3D;3</td>\n<td align=\"center\">最大并行编译数</td>\n<td align=\"center\">如果设置大于1，虽然编译速度会提高，但是同样影响系统稳定性，会增加JVM崩溃的可能</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitialHeapSize&#x3D;100M</td>\n<td align=\"center\">初始化堆大小</td>\n<td align=\"center\">简写-Xms100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxHeapSize&#x3D;100M</td>\n<td align=\"center\">最大堆大小</td>\n<td align=\"center\">简写-Xm x 100M</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewSize&#x3D;20M</td>\n<td align=\"center\">设置年轻代的大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxNewSize&#x3D;50M</td>\n<td align=\"center\">年轻代最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:OldSize&#x3D;50M</td>\n<td align=\"center\">设置老年代大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MetaspaceSize&#x3D;50M</td>\n<td align=\"center\">设置方法区大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxMetaspaceSize&#x3D;50M</td>\n<td align=\"center\">方法区最大大小</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelGC</td>\n<td align=\"center\">使用UseParallelGC</td>\n<td align=\"center\">新生代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseParallelOldGC</td>\n<td align=\"center\">使用UseParallelOldGC</td>\n<td align=\"center\">老年代，吞吐量优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseConcMarkSweepGC</td>\n<td align=\"center\">使用CMS</td>\n<td align=\"center\">老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+UseG1GC</td>\n<td align=\"center\">使用G1GC</td>\n<td align=\"center\">新生代，老年代，停顿时间优先</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:NewRatio</td>\n<td align=\"center\">新老生代的比值</td>\n<td align=\"center\">比如-XX:Ratio&#x3D;4，则表示新生代:老年代&#x3D;1:4，也就是新生代占整个堆内存的1&#x2F;5</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:SurvivorRatio</td>\n<td align=\"center\">两个S区和Eden区的比值</td>\n<td align=\"center\">比如-XX:SurvivorRatio&#x3D;8，也就是(S0+S1):Eden&#x3D;2:8，也就是一个S占整个新生代的1&#x2F;10</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+HeapDumpOnOutOfMemoryError</td>\n<td align=\"center\">启动堆内存溢出打印</td>\n<td align=\"center\">当JVM堆内存发生溢出时，也就是OOM，自动生成dump文件</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:HeapDumpPath&#x3D;heap.hprof</td>\n<td align=\"center\">指定堆内存溢出打印目录</td>\n<td align=\"center\">表示在当前目录生成一个heap.hprof文件</td>\n</tr>\n<tr>\n<td align=\"center\">XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStampsXloggc:$CATALINA_HOME&#x2F;logs&#x2F;gc.log</td>\n<td align=\"center\">打印出GC日志</td>\n<td align=\"center\">可以使用不同的垃圾收集器，对比查看GC情况</td>\n</tr>\n<tr>\n<td align=\"center\">-Xss128k</td>\n<td align=\"center\">设置每个线程的堆栈大小</td>\n<td align=\"center\">经验值是3000-5000最佳</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxTenuringThreshold&#x3D;6</td>\n<td align=\"center\">提升年老代的最大临界值</td>\n<td align=\"center\">默认值为 15</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:InitiatingHeapOccupancyPercent</td>\n<td align=\"center\">启动并发GC周期时堆内存使用占比</td>\n<td align=\"center\">G1之类的垃圾收集器用它来触发并发GC周期,基于整个堆的使用率,而不只是某一代内存的使用比. 值为 0 则表示”一直执行GC循环”. 默认值为 45.</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1HeapWastePercent</td>\n<td align=\"center\">允许的浪费堆空间的占比</td>\n<td align=\"center\">默认是10%，如果并发标记可回收的空间小于10%,则不会触发MixedGC。</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:MaxGCPauseMillis&#x3D;200ms</td>\n<td align=\"center\">G1最大停顿时间</td>\n<td align=\"center\">暂停时间不能太小，太小的话就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:ConcGCThreads&#x3D;n</td>\n<td align=\"center\">并发垃圾收集器使用的线程数量</td>\n<td align=\"center\">默认值随JVM运行的平台不同而不同</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCLiveThresholdPercent&#x3D;65</td>\n<td align=\"center\">混合垃圾回收周期中要包括的旧区域设置占用率阈值</td>\n<td align=\"center\">默认占用率为 65%</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:G1MixedGCCountTarget&#x3D;8</td>\n<td align=\"center\">设置标记周期完成后，对存活数据上限为G1MixedGCLIveThresholdPercent 的旧区域执行混合垃圾回收的目标次数</td>\n<td align=\"center\">默认8次混合垃圾回收，混合回收的目标是要控制在此目标次数以内</td>\n</tr>\n<tr>\n<td align=\"center\">XX:G1OldCSetRegionThresholdPercent&#x3D;1</td>\n<td align=\"center\">描述Mixed GC时，Old Region被加入到CSet中</td>\n<td align=\"center\">默认情况下，G1只把10%的Old Region加入到CSet中</td>\n</tr>\n</tbody></table>\n"},{"title":"3-JVM垃圾回收算法和垃圾收集器","_content":"# JVM垃圾回收算法和垃圾收集器\n\n## 1.什么是垃圾回收\n\n对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。\n\n### 引用计数法：\n\n*每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。*\n\n**但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。**\n\n### 可达性分析：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png)\n\n判断某个对象是否可到达。有两种方式判断是否可到达：\n\n1. 直接引用（上帝视角GC Roots）：就是**虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等**中的引用直接到达。\n\n   为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？\n\n   因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。\n\n2. 间接引用：通过别人的引用来达到。\n\n**并发的可达性分析（并发标记、浮动垃圾）：https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A**\n\n## 2.垃圾回收的策略\n\n### 垃圾收集算法\n\n+ **标记-清除**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后清除\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png)\n\n  弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。\n\n  弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。\n\n  有点：简单、明了、好操作。\n\n+ **标记-复制**\n\n  一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png)\n\n  在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png)\n\n  之后以此反复、两个循环往返。\n  \n  类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。\n  \n+ **标记-整理**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后整理。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png)\n\n  整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。\n\n---\n\n\n\n### 垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\n\n串行：Serial系列；\n\n并行【吞吐量优先】：Paraller系列；\n\n> 吞吐量：用户代码执行的时间 / （用户代码执行的时间+垃圾收集时间）99/(99+1)=99%。\n>\n> 适用于后台运算，不需要太多的交互场景。\n\n并发【停顿时间优先】：CMS、G1；\n\n> ​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。\n\nJVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。\n\n**官方JVM垃圾收集器建议：**\n\n1. 使用默认垃圾收集器\n2. 调整JVM堆的大小\n3. + 如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC\n   + 如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png)\n\n**G1（Garbage-First）：**JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。\n\nG1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png)\n\n重新设计内存空间如图所示：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png)\n\n整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。\n\n区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。\n\n官方文档（G1垃圾收集器的前世今生）：https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\n\n---\n\n\n\n#### Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\n\n**Serial：**JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配**老年代的SerialOld**配合使用。\n\n这时会出现Stop The World（STW）\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png)\n\n---\n\n\n\n**ParNew：**并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量\n\n复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png)\n\n---\n\n\n\n**ParallelScavenge**\n\n同上\n\n---\n\n\n\n#### Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\n\n**CMS：**JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。\n\n并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。\n\n因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png)\n\n**划分为四个阶段：初始标记、并发标记、重新标记、并发清理。**\n\n**初始标记：**第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。\n\n**并发标记：**第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是**浮动垃圾（把原本消亡的对象错误的标记为存活状态）**，只能等待下次清理。\n\n**重新标记：**第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。\n\n**并发清理：**第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。\n\n特点：并发收集，停顿时间较少。\n\n缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。\n\n---\n\n\n\n**Serial Old：**串行的\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png)\n\n**Paraller Old：**并行的\n\n---\n\n如何查看当前JAVA程序应用使用的是什么垃圾收集器：\n\n```shell\n# 查看进程ID\njps -l\n8720 org.jetbrains.jps.cmdline.Launcher\n10212 org.jetbrains.idea.maven.server.RemoteMavenServer36\n3764\n15480 sun.tools.jps.Jps\n4216 com.hopefun.scm.WebApplication\n# 查看当前进程下是否使用UseParallelGC\njinfo -flag UseParallelGC 4216\n-XX:+UseParallelGC\n```\n","source":"_posts/JVM/3-JVM垃圾回收算法和垃圾收集器.md","raw":"---\ntitle: 3-JVM垃圾回收算法和垃圾收集器\ntags:\n  - JVM\n  - 垃圾收集器\n  - 垃圾回收算法\ncategories:\n  - JVM\n---\n# JVM垃圾回收算法和垃圾收集器\n\n## 1.什么是垃圾回收\n\n对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。\n\n### 引用计数法：\n\n*每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。*\n\n**但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。**\n\n### 可达性分析：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png)\n\n判断某个对象是否可到达。有两种方式判断是否可到达：\n\n1. 直接引用（上帝视角GC Roots）：就是**虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等**中的引用直接到达。\n\n   为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？\n\n   因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。\n\n2. 间接引用：通过别人的引用来达到。\n\n**并发的可达性分析（并发标记、浮动垃圾）：https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A**\n\n## 2.垃圾回收的策略\n\n### 垃圾收集算法\n\n+ **标记-清除**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后清除\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png)\n\n  弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。\n\n  弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。\n\n  有点：简单、明了、好操作。\n\n+ **标记-复制**\n\n  一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png)\n\n  在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png)\n\n  之后以此反复、两个循环往返。\n  \n  类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。\n  \n+ **标记-整理**\n\n  先标记\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png)\n\n  后整理。\n\n  ![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png)\n\n  整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。\n\n---\n\n\n\n### 垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\n\n串行：Serial系列；\n\n并行【吞吐量优先】：Paraller系列；\n\n> 吞吐量：用户代码执行的时间 / （用户代码执行的时间+垃圾收集时间）99/(99+1)=99%。\n>\n> 适用于后台运算，不需要太多的交互场景。\n\n并发【停顿时间优先】：CMS、G1；\n\n> ​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。\n\nJVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。\n\n**官方JVM垃圾收集器建议：**\n\n1. 使用默认垃圾收集器\n2. 调整JVM堆的大小\n3. + 如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC\n   + 如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC\n   + 如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png)\n\n**G1（Garbage-First）：**JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。\n\nG1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png)\n\n重新设计内存空间如图所示：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png)\n\n整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。\n\n区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。\n\n官方文档（G1垃圾收集器的前世今生）：https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\n\n---\n\n\n\n#### Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\n\n**Serial：**JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配**老年代的SerialOld**配合使用。\n\n这时会出现Stop The World（STW）\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png)\n\n---\n\n\n\n**ParNew：**并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量\n\n复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png)\n\n---\n\n\n\n**ParallelScavenge**\n\n同上\n\n---\n\n\n\n#### Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\n\n**CMS：**JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。\n\n并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。\n\n因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png)\n\n**划分为四个阶段：初始标记、并发标记、重新标记、并发清理。**\n\n**初始标记：**第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。\n\n**并发标记：**第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是**浮动垃圾（把原本消亡的对象错误的标记为存活状态）**，只能等待下次清理。\n\n**重新标记：**第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。\n\n**并发清理：**第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。\n\n特点：并发收集，停顿时间较少。\n\n缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。\n\n---\n\n\n\n**Serial Old：**串行的\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png)\n\n**Paraller Old：**并行的\n\n---\n\n如何查看当前JAVA程序应用使用的是什么垃圾收集器：\n\n```shell\n# 查看进程ID\njps -l\n8720 org.jetbrains.jps.cmdline.Launcher\n10212 org.jetbrains.idea.maven.server.RemoteMavenServer36\n3764\n15480 sun.tools.jps.Jps\n4216 com.hopefun.scm.WebApplication\n# 查看当前进程下是否使用UseParallelGC\njinfo -flag UseParallelGC 4216\n-XX:+UseParallelGC\n```\n","slug":"JVM/3-JVM垃圾回收算法和垃圾收集器","published":1,"date":"2020-06-09T13:02:10.000Z","updated":"2022-11-25T17:39:15.222Z","_id":"claws4ivo00035u2bajkceyic","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM垃圾回收算法和垃圾收集器\"><a href=\"#JVM垃圾回收算法和垃圾收集器\" class=\"headerlink\" title=\"JVM垃圾回收算法和垃圾收集器\"></a>JVM垃圾回收算法和垃圾收集器</h1><h2 id=\"1-什么是垃圾回收\"><a href=\"#1-什么是垃圾回收\" class=\"headerlink\" title=\"1.什么是垃圾回收\"></a>1.什么是垃圾回收</h2><p>对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。</p>\n<h3 id=\"引用计数法：\"><a href=\"#引用计数法：\" class=\"headerlink\" title=\"引用计数法：\"></a>引用计数法：</h3><p><em>每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。</em></p>\n<p><strong>但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。</strong></p>\n<h3 id=\"可达性分析：\"><a href=\"#可达性分析：\" class=\"headerlink\" title=\"可达性分析：\"></a>可达性分析：</h3><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png\"></p>\n<p>判断某个对象是否可到达。有两种方式判断是否可到达：</p>\n<ol>\n<li><p>直接引用（上帝视角GC Roots）：就是<strong>虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等</strong>中的引用直接到达。</p>\n<p>为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？</p>\n<p>因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。</p>\n</li>\n<li><p>间接引用：通过别人的引用来达到。</p>\n</li>\n</ol>\n<p><strong>并发的可达性分析（并发标记、浮动垃圾）：<a href=\"https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A\">https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A</a></strong></p>\n<h2 id=\"2-垃圾回收的策略\"><a href=\"#2-垃圾回收的策略\" class=\"headerlink\" title=\"2.垃圾回收的策略\"></a>2.垃圾回收的策略</h2><h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><ul>\n<li><p><strong>标记-清除</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后清除</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png\"></p>\n<p>弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。</p>\n<p>弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。</p>\n<p>有点：简单、明了、好操作。</p>\n</li>\n<li><p><strong>标记-复制</strong></p>\n<p>一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png\"></p>\n<p>在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png\"></p>\n<p>之后以此反复、两个循环往返。</p>\n<p>类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。</p>\n</li>\n<li><p><strong>标记-整理</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后整理。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png\"></p>\n<p>整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"><a href=\"#垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\" class=\"headerlink\" title=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"></a>垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】</h3><p>串行：Serial系列；</p>\n<p>并行【吞吐量优先】：Paraller系列；</p>\n<blockquote>\n<p>吞吐量：用户代码执行的时间 &#x2F; （用户代码执行的时间+垃圾收集时间）99&#x2F;(99+1)&#x3D;99%。</p>\n<p>适用于后台运算，不需要太多的交互场景。</p>\n</blockquote>\n<p>并发【停顿时间优先】：CMS、G1；</p>\n<blockquote>\n<p>​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。</p>\n</blockquote>\n<p>JVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。</p>\n<p><strong>官方JVM垃圾收集器建议：</strong></p>\n<ol>\n<li>使用默认垃圾收集器</li>\n<li>调整JVM堆的大小</li>\n<li><ul>\n<li>如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC</li>\n<li>如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png\"></p>\n<p><strong>G1（Garbage-First）：</strong>JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。</p>\n<p>G1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png\"></p>\n<p>重新设计内存空间如图所示：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png\"></p>\n<p>整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。</p>\n<p>区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。</p>\n<p>官方文档（G1垃圾收集器的前世今生）：<a href=\"https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p>\n<hr>\n<h4 id=\"Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\"><a href=\"#Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\" class=\"headerlink\" title=\"Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\"></a>Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现</h4><p><strong>Serial：</strong>JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配<strong>老年代的SerialOld</strong>配合使用。</p>\n<p>这时会出现Stop The World（STW）</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png\"></p>\n<hr>\n<p><strong>ParNew：</strong>并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量</p>\n<p>复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png\"></p>\n<hr>\n<p><strong>ParallelScavenge</strong></p>\n<p>同上</p>\n<hr>\n<h4 id=\"Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\"><a href=\"#Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\" class=\"headerlink\" title=\"Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\"></a>Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现</h4><p><strong>CMS：</strong>JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。</p>\n<p>并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。</p>\n<p>因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png\"></p>\n<p><strong>划分为四个阶段：初始标记、并发标记、重新标记、并发清理。</strong></p>\n<p><strong>初始标记：</strong>第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。</p>\n<p><strong>并发标记：</strong>第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是<strong>浮动垃圾（把原本消亡的对象错误的标记为存活状态）</strong>，只能等待下次清理。</p>\n<p><strong>重新标记：</strong>第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。</p>\n<p><strong>并发清理：</strong>第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。</p>\n<p>特点：并发收集，停顿时间较少。</p>\n<p>缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。</p>\n<hr>\n<p><strong>Serial Old：</strong>串行的</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png\"></p>\n<p><strong>Paraller Old：</strong>并行的</p>\n<hr>\n<p>如何查看当前JAVA程序应用使用的是什么垃圾收集器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看进程ID</span><br>jps -l<br>8720 org.jetbrains.jps.cmdline.Launcher<br>10212 org.jetbrains.idea.maven.server.RemoteMavenServer36<br>3764<br>15480 sun.tools.jps.Jps<br>4216 com.hopefun.scm.WebApplication<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前进程下是否使用UseParallelGC</span><br>jinfo -flag UseParallelGC 4216<br>-XX:+UseParallelGC<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM垃圾回收算法和垃圾收集器\"><a href=\"#JVM垃圾回收算法和垃圾收集器\" class=\"headerlink\" title=\"JVM垃圾回收算法和垃圾收集器\"></a>JVM垃圾回收算法和垃圾收集器</h1><h2 id=\"1-什么是垃圾回收\"><a href=\"#1-什么是垃圾回收\" class=\"headerlink\" title=\"1.什么是垃圾回收\"></a>1.什么是垃圾回收</h2><p>对于内存当中无用的对象进行回收，如何去判断一个对象是不是无用的对象。</p>\n<h3 id=\"引用计数法：\"><a href=\"#引用计数法：\" class=\"headerlink\" title=\"引用计数法：\"></a>引用计数法：</h3><p><em>每个对象中都会存储一个引用计数，每增加一个引用就+1，消失一个引用就-1。当引用计数器为0时就会判断该对象是垃圾，进行回收。</em></p>\n<p><strong>但是这样会有一个弊端。就是当有两个对象互相引用时，那么这两个对象的引用计数器都不为0，那么就不会对其进行回收。</strong></p>\n<h3 id=\"可达性分析：\"><a href=\"#可达性分析：\" class=\"headerlink\" title=\"可达性分析：\"></a>可达性分析：</h3><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200429235022.png\"></p>\n<p>判断某个对象是否可到达。有两种方式判断是否可到达：</p>\n<ol>\n<li><p>直接引用（上帝视角GC Roots）：就是<strong>虚拟机栈帧中的局部或本地变量表、类加载器、static成员、常量引用、Thread等等</strong>中的引用直接到达。</p>\n<p>为什么本地或局部变量表里面的变量有它出发就可以用来判断GC Roots的判断标准呢？</p>\n<p>因为只用它表示这个栈帧正在被压栈，正在被使用，这个时候再去回收这个对象不是疯了嘛！！！同理static、常量也是一样的道理。</p>\n</li>\n<li><p>间接引用：通过别人的引用来达到。</p>\n</li>\n</ol>\n<p><strong>并发的可达性分析（并发标记、浮动垃圾）：<a href=\"https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A\">https://mp.weixin.qq.com/s/EgVPlOLArsWb86Kujykn3A</a></strong></p>\n<h2 id=\"2-垃圾回收的策略\"><a href=\"#2-垃圾回收的策略\" class=\"headerlink\" title=\"2.垃圾回收的策略\"></a>2.垃圾回收的策略</h2><h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><ul>\n<li><p><strong>标记-清除</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后清除</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001708.png\"></p>\n<p>弊端一：会有空间碎片问题，空间不连续；这时如果有大一点的对象进来，发现没有连续的空间内存去进行分配，就会再一次的触发垃圾回收机制。</p>\n<p>弊端二：在标记和清除的过程中、会扫描整个堆内存；会比较耗时。</p>\n<p>有点：简单、明了、好操作。</p>\n</li>\n<li><p><strong>标记-复制</strong></p>\n<p>一开始将这个内存空间一分为二，两边大小相等，一边使用中的，一边是保留区未使用的。划分为这样示例图：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002010.png\"></p>\n<p>在标记和清除之后，将存活的对象复制到另外一边，在将先前的一边数据全部清除掉。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430002139.png\"></p>\n<p>之后以此反复、两个循环往返。</p>\n<p>类似于堆内存中的新生代（Young）区中的Survivor区中的S0、S1，所以堆内存中的新生代（Young）区一定用的就是复制算法。</p>\n</li>\n<li><p><strong>标记-整理</strong></p>\n<p>先标记</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001643.png\"></p>\n<p>后整理。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430001728.png\"></p>\n<p>整理移动之后会得到一片连续的可分配内存空间。解决了空间碎片的问题，但是这种方式在标记和整理移动的过程中也是耗时的。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"><a href=\"#垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\" class=\"headerlink\" title=\"垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】\"></a>垃圾收集器：评判一个垃圾收集好坏和调优关注的是【高吞吐量、少停顿时间、少垃圾回收次数】</h3><p>串行：Serial系列；</p>\n<p>并行【吞吐量优先】：Paraller系列；</p>\n<blockquote>\n<p>吞吐量：用户代码执行的时间 &#x2F; （用户代码执行的时间+垃圾收集时间）99&#x2F;(99+1)&#x3D;99%。</p>\n<p>适用于后台运算，不需要太多的交互场景。</p>\n</blockquote>\n<p>并发【停顿时间优先】：CMS、G1；</p>\n<blockquote>\n<p>​\t适用于用户交互较多的场景，给用户更好的体验感；如Web应用。</p>\n</blockquote>\n<p>JVM垃圾收集器调优的原则：尽可能在停顿时间较低的情况下，追求高的吞吐量和少的垃圾回收次数。</p>\n<p><strong>官方JVM垃圾收集器建议：</strong></p>\n<ol>\n<li>使用默认垃圾收集器</li>\n<li>调整JVM堆的大小</li>\n<li><ul>\n<li>如果应用程序内存空间比较小（比如100MB），直接选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序运行在一个单核的CPU，和没有停顿时间要求的情况下；可以让JVM自己去选择或者选择SerialGC串行收集器。-XX:+UseSerialGC</li>\n<li>如果应用程序更加关注的吞吐量也没有停顿时间要求的情况下，可以让JVM自己去选择或者选择并行的ParallelGC。-XX+UseParallelGC</li>\n<li>如果应用程序对停顿时间要求比较高（比如小于1秒钟的时间），那么就选择CMS或者G1的收集器。-XX:+UseConcMarkSweepGC 或 -XX:+UseG1GC</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010307.png\"></p>\n<p><strong>G1（Garbage-First）：</strong>JDK7出现，JDK8推荐使用，JDK9默认垃圾收集器。</p>\n<p>G1的整个垃圾收集并清理的过程阶段大体上和CMS收集器是不变的。在最后一个阶段进行删选回收（选择性的回收，进行优先级的回收：优先回收区域（Region）内存活对象较少的）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234435.png\"></p>\n<p>重新设计内存空间如图所示：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506234629.png\"></p>\n<p>整个内存划分为一个个大小相等的区域（Region）。逻辑上对这些区域（Region）进行标记，这些标记有Eden区，Survivor区和Old区。这时的物理空间上就不在是连续空间了；之前的空间划分都是连续的空间。假如回收掉某个Old区的数据，这时这个区域也可能会标位Survivor区或者Eden区。</p>\n<p>区域（Region）内还有一个记录rememberd Set。以前会全盘扫描堆内存，是比较耗时的。这时会记录一个对象存活的地方，对象的引用指向；这样就不用在全盘扫描了耗时比较低。</p>\n<p>官方文档（G1垃圾收集器的前世今生）：<a href=\"https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p>\n<hr>\n<h4 id=\"Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\"><a href=\"#Young-Generation（新生代）-垃圾收集算法一定是标记-复制算法的实现\" class=\"headerlink\" title=\"Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现\"></a>Young Generation（新生代）- 垃圾收集算法一定是标记-复制算法的实现</h4><p><strong>Serial：</strong>JDK1.3出现的，单线程收集，STW。那时候的CPU还是单核CPU。单线程处理效率比较高，在进行垃圾回收的时候，会暂停业务线程，等待垃圾回收完成之后，在让业务线程再继续执行。会搭配<strong>老年代的SerialOld</strong>配合使用。</p>\n<p>这时会出现Stop The World（STW）</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010332.png\"></p>\n<hr>\n<p><strong>ParNew：</strong>并行垃圾收集器多个垃圾线程一起跑，STW ，停顿时间较多，更加关注吞吐量</p>\n<p>复制算法、并行多线程垃圾收集器，解决了单线程的局限性，但是还是Stop The World（STW）。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231306.png\"></p>\n<hr>\n<p><strong>ParallelScavenge</strong></p>\n<p>同上</p>\n<hr>\n<h4 id=\"Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\"><a href=\"#Tenured-Generation（老年代）-这里是标记-清除、或标记-整理的算法实现\" class=\"headerlink\" title=\"Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现\"></a>Tenured Generation（老年代）- 这里是标记-清除、或标记-整理的算法实现</h4><p><strong>CMS：</strong>JDK5出现的，并发收集，两个阶段会STW（初始标记、重新标记），更加关注停顿时间。在JDK8中已经不推荐使用，JDK8推荐使用G1收集器。</p>\n<p>并发：垃圾收集线程和业务代码线程一起跑。但是并不能做到全程一起执行。</p>\n<p>因为垃圾收集线程在执行的时候对垃圾进行标记，这时业务代码线程也在执行，也会产生新的垃圾。至少在垃圾收集线程在进行标记的阶段，业务代码暂定的是不执行的。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200506231931.png\"></p>\n<p><strong>划分为四个阶段：初始标记、并发标记、重新标记、并发清理。</strong></p>\n<p><strong>初始标记：</strong>第一阶段会Stop The World（STW）。这个阶段执行的时间是非常快的，如果开启多个线程，会消耗线程之前的切换反而会增加时间成本。</p>\n<p><strong>并发标记：</strong>第二阶段就是可达性分析，对第一阶段的垃圾进行跟踪。在这个阶段垃圾线程和业务线程是一起执行的；为啥可以一起执行呢？因为在第一阶段初始标记完成后大局已定，第二阶段的并发标记只是做增量的更新。如果此时又产生了垃圾那么就是<strong>浮动垃圾（把原本消亡的对象错误的标记为存活状态）</strong>，只能等待下次清理。</p>\n<p><strong>重新标记：</strong>第三阶段这时会停止业务代码的线程Stop The World（STW），会多线程垃圾收集器并行一起跑，一起执行。</p>\n<p><strong>并发清理：</strong>第四阶段垃圾收集线程和业务代码线程再次一起执行，一起跑。</p>\n<p>特点：并发收集，停顿时间较少。</p>\n<p>缺点：会产生浮动垃圾。其次由于采用的是标记-清除这样的算法会产生大量的空间碎片。</p>\n<hr>\n<p><strong>Serial Old：</strong>串行的</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200430010349.png\"></p>\n<p><strong>Paraller Old：</strong>并行的</p>\n<hr>\n<p>如何查看当前JAVA程序应用使用的是什么垃圾收集器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看进程ID</span><br>jps -l<br>8720 org.jetbrains.jps.cmdline.Launcher<br>10212 org.jetbrains.idea.maven.server.RemoteMavenServer36<br>3764<br>15480 sun.tools.jps.Jps<br>4216 com.hopefun.scm.WebApplication<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前进程下是否使用UseParallelGC</span><br>jinfo -flag UseParallelGC 4216<br>-XX:+UseParallelGC<br></code></pre></td></tr></table></figure>\n"},{"title":"6-JVM常用工具和优化","_content":"# JVM 常用工具和优化\n\n## JDK 自带的\n\n### jconsole\n\n### jvisualvm\n\n## 三方的工具\n\n###\tarthas\n\n##\t调优关注点（内存、GC）：\n\n**内存**\n\n+ MAT\n+ XElephant\n+ 在线：perfma\n\n**GC**\n\n拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）\n\n+ 本地：GCViewer\n+ 在线：gceasy.io\n\n---\n\n\n\n# 在什么情况下调优 \n\n## **体现系统性能的参考因素**\n\n首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ \n\n- **响应时间：**响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。\n- **TPS：**指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。\n- **计算机资源分配使用率：**通常由 CPU 占用率、内存使用率、磁盘 I/O、网络 I/O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。\n\n## **JVM** **调优都做些什么？**\n\n具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。\n\n- **内存空间的分配设置：**JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。\n- **选择合适的垃圾回收器：**垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。\n\n## **是否需要 JVM** **调优？**\n\n一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 \n\n在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 \n\n再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 \n\nJVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。\n\n## JVM错误排查与解决案例\n\n**JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题**\n\n### 案列一：\n\n**发现问题：**JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】\n\n**排查问题：**打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）\n\n**解决问题：**适当增加堆内存空间，或者选择合适的垃圾收集器\n\n###\t案例二：\n\n**发现问题：**OOM\n\n**排查问题：**在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）\n\n**解决问题：**如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例\n\n### 案例三\n\n**发现问题：**CPU负载过高\n\n**排查问题：**命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大\n\n**解决问题：**具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求\n\n### 案例四\n\n**发现问题：**死锁\n\n**排查问题：**可以通过 jstack 命令去查看相关线程锁的信息\n\n**解决问题：**找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁\n\n###\t案例五\n\n**发现问题：**线程池不够用了\n\n**排查问题：**通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的\n\n**解决问题：**适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）\n\n","source":"_posts/JVM/6-JVM常用工具和优化.md","raw":"---\ntitle: 6-JVM常用工具和优化\ntags:\n  - JVM\ncategories:\n  - JVM\n---\n# JVM 常用工具和优化\n\n## JDK 自带的\n\n### jconsole\n\n### jvisualvm\n\n## 三方的工具\n\n###\tarthas\n\n##\t调优关注点（内存、GC）：\n\n**内存**\n\n+ MAT\n+ XElephant\n+ 在线：perfma\n\n**GC**\n\n拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）\n\n+ 本地：GCViewer\n+ 在线：gceasy.io\n\n---\n\n\n\n# 在什么情况下调优 \n\n## **体现系统性能的参考因素**\n\n首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ \n\n- **响应时间：**响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。\n- **TPS：**指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。\n- **计算机资源分配使用率：**通常由 CPU 占用率、内存使用率、磁盘 I/O、网络 I/O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。\n\n## **JVM** **调优都做些什么？**\n\n具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。\n\n- **内存空间的分配设置：**JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。\n- **选择合适的垃圾回收器：**垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。\n\n## **是否需要 JVM** **调优？**\n\n一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 \n\n在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 \n\n再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 \n\nJVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。\n\n## JVM错误排查与解决案例\n\n**JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题**\n\n### 案列一：\n\n**发现问题：**JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】\n\n**排查问题：**打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）\n\n**解决问题：**适当增加堆内存空间，或者选择合适的垃圾收集器\n\n###\t案例二：\n\n**发现问题：**OOM\n\n**排查问题：**在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）\n\n**解决问题：**如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例\n\n### 案例三\n\n**发现问题：**CPU负载过高\n\n**排查问题：**命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大\n\n**解决问题：**具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求\n\n### 案例四\n\n**发现问题：**死锁\n\n**排查问题：**可以通过 jstack 命令去查看相关线程锁的信息\n\n**解决问题：**找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁\n\n###\t案例五\n\n**发现问题：**线程池不够用了\n\n**排查问题：**通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的\n\n**解决问题：**适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）\n\n","slug":"JVM/6-JVM常用工具和优化","published":1,"date":"2020-05-14T17:18:59.000Z","updated":"2022-11-25T17:39:15.231Z","_id":"claws4ivq00065u2b0mk1fa15","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JVM-常用工具和优化\"><a href=\"#JVM-常用工具和优化\" class=\"headerlink\" title=\"JVM 常用工具和优化\"></a>JVM 常用工具和优化</h1><h2 id=\"JDK-自带的\"><a href=\"#JDK-自带的\" class=\"headerlink\" title=\"JDK 自带的\"></a>JDK 自带的</h2><h3 id=\"jconsole\"><a href=\"#jconsole\" class=\"headerlink\" title=\"jconsole\"></a>jconsole</h3><h3 id=\"jvisualvm\"><a href=\"#jvisualvm\" class=\"headerlink\" title=\"jvisualvm\"></a>jvisualvm</h3><h2 id=\"三方的工具\"><a href=\"#三方的工具\" class=\"headerlink\" title=\"三方的工具\"></a>三方的工具</h2><h3 id=\"arthas\"><a href=\"#arthas\" class=\"headerlink\" title=\"arthas\"></a>arthas</h3><h2 id=\"调优关注点（内存、GC）：\"><a href=\"#调优关注点（内存、GC）：\" class=\"headerlink\" title=\"调优关注点（内存、GC）：\"></a>调优关注点（内存、GC）：</h2><p><strong>内存</strong></p>\n<ul>\n<li>MAT</li>\n<li>XElephant</li>\n<li>在线：perfma</li>\n</ul>\n<p><strong>GC</strong></p>\n<p>拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）</p>\n<ul>\n<li>本地：GCViewer</li>\n<li>在线：gceasy.io</li>\n</ul>\n<hr>\n<h1 id=\"在什么情况下调优\"><a href=\"#在什么情况下调优\" class=\"headerlink\" title=\"在什么情况下调优\"></a>在什么情况下调优</h1><h2 id=\"体现系统性能的参考因素\"><a href=\"#体现系统性能的参考因素\" class=\"headerlink\" title=\"体现系统性能的参考因素\"></a><strong>体现系统性能的参考因素</strong></h2><p>首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ </p>\n<ul>\n<li><strong>响应时间：</strong>响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。</li>\n<li><strong>TPS：</strong>指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。</li>\n<li><strong>计算机资源分配使用率：</strong>通常由 CPU 占用率、内存使用率、磁盘 I&#x2F;O、网络 I&#x2F;O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。</li>\n</ul>\n<h2 id=\"JVM-调优都做些什么？\"><a href=\"#JVM-调优都做些什么？\" class=\"headerlink\" title=\"JVM 调优都做些什么？\"></a><strong>JVM</strong> <strong>调优都做些什么？</strong></h2><p>具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。</p>\n<ul>\n<li><strong>内存空间的分配设置：</strong>JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。</li>\n<li><strong>选择合适的垃圾回收器：</strong>垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。</li>\n</ul>\n<h2 id=\"是否需要-JVM-调优？\"><a href=\"#是否需要-JVM-调优？\" class=\"headerlink\" title=\"是否需要 JVM 调优？\"></a><strong>是否需要 JVM</strong> <strong>调优？</strong></h2><p>一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 </p>\n<p>在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 </p>\n<p>再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 </p>\n<p>JVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。</p>\n<h2 id=\"JVM错误排查与解决案例\"><a href=\"#JVM错误排查与解决案例\" class=\"headerlink\" title=\"JVM错误排查与解决案例\"></a>JVM错误排查与解决案例</h2><p><strong>JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题</strong></p>\n<h3 id=\"案列一：\"><a href=\"#案列一：\" class=\"headerlink\" title=\"案列一：\"></a>案列一：</h3><p><strong>发现问题：</strong>JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】</p>\n<p><strong>排查问题：</strong>打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）</p>\n<p><strong>解决问题：</strong>适当增加堆内存空间，或者选择合适的垃圾收集器</p>\n<h3 id=\"案例二：\"><a href=\"#案例二：\" class=\"headerlink\" title=\"案例二：\"></a>案例二：</h3><p><strong>发现问题：</strong>OOM</p>\n<p><strong>排查问题：</strong>在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）</p>\n<p><strong>解决问题：</strong>如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例</p>\n<h3 id=\"案例三\"><a href=\"#案例三\" class=\"headerlink\" title=\"案例三\"></a>案例三</h3><p><strong>发现问题：</strong>CPU负载过高</p>\n<p><strong>排查问题：</strong>命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大</p>\n<p><strong>解决问题：</strong>具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求</p>\n<h3 id=\"案例四\"><a href=\"#案例四\" class=\"headerlink\" title=\"案例四\"></a>案例四</h3><p><strong>发现问题：</strong>死锁</p>\n<p><strong>排查问题：</strong>可以通过 jstack 命令去查看相关线程锁的信息</p>\n<p><strong>解决问题：</strong>找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁</p>\n<h3 id=\"案例五\"><a href=\"#案例五\" class=\"headerlink\" title=\"案例五\"></a>案例五</h3><p><strong>发现问题：</strong>线程池不够用了</p>\n<p><strong>排查问题：</strong>通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的</p>\n<p><strong>解决问题：</strong>适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM-常用工具和优化\"><a href=\"#JVM-常用工具和优化\" class=\"headerlink\" title=\"JVM 常用工具和优化\"></a>JVM 常用工具和优化</h1><h2 id=\"JDK-自带的\"><a href=\"#JDK-自带的\" class=\"headerlink\" title=\"JDK 自带的\"></a>JDK 自带的</h2><h3 id=\"jconsole\"><a href=\"#jconsole\" class=\"headerlink\" title=\"jconsole\"></a>jconsole</h3><h3 id=\"jvisualvm\"><a href=\"#jvisualvm\" class=\"headerlink\" title=\"jvisualvm\"></a>jvisualvm</h3><h2 id=\"三方的工具\"><a href=\"#三方的工具\" class=\"headerlink\" title=\"三方的工具\"></a>三方的工具</h2><h3 id=\"arthas\"><a href=\"#arthas\" class=\"headerlink\" title=\"arthas\"></a>arthas</h3><h2 id=\"调优关注点（内存、GC）：\"><a href=\"#调优关注点（内存、GC）：\" class=\"headerlink\" title=\"调优关注点（内存、GC）：\"></a>调优关注点（内存、GC）：</h2><p><strong>内存</strong></p>\n<ul>\n<li>MAT</li>\n<li>XElephant</li>\n<li>在线：perfma</li>\n</ul>\n<p><strong>GC</strong></p>\n<p>拿到GC日志，分析GC日志（吞吐量，停顿时间，垃圾回收次数；这三个是评判垃圾收集器好坏的标准）</p>\n<ul>\n<li>本地：GCViewer</li>\n<li>在线：gceasy.io</li>\n</ul>\n<hr>\n<h1 id=\"在什么情况下调优\"><a href=\"#在什么情况下调优\" class=\"headerlink\" title=\"在什么情况下调优\"></a>在什么情况下调优</h1><h2 id=\"体现系统性能的参考因素\"><a href=\"#体现系统性能的参考因素\" class=\"headerlink\" title=\"体现系统性能的参考因素\"></a><strong>体现系统性能的参考因素</strong></h2><p>首先我们需要知道系统当前的运行状况，也就是系统的性能好坏，才能判断是否需要调优。如果系统的响应时间很短，计算机的资源使用也很低，那我们做系统调优就完全是为了调优而调优。那么衡量系统性能的指标到底有哪些呢？ </p>\n<ul>\n<li><strong>响应时间：</strong>响应时间是衡量系统性能的重要指标之一，响应时间越短，性能越好，一般一个接口的响应时间是在毫秒级。响应时间还包括数据库响应时间、服务端响应时间、网络响应时间、客户端响应时间。</li>\n<li><strong>TPS：</strong>指系统接口的 TPS（每秒事务处理量），因为 TPS 体现了接口的性能，TPS 越大，性能越好。在系统中，吞吐量分为两种：磁盘吞吐量和网络吞吐量。</li>\n<li><strong>计算机资源分配使用率：</strong>通常由 CPU 占用率、内存使用率、磁盘 I&#x2F;O、网络 I&#x2F;O 来表示资源使用率。这几个参数好比一个木桶，如果其中任何一块木板出现短板，任何一项分配不合理，对整个系统性能的影响都是毁灭性的。</li>\n</ul>\n<h2 id=\"JVM-调优都做些什么？\"><a href=\"#JVM-调优都做些什么？\" class=\"headerlink\" title=\"JVM 调优都做些什么？\"></a><strong>JVM</strong> <strong>调优都做些什么？</strong></h2><p>具体来说 JVM 调优需要包括两方面：合理地设置  JVM 的内存空间和选择合适的垃圾回收器。</p>\n<ul>\n<li><strong>内存空间的分配设置：</strong>JVM 内存分配不合理带来的性能表现并不会像内存溢出问题这么突出，最直接的表现就是频繁的 GC，这会导致上下文切换等性能问题，从而降低系统的吞吐量、增加系统的响应时间。具体的实现包括调整堆内存空间减少 Full GC、调整年轻代减少 MinorGC、设置合理的 Eden 和 Survivor 区的比例。</li>\n<li><strong>选择合适的垃圾回收器：</strong>垃圾回收主要是指堆和方法区的回收，堆中的回收主要是对象的回收，方法区的回收主要是废弃常量和无用的类的回收。垃圾收集器的种类很多，不同的场景有不同的选择。对于每次操作的响应时间要求比较高的，我们可以选择响应速度较快的 GC回收器，比如 CMS 回收器和 G1 回收器；而对系统吞吐量有较高要求时，就可以选择 Parallel Scavenge 回收器来提高系统的吞吐量。</li>\n</ul>\n<h2 id=\"是否需要-JVM-调优？\"><a href=\"#是否需要-JVM-调优？\" class=\"headerlink\" title=\"是否需要 JVM 调优？\"></a><strong>是否需要 JVM</strong> <strong>调优？</strong></h2><p>一般项目肯定是不需要进行 JVM 调优的，因为 JVM 本身就是为这种低延时、高并发、大吞吐的服务设计和优化的，我们很少需要去改变什么。所以，我们往往更偏重于应用服务本身的调优。 </p>\n<p>在一些应用中，比如大数据计算引擎，是一种非常极端的 JVM 应用，对延时的要求并不高，但对吞吐量要求很高，会有大量的短生命周期对象产生，同时也有大量的对象生存时间非常久，我们就需要对特定的一些 JVM 参数进行修改。 </p>\n<p>再比如生产环境中出现内存溢出，我们需要判断是由于大峰值下没有限流，瞬间创建大量对象而导致的内存溢出，还是是由于内存泄漏而导致的内存溢出。对于内存泄漏导致的，这种问题就是程序的 Bug，我们需要及时找到问题代码进行修改，而不是调整 JVM。 </p>\n<p>JVM 在很大程度上减轻了 Java 开发人员投入到对象生命周期管理的精力。在使用对象的时候，JVM 会自动分配内存给对象，在不使用的时候，垃圾回收器会自动回收对象，释放占用的内存。所以一般情况下我们是不需要调优的。当然事无绝对，某些特殊场景就需要我们进行参数调整，但调整的前提一定是你对 JVM 的运行原理非常熟悉才行。</p>\n<h2 id=\"JVM错误排查与解决案例\"><a href=\"#JVM错误排查与解决案例\" class=\"headerlink\" title=\"JVM错误排查与解决案例\"></a>JVM错误排查与解决案例</h2><p><strong>JVM性能优化到底从发现到解决的历程：发现问题-排查问题-解决问题</strong></p>\n<h3 id=\"案列一：\"><a href=\"#案列一：\" class=\"headerlink\" title=\"案列一：\"></a>案列一：</h3><p><strong>发现问题：</strong>JVM日志 gc.log 文件，通过JVM工具（比如：gceasy）查看并发现问题；比如GC的次数过多；可以通过工具查看到GC次数【新生代和老年代分别的GC次数】。GC频繁：如何判断GC频繁呢？有个参照【比如服务刚上线GC5次，运行一段时间后10次，在之后30次，在之后50次，依次类推】</p>\n<p><strong>排查问题：</strong>打印出JVM GC日志，查看minorGC（新生代GC）或者majorGC（老年代GC）</p>\n<p><strong>解决问题：</strong>适当增加堆内存空间，或者选择合适的垃圾收集器</p>\n<h3 id=\"案例二：\"><a href=\"#案例二：\" class=\"headerlink\" title=\"案例二：\"></a>案例二：</h3><p><strong>发现问题：</strong>OOM</p>\n<p><strong>排查问题：</strong>在JVM参数中配置，如果发生了OOM错误时自动dump下相关的.hprof文件，对该文件通过工具（比如MAT或者在线的perfma）进行分析；分析之后当找到占用内存比较大的对象对应的线程的业务代码（可能是程序死循环，或者后端程序并发量比较大）</p>\n<p><strong>解决问题：</strong>如果是并发量比较大，就减少对后端程序的访问；通过Nginx增加机器，负载均衡，权重比例</p>\n<h3 id=\"案例三\"><a href=\"#案例三\" class=\"headerlink\" title=\"案例三\"></a>案例三</h3><p><strong>发现问题：</strong>CPU负载过高</p>\n<p><strong>排查问题：</strong>命令：top\tjps\tjinfo\tjstat\tjmap 等这些命令灵活配合使用查看；可能是服务程序处理压力过大</p>\n<p><strong>解决问题：</strong>具体看情况而论，可以集群部署、或者通过中间件（MQ、Kafka等）实现异步请求</p>\n<h3 id=\"案例四\"><a href=\"#案例四\" class=\"headerlink\" title=\"案例四\"></a>案例四</h3><p><strong>发现问题：</strong>死锁</p>\n<p><strong>排查问题：</strong>可以通过 jstack 命令去查看相关线程锁的信息</p>\n<p><strong>解决问题：</strong>找到对应的业务代码，进行修改；或者使用zk、redis实现分布式锁</p>\n<h3 id=\"案例五\"><a href=\"#案例五\" class=\"headerlink\" title=\"案例五\"></a>案例五</h3><p><strong>发现问题：</strong>线程池不够用了</p>\n<p><strong>排查问题：</strong>通过JDK的工具 jconcole jvisualvm 查看哪些线程得不到释放的</p>\n<p><strong>解决问题：</strong>适当的对后端代码优化，及时释放资源、合理的设置线程池中的参数（大小）</p>\n"},{"title":"十大知识领域","_content":"\n#\t十大知识领域\n\n## 整合-项目整合管理\n\n> 识别、定义、组合、统一和协调个项目管理过程组的各种过程和活动而展开的活动与过程。\n>\n> 整合：统一、合并、沟通和简历联系；贯穿项目始终\n\n###\t七个过程组\n\n#### 一、制定项目章程（启动）\n\n> 执行一次\n>\n> 编写一份正式批准的项目，授权项目经理使用组织资源的文件过程。里面描述高层级的期望\n>\n> 作用：\n>\n> > 明确项目与组织战略目标之间的直接联系\n> >\n> > 确立项目的正式地位\n> >\n> > 展示组织对项目的承诺\n>\n> 解读：\n>\n> > 明确定义项目开始和项目边界（边界模糊）\n> >\n> > 项目章程一旦被批准，就标志着项目正式启动\n> >\n> > 高层对项目的支持\n\n**输入：**\n\n1. 商业文件\n   - 商业论证\n   - 效益管理计划\n2. 协议\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集：\n   + 头脑风暴\n   + 焦点小组\n   + 访谈\n3. 人机关系与团队技能：\n   + 冲突管理\n   + 引导\n   + 会议管理\n4. 会议\n\n**输出：**\n\n1. 项目章程\n\n   > 是由项目启动者或发起人发布的，正式批准项目成立，并授权项目经理使用组织资源开展项目活动的文件\n\n2. 假设日志\n\n#### 二、制定项目计划（规划）\n\n> 执行一次\n>\n> 定义、准备和协调项目计划的所有组成部分，并把他们整理合为一份综合项目管理计划的过程\n>\n> 作用：综合文件，确定所有项目工作的基础及其执行方式\n>\n> 性质：必须是综合，经批准的，现实可行的，正式的\n\n**输入：**\n\n1. 项目章程\n2. 其他过程的输出\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集：\n   + 头脑风暴\n   + 核对单\n   + 焦点小组\n   + 访谈\n3. 人际关系与团队技能：\n   + 冲突管理\n   + 引导\n   + 会议管理\n4. 会议\n\n**输出：**\n\n1. 项目管理计划\n\n#### 三、指导与管理项目工作（执行）\n\n> 整个项目期间开展\n>\n> 实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准的变更过程\n>\n> 作用：对项目工作提供综合管理，提高项目成功的可能性\n\n**输入：**\n\n1. 项目管理计划\n2. 项目文件：\n   + 变更日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目沟通记录\n   + 项目进度计划\n   + 需求跟踪矩阵\n   + 风险登记册\n   + 风险报告\n3. 经批准的变更请求\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 项目管理信息系统\n3. 会议\n\n**输出：**\n\n1. 可交付成果\n2. 工作绩效数据\n3. 问题日志\n4. 变更请求\n5. 项目管理计划更新\n6. 项目文件更新：\n   + 活动清单\n   + 假设日志\n   + 经验教训登记册\n   + 需求文件\n   + 风险登记册\n   + 相关方登记册\n7. 组织过程资产\n\n#### 四、管理知识领域（执行）\n\n>整个项目期间开展\n>\n>使用现有的只是并生成新知识，实现项目目标，且帮助组织学习的过程。\n\n**输入：**\n\n1. 项目管理计划\n2. 项目文件：\n   + 项目团队派工单\n   + 资源分解结构\n   + 供方选择标准\n   + 相关方登记册\n3. 可交付成果\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 知识管理\n3. 信息管理\n4. 人际关系与团队技能：\n   + 积极倾听\n   + 引导\n   + 领导力\n   + 人际交往\n   + 政治意识\n\n**输出：**\n\n1. 经验教训登记册\n2. 项目管理计划更新\n3. 组织过程资产更新\n\n#### 五、监控项目工作（监控）\n\n> 整个项目期间开展\n>\n> 跟踪、审查和报告整体项目进展，实现项目管理计划中确定的绩效目标过程\n>\n> 作用：让相关方了解项目的当前状态并认可为处理绩效问题而采取的行动，以及通过成本和进度预测，让相关方了解未来项目状态\n>\n> 工作内容：\n>\n> - 项目的实际绩效与项目管理计划进行比较\n> - 定期评估项目记下，决定是否需要采取纠正或预防措施，并推荐必要的措施\n> - 检查单个项目风险的状态\n> - 维护一个准确且及时更新的信息库，以反应项目产品及相关文件的情况\n> - 为状态报告、进展测量和预测提供信息\n> - 做出预测，以更新当前的成本与进度信息\n> - 监督已批准变更的实施情况\n> - 确保项目与商业需求保持一致\n\n**输入：**\n\n1. 项目管理计划\n2. 项目文件：\n   + 假设日志\n   + 估算依据\n   + 成本预测\n   + 问题日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 质量报告\n   + 风险登记册\n   + 风险报告\n   + 进度预测\n3. 工作绩效信息\n4. 协议\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析：\n   + 备选方案分析\n   + 成本效益分析\n   + 挣值分析\n   + 根本原因分析\n   + 趋势分析\n   + 偏差分析\n3. 决策\n4. 会议\n\n**输出：**\n\n1. 工作绩效报告\n2. 变更请求\n3. 项目管理计划更新\n4. 项目文件更新：\n   + 成本预测\n   + 问题日志\n   + 经验教训登记册\n   + 风险登记册\n   + 进度预测\n\n#### 六、实施整体变更控制（监控）\n\n> 整个项目期间开展\n>\n> 审查所有变更请求、批准变更、管理对可交付成果、组织过程资产、项目文件和项目管理计划变更，并对变更处理结果进行沟通的过程\n>\n> 作用：确保对项目中已记录在案的变更做综合评审\n\n变更控制流程：\n\n1. 消除变更的根本原因\n2. 识别并确认变更\n3. 在知识领域分析影响\n4. **评估变更整体影响（整体变更控制）**\n5. **寻找可行方案（整体变更控制）**\n6. **批准或拒绝变更（整体变更控制）**\n7. **更新变更日志（整体变更控制）**\n8. **更新计划或基准（整体变更控制）**\n9. 沟通变更决定\n10. 实施跟踪确认变更\n\n**输入：**\n\n1. 项目管理计划：\n   + 变更管理计划\n   + 配置管理计划\n   + 范围基准\n   + 进度基准\n   + 成本基准\n2. 项目文件：\n   + 估算依据\n   + 需求跟踪矩阵\n   + 风险报告\n3. 工作绩效报告\n4. 变更请求\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 变更控制工具\n3. 数据分析：\n   + 备选方案分析\n   + 成本效益分析\n4. 决策：\n   + 投票\n   + 独裁型决策制定\n   + 多标准决策分析\n5. 会议\n\n**输出：**\n\n1. 批准的变更请求\n2. 项目管理计划更新\n3. 项目文件更新：\n   + 变更日志\n\n#### 七、结束项目或阶段（收尾）\n\n> 开展一次\n>\n> 结束项目或阶段是终结项目、阶段或合同的所有活动的过程\n>\n> 作用：完成计划工作、总结经验教训、存档项目或阶段信息、释放组织资源以开展新工作\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n3. 项目文件：\n   + 假设日志\n   + 估算依据\n   + 变更日志\n   + 问题日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目沟通记录\n   + 质量控制车辆结果\n   + 质量报告\n   + 需求文件\n   + 风险登记册\n   + 风险报告\n4. 验收的可交付成果\n5. 商业文件：\n   + 商业论证\n   + 效益管理计划\n6. 协议\n7. 采购文件\n8. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析：\n   + 文件分析\n   + 回归分析\n   + 趋势分析\n   + 偏差分析\n3. 会议\n\n**输出：**\n\n1. 项目文件更新：\n   + 经验教训登记册\n2. 最终产品、服务或成果移交\n3. 最终报告\n4. 组织过程资产更新：\n   + 项目文件\n   + 运营和支持文件\n   + 项目或阶段收尾文件\n   + 经验教训库\n\n## 范围-项目范围管理\n\n> 确保项目做且只做所需的全部工作，以成功完成项目的各个过程\n\n项目范围：有时包含产品范围，交付具有规定相遇功能的产品。服务或成果而必须完成的工作；完成情况根据**管理计划**衡量\n\n产品范围：某项产品、服务或成果所具有的特征和功能；完成情况根据**产品需求**衡量\n\n**与范围有关的文件：**\n\n>商业文件\n>\n>项目章程\n>\n>需求文件\n>\n>需求跟踪矩阵\n>\n>范围基准\n>\n>> 项目范围说明书\n>>\n>> 工作分解结构\n>>\n>> WBS词典\n>\n>采购工作说明书\n\n### 六个过程组\n\n#### 一、规划范围管理（规划）\n\n> 记录如何定义、确认和控制项目范围及产品范围，而创建范围管理计划的过程\n>\n> 作用：在整个项目期间如何管理范围提供指南和方向\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划：\n   + 质量管理计划\n   + 项目生命周期描述\n   + 开发方法\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析：\n   + 备选方案分析\n3. 会议\n\n**输出：**\n\n1. 范围管理计划\n2. 需求管理计划\n\n#### 二、收集需求（规划）\n\n> 实现项目目标而确定、记录并管理相关方的需要和需求的过程\n>\n> 作用：为定义和管理项目范围（包含产品范围）奠定基础\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   + 范围管理计划\n   + 需求管理计划\n   + 相关方参与计划\n3. 项目文件\n   + 假设日志\n   + 经验教育登记册\n   + 相关方登记册\n4. 商业文件\n   + 商业论证\n5. 协议\n6. 事业环境因素\n7. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   + 头脑风暴\n   + 访谈\n   + 焦点小组\n   + 问卷调查\n   + 标杆对照\n3. 数据分析\n   + 文件分析\n4. 决策\n   + 投票\n   + 多标准决策分析\n5. 数据表现\n   + 亲和图\n   + 思维导图\n6. 人际关系与团队技能\n   + 名义小组（排序）\n   + 观察、交谈\n   + 引导、引导式研讨会\n7. 系统关系图\n8. 原型法\n\n**输出：**\n\n1. 需求文件\n2. 需求跟踪矩阵\n\n#### 三、定义范围（规划）\n\n> 指定项目和产品详细描述过程\n>\n> 作用：描述产品、服务或成果的边界和验收标准\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   + 范围管理计划\n3. 项目文件\n   + 假设日志\n   + 需求文件\n   + 风险登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n   + 备选方案分析\n3. 决策\n   + 多标准决策分析\n4. 人际关系与团队技能\n   + 引导\n5. 产品分析\n\n**输出：**\n\n1. 项目范围说明书\n2. 项目文件更新\n   + 假设日志\n   + 需求文件\n   + 需求跟踪矩阵\n   + 相关方登记册\n\n#### 四、创建WBS（规划）\n\n> 把项目可交付成果和项目工作分解成较小的、更易于管理的组件过程\n>\n> 作用：对所要交付的内容一共一个结构化的视图\n\n工作分解结构：\n\n> WBS是对项目团队为实现项目目标、创建可交付成果而需要实施的全部工作范围的层级分解；\n>\n> 并且定义了项目的总范围，代表着经批准的当前项目范围说明书中所规定的工作。\n\n**输入：**\n\n1. 项目管理计划\n   + 范围管理计划\n2. 项目文件\n   + 项目范围说明书\n   + 需求文件\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 分解：100%原则、4至6层，最底层工作包，80小时（两周）原则、责任人、暂时不能分解的设置规划包\n\n**输出：**\n\n1. 范围基准\n2. 项目文件更新\n   + 假设日志\n   + 需求文件\n\n#### 五、确认范围（监控）\n\n> 正式验收已完成的项目可交付成果的过程\n>\n> 作用：是验收过程具有客观性；同时通过验收每个可交付成功，提高最终产品、服务或成果获得验收的可能性\n>\n> Verify：核实可交付成果在前，属于控制质量过程\n>\n> Validate：确认可交付成果在后，属于确认范围过程\n>\n> **验收：先控制质量再确认范围**\n>\n> 控制质量是项目团队，而确认范围是客户或发起人\n\n**输入：**\n\n1. 项目管理计划\n   + 范围管理计划\n   + 需求管理计划\n   + 范围基准\n2. 项目文件\n   + 经验教训登记册\n   + 质量报告\n   + 需求文件\n   + 需求跟踪矩阵\n3. 核实的可交付成果\n4. 工作绩效数据\n\n**工具与技术：**\n\n1. 检查\n2. 决策\n   + 投票\n\n**输出：**\n\n1. 验收的可交付成果\n2. 工作绩效信息\n3. 变更请求\n4. 项目文件更新\n   + 经验教训登记册\n   + 需求文件\n   + 需求跟踪矩阵\n\n#### 六、控制范围（监控）\n\n> 监督项目和产品的单位状态，管理范围基准变更的过程\n>\n> 作用：在整个项目期间保持对范围基准的维护\n\n范围蔓延：未经控制的产品或项目范围的扩大（未对时间、成本和资源做相应调整）\n\n镀金：超出范围定义，主动增加额外的工作而得不到任何经济补偿的行为\n\n**输入：**\n\n1. 项目管理计划\n   + 范围管理计划\n   + 需求管理计划\n   + 变更管理计划\n   + 配置管理计划\n   + 范围基准\n   + 绩效测量标准\n2. 项目文件\n   + 经验教训登记册\n   + 需求文件\n   + 需求跟踪矩阵\n3. 工作绩效数据\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 数据分析\n   + 偏差分析\n   + 趋势分许\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   + 范围管理计划\n   + 范围基准\n   + 进度基准\n   + 成本基准\n   + 绩效测量基准\n4. 项目文件更新\n   + 经验教训登记册\n   + 需求文件\n   + 需求跟踪矩阵\n\n## 进度-项目进度管理\n\n> 在WBS基础上继续分解成相关活动；为管理项目按时完成所需的各个过程\n>\n> WBS工作报告===》活动===》进度计划\n\n进度规划方法：关键路径法、关键链法\n\n进度编制工具：进度模板、项目管理软件\n\n进度模型（进度计划草稿，被批准后就是项目进度计划，也就是项目进度计划的前身）\n\n### 六个过程组\n\n#### 一、规划进度管理（规划）\n\n> 规划、编制、管理、执行和控制项目进度而制定的侦测、程序和文档的过程\n>\n> 作用：在整个项目过程中管理项目进度提供指南和方向\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   + 范围管理计划\n   + 开发方法\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n3. 会议\n\n**输出：**\n\n1. 进度管理计划\n\n#### 二、定义活动（规划）\n\n> 识别和记录；为完成项目可交付成果而采取的具体行动过程\n>\n> 作用：将工作包分解为活动，作为对项目工作进行估算、进度规划、执行、监督和控制的基础\n\n**输入：**\n\n1. 项目进度计划\n   + 进度管理计划\n   + 范围基准\n2. 事业环境因素\n3. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 分解\n3. 滚动式规划\n4. 会议\n\n**输出：**\n\n1. 活动清单\n2. 活动属性（时间、资源、等等）\n3. 里程碑清单\n4. 变更请求\n5. 项目管理计划更新\n   + 进度基准\n   + 成本基准\n\n#### 三、排列活动顺序（规划）\n\n> 识别和记录活动之间关系的过程\n>\n> 作用：定义工作之间的逻辑顺序，以便在既定的项目制约因素下获得最高效率\n\n**输入：**\n\n1. 项目管理计划\n   + 进度管理计划\n   + 范围基准\n2. 项目文件\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 里程碑清单\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 紧前关系绘图法（PDM）\n2. 确定和整合依赖关系：硬逻辑、软逻辑\n3. 提前量和滞后量\n4. 项目管理信息系统\n\n**输出：**\n\n1. 项目进度网络图\n2. 项目文件更新\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 里程碑清单\n\n#### 四、估算活动时间（规划）\n\n> 根据资源估算结果，估算完成单项活动所需的工作时段数的过程\n>\n> 作用：确定完成每个活动所需话费的时间量；工作量=时间 X 资源\n\n收益递减规律：当持续加大投入资源时，当达到收益平衡点时，收益就会持续下降。（举例：卖牛肉面）\n\n**输入：**\n\n1. 项目管理计划\n   + 进度管理计划\n   + 范围基准\n2. 项目文件\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目团队派工单\n   + 资源分解结构\n   + 资源日历\n   + 资源需求\n   + 风险登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 类比估算\n3. 参数估算\n4. 自下而上估算\n5. 数据分析\n   + 备选方案分析\n   + 储备分析\n6. 决策\n7. 会议\n\n**输出：**\n\n1. 持续时间估算\n2. 估算依据\n3. 项目文件更新\n   + 活动属性\n   + 假设日志\n   + 经验教训登记册\n\n#### 五、制定进度计划（规划）\n\n> 分析活动顺序、持续时间、资源需求和进度制约因素，创建进度模型，从而落实项目执行和监控过程。\n>\n> 作用：为完成项目活动而制定具有计划日期的进度模型\n\n关键法：\n\n> 在进度模型中，估算项目最短工期，确定逻辑网络路劲的进度灵活性大小的一种方法；关键路劲是项目时间最长的活动顺序，决定着可能的项目最短工期。关键\n\n关键链法：\n\n> 一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲，来应对资源限制和项目不确定性\n>\n> 需要考虑活动持续时间、逻辑关系和资源可用性，其中活动持续时间中不包含安全沉余。它用统计方法确定缓冲时段\n>\n> > 项目缓冲：放在关键链末端缓冲，保证项目不因关键链延误而延误\n> >\n> > 接驳缓冲：放置在非关键链与关键链的接合点，保护关键链不收非关键链延误影响。（防止关键路径变更）\n>\n> 1、应对资源限制和项目不确定性\n>\n> 2、基于关键路径（计算完关键路径后）\n>\n> 3、资源约束性关键路劲就是关键链\n>\n> 4、不确定性决定缓冲时间长短\n>\n> 5、重点管理：剩余的缓冲持续时间与剩余的活动持续时间之间的匹配关系\n\n最早与最迟时间\n\n> ES（Earliest Start）：活动能够开始的最早时间\n>\n> EF（Earliest Finish）：活动能够完成的最早时间\n>\n> LF（Latest Finish）：活动能够开始的最迟时间\n>\n> LS（Latest Start）：活动能够完成的最迟时间\n>\n> ES + DU = EF\n>\n> LF - DU = LS\n>\n> TF = LS - ES = LF - EF\n>\n> |  ES  |    DU：持续时间    |  EF  |\n> | :--: | :----------------: | :--: |\n> |      | 活动ID（活动名称） |      |\n> |  LS  |   TF：总浮动时间   |  LF  |\n\n顺推：MAX（EF1，EF2。。。）\n\n倒推：MIN（LS1，LS2。。。）\n\n自由时间：FF = ES（后一节点） - EF（当前活动）\n\n**输入：**\n\n1. 项目管理计划\n   + 进度管理计划\n   + 范围基准\n2. 项目文件\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 估算依据\n   + 持续时间估算\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目进度网络图\n   + 项目团队派工单\n   + 资源日历\n   + 资源需求\n   + 风险登记册\n3. 协议\n4. 事业环境因素\n\n**工具与技术：**\n\n1. 进度网络分析\n2. 关键路劲法\n3. 资源优化\n4. 数据分析\n   + 假设情景\n   + 模拟\n5. 提前量和滞后量\n6. 进度压缩\n7. 项目管理信息系统\n8. 敏捷发布规划\n\n**输出：**\n\n1. 进度基准（给发起人和相关方的高层级概要）\n2. 项目进度计划\n3. 进度数据\n4. 项目日历\n5. 项目管理计划更新\n   - 进度管理计划\n   - 风险管理计划\n   - 成本基准\n6. 项目文件更新\n   - 活动属性\n   - 假设日志\n   - 持续时间估算\n   - 经验教训登记册\n   - 资源需求\n   - 风险登记册\n\n#### 六、控制进度（监控）\n\n> 监督项目状态，更新项目进度和管理进度基准变更的过程\n>\n> 作用：保持对进度基准的维护\n\n**输入：**\n\n1. 项目管理计划\n   - 进度管理计划\n   - 进度基准\n   - 范围基准\n   - 绩效测量标准\n2. 项目文件\n   - 经验教训登记册\n   - 项目日历\n   - 项目进度计划\n   - 资源日历\n   - 进度数据\n3. 工作绩效数据\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 数据分析\n   - 挣值分析\n   - 迭代燃烧图\n   - 绩效评审\n   - 趋势分析\n   - 偏差分析\n   - 假设情景分析\n2. 关键路径法\n3. 项目管理信息系统\n4. 资源优化\n5. 提前量和滞后量\n6. 进度压缩\n\n**输出：**\n\n1. 工作绩效信息\n2. 进度预测\n3. 变更请求\n4. 项目管理计划更新\n   - 进度管理计划\n   - 进度基准\n   - 成本基准\n   - 绩效测量基准\n5. 项目文件更新\n   - 假设日志\n   - 估算依据\n   - 经验教训登记册\n   - 项目进度计划\n   - 资源日历\n   - 风险等级册\n   - 进度数据\n\n## 成本-项目成本管理\n\n> 为使用项目在批准的预算内完成而对成本进行规划、估算、预算、融资、周知、管理和控制的各个过程\n>\n> 目的：确保项目在批准的预算内完工\n\n核心概念：\n\n> **项目生命周期成本：**完成项目活动所需的成本；重点关注完成项目活动所需资源的成本，但同时也应考虑项目决策对项目产品、服务或成果的使用成本、维护成本和支持成本的影响\n>\n> **多次测量时机：**不同的相关方会在不同的时间，用不同的方法测算项目成本。例如：对于某采购品，可在做出采购决策、下达订单、实际交货、实际成本发生或进行会计记账时，测算其成本\n>\n> **项目内或项目外成本分析：**在很多组织中，预测和分心项目产品的财务效益是在项目之外进行的，但对于有些项目，如固定资产投资项目，可在项目成本管理中进行这项预测和分析工作。可用方法：通用财务管理技术，如投资回报率分析、现金流贴现分析和投资回收期分析\n\n##### 经营性财务知识\n\n1. 可变成本\n\n   > 随生产量或工作而变的成本，如人员工资，消耗的原材料等\n\n2. 固定成本\n\n   > 不随生产规模变化的非重复成本，如设备费用、场地租赁费用等\n\n3. 直接成本\n\n   > 能够直接归属于项目工作的成本，如项目组旅行费用、项目组人员工资和奖金、项目使用的物资等\n\n4. 间接成本\n\n   > 一般管理费用科目或几个项目共同分担的成本。如员工福利、保安费用、行政部门和财务部门费用等\n\n5. 机会成本\n\n   > 因为选择一个机会而放弃的另外一个机会可以获得的收益；例如一个人投资炒股赚10万，而同期如果买商品房的话可以赚500万。如果此人投资超过而没有买商品房，则选择炒股的机会成本就是500万\n\n6. 沉没成本\n\n   > 哪些在过去发生的费用，就像沉船一样不能回收的部分。当决定继续投资项目时，不应该考虑这部分费用。当决定项目是否该继续时，许多人像赌徒一样的心里指望能够收回沉没成本\n\n\n\n### 四个过程组\n\n#### 一、规划成本管理（规划）\n\n> 确定如何估算、预算。管理。监督和控制项目成本的过程\n>\n> 作用：在整个项目为如何管理项目成本提供指南和方向\n\n\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 进度管理计划\n   - 风险管理计划\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n3. 会议\n\n**输出：**\n\n1. 成本管理计划\n\n#### 二、估算成本（规划）\n\n> 对完成项目工作所需资源成本进行近似估算的过程\n>\n> 作用：确定项目所需的资金，是对成本的预测\n>\n> 在估算成本时，需要识别和分析可用于启动与完成项目的备选成本方案\n>\n> 需要权衡备选成本方案并考虑等闲，以优化项目成本\n>\n> 进行成本估算，应该考虑将向项目收费的全部资源\n\n估算成本单位：通常用某种获取单位，如美元、欧元、人民币等；但有时也采用其他计量单位，如人时或人天数，以消除同伙膨胀的映像，便于成本比较\n\n估算过程是渐进明细的：启动阶段可得出项目的粗略量级估算（ROM）：-25%-+75%；随着信息越来越详细，估算区间可缩小为：-5%-+10%\n\n**输入：**\n\n1. 项目管理计划\n   - 成本管理计划\n   - 质量管理计划\n   - 范围基准\n2. 项目文件\n   - 经验教训登记册\n   - 项目进度计划\n   - 资源需求\n   - 风险登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 类比估算\n3. 参数估算\n4. 自下而上估算\n5. 三点估算\n6. 数据分析\n   - 备选方案分析\n   - 储备分析\n   - 质量成本\n7. 项目管理信息系统\n8. 决策\n   - 投票\n\n**输出：**\n\n1. 成本估算\n2. 估算依据\n3. 项目文件更新\n   - 假设日志\n   - 经验登记册\n   - 风险登记册\n\n#### 三、制定预算（规划）\n\n> 汇总所有单个活动或工作包的估算成本，简历一个经批准的成本基线的过程；以WBS为重要依据\n>\n> 作用：确定成本基准，可据此监督和控制项目绩效\n\n**输入：**\n\n1. 项目管理计划\n   - 成本管理计划\n   - 资源管理计划\n   - 范围基准\n2. 项目文件\n   - 估算依据\n   - 成本估算\n   - 项目进度计划\n   - 风险登记册\n3. 商业文件\n   - 商业论证\n   - 效益管理计划\n4. 协议\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 成本汇总\n3. 数据分析\n   - 储备分析\n4. 历史信息审核\n5. 资金限制平衡\n6. 融资\n\n**输出：**\n\n1. 成本基准\n2. 项目资金需求\n3. 项目文件更新\n   - 成本估算\n   - 项目进度计划\n   - 风险登记册\n\n#### 四、控制成本（监控）\n\n> 监督项目状态、以更新项目成本，管理成本基准变更的过程。\n>\n> 作用：在整个项目期间保持对成本基准的维护\n>\n> 重点分析：项目资金支出与相应完成的实际工作之间的关系\n>\n> 有效成本控制的关键：在于与经批准的成本基准及其变更进行管理\n>\n> 确保成本支持不超过批准的资金限额：既不超出按时段、按WBS组件、按活动分配的限额，也不超出项目总限额\n\n**变更管理：**\n\n- 影响不必要的变更\n- 及时处理变更\n- 管理已发生的变更\n- 防止在成本或资源使用报告中出现未经批准的变更\n- 向相关方报告所有经批准的变更及其相关成本\n\n**控制成本&进度：**\n\n- 确保成本支出不超过批准的资金限额，既不超出按时段、按WBS组件。按活动分配的限额，也不超出项目总限额\n- 没法把逾期的成本超支控制在可接受的范围内\n\n**监督绩效：**\n\n- 监督成本绩效，找出并分析与成本基准间的偏差\n- 对照资金支出，监督工作\n\n**输入：**\n\n1. 项目管理计划\n   - 成本管理计划\n   - 成本基准\n   - 绩效测量基准\n2. 项目文件\n   - 经验教训登记册\n3. 项目资金需求\n4. 项目绩效数据\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n\n2. 数据分析\n\n   - 挣值分析\n   - 偏差分析\n   - 趋势分析\n   - 储备分析\n\n3. 完工尚需绩效指数\n\n   > TCPI：在项目执行的不通时间点估算的为在既定预算内完工而必须达到的未来成本绩效\n   >\n   > TCPI = （BAC -  EC）/ （BAC - AC）\n\n4. 项目管理信息系统\n\n**输出：**\n\n1. 工作绩效信息\n2. 成本预测\n3. 变更请求\n4. 项目管理计划更新\n   - 成本管理计划\n   - 成本基准\n   - 绩效测量基准\n5. 项目文件更新\n   - 假设日志\n   - 估算依据\n   - 成本估算\n   - 经验教训登记册\n   - 风险登记册\n\n## 质量-项目质量管理\n\n> 把最值的质量政策应用于规划、管理、控制项目和产品的质量要求已满足相关方目标的各个过程\n>\n> 项目质量管理确定项目需求，包括产品需求得到满足和确认\n>\n> 不担关注可交付成果的质量，还要关注过程的质量（管理过程、设计过程）\n\n**质量：**在功能相等的情况下进行比较\n\n**等级：**功能多少叫做等级\n\n**精确：**精密程度的度量，重复测量的结果非常聚合，离散度很小\n\n**准确：**对正确性的评估，测量值非常接近实际值\n\n### 三个过程组\n\n#### 一、规划质量管理（规划）\n\n> 识别项目及其可交付成果的质量要求和标准，并书面描述项目将如何证明符合质量要求和标准的过程\n>\n> 作用：在整个项目奇迹如何管理和核实质量提供指南和方向\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 需求管理计划\n   - 风险管理计划\n   - 相关方参与计划\n   - 范围基准\n3. 项目文件\n   - 假设日志\n   - 需求文件\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 标杆对照\n   - 头脑风暴\n   - 访谈\n3. 数据分析\n   - 成本效益分析\n   - 质量成本\n4. 决策\n   - 多标准决策分析\n5. 数据表现\n   - 流程图\n   - 逻辑数据模型\n   - 矩阵图\n   - 思维导图\n6. 测试和检查规划\n7. 会议\n\n**输出：**\n\n1. 质量管理计划\n2. 质量测量指标\n3. 项目管理计划更新\n   - 风险管理计划\n   - 范围基准\n4. 项目文件更新\n   - 经验教训登记册\n   - 风险登记册\n   - 相关方登记册\n\n#### 二、管理质量（规划）\n\n> 把组织的主梁政策用于项目，并且质量管理计划转化为可执行的质量活动的过程\n>\n> 作用：提高实现质量目标的可能性，一级识别无效过程的导致质量低劣的原因\n>\n> 管理质量使用控制质量过程的数据和结果向相关方专事项目的总体质量状态\n\n**问题解决：**\n\n1. 定义问题\n2. 识别根本性原因\n3. 生成可能的解决方案\n4. 选择最佳解决方案\n5. 执行解决方案\n6. 验证解决方案的有效性\n\n**输入：**\n\n1. 项目管理计划\n   - 质量管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 质量控制测量结果\n   - 质量测量指标\n   - 风险报告\n3. 组织过程资产\n\n**工具与技术：**\n\n1. 数据收集\n   - 核对单\n2. 数据分析\n   - 备选方案分析\n   - 文件分析\n   - 过程分析\n   - 根本原因分析\n3. 决策\n   - 多标准决策分析\n4. 数据表现\n   - 亲和图\n   - 因果图\n   - 流程图\n   - 直方图\n   - 矩阵图\n   - 散点图\n5. 审计\n6. 面向X的设计\n7. 问题解决\n8. 质量改进方法\n\n**输出：**\n\n1. 质量报告\n2. 测试与凭借文件（测试用例）\n3. 变更请求\n4. 项目管理计划更新\n   - 质量管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n5. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 风险登记册\n\n#### 三、控制质量（监控）\n\n> 评估绩效，确保项目输出完整、正确且满足客户期望，而监督和记录质量管理活动执行结果的过程\n>\n> 作用：核实项目可交付成果和工作已经达到主要相关方的质量要求，可供最终验证（先内部确认满足验收标准）\n\n**输入：**\n\n1. 项目管理计划\n   - 质量管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 质量测量指标\n   - 测试与评价文件\n3. 批准的变更请求\n4. 可交付成果\n5. 工作绩效数据\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 数据收集\n   - 核对单\n   - 核查表\n   - 统计抽样\n   - 问卷调查\n2. 数据分析\n   - 绩效审查\n   - 根本原因分析\n3. 检查\n4. 测试/产品评估\n5. 数据表现\n   - 因果图\n   - 控制图\n   - 直方图\n   - 散点图\n6. 会议\n\n**输出：**\n\n1. 质量控制测量结果\n2. 核实的可交付成果\n3. 工作绩效信息\n4. 变更请求\n5. 项目管理计划更新\n   - 质量管理计划\n6. 项目文件更新\n   - 问题日志\n7. 经验教训登记册\n8. 风险登记册\n9. 测试与评估文件\n\n## 资源-项目资源管理\n\n> 识别、获取和管理所需资源以成功完成项目的各个过程，这些过程有助于确保项目经理和项目团队在正确的时间和正确的地点使用正确的资源\n\n### 六个过程组\n\n#### 一、规划资源管理（规划）\n\n> 如何估算、获取、管理和利用团队以及实物资源的过程。\n>\n> 作用：根据项目类型和复杂程度确定适用于项目资源的管理方法和管理程度\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 质量管理计划\n   - 范围基准\n3. 项目文件\n   - 项目进度计划\n   - 需求文件\n   - 风险登记册\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据表现\n   - 层级型\n   - 责任分配矩阵\n   - 文本型\n3. 组织理论\n4. 会议\n\n**输出：**\n\n1. 资源管理计划\n2. 团队章程\n3. 项目文件更新\n   - 假设日志\n   - 风险登记册\n\n#### 二、估算活动资源（规划）\n\n> 是估算执行项目所需的团队资源，以及材料、设备和用品的类型和数量的过程\n>\n> 作用：明确完成项目所需的资源种类、数量和特性\n>\n> 以便做出更准确的成本和持续时间估算\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 范围基准\n2. 项目文件\n   - 活动属性\n   - 活动清单\n   - 假设日志\n   - 成本估算\n   - 资源日历\n   - 风险登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 自下而上估算\n3. 类比估算\n4. 参数估算\n5. 数据分析\n   - 备选方案分析\n6. 项目管理信息系统\n7. 会议\n\n**输出：**\n\n1. 资源需求\n2. 估算依据\n3. 资源分解结构\n4. 项目文件更新\n   - 活动属性\n   - 假设日志\n   - 经验教训登记册\n\n#### 三、获取资源（执行）\n\n> 获取团队成员、设施、设备、材料、用品和其他资源的过程\n>\n> 作用：概述和指导资源的选择，并将其分配给相应的活动\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 采购管理计划\n   - 成本基准\n2. 项目文件\n   - 项目进度计划\n   - 资源日历\n   - 资源需求\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 决策\n   - 多标准决策分析\n2. 人际关系与团队技能\n   - 谈判\n3. 预分派\n4. 虚拟团队\n\n**输出：**\n\n1. 物质资源分派单\n2. 项目团队派工单\n3. 资源日历\n4. 变更请求\n5. 项目管理计划更新\n   - 资源管理计划\n   - 成本基准\n6. 项目文件更新\n   - 经验教训登记册\n   - 项目进度计划\n   - 资源分解结构\n   - 相关方登记册\n7. 事业环境因素\n8. 组织过程资产\n\n#### 四、建设项目团队（执行）\n\n> 提高工作能力，促进团队成员互动，改善团队整体氛围，以提高项目绩效的过程\n>\n> 作用：提升整体项目绩效\n>\n> 1. 改进团队协作\n> 2. 增强人际技能\n> 3. 激励团队成员\n> 4. 降低人员离职率\n\n特克曼阶梯理论：\n\n非正式沟通和活动有助于建立信任和良好的工作关系；团队建设是持续性过程\n\n1. 形成阶段\n\n   > 项目认识，并了解项目情况以及在项目中的正式角色与职责。倾向于相互独立，不怎么开诚布公\n\n2. 震荡阶段\n\n   > 开始从事项目工作，制定技术决策和讨论项目管理方法。对不同观点和意见不能采取合作开放的态度，团队环境能恶化成破坏性的\n\n3. 规范阶段\n\n   > 开始协同工作，并按团队的需要来调整各自的工作习惯和行为，团队成员相互信任\n\n4. 成熟阶段\n\n   > 像一个组织有序的单位那样工作。团队成员之间相互依靠，平稳高效的解决问题\n\n5. 解散阶段\n\n   > 团队完成所有工作，团队成员离开项目\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 项目团队派工单\n   - 资源日历\n   - 团队章程\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 集中办公\n\n   > 作用：增进沟通和集体感的设施\n\n2. 虚拟团队\n\n3. 沟通技术\n\n   > 作用：为集中办公团队营造融洽的环境；促进虚拟团队更好的相互理解\n\n   - 冲突管理\n\n   - 影响力\n\n   - 激励\n\n   - 谈判\n\n   - 团队建设\n\n     > 通过举办各种活动，强化团队的社交关系，打造积极合作的工作环境\n\n4. 认可与奖励\n\n   > 对成员的优良香味给予认可与奖励；满足被将奖励者的某个重要需求的奖励才是有效的奖励。（大多人都能做好的工作）\n\n5. 培训\n\n   > 弥补差距\n\n6. 个人和团队评估\n\n   > 让项目经理和项目团队洞察成员的优势和劣势\n   >\n   > 帮助项目经理评估团队成员的偏好和愿望，团队成员如何处理和整理信息、如何制定决策，以及如何与他人打交道\n   >\n   > 增进团队成员间的理解、信任、承诺和沟通，不断提高团队成效\n\n7. 会议\n\n**输出：**\n\n1. 团队绩效评价\n2. 变更请求\n3. 项目管理计划更新\n   - 资源管理计划\n4. 项目文件更新\n   - 经验教训登记册\n   - 项目进度计划\n   - 项目团队派工单\n   - 资源日历\n   - 团队章程\n5. 事业环境因素\n6. 组织过程资产\n\n#### 五、管理项目团队（执行）\n\n> 跟踪团队成员工作表现，提供反馈，解决问题并管理团队变更，以优化项目绩效的过程\n>\n> 作用：影响团队行为、管理冲突以解决问题\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 项目团队派工单\n   - 团队章程\n3. 工作绩效报告\n4. 团队绩效评价\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 人际关系与团队技能\n   - 冲突管理\n   - 制定决策\n   - 情商\n   - 影响力\n   - 领导力\n2. 项目管理信息系统\n\n**输出：**\n\n1. 变更请求\n2. 项目管理计划更新\n   - 资源管理计划\n   - 进度基准\n   - 成本基准\n3. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 项目团队派工单\n4. 事业环境因素\n\n#### 六、控制资源 （监控）\n\n> 确定按计划为项目分配实物资源，以及根据资源使用计划监督资源实际使用情况，并采取必要纠正措施的过程\n>\n> 作用：确保分配的资源适时的可用于项目，且在不再需要时被释放\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 物质资源分配单\n   - 项目进度计划\n   - 资源分解结构\n   - 资源需求\n   - 风险登记册\n3. 工作绩效数据\n4. 协议\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 数据分析\n   - 备选方案分析\n   - 成本效益分析\n   - 绩效审查\n   - 趋势分析\n2. 问题解决\n3. 人际关系与团队技能\n   - 谈判\n   - 影响力\n4. 项目管理信息系统\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   - 资源管理计划\n   - 进度基准\n   - 成本基准\n4. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 经验教训登记册\n   - 物质资源分配单\n   - 资源分解结构\n   - 风险登记册\n\n## 沟通-项目沟通管理\n\n> 通过开发工件，以及执行用于有效交换信息的各种活动，来确保项目及其相关方的信息需求得以满足的各个过程\n\n### 三个过程组\n\n#### 一、规划沟通管理（规划）\n\n> 基于每个相关方或相关方群体信息需求、可用的组织资产，以及具体项目的需求，为项目沟通活动制定恰当的方法和计划的过程\n>\n> 作用：为及时向相关方提供相关信息，引导相关方有效参与项目，编制书面沟通计划\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 资源管理计划\n   - 相关方参与计划\n3. 项目文件\n   - 需求文件\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 沟通需求分析\n3. 沟通技术\n4. 沟通模型\n5. 沟通方法\n6. 人际关系与团队技能\n   - 沟通风格评估\n   - 政治意识\n   - 文化意识\n7. 数据分析\n   - 相关方参与度评估矩阵\n8. 会议\n\n**输出：**\n\n1. 沟通管理计划\n2. 项目管理计划更新\n   - 相关方管理计划\n3. 项目文件更新\n   - 项目进度计划\n   - 相关方登记册\n\n#### 二、管理沟通（执行）\n\n> 确保项目信息及时且恰当的收集、生成、发布、存储、检索、管理、监督和最终处置的过程\n>\n> 作用：促成项目团队与相关方之间的有效信息流动\n\n沟通渠道计算：n X（n - 1）/ 2\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n2. 项目文件\n   - 变更日志\n   - 问题日志\n   - 经验教训登记册\n   - 质量报告\n   - 风险报告\n   - 相关方登记册\n3. 工作绩效报告\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 沟通技术\n2. 沟通方法\n3. 沟通技能\n   - 沟通能力\n   - 反馈\n   - 非语言\n   - 演示\n4. 项目关系信息系统\n5. 人际关系与团队技能\n   - 积极倾听\n   - 冲突管理\n   - 文化意识\n   - 会议管理\n   - 人际交往\n   - 政治意识\n6. 会议\n\n**输出：**\n\n1. 项目沟通管理计划\n2. 项目管理计划更新\n   - 沟通管理计划\n   - 相关方参与计划\n3. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 项目进度计划\n   - 风险登记册\n   - 相关方登记册\n4. 组织过程资产\n\n#### 三、监督沟通（监控）\n\n> 确保满足项目及相关放的信息需求过程\n>\n> 作用：按沟通计划和相关方参与计划的要求优化信息传递流程\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 项目沟通记录\n3. 工作绩效数据\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 项目管理信息系统\n3. 数据表现\n   - 相关方参与度评估矩阵\n4. 人际关系与团队技能\n   - 观察、交谈\n5. 会议\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目沟通计划更新\n   - 沟通管理计划\n   - 相关方参与计划\n4. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 相关方登记册\n\n## 风险-项目风险管理\n\n> 规划风险管理、识别风险、开展风险分析、规划风险应对、实时风险应对和监督风险的各个过程\n>\n> 作用：提高积极事件的概率和影响；降低消极事件的概率和影响，从而提高项目成功的可能性\n\n风险态度：风险承受力、风险偏好、风险临界值\n\n### 七个过程组\n\n#### 一、规划风险管理（规划）\n\n> 定义如何实施项目风险管理活动的过程\n>\n> 作用：确保风险管理水平、方法和可监督与项目风险程度，以及项目对组织和其他相关方的重要程序相匹配\n\n已知风险：项目团队能够识别和分析的风险；也就是风险事件、概率和影响都知道的风险\n\n未知风险：指无法进行主动管理的风险，就是风险事件、概率、影响这3个要素至少有一个不知道的风险\n\n> - 已知-未知：风险是已知的，但是不知道风险发生的概率和影响（应急储备）\n> - 未知-未知：风险是未知的，发生的概率和影响也不知道（管理储备）\n\n概率影响矩阵：\n\n> 概率 X 影响 = 风险值（敞口）\n\n- 对风险进行优先排序\n- 用颜色深浅代表风险高低\n- 优先处理威胁高或机会大的风险\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 所有组件\n3. 项目文件\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n   - 相关方分析\n3. 会议\n\n**输出：**\n\n1. 风险管理计划\n\n#### 二、识别风险（规划）\n\n> 识别单个项目风险以及整体项目风险的来源，并记录风险特征的过程；识别风险时，要同时开率单个项目风险，以及整体项目风险的来源\n>\n> 作用：\n>\n> - 记录单个风险\n> - 记录整体风险来源\n> - 汇集相关信息\n> - 以便项目团队能够恰当对已识别的风险\n\n**输入：**\n\n1. 项目管理计划\n   - 需求管理计划\n   - 进度管理计划\n   - 成本管理计划\n   - 质量管理计划\n   - 资源管理计划\n   - 风险管理计划\n   - 范围基准\n   - 成本基准\n   - 进度基准\n2. 项目文件\n   - 假设日志\n   - 成本估算\n   - 持续时间估算\n   - 问题日志\n   - 经验教训登记册\n   - 需求文件\n   - 资源需求\n   - 相关方登记册\n3. 协议\n4. 采购文件\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 头脑风暴\n   - 核对单\n   - 访谈\n3. 数据分析\n   - 根本原因分析\n   - 假设条件\n   - 制约因素分析\n   - SWOT分析\n   - 文件分析\n4. 人机关及与团队技能\n   - 引导\n5. 提示清单\n6. 会议\n\n**输出：**\n\n1. 风险登记册（单个）\n2. 风险报告（整体）\n3. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 经验教训登记册\n\n#### 三、实施定性风险分析（规划）\n\n> 通过评估单个项目风险发生的概率和影响以及特征，对风险进行优先级排序，从而为后续分析或行动提供基础的过程\n>\n> 作用：重点关注高优先级的风险\n>\n> 定性四步走：\n>\n> 1. 以主观方式评价风险发生的相对概率湖可能性，风险发生后对项目目标的影响\n> 2. 根据上述分析结果评估风险的优先级\n> 3. 考虑风险态度、评估风险紧迫性、识别风险责任人\n> 4. 确定哪些风险进度实施定量风险分析过程\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n2. 项目文件\n   - 假设日志\n   - 风险登记册\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n\n2. 数据收集\n\n   - 访谈\n\n3. 数据分析\n\n   - 风险数据质量评估\n\n     > 单个项目风险的数据的准确性和可靠性，消除主观偏见的影响\n\n   - 风险概率影响评估\n\n     > 特定风险发生的可能性，影响评估考虑的是风险对一项或多项项目目标的潜在影响\n\n   - 其他风险参数评估\n\n     > 在对单个项目风险进行优先级排序时，项目团队可能考虑（除概率和影响以外的）其他风险特征\n\n4. 人际关系与团队技能\n\n   - 引导\n\n5. 风险分类\n\n6. 数据表现\n\n   - 概率影响矩阵\n   - 层级图\n\n7. 会议\n\n**输出：**\n\n1. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 风险登记册\n   - 风险报告\n\n#### 四、实施定量风险分析（规划）\n\n> 已识别的单个项目风险和不确定性的其他来源对整体项目目标的影响进行定量分析过程（不是每个项目必须）\n>\n> 作用：量化整体项目风险敞口，并提供额外的定量风险信息，以支持风险应对规划\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n2. 项目文件\n   - 假设日志\n   - 估算依据\n   - 成本估算\n   - 成本预测\n   - 持续时间估算\n   - 理成本清单\n   - 资源需求\n   - 风险登记册\n   - 风险报告\n   - 进度预测\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 访谈\n3. 人际关系与团队技能\n   - 引导\n4. 不确定性表现方式\n5. 数据分析\n   - 模拟\n   - 敏感性分析\n   - 决策树分析\n   - 影响图\n\n**输出：**\n\n1. 项目文件更新\n   - 风险报告\n\n#### 五、规划风险应对（规划）\n\n> 处理整体项目风险敞口，以及应对单个项目风险，而制定可选方案、选择应对策略并商定应对行动的过程\n>\n> 作用：\n>\n> - 制定应对整体项目风险和单个项目风险的适当方法\n> - 分配资源，并根据需要将相关活动添加进项目文件和项目管理计划\n\n风险应对措施：有效和适当的风险对应可以最小化单位畏怯，最大化单个机会，并降低整体项目风险敞口；不恰当的风险应对则会适得其反\n\n> - 必须与风险重要性匹配\n> - 能经济有效的应对挑战，选择最可能有效的策略和策略组合\n> - 获得全体相关方同意\n> - 有一名责任人具体负责\n> - PM还需应对项目整体风险\n\n残余风险：采取措施后仍然存在的风险，以及有意接收的风险（如：买车险）\n\n次生风险：执行应对风险措施导致新的风险，即如果不应对前一个风险便不会发生这个风险（如：买房要承担房价波动）\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 风险管理计划\n   - 成本基准\n2. 项目文件\n   - 经验教训登记册\n   - 项目进度计划\n   - 项目团队派工单\n   - 资源日历\n   - 风险登记册\n   - 风险报告\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 访谈\n3. 人际关系与团队技能\n   - 引导\n4. 威胁应对策略\n5. 机会应对策略\n6. 应急应对策略\n7. 整体项目风险应对策略\n8. 数据分析\n   - 备选方案分析\n   - 成本效益分析\n9. 决策\n   - 多标准决策分析\n\n**输出：**\n\n1. 变更请求\n2. 项目管理计划更新\n   - 进度管理计划\n   - 成本管理计划\n   - 质量管理计划\n   - 资源管理计划\n   - 采购管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n3. 项目文件更新\n   - 假设日志\n   - 成本预测\n   - 经验教训登记册\n   - 项目进度计划\n   - 项目团队派工单\n   - 风险登记册\n   - 风险报告\n\n#### 六、实施风险应对（执行）\n\n> 执行商定的风险应对计划的过程\n>\n> 作用：\n>\n> - 确保按计划执行商定风险应对措施\n> - 来管理整体项目风险敞口\n> - 最小化单个项目威胁\n> - 最大化单个项目机会\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 风险登记册\n   - 风险报告\n3. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 人际关系与团队技能\n   - 影响力\n3. 项目管理信息系统\n\n**输出：**\n\n1. 变更请求\n2. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 项目团队派工单\n   - 风险登记册\n   - 风险报告\n\n#### 七、监督风险（监控）\n\n> 监督商定的风险应对计划的实施、跟踪已识别风险、识别和分析新风险，以及评估风险管理有效性的过程\n>\n> 作用：\n>\n> - 使项目决策都基于关于整体项目风险敞口和单个项目风险的当前信息\n> - 确保项目团队和关键相关方了解当前的风险敞口级别\n> - 通过监督风险过程对项目工作尽享持续监督\n> - 发现新出现、正在变化和已过时的单个项目风险\n\n监督风险的目的：\n\n> 采用项目执行期间生成的绩效信息，以确定：\n>\n> - 实施的风险应对是否有效\n> - 整体项目风险级别是否已改变\n> - 已识别单个项目风险的状态是否已改变\n> - 是否出现新的单个项目风险\n> - 风险管理方法是否依然适用\n> - 项目假设条件是否仍然成立\n> - 风险管理政策和程序是否已得到遵守\n> - 成本或进度应急储备是否需要修改\n> - 项目策略是否让然有效\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 风险报告\n3. 工作绩效数据\n4. 工作绩效报告\n\n**工具与技术：**\n\n1. 数据分析\n   - 技术绩效分析\n   - 储备分析\n2. 审计\n3. 会议\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   - 任何组件\n4. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 经验教训登记册\n   - 风险登记册\n   - 风险报告\n5. 组织过程资产更新\n\n## 采购-项目采购管理\n\n> 从项目团队外部采购或获取所需产品、服务或成果的各个过程\n>\n> - 包括编制和管理协议所需的管理和控制过程，如：合同、订购单、协议备忘录，或服务书评\n> - 被授权采购的人员：项目团队、管理层或组织采购部的成员\n\n### 三个过程组\n\n#### 一、规划采购管理（规划）\n\n> 记录项目的采购决策、明确采购方法、及识别潜在卖方的过程\n>\n> 作用：确定是否需要外部支持，如果需要，则还要决定采购什么、如何采购、采购多少，以及何时采购\n\n合同类型比较：\n\n|        名称        | 缩写  |                    特点                    |    风险（买方）    |               使用场景               |\n| :----------------: | :---: | :----------------------------------------: | :----------------: | :----------------------------------: |\n|      固定总价      |  FFP  |           一口价：不容易改变范围           |      买方最小      |           产品外围很明确时           |\n|     总价加激励     | FPIF  |            总价基础上加激励费用            | 买方小，但比FFP大  |         增加灵活性，激励买方         |\n| 总价加经济价格调整 | FPEPA |           允许条件变化，调整价格           | 买方小，但比FPIF大 |  履约时间长；买方支付货币不同于卖方  |\n|      工料合同      |  T&M  | 单位时间固定价格，谈判快，不能快速确定范围 |      双方均等      |     范围不明确，缺乏项目管理能力     |\n|    成本价激励费    | CPIF  |              奖励节约反对浪费              |   买方大，卖方小   | 范围不明确，有分摊比例的惩罚奖励条件 |\n|    成本价奖励费    | CPAF  |               费用凭主观判断               |  买方大，比CPIF大  | 范围不明确，有买方主观的惩罚奖励条件 |\n|    成本价固定费    | CPFF  |              费用是固定的额度              |  买方大，比CPAF大  |             范围不明确时             |\n|    成本加百分比    | CPPC  |         花的多，给的多，买方参与多         |      买方最大      | 范围不明确，买方有较强的项目管理能力 |\n\n**输入：**\n\n1. 项目章程\n2. 商业文件\n   - 商业论证效\n   - 益管理计划\n3. 项目管理计划\n   - 范围管理计划\n   - 质量管理计划\n   - 资源管理计划\n   - 范围基准\n4. 项目文件\n   - 里程碑清单\n   - 项目团队派工单\n   - 需求文件\n   - 需求跟踪矩阵\n   - 资源需求\n   - 风险登记册\n   - 相关方登记册\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 市场调研\n3. 数据分析\n   - 自制或外购分析\n4. 供方选择分析\n5. 会议\n\n1. 采购管理计划\n2. 自制或外购决策\n3. 采购策略\n4. 招标文件\n5. 采购工作说明书\n6. 供方选择标准\n7. 独立成本估计\n8. 变更请求\n9. 项目文件更新\n   - 经验教训登记册\n   - 里程碑清单\n   - 需求文件\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n10. 组织过程资产\n\n#### 二、实施采购（执行）\n\n> 获取卖方应答、选择卖方并授权合同的过程\n>\n> 作用：\n>\n> - 选定合格卖方并签署关于火舞或服务交付的法律协议\n> - 本过程的最后成果就是签订协议、包括正式合同\n\n采购流程：资格预审》**招标》投标》评标》授标》**签协议\n\n**输入：**\n\n1. 项目管理计划\n   - 范围管理计划\n   - 需求管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 采购管理计划\n   - 配置管理计划\n   - 成本基准\n2. 项目文件\n   - 经验教训登记册\n   - 项目进度计划\n   - 需求文件\n   - 风险登记册\n   - 相关方登记册\n3. 采购文件\n4. 卖方建议书\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 广告投标人会议\n3. 数据分析\n   - 建议书评价\n4. 人际关系与团队技能\n   - 谈判\n\n**输出：**\n\n1. 选定的卖方\n2. 协议\n3. 变更请求\n4. 项目管理计划更新\n   - 需求管理计划\n   - 质量管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 采购管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n5. 项目文件更新\n   - 经验教训登记册\n   - 需求文件\n   - 需求跟踪矩阵\n   - 资源日历\n   - 风险登记册\n   - 相关方登记册\n6. 组织过程资产\n\n#### 三、控制采购（监督）\n\n> 管理采购关系，监督合同绩效，实施必要的变更和纠偏，以及关闭合同的过程\n>\n> 作用：\n>\n> - 确保买卖双方履行法律协议，满足项目需求\n> - 对大型项目，合同管理重点管理各个供应商之间的沟通\n> - 有的组织把合同管理当做独立于项目的一种组织职能\n> - 采购管理员可以是项目团队成员，但他通常向另一部门经理报告\n> - 需要把适当的项目管理过程应用于合同关系，实施多个层面的整合\n\n**输入：**\n\n1. 项目管理计划\n   - 需求管理计划\n   - 风险管理计划\n   - 采购管理计划\n   - 变更管理计划\n   - 进度基准\n2. 项目文件\n   - 假设日志\n   - 经验教训登记册\n   - 里程碑清单\n   - 质量报告\n   - 需求文件\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n3. 协议\n4. 采购文件\n5. 批准的变更请求\n6. 工作绩效数据\n7. 事业环境因素\n8. 组织过程资产\n\n1. 专家判断\n2. 索赔管理\n3. 数据分析\n   - 绩效审查\n   - 挣值分析\n   - 趋势分析\n4. 检查\n5. 审计\n\n**输出：**\n\n1. 结束的采购\n2. 工作绩效信息\n3. 采购文档更新\n4. 变更请求\n5. 项目管理计划更新\n   - 风险管理计划\n   - 采购管理计划\n   - 进度基准\n   - 成本基准\n6. 项目文件更新\n   - 经验教训登记册\n   - 资源需求\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n7. 组织过程资产\n\n## 相关方-项目相关方管理\n\n> 识别能够影响项目或会受项目影响的人员、团体或组织，分析相关方对项目的期望和影响，制定合适的管理策略来有效调动相关方参与项目决策和执行\n>\n> - 项目相关方管理过程分析相关方期望\n> - 评估他们对项目或受项目影响程度\n> - 制定策略来有效的引导相关方支持项目决策、规划和执行\n> - 这些过程能够支持项目团队的工作\n\n相关方管理原则：项目经理和团队正确识别并合理引导所有相关方参与的能力，能觉得项目的成败\n\n> 1. 需要反复识别出全部相关方（全部识别）\n> 2. 根据相关方的利益和影响对其分类，项目经理应该专注于与项目成功密切相关的重要关系上（重点管理）\n> 3. 相关方尽早参与项目工作，对项目至关重要，相关方的参与有助于其了解项目状况、从而支持项目（尽早参与）\n> 4. 充分发挥相关方的作用来促进项目成功\n> 5. 尽早面对消极相关方，如何面对积极相关方一样\n\n相关方管理关注满意度：满意度、期望、态度、利益冲突\n\n> - 相关方满意度作为项目目标加以识别管理\n> - 引导相关方参与的关键是重视与所有相关方保持持续沟通（包括团队成员）\n> - 理解他们的需求和期望、处理所发生的问题、管理利益冲突\n> - 促进相关方参与项目决策和活动\n\n相关方管理步骤：\n\n1. 识别相关方\n2. 相关方优先级排序\n3. 管理相关方期望\n4. 持续识别相关方\n5. 收尾时获得关键相关方认可\n\n### 四个 过程组\n\n#### 一、识别相关方（启动）\n\n> 定期识别项目相关方，分析和记录他们的利益、参与度、相互依赖性、影响力和对项目成功的潜在影响过程\n>\n> 作用：帮助项目经理经理对各个相关方或相关方群体的适度关注\n\n分类方法：\n\n- 权力：相关方的职权级别\n- 利益：对项目成果的关心程度\n- 影响：主动参与项目的程度\n- 作用：改变项目计划或执行的能力\n\n权力-利益方格：\n\n> 权力高-利益高：重点管理\n>\n> 权力高-利益低：令其满意\n>\n> 权力低-利益高：随时告知\n>\n> 权力低-利益低：监督\n\n**输入：**\n\n1. 项目章程\n2. 商业文件\n   - 商业论证\n   - 效益管理计划\n3. 项目管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n4. 项目文件\n   - 变更日志\n   - 问题日志\n   - 需求文件\n5. 协议\n6. 事业环境因素\n7. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 头脑风暴\n3. 数据分析\n   - 相关方分析\n   - 文件分析\n4. 数据表现\n   - 相关方映射分析/表现\n5. 会议\n\n**输出：**\n\n1. 相关方登记册\n2. 变更请求\n3. 项目管理计划更新\n   - 需求管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 相关方参与管理计划\n4. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 风险登记册\n\n#### 二、规划相关方参与（规划）\n\n> 根据相关方的需求、期望、利益和对项目的潜在影响，制定项目相关方参与项目的方法过程\n>\n> 作用：提供相关方进行有效互动的可行计划\n\n相关方参与水平：\n\n1. 不知晓：不知道项目及其潜在影响\n2. 抵制：知晓项目和潜在影响，抵制变更\n3. 中立：知晓项目，既不支持，也不反对\n4. 支持：了解项目及其潜在影响，支持项目工作及其成果\n5. 领导：知晓项目和潜在影响，积极参与确保项目取得成功\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 风险管理计划\n3. 项目文件\n   - 假设日志\n   - 变更日志\n   - 问题日志\n   - 项目进度计划\n   - 风险登记册\n   - 相关方登记册\n4. 协议\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 标杆对照\n3. 数据分析\n   - 假设条件与制约因素分析\n   - 根本原因分析\n4. 决策\n   - 排列优先级/排名\n5. 数据表现\n   - 思维导图\n   - 相关方参与度评估矩阵\n6. 会议\n\n**输出：**\n\n1. 相关方参与计划\n\n#### 三、管理相关方参与（执行）\n\n> 与相关方进行沟通和协作以满足其需求与期望、处理问题，并促进相关方合理参与的过程\n>\n> 作用：\n>\n> - 让项目经理能够提供相关方的支持，并尽可能降低相关方的地址\n> - 确保相关方明确了解项目目的、目标、收益和风险，以及他们的贡献将如何促进项目成功\n\n**输入：**\n\n1. 项目管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 相关方参与计划\n   - 变更管理计划\n2. 项目文件\n   - 变更日志\n   - 问题日志\n   - 经验教训登记册\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 沟通技巧\n   - 反馈\n3. 人际关系与团队技能\n   - 冲突管理\n   - 文化意识\n   - 谈判\n   - 观察/交谈\n   - 政治意识\n4. 基本规则\n5. 会议\n\n**输出：**\n\n1. 变更请求\n2. 项目管理计划更新\n   - 沟通管理计划\n   - 相关方参与计划\n3. 项目文件更新\n   - 变更日志\n   - 问题日志\n   - 经验教训登记册\n   - 相关方登记册\n\n#### 四、控制相关方参与（监督）\n\n> 监督相关方关系，并通过修订参与策略和计划来引导相关方合理参与项目的过程\n>\n> 作用：随着项目进展和环境变化，维持或提升相关方参与活动的效率和效果\n>\n> > 效率：确保相关方按照计划参与了应该参与的项目活动\n> >\n> > 效果：相关方仅需要参加需要参与的项目活动\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n2. 项目文件\n   - 问题日志\n   - 经验校训登记册\n   - 项目沟通记录\n   - 风险登记册\n   - 相关方登记册\n3. 工作绩效数据\n4. 事业环境因素\n5. 组织过程资产\n\n1. 数据分析\n   - 备选方案分析\n   - 根本原因分析\n   - 相关方分析\n2. 决策\n   - 多标准决策分析\n   - 投票\n3. 数据表现\n   - 相关方参与度评估矩阵\n4. 沟通技能\n   - 反馈\n   - 演示\n5. 人际关系与团队技能\n   - 积极倾听\n   - 文化意识\n   - 领导力\n   - 人际交往\n   - 政治意识\n6. 会议\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n4. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 风险登记册\n   - 相关方登记册\n\n\n\n\n\n","source":"_posts/PMP/知识领域.md","raw":"---\ntitle: 十大知识领域\ntags:\n - PMP\ncategories:\n - PMP\n---\n\n#\t十大知识领域\n\n## 整合-项目整合管理\n\n> 识别、定义、组合、统一和协调个项目管理过程组的各种过程和活动而展开的活动与过程。\n>\n> 整合：统一、合并、沟通和简历联系；贯穿项目始终\n\n###\t七个过程组\n\n#### 一、制定项目章程（启动）\n\n> 执行一次\n>\n> 编写一份正式批准的项目，授权项目经理使用组织资源的文件过程。里面描述高层级的期望\n>\n> 作用：\n>\n> > 明确项目与组织战略目标之间的直接联系\n> >\n> > 确立项目的正式地位\n> >\n> > 展示组织对项目的承诺\n>\n> 解读：\n>\n> > 明确定义项目开始和项目边界（边界模糊）\n> >\n> > 项目章程一旦被批准，就标志着项目正式启动\n> >\n> > 高层对项目的支持\n\n**输入：**\n\n1. 商业文件\n   - 商业论证\n   - 效益管理计划\n2. 协议\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集：\n   + 头脑风暴\n   + 焦点小组\n   + 访谈\n3. 人机关系与团队技能：\n   + 冲突管理\n   + 引导\n   + 会议管理\n4. 会议\n\n**输出：**\n\n1. 项目章程\n\n   > 是由项目启动者或发起人发布的，正式批准项目成立，并授权项目经理使用组织资源开展项目活动的文件\n\n2. 假设日志\n\n#### 二、制定项目计划（规划）\n\n> 执行一次\n>\n> 定义、准备和协调项目计划的所有组成部分，并把他们整理合为一份综合项目管理计划的过程\n>\n> 作用：综合文件，确定所有项目工作的基础及其执行方式\n>\n> 性质：必须是综合，经批准的，现实可行的，正式的\n\n**输入：**\n\n1. 项目章程\n2. 其他过程的输出\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集：\n   + 头脑风暴\n   + 核对单\n   + 焦点小组\n   + 访谈\n3. 人际关系与团队技能：\n   + 冲突管理\n   + 引导\n   + 会议管理\n4. 会议\n\n**输出：**\n\n1. 项目管理计划\n\n#### 三、指导与管理项目工作（执行）\n\n> 整个项目期间开展\n>\n> 实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准的变更过程\n>\n> 作用：对项目工作提供综合管理，提高项目成功的可能性\n\n**输入：**\n\n1. 项目管理计划\n2. 项目文件：\n   + 变更日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目沟通记录\n   + 项目进度计划\n   + 需求跟踪矩阵\n   + 风险登记册\n   + 风险报告\n3. 经批准的变更请求\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 项目管理信息系统\n3. 会议\n\n**输出：**\n\n1. 可交付成果\n2. 工作绩效数据\n3. 问题日志\n4. 变更请求\n5. 项目管理计划更新\n6. 项目文件更新：\n   + 活动清单\n   + 假设日志\n   + 经验教训登记册\n   + 需求文件\n   + 风险登记册\n   + 相关方登记册\n7. 组织过程资产\n\n#### 四、管理知识领域（执行）\n\n>整个项目期间开展\n>\n>使用现有的只是并生成新知识，实现项目目标，且帮助组织学习的过程。\n\n**输入：**\n\n1. 项目管理计划\n2. 项目文件：\n   + 项目团队派工单\n   + 资源分解结构\n   + 供方选择标准\n   + 相关方登记册\n3. 可交付成果\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 知识管理\n3. 信息管理\n4. 人际关系与团队技能：\n   + 积极倾听\n   + 引导\n   + 领导力\n   + 人际交往\n   + 政治意识\n\n**输出：**\n\n1. 经验教训登记册\n2. 项目管理计划更新\n3. 组织过程资产更新\n\n#### 五、监控项目工作（监控）\n\n> 整个项目期间开展\n>\n> 跟踪、审查和报告整体项目进展，实现项目管理计划中确定的绩效目标过程\n>\n> 作用：让相关方了解项目的当前状态并认可为处理绩效问题而采取的行动，以及通过成本和进度预测，让相关方了解未来项目状态\n>\n> 工作内容：\n>\n> - 项目的实际绩效与项目管理计划进行比较\n> - 定期评估项目记下，决定是否需要采取纠正或预防措施，并推荐必要的措施\n> - 检查单个项目风险的状态\n> - 维护一个准确且及时更新的信息库，以反应项目产品及相关文件的情况\n> - 为状态报告、进展测量和预测提供信息\n> - 做出预测，以更新当前的成本与进度信息\n> - 监督已批准变更的实施情况\n> - 确保项目与商业需求保持一致\n\n**输入：**\n\n1. 项目管理计划\n2. 项目文件：\n   + 假设日志\n   + 估算依据\n   + 成本预测\n   + 问题日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 质量报告\n   + 风险登记册\n   + 风险报告\n   + 进度预测\n3. 工作绩效信息\n4. 协议\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析：\n   + 备选方案分析\n   + 成本效益分析\n   + 挣值分析\n   + 根本原因分析\n   + 趋势分析\n   + 偏差分析\n3. 决策\n4. 会议\n\n**输出：**\n\n1. 工作绩效报告\n2. 变更请求\n3. 项目管理计划更新\n4. 项目文件更新：\n   + 成本预测\n   + 问题日志\n   + 经验教训登记册\n   + 风险登记册\n   + 进度预测\n\n#### 六、实施整体变更控制（监控）\n\n> 整个项目期间开展\n>\n> 审查所有变更请求、批准变更、管理对可交付成果、组织过程资产、项目文件和项目管理计划变更，并对变更处理结果进行沟通的过程\n>\n> 作用：确保对项目中已记录在案的变更做综合评审\n\n变更控制流程：\n\n1. 消除变更的根本原因\n2. 识别并确认变更\n3. 在知识领域分析影响\n4. **评估变更整体影响（整体变更控制）**\n5. **寻找可行方案（整体变更控制）**\n6. **批准或拒绝变更（整体变更控制）**\n7. **更新变更日志（整体变更控制）**\n8. **更新计划或基准（整体变更控制）**\n9. 沟通变更决定\n10. 实施跟踪确认变更\n\n**输入：**\n\n1. 项目管理计划：\n   + 变更管理计划\n   + 配置管理计划\n   + 范围基准\n   + 进度基准\n   + 成本基准\n2. 项目文件：\n   + 估算依据\n   + 需求跟踪矩阵\n   + 风险报告\n3. 工作绩效报告\n4. 变更请求\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 变更控制工具\n3. 数据分析：\n   + 备选方案分析\n   + 成本效益分析\n4. 决策：\n   + 投票\n   + 独裁型决策制定\n   + 多标准决策分析\n5. 会议\n\n**输出：**\n\n1. 批准的变更请求\n2. 项目管理计划更新\n3. 项目文件更新：\n   + 变更日志\n\n#### 七、结束项目或阶段（收尾）\n\n> 开展一次\n>\n> 结束项目或阶段是终结项目、阶段或合同的所有活动的过程\n>\n> 作用：完成计划工作、总结经验教训、存档项目或阶段信息、释放组织资源以开展新工作\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n3. 项目文件：\n   + 假设日志\n   + 估算依据\n   + 变更日志\n   + 问题日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目沟通记录\n   + 质量控制车辆结果\n   + 质量报告\n   + 需求文件\n   + 风险登记册\n   + 风险报告\n4. 验收的可交付成果\n5. 商业文件：\n   + 商业论证\n   + 效益管理计划\n6. 协议\n7. 采购文件\n8. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析：\n   + 文件分析\n   + 回归分析\n   + 趋势分析\n   + 偏差分析\n3. 会议\n\n**输出：**\n\n1. 项目文件更新：\n   + 经验教训登记册\n2. 最终产品、服务或成果移交\n3. 最终报告\n4. 组织过程资产更新：\n   + 项目文件\n   + 运营和支持文件\n   + 项目或阶段收尾文件\n   + 经验教训库\n\n## 范围-项目范围管理\n\n> 确保项目做且只做所需的全部工作，以成功完成项目的各个过程\n\n项目范围：有时包含产品范围，交付具有规定相遇功能的产品。服务或成果而必须完成的工作；完成情况根据**管理计划**衡量\n\n产品范围：某项产品、服务或成果所具有的特征和功能；完成情况根据**产品需求**衡量\n\n**与范围有关的文件：**\n\n>商业文件\n>\n>项目章程\n>\n>需求文件\n>\n>需求跟踪矩阵\n>\n>范围基准\n>\n>> 项目范围说明书\n>>\n>> 工作分解结构\n>>\n>> WBS词典\n>\n>采购工作说明书\n\n### 六个过程组\n\n#### 一、规划范围管理（规划）\n\n> 记录如何定义、确认和控制项目范围及产品范围，而创建范围管理计划的过程\n>\n> 作用：在整个项目期间如何管理范围提供指南和方向\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划：\n   + 质量管理计划\n   + 项目生命周期描述\n   + 开发方法\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析：\n   + 备选方案分析\n3. 会议\n\n**输出：**\n\n1. 范围管理计划\n2. 需求管理计划\n\n#### 二、收集需求（规划）\n\n> 实现项目目标而确定、记录并管理相关方的需要和需求的过程\n>\n> 作用：为定义和管理项目范围（包含产品范围）奠定基础\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   + 范围管理计划\n   + 需求管理计划\n   + 相关方参与计划\n3. 项目文件\n   + 假设日志\n   + 经验教育登记册\n   + 相关方登记册\n4. 商业文件\n   + 商业论证\n5. 协议\n6. 事业环境因素\n7. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   + 头脑风暴\n   + 访谈\n   + 焦点小组\n   + 问卷调查\n   + 标杆对照\n3. 数据分析\n   + 文件分析\n4. 决策\n   + 投票\n   + 多标准决策分析\n5. 数据表现\n   + 亲和图\n   + 思维导图\n6. 人际关系与团队技能\n   + 名义小组（排序）\n   + 观察、交谈\n   + 引导、引导式研讨会\n7. 系统关系图\n8. 原型法\n\n**输出：**\n\n1. 需求文件\n2. 需求跟踪矩阵\n\n#### 三、定义范围（规划）\n\n> 指定项目和产品详细描述过程\n>\n> 作用：描述产品、服务或成果的边界和验收标准\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   + 范围管理计划\n3. 项目文件\n   + 假设日志\n   + 需求文件\n   + 风险登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n   + 备选方案分析\n3. 决策\n   + 多标准决策分析\n4. 人际关系与团队技能\n   + 引导\n5. 产品分析\n\n**输出：**\n\n1. 项目范围说明书\n2. 项目文件更新\n   + 假设日志\n   + 需求文件\n   + 需求跟踪矩阵\n   + 相关方登记册\n\n#### 四、创建WBS（规划）\n\n> 把项目可交付成果和项目工作分解成较小的、更易于管理的组件过程\n>\n> 作用：对所要交付的内容一共一个结构化的视图\n\n工作分解结构：\n\n> WBS是对项目团队为实现项目目标、创建可交付成果而需要实施的全部工作范围的层级分解；\n>\n> 并且定义了项目的总范围，代表着经批准的当前项目范围说明书中所规定的工作。\n\n**输入：**\n\n1. 项目管理计划\n   + 范围管理计划\n2. 项目文件\n   + 项目范围说明书\n   + 需求文件\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 分解：100%原则、4至6层，最底层工作包，80小时（两周）原则、责任人、暂时不能分解的设置规划包\n\n**输出：**\n\n1. 范围基准\n2. 项目文件更新\n   + 假设日志\n   + 需求文件\n\n#### 五、确认范围（监控）\n\n> 正式验收已完成的项目可交付成果的过程\n>\n> 作用：是验收过程具有客观性；同时通过验收每个可交付成功，提高最终产品、服务或成果获得验收的可能性\n>\n> Verify：核实可交付成果在前，属于控制质量过程\n>\n> Validate：确认可交付成果在后，属于确认范围过程\n>\n> **验收：先控制质量再确认范围**\n>\n> 控制质量是项目团队，而确认范围是客户或发起人\n\n**输入：**\n\n1. 项目管理计划\n   + 范围管理计划\n   + 需求管理计划\n   + 范围基准\n2. 项目文件\n   + 经验教训登记册\n   + 质量报告\n   + 需求文件\n   + 需求跟踪矩阵\n3. 核实的可交付成果\n4. 工作绩效数据\n\n**工具与技术：**\n\n1. 检查\n2. 决策\n   + 投票\n\n**输出：**\n\n1. 验收的可交付成果\n2. 工作绩效信息\n3. 变更请求\n4. 项目文件更新\n   + 经验教训登记册\n   + 需求文件\n   + 需求跟踪矩阵\n\n#### 六、控制范围（监控）\n\n> 监督项目和产品的单位状态，管理范围基准变更的过程\n>\n> 作用：在整个项目期间保持对范围基准的维护\n\n范围蔓延：未经控制的产品或项目范围的扩大（未对时间、成本和资源做相应调整）\n\n镀金：超出范围定义，主动增加额外的工作而得不到任何经济补偿的行为\n\n**输入：**\n\n1. 项目管理计划\n   + 范围管理计划\n   + 需求管理计划\n   + 变更管理计划\n   + 配置管理计划\n   + 范围基准\n   + 绩效测量标准\n2. 项目文件\n   + 经验教训登记册\n   + 需求文件\n   + 需求跟踪矩阵\n3. 工作绩效数据\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 数据分析\n   + 偏差分析\n   + 趋势分许\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   + 范围管理计划\n   + 范围基准\n   + 进度基准\n   + 成本基准\n   + 绩效测量基准\n4. 项目文件更新\n   + 经验教训登记册\n   + 需求文件\n   + 需求跟踪矩阵\n\n## 进度-项目进度管理\n\n> 在WBS基础上继续分解成相关活动；为管理项目按时完成所需的各个过程\n>\n> WBS工作报告===》活动===》进度计划\n\n进度规划方法：关键路径法、关键链法\n\n进度编制工具：进度模板、项目管理软件\n\n进度模型（进度计划草稿，被批准后就是项目进度计划，也就是项目进度计划的前身）\n\n### 六个过程组\n\n#### 一、规划进度管理（规划）\n\n> 规划、编制、管理、执行和控制项目进度而制定的侦测、程序和文档的过程\n>\n> 作用：在整个项目过程中管理项目进度提供指南和方向\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   + 范围管理计划\n   + 开发方法\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n3. 会议\n\n**输出：**\n\n1. 进度管理计划\n\n#### 二、定义活动（规划）\n\n> 识别和记录；为完成项目可交付成果而采取的具体行动过程\n>\n> 作用：将工作包分解为活动，作为对项目工作进行估算、进度规划、执行、监督和控制的基础\n\n**输入：**\n\n1. 项目进度计划\n   + 进度管理计划\n   + 范围基准\n2. 事业环境因素\n3. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 分解\n3. 滚动式规划\n4. 会议\n\n**输出：**\n\n1. 活动清单\n2. 活动属性（时间、资源、等等）\n3. 里程碑清单\n4. 变更请求\n5. 项目管理计划更新\n   + 进度基准\n   + 成本基准\n\n#### 三、排列活动顺序（规划）\n\n> 识别和记录活动之间关系的过程\n>\n> 作用：定义工作之间的逻辑顺序，以便在既定的项目制约因素下获得最高效率\n\n**输入：**\n\n1. 项目管理计划\n   + 进度管理计划\n   + 范围基准\n2. 项目文件\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 里程碑清单\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 紧前关系绘图法（PDM）\n2. 确定和整合依赖关系：硬逻辑、软逻辑\n3. 提前量和滞后量\n4. 项目管理信息系统\n\n**输出：**\n\n1. 项目进度网络图\n2. 项目文件更新\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 里程碑清单\n\n#### 四、估算活动时间（规划）\n\n> 根据资源估算结果，估算完成单项活动所需的工作时段数的过程\n>\n> 作用：确定完成每个活动所需话费的时间量；工作量=时间 X 资源\n\n收益递减规律：当持续加大投入资源时，当达到收益平衡点时，收益就会持续下降。（举例：卖牛肉面）\n\n**输入：**\n\n1. 项目管理计划\n   + 进度管理计划\n   + 范围基准\n2. 项目文件\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目团队派工单\n   + 资源分解结构\n   + 资源日历\n   + 资源需求\n   + 风险登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 类比估算\n3. 参数估算\n4. 自下而上估算\n5. 数据分析\n   + 备选方案分析\n   + 储备分析\n6. 决策\n7. 会议\n\n**输出：**\n\n1. 持续时间估算\n2. 估算依据\n3. 项目文件更新\n   + 活动属性\n   + 假设日志\n   + 经验教训登记册\n\n#### 五、制定进度计划（规划）\n\n> 分析活动顺序、持续时间、资源需求和进度制约因素，创建进度模型，从而落实项目执行和监控过程。\n>\n> 作用：为完成项目活动而制定具有计划日期的进度模型\n\n关键法：\n\n> 在进度模型中，估算项目最短工期，确定逻辑网络路劲的进度灵活性大小的一种方法；关键路劲是项目时间最长的活动顺序，决定着可能的项目最短工期。关键\n\n关键链法：\n\n> 一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲，来应对资源限制和项目不确定性\n>\n> 需要考虑活动持续时间、逻辑关系和资源可用性，其中活动持续时间中不包含安全沉余。它用统计方法确定缓冲时段\n>\n> > 项目缓冲：放在关键链末端缓冲，保证项目不因关键链延误而延误\n> >\n> > 接驳缓冲：放置在非关键链与关键链的接合点，保护关键链不收非关键链延误影响。（防止关键路径变更）\n>\n> 1、应对资源限制和项目不确定性\n>\n> 2、基于关键路径（计算完关键路径后）\n>\n> 3、资源约束性关键路劲就是关键链\n>\n> 4、不确定性决定缓冲时间长短\n>\n> 5、重点管理：剩余的缓冲持续时间与剩余的活动持续时间之间的匹配关系\n\n最早与最迟时间\n\n> ES（Earliest Start）：活动能够开始的最早时间\n>\n> EF（Earliest Finish）：活动能够完成的最早时间\n>\n> LF（Latest Finish）：活动能够开始的最迟时间\n>\n> LS（Latest Start）：活动能够完成的最迟时间\n>\n> ES + DU = EF\n>\n> LF - DU = LS\n>\n> TF = LS - ES = LF - EF\n>\n> |  ES  |    DU：持续时间    |  EF  |\n> | :--: | :----------------: | :--: |\n> |      | 活动ID（活动名称） |      |\n> |  LS  |   TF：总浮动时间   |  LF  |\n\n顺推：MAX（EF1，EF2。。。）\n\n倒推：MIN（LS1，LS2。。。）\n\n自由时间：FF = ES（后一节点） - EF（当前活动）\n\n**输入：**\n\n1. 项目管理计划\n   + 进度管理计划\n   + 范围基准\n2. 项目文件\n   + 活动属性\n   + 活动清单\n   + 假设日志\n   + 估算依据\n   + 持续时间估算\n   + 经验教训登记册\n   + 里程碑清单\n   + 项目进度网络图\n   + 项目团队派工单\n   + 资源日历\n   + 资源需求\n   + 风险登记册\n3. 协议\n4. 事业环境因素\n\n**工具与技术：**\n\n1. 进度网络分析\n2. 关键路劲法\n3. 资源优化\n4. 数据分析\n   + 假设情景\n   + 模拟\n5. 提前量和滞后量\n6. 进度压缩\n7. 项目管理信息系统\n8. 敏捷发布规划\n\n**输出：**\n\n1. 进度基准（给发起人和相关方的高层级概要）\n2. 项目进度计划\n3. 进度数据\n4. 项目日历\n5. 项目管理计划更新\n   - 进度管理计划\n   - 风险管理计划\n   - 成本基准\n6. 项目文件更新\n   - 活动属性\n   - 假设日志\n   - 持续时间估算\n   - 经验教训登记册\n   - 资源需求\n   - 风险登记册\n\n#### 六、控制进度（监控）\n\n> 监督项目状态，更新项目进度和管理进度基准变更的过程\n>\n> 作用：保持对进度基准的维护\n\n**输入：**\n\n1. 项目管理计划\n   - 进度管理计划\n   - 进度基准\n   - 范围基准\n   - 绩效测量标准\n2. 项目文件\n   - 经验教训登记册\n   - 项目日历\n   - 项目进度计划\n   - 资源日历\n   - 进度数据\n3. 工作绩效数据\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 数据分析\n   - 挣值分析\n   - 迭代燃烧图\n   - 绩效评审\n   - 趋势分析\n   - 偏差分析\n   - 假设情景分析\n2. 关键路径法\n3. 项目管理信息系统\n4. 资源优化\n5. 提前量和滞后量\n6. 进度压缩\n\n**输出：**\n\n1. 工作绩效信息\n2. 进度预测\n3. 变更请求\n4. 项目管理计划更新\n   - 进度管理计划\n   - 进度基准\n   - 成本基准\n   - 绩效测量基准\n5. 项目文件更新\n   - 假设日志\n   - 估算依据\n   - 经验教训登记册\n   - 项目进度计划\n   - 资源日历\n   - 风险等级册\n   - 进度数据\n\n## 成本-项目成本管理\n\n> 为使用项目在批准的预算内完成而对成本进行规划、估算、预算、融资、周知、管理和控制的各个过程\n>\n> 目的：确保项目在批准的预算内完工\n\n核心概念：\n\n> **项目生命周期成本：**完成项目活动所需的成本；重点关注完成项目活动所需资源的成本，但同时也应考虑项目决策对项目产品、服务或成果的使用成本、维护成本和支持成本的影响\n>\n> **多次测量时机：**不同的相关方会在不同的时间，用不同的方法测算项目成本。例如：对于某采购品，可在做出采购决策、下达订单、实际交货、实际成本发生或进行会计记账时，测算其成本\n>\n> **项目内或项目外成本分析：**在很多组织中，预测和分心项目产品的财务效益是在项目之外进行的，但对于有些项目，如固定资产投资项目，可在项目成本管理中进行这项预测和分析工作。可用方法：通用财务管理技术，如投资回报率分析、现金流贴现分析和投资回收期分析\n\n##### 经营性财务知识\n\n1. 可变成本\n\n   > 随生产量或工作而变的成本，如人员工资，消耗的原材料等\n\n2. 固定成本\n\n   > 不随生产规模变化的非重复成本，如设备费用、场地租赁费用等\n\n3. 直接成本\n\n   > 能够直接归属于项目工作的成本，如项目组旅行费用、项目组人员工资和奖金、项目使用的物资等\n\n4. 间接成本\n\n   > 一般管理费用科目或几个项目共同分担的成本。如员工福利、保安费用、行政部门和财务部门费用等\n\n5. 机会成本\n\n   > 因为选择一个机会而放弃的另外一个机会可以获得的收益；例如一个人投资炒股赚10万，而同期如果买商品房的话可以赚500万。如果此人投资超过而没有买商品房，则选择炒股的机会成本就是500万\n\n6. 沉没成本\n\n   > 哪些在过去发生的费用，就像沉船一样不能回收的部分。当决定继续投资项目时，不应该考虑这部分费用。当决定项目是否该继续时，许多人像赌徒一样的心里指望能够收回沉没成本\n\n\n\n### 四个过程组\n\n#### 一、规划成本管理（规划）\n\n> 确定如何估算、预算。管理。监督和控制项目成本的过程\n>\n> 作用：在整个项目为如何管理项目成本提供指南和方向\n\n\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 进度管理计划\n   - 风险管理计划\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n3. 会议\n\n**输出：**\n\n1. 成本管理计划\n\n#### 二、估算成本（规划）\n\n> 对完成项目工作所需资源成本进行近似估算的过程\n>\n> 作用：确定项目所需的资金，是对成本的预测\n>\n> 在估算成本时，需要识别和分析可用于启动与完成项目的备选成本方案\n>\n> 需要权衡备选成本方案并考虑等闲，以优化项目成本\n>\n> 进行成本估算，应该考虑将向项目收费的全部资源\n\n估算成本单位：通常用某种获取单位，如美元、欧元、人民币等；但有时也采用其他计量单位，如人时或人天数，以消除同伙膨胀的映像，便于成本比较\n\n估算过程是渐进明细的：启动阶段可得出项目的粗略量级估算（ROM）：-25%-+75%；随着信息越来越详细，估算区间可缩小为：-5%-+10%\n\n**输入：**\n\n1. 项目管理计划\n   - 成本管理计划\n   - 质量管理计划\n   - 范围基准\n2. 项目文件\n   - 经验教训登记册\n   - 项目进度计划\n   - 资源需求\n   - 风险登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 类比估算\n3. 参数估算\n4. 自下而上估算\n5. 三点估算\n6. 数据分析\n   - 备选方案分析\n   - 储备分析\n   - 质量成本\n7. 项目管理信息系统\n8. 决策\n   - 投票\n\n**输出：**\n\n1. 成本估算\n2. 估算依据\n3. 项目文件更新\n   - 假设日志\n   - 经验登记册\n   - 风险登记册\n\n#### 三、制定预算（规划）\n\n> 汇总所有单个活动或工作包的估算成本，简历一个经批准的成本基线的过程；以WBS为重要依据\n>\n> 作用：确定成本基准，可据此监督和控制项目绩效\n\n**输入：**\n\n1. 项目管理计划\n   - 成本管理计划\n   - 资源管理计划\n   - 范围基准\n2. 项目文件\n   - 估算依据\n   - 成本估算\n   - 项目进度计划\n   - 风险登记册\n3. 商业文件\n   - 商业论证\n   - 效益管理计划\n4. 协议\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 成本汇总\n3. 数据分析\n   - 储备分析\n4. 历史信息审核\n5. 资金限制平衡\n6. 融资\n\n**输出：**\n\n1. 成本基准\n2. 项目资金需求\n3. 项目文件更新\n   - 成本估算\n   - 项目进度计划\n   - 风险登记册\n\n#### 四、控制成本（监控）\n\n> 监督项目状态、以更新项目成本，管理成本基准变更的过程。\n>\n> 作用：在整个项目期间保持对成本基准的维护\n>\n> 重点分析：项目资金支出与相应完成的实际工作之间的关系\n>\n> 有效成本控制的关键：在于与经批准的成本基准及其变更进行管理\n>\n> 确保成本支持不超过批准的资金限额：既不超出按时段、按WBS组件、按活动分配的限额，也不超出项目总限额\n\n**变更管理：**\n\n- 影响不必要的变更\n- 及时处理变更\n- 管理已发生的变更\n- 防止在成本或资源使用报告中出现未经批准的变更\n- 向相关方报告所有经批准的变更及其相关成本\n\n**控制成本&进度：**\n\n- 确保成本支出不超过批准的资金限额，既不超出按时段、按WBS组件。按活动分配的限额，也不超出项目总限额\n- 没法把逾期的成本超支控制在可接受的范围内\n\n**监督绩效：**\n\n- 监督成本绩效，找出并分析与成本基准间的偏差\n- 对照资金支出，监督工作\n\n**输入：**\n\n1. 项目管理计划\n   - 成本管理计划\n   - 成本基准\n   - 绩效测量基准\n2. 项目文件\n   - 经验教训登记册\n3. 项目资金需求\n4. 项目绩效数据\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n\n2. 数据分析\n\n   - 挣值分析\n   - 偏差分析\n   - 趋势分析\n   - 储备分析\n\n3. 完工尚需绩效指数\n\n   > TCPI：在项目执行的不通时间点估算的为在既定预算内完工而必须达到的未来成本绩效\n   >\n   > TCPI = （BAC -  EC）/ （BAC - AC）\n\n4. 项目管理信息系统\n\n**输出：**\n\n1. 工作绩效信息\n2. 成本预测\n3. 变更请求\n4. 项目管理计划更新\n   - 成本管理计划\n   - 成本基准\n   - 绩效测量基准\n5. 项目文件更新\n   - 假设日志\n   - 估算依据\n   - 成本估算\n   - 经验教训登记册\n   - 风险登记册\n\n## 质量-项目质量管理\n\n> 把最值的质量政策应用于规划、管理、控制项目和产品的质量要求已满足相关方目标的各个过程\n>\n> 项目质量管理确定项目需求，包括产品需求得到满足和确认\n>\n> 不担关注可交付成果的质量，还要关注过程的质量（管理过程、设计过程）\n\n**质量：**在功能相等的情况下进行比较\n\n**等级：**功能多少叫做等级\n\n**精确：**精密程度的度量，重复测量的结果非常聚合，离散度很小\n\n**准确：**对正确性的评估，测量值非常接近实际值\n\n### 三个过程组\n\n#### 一、规划质量管理（规划）\n\n> 识别项目及其可交付成果的质量要求和标准，并书面描述项目将如何证明符合质量要求和标准的过程\n>\n> 作用：在整个项目奇迹如何管理和核实质量提供指南和方向\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 需求管理计划\n   - 风险管理计划\n   - 相关方参与计划\n   - 范围基准\n3. 项目文件\n   - 假设日志\n   - 需求文件\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 标杆对照\n   - 头脑风暴\n   - 访谈\n3. 数据分析\n   - 成本效益分析\n   - 质量成本\n4. 决策\n   - 多标准决策分析\n5. 数据表现\n   - 流程图\n   - 逻辑数据模型\n   - 矩阵图\n   - 思维导图\n6. 测试和检查规划\n7. 会议\n\n**输出：**\n\n1. 质量管理计划\n2. 质量测量指标\n3. 项目管理计划更新\n   - 风险管理计划\n   - 范围基准\n4. 项目文件更新\n   - 经验教训登记册\n   - 风险登记册\n   - 相关方登记册\n\n#### 二、管理质量（规划）\n\n> 把组织的主梁政策用于项目，并且质量管理计划转化为可执行的质量活动的过程\n>\n> 作用：提高实现质量目标的可能性，一级识别无效过程的导致质量低劣的原因\n>\n> 管理质量使用控制质量过程的数据和结果向相关方专事项目的总体质量状态\n\n**问题解决：**\n\n1. 定义问题\n2. 识别根本性原因\n3. 生成可能的解决方案\n4. 选择最佳解决方案\n5. 执行解决方案\n6. 验证解决方案的有效性\n\n**输入：**\n\n1. 项目管理计划\n   - 质量管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 质量控制测量结果\n   - 质量测量指标\n   - 风险报告\n3. 组织过程资产\n\n**工具与技术：**\n\n1. 数据收集\n   - 核对单\n2. 数据分析\n   - 备选方案分析\n   - 文件分析\n   - 过程分析\n   - 根本原因分析\n3. 决策\n   - 多标准决策分析\n4. 数据表现\n   - 亲和图\n   - 因果图\n   - 流程图\n   - 直方图\n   - 矩阵图\n   - 散点图\n5. 审计\n6. 面向X的设计\n7. 问题解决\n8. 质量改进方法\n\n**输出：**\n\n1. 质量报告\n2. 测试与凭借文件（测试用例）\n3. 变更请求\n4. 项目管理计划更新\n   - 质量管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n5. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 风险登记册\n\n#### 三、控制质量（监控）\n\n> 评估绩效，确保项目输出完整、正确且满足客户期望，而监督和记录质量管理活动执行结果的过程\n>\n> 作用：核实项目可交付成果和工作已经达到主要相关方的质量要求，可供最终验证（先内部确认满足验收标准）\n\n**输入：**\n\n1. 项目管理计划\n   - 质量管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 质量测量指标\n   - 测试与评价文件\n3. 批准的变更请求\n4. 可交付成果\n5. 工作绩效数据\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 数据收集\n   - 核对单\n   - 核查表\n   - 统计抽样\n   - 问卷调查\n2. 数据分析\n   - 绩效审查\n   - 根本原因分析\n3. 检查\n4. 测试/产品评估\n5. 数据表现\n   - 因果图\n   - 控制图\n   - 直方图\n   - 散点图\n6. 会议\n\n**输出：**\n\n1. 质量控制测量结果\n2. 核实的可交付成果\n3. 工作绩效信息\n4. 变更请求\n5. 项目管理计划更新\n   - 质量管理计划\n6. 项目文件更新\n   - 问题日志\n7. 经验教训登记册\n8. 风险登记册\n9. 测试与评估文件\n\n## 资源-项目资源管理\n\n> 识别、获取和管理所需资源以成功完成项目的各个过程，这些过程有助于确保项目经理和项目团队在正确的时间和正确的地点使用正确的资源\n\n### 六个过程组\n\n#### 一、规划资源管理（规划）\n\n> 如何估算、获取、管理和利用团队以及实物资源的过程。\n>\n> 作用：根据项目类型和复杂程度确定适用于项目资源的管理方法和管理程度\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 质量管理计划\n   - 范围基准\n3. 项目文件\n   - 项目进度计划\n   - 需求文件\n   - 风险登记册\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据表现\n   - 层级型\n   - 责任分配矩阵\n   - 文本型\n3. 组织理论\n4. 会议\n\n**输出：**\n\n1. 资源管理计划\n2. 团队章程\n3. 项目文件更新\n   - 假设日志\n   - 风险登记册\n\n#### 二、估算活动资源（规划）\n\n> 是估算执行项目所需的团队资源，以及材料、设备和用品的类型和数量的过程\n>\n> 作用：明确完成项目所需的资源种类、数量和特性\n>\n> 以便做出更准确的成本和持续时间估算\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 范围基准\n2. 项目文件\n   - 活动属性\n   - 活动清单\n   - 假设日志\n   - 成本估算\n   - 资源日历\n   - 风险登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 自下而上估算\n3. 类比估算\n4. 参数估算\n5. 数据分析\n   - 备选方案分析\n6. 项目管理信息系统\n7. 会议\n\n**输出：**\n\n1. 资源需求\n2. 估算依据\n3. 资源分解结构\n4. 项目文件更新\n   - 活动属性\n   - 假设日志\n   - 经验教训登记册\n\n#### 三、获取资源（执行）\n\n> 获取团队成员、设施、设备、材料、用品和其他资源的过程\n>\n> 作用：概述和指导资源的选择，并将其分配给相应的活动\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 采购管理计划\n   - 成本基准\n2. 项目文件\n   - 项目进度计划\n   - 资源日历\n   - 资源需求\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 决策\n   - 多标准决策分析\n2. 人际关系与团队技能\n   - 谈判\n3. 预分派\n4. 虚拟团队\n\n**输出：**\n\n1. 物质资源分派单\n2. 项目团队派工单\n3. 资源日历\n4. 变更请求\n5. 项目管理计划更新\n   - 资源管理计划\n   - 成本基准\n6. 项目文件更新\n   - 经验教训登记册\n   - 项目进度计划\n   - 资源分解结构\n   - 相关方登记册\n7. 事业环境因素\n8. 组织过程资产\n\n#### 四、建设项目团队（执行）\n\n> 提高工作能力，促进团队成员互动，改善团队整体氛围，以提高项目绩效的过程\n>\n> 作用：提升整体项目绩效\n>\n> 1. 改进团队协作\n> 2. 增强人际技能\n> 3. 激励团队成员\n> 4. 降低人员离职率\n\n特克曼阶梯理论：\n\n非正式沟通和活动有助于建立信任和良好的工作关系；团队建设是持续性过程\n\n1. 形成阶段\n\n   > 项目认识，并了解项目情况以及在项目中的正式角色与职责。倾向于相互独立，不怎么开诚布公\n\n2. 震荡阶段\n\n   > 开始从事项目工作，制定技术决策和讨论项目管理方法。对不同观点和意见不能采取合作开放的态度，团队环境能恶化成破坏性的\n\n3. 规范阶段\n\n   > 开始协同工作，并按团队的需要来调整各自的工作习惯和行为，团队成员相互信任\n\n4. 成熟阶段\n\n   > 像一个组织有序的单位那样工作。团队成员之间相互依靠，平稳高效的解决问题\n\n5. 解散阶段\n\n   > 团队完成所有工作，团队成员离开项目\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 项目团队派工单\n   - 资源日历\n   - 团队章程\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 集中办公\n\n   > 作用：增进沟通和集体感的设施\n\n2. 虚拟团队\n\n3. 沟通技术\n\n   > 作用：为集中办公团队营造融洽的环境；促进虚拟团队更好的相互理解\n\n   - 冲突管理\n\n   - 影响力\n\n   - 激励\n\n   - 谈判\n\n   - 团队建设\n\n     > 通过举办各种活动，强化团队的社交关系，打造积极合作的工作环境\n\n4. 认可与奖励\n\n   > 对成员的优良香味给予认可与奖励；满足被将奖励者的某个重要需求的奖励才是有效的奖励。（大多人都能做好的工作）\n\n5. 培训\n\n   > 弥补差距\n\n6. 个人和团队评估\n\n   > 让项目经理和项目团队洞察成员的优势和劣势\n   >\n   > 帮助项目经理评估团队成员的偏好和愿望，团队成员如何处理和整理信息、如何制定决策，以及如何与他人打交道\n   >\n   > 增进团队成员间的理解、信任、承诺和沟通，不断提高团队成效\n\n7. 会议\n\n**输出：**\n\n1. 团队绩效评价\n2. 变更请求\n3. 项目管理计划更新\n   - 资源管理计划\n4. 项目文件更新\n   - 经验教训登记册\n   - 项目进度计划\n   - 项目团队派工单\n   - 资源日历\n   - 团队章程\n5. 事业环境因素\n6. 组织过程资产\n\n#### 五、管理项目团队（执行）\n\n> 跟踪团队成员工作表现，提供反馈，解决问题并管理团队变更，以优化项目绩效的过程\n>\n> 作用：影响团队行为、管理冲突以解决问题\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 项目团队派工单\n   - 团队章程\n3. 工作绩效报告\n4. 团队绩效评价\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 人际关系与团队技能\n   - 冲突管理\n   - 制定决策\n   - 情商\n   - 影响力\n   - 领导力\n2. 项目管理信息系统\n\n**输出：**\n\n1. 变更请求\n2. 项目管理计划更新\n   - 资源管理计划\n   - 进度基准\n   - 成本基准\n3. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 项目团队派工单\n4. 事业环境因素\n\n#### 六、控制资源 （监控）\n\n> 确定按计划为项目分配实物资源，以及根据资源使用计划监督资源实际使用情况，并采取必要纠正措施的过程\n>\n> 作用：确保分配的资源适时的可用于项目，且在不再需要时被释放\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 物质资源分配单\n   - 项目进度计划\n   - 资源分解结构\n   - 资源需求\n   - 风险登记册\n3. 工作绩效数据\n4. 协议\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 数据分析\n   - 备选方案分析\n   - 成本效益分析\n   - 绩效审查\n   - 趋势分析\n2. 问题解决\n3. 人际关系与团队技能\n   - 谈判\n   - 影响力\n4. 项目管理信息系统\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   - 资源管理计划\n   - 进度基准\n   - 成本基准\n4. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 经验教训登记册\n   - 物质资源分配单\n   - 资源分解结构\n   - 风险登记册\n\n## 沟通-项目沟通管理\n\n> 通过开发工件，以及执行用于有效交换信息的各种活动，来确保项目及其相关方的信息需求得以满足的各个过程\n\n### 三个过程组\n\n#### 一、规划沟通管理（规划）\n\n> 基于每个相关方或相关方群体信息需求、可用的组织资产，以及具体项目的需求，为项目沟通活动制定恰当的方法和计划的过程\n>\n> 作用：为及时向相关方提供相关信息，引导相关方有效参与项目，编制书面沟通计划\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 资源管理计划\n   - 相关方参与计划\n3. 项目文件\n   - 需求文件\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 沟通需求分析\n3. 沟通技术\n4. 沟通模型\n5. 沟通方法\n6. 人际关系与团队技能\n   - 沟通风格评估\n   - 政治意识\n   - 文化意识\n7. 数据分析\n   - 相关方参与度评估矩阵\n8. 会议\n\n**输出：**\n\n1. 沟通管理计划\n2. 项目管理计划更新\n   - 相关方管理计划\n3. 项目文件更新\n   - 项目进度计划\n   - 相关方登记册\n\n#### 二、管理沟通（执行）\n\n> 确保项目信息及时且恰当的收集、生成、发布、存储、检索、管理、监督和最终处置的过程\n>\n> 作用：促成项目团队与相关方之间的有效信息流动\n\n沟通渠道计算：n X（n - 1）/ 2\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n2. 项目文件\n   - 变更日志\n   - 问题日志\n   - 经验教训登记册\n   - 质量报告\n   - 风险报告\n   - 相关方登记册\n3. 工作绩效报告\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 沟通技术\n2. 沟通方法\n3. 沟通技能\n   - 沟通能力\n   - 反馈\n   - 非语言\n   - 演示\n4. 项目关系信息系统\n5. 人际关系与团队技能\n   - 积极倾听\n   - 冲突管理\n   - 文化意识\n   - 会议管理\n   - 人际交往\n   - 政治意识\n6. 会议\n\n**输出：**\n\n1. 项目沟通管理计划\n2. 项目管理计划更新\n   - 沟通管理计划\n   - 相关方参与计划\n3. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 项目进度计划\n   - 风险登记册\n   - 相关方登记册\n4. 组织过程资产\n\n#### 三、监督沟通（监控）\n\n> 确保满足项目及相关放的信息需求过程\n>\n> 作用：按沟通计划和相关方参与计划的要求优化信息传递流程\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 项目沟通记录\n3. 工作绩效数据\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 项目管理信息系统\n3. 数据表现\n   - 相关方参与度评估矩阵\n4. 人际关系与团队技能\n   - 观察、交谈\n5. 会议\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目沟通计划更新\n   - 沟通管理计划\n   - 相关方参与计划\n4. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 相关方登记册\n\n## 风险-项目风险管理\n\n> 规划风险管理、识别风险、开展风险分析、规划风险应对、实时风险应对和监督风险的各个过程\n>\n> 作用：提高积极事件的概率和影响；降低消极事件的概率和影响，从而提高项目成功的可能性\n\n风险态度：风险承受力、风险偏好、风险临界值\n\n### 七个过程组\n\n#### 一、规划风险管理（规划）\n\n> 定义如何实施项目风险管理活动的过程\n>\n> 作用：确保风险管理水平、方法和可监督与项目风险程度，以及项目对组织和其他相关方的重要程序相匹配\n\n已知风险：项目团队能够识别和分析的风险；也就是风险事件、概率和影响都知道的风险\n\n未知风险：指无法进行主动管理的风险，就是风险事件、概率、影响这3个要素至少有一个不知道的风险\n\n> - 已知-未知：风险是已知的，但是不知道风险发生的概率和影响（应急储备）\n> - 未知-未知：风险是未知的，发生的概率和影响也不知道（管理储备）\n\n概率影响矩阵：\n\n> 概率 X 影响 = 风险值（敞口）\n\n- 对风险进行优先排序\n- 用颜色深浅代表风险高低\n- 优先处理威胁高或机会大的风险\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 所有组件\n3. 项目文件\n   - 相关方登记册\n4. 事业环境因素\n5. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据分析\n   - 相关方分析\n3. 会议\n\n**输出：**\n\n1. 风险管理计划\n\n#### 二、识别风险（规划）\n\n> 识别单个项目风险以及整体项目风险的来源，并记录风险特征的过程；识别风险时，要同时开率单个项目风险，以及整体项目风险的来源\n>\n> 作用：\n>\n> - 记录单个风险\n> - 记录整体风险来源\n> - 汇集相关信息\n> - 以便项目团队能够恰当对已识别的风险\n\n**输入：**\n\n1. 项目管理计划\n   - 需求管理计划\n   - 进度管理计划\n   - 成本管理计划\n   - 质量管理计划\n   - 资源管理计划\n   - 风险管理计划\n   - 范围基准\n   - 成本基准\n   - 进度基准\n2. 项目文件\n   - 假设日志\n   - 成本估算\n   - 持续时间估算\n   - 问题日志\n   - 经验教训登记册\n   - 需求文件\n   - 资源需求\n   - 相关方登记册\n3. 协议\n4. 采购文件\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 头脑风暴\n   - 核对单\n   - 访谈\n3. 数据分析\n   - 根本原因分析\n   - 假设条件\n   - 制约因素分析\n   - SWOT分析\n   - 文件分析\n4. 人机关及与团队技能\n   - 引导\n5. 提示清单\n6. 会议\n\n**输出：**\n\n1. 风险登记册（单个）\n2. 风险报告（整体）\n3. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 经验教训登记册\n\n#### 三、实施定性风险分析（规划）\n\n> 通过评估单个项目风险发生的概率和影响以及特征，对风险进行优先级排序，从而为后续分析或行动提供基础的过程\n>\n> 作用：重点关注高优先级的风险\n>\n> 定性四步走：\n>\n> 1. 以主观方式评价风险发生的相对概率湖可能性，风险发生后对项目目标的影响\n> 2. 根据上述分析结果评估风险的优先级\n> 3. 考虑风险态度、评估风险紧迫性、识别风险责任人\n> 4. 确定哪些风险进度实施定量风险分析过程\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n2. 项目文件\n   - 假设日志\n   - 风险登记册\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n\n2. 数据收集\n\n   - 访谈\n\n3. 数据分析\n\n   - 风险数据质量评估\n\n     > 单个项目风险的数据的准确性和可靠性，消除主观偏见的影响\n\n   - 风险概率影响评估\n\n     > 特定风险发生的可能性，影响评估考虑的是风险对一项或多项项目目标的潜在影响\n\n   - 其他风险参数评估\n\n     > 在对单个项目风险进行优先级排序时，项目团队可能考虑（除概率和影响以外的）其他风险特征\n\n4. 人际关系与团队技能\n\n   - 引导\n\n5. 风险分类\n\n6. 数据表现\n\n   - 概率影响矩阵\n   - 层级图\n\n7. 会议\n\n**输出：**\n\n1. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 风险登记册\n   - 风险报告\n\n#### 四、实施定量风险分析（规划）\n\n> 已识别的单个项目风险和不确定性的其他来源对整体项目目标的影响进行定量分析过程（不是每个项目必须）\n>\n> 作用：量化整体项目风险敞口，并提供额外的定量风险信息，以支持风险应对规划\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n2. 项目文件\n   - 假设日志\n   - 估算依据\n   - 成本估算\n   - 成本预测\n   - 持续时间估算\n   - 理成本清单\n   - 资源需求\n   - 风险登记册\n   - 风险报告\n   - 进度预测\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 访谈\n3. 人际关系与团队技能\n   - 引导\n4. 不确定性表现方式\n5. 数据分析\n   - 模拟\n   - 敏感性分析\n   - 决策树分析\n   - 影响图\n\n**输出：**\n\n1. 项目文件更新\n   - 风险报告\n\n#### 五、规划风险应对（规划）\n\n> 处理整体项目风险敞口，以及应对单个项目风险，而制定可选方案、选择应对策略并商定应对行动的过程\n>\n> 作用：\n>\n> - 制定应对整体项目风险和单个项目风险的适当方法\n> - 分配资源，并根据需要将相关活动添加进项目文件和项目管理计划\n\n风险应对措施：有效和适当的风险对应可以最小化单位畏怯，最大化单个机会，并降低整体项目风险敞口；不恰当的风险应对则会适得其反\n\n> - 必须与风险重要性匹配\n> - 能经济有效的应对挑战，选择最可能有效的策略和策略组合\n> - 获得全体相关方同意\n> - 有一名责任人具体负责\n> - PM还需应对项目整体风险\n\n残余风险：采取措施后仍然存在的风险，以及有意接收的风险（如：买车险）\n\n次生风险：执行应对风险措施导致新的风险，即如果不应对前一个风险便不会发生这个风险（如：买房要承担房价波动）\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 风险管理计划\n   - 成本基准\n2. 项目文件\n   - 经验教训登记册\n   - 项目进度计划\n   - 项目团队派工单\n   - 资源日历\n   - 风险登记册\n   - 风险报告\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 访谈\n3. 人际关系与团队技能\n   - 引导\n4. 威胁应对策略\n5. 机会应对策略\n6. 应急应对策略\n7. 整体项目风险应对策略\n8. 数据分析\n   - 备选方案分析\n   - 成本效益分析\n9. 决策\n   - 多标准决策分析\n\n**输出：**\n\n1. 变更请求\n2. 项目管理计划更新\n   - 进度管理计划\n   - 成本管理计划\n   - 质量管理计划\n   - 资源管理计划\n   - 采购管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n3. 项目文件更新\n   - 假设日志\n   - 成本预测\n   - 经验教训登记册\n   - 项目进度计划\n   - 项目团队派工单\n   - 风险登记册\n   - 风险报告\n\n#### 六、实施风险应对（执行）\n\n> 执行商定的风险应对计划的过程\n>\n> 作用：\n>\n> - 确保按计划执行商定风险应对措施\n> - 来管理整体项目风险敞口\n> - 最小化单个项目威胁\n> - 最大化单个项目机会\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n2. 项目文件\n   - 经验教训登记册\n   - 风险登记册\n   - 风险报告\n3. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 人际关系与团队技能\n   - 影响力\n3. 项目管理信息系统\n\n**输出：**\n\n1. 变更请求\n2. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 项目团队派工单\n   - 风险登记册\n   - 风险报告\n\n#### 七、监督风险（监控）\n\n> 监督商定的风险应对计划的实施、跟踪已识别风险、识别和分析新风险，以及评估风险管理有效性的过程\n>\n> 作用：\n>\n> - 使项目决策都基于关于整体项目风险敞口和单个项目风险的当前信息\n> - 确保项目团队和关键相关方了解当前的风险敞口级别\n> - 通过监督风险过程对项目工作尽享持续监督\n> - 发现新出现、正在变化和已过时的单个项目风险\n\n监督风险的目的：\n\n> 采用项目执行期间生成的绩效信息，以确定：\n>\n> - 实施的风险应对是否有效\n> - 整体项目风险级别是否已改变\n> - 已识别单个项目风险的状态是否已改变\n> - 是否出现新的单个项目风险\n> - 风险管理方法是否依然适用\n> - 项目假设条件是否仍然成立\n> - 风险管理政策和程序是否已得到遵守\n> - 成本或进度应急储备是否需要修改\n> - 项目策略是否让然有效\n\n**输入：**\n\n1. 项目管理计划\n   - 风险管理计划\n2. 项目文件\n   - 问题日志\n   - 经验教训登记册\n   - 风险报告\n3. 工作绩效数据\n4. 工作绩效报告\n\n**工具与技术：**\n\n1. 数据分析\n   - 技术绩效分析\n   - 储备分析\n2. 审计\n3. 会议\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   - 任何组件\n4. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 经验教训登记册\n   - 风险登记册\n   - 风险报告\n5. 组织过程资产更新\n\n## 采购-项目采购管理\n\n> 从项目团队外部采购或获取所需产品、服务或成果的各个过程\n>\n> - 包括编制和管理协议所需的管理和控制过程，如：合同、订购单、协议备忘录，或服务书评\n> - 被授权采购的人员：项目团队、管理层或组织采购部的成员\n\n### 三个过程组\n\n#### 一、规划采购管理（规划）\n\n> 记录项目的采购决策、明确采购方法、及识别潜在卖方的过程\n>\n> 作用：确定是否需要外部支持，如果需要，则还要决定采购什么、如何采购、采购多少，以及何时采购\n\n合同类型比较：\n\n|        名称        | 缩写  |                    特点                    |    风险（买方）    |               使用场景               |\n| :----------------: | :---: | :----------------------------------------: | :----------------: | :----------------------------------: |\n|      固定总价      |  FFP  |           一口价：不容易改变范围           |      买方最小      |           产品外围很明确时           |\n|     总价加激励     | FPIF  |            总价基础上加激励费用            | 买方小，但比FFP大  |         增加灵活性，激励买方         |\n| 总价加经济价格调整 | FPEPA |           允许条件变化，调整价格           | 买方小，但比FPIF大 |  履约时间长；买方支付货币不同于卖方  |\n|      工料合同      |  T&M  | 单位时间固定价格，谈判快，不能快速确定范围 |      双方均等      |     范围不明确，缺乏项目管理能力     |\n|    成本价激励费    | CPIF  |              奖励节约反对浪费              |   买方大，卖方小   | 范围不明确，有分摊比例的惩罚奖励条件 |\n|    成本价奖励费    | CPAF  |               费用凭主观判断               |  买方大，比CPIF大  | 范围不明确，有买方主观的惩罚奖励条件 |\n|    成本价固定费    | CPFF  |              费用是固定的额度              |  买方大，比CPAF大  |             范围不明确时             |\n|    成本加百分比    | CPPC  |         花的多，给的多，买方参与多         |      买方最大      | 范围不明确，买方有较强的项目管理能力 |\n\n**输入：**\n\n1. 项目章程\n2. 商业文件\n   - 商业论证效\n   - 益管理计划\n3. 项目管理计划\n   - 范围管理计划\n   - 质量管理计划\n   - 资源管理计划\n   - 范围基准\n4. 项目文件\n   - 里程碑清单\n   - 项目团队派工单\n   - 需求文件\n   - 需求跟踪矩阵\n   - 资源需求\n   - 风险登记册\n   - 相关方登记册\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 市场调研\n3. 数据分析\n   - 自制或外购分析\n4. 供方选择分析\n5. 会议\n\n1. 采购管理计划\n2. 自制或外购决策\n3. 采购策略\n4. 招标文件\n5. 采购工作说明书\n6. 供方选择标准\n7. 独立成本估计\n8. 变更请求\n9. 项目文件更新\n   - 经验教训登记册\n   - 里程碑清单\n   - 需求文件\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n10. 组织过程资产\n\n#### 二、实施采购（执行）\n\n> 获取卖方应答、选择卖方并授权合同的过程\n>\n> 作用：\n>\n> - 选定合格卖方并签署关于火舞或服务交付的法律协议\n> - 本过程的最后成果就是签订协议、包括正式合同\n\n采购流程：资格预审》**招标》投标》评标》授标》**签协议\n\n**输入：**\n\n1. 项目管理计划\n   - 范围管理计划\n   - 需求管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 采购管理计划\n   - 配置管理计划\n   - 成本基准\n2. 项目文件\n   - 经验教训登记册\n   - 项目进度计划\n   - 需求文件\n   - 风险登记册\n   - 相关方登记册\n3. 采购文件\n4. 卖方建议书\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 广告投标人会议\n3. 数据分析\n   - 建议书评价\n4. 人际关系与团队技能\n   - 谈判\n\n**输出：**\n\n1. 选定的卖方\n2. 协议\n3. 变更请求\n4. 项目管理计划更新\n   - 需求管理计划\n   - 质量管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 采购管理计划\n   - 范围基准\n   - 进度基准\n   - 成本基准\n5. 项目文件更新\n   - 经验教训登记册\n   - 需求文件\n   - 需求跟踪矩阵\n   - 资源日历\n   - 风险登记册\n   - 相关方登记册\n6. 组织过程资产\n\n#### 三、控制采购（监督）\n\n> 管理采购关系，监督合同绩效，实施必要的变更和纠偏，以及关闭合同的过程\n>\n> 作用：\n>\n> - 确保买卖双方履行法律协议，满足项目需求\n> - 对大型项目，合同管理重点管理各个供应商之间的沟通\n> - 有的组织把合同管理当做独立于项目的一种组织职能\n> - 采购管理员可以是项目团队成员，但他通常向另一部门经理报告\n> - 需要把适当的项目管理过程应用于合同关系，实施多个层面的整合\n\n**输入：**\n\n1. 项目管理计划\n   - 需求管理计划\n   - 风险管理计划\n   - 采购管理计划\n   - 变更管理计划\n   - 进度基准\n2. 项目文件\n   - 假设日志\n   - 经验教训登记册\n   - 里程碑清单\n   - 质量报告\n   - 需求文件\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n3. 协议\n4. 采购文件\n5. 批准的变更请求\n6. 工作绩效数据\n7. 事业环境因素\n8. 组织过程资产\n\n1. 专家判断\n2. 索赔管理\n3. 数据分析\n   - 绩效审查\n   - 挣值分析\n   - 趋势分析\n4. 检查\n5. 审计\n\n**输出：**\n\n1. 结束的采购\n2. 工作绩效信息\n3. 采购文档更新\n4. 变更请求\n5. 项目管理计划更新\n   - 风险管理计划\n   - 采购管理计划\n   - 进度基准\n   - 成本基准\n6. 项目文件更新\n   - 经验教训登记册\n   - 资源需求\n   - 需求跟踪矩阵\n   - 风险登记册\n   - 相关方登记册\n7. 组织过程资产\n\n## 相关方-项目相关方管理\n\n> 识别能够影响项目或会受项目影响的人员、团体或组织，分析相关方对项目的期望和影响，制定合适的管理策略来有效调动相关方参与项目决策和执行\n>\n> - 项目相关方管理过程分析相关方期望\n> - 评估他们对项目或受项目影响程度\n> - 制定策略来有效的引导相关方支持项目决策、规划和执行\n> - 这些过程能够支持项目团队的工作\n\n相关方管理原则：项目经理和团队正确识别并合理引导所有相关方参与的能力，能觉得项目的成败\n\n> 1. 需要反复识别出全部相关方（全部识别）\n> 2. 根据相关方的利益和影响对其分类，项目经理应该专注于与项目成功密切相关的重要关系上（重点管理）\n> 3. 相关方尽早参与项目工作，对项目至关重要，相关方的参与有助于其了解项目状况、从而支持项目（尽早参与）\n> 4. 充分发挥相关方的作用来促进项目成功\n> 5. 尽早面对消极相关方，如何面对积极相关方一样\n\n相关方管理关注满意度：满意度、期望、态度、利益冲突\n\n> - 相关方满意度作为项目目标加以识别管理\n> - 引导相关方参与的关键是重视与所有相关方保持持续沟通（包括团队成员）\n> - 理解他们的需求和期望、处理所发生的问题、管理利益冲突\n> - 促进相关方参与项目决策和活动\n\n相关方管理步骤：\n\n1. 识别相关方\n2. 相关方优先级排序\n3. 管理相关方期望\n4. 持续识别相关方\n5. 收尾时获得关键相关方认可\n\n### 四个 过程组\n\n#### 一、识别相关方（启动）\n\n> 定期识别项目相关方，分析和记录他们的利益、参与度、相互依赖性、影响力和对项目成功的潜在影响过程\n>\n> 作用：帮助项目经理经理对各个相关方或相关方群体的适度关注\n\n分类方法：\n\n- 权力：相关方的职权级别\n- 利益：对项目成果的关心程度\n- 影响：主动参与项目的程度\n- 作用：改变项目计划或执行的能力\n\n权力-利益方格：\n\n> 权力高-利益高：重点管理\n>\n> 权力高-利益低：令其满意\n>\n> 权力低-利益高：随时告知\n>\n> 权力低-利益低：监督\n\n**输入：**\n\n1. 项目章程\n2. 商业文件\n   - 商业论证\n   - 效益管理计划\n3. 项目管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n4. 项目文件\n   - 变更日志\n   - 问题日志\n   - 需求文件\n5. 协议\n6. 事业环境因素\n7. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 头脑风暴\n3. 数据分析\n   - 相关方分析\n   - 文件分析\n4. 数据表现\n   - 相关方映射分析/表现\n5. 会议\n\n**输出：**\n\n1. 相关方登记册\n2. 变更请求\n3. 项目管理计划更新\n   - 需求管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 相关方参与管理计划\n4. 项目文件更新\n   - 假设日志\n   - 问题日志\n   - 风险登记册\n\n#### 二、规划相关方参与（规划）\n\n> 根据相关方的需求、期望、利益和对项目的潜在影响，制定项目相关方参与项目的方法过程\n>\n> 作用：提供相关方进行有效互动的可行计划\n\n相关方参与水平：\n\n1. 不知晓：不知道项目及其潜在影响\n2. 抵制：知晓项目和潜在影响，抵制变更\n3. 中立：知晓项目，既不支持，也不反对\n4. 支持：了解项目及其潜在影响，支持项目工作及其成果\n5. 领导：知晓项目和潜在影响，积极参与确保项目取得成功\n\n**输入：**\n\n1. 项目章程\n2. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 风险管理计划\n3. 项目文件\n   - 假设日志\n   - 变更日志\n   - 问题日志\n   - 项目进度计划\n   - 风险登记册\n   - 相关方登记册\n4. 协议\n5. 事业环境因素\n6. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 数据收集\n   - 标杆对照\n3. 数据分析\n   - 假设条件与制约因素分析\n   - 根本原因分析\n4. 决策\n   - 排列优先级/排名\n5. 数据表现\n   - 思维导图\n   - 相关方参与度评估矩阵\n6. 会议\n\n**输出：**\n\n1. 相关方参与计划\n\n#### 三、管理相关方参与（执行）\n\n> 与相关方进行沟通和协作以满足其需求与期望、处理问题，并促进相关方合理参与的过程\n>\n> 作用：\n>\n> - 让项目经理能够提供相关方的支持，并尽可能降低相关方的地址\n> - 确保相关方明确了解项目目的、目标、收益和风险，以及他们的贡献将如何促进项目成功\n\n**输入：**\n\n1. 项目管理计划\n   - 沟通管理计划\n   - 风险管理计划\n   - 相关方参与计划\n   - 变更管理计划\n2. 项目文件\n   - 变更日志\n   - 问题日志\n   - 经验教训登记册\n   - 相关方登记册\n3. 事业环境因素\n4. 组织过程资产\n\n**工具与技术：**\n\n1. 专家判断\n2. 沟通技巧\n   - 反馈\n3. 人际关系与团队技能\n   - 冲突管理\n   - 文化意识\n   - 谈判\n   - 观察/交谈\n   - 政治意识\n4. 基本规则\n5. 会议\n\n**输出：**\n\n1. 变更请求\n2. 项目管理计划更新\n   - 沟通管理计划\n   - 相关方参与计划\n3. 项目文件更新\n   - 变更日志\n   - 问题日志\n   - 经验教训登记册\n   - 相关方登记册\n\n#### 四、控制相关方参与（监督）\n\n> 监督相关方关系，并通过修订参与策略和计划来引导相关方合理参与项目的过程\n>\n> 作用：随着项目进展和环境变化，维持或提升相关方参与活动的效率和效果\n>\n> > 效率：确保相关方按照计划参与了应该参与的项目活动\n> >\n> > 效果：相关方仅需要参加需要参与的项目活动\n\n**输入：**\n\n1. 项目管理计划\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n2. 项目文件\n   - 问题日志\n   - 经验校训登记册\n   - 项目沟通记录\n   - 风险登记册\n   - 相关方登记册\n3. 工作绩效数据\n4. 事业环境因素\n5. 组织过程资产\n\n1. 数据分析\n   - 备选方案分析\n   - 根本原因分析\n   - 相关方分析\n2. 决策\n   - 多标准决策分析\n   - 投票\n3. 数据表现\n   - 相关方参与度评估矩阵\n4. 沟通技能\n   - 反馈\n   - 演示\n5. 人际关系与团队技能\n   - 积极倾听\n   - 文化意识\n   - 领导力\n   - 人际交往\n   - 政治意识\n6. 会议\n\n**输出：**\n\n1. 工作绩效信息\n2. 变更请求\n3. 项目管理计划更新\n   - 资源管理计划\n   - 沟通管理计划\n   - 相关方参与计划\n4. 项目文件更新\n   - 问题日志\n   - 经验教训登记册\n   - 风险登记册\n   - 相关方登记册\n\n\n\n\n\n","slug":"PMP/知识领域","published":1,"date":"2020-12-03T07:39:45.000Z","updated":"2022-11-26T17:08:30.728Z","_id":"clay6mz4p0000bu2bg04g7zl2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"十大知识领域\"><a href=\"#十大知识领域\" class=\"headerlink\" title=\"十大知识领域\"></a>十大知识领域</h1><h2 id=\"整合-项目整合管理\"><a href=\"#整合-项目整合管理\" class=\"headerlink\" title=\"整合-项目整合管理\"></a>整合-项目整合管理</h2><blockquote>\n<p>识别、定义、组合、统一和协调个项目管理过程组的各种过程和活动而展开的活动与过程。</p>\n<p>整合：统一、合并、沟通和简历联系；贯穿项目始终</p>\n</blockquote>\n<h3 id=\"七个过程组\"><a href=\"#七个过程组\" class=\"headerlink\" title=\"七个过程组\"></a>七个过程组</h3><h4 id=\"一、制定项目章程（启动）\"><a href=\"#一、制定项目章程（启动）\" class=\"headerlink\" title=\"一、制定项目章程（启动）\"></a>一、制定项目章程（启动）</h4><blockquote>\n<p>执行一次</p>\n<p>编写一份正式批准的项目，授权项目经理使用组织资源的文件过程。里面描述高层级的期望</p>\n<p>作用：</p>\n<blockquote>\n<p>明确项目与组织战略目标之间的直接联系</p>\n<p>确立项目的正式地位</p>\n<p>展示组织对项目的承诺</p>\n</blockquote>\n<p>解读：</p>\n<blockquote>\n<p>明确定义项目开始和项目边界（边界模糊）</p>\n<p>项目章程一旦被批准，就标志着项目正式启动</p>\n<p>高层对项目的支持</p>\n</blockquote>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>商业文件<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集：<ul>\n<li>头脑风暴</li>\n<li>焦点小组</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>人机关系与团队技能：<ul>\n<li>冲突管理</li>\n<li>引导</li>\n<li>会议管理</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li><p>项目章程</p>\n<blockquote>\n<p>是由项目启动者或发起人发布的，正式批准项目成立，并授权项目经理使用组织资源开展项目活动的文件</p>\n</blockquote>\n</li>\n<li><p>假设日志</p>\n</li>\n</ol>\n<h4 id=\"二、制定项目计划（规划）\"><a href=\"#二、制定项目计划（规划）\" class=\"headerlink\" title=\"二、制定项目计划（规划）\"></a>二、制定项目计划（规划）</h4><blockquote>\n<p>执行一次</p>\n<p>定义、准备和协调项目计划的所有组成部分，并把他们整理合为一份综合项目管理计划的过程</p>\n<p>作用：综合文件，确定所有项目工作的基础及其执行方式</p>\n<p>性质：必须是综合，经批准的，现实可行的，正式的</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>其他过程的输出</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集：<ul>\n<li>头脑风暴</li>\n<li>核对单</li>\n<li>焦点小组</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>人际关系与团队技能：<ul>\n<li>冲突管理</li>\n<li>引导</li>\n<li>会议管理</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目管理计划</li>\n</ol>\n<h4 id=\"三、指导与管理项目工作（执行）\"><a href=\"#三、指导与管理项目工作（执行）\" class=\"headerlink\" title=\"三、指导与管理项目工作（执行）\"></a>三、指导与管理项目工作（执行）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准的变更过程</p>\n<p>作用：对项目工作提供综合管理，提高项目成功的可能性</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>变更日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目沟通记录</li>\n<li>项目进度计划</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>经批准的变更请求</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>项目管理信息系统</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>可交付成果</li>\n<li>工作绩效数据</li>\n<li>问题日志</li>\n<li>变更请求</li>\n<li>项目管理计划更新</li>\n<li>项目文件更新：<ul>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"四、管理知识领域（执行）\"><a href=\"#四、管理知识领域（执行）\" class=\"headerlink\" title=\"四、管理知识领域（执行）\"></a>四、管理知识领域（执行）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>使用现有的只是并生成新知识，实现项目目标，且帮助组织学习的过程。</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>项目团队派工单</li>\n<li>资源分解结构</li>\n<li>供方选择标准</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>可交付成果</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>知识管理</li>\n<li>信息管理</li>\n<li>人际关系与团队技能：<ul>\n<li>积极倾听</li>\n<li>引导</li>\n<li>领导力</li>\n<li>人际交往</li>\n<li>政治意识</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>经验教训登记册</li>\n<li>项目管理计划更新</li>\n<li>组织过程资产更新</li>\n</ol>\n<h4 id=\"五、监控项目工作（监控）\"><a href=\"#五、监控项目工作（监控）\" class=\"headerlink\" title=\"五、监控项目工作（监控）\"></a>五、监控项目工作（监控）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>跟踪、审查和报告整体项目进展，实现项目管理计划中确定的绩效目标过程</p>\n<p>作用：让相关方了解项目的当前状态并认可为处理绩效问题而采取的行动，以及通过成本和进度预测，让相关方了解未来项目状态</p>\n<p>工作内容：</p>\n<ul>\n<li>项目的实际绩效与项目管理计划进行比较</li>\n<li>定期评估项目记下，决定是否需要采取纠正或预防措施，并推荐必要的措施</li>\n<li>检查单个项目风险的状态</li>\n<li>维护一个准确且及时更新的信息库，以反应项目产品及相关文件的情况</li>\n<li>为状态报告、进展测量和预测提供信息</li>\n<li>做出预测，以更新当前的成本与进度信息</li>\n<li>监督已批准变更的实施情况</li>\n<li>确保项目与商业需求保持一致</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>成本预测</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>质量报告</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n<li>进度预测</li>\n</ul>\n</li>\n<li>工作绩效信息</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析：<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n<li>挣值分析</li>\n<li>根本原因分析</li>\n<li>趋势分析</li>\n<li>偏差分析</li>\n</ul>\n</li>\n<li>决策</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效报告</li>\n<li>变更请求</li>\n<li>项目管理计划更新</li>\n<li>项目文件更新：<ul>\n<li>成本预测</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>进度预测</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、实施整体变更控制（监控）\"><a href=\"#六、实施整体变更控制（监控）\" class=\"headerlink\" title=\"六、实施整体变更控制（监控）\"></a>六、实施整体变更控制（监控）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>审查所有变更请求、批准变更、管理对可交付成果、组织过程资产、项目文件和项目管理计划变更，并对变更处理结果进行沟通的过程</p>\n<p>作用：确保对项目中已记录在案的变更做综合评审</p>\n</blockquote>\n<p>变更控制流程：</p>\n<ol>\n<li>消除变更的根本原因</li>\n<li>识别并确认变更</li>\n<li>在知识领域分析影响</li>\n<li><strong>评估变更整体影响（整体变更控制）</strong></li>\n<li><strong>寻找可行方案（整体变更控制）</strong></li>\n<li><strong>批准或拒绝变更（整体变更控制）</strong></li>\n<li><strong>更新变更日志（整体变更控制）</strong></li>\n<li><strong>更新计划或基准（整体变更控制）</strong></li>\n<li>沟通变更决定</li>\n<li>实施跟踪确认变更</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划：<ul>\n<li>变更管理计划</li>\n<li>配置管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件：<ul>\n<li>估算依据</li>\n<li>需求跟踪矩阵</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>工作绩效报告</li>\n<li>变更请求</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>变更控制工具</li>\n<li>数据分析：<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n</ul>\n</li>\n<li>决策：<ul>\n<li>投票</li>\n<li>独裁型决策制定</li>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>批准的变更请求</li>\n<li>项目管理计划更新</li>\n<li>项目文件更新：<ul>\n<li>变更日志</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"七、结束项目或阶段（收尾）\"><a href=\"#七、结束项目或阶段（收尾）\" class=\"headerlink\" title=\"七、结束项目或阶段（收尾）\"></a>七、结束项目或阶段（收尾）</h4><blockquote>\n<p>开展一次</p>\n<p>结束项目或阶段是终结项目、阶段或合同的所有活动的过程</p>\n<p>作用：完成计划工作、总结经验教训、存档项目或阶段信息、释放组织资源以开展新工作</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目沟通记录</li>\n<li>质量控制车辆结果</li>\n<li>质量报告</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>验收的可交付成果</li>\n<li>商业文件：<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>协议</li>\n<li>采购文件</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析：<ul>\n<li>文件分析</li>\n<li>回归分析</li>\n<li>趋势分析</li>\n<li>偏差分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目文件更新：<ul>\n<li>经验教训登记册</li>\n</ul>\n</li>\n<li>最终产品、服务或成果移交</li>\n<li>最终报告</li>\n<li>组织过程资产更新：<ul>\n<li>项目文件</li>\n<li>运营和支持文件</li>\n<li>项目或阶段收尾文件</li>\n<li>经验教训库</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"范围-项目范围管理\"><a href=\"#范围-项目范围管理\" class=\"headerlink\" title=\"范围-项目范围管理\"></a>范围-项目范围管理</h2><blockquote>\n<p>确保项目做且只做所需的全部工作，以成功完成项目的各个过程</p>\n</blockquote>\n<p>项目范围：有时包含产品范围，交付具有规定相遇功能的产品。服务或成果而必须完成的工作；完成情况根据<strong>管理计划</strong>衡量</p>\n<p>产品范围：某项产品、服务或成果所具有的特征和功能；完成情况根据<strong>产品需求</strong>衡量</p>\n<p><strong>与范围有关的文件：</strong></p>\n<blockquote>\n<p>商业文件</p>\n<p>项目章程</p>\n<p>需求文件</p>\n<p>需求跟踪矩阵</p>\n<p>范围基准</p>\n<blockquote>\n<p>项目范围说明书</p>\n<p>工作分解结构</p>\n<p>WBS词典</p>\n</blockquote>\n<p>采购工作说明书</p>\n</blockquote>\n<h3 id=\"六个过程组\"><a href=\"#六个过程组\" class=\"headerlink\" title=\"六个过程组\"></a>六个过程组</h3><h4 id=\"一、规划范围管理（规划）\"><a href=\"#一、规划范围管理（规划）\" class=\"headerlink\" title=\"一、规划范围管理（规划）\"></a>一、规划范围管理（规划）</h4><blockquote>\n<p>记录如何定义、确认和控制项目范围及产品范围，而创建范围管理计划的过程</p>\n<p>作用：在整个项目期间如何管理范围提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划：<ul>\n<li>质量管理计划</li>\n<li>项目生命周期描述</li>\n<li>开发方法</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析：<ul>\n<li>备选方案分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n</ol>\n<h4 id=\"二、收集需求（规划）\"><a href=\"#二、收集需求（规划）\" class=\"headerlink\" title=\"二、收集需求（规划）\"></a>二、收集需求（规划）</h4><blockquote>\n<p>实现项目目标而确定、记录并管理相关方的需要和需求的过程</p>\n<p>作用：为定义和管理项目范围（包含产品范围）奠定基础</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>经验教育登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>商业文件<ul>\n<li>商业论证</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>头脑风暴</li>\n<li>访谈</li>\n<li>焦点小组</li>\n<li>问卷调查</li>\n<li>标杆对照</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>文件分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>投票</li>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>亲和图</li>\n<li>思维导图</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>名义小组（排序）</li>\n<li>观察、交谈</li>\n<li>引导、引导式研讨会</li>\n</ul>\n</li>\n<li>系统关系图</li>\n<li>原型法</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ol>\n<h4 id=\"三、定义范围（规划）\"><a href=\"#三、定义范围（规划）\" class=\"headerlink\" title=\"三、定义范围（规划）\"></a>三、定义范围（规划）</h4><blockquote>\n<p>指定项目和产品详细描述过程</p>\n<p>作用：描述产品、服务或成果的边界和验收标准</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>产品分析</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目范围说明书</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、创建WBS（规划）\"><a href=\"#四、创建WBS（规划）\" class=\"headerlink\" title=\"四、创建WBS（规划）\"></a>四、创建WBS（规划）</h4><blockquote>\n<p>把项目可交付成果和项目工作分解成较小的、更易于管理的组件过程</p>\n<p>作用：对所要交付的内容一共一个结构化的视图</p>\n</blockquote>\n<p>工作分解结构：</p>\n<blockquote>\n<p>WBS是对项目团队为实现项目目标、创建可交付成果而需要实施的全部工作范围的层级分解；</p>\n<p>并且定义了项目的总范围，代表着经批准的当前项目范围说明书中所规定的工作。</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>项目范围说明书</li>\n<li>需求文件</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>分解：100%原则、4至6层，最底层工作包，80小时（两周）原则、责任人、暂时不能分解的设置规划包</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>范围基准</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"五、确认范围（监控）\"><a href=\"#五、确认范围（监控）\" class=\"headerlink\" title=\"五、确认范围（监控）\"></a>五、确认范围（监控）</h4><blockquote>\n<p>正式验收已完成的项目可交付成果的过程</p>\n<p>作用：是验收过程具有客观性；同时通过验收每个可交付成功，提高最终产品、服务或成果获得验收的可能性</p>\n<p>Verify：核实可交付成果在前，属于控制质量过程</p>\n<p>Validate：确认可交付成果在后，属于确认范围过程</p>\n<p><strong>验收：先控制质量再确认范围</strong></p>\n<p>控制质量是项目团队，而确认范围是客户或发起人</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>质量报告</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n<li>核实的可交付成果</li>\n<li>工作绩效数据</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>检查</li>\n<li>决策<ul>\n<li>投票</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>验收的可交付成果</li>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、控制范围（监控）\"><a href=\"#六、控制范围（监控）\" class=\"headerlink\" title=\"六、控制范围（监控）\"></a>六、控制范围（监控）</h4><blockquote>\n<p>监督项目和产品的单位状态，管理范围基准变更的过程</p>\n<p>作用：在整个项目期间保持对范围基准的维护</p>\n</blockquote>\n<p>范围蔓延：未经控制的产品或项目范围的扩大（未对时间、成本和资源做相应调整）</p>\n<p>镀金：超出范围定义，主动增加额外的工作而得不到任何经济补偿的行为</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>变更管理计划</li>\n<li>配置管理计划</li>\n<li>范围基准</li>\n<li>绩效测量标准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>偏差分析</li>\n<li>趋势分许</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>范围管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"进度-项目进度管理\"><a href=\"#进度-项目进度管理\" class=\"headerlink\" title=\"进度-项目进度管理\"></a>进度-项目进度管理</h2><blockquote>\n<p>在WBS基础上继续分解成相关活动；为管理项目按时完成所需的各个过程</p>\n<p>WBS工作报告&#x3D;&#x3D;&#x3D;》活动&#x3D;&#x3D;&#x3D;》进度计划</p>\n</blockquote>\n<p>进度规划方法：关键路径法、关键链法</p>\n<p>进度编制工具：进度模板、项目管理软件</p>\n<p>进度模型（进度计划草稿，被批准后就是项目进度计划，也就是项目进度计划的前身）</p>\n<h3 id=\"六个过程组-1\"><a href=\"#六个过程组-1\" class=\"headerlink\" title=\"六个过程组\"></a>六个过程组</h3><h4 id=\"一、规划进度管理（规划）\"><a href=\"#一、规划进度管理（规划）\" class=\"headerlink\" title=\"一、规划进度管理（规划）\"></a>一、规划进度管理（规划）</h4><blockquote>\n<p>规划、编制、管理、执行和控制项目进度而制定的侦测、程序和文档的过程</p>\n<p>作用：在整个项目过程中管理项目进度提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>开发方法</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>进度管理计划</li>\n</ol>\n<h4 id=\"二、定义活动（规划）\"><a href=\"#二、定义活动（规划）\" class=\"headerlink\" title=\"二、定义活动（规划）\"></a>二、定义活动（规划）</h4><blockquote>\n<p>识别和记录；为完成项目可交付成果而采取的具体行动过程</p>\n<p>作用：将工作包分解为活动，作为对项目工作进行估算、进度规划、执行、监督和控制的基础</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目进度计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>分解</li>\n<li>滚动式规划</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>活动清单</li>\n<li>活动属性（时间、资源、等等）</li>\n<li>里程碑清单</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、排列活动顺序（规划）\"><a href=\"#三、排列活动顺序（规划）\" class=\"headerlink\" title=\"三、排列活动顺序（规划）\"></a>三、排列活动顺序（规划）</h4><blockquote>\n<p>识别和记录活动之间关系的过程</p>\n<p>作用：定义工作之间的逻辑顺序，以便在既定的项目制约因素下获得最高效率</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>里程碑清单</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>紧前关系绘图法（PDM）</li>\n<li>确定和整合依赖关系：硬逻辑、软逻辑</li>\n<li>提前量和滞后量</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目进度网络图</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>里程碑清单</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、估算活动时间（规划）\"><a href=\"#四、估算活动时间（规划）\" class=\"headerlink\" title=\"四、估算活动时间（规划）\"></a>四、估算活动时间（规划）</h4><blockquote>\n<p>根据资源估算结果，估算完成单项活动所需的工作时段数的过程</p>\n<p>作用：确定完成每个活动所需话费的时间量；工作量&#x3D;时间 X 资源</p>\n</blockquote>\n<p>收益递减规律：当持续加大投入资源时，当达到收益平衡点时，收益就会持续下降。（举例：卖牛肉面）</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目团队派工单</li>\n<li>资源分解结构</li>\n<li>资源日历</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>类比估算</li>\n<li>参数估算</li>\n<li>自下而上估算</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>储备分析</li>\n</ul>\n</li>\n<li>决策</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>持续时间估算</li>\n<li>估算依据</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"五、制定进度计划（规划）\"><a href=\"#五、制定进度计划（规划）\" class=\"headerlink\" title=\"五、制定进度计划（规划）\"></a>五、制定进度计划（规划）</h4><blockquote>\n<p>分析活动顺序、持续时间、资源需求和进度制约因素，创建进度模型，从而落实项目执行和监控过程。</p>\n<p>作用：为完成项目活动而制定具有计划日期的进度模型</p>\n</blockquote>\n<p>关键法：</p>\n<blockquote>\n<p>在进度模型中，估算项目最短工期，确定逻辑网络路劲的进度灵活性大小的一种方法；关键路劲是项目时间最长的活动顺序，决定着可能的项目最短工期。关键</p>\n</blockquote>\n<p>关键链法：</p>\n<blockquote>\n<p>一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲，来应对资源限制和项目不确定性</p>\n<p>需要考虑活动持续时间、逻辑关系和资源可用性，其中活动持续时间中不包含安全沉余。它用统计方法确定缓冲时段</p>\n<blockquote>\n<p>项目缓冲：放在关键链末端缓冲，保证项目不因关键链延误而延误</p>\n<p>接驳缓冲：放置在非关键链与关键链的接合点，保护关键链不收非关键链延误影响。（防止关键路径变更）</p>\n</blockquote>\n<p>1、应对资源限制和项目不确定性</p>\n<p>2、基于关键路径（计算完关键路径后）</p>\n<p>3、资源约束性关键路劲就是关键链</p>\n<p>4、不确定性决定缓冲时间长短</p>\n<p>5、重点管理：剩余的缓冲持续时间与剩余的活动持续时间之间的匹配关系</p>\n</blockquote>\n<p>最早与最迟时间</p>\n<blockquote>\n<p>ES（Earliest Start）：活动能够开始的最早时间</p>\n<p>EF（Earliest Finish）：活动能够完成的最早时间</p>\n<p>LF（Latest Finish）：活动能够开始的最迟时间</p>\n<p>LS（Latest Start）：活动能够完成的最迟时间</p>\n<p>ES + DU &#x3D; EF</p>\n<p>LF - DU &#x3D; LS</p>\n<p>TF &#x3D; LS - ES &#x3D; LF - EF</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">ES</th>\n<th align=\"center\">DU：持续时间</th>\n<th align=\"center\">EF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\">活动ID（活动名称）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">LS</td>\n<td align=\"center\">TF：总浮动时间</td>\n<td align=\"center\">LF</td>\n</tr>\n</tbody></table>\n</blockquote>\n<p>顺推：MAX（EF1，EF2。。。）</p>\n<p>倒推：MIN（LS1，LS2。。。）</p>\n<p>自由时间：FF &#x3D; ES（后一节点） - EF（当前活动）</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>持续时间估算</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目进度网络图</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>进度网络分析</li>\n<li>关键路劲法</li>\n<li>资源优化</li>\n<li>数据分析<ul>\n<li>假设情景</li>\n<li>模拟</li>\n</ul>\n</li>\n<li>提前量和滞后量</li>\n<li>进度压缩</li>\n<li>项目管理信息系统</li>\n<li>敏捷发布规划</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>进度基准（给发起人和相关方的高层级概要）</li>\n<li>项目进度计划</li>\n<li>进度数据</li>\n<li>项目日历</li>\n<li>项目管理计划更新<ul>\n<li>进度管理计划</li>\n<li>风险管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>假设日志</li>\n<li>持续时间估算</li>\n<li>经验教训登记册</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、控制进度（监控）\"><a href=\"#六、控制进度（监控）\" class=\"headerlink\" title=\"六、控制进度（监控）\"></a>六、控制进度（监控）</h4><blockquote>\n<p>监督项目状态，更新项目进度和管理进度基准变更的过程</p>\n<p>作用：保持对进度基准的维护</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>进度基准</li>\n<li>范围基准</li>\n<li>绩效测量标准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目日历</li>\n<li>项目进度计划</li>\n<li>资源日历</li>\n<li>进度数据</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>挣值分析</li>\n<li>迭代燃烧图</li>\n<li>绩效评审</li>\n<li>趋势分析</li>\n<li>偏差分析</li>\n<li>假设情景分析</li>\n</ul>\n</li>\n<li>关键路径法</li>\n<li>项目管理信息系统</li>\n<li>资源优化</li>\n<li>提前量和滞后量</li>\n<li>进度压缩</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>进度预测</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>进度管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>资源日历</li>\n<li>风险等级册</li>\n<li>进度数据</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"成本-项目成本管理\"><a href=\"#成本-项目成本管理\" class=\"headerlink\" title=\"成本-项目成本管理\"></a>成本-项目成本管理</h2><blockquote>\n<p>为使用项目在批准的预算内完成而对成本进行规划、估算、预算、融资、周知、管理和控制的各个过程</p>\n<p>目的：确保项目在批准的预算内完工</p>\n</blockquote>\n<p>核心概念：</p>\n<blockquote>\n<p><strong>项目生命周期成本：</strong>完成项目活动所需的成本；重点关注完成项目活动所需资源的成本，但同时也应考虑项目决策对项目产品、服务或成果的使用成本、维护成本和支持成本的影响</p>\n<p><strong>多次测量时机：</strong>不同的相关方会在不同的时间，用不同的方法测算项目成本。例如：对于某采购品，可在做出采购决策、下达订单、实际交货、实际成本发生或进行会计记账时，测算其成本</p>\n<p><strong>项目内或项目外成本分析：</strong>在很多组织中，预测和分心项目产品的财务效益是在项目之外进行的，但对于有些项目，如固定资产投资项目，可在项目成本管理中进行这项预测和分析工作。可用方法：通用财务管理技术，如投资回报率分析、现金流贴现分析和投资回收期分析</p>\n</blockquote>\n<h5 id=\"经营性财务知识\"><a href=\"#经营性财务知识\" class=\"headerlink\" title=\"经营性财务知识\"></a>经营性财务知识</h5><ol>\n<li><p>可变成本</p>\n<blockquote>\n<p>随生产量或工作而变的成本，如人员工资，消耗的原材料等</p>\n</blockquote>\n</li>\n<li><p>固定成本</p>\n<blockquote>\n<p>不随生产规模变化的非重复成本，如设备费用、场地租赁费用等</p>\n</blockquote>\n</li>\n<li><p>直接成本</p>\n<blockquote>\n<p>能够直接归属于项目工作的成本，如项目组旅行费用、项目组人员工资和奖金、项目使用的物资等</p>\n</blockquote>\n</li>\n<li><p>间接成本</p>\n<blockquote>\n<p>一般管理费用科目或几个项目共同分担的成本。如员工福利、保安费用、行政部门和财务部门费用等</p>\n</blockquote>\n</li>\n<li><p>机会成本</p>\n<blockquote>\n<p>因为选择一个机会而放弃的另外一个机会可以获得的收益；例如一个人投资炒股赚10万，而同期如果买商品房的话可以赚500万。如果此人投资超过而没有买商品房，则选择炒股的机会成本就是500万</p>\n</blockquote>\n</li>\n<li><p>沉没成本</p>\n<blockquote>\n<p>哪些在过去发生的费用，就像沉船一样不能回收的部分。当决定继续投资项目时，不应该考虑这部分费用。当决定项目是否该继续时，许多人像赌徒一样的心里指望能够收回沉没成本</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"四个过程组\"><a href=\"#四个过程组\" class=\"headerlink\" title=\"四个过程组\"></a>四个过程组</h3><h4 id=\"一、规划成本管理（规划）\"><a href=\"#一、规划成本管理（规划）\" class=\"headerlink\" title=\"一、规划成本管理（规划）\"></a>一、规划成本管理（规划）</h4><blockquote>\n<p>确定如何估算、预算。管理。监督和控制项目成本的过程</p>\n<p>作用：在整个项目为如何管理项目成本提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>成本管理计划</li>\n</ol>\n<h4 id=\"二、估算成本（规划）\"><a href=\"#二、估算成本（规划）\" class=\"headerlink\" title=\"二、估算成本（规划）\"></a>二、估算成本（规划）</h4><blockquote>\n<p>对完成项目工作所需资源成本进行近似估算的过程</p>\n<p>作用：确定项目所需的资金，是对成本的预测</p>\n<p>在估算成本时，需要识别和分析可用于启动与完成项目的备选成本方案</p>\n<p>需要权衡备选成本方案并考虑等闲，以优化项目成本</p>\n<p>进行成本估算，应该考虑将向项目收费的全部资源</p>\n</blockquote>\n<p>估算成本单位：通常用某种获取单位，如美元、欧元、人民币等；但有时也采用其他计量单位，如人时或人天数，以消除同伙膨胀的映像，便于成本比较</p>\n<p>估算过程是渐进明细的：启动阶段可得出项目的粗略量级估算（ROM）：-25%-+75%；随着信息越来越详细，估算区间可缩小为：-5%-+10%</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>成本管理计划</li>\n<li>质量管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>类比估算</li>\n<li>参数估算</li>\n<li>自下而上估算</li>\n<li>三点估算</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>储备分析</li>\n<li>质量成本</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n<li>决策<ul>\n<li>投票</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>成本估算</li>\n<li>估算依据</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>经验登记册</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、制定预算（规划）\"><a href=\"#三、制定预算（规划）\" class=\"headerlink\" title=\"三、制定预算（规划）\"></a>三、制定预算（规划）</h4><blockquote>\n<p>汇总所有单个活动或工作包的估算成本，简历一个经批准的成本基线的过程；以WBS为重要依据</p>\n<p>作用：确定成本基准，可据此监督和控制项目绩效</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>成本管理计划</li>\n<li>资源管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>估算依据</li>\n<li>成本估算</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>商业文件<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>成本汇总</li>\n<li>数据分析<ul>\n<li>储备分析</li>\n</ul>\n</li>\n<li>历史信息审核</li>\n<li>资金限制平衡</li>\n<li>融资</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>成本基准</li>\n<li>项目资金需求</li>\n<li>项目文件更新<ul>\n<li>成本估算</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、控制成本（监控）\"><a href=\"#四、控制成本（监控）\" class=\"headerlink\" title=\"四、控制成本（监控）\"></a>四、控制成本（监控）</h4><blockquote>\n<p>监督项目状态、以更新项目成本，管理成本基准变更的过程。</p>\n<p>作用：在整个项目期间保持对成本基准的维护</p>\n<p>重点分析：项目资金支出与相应完成的实际工作之间的关系</p>\n<p>有效成本控制的关键：在于与经批准的成本基准及其变更进行管理</p>\n<p>确保成本支持不超过批准的资金限额：既不超出按时段、按WBS组件、按活动分配的限额，也不超出项目总限额</p>\n</blockquote>\n<p><strong>变更管理：</strong></p>\n<ul>\n<li>影响不必要的变更</li>\n<li>及时处理变更</li>\n<li>管理已发生的变更</li>\n<li>防止在成本或资源使用报告中出现未经批准的变更</li>\n<li>向相关方报告所有经批准的变更及其相关成本</li>\n</ul>\n<p><strong>控制成本&amp;进度：</strong></p>\n<ul>\n<li>确保成本支出不超过批准的资金限额，既不超出按时段、按WBS组件。按活动分配的限额，也不超出项目总限额</li>\n<li>没法把逾期的成本超支控制在可接受的范围内</li>\n</ul>\n<p><strong>监督绩效：</strong></p>\n<ul>\n<li>监督成本绩效，找出并分析与成本基准间的偏差</li>\n<li>对照资金支出，监督工作</li>\n</ul>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>成本管理计划</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n</ul>\n</li>\n<li>项目资金需求</li>\n<li>项目绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>专家判断</p>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>挣值分析</li>\n<li>偏差分析</li>\n<li>趋势分析</li>\n<li>储备分析</li>\n</ul>\n</li>\n<li><p>完工尚需绩效指数</p>\n<blockquote>\n<p>TCPI：在项目执行的不通时间点估算的为在既定预算内完工而必须达到的未来成本绩效</p>\n<p>TCPI &#x3D; （BAC -  EC）&#x2F; （BAC - AC）</p>\n</blockquote>\n</li>\n<li><p>项目管理信息系统</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>成本预测</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>成本管理计划</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>成本估算</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"质量-项目质量管理\"><a href=\"#质量-项目质量管理\" class=\"headerlink\" title=\"质量-项目质量管理\"></a>质量-项目质量管理</h2><blockquote>\n<p>把最值的质量政策应用于规划、管理、控制项目和产品的质量要求已满足相关方目标的各个过程</p>\n<p>项目质量管理确定项目需求，包括产品需求得到满足和确认</p>\n<p>不担关注可交付成果的质量，还要关注过程的质量（管理过程、设计过程）</p>\n</blockquote>\n<p><strong>质量：</strong>在功能相等的情况下进行比较</p>\n<p><strong>等级：</strong>功能多少叫做等级</p>\n<p><strong>精确：</strong>精密程度的度量，重复测量的结果非常聚合，离散度很小</p>\n<p><strong>准确：</strong>对正确性的评估，测量值非常接近实际值</p>\n<h3 id=\"三个过程组\"><a href=\"#三个过程组\" class=\"headerlink\" title=\"三个过程组\"></a>三个过程组</h3><h4 id=\"一、规划质量管理（规划）\"><a href=\"#一、规划质量管理（规划）\" class=\"headerlink\" title=\"一、规划质量管理（规划）\"></a>一、规划质量管理（规划）</h4><blockquote>\n<p>识别项目及其可交付成果的质量要求和标准，并书面描述项目将如何证明符合质量要求和标准的过程</p>\n<p>作用：在整个项目奇迹如何管理和核实质量提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>需求管理计划</li>\n<li>风险管理计划</li>\n<li>相关方参与计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>标杆对照</li>\n<li>头脑风暴</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>成本效益分析</li>\n<li>质量成本</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>流程图</li>\n<li>逻辑数据模型</li>\n<li>矩阵图</li>\n<li>思维导图</li>\n</ul>\n</li>\n<li>测试和检查规划</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>质量管理计划</li>\n<li>质量测量指标</li>\n<li>项目管理计划更新<ul>\n<li>风险管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、管理质量（规划）\"><a href=\"#二、管理质量（规划）\" class=\"headerlink\" title=\"二、管理质量（规划）\"></a>二、管理质量（规划）</h4><blockquote>\n<p>把组织的主梁政策用于项目，并且质量管理计划转化为可执行的质量活动的过程</p>\n<p>作用：提高实现质量目标的可能性，一级识别无效过程的导致质量低劣的原因</p>\n<p>管理质量使用控制质量过程的数据和结果向相关方专事项目的总体质量状态</p>\n</blockquote>\n<p><strong>问题解决：</strong></p>\n<ol>\n<li>定义问题</li>\n<li>识别根本性原因</li>\n<li>生成可能的解决方案</li>\n<li>选择最佳解决方案</li>\n<li>执行解决方案</li>\n<li>验证解决方案的有效性</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>质量管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>质量控制测量结果</li>\n<li>质量测量指标</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据收集<ul>\n<li>核对单</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>文件分析</li>\n<li>过程分析</li>\n<li>根本原因分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>亲和图</li>\n<li>因果图</li>\n<li>流程图</li>\n<li>直方图</li>\n<li>矩阵图</li>\n<li>散点图</li>\n</ul>\n</li>\n<li>审计</li>\n<li>面向X的设计</li>\n<li>问题解决</li>\n<li>质量改进方法</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>质量报告</li>\n<li>测试与凭借文件（测试用例）</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>质量管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、控制质量（监控）\"><a href=\"#三、控制质量（监控）\" class=\"headerlink\" title=\"三、控制质量（监控）\"></a>三、控制质量（监控）</h4><blockquote>\n<p>评估绩效，确保项目输出完整、正确且满足客户期望，而监督和记录质量管理活动执行结果的过程</p>\n<p>作用：核实项目可交付成果和工作已经达到主要相关方的质量要求，可供最终验证（先内部确认满足验收标准）</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>质量管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>质量测量指标</li>\n<li>测试与评价文件</li>\n</ul>\n</li>\n<li>批准的变更请求</li>\n<li>可交付成果</li>\n<li>工作绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据收集<ul>\n<li>核对单</li>\n<li>核查表</li>\n<li>统计抽样</li>\n<li>问卷调查</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>绩效审查</li>\n<li>根本原因分析</li>\n</ul>\n</li>\n<li>检查</li>\n<li>测试&#x2F;产品评估</li>\n<li>数据表现<ul>\n<li>因果图</li>\n<li>控制图</li>\n<li>直方图</li>\n<li>散点图</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>质量控制测量结果</li>\n<li>核实的可交付成果</li>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>质量管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n</ul>\n</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>测试与评估文件</li>\n</ol>\n<h2 id=\"资源-项目资源管理\"><a href=\"#资源-项目资源管理\" class=\"headerlink\" title=\"资源-项目资源管理\"></a>资源-项目资源管理</h2><blockquote>\n<p>识别、获取和管理所需资源以成功完成项目的各个过程，这些过程有助于确保项目经理和项目团队在正确的时间和正确的地点使用正确的资源</p>\n</blockquote>\n<h3 id=\"六个过程组-2\"><a href=\"#六个过程组-2\" class=\"headerlink\" title=\"六个过程组\"></a>六个过程组</h3><h4 id=\"一、规划资源管理（规划）\"><a href=\"#一、规划资源管理（规划）\" class=\"headerlink\" title=\"一、规划资源管理（规划）\"></a>一、规划资源管理（规划）</h4><blockquote>\n<p>如何估算、获取、管理和利用团队以及实物资源的过程。</p>\n<p>作用：根据项目类型和复杂程度确定适用于项目资源的管理方法和管理程度</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>质量管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>项目进度计划</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据表现<ul>\n<li>层级型</li>\n<li>责任分配矩阵</li>\n<li>文本型</li>\n</ul>\n</li>\n<li>组织理论</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>资源管理计划</li>\n<li>团队章程</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、估算活动资源（规划）\"><a href=\"#二、估算活动资源（规划）\" class=\"headerlink\" title=\"二、估算活动资源（规划）\"></a>二、估算活动资源（规划）</h4><blockquote>\n<p>是估算执行项目所需的团队资源，以及材料、设备和用品的类型和数量的过程</p>\n<p>作用：明确完成项目所需的资源种类、数量和特性</p>\n<p>以便做出更准确的成本和持续时间估算</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>成本估算</li>\n<li>资源日历</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>自下而上估算</li>\n<li>类比估算</li>\n<li>参数估算</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>资源需求</li>\n<li>估算依据</li>\n<li>资源分解结构</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、获取资源（执行）\"><a href=\"#三、获取资源（执行）\" class=\"headerlink\" title=\"三、获取资源（执行）\"></a>三、获取资源（执行）</h4><blockquote>\n<p>获取团队成员、设施、设备、材料、用品和其他资源的过程</p>\n<p>作用：概述和指导资源的选择，并将其分配给相应的活动</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>采购管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>项目进度计划</li>\n<li>资源日历</li>\n<li>资源需求</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>谈判</li>\n</ul>\n</li>\n<li>预分派</li>\n<li>虚拟团队</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>物质资源分派单</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>资源分解结构</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"四、建设项目团队（执行）\"><a href=\"#四、建设项目团队（执行）\" class=\"headerlink\" title=\"四、建设项目团队（执行）\"></a>四、建设项目团队（执行）</h4><blockquote>\n<p>提高工作能力，促进团队成员互动，改善团队整体氛围，以提高项目绩效的过程</p>\n<p>作用：提升整体项目绩效</p>\n<ol>\n<li>改进团队协作</li>\n<li>增强人际技能</li>\n<li>激励团队成员</li>\n<li>降低人员离职率</li>\n</ol>\n</blockquote>\n<p>特克曼阶梯理论：</p>\n<p>非正式沟通和活动有助于建立信任和良好的工作关系；团队建设是持续性过程</p>\n<ol>\n<li><p>形成阶段</p>\n<blockquote>\n<p>项目认识，并了解项目情况以及在项目中的正式角色与职责。倾向于相互独立，不怎么开诚布公</p>\n</blockquote>\n</li>\n<li><p>震荡阶段</p>\n<blockquote>\n<p>开始从事项目工作，制定技术决策和讨论项目管理方法。对不同观点和意见不能采取合作开放的态度，团队环境能恶化成破坏性的</p>\n</blockquote>\n</li>\n<li><p>规范阶段</p>\n<blockquote>\n<p>开始协同工作，并按团队的需要来调整各自的工作习惯和行为，团队成员相互信任</p>\n</blockquote>\n</li>\n<li><p>成熟阶段</p>\n<blockquote>\n<p>像一个组织有序的单位那样工作。团队成员之间相互依靠，平稳高效的解决问题</p>\n</blockquote>\n</li>\n<li><p>解散阶段</p>\n<blockquote>\n<p>团队完成所有工作，团队成员离开项目</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>团队章程</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>集中办公</p>\n<blockquote>\n<p>作用：增进沟通和集体感的设施</p>\n</blockquote>\n</li>\n<li><p>虚拟团队</p>\n</li>\n<li><p>沟通技术</p>\n<blockquote>\n<p>作用：为集中办公团队营造融洽的环境；促进虚拟团队更好的相互理解</p>\n</blockquote>\n<ul>\n<li><p>冲突管理</p>\n</li>\n<li><p>影响力</p>\n</li>\n<li><p>激励</p>\n</li>\n<li><p>谈判</p>\n</li>\n<li><p>团队建设</p>\n<blockquote>\n<p>通过举办各种活动，强化团队的社交关系，打造积极合作的工作环境</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>认可与奖励</p>\n<blockquote>\n<p>对成员的优良香味给予认可与奖励；满足被将奖励者的某个重要需求的奖励才是有效的奖励。（大多人都能做好的工作）</p>\n</blockquote>\n</li>\n<li><p>培训</p>\n<blockquote>\n<p>弥补差距</p>\n</blockquote>\n</li>\n<li><p>个人和团队评估</p>\n<blockquote>\n<p>让项目经理和项目团队洞察成员的优势和劣势</p>\n<p>帮助项目经理评估团队成员的偏好和愿望，团队成员如何处理和整理信息、如何制定决策，以及如何与他人打交道</p>\n<p>增进团队成员间的理解、信任、承诺和沟通，不断提高团队成效</p>\n</blockquote>\n</li>\n<li><p>会议</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>团队绩效评价</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>团队章程</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"五、管理项目团队（执行）\"><a href=\"#五、管理项目团队（执行）\" class=\"headerlink\" title=\"五、管理项目团队（执行）\"></a>五、管理项目团队（执行）</h4><blockquote>\n<p>跟踪团队成员工作表现，提供反馈，解决问题并管理团队变更，以优化项目绩效的过程</p>\n<p>作用：影响团队行为、管理冲突以解决问题</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n<li>团队章程</li>\n</ul>\n</li>\n<li>工作绩效报告</li>\n<li>团队绩效评价</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>人际关系与团队技能<ul>\n<li>冲突管理</li>\n<li>制定决策</li>\n<li>情商</li>\n<li>影响力</li>\n<li>领导力</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n</ol>\n<h4 id=\"六、控制资源-（监控）\"><a href=\"#六、控制资源-（监控）\" class=\"headerlink\" title=\"六、控制资源 （监控）\"></a>六、控制资源 （监控）</h4><blockquote>\n<p>确定按计划为项目分配实物资源，以及根据资源使用计划监督资源实际使用情况，并采取必要纠正措施的过程</p>\n<p>作用：确保分配的资源适时的可用于项目，且在不再需要时被释放</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>物质资源分配单</li>\n<li>项目进度计划</li>\n<li>资源分解结构</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>协议</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n<li>绩效审查</li>\n<li>趋势分析</li>\n</ul>\n</li>\n<li>问题解决</li>\n<li>人际关系与团队技能<ul>\n<li>谈判</li>\n<li>影响力</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>物质资源分配单</li>\n<li>资源分解结构</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"沟通-项目沟通管理\"><a href=\"#沟通-项目沟通管理\" class=\"headerlink\" title=\"沟通-项目沟通管理\"></a>沟通-项目沟通管理</h2><blockquote>\n<p>通过开发工件，以及执行用于有效交换信息的各种活动，来确保项目及其相关方的信息需求得以满足的各个过程</p>\n</blockquote>\n<h3 id=\"三个过程组-1\"><a href=\"#三个过程组-1\" class=\"headerlink\" title=\"三个过程组\"></a>三个过程组</h3><h4 id=\"一、规划沟通管理（规划）\"><a href=\"#一、规划沟通管理（规划）\" class=\"headerlink\" title=\"一、规划沟通管理（规划）\"></a>一、规划沟通管理（规划）</h4><blockquote>\n<p>基于每个相关方或相关方群体信息需求、可用的组织资产，以及具体项目的需求，为项目沟通活动制定恰当的方法和计划的过程</p>\n<p>作用：为及时向相关方提供相关信息，引导相关方有效参与项目，编制书面沟通计划</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>需求文件</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>沟通需求分析</li>\n<li>沟通技术</li>\n<li>沟通模型</li>\n<li>沟通方法</li>\n<li>人际关系与团队技能<ul>\n<li>沟通风格评估</li>\n<li>政治意识</li>\n<li>文化意识</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>沟通管理计划</li>\n<li>项目管理计划更新<ul>\n<li>相关方管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>项目进度计划</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、管理沟通（执行）\"><a href=\"#二、管理沟通（执行）\" class=\"headerlink\" title=\"二、管理沟通（执行）\"></a>二、管理沟通（执行）</h4><blockquote>\n<p>确保项目信息及时且恰当的收集、生成、发布、存储、检索、管理、监督和最终处置的过程</p>\n<p>作用：促成项目团队与相关方之间的有效信息流动</p>\n</blockquote>\n<p>沟通渠道计算：n X（n - 1）&#x2F; 2</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>质量报告</li>\n<li>风险报告</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>工作绩效报告</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>沟通技术</li>\n<li>沟通方法</li>\n<li>沟通技能<ul>\n<li>沟通能力</li>\n<li>反馈</li>\n<li>非语言</li>\n<li>演示</li>\n</ul>\n</li>\n<li>项目关系信息系统</li>\n<li>人际关系与团队技能<ul>\n<li>积极倾听</li>\n<li>冲突管理</li>\n<li>文化意识</li>\n<li>会议管理</li>\n<li>人际交往</li>\n<li>政治意识</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目沟通管理计划</li>\n<li>项目管理计划更新<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"三、监督沟通（监控）\"><a href=\"#三、监督沟通（监控）\" class=\"headerlink\" title=\"三、监督沟通（监控）\"></a>三、监督沟通（监控）</h4><blockquote>\n<p>确保满足项目及相关放的信息需求过程</p>\n<p>作用：按沟通计划和相关方参与计划的要求优化信息传递流程</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目沟通记录</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>项目管理信息系统</li>\n<li>数据表现<ul>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>观察、交谈</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目沟通计划更新<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"风险-项目风险管理\"><a href=\"#风险-项目风险管理\" class=\"headerlink\" title=\"风险-项目风险管理\"></a>风险-项目风险管理</h2><blockquote>\n<p>规划风险管理、识别风险、开展风险分析、规划风险应对、实时风险应对和监督风险的各个过程</p>\n<p>作用：提高积极事件的概率和影响；降低消极事件的概率和影响，从而提高项目成功的可能性</p>\n</blockquote>\n<p>风险态度：风险承受力、风险偏好、风险临界值</p>\n<h3 id=\"七个过程组-1\"><a href=\"#七个过程组-1\" class=\"headerlink\" title=\"七个过程组\"></a>七个过程组</h3><h4 id=\"一、规划风险管理（规划）\"><a href=\"#一、规划风险管理（规划）\" class=\"headerlink\" title=\"一、规划风险管理（规划）\"></a>一、规划风险管理（规划）</h4><blockquote>\n<p>定义如何实施项目风险管理活动的过程</p>\n<p>作用：确保风险管理水平、方法和可监督与项目风险程度，以及项目对组织和其他相关方的重要程序相匹配</p>\n</blockquote>\n<p>已知风险：项目团队能够识别和分析的风险；也就是风险事件、概率和影响都知道的风险</p>\n<p>未知风险：指无法进行主动管理的风险，就是风险事件、概率、影响这3个要素至少有一个不知道的风险</p>\n<blockquote>\n<ul>\n<li>已知-未知：风险是已知的，但是不知道风险发生的概率和影响（应急储备）</li>\n<li>未知-未知：风险是未知的，发生的概率和影响也不知道（管理储备）</li>\n</ul>\n</blockquote>\n<p>概率影响矩阵：</p>\n<blockquote>\n<p>概率 X 影响 &#x3D; 风险值（敞口）</p>\n</blockquote>\n<ul>\n<li>对风险进行优先排序</li>\n<li>用颜色深浅代表风险高低</li>\n<li>优先处理威胁高或机会大的风险</li>\n</ul>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>所有组件</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析<ul>\n<li>相关方分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>风险管理计划</li>\n</ol>\n<h4 id=\"二、识别风险（规划）\"><a href=\"#二、识别风险（规划）\" class=\"headerlink\" title=\"二、识别风险（规划）\"></a>二、识别风险（规划）</h4><blockquote>\n<p>识别单个项目风险以及整体项目风险的来源，并记录风险特征的过程；识别风险时，要同时开率单个项目风险，以及整体项目风险的来源</p>\n<p>作用：</p>\n<ul>\n<li>记录单个风险</li>\n<li>记录整体风险来源</li>\n<li>汇集相关信息</li>\n<li>以便项目团队能够恰当对已识别的风险</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>需求管理计划</li>\n<li>进度管理计划</li>\n<li>成本管理计划</li>\n<li>质量管理计划</li>\n<li>资源管理计划</li>\n<li>风险管理计划</li>\n<li>范围基准</li>\n<li>成本基准</li>\n<li>进度基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>成本估算</li>\n<li>持续时间估算</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>资源需求</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>协议</li>\n<li>采购文件</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>头脑风暴</li>\n<li>核对单</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>根本原因分析</li>\n<li>假设条件</li>\n<li>制约因素分析</li>\n<li>SWOT分析</li>\n<li>文件分析</li>\n</ul>\n</li>\n<li>人机关及与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>提示清单</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>风险登记册（单个）</li>\n<li>风险报告（整体）</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、实施定性风险分析（规划）\"><a href=\"#三、实施定性风险分析（规划）\" class=\"headerlink\" title=\"三、实施定性风险分析（规划）\"></a>三、实施定性风险分析（规划）</h4><blockquote>\n<p>通过评估单个项目风险发生的概率和影响以及特征，对风险进行优先级排序，从而为后续分析或行动提供基础的过程</p>\n<p>作用：重点关注高优先级的风险</p>\n<p>定性四步走：</p>\n<ol>\n<li>以主观方式评价风险发生的相对概率湖可能性，风险发生后对项目目标的影响</li>\n<li>根据上述分析结果评估风险的优先级</li>\n<li>考虑风险态度、评估风险紧迫性、识别风险责任人</li>\n<li>确定哪些风险进度实施定量风险分析过程</li>\n</ol>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>专家判断</p>\n</li>\n<li><p>数据收集</p>\n<ul>\n<li>访谈</li>\n</ul>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li><p>风险数据质量评估</p>\n<blockquote>\n<p>单个项目风险的数据的准确性和可靠性，消除主观偏见的影响</p>\n</blockquote>\n</li>\n<li><p>风险概率影响评估</p>\n<blockquote>\n<p>特定风险发生的可能性，影响评估考虑的是风险对一项或多项项目目标的潜在影响</p>\n</blockquote>\n</li>\n<li><p>其他风险参数评估</p>\n<blockquote>\n<p>在对单个项目风险进行优先级排序时，项目团队可能考虑（除概率和影响以外的）其他风险特征</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>人际关系与团队技能</p>\n<ul>\n<li>引导</li>\n</ul>\n</li>\n<li><p>风险分类</p>\n</li>\n<li><p>数据表现</p>\n<ul>\n<li>概率影响矩阵</li>\n<li>层级图</li>\n</ul>\n</li>\n<li><p>会议</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、实施定量风险分析（规划）\"><a href=\"#四、实施定量风险分析（规划）\" class=\"headerlink\" title=\"四、实施定量风险分析（规划）\"></a>四、实施定量风险分析（规划）</h4><blockquote>\n<p>已识别的单个项目风险和不确定性的其他来源对整体项目目标的影响进行定量分析过程（不是每个项目必须）</p>\n<p>作用：量化整体项目风险敞口，并提供额外的定量风险信息，以支持风险应对规划</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>成本估算</li>\n<li>成本预测</li>\n<li>持续时间估算</li>\n<li>理成本清单</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n<li>进度预测</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>访谈</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>不确定性表现方式</li>\n<li>数据分析<ul>\n<li>模拟</li>\n<li>敏感性分析</li>\n<li>决策树分析</li>\n<li>影响图</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目文件更新<ul>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"五、规划风险应对（规划）\"><a href=\"#五、规划风险应对（规划）\" class=\"headerlink\" title=\"五、规划风险应对（规划）\"></a>五、规划风险应对（规划）</h4><blockquote>\n<p>处理整体项目风险敞口，以及应对单个项目风险，而制定可选方案、选择应对策略并商定应对行动的过程</p>\n<p>作用：</p>\n<ul>\n<li>制定应对整体项目风险和单个项目风险的适当方法</li>\n<li>分配资源，并根据需要将相关活动添加进项目文件和项目管理计划</li>\n</ul>\n</blockquote>\n<p>风险应对措施：有效和适当的风险对应可以最小化单位畏怯，最大化单个机会，并降低整体项目风险敞口；不恰当的风险应对则会适得其反</p>\n<blockquote>\n<ul>\n<li>必须与风险重要性匹配</li>\n<li>能经济有效的应对挑战，选择最可能有效的策略和策略组合</li>\n<li>获得全体相关方同意</li>\n<li>有一名责任人具体负责</li>\n<li>PM还需应对项目整体风险</li>\n</ul>\n</blockquote>\n<p>残余风险：采取措施后仍然存在的风险，以及有意接收的风险（如：买车险）</p>\n<p>次生风险：执行应对风险措施导致新的风险，即如果不应对前一个风险便不会发生这个风险（如：买房要承担房价波动）</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>风险管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>访谈</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>威胁应对策略</li>\n<li>机会应对策略</li>\n<li>应急应对策略</li>\n<li>整体项目风险应对策略</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>进度管理计划</li>\n<li>成本管理计划</li>\n<li>质量管理计划</li>\n<li>资源管理计划</li>\n<li>采购管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>成本预测</li>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>项目团队派工单</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、实施风险应对（执行）\"><a href=\"#六、实施风险应对（执行）\" class=\"headerlink\" title=\"六、实施风险应对（执行）\"></a>六、实施风险应对（执行）</h4><blockquote>\n<p>执行商定的风险应对计划的过程</p>\n<p>作用：</p>\n<ul>\n<li>确保按计划执行商定风险应对措施</li>\n<li>来管理整体项目风险敞口</li>\n<li>最小化单个项目威胁</li>\n<li>最大化单个项目机会</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>人际关系与团队技能<ul>\n<li>影响力</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"七、监督风险（监控）\"><a href=\"#七、监督风险（监控）\" class=\"headerlink\" title=\"七、监督风险（监控）\"></a>七、监督风险（监控）</h4><blockquote>\n<p>监督商定的风险应对计划的实施、跟踪已识别风险、识别和分析新风险，以及评估风险管理有效性的过程</p>\n<p>作用：</p>\n<ul>\n<li>使项目决策都基于关于整体项目风险敞口和单个项目风险的当前信息</li>\n<li>确保项目团队和关键相关方了解当前的风险敞口级别</li>\n<li>通过监督风险过程对项目工作尽享持续监督</li>\n<li>发现新出现、正在变化和已过时的单个项目风险</li>\n</ul>\n</blockquote>\n<p>监督风险的目的：</p>\n<blockquote>\n<p>采用项目执行期间生成的绩效信息，以确定：</p>\n<ul>\n<li>实施的风险应对是否有效</li>\n<li>整体项目风险级别是否已改变</li>\n<li>已识别单个项目风险的状态是否已改变</li>\n<li>是否出现新的单个项目风险</li>\n<li>风险管理方法是否依然适用</li>\n<li>项目假设条件是否仍然成立</li>\n<li>风险管理政策和程序是否已得到遵守</li>\n<li>成本或进度应急储备是否需要修改</li>\n<li>项目策略是否让然有效</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>工作绩效报告</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>技术绩效分析</li>\n<li>储备分析</li>\n</ul>\n</li>\n<li>审计</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>任何组件</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>组织过程资产更新</li>\n</ol>\n<h2 id=\"采购-项目采购管理\"><a href=\"#采购-项目采购管理\" class=\"headerlink\" title=\"采购-项目采购管理\"></a>采购-项目采购管理</h2><blockquote>\n<p>从项目团队外部采购或获取所需产品、服务或成果的各个过程</p>\n<ul>\n<li>包括编制和管理协议所需的管理和控制过程，如：合同、订购单、协议备忘录，或服务书评</li>\n<li>被授权采购的人员：项目团队、管理层或组织采购部的成员</li>\n</ul>\n</blockquote>\n<h3 id=\"三个过程组-2\"><a href=\"#三个过程组-2\" class=\"headerlink\" title=\"三个过程组\"></a>三个过程组</h3><h4 id=\"一、规划采购管理（规划）\"><a href=\"#一、规划采购管理（规划）\" class=\"headerlink\" title=\"一、规划采购管理（规划）\"></a>一、规划采购管理（规划）</h4><blockquote>\n<p>记录项目的采购决策、明确采购方法、及识别潜在卖方的过程</p>\n<p>作用：确定是否需要外部支持，如果需要，则还要决定采购什么、如何采购、采购多少，以及何时采购</p>\n</blockquote>\n<p>合同类型比较：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">缩写</th>\n<th align=\"center\">特点</th>\n<th align=\"center\">风险（买方）</th>\n<th align=\"center\">使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定总价</td>\n<td align=\"center\">FFP</td>\n<td align=\"center\">一口价：不容易改变范围</td>\n<td align=\"center\">买方最小</td>\n<td align=\"center\">产品外围很明确时</td>\n</tr>\n<tr>\n<td align=\"center\">总价加激励</td>\n<td align=\"center\">FPIF</td>\n<td align=\"center\">总价基础上加激励费用</td>\n<td align=\"center\">买方小，但比FFP大</td>\n<td align=\"center\">增加灵活性，激励买方</td>\n</tr>\n<tr>\n<td align=\"center\">总价加经济价格调整</td>\n<td align=\"center\">FPEPA</td>\n<td align=\"center\">允许条件变化，调整价格</td>\n<td align=\"center\">买方小，但比FPIF大</td>\n<td align=\"center\">履约时间长；买方支付货币不同于卖方</td>\n</tr>\n<tr>\n<td align=\"center\">工料合同</td>\n<td align=\"center\">T&amp;M</td>\n<td align=\"center\">单位时间固定价格，谈判快，不能快速确定范围</td>\n<td align=\"center\">双方均等</td>\n<td align=\"center\">范围不明确，缺乏项目管理能力</td>\n</tr>\n<tr>\n<td align=\"center\">成本价激励费</td>\n<td align=\"center\">CPIF</td>\n<td align=\"center\">奖励节约反对浪费</td>\n<td align=\"center\">买方大，卖方小</td>\n<td align=\"center\">范围不明确，有分摊比例的惩罚奖励条件</td>\n</tr>\n<tr>\n<td align=\"center\">成本价奖励费</td>\n<td align=\"center\">CPAF</td>\n<td align=\"center\">费用凭主观判断</td>\n<td align=\"center\">买方大，比CPIF大</td>\n<td align=\"center\">范围不明确，有买方主观的惩罚奖励条件</td>\n</tr>\n<tr>\n<td align=\"center\">成本价固定费</td>\n<td align=\"center\">CPFF</td>\n<td align=\"center\">费用是固定的额度</td>\n<td align=\"center\">买方大，比CPAF大</td>\n<td align=\"center\">范围不明确时</td>\n</tr>\n<tr>\n<td align=\"center\">成本加百分比</td>\n<td align=\"center\">CPPC</td>\n<td align=\"center\">花的多，给的多，买方参与多</td>\n<td align=\"center\">买方最大</td>\n<td align=\"center\">范围不明确，买方有较强的项目管理能力</td>\n</tr>\n</tbody></table>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>商业文件<ul>\n<li>商业论证效</li>\n<li>益管理计划</li>\n</ul>\n</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>质量管理计划</li>\n<li>资源管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>里程碑清单</li>\n<li>项目团队派工单</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>专家判断</p>\n</li>\n<li><p>数据收集</p>\n<ul>\n<li>市场调研</li>\n</ul>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>自制或外购分析</li>\n</ul>\n</li>\n<li><p>供方选择分析</p>\n</li>\n<li><p>会议</p>\n</li>\n<li><p>采购管理计划</p>\n</li>\n<li><p>自制或外购决策</p>\n</li>\n<li><p>采购策略</p>\n</li>\n<li><p>招标文件</p>\n</li>\n<li><p>采购工作说明书</p>\n</li>\n<li><p>供方选择标准</p>\n</li>\n<li><p>独立成本估计</p>\n</li>\n<li><p>变更请求</p>\n</li>\n<li><p>项目文件更新</p>\n<ul>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li><p>组织过程资产</p>\n</li>\n</ol>\n<h4 id=\"二、实施采购（执行）\"><a href=\"#二、实施采购（执行）\" class=\"headerlink\" title=\"二、实施采购（执行）\"></a>二、实施采购（执行）</h4><blockquote>\n<p>获取卖方应答、选择卖方并授权合同的过程</p>\n<p>作用：</p>\n<ul>\n<li>选定合格卖方并签署关于火舞或服务交付的法律协议</li>\n<li>本过程的最后成果就是签订协议、包括正式合同</li>\n</ul>\n</blockquote>\n<p>采购流程：资格预审》<strong>招标》投标》评标》授标》</strong>签协议</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>配置管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>采购文件</li>\n<li>卖方建议书</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>广告投标人会议</li>\n<li>数据分析<ul>\n<li>建议书评价</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>谈判</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>选定的卖方</li>\n<li>协议</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>需求管理计划</li>\n<li>质量管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>资源日历</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"三、控制采购（监督）\"><a href=\"#三、控制采购（监督）\" class=\"headerlink\" title=\"三、控制采购（监督）\"></a>三、控制采购（监督）</h4><blockquote>\n<p>管理采购关系，监督合同绩效，实施必要的变更和纠偏，以及关闭合同的过程</p>\n<p>作用：</p>\n<ul>\n<li>确保买卖双方履行法律协议，满足项目需求</li>\n<li>对大型项目，合同管理重点管理各个供应商之间的沟通</li>\n<li>有的组织把合同管理当做独立于项目的一种组织职能</li>\n<li>采购管理员可以是项目团队成员，但他通常向另一部门经理报告</li>\n<li>需要把适当的项目管理过程应用于合同关系，实施多个层面的整合</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li><p>项目管理计划</p>\n<ul>\n<li>需求管理计划</li>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>变更管理计划</li>\n<li>进度基准</li>\n</ul>\n</li>\n<li><p>项目文件</p>\n<ul>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>质量报告</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li><p>协议</p>\n</li>\n<li><p>采购文件</p>\n</li>\n<li><p>批准的变更请求</p>\n</li>\n<li><p>工作绩效数据</p>\n</li>\n<li><p>事业环境因素</p>\n</li>\n<li><p>组织过程资产</p>\n</li>\n<li><p>专家判断</p>\n</li>\n<li><p>索赔管理</p>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>绩效审查</li>\n<li>挣值分析</li>\n<li>趋势分析</li>\n</ul>\n</li>\n<li><p>检查</p>\n</li>\n<li><p>审计</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>结束的采购</li>\n<li>工作绩效信息</li>\n<li>采购文档更新</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>资源需求</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h2 id=\"相关方-项目相关方管理\"><a href=\"#相关方-项目相关方管理\" class=\"headerlink\" title=\"相关方-项目相关方管理\"></a>相关方-项目相关方管理</h2><blockquote>\n<p>识别能够影响项目或会受项目影响的人员、团体或组织，分析相关方对项目的期望和影响，制定合适的管理策略来有效调动相关方参与项目决策和执行</p>\n<ul>\n<li>项目相关方管理过程分析相关方期望</li>\n<li>评估他们对项目或受项目影响程度</li>\n<li>制定策略来有效的引导相关方支持项目决策、规划和执行</li>\n<li>这些过程能够支持项目团队的工作</li>\n</ul>\n</blockquote>\n<p>相关方管理原则：项目经理和团队正确识别并合理引导所有相关方参与的能力，能觉得项目的成败</p>\n<blockquote>\n<ol>\n<li>需要反复识别出全部相关方（全部识别）</li>\n<li>根据相关方的利益和影响对其分类，项目经理应该专注于与项目成功密切相关的重要关系上（重点管理）</li>\n<li>相关方尽早参与项目工作，对项目至关重要，相关方的参与有助于其了解项目状况、从而支持项目（尽早参与）</li>\n<li>充分发挥相关方的作用来促进项目成功</li>\n<li>尽早面对消极相关方，如何面对积极相关方一样</li>\n</ol>\n</blockquote>\n<p>相关方管理关注满意度：满意度、期望、态度、利益冲突</p>\n<blockquote>\n<ul>\n<li>相关方满意度作为项目目标加以识别管理</li>\n<li>引导相关方参与的关键是重视与所有相关方保持持续沟通（包括团队成员）</li>\n<li>理解他们的需求和期望、处理所发生的问题、管理利益冲突</li>\n<li>促进相关方参与项目决策和活动</li>\n</ul>\n</blockquote>\n<p>相关方管理步骤：</p>\n<ol>\n<li>识别相关方</li>\n<li>相关方优先级排序</li>\n<li>管理相关方期望</li>\n<li>持续识别相关方</li>\n<li>收尾时获得关键相关方认可</li>\n</ol>\n<h3 id=\"四个-过程组\"><a href=\"#四个-过程组\" class=\"headerlink\" title=\"四个 过程组\"></a>四个 过程组</h3><h4 id=\"一、识别相关方（启动）\"><a href=\"#一、识别相关方（启动）\" class=\"headerlink\" title=\"一、识别相关方（启动）\"></a>一、识别相关方（启动）</h4><blockquote>\n<p>定期识别项目相关方，分析和记录他们的利益、参与度、相互依赖性、影响力和对项目成功的潜在影响过程</p>\n<p>作用：帮助项目经理经理对各个相关方或相关方群体的适度关注</p>\n</blockquote>\n<p>分类方法：</p>\n<ul>\n<li>权力：相关方的职权级别</li>\n<li>利益：对项目成果的关心程度</li>\n<li>影响：主动参与项目的程度</li>\n<li>作用：改变项目计划或执行的能力</li>\n</ul>\n<p>权力-利益方格：</p>\n<blockquote>\n<p>权力高-利益高：重点管理</p>\n<p>权力高-利益低：令其满意</p>\n<p>权力低-利益高：随时告知</p>\n<p>权力低-利益低：监督</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>商业文件<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>项目管理计划<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>需求文件</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>头脑风暴</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>相关方分析</li>\n<li>文件分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>相关方映射分析&#x2F;表现</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>相关方登记册</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>需求管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>相关方参与管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、规划相关方参与（规划）\"><a href=\"#二、规划相关方参与（规划）\" class=\"headerlink\" title=\"二、规划相关方参与（规划）\"></a>二、规划相关方参与（规划）</h4><blockquote>\n<p>根据相关方的需求、期望、利益和对项目的潜在影响，制定项目相关方参与项目的方法过程</p>\n<p>作用：提供相关方进行有效互动的可行计划</p>\n</blockquote>\n<p>相关方参与水平：</p>\n<ol>\n<li>不知晓：不知道项目及其潜在影响</li>\n<li>抵制：知晓项目和潜在影响，抵制变更</li>\n<li>中立：知晓项目，既不支持，也不反对</li>\n<li>支持：了解项目及其潜在影响，支持项目工作及其成果</li>\n<li>领导：知晓项目和潜在影响，积极参与确保项目取得成功</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>标杆对照</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>假设条件与制约因素分析</li>\n<li>根本原因分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>排列优先级&#x2F;排名</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>思维导图</li>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>相关方参与计划</li>\n</ol>\n<h4 id=\"三、管理相关方参与（执行）\"><a href=\"#三、管理相关方参与（执行）\" class=\"headerlink\" title=\"三、管理相关方参与（执行）\"></a>三、管理相关方参与（执行）</h4><blockquote>\n<p>与相关方进行沟通和协作以满足其需求与期望、处理问题，并促进相关方合理参与的过程</p>\n<p>作用：</p>\n<ul>\n<li>让项目经理能够提供相关方的支持，并尽可能降低相关方的地址</li>\n<li>确保相关方明确了解项目目的、目标、收益和风险，以及他们的贡献将如何促进项目成功</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>相关方参与计划</li>\n<li>变更管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>沟通技巧<ul>\n<li>反馈</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>冲突管理</li>\n<li>文化意识</li>\n<li>谈判</li>\n<li>观察&#x2F;交谈</li>\n<li>政治意识</li>\n</ul>\n</li>\n<li>基本规则</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、控制相关方参与（监督）\"><a href=\"#四、控制相关方参与（监督）\" class=\"headerlink\" title=\"四、控制相关方参与（监督）\"></a>四、控制相关方参与（监督）</h4><blockquote>\n<p>监督相关方关系，并通过修订参与策略和计划来引导相关方合理参与项目的过程</p>\n<p>作用：随着项目进展和环境变化，维持或提升相关方参与活动的效率和效果</p>\n<blockquote>\n<p>效率：确保相关方按照计划参与了应该参与的项目活动</p>\n<p>效果：相关方仅需要参加需要参与的项目活动</p>\n</blockquote>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li><p>项目管理计划</p>\n<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li><p>项目文件</p>\n<ul>\n<li>问题日志</li>\n<li>经验校训登记册</li>\n<li>项目沟通记录</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li><p>工作绩效数据</p>\n</li>\n<li><p>事业环境因素</p>\n</li>\n<li><p>组织过程资产</p>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>备选方案分析</li>\n<li>根本原因分析</li>\n<li>相关方分析</li>\n</ul>\n</li>\n<li><p>决策</p>\n<ul>\n<li>多标准决策分析</li>\n<li>投票</li>\n</ul>\n</li>\n<li><p>数据表现</p>\n<ul>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li><p>沟通技能</p>\n<ul>\n<li>反馈</li>\n<li>演示</li>\n</ul>\n</li>\n<li><p>人际关系与团队技能</p>\n<ul>\n<li>积极倾听</li>\n<li>文化意识</li>\n<li>领导力</li>\n<li>人际交往</li>\n<li>政治意识</li>\n</ul>\n</li>\n<li><p>会议</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"十大知识领域\"><a href=\"#十大知识领域\" class=\"headerlink\" title=\"十大知识领域\"></a>十大知识领域</h1><h2 id=\"整合-项目整合管理\"><a href=\"#整合-项目整合管理\" class=\"headerlink\" title=\"整合-项目整合管理\"></a>整合-项目整合管理</h2><blockquote>\n<p>识别、定义、组合、统一和协调个项目管理过程组的各种过程和活动而展开的活动与过程。</p>\n<p>整合：统一、合并、沟通和简历联系；贯穿项目始终</p>\n</blockquote>\n<h3 id=\"七个过程组\"><a href=\"#七个过程组\" class=\"headerlink\" title=\"七个过程组\"></a>七个过程组</h3><h4 id=\"一、制定项目章程（启动）\"><a href=\"#一、制定项目章程（启动）\" class=\"headerlink\" title=\"一、制定项目章程（启动）\"></a>一、制定项目章程（启动）</h4><blockquote>\n<p>执行一次</p>\n<p>编写一份正式批准的项目，授权项目经理使用组织资源的文件过程。里面描述高层级的期望</p>\n<p>作用：</p>\n<blockquote>\n<p>明确项目与组织战略目标之间的直接联系</p>\n<p>确立项目的正式地位</p>\n<p>展示组织对项目的承诺</p>\n</blockquote>\n<p>解读：</p>\n<blockquote>\n<p>明确定义项目开始和项目边界（边界模糊）</p>\n<p>项目章程一旦被批准，就标志着项目正式启动</p>\n<p>高层对项目的支持</p>\n</blockquote>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>商业文件<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集：<ul>\n<li>头脑风暴</li>\n<li>焦点小组</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>人机关系与团队技能：<ul>\n<li>冲突管理</li>\n<li>引导</li>\n<li>会议管理</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li><p>项目章程</p>\n<blockquote>\n<p>是由项目启动者或发起人发布的，正式批准项目成立，并授权项目经理使用组织资源开展项目活动的文件</p>\n</blockquote>\n</li>\n<li><p>假设日志</p>\n</li>\n</ol>\n<h4 id=\"二、制定项目计划（规划）\"><a href=\"#二、制定项目计划（规划）\" class=\"headerlink\" title=\"二、制定项目计划（规划）\"></a>二、制定项目计划（规划）</h4><blockquote>\n<p>执行一次</p>\n<p>定义、准备和协调项目计划的所有组成部分，并把他们整理合为一份综合项目管理计划的过程</p>\n<p>作用：综合文件，确定所有项目工作的基础及其执行方式</p>\n<p>性质：必须是综合，经批准的，现实可行的，正式的</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>其他过程的输出</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集：<ul>\n<li>头脑风暴</li>\n<li>核对单</li>\n<li>焦点小组</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>人际关系与团队技能：<ul>\n<li>冲突管理</li>\n<li>引导</li>\n<li>会议管理</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目管理计划</li>\n</ol>\n<h4 id=\"三、指导与管理项目工作（执行）\"><a href=\"#三、指导与管理项目工作（执行）\" class=\"headerlink\" title=\"三、指导与管理项目工作（执行）\"></a>三、指导与管理项目工作（执行）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>实现项目目标而领导和执行项目管理计划中所确定的工作，并实施已批准的变更过程</p>\n<p>作用：对项目工作提供综合管理，提高项目成功的可能性</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>变更日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目沟通记录</li>\n<li>项目进度计划</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>经批准的变更请求</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>项目管理信息系统</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>可交付成果</li>\n<li>工作绩效数据</li>\n<li>问题日志</li>\n<li>变更请求</li>\n<li>项目管理计划更新</li>\n<li>项目文件更新：<ul>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"四、管理知识领域（执行）\"><a href=\"#四、管理知识领域（执行）\" class=\"headerlink\" title=\"四、管理知识领域（执行）\"></a>四、管理知识领域（执行）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>使用现有的只是并生成新知识，实现项目目标，且帮助组织学习的过程。</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>项目团队派工单</li>\n<li>资源分解结构</li>\n<li>供方选择标准</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>可交付成果</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>知识管理</li>\n<li>信息管理</li>\n<li>人际关系与团队技能：<ul>\n<li>积极倾听</li>\n<li>引导</li>\n<li>领导力</li>\n<li>人际交往</li>\n<li>政治意识</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>经验教训登记册</li>\n<li>项目管理计划更新</li>\n<li>组织过程资产更新</li>\n</ol>\n<h4 id=\"五、监控项目工作（监控）\"><a href=\"#五、监控项目工作（监控）\" class=\"headerlink\" title=\"五、监控项目工作（监控）\"></a>五、监控项目工作（监控）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>跟踪、审查和报告整体项目进展，实现项目管理计划中确定的绩效目标过程</p>\n<p>作用：让相关方了解项目的当前状态并认可为处理绩效问题而采取的行动，以及通过成本和进度预测，让相关方了解未来项目状态</p>\n<p>工作内容：</p>\n<ul>\n<li>项目的实际绩效与项目管理计划进行比较</li>\n<li>定期评估项目记下，决定是否需要采取纠正或预防措施，并推荐必要的措施</li>\n<li>检查单个项目风险的状态</li>\n<li>维护一个准确且及时更新的信息库，以反应项目产品及相关文件的情况</li>\n<li>为状态报告、进展测量和预测提供信息</li>\n<li>做出预测，以更新当前的成本与进度信息</li>\n<li>监督已批准变更的实施情况</li>\n<li>确保项目与商业需求保持一致</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>成本预测</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>质量报告</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n<li>进度预测</li>\n</ul>\n</li>\n<li>工作绩效信息</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析：<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n<li>挣值分析</li>\n<li>根本原因分析</li>\n<li>趋势分析</li>\n<li>偏差分析</li>\n</ul>\n</li>\n<li>决策</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效报告</li>\n<li>变更请求</li>\n<li>项目管理计划更新</li>\n<li>项目文件更新：<ul>\n<li>成本预测</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>进度预测</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、实施整体变更控制（监控）\"><a href=\"#六、实施整体变更控制（监控）\" class=\"headerlink\" title=\"六、实施整体变更控制（监控）\"></a>六、实施整体变更控制（监控）</h4><blockquote>\n<p>整个项目期间开展</p>\n<p>审查所有变更请求、批准变更、管理对可交付成果、组织过程资产、项目文件和项目管理计划变更，并对变更处理结果进行沟通的过程</p>\n<p>作用：确保对项目中已记录在案的变更做综合评审</p>\n</blockquote>\n<p>变更控制流程：</p>\n<ol>\n<li>消除变更的根本原因</li>\n<li>识别并确认变更</li>\n<li>在知识领域分析影响</li>\n<li><strong>评估变更整体影响（整体变更控制）</strong></li>\n<li><strong>寻找可行方案（整体变更控制）</strong></li>\n<li><strong>批准或拒绝变更（整体变更控制）</strong></li>\n<li><strong>更新变更日志（整体变更控制）</strong></li>\n<li><strong>更新计划或基准（整体变更控制）</strong></li>\n<li>沟通变更决定</li>\n<li>实施跟踪确认变更</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划：<ul>\n<li>变更管理计划</li>\n<li>配置管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件：<ul>\n<li>估算依据</li>\n<li>需求跟踪矩阵</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>工作绩效报告</li>\n<li>变更请求</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>变更控制工具</li>\n<li>数据分析：<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n</ul>\n</li>\n<li>决策：<ul>\n<li>投票</li>\n<li>独裁型决策制定</li>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>批准的变更请求</li>\n<li>项目管理计划更新</li>\n<li>项目文件更新：<ul>\n<li>变更日志</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"七、结束项目或阶段（收尾）\"><a href=\"#七、结束项目或阶段（收尾）\" class=\"headerlink\" title=\"七、结束项目或阶段（收尾）\"></a>七、结束项目或阶段（收尾）</h4><blockquote>\n<p>开展一次</p>\n<p>结束项目或阶段是终结项目、阶段或合同的所有活动的过程</p>\n<p>作用：完成计划工作、总结经验教训、存档项目或阶段信息、释放组织资源以开展新工作</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划</li>\n<li>项目文件：<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目沟通记录</li>\n<li>质量控制车辆结果</li>\n<li>质量报告</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>验收的可交付成果</li>\n<li>商业文件：<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>协议</li>\n<li>采购文件</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析：<ul>\n<li>文件分析</li>\n<li>回归分析</li>\n<li>趋势分析</li>\n<li>偏差分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目文件更新：<ul>\n<li>经验教训登记册</li>\n</ul>\n</li>\n<li>最终产品、服务或成果移交</li>\n<li>最终报告</li>\n<li>组织过程资产更新：<ul>\n<li>项目文件</li>\n<li>运营和支持文件</li>\n<li>项目或阶段收尾文件</li>\n<li>经验教训库</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"范围-项目范围管理\"><a href=\"#范围-项目范围管理\" class=\"headerlink\" title=\"范围-项目范围管理\"></a>范围-项目范围管理</h2><blockquote>\n<p>确保项目做且只做所需的全部工作，以成功完成项目的各个过程</p>\n</blockquote>\n<p>项目范围：有时包含产品范围，交付具有规定相遇功能的产品。服务或成果而必须完成的工作；完成情况根据<strong>管理计划</strong>衡量</p>\n<p>产品范围：某项产品、服务或成果所具有的特征和功能；完成情况根据<strong>产品需求</strong>衡量</p>\n<p><strong>与范围有关的文件：</strong></p>\n<blockquote>\n<p>商业文件</p>\n<p>项目章程</p>\n<p>需求文件</p>\n<p>需求跟踪矩阵</p>\n<p>范围基准</p>\n<blockquote>\n<p>项目范围说明书</p>\n<p>工作分解结构</p>\n<p>WBS词典</p>\n</blockquote>\n<p>采购工作说明书</p>\n</blockquote>\n<h3 id=\"六个过程组\"><a href=\"#六个过程组\" class=\"headerlink\" title=\"六个过程组\"></a>六个过程组</h3><h4 id=\"一、规划范围管理（规划）\"><a href=\"#一、规划范围管理（规划）\" class=\"headerlink\" title=\"一、规划范围管理（规划）\"></a>一、规划范围管理（规划）</h4><blockquote>\n<p>记录如何定义、确认和控制项目范围及产品范围，而创建范围管理计划的过程</p>\n<p>作用：在整个项目期间如何管理范围提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划：<ul>\n<li>质量管理计划</li>\n<li>项目生命周期描述</li>\n<li>开发方法</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析：<ul>\n<li>备选方案分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n</ol>\n<h4 id=\"二、收集需求（规划）\"><a href=\"#二、收集需求（规划）\" class=\"headerlink\" title=\"二、收集需求（规划）\"></a>二、收集需求（规划）</h4><blockquote>\n<p>实现项目目标而确定、记录并管理相关方的需要和需求的过程</p>\n<p>作用：为定义和管理项目范围（包含产品范围）奠定基础</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>经验教育登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>商业文件<ul>\n<li>商业论证</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>头脑风暴</li>\n<li>访谈</li>\n<li>焦点小组</li>\n<li>问卷调查</li>\n<li>标杆对照</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>文件分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>投票</li>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>亲和图</li>\n<li>思维导图</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>名义小组（排序）</li>\n<li>观察、交谈</li>\n<li>引导、引导式研讨会</li>\n</ul>\n</li>\n<li>系统关系图</li>\n<li>原型法</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ol>\n<h4 id=\"三、定义范围（规划）\"><a href=\"#三、定义范围（规划）\" class=\"headerlink\" title=\"三、定义范围（规划）\"></a>三、定义范围（规划）</h4><blockquote>\n<p>指定项目和产品详细描述过程</p>\n<p>作用：描述产品、服务或成果的边界和验收标准</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>产品分析</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目范围说明书</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、创建WBS（规划）\"><a href=\"#四、创建WBS（规划）\" class=\"headerlink\" title=\"四、创建WBS（规划）\"></a>四、创建WBS（规划）</h4><blockquote>\n<p>把项目可交付成果和项目工作分解成较小的、更易于管理的组件过程</p>\n<p>作用：对所要交付的内容一共一个结构化的视图</p>\n</blockquote>\n<p>工作分解结构：</p>\n<blockquote>\n<p>WBS是对项目团队为实现项目目标、创建可交付成果而需要实施的全部工作范围的层级分解；</p>\n<p>并且定义了项目的总范围，代表着经批准的当前项目范围说明书中所规定的工作。</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>项目范围说明书</li>\n<li>需求文件</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>分解：100%原则、4至6层，最底层工作包，80小时（两周）原则、责任人、暂时不能分解的设置规划包</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>范围基准</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"五、确认范围（监控）\"><a href=\"#五、确认范围（监控）\" class=\"headerlink\" title=\"五、确认范围（监控）\"></a>五、确认范围（监控）</h4><blockquote>\n<p>正式验收已完成的项目可交付成果的过程</p>\n<p>作用：是验收过程具有客观性；同时通过验收每个可交付成功，提高最终产品、服务或成果获得验收的可能性</p>\n<p>Verify：核实可交付成果在前，属于控制质量过程</p>\n<p>Validate：确认可交付成果在后，属于确认范围过程</p>\n<p><strong>验收：先控制质量再确认范围</strong></p>\n<p>控制质量是项目团队，而确认范围是客户或发起人</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>质量报告</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n<li>核实的可交付成果</li>\n<li>工作绩效数据</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>检查</li>\n<li>决策<ul>\n<li>投票</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>验收的可交付成果</li>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、控制范围（监控）\"><a href=\"#六、控制范围（监控）\" class=\"headerlink\" title=\"六、控制范围（监控）\"></a>六、控制范围（监控）</h4><blockquote>\n<p>监督项目和产品的单位状态，管理范围基准变更的过程</p>\n<p>作用：在整个项目期间保持对范围基准的维护</p>\n</blockquote>\n<p>范围蔓延：未经控制的产品或项目范围的扩大（未对时间、成本和资源做相应调整）</p>\n<p>镀金：超出范围定义，主动增加额外的工作而得不到任何经济补偿的行为</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>变更管理计划</li>\n<li>配置管理计划</li>\n<li>范围基准</li>\n<li>绩效测量标准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>偏差分析</li>\n<li>趋势分许</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>范围管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"进度-项目进度管理\"><a href=\"#进度-项目进度管理\" class=\"headerlink\" title=\"进度-项目进度管理\"></a>进度-项目进度管理</h2><blockquote>\n<p>在WBS基础上继续分解成相关活动；为管理项目按时完成所需的各个过程</p>\n<p>WBS工作报告&#x3D;&#x3D;&#x3D;》活动&#x3D;&#x3D;&#x3D;》进度计划</p>\n</blockquote>\n<p>进度规划方法：关键路径法、关键链法</p>\n<p>进度编制工具：进度模板、项目管理软件</p>\n<p>进度模型（进度计划草稿，被批准后就是项目进度计划，也就是项目进度计划的前身）</p>\n<h3 id=\"六个过程组-1\"><a href=\"#六个过程组-1\" class=\"headerlink\" title=\"六个过程组\"></a>六个过程组</h3><h4 id=\"一、规划进度管理（规划）\"><a href=\"#一、规划进度管理（规划）\" class=\"headerlink\" title=\"一、规划进度管理（规划）\"></a>一、规划进度管理（规划）</h4><blockquote>\n<p>规划、编制、管理、执行和控制项目进度而制定的侦测、程序和文档的过程</p>\n<p>作用：在整个项目过程中管理项目进度提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>开发方法</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>进度管理计划</li>\n</ol>\n<h4 id=\"二、定义活动（规划）\"><a href=\"#二、定义活动（规划）\" class=\"headerlink\" title=\"二、定义活动（规划）\"></a>二、定义活动（规划）</h4><blockquote>\n<p>识别和记录；为完成项目可交付成果而采取的具体行动过程</p>\n<p>作用：将工作包分解为活动，作为对项目工作进行估算、进度规划、执行、监督和控制的基础</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目进度计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>分解</li>\n<li>滚动式规划</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>活动清单</li>\n<li>活动属性（时间、资源、等等）</li>\n<li>里程碑清单</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、排列活动顺序（规划）\"><a href=\"#三、排列活动顺序（规划）\" class=\"headerlink\" title=\"三、排列活动顺序（规划）\"></a>三、排列活动顺序（规划）</h4><blockquote>\n<p>识别和记录活动之间关系的过程</p>\n<p>作用：定义工作之间的逻辑顺序，以便在既定的项目制约因素下获得最高效率</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>里程碑清单</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>紧前关系绘图法（PDM）</li>\n<li>确定和整合依赖关系：硬逻辑、软逻辑</li>\n<li>提前量和滞后量</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目进度网络图</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>里程碑清单</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、估算活动时间（规划）\"><a href=\"#四、估算活动时间（规划）\" class=\"headerlink\" title=\"四、估算活动时间（规划）\"></a>四、估算活动时间（规划）</h4><blockquote>\n<p>根据资源估算结果，估算完成单项活动所需的工作时段数的过程</p>\n<p>作用：确定完成每个活动所需话费的时间量；工作量&#x3D;时间 X 资源</p>\n</blockquote>\n<p>收益递减规律：当持续加大投入资源时，当达到收益平衡点时，收益就会持续下降。（举例：卖牛肉面）</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目团队派工单</li>\n<li>资源分解结构</li>\n<li>资源日历</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>类比估算</li>\n<li>参数估算</li>\n<li>自下而上估算</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>储备分析</li>\n</ul>\n</li>\n<li>决策</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>持续时间估算</li>\n<li>估算依据</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"五、制定进度计划（规划）\"><a href=\"#五、制定进度计划（规划）\" class=\"headerlink\" title=\"五、制定进度计划（规划）\"></a>五、制定进度计划（规划）</h4><blockquote>\n<p>分析活动顺序、持续时间、资源需求和进度制约因素，创建进度模型，从而落实项目执行和监控过程。</p>\n<p>作用：为完成项目活动而制定具有计划日期的进度模型</p>\n</blockquote>\n<p>关键法：</p>\n<blockquote>\n<p>在进度模型中，估算项目最短工期，确定逻辑网络路劲的进度灵活性大小的一种方法；关键路劲是项目时间最长的活动顺序，决定着可能的项目最短工期。关键</p>\n</blockquote>\n<p>关键链法：</p>\n<blockquote>\n<p>一种进度规划方法，允许项目团队在任何项目进度路径上设置缓冲，来应对资源限制和项目不确定性</p>\n<p>需要考虑活动持续时间、逻辑关系和资源可用性，其中活动持续时间中不包含安全沉余。它用统计方法确定缓冲时段</p>\n<blockquote>\n<p>项目缓冲：放在关键链末端缓冲，保证项目不因关键链延误而延误</p>\n<p>接驳缓冲：放置在非关键链与关键链的接合点，保护关键链不收非关键链延误影响。（防止关键路径变更）</p>\n</blockquote>\n<p>1、应对资源限制和项目不确定性</p>\n<p>2、基于关键路径（计算完关键路径后）</p>\n<p>3、资源约束性关键路劲就是关键链</p>\n<p>4、不确定性决定缓冲时间长短</p>\n<p>5、重点管理：剩余的缓冲持续时间与剩余的活动持续时间之间的匹配关系</p>\n</blockquote>\n<p>最早与最迟时间</p>\n<blockquote>\n<p>ES（Earliest Start）：活动能够开始的最早时间</p>\n<p>EF（Earliest Finish）：活动能够完成的最早时间</p>\n<p>LF（Latest Finish）：活动能够开始的最迟时间</p>\n<p>LS（Latest Start）：活动能够完成的最迟时间</p>\n<p>ES + DU &#x3D; EF</p>\n<p>LF - DU &#x3D; LS</p>\n<p>TF &#x3D; LS - ES &#x3D; LF - EF</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">ES</th>\n<th align=\"center\">DU：持续时间</th>\n<th align=\"center\">EF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td align=\"center\">活动ID（活动名称）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">LS</td>\n<td align=\"center\">TF：总浮动时间</td>\n<td align=\"center\">LF</td>\n</tr>\n</tbody></table>\n</blockquote>\n<p>顺推：MAX（EF1，EF2。。。）</p>\n<p>倒推：MIN（LS1，LS2。。。）</p>\n<p>自由时间：FF &#x3D; ES（后一节点） - EF（当前活动）</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>持续时间估算</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>项目进度网络图</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>进度网络分析</li>\n<li>关键路劲法</li>\n<li>资源优化</li>\n<li>数据分析<ul>\n<li>假设情景</li>\n<li>模拟</li>\n</ul>\n</li>\n<li>提前量和滞后量</li>\n<li>进度压缩</li>\n<li>项目管理信息系统</li>\n<li>敏捷发布规划</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>进度基准（给发起人和相关方的高层级概要）</li>\n<li>项目进度计划</li>\n<li>进度数据</li>\n<li>项目日历</li>\n<li>项目管理计划更新<ul>\n<li>进度管理计划</li>\n<li>风险管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>假设日志</li>\n<li>持续时间估算</li>\n<li>经验教训登记册</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、控制进度（监控）\"><a href=\"#六、控制进度（监控）\" class=\"headerlink\" title=\"六、控制进度（监控）\"></a>六、控制进度（监控）</h4><blockquote>\n<p>监督项目状态，更新项目进度和管理进度基准变更的过程</p>\n<p>作用：保持对进度基准的维护</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>进度基准</li>\n<li>范围基准</li>\n<li>绩效测量标准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目日历</li>\n<li>项目进度计划</li>\n<li>资源日历</li>\n<li>进度数据</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>挣值分析</li>\n<li>迭代燃烧图</li>\n<li>绩效评审</li>\n<li>趋势分析</li>\n<li>偏差分析</li>\n<li>假设情景分析</li>\n</ul>\n</li>\n<li>关键路径法</li>\n<li>项目管理信息系统</li>\n<li>资源优化</li>\n<li>提前量和滞后量</li>\n<li>进度压缩</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>进度预测</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>进度管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>资源日历</li>\n<li>风险等级册</li>\n<li>进度数据</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"成本-项目成本管理\"><a href=\"#成本-项目成本管理\" class=\"headerlink\" title=\"成本-项目成本管理\"></a>成本-项目成本管理</h2><blockquote>\n<p>为使用项目在批准的预算内完成而对成本进行规划、估算、预算、融资、周知、管理和控制的各个过程</p>\n<p>目的：确保项目在批准的预算内完工</p>\n</blockquote>\n<p>核心概念：</p>\n<blockquote>\n<p><strong>项目生命周期成本：</strong>完成项目活动所需的成本；重点关注完成项目活动所需资源的成本，但同时也应考虑项目决策对项目产品、服务或成果的使用成本、维护成本和支持成本的影响</p>\n<p><strong>多次测量时机：</strong>不同的相关方会在不同的时间，用不同的方法测算项目成本。例如：对于某采购品，可在做出采购决策、下达订单、实际交货、实际成本发生或进行会计记账时，测算其成本</p>\n<p><strong>项目内或项目外成本分析：</strong>在很多组织中，预测和分心项目产品的财务效益是在项目之外进行的，但对于有些项目，如固定资产投资项目，可在项目成本管理中进行这项预测和分析工作。可用方法：通用财务管理技术，如投资回报率分析、现金流贴现分析和投资回收期分析</p>\n</blockquote>\n<h5 id=\"经营性财务知识\"><a href=\"#经营性财务知识\" class=\"headerlink\" title=\"经营性财务知识\"></a>经营性财务知识</h5><ol>\n<li><p>可变成本</p>\n<blockquote>\n<p>随生产量或工作而变的成本，如人员工资，消耗的原材料等</p>\n</blockquote>\n</li>\n<li><p>固定成本</p>\n<blockquote>\n<p>不随生产规模变化的非重复成本，如设备费用、场地租赁费用等</p>\n</blockquote>\n</li>\n<li><p>直接成本</p>\n<blockquote>\n<p>能够直接归属于项目工作的成本，如项目组旅行费用、项目组人员工资和奖金、项目使用的物资等</p>\n</blockquote>\n</li>\n<li><p>间接成本</p>\n<blockquote>\n<p>一般管理费用科目或几个项目共同分担的成本。如员工福利、保安费用、行政部门和财务部门费用等</p>\n</blockquote>\n</li>\n<li><p>机会成本</p>\n<blockquote>\n<p>因为选择一个机会而放弃的另外一个机会可以获得的收益；例如一个人投资炒股赚10万，而同期如果买商品房的话可以赚500万。如果此人投资超过而没有买商品房，则选择炒股的机会成本就是500万</p>\n</blockquote>\n</li>\n<li><p>沉没成本</p>\n<blockquote>\n<p>哪些在过去发生的费用，就像沉船一样不能回收的部分。当决定继续投资项目时，不应该考虑这部分费用。当决定项目是否该继续时，许多人像赌徒一样的心里指望能够收回沉没成本</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"四个过程组\"><a href=\"#四个过程组\" class=\"headerlink\" title=\"四个过程组\"></a>四个过程组</h3><h4 id=\"一、规划成本管理（规划）\"><a href=\"#一、规划成本管理（规划）\" class=\"headerlink\" title=\"一、规划成本管理（规划）\"></a>一、规划成本管理（规划）</h4><blockquote>\n<p>确定如何估算、预算。管理。监督和控制项目成本的过程</p>\n<p>作用：在整个项目为如何管理项目成本提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>进度管理计划</li>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>成本管理计划</li>\n</ol>\n<h4 id=\"二、估算成本（规划）\"><a href=\"#二、估算成本（规划）\" class=\"headerlink\" title=\"二、估算成本（规划）\"></a>二、估算成本（规划）</h4><blockquote>\n<p>对完成项目工作所需资源成本进行近似估算的过程</p>\n<p>作用：确定项目所需的资金，是对成本的预测</p>\n<p>在估算成本时，需要识别和分析可用于启动与完成项目的备选成本方案</p>\n<p>需要权衡备选成本方案并考虑等闲，以优化项目成本</p>\n<p>进行成本估算，应该考虑将向项目收费的全部资源</p>\n</blockquote>\n<p>估算成本单位：通常用某种获取单位，如美元、欧元、人民币等；但有时也采用其他计量单位，如人时或人天数，以消除同伙膨胀的映像，便于成本比较</p>\n<p>估算过程是渐进明细的：启动阶段可得出项目的粗略量级估算（ROM）：-25%-+75%；随着信息越来越详细，估算区间可缩小为：-5%-+10%</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>成本管理计划</li>\n<li>质量管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>类比估算</li>\n<li>参数估算</li>\n<li>自下而上估算</li>\n<li>三点估算</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>储备分析</li>\n<li>质量成本</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n<li>决策<ul>\n<li>投票</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>成本估算</li>\n<li>估算依据</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>经验登记册</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、制定预算（规划）\"><a href=\"#三、制定预算（规划）\" class=\"headerlink\" title=\"三、制定预算（规划）\"></a>三、制定预算（规划）</h4><blockquote>\n<p>汇总所有单个活动或工作包的估算成本，简历一个经批准的成本基线的过程；以WBS为重要依据</p>\n<p>作用：确定成本基准，可据此监督和控制项目绩效</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>成本管理计划</li>\n<li>资源管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>估算依据</li>\n<li>成本估算</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>商业文件<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>成本汇总</li>\n<li>数据分析<ul>\n<li>储备分析</li>\n</ul>\n</li>\n<li>历史信息审核</li>\n<li>资金限制平衡</li>\n<li>融资</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>成本基准</li>\n<li>项目资金需求</li>\n<li>项目文件更新<ul>\n<li>成本估算</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、控制成本（监控）\"><a href=\"#四、控制成本（监控）\" class=\"headerlink\" title=\"四、控制成本（监控）\"></a>四、控制成本（监控）</h4><blockquote>\n<p>监督项目状态、以更新项目成本，管理成本基准变更的过程。</p>\n<p>作用：在整个项目期间保持对成本基准的维护</p>\n<p>重点分析：项目资金支出与相应完成的实际工作之间的关系</p>\n<p>有效成本控制的关键：在于与经批准的成本基准及其变更进行管理</p>\n<p>确保成本支持不超过批准的资金限额：既不超出按时段、按WBS组件、按活动分配的限额，也不超出项目总限额</p>\n</blockquote>\n<p><strong>变更管理：</strong></p>\n<ul>\n<li>影响不必要的变更</li>\n<li>及时处理变更</li>\n<li>管理已发生的变更</li>\n<li>防止在成本或资源使用报告中出现未经批准的变更</li>\n<li>向相关方报告所有经批准的变更及其相关成本</li>\n</ul>\n<p><strong>控制成本&amp;进度：</strong></p>\n<ul>\n<li>确保成本支出不超过批准的资金限额，既不超出按时段、按WBS组件。按活动分配的限额，也不超出项目总限额</li>\n<li>没法把逾期的成本超支控制在可接受的范围内</li>\n</ul>\n<p><strong>监督绩效：</strong></p>\n<ul>\n<li>监督成本绩效，找出并分析与成本基准间的偏差</li>\n<li>对照资金支出，监督工作</li>\n</ul>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>成本管理计划</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n</ul>\n</li>\n<li>项目资金需求</li>\n<li>项目绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>专家判断</p>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>挣值分析</li>\n<li>偏差分析</li>\n<li>趋势分析</li>\n<li>储备分析</li>\n</ul>\n</li>\n<li><p>完工尚需绩效指数</p>\n<blockquote>\n<p>TCPI：在项目执行的不通时间点估算的为在既定预算内完工而必须达到的未来成本绩效</p>\n<p>TCPI &#x3D; （BAC -  EC）&#x2F; （BAC - AC）</p>\n</blockquote>\n</li>\n<li><p>项目管理信息系统</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>成本预测</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>成本管理计划</li>\n<li>成本基准</li>\n<li>绩效测量基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>成本估算</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"质量-项目质量管理\"><a href=\"#质量-项目质量管理\" class=\"headerlink\" title=\"质量-项目质量管理\"></a>质量-项目质量管理</h2><blockquote>\n<p>把最值的质量政策应用于规划、管理、控制项目和产品的质量要求已满足相关方目标的各个过程</p>\n<p>项目质量管理确定项目需求，包括产品需求得到满足和确认</p>\n<p>不担关注可交付成果的质量，还要关注过程的质量（管理过程、设计过程）</p>\n</blockquote>\n<p><strong>质量：</strong>在功能相等的情况下进行比较</p>\n<p><strong>等级：</strong>功能多少叫做等级</p>\n<p><strong>精确：</strong>精密程度的度量，重复测量的结果非常聚合，离散度很小</p>\n<p><strong>准确：</strong>对正确性的评估，测量值非常接近实际值</p>\n<h3 id=\"三个过程组\"><a href=\"#三个过程组\" class=\"headerlink\" title=\"三个过程组\"></a>三个过程组</h3><h4 id=\"一、规划质量管理（规划）\"><a href=\"#一、规划质量管理（规划）\" class=\"headerlink\" title=\"一、规划质量管理（规划）\"></a>一、规划质量管理（规划）</h4><blockquote>\n<p>识别项目及其可交付成果的质量要求和标准，并书面描述项目将如何证明符合质量要求和标准的过程</p>\n<p>作用：在整个项目奇迹如何管理和核实质量提供指南和方向</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>需求管理计划</li>\n<li>风险管理计划</li>\n<li>相关方参与计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>标杆对照</li>\n<li>头脑风暴</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>成本效益分析</li>\n<li>质量成本</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>流程图</li>\n<li>逻辑数据模型</li>\n<li>矩阵图</li>\n<li>思维导图</li>\n</ul>\n</li>\n<li>测试和检查规划</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>质量管理计划</li>\n<li>质量测量指标</li>\n<li>项目管理计划更新<ul>\n<li>风险管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、管理质量（规划）\"><a href=\"#二、管理质量（规划）\" class=\"headerlink\" title=\"二、管理质量（规划）\"></a>二、管理质量（规划）</h4><blockquote>\n<p>把组织的主梁政策用于项目，并且质量管理计划转化为可执行的质量活动的过程</p>\n<p>作用：提高实现质量目标的可能性，一级识别无效过程的导致质量低劣的原因</p>\n<p>管理质量使用控制质量过程的数据和结果向相关方专事项目的总体质量状态</p>\n</blockquote>\n<p><strong>问题解决：</strong></p>\n<ol>\n<li>定义问题</li>\n<li>识别根本性原因</li>\n<li>生成可能的解决方案</li>\n<li>选择最佳解决方案</li>\n<li>执行解决方案</li>\n<li>验证解决方案的有效性</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>质量管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>质量控制测量结果</li>\n<li>质量测量指标</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据收集<ul>\n<li>核对单</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>文件分析</li>\n<li>过程分析</li>\n<li>根本原因分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>亲和图</li>\n<li>因果图</li>\n<li>流程图</li>\n<li>直方图</li>\n<li>矩阵图</li>\n<li>散点图</li>\n</ul>\n</li>\n<li>审计</li>\n<li>面向X的设计</li>\n<li>问题解决</li>\n<li>质量改进方法</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>质量报告</li>\n<li>测试与凭借文件（测试用例）</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>质量管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、控制质量（监控）\"><a href=\"#三、控制质量（监控）\" class=\"headerlink\" title=\"三、控制质量（监控）\"></a>三、控制质量（监控）</h4><blockquote>\n<p>评估绩效，确保项目输出完整、正确且满足客户期望，而监督和记录质量管理活动执行结果的过程</p>\n<p>作用：核实项目可交付成果和工作已经达到主要相关方的质量要求，可供最终验证（先内部确认满足验收标准）</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>质量管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>质量测量指标</li>\n<li>测试与评价文件</li>\n</ul>\n</li>\n<li>批准的变更请求</li>\n<li>可交付成果</li>\n<li>工作绩效数据</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据收集<ul>\n<li>核对单</li>\n<li>核查表</li>\n<li>统计抽样</li>\n<li>问卷调查</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>绩效审查</li>\n<li>根本原因分析</li>\n</ul>\n</li>\n<li>检查</li>\n<li>测试&#x2F;产品评估</li>\n<li>数据表现<ul>\n<li>因果图</li>\n<li>控制图</li>\n<li>直方图</li>\n<li>散点图</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>质量控制测量结果</li>\n<li>核实的可交付成果</li>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>质量管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n</ul>\n</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>测试与评估文件</li>\n</ol>\n<h2 id=\"资源-项目资源管理\"><a href=\"#资源-项目资源管理\" class=\"headerlink\" title=\"资源-项目资源管理\"></a>资源-项目资源管理</h2><blockquote>\n<p>识别、获取和管理所需资源以成功完成项目的各个过程，这些过程有助于确保项目经理和项目团队在正确的时间和正确的地点使用正确的资源</p>\n</blockquote>\n<h3 id=\"六个过程组-2\"><a href=\"#六个过程组-2\" class=\"headerlink\" title=\"六个过程组\"></a>六个过程组</h3><h4 id=\"一、规划资源管理（规划）\"><a href=\"#一、规划资源管理（规划）\" class=\"headerlink\" title=\"一、规划资源管理（规划）\"></a>一、规划资源管理（规划）</h4><blockquote>\n<p>如何估算、获取、管理和利用团队以及实物资源的过程。</p>\n<p>作用：根据项目类型和复杂程度确定适用于项目资源的管理方法和管理程度</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>质量管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>项目进度计划</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据表现<ul>\n<li>层级型</li>\n<li>责任分配矩阵</li>\n<li>文本型</li>\n</ul>\n</li>\n<li>组织理论</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>资源管理计划</li>\n<li>团队章程</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、估算活动资源（规划）\"><a href=\"#二、估算活动资源（规划）\" class=\"headerlink\" title=\"二、估算活动资源（规划）\"></a>二、估算活动资源（规划）</h4><blockquote>\n<p>是估算执行项目所需的团队资源，以及材料、设备和用品的类型和数量的过程</p>\n<p>作用：明确完成项目所需的资源种类、数量和特性</p>\n<p>以便做出更准确的成本和持续时间估算</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>活动属性</li>\n<li>活动清单</li>\n<li>假设日志</li>\n<li>成本估算</li>\n<li>资源日历</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>自下而上估算</li>\n<li>类比估算</li>\n<li>参数估算</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>资源需求</li>\n<li>估算依据</li>\n<li>资源分解结构</li>\n<li>项目文件更新<ul>\n<li>活动属性</li>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、获取资源（执行）\"><a href=\"#三、获取资源（执行）\" class=\"headerlink\" title=\"三、获取资源（执行）\"></a>三、获取资源（执行）</h4><blockquote>\n<p>获取团队成员、设施、设备、材料、用品和其他资源的过程</p>\n<p>作用：概述和指导资源的选择，并将其分配给相应的活动</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>采购管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>项目进度计划</li>\n<li>资源日历</li>\n<li>资源需求</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>谈判</li>\n</ul>\n</li>\n<li>预分派</li>\n<li>虚拟团队</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>物质资源分派单</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>资源分解结构</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"四、建设项目团队（执行）\"><a href=\"#四、建设项目团队（执行）\" class=\"headerlink\" title=\"四、建设项目团队（执行）\"></a>四、建设项目团队（执行）</h4><blockquote>\n<p>提高工作能力，促进团队成员互动，改善团队整体氛围，以提高项目绩效的过程</p>\n<p>作用：提升整体项目绩效</p>\n<ol>\n<li>改进团队协作</li>\n<li>增强人际技能</li>\n<li>激励团队成员</li>\n<li>降低人员离职率</li>\n</ol>\n</blockquote>\n<p>特克曼阶梯理论：</p>\n<p>非正式沟通和活动有助于建立信任和良好的工作关系；团队建设是持续性过程</p>\n<ol>\n<li><p>形成阶段</p>\n<blockquote>\n<p>项目认识，并了解项目情况以及在项目中的正式角色与职责。倾向于相互独立，不怎么开诚布公</p>\n</blockquote>\n</li>\n<li><p>震荡阶段</p>\n<blockquote>\n<p>开始从事项目工作，制定技术决策和讨论项目管理方法。对不同观点和意见不能采取合作开放的态度，团队环境能恶化成破坏性的</p>\n</blockquote>\n</li>\n<li><p>规范阶段</p>\n<blockquote>\n<p>开始协同工作，并按团队的需要来调整各自的工作习惯和行为，团队成员相互信任</p>\n</blockquote>\n</li>\n<li><p>成熟阶段</p>\n<blockquote>\n<p>像一个组织有序的单位那样工作。团队成员之间相互依靠，平稳高效的解决问题</p>\n</blockquote>\n</li>\n<li><p>解散阶段</p>\n<blockquote>\n<p>团队完成所有工作，团队成员离开项目</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>团队章程</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>集中办公</p>\n<blockquote>\n<p>作用：增进沟通和集体感的设施</p>\n</blockquote>\n</li>\n<li><p>虚拟团队</p>\n</li>\n<li><p>沟通技术</p>\n<blockquote>\n<p>作用：为集中办公团队营造融洽的环境；促进虚拟团队更好的相互理解</p>\n</blockquote>\n<ul>\n<li><p>冲突管理</p>\n</li>\n<li><p>影响力</p>\n</li>\n<li><p>激励</p>\n</li>\n<li><p>谈判</p>\n</li>\n<li><p>团队建设</p>\n<blockquote>\n<p>通过举办各种活动，强化团队的社交关系，打造积极合作的工作环境</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>认可与奖励</p>\n<blockquote>\n<p>对成员的优良香味给予认可与奖励；满足被将奖励者的某个重要需求的奖励才是有效的奖励。（大多人都能做好的工作）</p>\n</blockquote>\n</li>\n<li><p>培训</p>\n<blockquote>\n<p>弥补差距</p>\n</blockquote>\n</li>\n<li><p>个人和团队评估</p>\n<blockquote>\n<p>让项目经理和项目团队洞察成员的优势和劣势</p>\n<p>帮助项目经理评估团队成员的偏好和愿望，团队成员如何处理和整理信息、如何制定决策，以及如何与他人打交道</p>\n<p>增进团队成员间的理解、信任、承诺和沟通，不断提高团队成效</p>\n</blockquote>\n</li>\n<li><p>会议</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>团队绩效评价</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>团队章程</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"五、管理项目团队（执行）\"><a href=\"#五、管理项目团队（执行）\" class=\"headerlink\" title=\"五、管理项目团队（执行）\"></a>五、管理项目团队（执行）</h4><blockquote>\n<p>跟踪团队成员工作表现，提供反馈，解决问题并管理团队变更，以优化项目绩效的过程</p>\n<p>作用：影响团队行为、管理冲突以解决问题</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n<li>团队章程</li>\n</ul>\n</li>\n<li>工作绩效报告</li>\n<li>团队绩效评价</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>人际关系与团队技能<ul>\n<li>冲突管理</li>\n<li>制定决策</li>\n<li>情商</li>\n<li>影响力</li>\n<li>领导力</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n</ol>\n<h4 id=\"六、控制资源-（监控）\"><a href=\"#六、控制资源-（监控）\" class=\"headerlink\" title=\"六、控制资源 （监控）\"></a>六、控制资源 （监控）</h4><blockquote>\n<p>确定按计划为项目分配实物资源，以及根据资源使用计划监督资源实际使用情况，并采取必要纠正措施的过程</p>\n<p>作用：确保分配的资源适时的可用于项目，且在不再需要时被释放</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>物质资源分配单</li>\n<li>项目进度计划</li>\n<li>资源分解结构</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>协议</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n<li>绩效审查</li>\n<li>趋势分析</li>\n</ul>\n</li>\n<li>问题解决</li>\n<li>人际关系与团队技能<ul>\n<li>谈判</li>\n<li>影响力</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>物质资源分配单</li>\n<li>资源分解结构</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"沟通-项目沟通管理\"><a href=\"#沟通-项目沟通管理\" class=\"headerlink\" title=\"沟通-项目沟通管理\"></a>沟通-项目沟通管理</h2><blockquote>\n<p>通过开发工件，以及执行用于有效交换信息的各种活动，来确保项目及其相关方的信息需求得以满足的各个过程</p>\n</blockquote>\n<h3 id=\"三个过程组-1\"><a href=\"#三个过程组-1\" class=\"headerlink\" title=\"三个过程组\"></a>三个过程组</h3><h4 id=\"一、规划沟通管理（规划）\"><a href=\"#一、规划沟通管理（规划）\" class=\"headerlink\" title=\"一、规划沟通管理（规划）\"></a>一、规划沟通管理（规划）</h4><blockquote>\n<p>基于每个相关方或相关方群体信息需求、可用的组织资产，以及具体项目的需求，为项目沟通活动制定恰当的方法和计划的过程</p>\n<p>作用：为及时向相关方提供相关信息，引导相关方有效参与项目，编制书面沟通计划</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>需求文件</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>沟通需求分析</li>\n<li>沟通技术</li>\n<li>沟通模型</li>\n<li>沟通方法</li>\n<li>人际关系与团队技能<ul>\n<li>沟通风格评估</li>\n<li>政治意识</li>\n<li>文化意识</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>沟通管理计划</li>\n<li>项目管理计划更新<ul>\n<li>相关方管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>项目进度计划</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、管理沟通（执行）\"><a href=\"#二、管理沟通（执行）\" class=\"headerlink\" title=\"二、管理沟通（执行）\"></a>二、管理沟通（执行）</h4><blockquote>\n<p>确保项目信息及时且恰当的收集、生成、发布、存储、检索、管理、监督和最终处置的过程</p>\n<p>作用：促成项目团队与相关方之间的有效信息流动</p>\n</blockquote>\n<p>沟通渠道计算：n X（n - 1）&#x2F; 2</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>质量报告</li>\n<li>风险报告</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>工作绩效报告</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>沟通技术</li>\n<li>沟通方法</li>\n<li>沟通技能<ul>\n<li>沟通能力</li>\n<li>反馈</li>\n<li>非语言</li>\n<li>演示</li>\n</ul>\n</li>\n<li>项目关系信息系统</li>\n<li>人际关系与团队技能<ul>\n<li>积极倾听</li>\n<li>冲突管理</li>\n<li>文化意识</li>\n<li>会议管理</li>\n<li>人际交往</li>\n<li>政治意识</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目沟通管理计划</li>\n<li>项目管理计划更新<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"三、监督沟通（监控）\"><a href=\"#三、监督沟通（监控）\" class=\"headerlink\" title=\"三、监督沟通（监控）\"></a>三、监督沟通（监控）</h4><blockquote>\n<p>确保满足项目及相关放的信息需求过程</p>\n<p>作用：按沟通计划和相关方参与计划的要求优化信息传递流程</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目沟通记录</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>项目管理信息系统</li>\n<li>数据表现<ul>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>观察、交谈</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目沟通计划更新<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"风险-项目风险管理\"><a href=\"#风险-项目风险管理\" class=\"headerlink\" title=\"风险-项目风险管理\"></a>风险-项目风险管理</h2><blockquote>\n<p>规划风险管理、识别风险、开展风险分析、规划风险应对、实时风险应对和监督风险的各个过程</p>\n<p>作用：提高积极事件的概率和影响；降低消极事件的概率和影响，从而提高项目成功的可能性</p>\n</blockquote>\n<p>风险态度：风险承受力、风险偏好、风险临界值</p>\n<h3 id=\"七个过程组-1\"><a href=\"#七个过程组-1\" class=\"headerlink\" title=\"七个过程组\"></a>七个过程组</h3><h4 id=\"一、规划风险管理（规划）\"><a href=\"#一、规划风险管理（规划）\" class=\"headerlink\" title=\"一、规划风险管理（规划）\"></a>一、规划风险管理（规划）</h4><blockquote>\n<p>定义如何实施项目风险管理活动的过程</p>\n<p>作用：确保风险管理水平、方法和可监督与项目风险程度，以及项目对组织和其他相关方的重要程序相匹配</p>\n</blockquote>\n<p>已知风险：项目团队能够识别和分析的风险；也就是风险事件、概率和影响都知道的风险</p>\n<p>未知风险：指无法进行主动管理的风险，就是风险事件、概率、影响这3个要素至少有一个不知道的风险</p>\n<blockquote>\n<ul>\n<li>已知-未知：风险是已知的，但是不知道风险发生的概率和影响（应急储备）</li>\n<li>未知-未知：风险是未知的，发生的概率和影响也不知道（管理储备）</li>\n</ul>\n</blockquote>\n<p>概率影响矩阵：</p>\n<blockquote>\n<p>概率 X 影响 &#x3D; 风险值（敞口）</p>\n</blockquote>\n<ul>\n<li>对风险进行优先排序</li>\n<li>用颜色深浅代表风险高低</li>\n<li>优先处理威胁高或机会大的风险</li>\n</ul>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>所有组件</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据分析<ul>\n<li>相关方分析</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>风险管理计划</li>\n</ol>\n<h4 id=\"二、识别风险（规划）\"><a href=\"#二、识别风险（规划）\" class=\"headerlink\" title=\"二、识别风险（规划）\"></a>二、识别风险（规划）</h4><blockquote>\n<p>识别单个项目风险以及整体项目风险的来源，并记录风险特征的过程；识别风险时，要同时开率单个项目风险，以及整体项目风险的来源</p>\n<p>作用：</p>\n<ul>\n<li>记录单个风险</li>\n<li>记录整体风险来源</li>\n<li>汇集相关信息</li>\n<li>以便项目团队能够恰当对已识别的风险</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>需求管理计划</li>\n<li>进度管理计划</li>\n<li>成本管理计划</li>\n<li>质量管理计划</li>\n<li>资源管理计划</li>\n<li>风险管理计划</li>\n<li>范围基准</li>\n<li>成本基准</li>\n<li>进度基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>成本估算</li>\n<li>持续时间估算</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>资源需求</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>协议</li>\n<li>采购文件</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>头脑风暴</li>\n<li>核对单</li>\n<li>访谈</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>根本原因分析</li>\n<li>假设条件</li>\n<li>制约因素分析</li>\n<li>SWOT分析</li>\n<li>文件分析</li>\n</ul>\n</li>\n<li>人机关及与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>提示清单</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>风险登记册（单个）</li>\n<li>风险报告（整体）</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三、实施定性风险分析（规划）\"><a href=\"#三、实施定性风险分析（规划）\" class=\"headerlink\" title=\"三、实施定性风险分析（规划）\"></a>三、实施定性风险分析（规划）</h4><blockquote>\n<p>通过评估单个项目风险发生的概率和影响以及特征，对风险进行优先级排序，从而为后续分析或行动提供基础的过程</p>\n<p>作用：重点关注高优先级的风险</p>\n<p>定性四步走：</p>\n<ol>\n<li>以主观方式评价风险发生的相对概率湖可能性，风险发生后对项目目标的影响</li>\n<li>根据上述分析结果评估风险的优先级</li>\n<li>考虑风险态度、评估风险紧迫性、识别风险责任人</li>\n<li>确定哪些风险进度实施定量风险分析过程</li>\n</ol>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>专家判断</p>\n</li>\n<li><p>数据收集</p>\n<ul>\n<li>访谈</li>\n</ul>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li><p>风险数据质量评估</p>\n<blockquote>\n<p>单个项目风险的数据的准确性和可靠性，消除主观偏见的影响</p>\n</blockquote>\n</li>\n<li><p>风险概率影响评估</p>\n<blockquote>\n<p>特定风险发生的可能性，影响评估考虑的是风险对一项或多项项目目标的潜在影响</p>\n</blockquote>\n</li>\n<li><p>其他风险参数评估</p>\n<blockquote>\n<p>在对单个项目风险进行优先级排序时，项目团队可能考虑（除概率和影响以外的）其他风险特征</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>人际关系与团队技能</p>\n<ul>\n<li>引导</li>\n</ul>\n</li>\n<li><p>风险分类</p>\n</li>\n<li><p>数据表现</p>\n<ul>\n<li>概率影响矩阵</li>\n<li>层级图</li>\n</ul>\n</li>\n<li><p>会议</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、实施定量风险分析（规划）\"><a href=\"#四、实施定量风险分析（规划）\" class=\"headerlink\" title=\"四、实施定量风险分析（规划）\"></a>四、实施定量风险分析（规划）</h4><blockquote>\n<p>已识别的单个项目风险和不确定性的其他来源对整体项目目标的影响进行定量分析过程（不是每个项目必须）</p>\n<p>作用：量化整体项目风险敞口，并提供额外的定量风险信息，以支持风险应对规划</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>估算依据</li>\n<li>成本估算</li>\n<li>成本预测</li>\n<li>持续时间估算</li>\n<li>理成本清单</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n<li>进度预测</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>访谈</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>不确定性表现方式</li>\n<li>数据分析<ul>\n<li>模拟</li>\n<li>敏感性分析</li>\n<li>决策树分析</li>\n<li>影响图</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>项目文件更新<ul>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"五、规划风险应对（规划）\"><a href=\"#五、规划风险应对（规划）\" class=\"headerlink\" title=\"五、规划风险应对（规划）\"></a>五、规划风险应对（规划）</h4><blockquote>\n<p>处理整体项目风险敞口，以及应对单个项目风险，而制定可选方案、选择应对策略并商定应对行动的过程</p>\n<p>作用：</p>\n<ul>\n<li>制定应对整体项目风险和单个项目风险的适当方法</li>\n<li>分配资源，并根据需要将相关活动添加进项目文件和项目管理计划</li>\n</ul>\n</blockquote>\n<p>风险应对措施：有效和适当的风险对应可以最小化单位畏怯，最大化单个机会，并降低整体项目风险敞口；不恰当的风险应对则会适得其反</p>\n<blockquote>\n<ul>\n<li>必须与风险重要性匹配</li>\n<li>能经济有效的应对挑战，选择最可能有效的策略和策略组合</li>\n<li>获得全体相关方同意</li>\n<li>有一名责任人具体负责</li>\n<li>PM还需应对项目整体风险</li>\n</ul>\n</blockquote>\n<p>残余风险：采取措施后仍然存在的风险，以及有意接收的风险（如：买车险）</p>\n<p>次生风险：执行应对风险措施导致新的风险，即如果不应对前一个风险便不会发生这个风险（如：买房要承担房价波动）</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>风险管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>项目团队派工单</li>\n<li>资源日历</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>访谈</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>引导</li>\n</ul>\n</li>\n<li>威胁应对策略</li>\n<li>机会应对策略</li>\n<li>应急应对策略</li>\n<li>整体项目风险应对策略</li>\n<li>数据分析<ul>\n<li>备选方案分析</li>\n<li>成本效益分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>多标准决策分析</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>进度管理计划</li>\n<li>成本管理计划</li>\n<li>质量管理计划</li>\n<li>资源管理计划</li>\n<li>采购管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>成本预测</li>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>项目团队派工单</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"六、实施风险应对（执行）\"><a href=\"#六、实施风险应对（执行）\" class=\"headerlink\" title=\"六、实施风险应对（执行）\"></a>六、实施风险应对（执行）</h4><blockquote>\n<p>执行商定的风险应对计划的过程</p>\n<p>作用：</p>\n<ul>\n<li>确保按计划执行商定风险应对措施</li>\n<li>来管理整体项目风险敞口</li>\n<li>最小化单个项目威胁</li>\n<li>最大化单个项目机会</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>人际关系与团队技能<ul>\n<li>影响力</li>\n</ul>\n</li>\n<li>项目管理信息系统</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>项目团队派工单</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"七、监督风险（监控）\"><a href=\"#七、监督风险（监控）\" class=\"headerlink\" title=\"七、监督风险（监控）\"></a>七、监督风险（监控）</h4><blockquote>\n<p>监督商定的风险应对计划的实施、跟踪已识别风险、识别和分析新风险，以及评估风险管理有效性的过程</p>\n<p>作用：</p>\n<ul>\n<li>使项目决策都基于关于整体项目风险敞口和单个项目风险的当前信息</li>\n<li>确保项目团队和关键相关方了解当前的风险敞口级别</li>\n<li>通过监督风险过程对项目工作尽享持续监督</li>\n<li>发现新出现、正在变化和已过时的单个项目风险</li>\n</ul>\n</blockquote>\n<p>监督风险的目的：</p>\n<blockquote>\n<p>采用项目执行期间生成的绩效信息，以确定：</p>\n<ul>\n<li>实施的风险应对是否有效</li>\n<li>整体项目风险级别是否已改变</li>\n<li>已识别单个项目风险的状态是否已改变</li>\n<li>是否出现新的单个项目风险</li>\n<li>风险管理方法是否依然适用</li>\n<li>项目假设条件是否仍然成立</li>\n<li>风险管理政策和程序是否已得到遵守</li>\n<li>成本或进度应急储备是否需要修改</li>\n<li>项目策略是否让然有效</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>工作绩效数据</li>\n<li>工作绩效报告</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>数据分析<ul>\n<li>技术绩效分析</li>\n<li>储备分析</li>\n</ul>\n</li>\n<li>审计</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>任何组件</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>风险报告</li>\n</ul>\n</li>\n<li>组织过程资产更新</li>\n</ol>\n<h2 id=\"采购-项目采购管理\"><a href=\"#采购-项目采购管理\" class=\"headerlink\" title=\"采购-项目采购管理\"></a>采购-项目采购管理</h2><blockquote>\n<p>从项目团队外部采购或获取所需产品、服务或成果的各个过程</p>\n<ul>\n<li>包括编制和管理协议所需的管理和控制过程，如：合同、订购单、协议备忘录，或服务书评</li>\n<li>被授权采购的人员：项目团队、管理层或组织采购部的成员</li>\n</ul>\n</blockquote>\n<h3 id=\"三个过程组-2\"><a href=\"#三个过程组-2\" class=\"headerlink\" title=\"三个过程组\"></a>三个过程组</h3><h4 id=\"一、规划采购管理（规划）\"><a href=\"#一、规划采购管理（规划）\" class=\"headerlink\" title=\"一、规划采购管理（规划）\"></a>一、规划采购管理（规划）</h4><blockquote>\n<p>记录项目的采购决策、明确采购方法、及识别潜在卖方的过程</p>\n<p>作用：确定是否需要外部支持，如果需要，则还要决定采购什么、如何采购、采购多少，以及何时采购</p>\n</blockquote>\n<p>合同类型比较：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">缩写</th>\n<th align=\"center\">特点</th>\n<th align=\"center\">风险（买方）</th>\n<th align=\"center\">使用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">固定总价</td>\n<td align=\"center\">FFP</td>\n<td align=\"center\">一口价：不容易改变范围</td>\n<td align=\"center\">买方最小</td>\n<td align=\"center\">产品外围很明确时</td>\n</tr>\n<tr>\n<td align=\"center\">总价加激励</td>\n<td align=\"center\">FPIF</td>\n<td align=\"center\">总价基础上加激励费用</td>\n<td align=\"center\">买方小，但比FFP大</td>\n<td align=\"center\">增加灵活性，激励买方</td>\n</tr>\n<tr>\n<td align=\"center\">总价加经济价格调整</td>\n<td align=\"center\">FPEPA</td>\n<td align=\"center\">允许条件变化，调整价格</td>\n<td align=\"center\">买方小，但比FPIF大</td>\n<td align=\"center\">履约时间长；买方支付货币不同于卖方</td>\n</tr>\n<tr>\n<td align=\"center\">工料合同</td>\n<td align=\"center\">T&amp;M</td>\n<td align=\"center\">单位时间固定价格，谈判快，不能快速确定范围</td>\n<td align=\"center\">双方均等</td>\n<td align=\"center\">范围不明确，缺乏项目管理能力</td>\n</tr>\n<tr>\n<td align=\"center\">成本价激励费</td>\n<td align=\"center\">CPIF</td>\n<td align=\"center\">奖励节约反对浪费</td>\n<td align=\"center\">买方大，卖方小</td>\n<td align=\"center\">范围不明确，有分摊比例的惩罚奖励条件</td>\n</tr>\n<tr>\n<td align=\"center\">成本价奖励费</td>\n<td align=\"center\">CPAF</td>\n<td align=\"center\">费用凭主观判断</td>\n<td align=\"center\">买方大，比CPIF大</td>\n<td align=\"center\">范围不明确，有买方主观的惩罚奖励条件</td>\n</tr>\n<tr>\n<td align=\"center\">成本价固定费</td>\n<td align=\"center\">CPFF</td>\n<td align=\"center\">费用是固定的额度</td>\n<td align=\"center\">买方大，比CPAF大</td>\n<td align=\"center\">范围不明确时</td>\n</tr>\n<tr>\n<td align=\"center\">成本加百分比</td>\n<td align=\"center\">CPPC</td>\n<td align=\"center\">花的多，给的多，买方参与多</td>\n<td align=\"center\">买方最大</td>\n<td align=\"center\">范围不明确，买方有较强的项目管理能力</td>\n</tr>\n</tbody></table>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>商业文件<ul>\n<li>商业论证效</li>\n<li>益管理计划</li>\n</ul>\n</li>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>质量管理计划</li>\n<li>资源管理计划</li>\n<li>范围基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>里程碑清单</li>\n<li>项目团队派工单</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>资源需求</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li><p>专家判断</p>\n</li>\n<li><p>数据收集</p>\n<ul>\n<li>市场调研</li>\n</ul>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>自制或外购分析</li>\n</ul>\n</li>\n<li><p>供方选择分析</p>\n</li>\n<li><p>会议</p>\n</li>\n<li><p>采购管理计划</p>\n</li>\n<li><p>自制或外购决策</p>\n</li>\n<li><p>采购策略</p>\n</li>\n<li><p>招标文件</p>\n</li>\n<li><p>采购工作说明书</p>\n</li>\n<li><p>供方选择标准</p>\n</li>\n<li><p>独立成本估计</p>\n</li>\n<li><p>变更请求</p>\n</li>\n<li><p>项目文件更新</p>\n<ul>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li><p>组织过程资产</p>\n</li>\n</ol>\n<h4 id=\"二、实施采购（执行）\"><a href=\"#二、实施采购（执行）\" class=\"headerlink\" title=\"二、实施采购（执行）\"></a>二、实施采购（执行）</h4><blockquote>\n<p>获取卖方应答、选择卖方并授权合同的过程</p>\n<p>作用：</p>\n<ul>\n<li>选定合格卖方并签署关于火舞或服务交付的法律协议</li>\n<li>本过程的最后成果就是签订协议、包括正式合同</li>\n</ul>\n</blockquote>\n<p>采购流程：资格预审》<strong>招标》投标》评标》授标》</strong>签协议</p>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>范围管理计划</li>\n<li>需求管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>配置管理计划</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>经验教训登记册</li>\n<li>项目进度计划</li>\n<li>需求文件</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>采购文件</li>\n<li>卖方建议书</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>广告投标人会议</li>\n<li>数据分析<ul>\n<li>建议书评价</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>谈判</li>\n</ul>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>选定的卖方</li>\n<li>协议</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>需求管理计划</li>\n<li>质量管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>范围基准</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>资源日历</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h4 id=\"三、控制采购（监督）\"><a href=\"#三、控制采购（监督）\" class=\"headerlink\" title=\"三、控制采购（监督）\"></a>三、控制采购（监督）</h4><blockquote>\n<p>管理采购关系，监督合同绩效，实施必要的变更和纠偏，以及关闭合同的过程</p>\n<p>作用：</p>\n<ul>\n<li>确保买卖双方履行法律协议，满足项目需求</li>\n<li>对大型项目，合同管理重点管理各个供应商之间的沟通</li>\n<li>有的组织把合同管理当做独立于项目的一种组织职能</li>\n<li>采购管理员可以是项目团队成员，但他通常向另一部门经理报告</li>\n<li>需要把适当的项目管理过程应用于合同关系，实施多个层面的整合</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li><p>项目管理计划</p>\n<ul>\n<li>需求管理计划</li>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>变更管理计划</li>\n<li>进度基准</li>\n</ul>\n</li>\n<li><p>项目文件</p>\n<ul>\n<li>假设日志</li>\n<li>经验教训登记册</li>\n<li>里程碑清单</li>\n<li>质量报告</li>\n<li>需求文件</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li><p>协议</p>\n</li>\n<li><p>采购文件</p>\n</li>\n<li><p>批准的变更请求</p>\n</li>\n<li><p>工作绩效数据</p>\n</li>\n<li><p>事业环境因素</p>\n</li>\n<li><p>组织过程资产</p>\n</li>\n<li><p>专家判断</p>\n</li>\n<li><p>索赔管理</p>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>绩效审查</li>\n<li>挣值分析</li>\n<li>趋势分析</li>\n</ul>\n</li>\n<li><p>检查</p>\n</li>\n<li><p>审计</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>结束的采购</li>\n<li>工作绩效信息</li>\n<li>采购文档更新</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>风险管理计划</li>\n<li>采购管理计划</li>\n<li>进度基准</li>\n<li>成本基准</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>经验教训登记册</li>\n<li>资源需求</li>\n<li>需求跟踪矩阵</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>组织过程资产</li>\n</ol>\n<h2 id=\"相关方-项目相关方管理\"><a href=\"#相关方-项目相关方管理\" class=\"headerlink\" title=\"相关方-项目相关方管理\"></a>相关方-项目相关方管理</h2><blockquote>\n<p>识别能够影响项目或会受项目影响的人员、团体或组织，分析相关方对项目的期望和影响，制定合适的管理策略来有效调动相关方参与项目决策和执行</p>\n<ul>\n<li>项目相关方管理过程分析相关方期望</li>\n<li>评估他们对项目或受项目影响程度</li>\n<li>制定策略来有效的引导相关方支持项目决策、规划和执行</li>\n<li>这些过程能够支持项目团队的工作</li>\n</ul>\n</blockquote>\n<p>相关方管理原则：项目经理和团队正确识别并合理引导所有相关方参与的能力，能觉得项目的成败</p>\n<blockquote>\n<ol>\n<li>需要反复识别出全部相关方（全部识别）</li>\n<li>根据相关方的利益和影响对其分类，项目经理应该专注于与项目成功密切相关的重要关系上（重点管理）</li>\n<li>相关方尽早参与项目工作，对项目至关重要，相关方的参与有助于其了解项目状况、从而支持项目（尽早参与）</li>\n<li>充分发挥相关方的作用来促进项目成功</li>\n<li>尽早面对消极相关方，如何面对积极相关方一样</li>\n</ol>\n</blockquote>\n<p>相关方管理关注满意度：满意度、期望、态度、利益冲突</p>\n<blockquote>\n<ul>\n<li>相关方满意度作为项目目标加以识别管理</li>\n<li>引导相关方参与的关键是重视与所有相关方保持持续沟通（包括团队成员）</li>\n<li>理解他们的需求和期望、处理所发生的问题、管理利益冲突</li>\n<li>促进相关方参与项目决策和活动</li>\n</ul>\n</blockquote>\n<p>相关方管理步骤：</p>\n<ol>\n<li>识别相关方</li>\n<li>相关方优先级排序</li>\n<li>管理相关方期望</li>\n<li>持续识别相关方</li>\n<li>收尾时获得关键相关方认可</li>\n</ol>\n<h3 id=\"四个-过程组\"><a href=\"#四个-过程组\" class=\"headerlink\" title=\"四个 过程组\"></a>四个 过程组</h3><h4 id=\"一、识别相关方（启动）\"><a href=\"#一、识别相关方（启动）\" class=\"headerlink\" title=\"一、识别相关方（启动）\"></a>一、识别相关方（启动）</h4><blockquote>\n<p>定期识别项目相关方，分析和记录他们的利益、参与度、相互依赖性、影响力和对项目成功的潜在影响过程</p>\n<p>作用：帮助项目经理经理对各个相关方或相关方群体的适度关注</p>\n</blockquote>\n<p>分类方法：</p>\n<ul>\n<li>权力：相关方的职权级别</li>\n<li>利益：对项目成果的关心程度</li>\n<li>影响：主动参与项目的程度</li>\n<li>作用：改变项目计划或执行的能力</li>\n</ul>\n<p>权力-利益方格：</p>\n<blockquote>\n<p>权力高-利益高：重点管理</p>\n<p>权力高-利益低：令其满意</p>\n<p>权力低-利益高：随时告知</p>\n<p>权力低-利益低：监督</p>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>商业文件<ul>\n<li>商业论证</li>\n<li>效益管理计划</li>\n</ul>\n</li>\n<li>项目管理计划<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>需求文件</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>头脑风暴</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>相关方分析</li>\n<li>文件分析</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>相关方映射分析&#x2F;表现</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>相关方登记册</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>需求管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>相关方参与管理计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>假设日志</li>\n<li>问题日志</li>\n<li>风险登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、规划相关方参与（规划）\"><a href=\"#二、规划相关方参与（规划）\" class=\"headerlink\" title=\"二、规划相关方参与（规划）\"></a>二、规划相关方参与（规划）</h4><blockquote>\n<p>根据相关方的需求、期望、利益和对项目的潜在影响，制定项目相关方参与项目的方法过程</p>\n<p>作用：提供相关方进行有效互动的可行计划</p>\n</blockquote>\n<p>相关方参与水平：</p>\n<ol>\n<li>不知晓：不知道项目及其潜在影响</li>\n<li>抵制：知晓项目和潜在影响，抵制变更</li>\n<li>中立：知晓项目，既不支持，也不反对</li>\n<li>支持：了解项目及其潜在影响，支持项目工作及其成果</li>\n<li>领导：知晓项目和潜在影响，积极参与确保项目取得成功</li>\n</ol>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目章程</li>\n<li>项目管理计划<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>假设日志</li>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>项目进度计划</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>协议</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>数据收集<ul>\n<li>标杆对照</li>\n</ul>\n</li>\n<li>数据分析<ul>\n<li>假设条件与制约因素分析</li>\n<li>根本原因分析</li>\n</ul>\n</li>\n<li>决策<ul>\n<li>排列优先级&#x2F;排名</li>\n</ul>\n</li>\n<li>数据表现<ul>\n<li>思维导图</li>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>相关方参与计划</li>\n</ol>\n<h4 id=\"三、管理相关方参与（执行）\"><a href=\"#三、管理相关方参与（执行）\" class=\"headerlink\" title=\"三、管理相关方参与（执行）\"></a>三、管理相关方参与（执行）</h4><blockquote>\n<p>与相关方进行沟通和协作以满足其需求与期望、处理问题，并促进相关方合理参与的过程</p>\n<p>作用：</p>\n<ul>\n<li>让项目经理能够提供相关方的支持，并尽可能降低相关方的地址</li>\n<li>确保相关方明确了解项目目的、目标、收益和风险，以及他们的贡献将如何促进项目成功</li>\n</ul>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li>项目管理计划<ul>\n<li>沟通管理计划</li>\n<li>风险管理计划</li>\n<li>相关方参与计划</li>\n<li>变更管理计划</li>\n</ul>\n</li>\n<li>项目文件<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li>事业环境因素</li>\n<li>组织过程资产</li>\n</ol>\n<p><strong>工具与技术：</strong></p>\n<ol>\n<li>专家判断</li>\n<li>沟通技巧<ul>\n<li>反馈</li>\n</ul>\n</li>\n<li>人际关系与团队技能<ul>\n<li>冲突管理</li>\n<li>文化意识</li>\n<li>谈判</li>\n<li>观察&#x2F;交谈</li>\n<li>政治意识</li>\n</ul>\n</li>\n<li>基本规则</li>\n<li>会议</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>变更日志</li>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"四、控制相关方参与（监督）\"><a href=\"#四、控制相关方参与（监督）\" class=\"headerlink\" title=\"四、控制相关方参与（监督）\"></a>四、控制相关方参与（监督）</h4><blockquote>\n<p>监督相关方关系，并通过修订参与策略和计划来引导相关方合理参与项目的过程</p>\n<p>作用：随着项目进展和环境变化，维持或提升相关方参与活动的效率和效果</p>\n<blockquote>\n<p>效率：确保相关方按照计划参与了应该参与的项目活动</p>\n<p>效果：相关方仅需要参加需要参与的项目活动</p>\n</blockquote>\n</blockquote>\n<p><strong>输入：</strong></p>\n<ol>\n<li><p>项目管理计划</p>\n<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li><p>项目文件</p>\n<ul>\n<li>问题日志</li>\n<li>经验校训登记册</li>\n<li>项目沟通记录</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n<li><p>工作绩效数据</p>\n</li>\n<li><p>事业环境因素</p>\n</li>\n<li><p>组织过程资产</p>\n</li>\n<li><p>数据分析</p>\n<ul>\n<li>备选方案分析</li>\n<li>根本原因分析</li>\n<li>相关方分析</li>\n</ul>\n</li>\n<li><p>决策</p>\n<ul>\n<li>多标准决策分析</li>\n<li>投票</li>\n</ul>\n</li>\n<li><p>数据表现</p>\n<ul>\n<li>相关方参与度评估矩阵</li>\n</ul>\n</li>\n<li><p>沟通技能</p>\n<ul>\n<li>反馈</li>\n<li>演示</li>\n</ul>\n</li>\n<li><p>人际关系与团队技能</p>\n<ul>\n<li>积极倾听</li>\n<li>文化意识</li>\n<li>领导力</li>\n<li>人际交往</li>\n<li>政治意识</li>\n</ul>\n</li>\n<li><p>会议</p>\n</li>\n</ol>\n<p><strong>输出：</strong></p>\n<ol>\n<li>工作绩效信息</li>\n<li>变更请求</li>\n<li>项目管理计划更新<ul>\n<li>资源管理计划</li>\n<li>沟通管理计划</li>\n<li>相关方参与计划</li>\n</ul>\n</li>\n<li>项目文件更新<ul>\n<li>问题日志</li>\n<li>经验教训登记册</li>\n<li>风险登记册</li>\n<li>相关方登记册</li>\n</ul>\n</li>\n</ol>\n"},{"title":"PMP概念","_content":"商业文件：商业论证和效益管理计划，可以找到关于项目目标以及项目对业务目标的贡献的相关信息\n\n> 商业论证：经批准的商业论证或类似文件是最常用语指定项目章程的商业文件\n>\n> 效益成本分析：是项目启动时考虑项目是否值得做的分析方法\n\n效益管理计划：\n\n> 项目效益管理计划描述了项目实现效益的方式和时间，以及应制定的效益衡量机制。项目效益指为发起组织和项目预期受益方创造价值的行动、行为、产品、服务或成果的结果。项目生命周期早期应确定目标效益，并据此制定效益管理计划。它描述了效益的关键要素，可能包括（但不限于）记录以下内容：\n>\n> - 目标效益（例如预计通过项目实施可以创造的有形价值和无形价值；财务价值体现为净现值）；\n> - 战略一致性（例如项目效益与组织业务战略的一致程度）；\n> - 实现效益的时限（例如阶段效益、短期效益、长期效益和持续效益）；\n> - 效益责任人（例如在计划确定的整个时限内负责监督、记录和报告已实现效益的负责人）；\n> - 测量指标（例如用于显示已实现效益的直接测量值和间接测量值）；\n> - 假设（例如预计存在或显而易见的因素）；\n> - 风险（例如实现效益的风险）。\n> - 制定效益管理计划需要使用商业论证和需求评估中的数据和信息，例如，成本效益分析数据。\n>\n> 在成本效益分析中已经把成本估算与项目拟实现的效益进行了比较。效益管理计划和项目管理计划描述了项目创造的商业价值如何能够成为组织持续运营的一部分，包括使用的测量指标。测量指标可核实商业价值并确认项目成功与否。\n\n\n\n\n\n回收期（PBT）： 投资额/现金流\n\n平均回报率（ROI）：年利润或年均利润/投资总额\n\n\n\n项目信息管理系统：收集整合和传播项目管理过程成果的工具和技术所组成的信息系统\n\n可交付成果：在某一过程、阶段或项目完成时，必须铲除的任何独特并可合适的产品、成果或服务能力\n\n\n\n+ 绩效数据：\n\n  > 今天干的什么事；我完成了3个工作，这是工作绩效数据。\n\n+ 绩效信息：\n\n  > 将干的事和计划干的事比较产生的信息；这个数据与计划比较，当前应该完成5个，只完成了3个，说明进度落后了，这是工作绩效信息。\n\n+ 绩效报告：\n\n  > 汇总各种信息报告；每周写汇总各种继续信息，写周报，这叫工作绩效报告\n\n\n\n## 项目管理计划\n\n> 说明项目将如何进行、监督和控制的一份文件。合并整合了其他各个规划过程所输出的所有子管理计划和基准\n>\n> 基准：是工作产品经过批准的版本，只有通过正式的变更控制程序才能对其进行变更，用作比较的依据\n>\n> > 作用：作为比较的基础，据此考核项目执行情况好坏\n> >\n> > 本质：是特殊版本的项目计划\n> >\n> > 批准：经高级管理和主要相关方批准\n\n+ 范围管理计划\n\n  > 描述定义、指定、监督、控制和确认范围\n  >\n  > 1. 指定项目范围说明书\n  > 2. 根据详细项目范围说明书创建WBS\n  > 3. 确定如何审批和维护范围基准\n  > 4. 正式验收已完成的项目可交付成果\n\n+ 需求管理计划（商业分析计划）\n\n  > 如何分析、记录和管理项目和产品需求\n  >\n  > 1. 如何规划、跟踪和报告各种需求活动\n  > 2. 配置管理活动\n  > 3. 需求优先级排序过程\n  > 4. 测量指标及使用这些指标的理由\n  > 5. 反应哪些需求属性将被列入跟踪矩阵的跟踪结构\n\n+ 进度管理计划\n\n  > 管理计划组成部分；编制、监督和控制项目进度简历准则和明确活动\n\n+ 成本管理计划\n\n  > 如何规划、安排和控制项目成本\n\n+ 质量管理计划\n\n  > 描述如何实施适用的政策、程序和指南以实现质量目标；描述了醒目管理团队为实现一系列项目质量目标所需的活动和资源；项目采用的质量标准\n\n+ 资源管理计划\n\n  > 如何分类、分配、管理和释放项目资源指南，为团队管理计划和实物资源管理计划\n\n+ 沟通管理计划\n\n  > 如何规划、结构化、执行与监督项目沟通，提高沟通的有效性\n  >\n  > 内容：\n  >\n  > - 相关方沟通需求\n  > - 需沟通的信息，语言、形式、内容和详细程度\n  > - 上报步骤（问题升级程序）\n  > - 发布信息的原因\n  > - 通用术语表\n  > - 发布所需信息、确认已收到，或作出回应（若适用）的时限和频率\n  > - 负责沟通相关信息的人员\n  > - 负责授权保密信息发布的人员\n  > - 接收信息的人员或群体，他们需要、需求和期望\n  > - 传递信息的方法或技术，如备忘录、电子邮件、新闻稿、或社交媒体\n  > - 为沟通活动分配的资源，时间和预算\n  > - 随着项目进展，项目不同阶段相关方的变化，而更新与优化沟通管理计划的方法\n  > - 项目信息流向图、工作流程（包含审批程序）、报告清单和会议计划等\n  > - 法律法规、技术、组织政策等制约因素\n\n+ 风险管理计划\n\n  > 如何安排与实施风险管理活动\n  >\n  > 内容：\n  >\n  > - 风险管理战略\n  > - 方法论\n  > - 角色职责\n  > - 资金\n  > - 时间安排\n  > - 风险类型\n  > - 风险结构\n  > - 相关方风险偏好\n  > - 概率和影响的定义\n  > - 概率影响矩阵\n  > - 报告格式\n  > - 跟踪\n\n+ 采购管理计划\n\n+ 相关方参与计划\n\n  > 用于促进相关方有效参与决策和执行的策略行动；调动个人或相关方参与的特定策略或方法\n\n+ 变更管理计划\n\n  > 描述在整个项目期间如何正视审批和采纳变更请求\n\n+ 配置管理计划\n\n  > 描述如何记录和更新项目的特定信息，以及该记录和更新哪些信息以保持产品、服务或成果的一致性和有效性\n\n+ 项目生命周期\n\n  > 描述项目从开始到结束所经历的一些列阶段\n\n+ 开发方法\n\n  > 描述产品、服务或成果的开发方法，例如：预测、迭代、敏捷或混合型模式\n\n+ 管理审查\n\n  > 确定项目经理和有关相关方审查项目进展的时间点，以考核绩效是否符合预期，或者确定是否有必要采取预防或纠正措施\n\n+ 绩效测量基准\n\n  > 经过整合的项目范围、进度和成本计划，用作项目执行的比较依据，以测量和管理项目绩效\n\n+ 范围基准\n\n  > 经过批准的范围说明书、WBS和响应的WBS词典，只有通过正式的变更控制程序才能进行变更，它被用作比较的基础\n\n  + 项目范围说明书\n\n    > 主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任\n\n  + WBS\n\n    > 控制账户===》规划包===》工作包\n\n  + WBS词典\n\n    > 针对每个WBS组件，详细描述可交付成果、活动和进度信息的文件；WBS词典对WBS提供支持\n    >\n    > 内容：\n    >\n    > > 账户编码标志号\n    > >\n    > > 工作描述\n    > >\n    > > 负责的组织\n    > >\n    > > 进度里程碑\n    > >\n    > > 相关的进度活动\n    > >\n    > > 所需的资源\n    > >\n    > > 成本估算\n    > >\n    > > 验收标准\n    > >\n    > > 技术参考文件\n    > >\n    > > 协议信息\n\n+ 进度基准\n\n  > 是经过批准的进度模型，只有通过正式的变更控制程序才能进行变更，用作与实际结果进行比较的依据\n  >\n  > 三种表现形式：\n  >\n  > > 横道图：概括性进度计划\n  > >\n  > > > 标明活动的开始于结束日期，显示出活动的预期持续时间；相对易读，常用语向管理层会报情况\n  > >\n  > > 里程碑图：里程碑进度计划\n  > >\n  > > > 仅标示出主要可交付成果和关键外部接口的计划开始或完成日期；可以和管理层和项目管理团队沟通，一般在项目早起只有里程碑图\n  > >\n  > > 项目进度网络图：详细进度计划\n  > >\n  > > > 显示项目的网络逻辑，又显示项目关键路径的进度活动。纯逻辑图+逻辑横道图+时标逻辑图\n\n+ 成本基准\n\n## 项目文件\n\n> 会影响项目管理工作，但又不属于项目管理计划的其他文件\n>\n> 项目管理计划主要是规划过程组的输出，而五大过程组的输出中都有项目文件\n>\n> 项目管理49个过程的输出除少数非文件类成果以及属于项目管理计划的内容外，都是项目文件的组成部分\n\n+ 活动属性\n\n  > 每项活动具有的多重属性，扩充对活动的描述；活动属性随时间演进，不断更新和补充\n\n+ 活动清单\n\n  > 包含项目所需的全部进度活动综合清单；每个活动的标识及工作范围详述，是项目团队成员知道需要完成什么样的工作；活动都有独特的名称\n\n+ 假设日志\n\n  > 记录整个项目生命周期中的所有假设条件和制约因素\n\n+ 估算依据\n\n  > 指出了持续时间、成本和资源估算是如何得出的，可用于计算变更时间。预算和资源的映像\n\n+ 变更日志\n\n  > 记录项目过程中出现的变更。与相关方的相关方沟通这些变更及其对项目时间、成本和风险影响\n\n+ 成本估算\n\n+ 成本预测\n\n+ 持续时间估算\n\n+ 问题日志\n\n  > 整个项目生命周期中，通过会遇到问题、差距、不一致或意外冲突，需要采取某些行动加以处理，确保他们得到调查和解决，以免影响项目绩效\n\n+ 经验教训登记册\n\n  > 记录项目中所获得知识的项目文件，用于当前项目，并列入经验教训知识库\n\n+ 里程碑清单\n\n  > 也是活动，不占时间和资源；列出所有项目里程碑；指明每个里程碑是强制还是选择性的\n\n+ 项目日志\n\n+ 项目沟通记录\n\n+ 项目进度计划\n\n  > 项目进度计划是进度模型的输出，展示活动之间的相互关联，以及计划日志、持续时间、里程碑和所需资源\n  >\n  > 三种表现形式：\n  >\n  > > 横道图：标明活动开始与结束日志，显示出活动预期持续时间；用于向管理层汇报情况\n  > >\n  > > 里程碑图：仅标示出只要可交付成果和关进外部接口的计划开始或完成日期；和管理层和项目管理团队沟通，一般项目早期只有里程碑图\n  > >\n  > > 项目进度网络图：显示项目网络逻辑，又显示项目关键路径上的进度活动；纯逻辑图+逻辑横道图+时标逻辑图\n\n+ 项目进度网络图\n\n  > 表明项目进度活动之间的逻辑依赖关系图\n\n+ 项目范围说明书\n\n  > 主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任\n  >\n  > 作用：表明相关方对项目范围达成共识，团队能开展更详细的规划，是评估变更或额外工作是否超出项目边界基准\n\n+ 项目团队派工单\n\n+ 质量控制测量结果\n\n+ 质量测量指标\n\n  > 专用于描述项目或产品属性，以及控制质量过程将如何验证符合程度。质量测量指标的例子包括按时完成的任务的百分比、以 CPI 测量的成本绩效、故障率、识别的日缺陷数量、每月总停机时间、每个代码行的错误、客户满意度分数，以及测试计划所涵盖的需求的百分比（即测试覆盖度）。\n\n+ 质量报告\n\n  > 可能是图形、数据或定性文件，其中包含的信息可帮助其他过程和部门采取纠正措施，以实现项目质量期望\n  >\n  > 包含：\n  >\n  > > 团队上报的质量管理问题\n  > >\n  > > 针对过程、项目和产品的改善建议\n  > >\n  > > 纠正措施建议（返工、缺陷/漏洞补救、100%检查等）\n  > >\n  > > 控制质量过程中发现的情况概述\n\n+ 需求文件\n\n  > 如何满足于项目相关的业务需求，只有明确的（可测量、可测试）、可跟踪、完整、互相协调，需要主要相关方愿意认可的需求，才能作为基准；格式可以多种多样。可以简单，可以详细\n\n+ 需求跟踪矩阵\n\n  > 把产品需求从其来源连接到能满足需求的可交付成功的一种表格；提供了在项目生命周期中跟踪需求的一种方法\n  >\n  > 有助于被批准的每项需求在项目结束时候都能交付和评估变更对项目的范围影响\n  >\n  > 为管理产品范围变更提供了框架\n\n+ 资源需求\n\n+ 风险登记册\n\n  > 记录已是被单个项目风险的详细信息\n  >\n  > 随着实施定性风险分析、规划风险应对、实施风险应对和监督风险等过程的开展，这些过程的结果也要记进风险登记册\n  >\n  > 1. 已识别风险的清单\n  > 2. 潜在风险责任人\n  > 3. 潜在风险应对措施清单\n\n+ 风险报告\n\n  > 整体项目风险的信息，提供了与变更请求有关的整体和单个项目风险的来源信息\n\n+ 进度数据\n\n  > 描述和控制进度计划的信息集合\n  >\n  > 进度计划所使用的进度数据至少包括进度里程碑、进度活动、活动属性，以及已知的全部假设条件与制约因素\n  >\n  > 可还包括：资源直方图、现金流预测，以及订购与交付进度安排\n  >\n  > 简单说就是规划进度过程中产生的有效数据\n\n+ 进度预算\n\n+ 相关方登记册\n\n  > 记录关于已识别相关方的信息\n  >\n  > - 身份信息。信命、组织指望、地点、联系方式，以及在项目中扮演的角色\n  > - 评估信息。主要需求、期望、影响项目成果的钱丽，以及相关方最能影响或冲击的项目生命周期阶段\n  > - 相关方分类。内部或外部，作永、影响、权力或利益，上级、下级、外围或横向，或者项目经理选择的其他分类模型，进行分类的结果\n\n+ 团队章程\n\n  > 为团队创建团队价值观、共识和工作指南的文件\n  >\n  > 作用：对可接受行为确定明确的期望，减少失误，提高生产力\n  >\n  > 讨论诸如行为规范、沟通决策、会议礼仪等领域，团队成员可以了解彼此重要的价值观\n\n+ 测试与评估文件\n\n  > 就是测试用例\n\n+ 资源分解结构\n\n  > 资源依据类别和类型的层级展现\n  >\n  > 类别：人力、材料哦、设备和用品\n  >\n  > 类型：包括技能水平、等级水平或适用于项目的其他类型\n  >\n  > 有助于结合资源使用情况，组织与报告项目的进度数据\n\n+ 资源日历\n\n  > 表明每种具体资源的可用工作日或工作班次的日历\n  >\n  > 规定了在项目期间特定的项目资源何时可用、可用多久\n  >\n  > 可以在活动或项目层面建立资源日历\n\n+ 物质资源分配单\n\n+ 项目日历\n\n  > 规定开展进度活动的工作日或班次和不开展进度活动的非工作日的日历\n  >\n  > 一般会规定节假日、周末和倒班时间\n  >\n  > 进度模型中，可能需要采用不止一个项目日历来编制项目进度计划，因为有些活动需要不同的工作时段\n\n## 变更请求\n\n> - 关于修改任何文档，可交付成果获基准的正式提议\n> - 引起相关文档、可交付成果获基准的修改，导致项目管理计划其他相关部分的更新\n> - 必须书面提出，任何相关方都可提出\n\n+ 纠正措施\n\n  > 为了是工作绩效重新与项目管理计划一致而做的活动（偏差已产生且不可接受）——不会改变基准\n  >\n  > 偏差已经产生且不可接受为使未来绩效与项目管理计划一致\n\n+ 预防措施\n\n  > 为了未来的工作绩效与项目管理计划一致而做的活动（偏差未产生，降低未来放生的概率）——不会改变基准\n  >\n  > 偏差未产生，将来可能发生为降低风险消极后果的发生概率 \n\n+ 缺陷补救\n\n  > 为了修正与一致产品或产品组件而进行的活动（项目成功出现质量缺陷）——改变基准\n  >\n  > 发现项目成果存在质量缺陷使交付成果的质量符合要求\n\n+ 更新\n\n  > 对正式受控的项目文件或计划等进行的变更，反应修改或增加的意见和内容。——改变基准\n  >\n  > 需要更新项目计划和文件改变计划以反映实际绩效\n\n## 人际关系与团队技能\n\n+ 积极倾听\n\n  > 减少误解并促进沟通和知识分享\n\n+ 引导\n\n  > 指引团队成功的打成决定、解决方案或结论。\n  >\n  > 1、跨职能、快速达成一致意见\n  >\n  > 2、集中讨论、群体互动\n  >\n  > 3、更早发现问题\n  >\n  > 4、形式多样灵活\n\n+ 领导力\n\n  > 帮助沟通愿景并鼓舞项目团队关注合适的知识和知识目标\n\n+ 人际交往\n\n  > 与相关方建立联系和关系，为知识创造分享的条件\n\n+ 政治意识\n\n  > 根据环境和组织的政治\n\n+ 名义小组技术\n\n  > 促进头脑风暴的一种技术，通过投票排列最有用的创意，进一步开展头脑风暴或有限排序。是一种结构化的头脑风暴形式\n  >\n  > 投票、排序、促进头脑风暴\n\n\n\n## 收集数据\n\n+ 头脑风暴\n\n  > 短时间内收集大量创意（不批评、不表扬）\n\n+ 焦点小组\n\n  > 召集预定的相关方和主题专家，了解他们对所讨论的产品、服务或成果的期望和态度\n  >\n  > 集中讨论、有主持人、互动比一对一更热烈\n\n+ 访谈\n\n  > 与相关方直接交谈，获取了解高层级需求、假设条件、制约因素、审批标准以及其他信息的方法。一对一形式获取机密信息\n\n+ 问卷调查\n\n  > 设计一些列书面的问题，想众多受访者快速收集信息\n  >\n  > 受众多、快速收集、地理位置分散、统计分析方法\n\n+ 标杆对照\n\n  > 将实际或计划的产品、过程和实践，与其他可比组织的实践镜像比较，识别最佳实践，行程改进意见，并对绩效考核提供依据\n\n## 数据表现\n\n+ 亲和图\n\n  > 头脑风暴、大量创意、归纳分类\n\n+ 思维导图\n\n  > 把从头脑风暴中获得的长衣整合成一张图，泳衣反应创意之间的共性与差异，激发新创意\n\n## 会议\n\n项目开工会（Kick-off）：在规划阶段结束和执行阶段开始，传达项目目标、获得团队对项目的承诺，阐明每个相关方的角色和职责（小项目一般在规划阶段结束时开，大项目一般在执行阶段开始时开）。**注意点：项目启动会只开一次，而项目开工会每个阶段都会举行一次**\n\n## 冲突管理\n\n- 撤退、回避\n\n  > 置之不理、暂时搁置，推迟问题===>>>问题没解决\n  >\n  > 从实际或潜在冲突中退出，将问题推迟到准备充分的时候，或者将问题推给其他人员解决。\n\n- 缓解、包容\n\n  > 单方退让，求同存异===>>>赢-输\n  >\n  > 强调一致而非差异；为维持和谐与关系而退让一步，考虑其他方的需要。\n\n- 妥协、调解\n\n  > 各让一步，一定程度满意===>>>输-输\n  >\n  > 为了暂时或部分解决冲突，寻找能让各方都在一定程度上满意的方案，但这种方法有时会导致“双输”局面。\n\n- 强迫、命令\n\n  > 强行解决===>>>输-赢\n  >\n  > 以牺牲其他方为代价，推行某一方的观点； 只提供赢 — 输方案。通常是利用权力来强行解决紧急问题，这种方法通常会导致“赢输”局面。\n\n- 合作、解决问题\n\n  > 面对，综合考虑不同观点===>>>赢=赢\n  >\n  > 综合考虑不同的观点和意见，采用合作的态度和开放式对话引导各方达成共识和承诺，这种方法可以带来双赢局面。\n\n## 相关方权力/利益方阵\n\n- 权力高，利益高：重点管理\n- 权力高，利益低：令其满意\n- 权力低，利益高：随时告知\n- 权力低，利益低：监督\n\n## 风险应对策略\n\n- 规避\n\n  > 对于威胁，我们常用的第一个应对策略叫做“规避”。它适用于发生概率较高，而且有严重负面影响的高优先级风险。使用这种策略，意味着项目团队要采取行动**消除威胁**，或者**保护项目不受到威胁的影响**。\n  >\n  > “规避”其实是**针对风险原因**的一种应对策略，如果我们能够找到造成风险事件的原因，那我们就能够去想办法避免它发生。\n  >\n  > 通常，”规避“策略可能会涉及到项目管理计划中某些内容的变更，或者改变会受负面影响的目标，以便于彻底消除威胁，把它的发生概率降为零。\n\n- 减轻\n\n  > 所谓“减轻”就是我们采取相应的措施，**降低威胁发生的概率或影响**。一般来说，提前采取减轻措施，比威胁发生后再尝试进行弥补更有效。\n  >\n  > 常见的减轻措施包括：采用比较简单的流程，进行更多次测试，或者采用更可靠的卖方等。\n  >\n  > 如果我们无法降低威胁发生的概率，也许可以从决定风险严重性的因素入手，来减轻风险发生的影响。比如，我们可以在一个系统中加入冗余部件，来减轻原始部件故障对系统的影响。\n\n- 转移\n\n  > 我们把应对风险的责任转移给第三方，**让第三方管理风险并承担风险发生的责任**。如果使用转移策略的话，通常我们需要向第三方机构支付风险转移的费用。\n  >\n  > 另外，风险转移可能需要通过一系列行动才能得以实现，这些行动可能会包括购买保险、使用担保书或保证书等，也可以通过签订协议，把具体风险的归属和风险转移给第三方。\n\n- 接受\n\n  > 承认项目存在威胁，但是我们不主动采取措施进行干预。一般来说，这种策略比较适合应对优先级比较低的威胁，或者是没有任何一种其他方法可以有效应对的威胁。\n  >\n  > “接受”的策略其实又可以分为**主动和被动**的两种。常见的主动接受策略就是，为项目建立应急储备，包括预留时间、资金或其他资源来应对出现的威胁；而被动接受策略就是，我们不主动采取行动，但是会定期对项目威胁进行审查，确保它们没有发生特别大的改变。\n\n- 上报\n\n## 问题解决流程\n\n1. 定义问题\n2. 分析问题\n3. 尽可能多的生成解决方案\n4. 选择方案\n5. 执行\n6. 验证\n\n## 机会应对策略\n\n- 开拓\n\n  > 当机会来临的时候，如果我们想要确保把握住这个机会的话，就可以采取**开拓**的策略。一般来说，使用开拓的策略，会把特定机会出现的概率提高到100%，确保这个机会肯定会出现，从而获得与这个机会相关的收益。\n  >\n  > 通常我们可以使用的开拓措施有很多，比如把组织中最有能力的资源分配给项目来缩短完工时间；通过技术升级或者采用全新的技术来节约项目成本并缩短项目持续时间。\n\n- 分享\n\n  > 当项目机会来临的时候，如果我们无法独自应对的话，就可以选择把应对机会的责任转移给第三方，当然，这个机会所带来的部分收益我们也会分享给第三方。我们可能会通过建立合伙关系、合作团队、特殊公司或合资企业等不同的方式把机会跟第三方共享。\n  >\n  > 在这个过程中需要注意的一点是，我们必须仔细的为已经分享的机会安排新的责任人，这个责任人一定是最有能力为项目抓住机会的人。\n  >\n  > 另外，如果采用风险分享策略的话，通常我们要向承担机会应对责任的一方支付风险费用。\n\n- 提高\n\n  > 主要是用来提高机会出现的概率和影响。\n  >\n  > 前面我们已经讲过，相对“威胁”来说，“机会”是好事，既然是好事，那我们就可以想办法提高它发生的概率，或者让它变得更好一点。一般来说，提前采取提高措施比机会出现后尝试改善收益更有效。\n  >\n  > 如果我们能够弄清楚机会出现的原因，那我们就能想办法提高机会出现的概率了；如果不能提高概率的话，那我们也许可以尝试分析有哪些因素会决定这个机会的收益有多大，然后再针对这些因素提高机会对项目的影响。\n\n- 接收\n\n- 上报\n\n## 数据分析\n\n> 先针对范围、进度、成本绩效进行**挣值分析**\n>\n> 再通过**偏差分析**得出目标绩效与实际绩效之间的差异\n>\n> 之后通过**根本性原因分析**识别问题的主要原因\n>\n> 最后在通过执行**纠正措施=》成本效益分析、预防措施=》趋势分析、纠正措施或预防措施=》备选方案分析**的组合\n\n+ 挣值分析：\n\n  > 将实际进度和成本绩效与绩效测量基准进行比较\n  >\n  > PV（Planned Value）：完成计划工作量的预算成本（成本基准，不含管理储备）\n  >\n  > AC（Actual Cost）：实际完成工作量的实际成本\n  >\n  > EC（Earned Cost）：实际完成工作量的预算成本\n  >\n  > BAC：项目总预算成本\n\n+ 偏差分析：\n\n  > 确定实际绩效与目标绩效之间差异程度及原因的技术\n  >\n  > CV（Cost Variance）：成本偏差，截止某时点已发生的成本偏差\n  >\n  > > 正直表示节约，负值表示超支；CV = EV - AC\n  >\n  > CPI（Cost Performance Index）：成本绩效指数；截止某时点每花1元钱做了价值多少的事\n  >\n  > > 大于1为好，小于1为不好；CPI = EV / AC\n  >\n  > SV（Schedule Variance）：进度偏差；截止某时点已发生的进度偏差\n  >\n  > > 正直表示提前，负值表示落后；SV = EV - PV\n  >\n  > SPI（Schedule  Performance Index）：进度绩效指数；截止某时点实际进度是计划进度的多少倍\n  >\n  > > 大于1为好，小于1为不好；SPI = EV / PV\n  >\n  > 完工尚需指数TCPI：（BAC - EV）/（BAC - AC）\n\n+ 趋势分析：\n\n  > 根据以往结果预测未来绩效；可以预测项目的进度延误，应尽早对项目时间影响趋势分析，再根据分析结构提出必要的预防措施；\n  >\n  > 在项目执行的不通时间点估算的，完成这个项目所需的成本，如果测试的EAC值在不可接受的范围内，就是预警信号\n  >\n  > > 完工偏差：VAC = BAC - EAC；VAC>=0成本节约；VAC<0成本超支，动用管理储备\n\n+ 文件分析：\n\n  > 通过现有文件分析出相关的信息。有助于总结经验教训和分享知识以改进未来项目和组织资产\n\n+ 回归分析：\n\n  > 项目结果的不通项目变量之间的相互关系，提高未来项目的绩效\n\n+ 备选方案分析\n\n  > 可用于评估实现项目过程中所述的需求和目标的各种方法，有助于团队权衡资源、成本和持续时间变量，以确定完成项目工作的最佳方式。\n  >\n  > 定义范围和估算活动资源都可用备选方案分析\n\n+ 储备分析\n\n  > 需考虑应急储备（有时称时间储备或缓冲时间），并将其纳入项目进度进化中，用来应对进度方面的不确定性。也可估算项目所需的管理储备。\n  >\n  > 应该在项目进度文件中清楚的列出应急储备\n  >\n  > 应急储备：\n  >\n  > > 包含在进度基准中一段持续时间，应对已经接受的已识别风险，以及已经制定应急湖减轻措施的已识别风险；\n  > >\n  > > 应对“已知-未知”风险；\n  > >\n  > > 随着项目信息越来越明确，可以动用、介绍或取消应急储备\n  >\n  > 管理储备：\n  >\n  > > 不包含在进度基准中，但属于项目总持续时间一部分。\n  > >\n  > > 为管理控制的目的而特别留出的项目时段，用来应对项目范围中不可预见的工作\n  > >\n  > > 应对“未知-未知”风险\n  > >\n  > > 动用管理储备会影响到进度基准的更新\n\n+ 产品分析\n\n  > 把高层级的产品表述，转变为有形的可交付成果\n  \n+ 假设情景分析\n\n  > 对各种情景进行评估；预测他们对项目目标的影响；考虑各种各样的情景；评估项目进度计划在不利条件下的可行性\n  >\n  > 模拟：基于多种不同活动假设【通常使用三点估算的概率分布】计算出多种可能的项目工期，以应对不确定性。\n  >\n  > 蒙特卡洛：评估定量和决策制定过程中的风险；首先确定每个活动的可能持续时间概率分布，然后根据此计算出整个项目的可能工期概率分布；可以计算实现特定目标的日期的可能性；\n\n+ 绩效评审\n\n  > 根据基准，测量、对比和分析绩效\n  \n+ 成本效益分析\n\n  > 基本原理：比较可能的成本与预期的效益，选择最优方案\n  >\n  > 主要作用：确定规划的质量活动是否有效利用的成本\n  >\n  > 效益表现：减少返工、提高生产率、减低成本、提升相关方满意度\n\n+ 质量成本\n\n  > 为达到要求而增加投入，还是承担不符合要求而造成的成本；是寻求短期成本降低，还是承担产品生命周期后期频繁出现问题的后果\n  >\n  > 一致性成本：预防发生的，例如研发时发生的成本\n  >\n  > 非一致性成本：破坏性测试（黑盒测试），例如生产时发生的成本\n\n+ 根本原因分析\n\n  > 确定引起偏差、缺陷或风险的根本原因\n  >\n  > 一项根本原因可能引起多想偏差、缺陷或风险\n  >\n  > 识别问题的根本原因并解决问题\n  >\n  > 消除所有根本原因可以杜绝问题再次发生\n  \n+ SWOT分析\n\n  > 从项目的每一个优势、劣势、机会和威胁出发，对项目尽早考察，把产生于（组织）内部的风险都包括在内，更全面考虑风险SWOT也用于考虑组织优势可抵消威胁、机会可克服劣势的程度\n  >\n  > - 识别项目“内部+外部”威胁和机会\n  > - 优势、劣势、机会、威胁\n  > - 先内部，后外部\n  > - 利用优势、抵消劣势，抓机会，回避风险\n\n+ 敏感性分析\n\n  > 有助于确定哪些单个风险或其他不确定性来源对项目结果具有最大的潜在影响\n\n+ 关键性分析\n\n  > 确定风险模型的哪些活动对项目关键路径的影响最大\n\n+ 决策树分析\n\n  > 在若干备选行动方案中选择一个最佳方案；量化风险工具\n\n+ 技术绩效分析\n\n  > 把项目执行期间取得的所有成果与取得相关技术成果的计划进行比较\n\n## 数据表现\n\n- 亲和图\n\n  > 将收集来的大量信息，进行归类\n\n- 因果图\n\n  > 用来分析根本性原因的，采取纠正措施，消除在控制图中所呈现的特殊偏差；与控制图联合使用。\n  >\n  > 别名：鱼骨图，石川图\n\n- 流程图\n\n  > 通过流程分析找问题原因或出处，通过工作流的逻辑分支及其相对频率，来估算质量成本。也可以用于识别风险过程，分析风险起因。考试中如果选择流程图，通常题干中会有“流程”、“程序”和“过程”等文字，可以判断是用来估算质量成本的。\n\n- 直方图\n\n  > 描述几种趋势分散程度和统计分许形状；发生次数统计\n\n- 矩阵图\n\n- 散点图\n\n  > 数据点越接近对角线，两个发量之间的关系就越密切\n  >\n  > 两个发量间的关系\n  >\n  > 别名：相关图（相关关系）\n  >\n  > 散点图经常用于问题的转化\n  \n- 控制图\n\n  > 用来确定一个过程是否稳定，或者是否具有可预测性\n  >\n  > 规格上下限、控制上下限\n  >\n  > 1点规则：某个数据点超出控制界限\n  >\n  > 7点规则：7个或7个以上连续的点落在均值同一侧\n  >\n  > 如果失控就必须对其调整\n\n## 分解结构\n\nWBS\n\n> 显示项目可交付成果的分解\n>\n> 有助于明确高层的职责\n>\n> 要素：控制账户、规划包、工作包\n\nOBS\n\n> 按照组织现有的部门、单元或团队排列\n>\n> 建立部门与项目活动或工作包的对应关系\n\nRBS\n\n> 按照资源类别和类型，对资源的层级列表\n>\n> 建立资源与工作包和活动的对应关系\n>\n> 可与组织的会计系统对接\n>\n> 可包含人力资源以外的其他各类资源\n\n\n\n## 活动4种逻辑关系\n\n结束-开始（FS）：上一个活动结束后，下个活动开始\n\n开始-开始（SS）：上一个活动开始，下个活动同时开始\n\n开始-结束（SF）：只有当下一个活动开始，上一个活动才能结束。（例：只有第二个保安A开始上岗，前一位保安B才能下岗）（最少用到）\n\n结束-结束（FF）：上一个活动结束，下个活动也同时结束\n\n## 活动估算\n\n> 估算依据：\n>\n> > 1、估算依据文件\n> >\n> > 2、全部假设条件的文件\n> >\n> > 3、各种已知制约因素\n> >\n> > 4、对估算区间说明（如 + - 10 %）\n> >\n> > 5、对最终估算的置信水平说明\n> >\n> > 6、有关影响估算单位项目风险的文件\n\n类比估算：以过去类似项目的参数值（如持续时间、预算、规模、重量和复杂性等）为基础，来估算未来项目的同类参数或指标\n\n> 用于项目早期阶段或信息不足时\n>\n> 综合利用历史信息和专家判断\n>\n> 优点：成本低，速度快\n>\n> 缺点：准确性差\n>\n> 可靠关键点：本质相似，不是表面相似；估算团队专业\n\n参数估算：利用历史数据之间的统计关系和其他变量，来进行项目工作进度、成本估算。参数估算的准确性取决于参数模型的成熟度和基础数据的可靠性。可与其他估算方联合使用\n\n三点估算：通过考虑估算中的不确定风险，可提高活动持续时间估算的准确性。\n\n> 最可能时间\n>\n> 最乐观时间\n>\n> 最悲观时间\n\n自下而上估算：（必要条件：项目的WBS清单）一种估算项目持续时间、资源和成本的方法，通过从下到逐层汇总WBS组成的部分估算而得到的项目估算。首先应对单个工作包或活动进行最具体、系统的估算。\n\n> 最准确可靠；前提是有详细的WBS；可用于估算活动时间、资源、成本三个过程\n\n## 资源优化\n\n资源平衡：为了资源需求与资源供给之间取得平衡，根据资源制约因素对开始日期和完成日期进行一种调整的技术\n\n> 资源只在特定时间可用，数量有限，或被过度分配时使用\n>\n> 保持资源使用量处于均衡水平时使用\n>\n> 资源平衡往往导致关键路径改变，可以用浮动时间来平衡资源需求\n>\n> 在项目进度计划期间，因为资源平衡，可能导致项目工期发生变化\n\n资源平滑：对进度模型中的活动进行调整，从而使用项目资源需求不超过预定的资源限制的一种技术\n\n> 不会改变项目关键路劲，完成日期也不会延迟\n>\n> 活动只在其自由和总浮动时间内延迟\n>\n> 可能无法实现所有资源的优化\n\n## 进度压缩\n\n赶工\n\n> 通过增加资源，以最小的成本增加来压缩进度工期\n>\n> 方法：批准加班、增加额外资源、支付加急费用\n>\n> 适用于通过增加资源就能缩短时间的，且位于关键路径上的活动\n>\n> 加快关键路径上的活动，会导致风险和/或增加成本；局部风险\n>\n> 需要分析成本和时间比例：选择单位时间成本最低的活动赶工\n\n快速跟进\n\n> 把顺序执行的活动并行执行\n>\n> 不直接增加成本\n>\n> 可能造成返工和风险的增加；全局风险\n\n\n\n**项目的定义：项目是为创造独特的产品、服务或成果而进行的临时性工作**\n\n项目管理的定义：将知识、技能、工具与技术用于项目活动，以满足项目的要求。\n\n三角制约：范围、成本、进度\n\n项目集：一组相互关联且被协调的项目、子项目和项目集，以便获得分别管理所无法获得的利益\n\n项目组合：为了实现组织战略目标而在一起管理的项目、项目集、子项目组合和运营工作（可仅限于共享雇主、供应商、技术或资源，包括运营的工作，没有依赖关系）\n\n项目组合管理：\n\t目的：有效分配资源，实现其对组织的最大贡献\n\n​\t重点：确定资源的分配的优先顺序，确保与组织战略协调一致\n\n项目生命周期：项目从开始到结束所经历的一些列阶段\n\n项目阶段：一组具有逻辑关系的项目活动集合，通常以一个或多个可交付成果的完成结果\n\n\n\n阶段关口：为做出进入下阶段、进行整改或结束项目集或项目的决定，而开展的阶段末审查\n\n项目管理过程：在创造最终结果的系统化的系列活动，以便对一个或多个输入进行加工，生成一个或多个输出\n\n项目管理过程组：项目管理出入、工具和技术以及输出的逻辑组合。项目管理过程组包括启动、规划、执行、监控和收尾。项目管理过程组不同于阶段。\n\n\n\n\n\n\n\n蒙特卡洛分析 模拟技术，特点是用概率统计作工具进行分析；计算出整个项目的可能工期概率分布。\n\n\n\nFS：结束-开始\n\nSS：开始-开始\n\nSF：开始-结束（最少使用）\n\nFF：结束-结束\n\n\n\n资源平衡：在资源需求与资源供给之间取的平衡\n\n资源平滑：对进度模型中的活动进行调整，是项目资源需求不超过预定的资源限制。\n\n\n\n\n\n\n\n\n\nPMP考试答题的几个注意点：\n\n1、所有的过程，如果问你下一步做什么。如果有关于沟通规划的，一定选沟通相关的\n2、如果有什么情景题要做什么，一定有3个步骤：分析环境、分析利益，分析自己\n3、如果有关于变更的措施，一定首选对管理计划影响最小的\n4、冲突的管理，看实际情况，如果情况紧急，决策最快的最好，就是强制或者解决问题；\n5、冲突的解决办法，一定要选择对各方利益损失最小的办法。\n6、注意几个关键词“总是、绝不、必须”或者是这类标志性的词语；他们通常是错误的答案\n7、注意“经常、有时、也许、通常、或许”这类代表特殊情况的词语。\n8、中英文翻译，正确的答案，可能语法是不正确的。\n9、注意题干中的“除了，不包括”\n10、项目经验要在PMBOOK之后考虑，有冲突，按照PMBOOK来答题。\n11、PMI的主张是只管自己责任范围bai的事情\n","source":"_posts/PMP/PMP概念.md","raw":"---\ntitle: PMP概念\ntags:\n - PMP\ncategories:\n - PMP\n---\n商业文件：商业论证和效益管理计划，可以找到关于项目目标以及项目对业务目标的贡献的相关信息\n\n> 商业论证：经批准的商业论证或类似文件是最常用语指定项目章程的商业文件\n>\n> 效益成本分析：是项目启动时考虑项目是否值得做的分析方法\n\n效益管理计划：\n\n> 项目效益管理计划描述了项目实现效益的方式和时间，以及应制定的效益衡量机制。项目效益指为发起组织和项目预期受益方创造价值的行动、行为、产品、服务或成果的结果。项目生命周期早期应确定目标效益，并据此制定效益管理计划。它描述了效益的关键要素，可能包括（但不限于）记录以下内容：\n>\n> - 目标效益（例如预计通过项目实施可以创造的有形价值和无形价值；财务价值体现为净现值）；\n> - 战略一致性（例如项目效益与组织业务战略的一致程度）；\n> - 实现效益的时限（例如阶段效益、短期效益、长期效益和持续效益）；\n> - 效益责任人（例如在计划确定的整个时限内负责监督、记录和报告已实现效益的负责人）；\n> - 测量指标（例如用于显示已实现效益的直接测量值和间接测量值）；\n> - 假设（例如预计存在或显而易见的因素）；\n> - 风险（例如实现效益的风险）。\n> - 制定效益管理计划需要使用商业论证和需求评估中的数据和信息，例如，成本效益分析数据。\n>\n> 在成本效益分析中已经把成本估算与项目拟实现的效益进行了比较。效益管理计划和项目管理计划描述了项目创造的商业价值如何能够成为组织持续运营的一部分，包括使用的测量指标。测量指标可核实商业价值并确认项目成功与否。\n\n\n\n\n\n回收期（PBT）： 投资额/现金流\n\n平均回报率（ROI）：年利润或年均利润/投资总额\n\n\n\n项目信息管理系统：收集整合和传播项目管理过程成果的工具和技术所组成的信息系统\n\n可交付成果：在某一过程、阶段或项目完成时，必须铲除的任何独特并可合适的产品、成果或服务能力\n\n\n\n+ 绩效数据：\n\n  > 今天干的什么事；我完成了3个工作，这是工作绩效数据。\n\n+ 绩效信息：\n\n  > 将干的事和计划干的事比较产生的信息；这个数据与计划比较，当前应该完成5个，只完成了3个，说明进度落后了，这是工作绩效信息。\n\n+ 绩效报告：\n\n  > 汇总各种信息报告；每周写汇总各种继续信息，写周报，这叫工作绩效报告\n\n\n\n## 项目管理计划\n\n> 说明项目将如何进行、监督和控制的一份文件。合并整合了其他各个规划过程所输出的所有子管理计划和基准\n>\n> 基准：是工作产品经过批准的版本，只有通过正式的变更控制程序才能对其进行变更，用作比较的依据\n>\n> > 作用：作为比较的基础，据此考核项目执行情况好坏\n> >\n> > 本质：是特殊版本的项目计划\n> >\n> > 批准：经高级管理和主要相关方批准\n\n+ 范围管理计划\n\n  > 描述定义、指定、监督、控制和确认范围\n  >\n  > 1. 指定项目范围说明书\n  > 2. 根据详细项目范围说明书创建WBS\n  > 3. 确定如何审批和维护范围基准\n  > 4. 正式验收已完成的项目可交付成果\n\n+ 需求管理计划（商业分析计划）\n\n  > 如何分析、记录和管理项目和产品需求\n  >\n  > 1. 如何规划、跟踪和报告各种需求活动\n  > 2. 配置管理活动\n  > 3. 需求优先级排序过程\n  > 4. 测量指标及使用这些指标的理由\n  > 5. 反应哪些需求属性将被列入跟踪矩阵的跟踪结构\n\n+ 进度管理计划\n\n  > 管理计划组成部分；编制、监督和控制项目进度简历准则和明确活动\n\n+ 成本管理计划\n\n  > 如何规划、安排和控制项目成本\n\n+ 质量管理计划\n\n  > 描述如何实施适用的政策、程序和指南以实现质量目标；描述了醒目管理团队为实现一系列项目质量目标所需的活动和资源；项目采用的质量标准\n\n+ 资源管理计划\n\n  > 如何分类、分配、管理和释放项目资源指南，为团队管理计划和实物资源管理计划\n\n+ 沟通管理计划\n\n  > 如何规划、结构化、执行与监督项目沟通，提高沟通的有效性\n  >\n  > 内容：\n  >\n  > - 相关方沟通需求\n  > - 需沟通的信息，语言、形式、内容和详细程度\n  > - 上报步骤（问题升级程序）\n  > - 发布信息的原因\n  > - 通用术语表\n  > - 发布所需信息、确认已收到，或作出回应（若适用）的时限和频率\n  > - 负责沟通相关信息的人员\n  > - 负责授权保密信息发布的人员\n  > - 接收信息的人员或群体，他们需要、需求和期望\n  > - 传递信息的方法或技术，如备忘录、电子邮件、新闻稿、或社交媒体\n  > - 为沟通活动分配的资源，时间和预算\n  > - 随着项目进展，项目不同阶段相关方的变化，而更新与优化沟通管理计划的方法\n  > - 项目信息流向图、工作流程（包含审批程序）、报告清单和会议计划等\n  > - 法律法规、技术、组织政策等制约因素\n\n+ 风险管理计划\n\n  > 如何安排与实施风险管理活动\n  >\n  > 内容：\n  >\n  > - 风险管理战略\n  > - 方法论\n  > - 角色职责\n  > - 资金\n  > - 时间安排\n  > - 风险类型\n  > - 风险结构\n  > - 相关方风险偏好\n  > - 概率和影响的定义\n  > - 概率影响矩阵\n  > - 报告格式\n  > - 跟踪\n\n+ 采购管理计划\n\n+ 相关方参与计划\n\n  > 用于促进相关方有效参与决策和执行的策略行动；调动个人或相关方参与的特定策略或方法\n\n+ 变更管理计划\n\n  > 描述在整个项目期间如何正视审批和采纳变更请求\n\n+ 配置管理计划\n\n  > 描述如何记录和更新项目的特定信息，以及该记录和更新哪些信息以保持产品、服务或成果的一致性和有效性\n\n+ 项目生命周期\n\n  > 描述项目从开始到结束所经历的一些列阶段\n\n+ 开发方法\n\n  > 描述产品、服务或成果的开发方法，例如：预测、迭代、敏捷或混合型模式\n\n+ 管理审查\n\n  > 确定项目经理和有关相关方审查项目进展的时间点，以考核绩效是否符合预期，或者确定是否有必要采取预防或纠正措施\n\n+ 绩效测量基准\n\n  > 经过整合的项目范围、进度和成本计划，用作项目执行的比较依据，以测量和管理项目绩效\n\n+ 范围基准\n\n  > 经过批准的范围说明书、WBS和响应的WBS词典，只有通过正式的变更控制程序才能进行变更，它被用作比较的基础\n\n  + 项目范围说明书\n\n    > 主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任\n\n  + WBS\n\n    > 控制账户===》规划包===》工作包\n\n  + WBS词典\n\n    > 针对每个WBS组件，详细描述可交付成果、活动和进度信息的文件；WBS词典对WBS提供支持\n    >\n    > 内容：\n    >\n    > > 账户编码标志号\n    > >\n    > > 工作描述\n    > >\n    > > 负责的组织\n    > >\n    > > 进度里程碑\n    > >\n    > > 相关的进度活动\n    > >\n    > > 所需的资源\n    > >\n    > > 成本估算\n    > >\n    > > 验收标准\n    > >\n    > > 技术参考文件\n    > >\n    > > 协议信息\n\n+ 进度基准\n\n  > 是经过批准的进度模型，只有通过正式的变更控制程序才能进行变更，用作与实际结果进行比较的依据\n  >\n  > 三种表现形式：\n  >\n  > > 横道图：概括性进度计划\n  > >\n  > > > 标明活动的开始于结束日期，显示出活动的预期持续时间；相对易读，常用语向管理层会报情况\n  > >\n  > > 里程碑图：里程碑进度计划\n  > >\n  > > > 仅标示出主要可交付成果和关键外部接口的计划开始或完成日期；可以和管理层和项目管理团队沟通，一般在项目早起只有里程碑图\n  > >\n  > > 项目进度网络图：详细进度计划\n  > >\n  > > > 显示项目的网络逻辑，又显示项目关键路径的进度活动。纯逻辑图+逻辑横道图+时标逻辑图\n\n+ 成本基准\n\n## 项目文件\n\n> 会影响项目管理工作，但又不属于项目管理计划的其他文件\n>\n> 项目管理计划主要是规划过程组的输出，而五大过程组的输出中都有项目文件\n>\n> 项目管理49个过程的输出除少数非文件类成果以及属于项目管理计划的内容外，都是项目文件的组成部分\n\n+ 活动属性\n\n  > 每项活动具有的多重属性，扩充对活动的描述；活动属性随时间演进，不断更新和补充\n\n+ 活动清单\n\n  > 包含项目所需的全部进度活动综合清单；每个活动的标识及工作范围详述，是项目团队成员知道需要完成什么样的工作；活动都有独特的名称\n\n+ 假设日志\n\n  > 记录整个项目生命周期中的所有假设条件和制约因素\n\n+ 估算依据\n\n  > 指出了持续时间、成本和资源估算是如何得出的，可用于计算变更时间。预算和资源的映像\n\n+ 变更日志\n\n  > 记录项目过程中出现的变更。与相关方的相关方沟通这些变更及其对项目时间、成本和风险影响\n\n+ 成本估算\n\n+ 成本预测\n\n+ 持续时间估算\n\n+ 问题日志\n\n  > 整个项目生命周期中，通过会遇到问题、差距、不一致或意外冲突，需要采取某些行动加以处理，确保他们得到调查和解决，以免影响项目绩效\n\n+ 经验教训登记册\n\n  > 记录项目中所获得知识的项目文件，用于当前项目，并列入经验教训知识库\n\n+ 里程碑清单\n\n  > 也是活动，不占时间和资源；列出所有项目里程碑；指明每个里程碑是强制还是选择性的\n\n+ 项目日志\n\n+ 项目沟通记录\n\n+ 项目进度计划\n\n  > 项目进度计划是进度模型的输出，展示活动之间的相互关联，以及计划日志、持续时间、里程碑和所需资源\n  >\n  > 三种表现形式：\n  >\n  > > 横道图：标明活动开始与结束日志，显示出活动预期持续时间；用于向管理层汇报情况\n  > >\n  > > 里程碑图：仅标示出只要可交付成果和关进外部接口的计划开始或完成日期；和管理层和项目管理团队沟通，一般项目早期只有里程碑图\n  > >\n  > > 项目进度网络图：显示项目网络逻辑，又显示项目关键路径上的进度活动；纯逻辑图+逻辑横道图+时标逻辑图\n\n+ 项目进度网络图\n\n  > 表明项目进度活动之间的逻辑依赖关系图\n\n+ 项目范围说明书\n\n  > 主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任\n  >\n  > 作用：表明相关方对项目范围达成共识，团队能开展更详细的规划，是评估变更或额外工作是否超出项目边界基准\n\n+ 项目团队派工单\n\n+ 质量控制测量结果\n\n+ 质量测量指标\n\n  > 专用于描述项目或产品属性，以及控制质量过程将如何验证符合程度。质量测量指标的例子包括按时完成的任务的百分比、以 CPI 测量的成本绩效、故障率、识别的日缺陷数量、每月总停机时间、每个代码行的错误、客户满意度分数，以及测试计划所涵盖的需求的百分比（即测试覆盖度）。\n\n+ 质量报告\n\n  > 可能是图形、数据或定性文件，其中包含的信息可帮助其他过程和部门采取纠正措施，以实现项目质量期望\n  >\n  > 包含：\n  >\n  > > 团队上报的质量管理问题\n  > >\n  > > 针对过程、项目和产品的改善建议\n  > >\n  > > 纠正措施建议（返工、缺陷/漏洞补救、100%检查等）\n  > >\n  > > 控制质量过程中发现的情况概述\n\n+ 需求文件\n\n  > 如何满足于项目相关的业务需求，只有明确的（可测量、可测试）、可跟踪、完整、互相协调，需要主要相关方愿意认可的需求，才能作为基准；格式可以多种多样。可以简单，可以详细\n\n+ 需求跟踪矩阵\n\n  > 把产品需求从其来源连接到能满足需求的可交付成功的一种表格；提供了在项目生命周期中跟踪需求的一种方法\n  >\n  > 有助于被批准的每项需求在项目结束时候都能交付和评估变更对项目的范围影响\n  >\n  > 为管理产品范围变更提供了框架\n\n+ 资源需求\n\n+ 风险登记册\n\n  > 记录已是被单个项目风险的详细信息\n  >\n  > 随着实施定性风险分析、规划风险应对、实施风险应对和监督风险等过程的开展，这些过程的结果也要记进风险登记册\n  >\n  > 1. 已识别风险的清单\n  > 2. 潜在风险责任人\n  > 3. 潜在风险应对措施清单\n\n+ 风险报告\n\n  > 整体项目风险的信息，提供了与变更请求有关的整体和单个项目风险的来源信息\n\n+ 进度数据\n\n  > 描述和控制进度计划的信息集合\n  >\n  > 进度计划所使用的进度数据至少包括进度里程碑、进度活动、活动属性，以及已知的全部假设条件与制约因素\n  >\n  > 可还包括：资源直方图、现金流预测，以及订购与交付进度安排\n  >\n  > 简单说就是规划进度过程中产生的有效数据\n\n+ 进度预算\n\n+ 相关方登记册\n\n  > 记录关于已识别相关方的信息\n  >\n  > - 身份信息。信命、组织指望、地点、联系方式，以及在项目中扮演的角色\n  > - 评估信息。主要需求、期望、影响项目成果的钱丽，以及相关方最能影响或冲击的项目生命周期阶段\n  > - 相关方分类。内部或外部，作永、影响、权力或利益，上级、下级、外围或横向，或者项目经理选择的其他分类模型，进行分类的结果\n\n+ 团队章程\n\n  > 为团队创建团队价值观、共识和工作指南的文件\n  >\n  > 作用：对可接受行为确定明确的期望，减少失误，提高生产力\n  >\n  > 讨论诸如行为规范、沟通决策、会议礼仪等领域，团队成员可以了解彼此重要的价值观\n\n+ 测试与评估文件\n\n  > 就是测试用例\n\n+ 资源分解结构\n\n  > 资源依据类别和类型的层级展现\n  >\n  > 类别：人力、材料哦、设备和用品\n  >\n  > 类型：包括技能水平、等级水平或适用于项目的其他类型\n  >\n  > 有助于结合资源使用情况，组织与报告项目的进度数据\n\n+ 资源日历\n\n  > 表明每种具体资源的可用工作日或工作班次的日历\n  >\n  > 规定了在项目期间特定的项目资源何时可用、可用多久\n  >\n  > 可以在活动或项目层面建立资源日历\n\n+ 物质资源分配单\n\n+ 项目日历\n\n  > 规定开展进度活动的工作日或班次和不开展进度活动的非工作日的日历\n  >\n  > 一般会规定节假日、周末和倒班时间\n  >\n  > 进度模型中，可能需要采用不止一个项目日历来编制项目进度计划，因为有些活动需要不同的工作时段\n\n## 变更请求\n\n> - 关于修改任何文档，可交付成果获基准的正式提议\n> - 引起相关文档、可交付成果获基准的修改，导致项目管理计划其他相关部分的更新\n> - 必须书面提出，任何相关方都可提出\n\n+ 纠正措施\n\n  > 为了是工作绩效重新与项目管理计划一致而做的活动（偏差已产生且不可接受）——不会改变基准\n  >\n  > 偏差已经产生且不可接受为使未来绩效与项目管理计划一致\n\n+ 预防措施\n\n  > 为了未来的工作绩效与项目管理计划一致而做的活动（偏差未产生，降低未来放生的概率）——不会改变基准\n  >\n  > 偏差未产生，将来可能发生为降低风险消极后果的发生概率 \n\n+ 缺陷补救\n\n  > 为了修正与一致产品或产品组件而进行的活动（项目成功出现质量缺陷）——改变基准\n  >\n  > 发现项目成果存在质量缺陷使交付成果的质量符合要求\n\n+ 更新\n\n  > 对正式受控的项目文件或计划等进行的变更，反应修改或增加的意见和内容。——改变基准\n  >\n  > 需要更新项目计划和文件改变计划以反映实际绩效\n\n## 人际关系与团队技能\n\n+ 积极倾听\n\n  > 减少误解并促进沟通和知识分享\n\n+ 引导\n\n  > 指引团队成功的打成决定、解决方案或结论。\n  >\n  > 1、跨职能、快速达成一致意见\n  >\n  > 2、集中讨论、群体互动\n  >\n  > 3、更早发现问题\n  >\n  > 4、形式多样灵活\n\n+ 领导力\n\n  > 帮助沟通愿景并鼓舞项目团队关注合适的知识和知识目标\n\n+ 人际交往\n\n  > 与相关方建立联系和关系，为知识创造分享的条件\n\n+ 政治意识\n\n  > 根据环境和组织的政治\n\n+ 名义小组技术\n\n  > 促进头脑风暴的一种技术，通过投票排列最有用的创意，进一步开展头脑风暴或有限排序。是一种结构化的头脑风暴形式\n  >\n  > 投票、排序、促进头脑风暴\n\n\n\n## 收集数据\n\n+ 头脑风暴\n\n  > 短时间内收集大量创意（不批评、不表扬）\n\n+ 焦点小组\n\n  > 召集预定的相关方和主题专家，了解他们对所讨论的产品、服务或成果的期望和态度\n  >\n  > 集中讨论、有主持人、互动比一对一更热烈\n\n+ 访谈\n\n  > 与相关方直接交谈，获取了解高层级需求、假设条件、制约因素、审批标准以及其他信息的方法。一对一形式获取机密信息\n\n+ 问卷调查\n\n  > 设计一些列书面的问题，想众多受访者快速收集信息\n  >\n  > 受众多、快速收集、地理位置分散、统计分析方法\n\n+ 标杆对照\n\n  > 将实际或计划的产品、过程和实践，与其他可比组织的实践镜像比较，识别最佳实践，行程改进意见，并对绩效考核提供依据\n\n## 数据表现\n\n+ 亲和图\n\n  > 头脑风暴、大量创意、归纳分类\n\n+ 思维导图\n\n  > 把从头脑风暴中获得的长衣整合成一张图，泳衣反应创意之间的共性与差异，激发新创意\n\n## 会议\n\n项目开工会（Kick-off）：在规划阶段结束和执行阶段开始，传达项目目标、获得团队对项目的承诺，阐明每个相关方的角色和职责（小项目一般在规划阶段结束时开，大项目一般在执行阶段开始时开）。**注意点：项目启动会只开一次，而项目开工会每个阶段都会举行一次**\n\n## 冲突管理\n\n- 撤退、回避\n\n  > 置之不理、暂时搁置，推迟问题===>>>问题没解决\n  >\n  > 从实际或潜在冲突中退出，将问题推迟到准备充分的时候，或者将问题推给其他人员解决。\n\n- 缓解、包容\n\n  > 单方退让，求同存异===>>>赢-输\n  >\n  > 强调一致而非差异；为维持和谐与关系而退让一步，考虑其他方的需要。\n\n- 妥协、调解\n\n  > 各让一步，一定程度满意===>>>输-输\n  >\n  > 为了暂时或部分解决冲突，寻找能让各方都在一定程度上满意的方案，但这种方法有时会导致“双输”局面。\n\n- 强迫、命令\n\n  > 强行解决===>>>输-赢\n  >\n  > 以牺牲其他方为代价，推行某一方的观点； 只提供赢 — 输方案。通常是利用权力来强行解决紧急问题，这种方法通常会导致“赢输”局面。\n\n- 合作、解决问题\n\n  > 面对，综合考虑不同观点===>>>赢=赢\n  >\n  > 综合考虑不同的观点和意见，采用合作的态度和开放式对话引导各方达成共识和承诺，这种方法可以带来双赢局面。\n\n## 相关方权力/利益方阵\n\n- 权力高，利益高：重点管理\n- 权力高，利益低：令其满意\n- 权力低，利益高：随时告知\n- 权力低，利益低：监督\n\n## 风险应对策略\n\n- 规避\n\n  > 对于威胁，我们常用的第一个应对策略叫做“规避”。它适用于发生概率较高，而且有严重负面影响的高优先级风险。使用这种策略，意味着项目团队要采取行动**消除威胁**，或者**保护项目不受到威胁的影响**。\n  >\n  > “规避”其实是**针对风险原因**的一种应对策略，如果我们能够找到造成风险事件的原因，那我们就能够去想办法避免它发生。\n  >\n  > 通常，”规避“策略可能会涉及到项目管理计划中某些内容的变更，或者改变会受负面影响的目标，以便于彻底消除威胁，把它的发生概率降为零。\n\n- 减轻\n\n  > 所谓“减轻”就是我们采取相应的措施，**降低威胁发生的概率或影响**。一般来说，提前采取减轻措施，比威胁发生后再尝试进行弥补更有效。\n  >\n  > 常见的减轻措施包括：采用比较简单的流程，进行更多次测试，或者采用更可靠的卖方等。\n  >\n  > 如果我们无法降低威胁发生的概率，也许可以从决定风险严重性的因素入手，来减轻风险发生的影响。比如，我们可以在一个系统中加入冗余部件，来减轻原始部件故障对系统的影响。\n\n- 转移\n\n  > 我们把应对风险的责任转移给第三方，**让第三方管理风险并承担风险发生的责任**。如果使用转移策略的话，通常我们需要向第三方机构支付风险转移的费用。\n  >\n  > 另外，风险转移可能需要通过一系列行动才能得以实现，这些行动可能会包括购买保险、使用担保书或保证书等，也可以通过签订协议，把具体风险的归属和风险转移给第三方。\n\n- 接受\n\n  > 承认项目存在威胁，但是我们不主动采取措施进行干预。一般来说，这种策略比较适合应对优先级比较低的威胁，或者是没有任何一种其他方法可以有效应对的威胁。\n  >\n  > “接受”的策略其实又可以分为**主动和被动**的两种。常见的主动接受策略就是，为项目建立应急储备，包括预留时间、资金或其他资源来应对出现的威胁；而被动接受策略就是，我们不主动采取行动，但是会定期对项目威胁进行审查，确保它们没有发生特别大的改变。\n\n- 上报\n\n## 问题解决流程\n\n1. 定义问题\n2. 分析问题\n3. 尽可能多的生成解决方案\n4. 选择方案\n5. 执行\n6. 验证\n\n## 机会应对策略\n\n- 开拓\n\n  > 当机会来临的时候，如果我们想要确保把握住这个机会的话，就可以采取**开拓**的策略。一般来说，使用开拓的策略，会把特定机会出现的概率提高到100%，确保这个机会肯定会出现，从而获得与这个机会相关的收益。\n  >\n  > 通常我们可以使用的开拓措施有很多，比如把组织中最有能力的资源分配给项目来缩短完工时间；通过技术升级或者采用全新的技术来节约项目成本并缩短项目持续时间。\n\n- 分享\n\n  > 当项目机会来临的时候，如果我们无法独自应对的话，就可以选择把应对机会的责任转移给第三方，当然，这个机会所带来的部分收益我们也会分享给第三方。我们可能会通过建立合伙关系、合作团队、特殊公司或合资企业等不同的方式把机会跟第三方共享。\n  >\n  > 在这个过程中需要注意的一点是，我们必须仔细的为已经分享的机会安排新的责任人，这个责任人一定是最有能力为项目抓住机会的人。\n  >\n  > 另外，如果采用风险分享策略的话，通常我们要向承担机会应对责任的一方支付风险费用。\n\n- 提高\n\n  > 主要是用来提高机会出现的概率和影响。\n  >\n  > 前面我们已经讲过，相对“威胁”来说，“机会”是好事，既然是好事，那我们就可以想办法提高它发生的概率，或者让它变得更好一点。一般来说，提前采取提高措施比机会出现后尝试改善收益更有效。\n  >\n  > 如果我们能够弄清楚机会出现的原因，那我们就能想办法提高机会出现的概率了；如果不能提高概率的话，那我们也许可以尝试分析有哪些因素会决定这个机会的收益有多大，然后再针对这些因素提高机会对项目的影响。\n\n- 接收\n\n- 上报\n\n## 数据分析\n\n> 先针对范围、进度、成本绩效进行**挣值分析**\n>\n> 再通过**偏差分析**得出目标绩效与实际绩效之间的差异\n>\n> 之后通过**根本性原因分析**识别问题的主要原因\n>\n> 最后在通过执行**纠正措施=》成本效益分析、预防措施=》趋势分析、纠正措施或预防措施=》备选方案分析**的组合\n\n+ 挣值分析：\n\n  > 将实际进度和成本绩效与绩效测量基准进行比较\n  >\n  > PV（Planned Value）：完成计划工作量的预算成本（成本基准，不含管理储备）\n  >\n  > AC（Actual Cost）：实际完成工作量的实际成本\n  >\n  > EC（Earned Cost）：实际完成工作量的预算成本\n  >\n  > BAC：项目总预算成本\n\n+ 偏差分析：\n\n  > 确定实际绩效与目标绩效之间差异程度及原因的技术\n  >\n  > CV（Cost Variance）：成本偏差，截止某时点已发生的成本偏差\n  >\n  > > 正直表示节约，负值表示超支；CV = EV - AC\n  >\n  > CPI（Cost Performance Index）：成本绩效指数；截止某时点每花1元钱做了价值多少的事\n  >\n  > > 大于1为好，小于1为不好；CPI = EV / AC\n  >\n  > SV（Schedule Variance）：进度偏差；截止某时点已发生的进度偏差\n  >\n  > > 正直表示提前，负值表示落后；SV = EV - PV\n  >\n  > SPI（Schedule  Performance Index）：进度绩效指数；截止某时点实际进度是计划进度的多少倍\n  >\n  > > 大于1为好，小于1为不好；SPI = EV / PV\n  >\n  > 完工尚需指数TCPI：（BAC - EV）/（BAC - AC）\n\n+ 趋势分析：\n\n  > 根据以往结果预测未来绩效；可以预测项目的进度延误，应尽早对项目时间影响趋势分析，再根据分析结构提出必要的预防措施；\n  >\n  > 在项目执行的不通时间点估算的，完成这个项目所需的成本，如果测试的EAC值在不可接受的范围内，就是预警信号\n  >\n  > > 完工偏差：VAC = BAC - EAC；VAC>=0成本节约；VAC<0成本超支，动用管理储备\n\n+ 文件分析：\n\n  > 通过现有文件分析出相关的信息。有助于总结经验教训和分享知识以改进未来项目和组织资产\n\n+ 回归分析：\n\n  > 项目结果的不通项目变量之间的相互关系，提高未来项目的绩效\n\n+ 备选方案分析\n\n  > 可用于评估实现项目过程中所述的需求和目标的各种方法，有助于团队权衡资源、成本和持续时间变量，以确定完成项目工作的最佳方式。\n  >\n  > 定义范围和估算活动资源都可用备选方案分析\n\n+ 储备分析\n\n  > 需考虑应急储备（有时称时间储备或缓冲时间），并将其纳入项目进度进化中，用来应对进度方面的不确定性。也可估算项目所需的管理储备。\n  >\n  > 应该在项目进度文件中清楚的列出应急储备\n  >\n  > 应急储备：\n  >\n  > > 包含在进度基准中一段持续时间，应对已经接受的已识别风险，以及已经制定应急湖减轻措施的已识别风险；\n  > >\n  > > 应对“已知-未知”风险；\n  > >\n  > > 随着项目信息越来越明确，可以动用、介绍或取消应急储备\n  >\n  > 管理储备：\n  >\n  > > 不包含在进度基准中，但属于项目总持续时间一部分。\n  > >\n  > > 为管理控制的目的而特别留出的项目时段，用来应对项目范围中不可预见的工作\n  > >\n  > > 应对“未知-未知”风险\n  > >\n  > > 动用管理储备会影响到进度基准的更新\n\n+ 产品分析\n\n  > 把高层级的产品表述，转变为有形的可交付成果\n  \n+ 假设情景分析\n\n  > 对各种情景进行评估；预测他们对项目目标的影响；考虑各种各样的情景；评估项目进度计划在不利条件下的可行性\n  >\n  > 模拟：基于多种不同活动假设【通常使用三点估算的概率分布】计算出多种可能的项目工期，以应对不确定性。\n  >\n  > 蒙特卡洛：评估定量和决策制定过程中的风险；首先确定每个活动的可能持续时间概率分布，然后根据此计算出整个项目的可能工期概率分布；可以计算实现特定目标的日期的可能性；\n\n+ 绩效评审\n\n  > 根据基准，测量、对比和分析绩效\n  \n+ 成本效益分析\n\n  > 基本原理：比较可能的成本与预期的效益，选择最优方案\n  >\n  > 主要作用：确定规划的质量活动是否有效利用的成本\n  >\n  > 效益表现：减少返工、提高生产率、减低成本、提升相关方满意度\n\n+ 质量成本\n\n  > 为达到要求而增加投入，还是承担不符合要求而造成的成本；是寻求短期成本降低，还是承担产品生命周期后期频繁出现问题的后果\n  >\n  > 一致性成本：预防发生的，例如研发时发生的成本\n  >\n  > 非一致性成本：破坏性测试（黑盒测试），例如生产时发生的成本\n\n+ 根本原因分析\n\n  > 确定引起偏差、缺陷或风险的根本原因\n  >\n  > 一项根本原因可能引起多想偏差、缺陷或风险\n  >\n  > 识别问题的根本原因并解决问题\n  >\n  > 消除所有根本原因可以杜绝问题再次发生\n  \n+ SWOT分析\n\n  > 从项目的每一个优势、劣势、机会和威胁出发，对项目尽早考察，把产生于（组织）内部的风险都包括在内，更全面考虑风险SWOT也用于考虑组织优势可抵消威胁、机会可克服劣势的程度\n  >\n  > - 识别项目“内部+外部”威胁和机会\n  > - 优势、劣势、机会、威胁\n  > - 先内部，后外部\n  > - 利用优势、抵消劣势，抓机会，回避风险\n\n+ 敏感性分析\n\n  > 有助于确定哪些单个风险或其他不确定性来源对项目结果具有最大的潜在影响\n\n+ 关键性分析\n\n  > 确定风险模型的哪些活动对项目关键路径的影响最大\n\n+ 决策树分析\n\n  > 在若干备选行动方案中选择一个最佳方案；量化风险工具\n\n+ 技术绩效分析\n\n  > 把项目执行期间取得的所有成果与取得相关技术成果的计划进行比较\n\n## 数据表现\n\n- 亲和图\n\n  > 将收集来的大量信息，进行归类\n\n- 因果图\n\n  > 用来分析根本性原因的，采取纠正措施，消除在控制图中所呈现的特殊偏差；与控制图联合使用。\n  >\n  > 别名：鱼骨图，石川图\n\n- 流程图\n\n  > 通过流程分析找问题原因或出处，通过工作流的逻辑分支及其相对频率，来估算质量成本。也可以用于识别风险过程，分析风险起因。考试中如果选择流程图，通常题干中会有“流程”、“程序”和“过程”等文字，可以判断是用来估算质量成本的。\n\n- 直方图\n\n  > 描述几种趋势分散程度和统计分许形状；发生次数统计\n\n- 矩阵图\n\n- 散点图\n\n  > 数据点越接近对角线，两个发量之间的关系就越密切\n  >\n  > 两个发量间的关系\n  >\n  > 别名：相关图（相关关系）\n  >\n  > 散点图经常用于问题的转化\n  \n- 控制图\n\n  > 用来确定一个过程是否稳定，或者是否具有可预测性\n  >\n  > 规格上下限、控制上下限\n  >\n  > 1点规则：某个数据点超出控制界限\n  >\n  > 7点规则：7个或7个以上连续的点落在均值同一侧\n  >\n  > 如果失控就必须对其调整\n\n## 分解结构\n\nWBS\n\n> 显示项目可交付成果的分解\n>\n> 有助于明确高层的职责\n>\n> 要素：控制账户、规划包、工作包\n\nOBS\n\n> 按照组织现有的部门、单元或团队排列\n>\n> 建立部门与项目活动或工作包的对应关系\n\nRBS\n\n> 按照资源类别和类型，对资源的层级列表\n>\n> 建立资源与工作包和活动的对应关系\n>\n> 可与组织的会计系统对接\n>\n> 可包含人力资源以外的其他各类资源\n\n\n\n## 活动4种逻辑关系\n\n结束-开始（FS）：上一个活动结束后，下个活动开始\n\n开始-开始（SS）：上一个活动开始，下个活动同时开始\n\n开始-结束（SF）：只有当下一个活动开始，上一个活动才能结束。（例：只有第二个保安A开始上岗，前一位保安B才能下岗）（最少用到）\n\n结束-结束（FF）：上一个活动结束，下个活动也同时结束\n\n## 活动估算\n\n> 估算依据：\n>\n> > 1、估算依据文件\n> >\n> > 2、全部假设条件的文件\n> >\n> > 3、各种已知制约因素\n> >\n> > 4、对估算区间说明（如 + - 10 %）\n> >\n> > 5、对最终估算的置信水平说明\n> >\n> > 6、有关影响估算单位项目风险的文件\n\n类比估算：以过去类似项目的参数值（如持续时间、预算、规模、重量和复杂性等）为基础，来估算未来项目的同类参数或指标\n\n> 用于项目早期阶段或信息不足时\n>\n> 综合利用历史信息和专家判断\n>\n> 优点：成本低，速度快\n>\n> 缺点：准确性差\n>\n> 可靠关键点：本质相似，不是表面相似；估算团队专业\n\n参数估算：利用历史数据之间的统计关系和其他变量，来进行项目工作进度、成本估算。参数估算的准确性取决于参数模型的成熟度和基础数据的可靠性。可与其他估算方联合使用\n\n三点估算：通过考虑估算中的不确定风险，可提高活动持续时间估算的准确性。\n\n> 最可能时间\n>\n> 最乐观时间\n>\n> 最悲观时间\n\n自下而上估算：（必要条件：项目的WBS清单）一种估算项目持续时间、资源和成本的方法，通过从下到逐层汇总WBS组成的部分估算而得到的项目估算。首先应对单个工作包或活动进行最具体、系统的估算。\n\n> 最准确可靠；前提是有详细的WBS；可用于估算活动时间、资源、成本三个过程\n\n## 资源优化\n\n资源平衡：为了资源需求与资源供给之间取得平衡，根据资源制约因素对开始日期和完成日期进行一种调整的技术\n\n> 资源只在特定时间可用，数量有限，或被过度分配时使用\n>\n> 保持资源使用量处于均衡水平时使用\n>\n> 资源平衡往往导致关键路径改变，可以用浮动时间来平衡资源需求\n>\n> 在项目进度计划期间，因为资源平衡，可能导致项目工期发生变化\n\n资源平滑：对进度模型中的活动进行调整，从而使用项目资源需求不超过预定的资源限制的一种技术\n\n> 不会改变项目关键路劲，完成日期也不会延迟\n>\n> 活动只在其自由和总浮动时间内延迟\n>\n> 可能无法实现所有资源的优化\n\n## 进度压缩\n\n赶工\n\n> 通过增加资源，以最小的成本增加来压缩进度工期\n>\n> 方法：批准加班、增加额外资源、支付加急费用\n>\n> 适用于通过增加资源就能缩短时间的，且位于关键路径上的活动\n>\n> 加快关键路径上的活动，会导致风险和/或增加成本；局部风险\n>\n> 需要分析成本和时间比例：选择单位时间成本最低的活动赶工\n\n快速跟进\n\n> 把顺序执行的活动并行执行\n>\n> 不直接增加成本\n>\n> 可能造成返工和风险的增加；全局风险\n\n\n\n**项目的定义：项目是为创造独特的产品、服务或成果而进行的临时性工作**\n\n项目管理的定义：将知识、技能、工具与技术用于项目活动，以满足项目的要求。\n\n三角制约：范围、成本、进度\n\n项目集：一组相互关联且被协调的项目、子项目和项目集，以便获得分别管理所无法获得的利益\n\n项目组合：为了实现组织战略目标而在一起管理的项目、项目集、子项目组合和运营工作（可仅限于共享雇主、供应商、技术或资源，包括运营的工作，没有依赖关系）\n\n项目组合管理：\n\t目的：有效分配资源，实现其对组织的最大贡献\n\n​\t重点：确定资源的分配的优先顺序，确保与组织战略协调一致\n\n项目生命周期：项目从开始到结束所经历的一些列阶段\n\n项目阶段：一组具有逻辑关系的项目活动集合，通常以一个或多个可交付成果的完成结果\n\n\n\n阶段关口：为做出进入下阶段、进行整改或结束项目集或项目的决定，而开展的阶段末审查\n\n项目管理过程：在创造最终结果的系统化的系列活动，以便对一个或多个输入进行加工，生成一个或多个输出\n\n项目管理过程组：项目管理出入、工具和技术以及输出的逻辑组合。项目管理过程组包括启动、规划、执行、监控和收尾。项目管理过程组不同于阶段。\n\n\n\n\n\n\n\n蒙特卡洛分析 模拟技术，特点是用概率统计作工具进行分析；计算出整个项目的可能工期概率分布。\n\n\n\nFS：结束-开始\n\nSS：开始-开始\n\nSF：开始-结束（最少使用）\n\nFF：结束-结束\n\n\n\n资源平衡：在资源需求与资源供给之间取的平衡\n\n资源平滑：对进度模型中的活动进行调整，是项目资源需求不超过预定的资源限制。\n\n\n\n\n\n\n\n\n\nPMP考试答题的几个注意点：\n\n1、所有的过程，如果问你下一步做什么。如果有关于沟通规划的，一定选沟通相关的\n2、如果有什么情景题要做什么，一定有3个步骤：分析环境、分析利益，分析自己\n3、如果有关于变更的措施，一定首选对管理计划影响最小的\n4、冲突的管理，看实际情况，如果情况紧急，决策最快的最好，就是强制或者解决问题；\n5、冲突的解决办法，一定要选择对各方利益损失最小的办法。\n6、注意几个关键词“总是、绝不、必须”或者是这类标志性的词语；他们通常是错误的答案\n7、注意“经常、有时、也许、通常、或许”这类代表特殊情况的词语。\n8、中英文翻译，正确的答案，可能语法是不正确的。\n9、注意题干中的“除了，不包括”\n10、项目经验要在PMBOOK之后考虑，有冲突，按照PMBOOK来答题。\n11、PMI的主张是只管自己责任范围bai的事情\n","slug":"PMP/PMP概念","published":1,"date":"2020-12-03T08:18:46.000Z","updated":"2022-11-26T17:08:26.124Z","_id":"clay6mz4s0001bu2b5siq4346","comments":1,"layout":"post","photos":[],"link":"","content":"<p>商业文件：商业论证和效益管理计划，可以找到关于项目目标以及项目对业务目标的贡献的相关信息</p>\n<blockquote>\n<p>商业论证：经批准的商业论证或类似文件是最常用语指定项目章程的商业文件</p>\n<p>效益成本分析：是项目启动时考虑项目是否值得做的分析方法</p>\n</blockquote>\n<p>效益管理计划：</p>\n<blockquote>\n<p>项目效益管理计划描述了项目实现效益的方式和时间，以及应制定的效益衡量机制。项目效益指为发起组织和项目预期受益方创造价值的行动、行为、产品、服务或成果的结果。项目生命周期早期应确定目标效益，并据此制定效益管理计划。它描述了效益的关键要素，可能包括（但不限于）记录以下内容：</p>\n<ul>\n<li>目标效益（例如预计通过项目实施可以创造的有形价值和无形价值；财务价值体现为净现值）；</li>\n<li>战略一致性（例如项目效益与组织业务战略的一致程度）；</li>\n<li>实现效益的时限（例如阶段效益、短期效益、长期效益和持续效益）；</li>\n<li>效益责任人（例如在计划确定的整个时限内负责监督、记录和报告已实现效益的负责人）；</li>\n<li>测量指标（例如用于显示已实现效益的直接测量值和间接测量值）；</li>\n<li>假设（例如预计存在或显而易见的因素）；</li>\n<li>风险（例如实现效益的风险）。</li>\n<li>制定效益管理计划需要使用商业论证和需求评估中的数据和信息，例如，成本效益分析数据。</li>\n</ul>\n<p>在成本效益分析中已经把成本估算与项目拟实现的效益进行了比较。效益管理计划和项目管理计划描述了项目创造的商业价值如何能够成为组织持续运营的一部分，包括使用的测量指标。测量指标可核实商业价值并确认项目成功与否。</p>\n</blockquote>\n<p>回收期（PBT）： 投资额&#x2F;现金流</p>\n<p>平均回报率（ROI）：年利润或年均利润&#x2F;投资总额</p>\n<p>项目信息管理系统：收集整合和传播项目管理过程成果的工具和技术所组成的信息系统</p>\n<p>可交付成果：在某一过程、阶段或项目完成时，必须铲除的任何独特并可合适的产品、成果或服务能力</p>\n<ul>\n<li><p>绩效数据：</p>\n<blockquote>\n<p>今天干的什么事；我完成了3个工作，这是工作绩效数据。</p>\n</blockquote>\n</li>\n<li><p>绩效信息：</p>\n<blockquote>\n<p>将干的事和计划干的事比较产生的信息；这个数据与计划比较，当前应该完成5个，只完成了3个，说明进度落后了，这是工作绩效信息。</p>\n</blockquote>\n</li>\n<li><p>绩效报告：</p>\n<blockquote>\n<p>汇总各种信息报告；每周写汇总各种继续信息，写周报，这叫工作绩效报告</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"项目管理计划\"><a href=\"#项目管理计划\" class=\"headerlink\" title=\"项目管理计划\"></a>项目管理计划</h2><blockquote>\n<p>说明项目将如何进行、监督和控制的一份文件。合并整合了其他各个规划过程所输出的所有子管理计划和基准</p>\n<p>基准：是工作产品经过批准的版本，只有通过正式的变更控制程序才能对其进行变更，用作比较的依据</p>\n<blockquote>\n<p>作用：作为比较的基础，据此考核项目执行情况好坏</p>\n<p>本质：是特殊版本的项目计划</p>\n<p>批准：经高级管理和主要相关方批准</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>范围管理计划</p>\n<blockquote>\n<p>描述定义、指定、监督、控制和确认范围</p>\n<ol>\n<li>指定项目范围说明书</li>\n<li>根据详细项目范围说明书创建WBS</li>\n<li>确定如何审批和维护范围基准</li>\n<li>正式验收已完成的项目可交付成果</li>\n</ol>\n</blockquote>\n</li>\n<li><p>需求管理计划（商业分析计划）</p>\n<blockquote>\n<p>如何分析、记录和管理项目和产品需求</p>\n<ol>\n<li>如何规划、跟踪和报告各种需求活动</li>\n<li>配置管理活动</li>\n<li>需求优先级排序过程</li>\n<li>测量指标及使用这些指标的理由</li>\n<li>反应哪些需求属性将被列入跟踪矩阵的跟踪结构</li>\n</ol>\n</blockquote>\n</li>\n<li><p>进度管理计划</p>\n<blockquote>\n<p>管理计划组成部分；编制、监督和控制项目进度简历准则和明确活动</p>\n</blockquote>\n</li>\n<li><p>成本管理计划</p>\n<blockquote>\n<p>如何规划、安排和控制项目成本</p>\n</blockquote>\n</li>\n<li><p>质量管理计划</p>\n<blockquote>\n<p>描述如何实施适用的政策、程序和指南以实现质量目标；描述了醒目管理团队为实现一系列项目质量目标所需的活动和资源；项目采用的质量标准</p>\n</blockquote>\n</li>\n<li><p>资源管理计划</p>\n<blockquote>\n<p>如何分类、分配、管理和释放项目资源指南，为团队管理计划和实物资源管理计划</p>\n</blockquote>\n</li>\n<li><p>沟通管理计划</p>\n<blockquote>\n<p>如何规划、结构化、执行与监督项目沟通，提高沟通的有效性</p>\n<p>内容：</p>\n<ul>\n<li>相关方沟通需求</li>\n<li>需沟通的信息，语言、形式、内容和详细程度</li>\n<li>上报步骤（问题升级程序）</li>\n<li>发布信息的原因</li>\n<li>通用术语表</li>\n<li>发布所需信息、确认已收到，或作出回应（若适用）的时限和频率</li>\n<li>负责沟通相关信息的人员</li>\n<li>负责授权保密信息发布的人员</li>\n<li>接收信息的人员或群体，他们需要、需求和期望</li>\n<li>传递信息的方法或技术，如备忘录、电子邮件、新闻稿、或社交媒体</li>\n<li>为沟通活动分配的资源，时间和预算</li>\n<li>随着项目进展，项目不同阶段相关方的变化，而更新与优化沟通管理计划的方法</li>\n<li>项目信息流向图、工作流程（包含审批程序）、报告清单和会议计划等</li>\n<li>法律法规、技术、组织政策等制约因素</li>\n</ul>\n</blockquote>\n</li>\n<li><p>风险管理计划</p>\n<blockquote>\n<p>如何安排与实施风险管理活动</p>\n<p>内容：</p>\n<ul>\n<li>风险管理战略</li>\n<li>方法论</li>\n<li>角色职责</li>\n<li>资金</li>\n<li>时间安排</li>\n<li>风险类型</li>\n<li>风险结构</li>\n<li>相关方风险偏好</li>\n<li>概率和影响的定义</li>\n<li>概率影响矩阵</li>\n<li>报告格式</li>\n<li>跟踪</li>\n</ul>\n</blockquote>\n</li>\n<li><p>采购管理计划</p>\n</li>\n<li><p>相关方参与计划</p>\n<blockquote>\n<p>用于促进相关方有效参与决策和执行的策略行动；调动个人或相关方参与的特定策略或方法</p>\n</blockquote>\n</li>\n<li><p>变更管理计划</p>\n<blockquote>\n<p>描述在整个项目期间如何正视审批和采纳变更请求</p>\n</blockquote>\n</li>\n<li><p>配置管理计划</p>\n<blockquote>\n<p>描述如何记录和更新项目的特定信息，以及该记录和更新哪些信息以保持产品、服务或成果的一致性和有效性</p>\n</blockquote>\n</li>\n<li><p>项目生命周期</p>\n<blockquote>\n<p>描述项目从开始到结束所经历的一些列阶段</p>\n</blockquote>\n</li>\n<li><p>开发方法</p>\n<blockquote>\n<p>描述产品、服务或成果的开发方法，例如：预测、迭代、敏捷或混合型模式</p>\n</blockquote>\n</li>\n<li><p>管理审查</p>\n<blockquote>\n<p>确定项目经理和有关相关方审查项目进展的时间点，以考核绩效是否符合预期，或者确定是否有必要采取预防或纠正措施</p>\n</blockquote>\n</li>\n<li><p>绩效测量基准</p>\n<blockquote>\n<p>经过整合的项目范围、进度和成本计划，用作项目执行的比较依据，以测量和管理项目绩效</p>\n</blockquote>\n</li>\n<li><p>范围基准</p>\n<blockquote>\n<p>经过批准的范围说明书、WBS和响应的WBS词典，只有通过正式的变更控制程序才能进行变更，它被用作比较的基础</p>\n</blockquote>\n<ul>\n<li><p>项目范围说明书</p>\n<blockquote>\n<p>主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任</p>\n</blockquote>\n</li>\n<li><p>WBS</p>\n<blockquote>\n<p>控制账户&#x3D;&#x3D;&#x3D;》规划包&#x3D;&#x3D;&#x3D;》工作包</p>\n</blockquote>\n</li>\n<li><p>WBS词典</p>\n<blockquote>\n<p>针对每个WBS组件，详细描述可交付成果、活动和进度信息的文件；WBS词典对WBS提供支持</p>\n<p>内容：</p>\n<blockquote>\n<p>账户编码标志号</p>\n<p>工作描述</p>\n<p>负责的组织</p>\n<p>进度里程碑</p>\n<p>相关的进度活动</p>\n<p>所需的资源</p>\n<p>成本估算</p>\n<p>验收标准</p>\n<p>技术参考文件</p>\n<p>协议信息</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>进度基准</p>\n<blockquote>\n<p>是经过批准的进度模型，只有通过正式的变更控制程序才能进行变更，用作与实际结果进行比较的依据</p>\n<p>三种表现形式：</p>\n<blockquote>\n<p>横道图：概括性进度计划</p>\n<blockquote>\n<p>标明活动的开始于结束日期，显示出活动的预期持续时间；相对易读，常用语向管理层会报情况</p>\n</blockquote>\n<p>里程碑图：里程碑进度计划</p>\n<blockquote>\n<p>仅标示出主要可交付成果和关键外部接口的计划开始或完成日期；可以和管理层和项目管理团队沟通，一般在项目早起只有里程碑图</p>\n</blockquote>\n<p>项目进度网络图：详细进度计划</p>\n<blockquote>\n<p>显示项目的网络逻辑，又显示项目关键路径的进度活动。纯逻辑图+逻辑横道图+时标逻辑图</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><p>成本基准</p>\n</li>\n</ul>\n<h2 id=\"项目文件\"><a href=\"#项目文件\" class=\"headerlink\" title=\"项目文件\"></a>项目文件</h2><blockquote>\n<p>会影响项目管理工作，但又不属于项目管理计划的其他文件</p>\n<p>项目管理计划主要是规划过程组的输出，而五大过程组的输出中都有项目文件</p>\n<p>项目管理49个过程的输出除少数非文件类成果以及属于项目管理计划的内容外，都是项目文件的组成部分</p>\n</blockquote>\n<ul>\n<li><p>活动属性</p>\n<blockquote>\n<p>每项活动具有的多重属性，扩充对活动的描述；活动属性随时间演进，不断更新和补充</p>\n</blockquote>\n</li>\n<li><p>活动清单</p>\n<blockquote>\n<p>包含项目所需的全部进度活动综合清单；每个活动的标识及工作范围详述，是项目团队成员知道需要完成什么样的工作；活动都有独特的名称</p>\n</blockquote>\n</li>\n<li><p>假设日志</p>\n<blockquote>\n<p>记录整个项目生命周期中的所有假设条件和制约因素</p>\n</blockquote>\n</li>\n<li><p>估算依据</p>\n<blockquote>\n<p>指出了持续时间、成本和资源估算是如何得出的，可用于计算变更时间。预算和资源的映像</p>\n</blockquote>\n</li>\n<li><p>变更日志</p>\n<blockquote>\n<p>记录项目过程中出现的变更。与相关方的相关方沟通这些变更及其对项目时间、成本和风险影响</p>\n</blockquote>\n</li>\n<li><p>成本估算</p>\n</li>\n<li><p>成本预测</p>\n</li>\n<li><p>持续时间估算</p>\n</li>\n<li><p>问题日志</p>\n<blockquote>\n<p>整个项目生命周期中，通过会遇到问题、差距、不一致或意外冲突，需要采取某些行动加以处理，确保他们得到调查和解决，以免影响项目绩效</p>\n</blockquote>\n</li>\n<li><p>经验教训登记册</p>\n<blockquote>\n<p>记录项目中所获得知识的项目文件，用于当前项目，并列入经验教训知识库</p>\n</blockquote>\n</li>\n<li><p>里程碑清单</p>\n<blockquote>\n<p>也是活动，不占时间和资源；列出所有项目里程碑；指明每个里程碑是强制还是选择性的</p>\n</blockquote>\n</li>\n<li><p>项目日志</p>\n</li>\n<li><p>项目沟通记录</p>\n</li>\n<li><p>项目进度计划</p>\n<blockquote>\n<p>项目进度计划是进度模型的输出，展示活动之间的相互关联，以及计划日志、持续时间、里程碑和所需资源</p>\n<p>三种表现形式：</p>\n<blockquote>\n<p>横道图：标明活动开始与结束日志，显示出活动预期持续时间；用于向管理层汇报情况</p>\n<p>里程碑图：仅标示出只要可交付成果和关进外部接口的计划开始或完成日期；和管理层和项目管理团队沟通，一般项目早期只有里程碑图</p>\n<p>项目进度网络图：显示项目网络逻辑，又显示项目关键路径上的进度活动；纯逻辑图+逻辑横道图+时标逻辑图</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>项目进度网络图</p>\n<blockquote>\n<p>表明项目进度活动之间的逻辑依赖关系图</p>\n</blockquote>\n</li>\n<li><p>项目范围说明书</p>\n<blockquote>\n<p>主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任</p>\n<p>作用：表明相关方对项目范围达成共识，团队能开展更详细的规划，是评估变更或额外工作是否超出项目边界基准</p>\n</blockquote>\n</li>\n<li><p>项目团队派工单</p>\n</li>\n<li><p>质量控制测量结果</p>\n</li>\n<li><p>质量测量指标</p>\n<blockquote>\n<p>专用于描述项目或产品属性，以及控制质量过程将如何验证符合程度。质量测量指标的例子包括按时完成的任务的百分比、以 CPI 测量的成本绩效、故障率、识别的日缺陷数量、每月总停机时间、每个代码行的错误、客户满意度分数，以及测试计划所涵盖的需求的百分比（即测试覆盖度）。</p>\n</blockquote>\n</li>\n<li><p>质量报告</p>\n<blockquote>\n<p>可能是图形、数据或定性文件，其中包含的信息可帮助其他过程和部门采取纠正措施，以实现项目质量期望</p>\n<p>包含：</p>\n<blockquote>\n<p>团队上报的质量管理问题</p>\n<p>针对过程、项目和产品的改善建议</p>\n<p>纠正措施建议（返工、缺陷&#x2F;漏洞补救、100%检查等）</p>\n<p>控制质量过程中发现的情况概述</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>需求文件</p>\n<blockquote>\n<p>如何满足于项目相关的业务需求，只有明确的（可测量、可测试）、可跟踪、完整、互相协调，需要主要相关方愿意认可的需求，才能作为基准；格式可以多种多样。可以简单，可以详细</p>\n</blockquote>\n</li>\n<li><p>需求跟踪矩阵</p>\n<blockquote>\n<p>把产品需求从其来源连接到能满足需求的可交付成功的一种表格；提供了在项目生命周期中跟踪需求的一种方法</p>\n<p>有助于被批准的每项需求在项目结束时候都能交付和评估变更对项目的范围影响</p>\n<p>为管理产品范围变更提供了框架</p>\n</blockquote>\n</li>\n<li><p>资源需求</p>\n</li>\n<li><p>风险登记册</p>\n<blockquote>\n<p>记录已是被单个项目风险的详细信息</p>\n<p>随着实施定性风险分析、规划风险应对、实施风险应对和监督风险等过程的开展，这些过程的结果也要记进风险登记册</p>\n<ol>\n<li>已识别风险的清单</li>\n<li>潜在风险责任人</li>\n<li>潜在风险应对措施清单</li>\n</ol>\n</blockquote>\n</li>\n<li><p>风险报告</p>\n<blockquote>\n<p>整体项目风险的信息，提供了与变更请求有关的整体和单个项目风险的来源信息</p>\n</blockquote>\n</li>\n<li><p>进度数据</p>\n<blockquote>\n<p>描述和控制进度计划的信息集合</p>\n<p>进度计划所使用的进度数据至少包括进度里程碑、进度活动、活动属性，以及已知的全部假设条件与制约因素</p>\n<p>可还包括：资源直方图、现金流预测，以及订购与交付进度安排</p>\n<p>简单说就是规划进度过程中产生的有效数据</p>\n</blockquote>\n</li>\n<li><p>进度预算</p>\n</li>\n<li><p>相关方登记册</p>\n<blockquote>\n<p>记录关于已识别相关方的信息</p>\n<ul>\n<li>身份信息。信命、组织指望、地点、联系方式，以及在项目中扮演的角色</li>\n<li>评估信息。主要需求、期望、影响项目成果的钱丽，以及相关方最能影响或冲击的项目生命周期阶段</li>\n<li>相关方分类。内部或外部，作永、影响、权力或利益，上级、下级、外围或横向，或者项目经理选择的其他分类模型，进行分类的结果</li>\n</ul>\n</blockquote>\n</li>\n<li><p>团队章程</p>\n<blockquote>\n<p>为团队创建团队价值观、共识和工作指南的文件</p>\n<p>作用：对可接受行为确定明确的期望，减少失误，提高生产力</p>\n<p>讨论诸如行为规范、沟通决策、会议礼仪等领域，团队成员可以了解彼此重要的价值观</p>\n</blockquote>\n</li>\n<li><p>测试与评估文件</p>\n<blockquote>\n<p>就是测试用例</p>\n</blockquote>\n</li>\n<li><p>资源分解结构</p>\n<blockquote>\n<p>资源依据类别和类型的层级展现</p>\n<p>类别：人力、材料哦、设备和用品</p>\n<p>类型：包括技能水平、等级水平或适用于项目的其他类型</p>\n<p>有助于结合资源使用情况，组织与报告项目的进度数据</p>\n</blockquote>\n</li>\n<li><p>资源日历</p>\n<blockquote>\n<p>表明每种具体资源的可用工作日或工作班次的日历</p>\n<p>规定了在项目期间特定的项目资源何时可用、可用多久</p>\n<p>可以在活动或项目层面建立资源日历</p>\n</blockquote>\n</li>\n<li><p>物质资源分配单</p>\n</li>\n<li><p>项目日历</p>\n<blockquote>\n<p>规定开展进度活动的工作日或班次和不开展进度活动的非工作日的日历</p>\n<p>一般会规定节假日、周末和倒班时间</p>\n<p>进度模型中，可能需要采用不止一个项目日历来编制项目进度计划，因为有些活动需要不同的工作时段</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"变更请求\"><a href=\"#变更请求\" class=\"headerlink\" title=\"变更请求\"></a>变更请求</h2><blockquote>\n<ul>\n<li>关于修改任何文档，可交付成果获基准的正式提议</li>\n<li>引起相关文档、可交付成果获基准的修改，导致项目管理计划其他相关部分的更新</li>\n<li>必须书面提出，任何相关方都可提出</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>纠正措施</p>\n<blockquote>\n<p>为了是工作绩效重新与项目管理计划一致而做的活动（偏差已产生且不可接受）——不会改变基准</p>\n<p>偏差已经产生且不可接受为使未来绩效与项目管理计划一致</p>\n</blockquote>\n</li>\n<li><p>预防措施</p>\n<blockquote>\n<p>为了未来的工作绩效与项目管理计划一致而做的活动（偏差未产生，降低未来放生的概率）——不会改变基准</p>\n<p>偏差未产生，将来可能发生为降低风险消极后果的发生概率 </p>\n</blockquote>\n</li>\n<li><p>缺陷补救</p>\n<blockquote>\n<p>为了修正与一致产品或产品组件而进行的活动（项目成功出现质量缺陷）——改变基准</p>\n<p>发现项目成果存在质量缺陷使交付成果的质量符合要求</p>\n</blockquote>\n</li>\n<li><p>更新</p>\n<blockquote>\n<p>对正式受控的项目文件或计划等进行的变更，反应修改或增加的意见和内容。——改变基准</p>\n<p>需要更新项目计划和文件改变计划以反映实际绩效</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"人际关系与团队技能\"><a href=\"#人际关系与团队技能\" class=\"headerlink\" title=\"人际关系与团队技能\"></a>人际关系与团队技能</h2><ul>\n<li><p>积极倾听</p>\n<blockquote>\n<p>减少误解并促进沟通和知识分享</p>\n</blockquote>\n</li>\n<li><p>引导</p>\n<blockquote>\n<p>指引团队成功的打成决定、解决方案或结论。</p>\n<p>1、跨职能、快速达成一致意见</p>\n<p>2、集中讨论、群体互动</p>\n<p>3、更早发现问题</p>\n<p>4、形式多样灵活</p>\n</blockquote>\n</li>\n<li><p>领导力</p>\n<blockquote>\n<p>帮助沟通愿景并鼓舞项目团队关注合适的知识和知识目标</p>\n</blockquote>\n</li>\n<li><p>人际交往</p>\n<blockquote>\n<p>与相关方建立联系和关系，为知识创造分享的条件</p>\n</blockquote>\n</li>\n<li><p>政治意识</p>\n<blockquote>\n<p>根据环境和组织的政治</p>\n</blockquote>\n</li>\n<li><p>名义小组技术</p>\n<blockquote>\n<p>促进头脑风暴的一种技术，通过投票排列最有用的创意，进一步开展头脑风暴或有限排序。是一种结构化的头脑风暴形式</p>\n<p>投票、排序、促进头脑风暴</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"收集数据\"><a href=\"#收集数据\" class=\"headerlink\" title=\"收集数据\"></a>收集数据</h2><ul>\n<li><p>头脑风暴</p>\n<blockquote>\n<p>短时间内收集大量创意（不批评、不表扬）</p>\n</blockquote>\n</li>\n<li><p>焦点小组</p>\n<blockquote>\n<p>召集预定的相关方和主题专家，了解他们对所讨论的产品、服务或成果的期望和态度</p>\n<p>集中讨论、有主持人、互动比一对一更热烈</p>\n</blockquote>\n</li>\n<li><p>访谈</p>\n<blockquote>\n<p>与相关方直接交谈，获取了解高层级需求、假设条件、制约因素、审批标准以及其他信息的方法。一对一形式获取机密信息</p>\n</blockquote>\n</li>\n<li><p>问卷调查</p>\n<blockquote>\n<p>设计一些列书面的问题，想众多受访者快速收集信息</p>\n<p>受众多、快速收集、地理位置分散、统计分析方法</p>\n</blockquote>\n</li>\n<li><p>标杆对照</p>\n<blockquote>\n<p>将实际或计划的产品、过程和实践，与其他可比组织的实践镜像比较，识别最佳实践，行程改进意见，并对绩效考核提供依据</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数据表现\"><a href=\"#数据表现\" class=\"headerlink\" title=\"数据表现\"></a>数据表现</h2><ul>\n<li><p>亲和图</p>\n<blockquote>\n<p>头脑风暴、大量创意、归纳分类</p>\n</blockquote>\n</li>\n<li><p>思维导图</p>\n<blockquote>\n<p>把从头脑风暴中获得的长衣整合成一张图，泳衣反应创意之间的共性与差异，激发新创意</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"会议\"><a href=\"#会议\" class=\"headerlink\" title=\"会议\"></a>会议</h2><p>项目开工会（Kick-off）：在规划阶段结束和执行阶段开始，传达项目目标、获得团队对项目的承诺，阐明每个相关方的角色和职责（小项目一般在规划阶段结束时开，大项目一般在执行阶段开始时开）。<strong>注意点：项目启动会只开一次，而项目开工会每个阶段都会举行一次</strong></p>\n<h2 id=\"冲突管理\"><a href=\"#冲突管理\" class=\"headerlink\" title=\"冲突管理\"></a>冲突管理</h2><ul>\n<li><p>撤退、回避</p>\n<blockquote>\n<p>置之不理、暂时搁置，推迟问题&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;问题没解决</p>\n<p>从实际或潜在冲突中退出，将问题推迟到准备充分的时候，或者将问题推给其他人员解决。</p>\n</blockquote>\n</li>\n<li><p>缓解、包容</p>\n<blockquote>\n<p>单方退让，求同存异&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;赢-输</p>\n<p>强调一致而非差异；为维持和谐与关系而退让一步，考虑其他方的需要。</p>\n</blockquote>\n</li>\n<li><p>妥协、调解</p>\n<blockquote>\n<p>各让一步，一定程度满意&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;输-输</p>\n<p>为了暂时或部分解决冲突，寻找能让各方都在一定程度上满意的方案，但这种方法有时会导致“双输”局面。</p>\n</blockquote>\n</li>\n<li><p>强迫、命令</p>\n<blockquote>\n<p>强行解决&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;输-赢</p>\n<p>以牺牲其他方为代价，推行某一方的观点； 只提供赢 — 输方案。通常是利用权力来强行解决紧急问题，这种方法通常会导致“赢输”局面。</p>\n</blockquote>\n</li>\n<li><p>合作、解决问题</p>\n<blockquote>\n<p>面对，综合考虑不同观点&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;赢&#x3D;赢</p>\n<p>综合考虑不同的观点和意见，采用合作的态度和开放式对话引导各方达成共识和承诺，这种方法可以带来双赢局面。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"相关方权力-x2F-利益方阵\"><a href=\"#相关方权力-x2F-利益方阵\" class=\"headerlink\" title=\"相关方权力&#x2F;利益方阵\"></a>相关方权力&#x2F;利益方阵</h2><ul>\n<li>权力高，利益高：重点管理</li>\n<li>权力高，利益低：令其满意</li>\n<li>权力低，利益高：随时告知</li>\n<li>权力低，利益低：监督</li>\n</ul>\n<h2 id=\"风险应对策略\"><a href=\"#风险应对策略\" class=\"headerlink\" title=\"风险应对策略\"></a>风险应对策略</h2><ul>\n<li><p>规避</p>\n<blockquote>\n<p>对于威胁，我们常用的第一个应对策略叫做“规避”。它适用于发生概率较高，而且有严重负面影响的高优先级风险。使用这种策略，意味着项目团队要采取行动<strong>消除威胁</strong>，或者<strong>保护项目不受到威胁的影响</strong>。</p>\n<p>“规避”其实是<strong>针对风险原因</strong>的一种应对策略，如果我们能够找到造成风险事件的原因，那我们就能够去想办法避免它发生。</p>\n<p>通常，”规避“策略可能会涉及到项目管理计划中某些内容的变更，或者改变会受负面影响的目标，以便于彻底消除威胁，把它的发生概率降为零。</p>\n</blockquote>\n</li>\n<li><p>减轻</p>\n<blockquote>\n<p>所谓“减轻”就是我们采取相应的措施，<strong>降低威胁发生的概率或影响</strong>。一般来说，提前采取减轻措施，比威胁发生后再尝试进行弥补更有效。</p>\n<p>常见的减轻措施包括：采用比较简单的流程，进行更多次测试，或者采用更可靠的卖方等。</p>\n<p>如果我们无法降低威胁发生的概率，也许可以从决定风险严重性的因素入手，来减轻风险发生的影响。比如，我们可以在一个系统中加入冗余部件，来减轻原始部件故障对系统的影响。</p>\n</blockquote>\n</li>\n<li><p>转移</p>\n<blockquote>\n<p>我们把应对风险的责任转移给第三方，<strong>让第三方管理风险并承担风险发生的责任</strong>。如果使用转移策略的话，通常我们需要向第三方机构支付风险转移的费用。</p>\n<p>另外，风险转移可能需要通过一系列行动才能得以实现，这些行动可能会包括购买保险、使用担保书或保证书等，也可以通过签订协议，把具体风险的归属和风险转移给第三方。</p>\n</blockquote>\n</li>\n<li><p>接受</p>\n<blockquote>\n<p>承认项目存在威胁，但是我们不主动采取措施进行干预。一般来说，这种策略比较适合应对优先级比较低的威胁，或者是没有任何一种其他方法可以有效应对的威胁。</p>\n<p>“接受”的策略其实又可以分为<strong>主动和被动</strong>的两种。常见的主动接受策略就是，为项目建立应急储备，包括预留时间、资金或其他资源来应对出现的威胁；而被动接受策略就是，我们不主动采取行动，但是会定期对项目威胁进行审查，确保它们没有发生特别大的改变。</p>\n</blockquote>\n</li>\n<li><p>上报</p>\n</li>\n</ul>\n<h2 id=\"问题解决流程\"><a href=\"#问题解决流程\" class=\"headerlink\" title=\"问题解决流程\"></a>问题解决流程</h2><ol>\n<li>定义问题</li>\n<li>分析问题</li>\n<li>尽可能多的生成解决方案</li>\n<li>选择方案</li>\n<li>执行</li>\n<li>验证</li>\n</ol>\n<h2 id=\"机会应对策略\"><a href=\"#机会应对策略\" class=\"headerlink\" title=\"机会应对策略\"></a>机会应对策略</h2><ul>\n<li><p>开拓</p>\n<blockquote>\n<p>当机会来临的时候，如果我们想要确保把握住这个机会的话，就可以采取<strong>开拓</strong>的策略。一般来说，使用开拓的策略，会把特定机会出现的概率提高到100%，确保这个机会肯定会出现，从而获得与这个机会相关的收益。</p>\n<p>通常我们可以使用的开拓措施有很多，比如把组织中最有能力的资源分配给项目来缩短完工时间；通过技术升级或者采用全新的技术来节约项目成本并缩短项目持续时间。</p>\n</blockquote>\n</li>\n<li><p>分享</p>\n<blockquote>\n<p>当项目机会来临的时候，如果我们无法独自应对的话，就可以选择把应对机会的责任转移给第三方，当然，这个机会所带来的部分收益我们也会分享给第三方。我们可能会通过建立合伙关系、合作团队、特殊公司或合资企业等不同的方式把机会跟第三方共享。</p>\n<p>在这个过程中需要注意的一点是，我们必须仔细的为已经分享的机会安排新的责任人，这个责任人一定是最有能力为项目抓住机会的人。</p>\n<p>另外，如果采用风险分享策略的话，通常我们要向承担机会应对责任的一方支付风险费用。</p>\n</blockquote>\n</li>\n<li><p>提高</p>\n<blockquote>\n<p>主要是用来提高机会出现的概率和影响。</p>\n<p>前面我们已经讲过，相对“威胁”来说，“机会”是好事，既然是好事，那我们就可以想办法提高它发生的概率，或者让它变得更好一点。一般来说，提前采取提高措施比机会出现后尝试改善收益更有效。</p>\n<p>如果我们能够弄清楚机会出现的原因，那我们就能想办法提高机会出现的概率了；如果不能提高概率的话，那我们也许可以尝试分析有哪些因素会决定这个机会的收益有多大，然后再针对这些因素提高机会对项目的影响。</p>\n</blockquote>\n</li>\n<li><p>接收</p>\n</li>\n<li><p>上报</p>\n</li>\n</ul>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2><blockquote>\n<p>先针对范围、进度、成本绩效进行<strong>挣值分析</strong></p>\n<p>再通过<strong>偏差分析</strong>得出目标绩效与实际绩效之间的差异</p>\n<p>之后通过<strong>根本性原因分析</strong>识别问题的主要原因</p>\n<p>最后在通过执行<strong>纠正措施&#x3D;》成本效益分析、预防措施&#x3D;》趋势分析、纠正措施或预防措施&#x3D;》备选方案分析</strong>的组合</p>\n</blockquote>\n<ul>\n<li><p>挣值分析：</p>\n<blockquote>\n<p>将实际进度和成本绩效与绩效测量基准进行比较</p>\n<p>PV（Planned Value）：完成计划工作量的预算成本（成本基准，不含管理储备）</p>\n<p>AC（Actual Cost）：实际完成工作量的实际成本</p>\n<p>EC（Earned Cost）：实际完成工作量的预算成本</p>\n<p>BAC：项目总预算成本</p>\n</blockquote>\n</li>\n<li><p>偏差分析：</p>\n<blockquote>\n<p>确定实际绩效与目标绩效之间差异程度及原因的技术</p>\n<p>CV（Cost Variance）：成本偏差，截止某时点已发生的成本偏差</p>\n<blockquote>\n<p>正直表示节约，负值表示超支；CV &#x3D; EV - AC</p>\n</blockquote>\n<p>CPI（Cost Performance Index）：成本绩效指数；截止某时点每花1元钱做了价值多少的事</p>\n<blockquote>\n<p>大于1为好，小于1为不好；CPI &#x3D; EV &#x2F; AC</p>\n</blockquote>\n<p>SV（Schedule Variance）：进度偏差；截止某时点已发生的进度偏差</p>\n<blockquote>\n<p>正直表示提前，负值表示落后；SV &#x3D; EV - PV</p>\n</blockquote>\n<p>SPI（Schedule  Performance Index）：进度绩效指数；截止某时点实际进度是计划进度的多少倍</p>\n<blockquote>\n<p>大于1为好，小于1为不好；SPI &#x3D; EV &#x2F; PV</p>\n</blockquote>\n<p>完工尚需指数TCPI：（BAC - EV）&#x2F;（BAC - AC）</p>\n</blockquote>\n</li>\n<li><p>趋势分析：</p>\n<blockquote>\n<p>根据以往结果预测未来绩效；可以预测项目的进度延误，应尽早对项目时间影响趋势分析，再根据分析结构提出必要的预防措施；</p>\n<p>在项目执行的不通时间点估算的，完成这个项目所需的成本，如果测试的EAC值在不可接受的范围内，就是预警信号</p>\n<blockquote>\n<p>完工偏差：VAC &#x3D; BAC - EAC；VAC&gt;&#x3D;0成本节约；VAC&lt;0成本超支，动用管理储备</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>文件分析：</p>\n<blockquote>\n<p>通过现有文件分析出相关的信息。有助于总结经验教训和分享知识以改进未来项目和组织资产</p>\n</blockquote>\n</li>\n<li><p>回归分析：</p>\n<blockquote>\n<p>项目结果的不通项目变量之间的相互关系，提高未来项目的绩效</p>\n</blockquote>\n</li>\n<li><p>备选方案分析</p>\n<blockquote>\n<p>可用于评估实现项目过程中所述的需求和目标的各种方法，有助于团队权衡资源、成本和持续时间变量，以确定完成项目工作的最佳方式。</p>\n<p>定义范围和估算活动资源都可用备选方案分析</p>\n</blockquote>\n</li>\n<li><p>储备分析</p>\n<blockquote>\n<p>需考虑应急储备（有时称时间储备或缓冲时间），并将其纳入项目进度进化中，用来应对进度方面的不确定性。也可估算项目所需的管理储备。</p>\n<p>应该在项目进度文件中清楚的列出应急储备</p>\n<p>应急储备：</p>\n<blockquote>\n<p>包含在进度基准中一段持续时间，应对已经接受的已识别风险，以及已经制定应急湖减轻措施的已识别风险；</p>\n<p>应对“已知-未知”风险；</p>\n<p>随着项目信息越来越明确，可以动用、介绍或取消应急储备</p>\n</blockquote>\n<p>管理储备：</p>\n<blockquote>\n<p>不包含在进度基准中，但属于项目总持续时间一部分。</p>\n<p>为管理控制的目的而特别留出的项目时段，用来应对项目范围中不可预见的工作</p>\n<p>应对“未知-未知”风险</p>\n<p>动用管理储备会影响到进度基准的更新</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>产品分析</p>\n<blockquote>\n<p>把高层级的产品表述，转变为有形的可交付成果</p>\n</blockquote>\n</li>\n<li><p>假设情景分析</p>\n<blockquote>\n<p>对各种情景进行评估；预测他们对项目目标的影响；考虑各种各样的情景；评估项目进度计划在不利条件下的可行性</p>\n<p>模拟：基于多种不同活动假设【通常使用三点估算的概率分布】计算出多种可能的项目工期，以应对不确定性。</p>\n<p>蒙特卡洛：评估定量和决策制定过程中的风险；首先确定每个活动的可能持续时间概率分布，然后根据此计算出整个项目的可能工期概率分布；可以计算实现特定目标的日期的可能性；</p>\n</blockquote>\n</li>\n<li><p>绩效评审</p>\n<blockquote>\n<p>根据基准，测量、对比和分析绩效</p>\n</blockquote>\n</li>\n<li><p>成本效益分析</p>\n<blockquote>\n<p>基本原理：比较可能的成本与预期的效益，选择最优方案</p>\n<p>主要作用：确定规划的质量活动是否有效利用的成本</p>\n<p>效益表现：减少返工、提高生产率、减低成本、提升相关方满意度</p>\n</blockquote>\n</li>\n<li><p>质量成本</p>\n<blockquote>\n<p>为达到要求而增加投入，还是承担不符合要求而造成的成本；是寻求短期成本降低，还是承担产品生命周期后期频繁出现问题的后果</p>\n<p>一致性成本：预防发生的，例如研发时发生的成本</p>\n<p>非一致性成本：破坏性测试（黑盒测试），例如生产时发生的成本</p>\n</blockquote>\n</li>\n<li><p>根本原因分析</p>\n<blockquote>\n<p>确定引起偏差、缺陷或风险的根本原因</p>\n<p>一项根本原因可能引起多想偏差、缺陷或风险</p>\n<p>识别问题的根本原因并解决问题</p>\n<p>消除所有根本原因可以杜绝问题再次发生</p>\n</blockquote>\n</li>\n<li><p>SWOT分析</p>\n<blockquote>\n<p>从项目的每一个优势、劣势、机会和威胁出发，对项目尽早考察，把产生于（组织）内部的风险都包括在内，更全面考虑风险SWOT也用于考虑组织优势可抵消威胁、机会可克服劣势的程度</p>\n<ul>\n<li>识别项目“内部+外部”威胁和机会</li>\n<li>优势、劣势、机会、威胁</li>\n<li>先内部，后外部</li>\n<li>利用优势、抵消劣势，抓机会，回避风险</li>\n</ul>\n</blockquote>\n</li>\n<li><p>敏感性分析</p>\n<blockquote>\n<p>有助于确定哪些单个风险或其他不确定性来源对项目结果具有最大的潜在影响</p>\n</blockquote>\n</li>\n<li><p>关键性分析</p>\n<blockquote>\n<p>确定风险模型的哪些活动对项目关键路径的影响最大</p>\n</blockquote>\n</li>\n<li><p>决策树分析</p>\n<blockquote>\n<p>在若干备选行动方案中选择一个最佳方案；量化风险工具</p>\n</blockquote>\n</li>\n<li><p>技术绩效分析</p>\n<blockquote>\n<p>把项目执行期间取得的所有成果与取得相关技术成果的计划进行比较</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数据表现-1\"><a href=\"#数据表现-1\" class=\"headerlink\" title=\"数据表现\"></a>数据表现</h2><ul>\n<li><p>亲和图</p>\n<blockquote>\n<p>将收集来的大量信息，进行归类</p>\n</blockquote>\n</li>\n<li><p>因果图</p>\n<blockquote>\n<p>用来分析根本性原因的，采取纠正措施，消除在控制图中所呈现的特殊偏差；与控制图联合使用。</p>\n<p>别名：鱼骨图，石川图</p>\n</blockquote>\n</li>\n<li><p>流程图</p>\n<blockquote>\n<p>通过流程分析找问题原因或出处，通过工作流的逻辑分支及其相对频率，来估算质量成本。也可以用于识别风险过程，分析风险起因。考试中如果选择流程图，通常题干中会有“流程”、“程序”和“过程”等文字，可以判断是用来估算质量成本的。</p>\n</blockquote>\n</li>\n<li><p>直方图</p>\n<blockquote>\n<p>描述几种趋势分散程度和统计分许形状；发生次数统计</p>\n</blockquote>\n</li>\n<li><p>矩阵图</p>\n</li>\n<li><p>散点图</p>\n<blockquote>\n<p>数据点越接近对角线，两个发量之间的关系就越密切</p>\n<p>两个发量间的关系</p>\n<p>别名：相关图（相关关系）</p>\n<p>散点图经常用于问题的转化</p>\n</blockquote>\n</li>\n<li><p>控制图</p>\n<blockquote>\n<p>用来确定一个过程是否稳定，或者是否具有可预测性</p>\n<p>规格上下限、控制上下限</p>\n<p>1点规则：某个数据点超出控制界限</p>\n<p>7点规则：7个或7个以上连续的点落在均值同一侧</p>\n<p>如果失控就必须对其调整</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"分解结构\"><a href=\"#分解结构\" class=\"headerlink\" title=\"分解结构\"></a>分解结构</h2><p>WBS</p>\n<blockquote>\n<p>显示项目可交付成果的分解</p>\n<p>有助于明确高层的职责</p>\n<p>要素：控制账户、规划包、工作包</p>\n</blockquote>\n<p>OBS</p>\n<blockquote>\n<p>按照组织现有的部门、单元或团队排列</p>\n<p>建立部门与项目活动或工作包的对应关系</p>\n</blockquote>\n<p>RBS</p>\n<blockquote>\n<p>按照资源类别和类型，对资源的层级列表</p>\n<p>建立资源与工作包和活动的对应关系</p>\n<p>可与组织的会计系统对接</p>\n<p>可包含人力资源以外的其他各类资源</p>\n</blockquote>\n<h2 id=\"活动4种逻辑关系\"><a href=\"#活动4种逻辑关系\" class=\"headerlink\" title=\"活动4种逻辑关系\"></a>活动4种逻辑关系</h2><p>结束-开始（FS）：上一个活动结束后，下个活动开始</p>\n<p>开始-开始（SS）：上一个活动开始，下个活动同时开始</p>\n<p>开始-结束（SF）：只有当下一个活动开始，上一个活动才能结束。（例：只有第二个保安A开始上岗，前一位保安B才能下岗）（最少用到）</p>\n<p>结束-结束（FF）：上一个活动结束，下个活动也同时结束</p>\n<h2 id=\"活动估算\"><a href=\"#活动估算\" class=\"headerlink\" title=\"活动估算\"></a>活动估算</h2><blockquote>\n<p>估算依据：</p>\n<blockquote>\n<p>1、估算依据文件</p>\n<p>2、全部假设条件的文件</p>\n<p>3、各种已知制约因素</p>\n<p>4、对估算区间说明（如 + - 10 %）</p>\n<p>5、对最终估算的置信水平说明</p>\n<p>6、有关影响估算单位项目风险的文件</p>\n</blockquote>\n</blockquote>\n<p>类比估算：以过去类似项目的参数值（如持续时间、预算、规模、重量和复杂性等）为基础，来估算未来项目的同类参数或指标</p>\n<blockquote>\n<p>用于项目早期阶段或信息不足时</p>\n<p>综合利用历史信息和专家判断</p>\n<p>优点：成本低，速度快</p>\n<p>缺点：准确性差</p>\n<p>可靠关键点：本质相似，不是表面相似；估算团队专业</p>\n</blockquote>\n<p>参数估算：利用历史数据之间的统计关系和其他变量，来进行项目工作进度、成本估算。参数估算的准确性取决于参数模型的成熟度和基础数据的可靠性。可与其他估算方联合使用</p>\n<p>三点估算：通过考虑估算中的不确定风险，可提高活动持续时间估算的准确性。</p>\n<blockquote>\n<p>最可能时间</p>\n<p>最乐观时间</p>\n<p>最悲观时间</p>\n</blockquote>\n<p>自下而上估算：（必要条件：项目的WBS清单）一种估算项目持续时间、资源和成本的方法，通过从下到逐层汇总WBS组成的部分估算而得到的项目估算。首先应对单个工作包或活动进行最具体、系统的估算。</p>\n<blockquote>\n<p>最准确可靠；前提是有详细的WBS；可用于估算活动时间、资源、成本三个过程</p>\n</blockquote>\n<h2 id=\"资源优化\"><a href=\"#资源优化\" class=\"headerlink\" title=\"资源优化\"></a>资源优化</h2><p>资源平衡：为了资源需求与资源供给之间取得平衡，根据资源制约因素对开始日期和完成日期进行一种调整的技术</p>\n<blockquote>\n<p>资源只在特定时间可用，数量有限，或被过度分配时使用</p>\n<p>保持资源使用量处于均衡水平时使用</p>\n<p>资源平衡往往导致关键路径改变，可以用浮动时间来平衡资源需求</p>\n<p>在项目进度计划期间，因为资源平衡，可能导致项目工期发生变化</p>\n</blockquote>\n<p>资源平滑：对进度模型中的活动进行调整，从而使用项目资源需求不超过预定的资源限制的一种技术</p>\n<blockquote>\n<p>不会改变项目关键路劲，完成日期也不会延迟</p>\n<p>活动只在其自由和总浮动时间内延迟</p>\n<p>可能无法实现所有资源的优化</p>\n</blockquote>\n<h2 id=\"进度压缩\"><a href=\"#进度压缩\" class=\"headerlink\" title=\"进度压缩\"></a>进度压缩</h2><p>赶工</p>\n<blockquote>\n<p>通过增加资源，以最小的成本增加来压缩进度工期</p>\n<p>方法：批准加班、增加额外资源、支付加急费用</p>\n<p>适用于通过增加资源就能缩短时间的，且位于关键路径上的活动</p>\n<p>加快关键路径上的活动，会导致风险和&#x2F;或增加成本；局部风险</p>\n<p>需要分析成本和时间比例：选择单位时间成本最低的活动赶工</p>\n</blockquote>\n<p>快速跟进</p>\n<blockquote>\n<p>把顺序执行的活动并行执行</p>\n<p>不直接增加成本</p>\n<p>可能造成返工和风险的增加；全局风险</p>\n</blockquote>\n<p><strong>项目的定义：项目是为创造独特的产品、服务或成果而进行的临时性工作</strong></p>\n<p>项目管理的定义：将知识、技能、工具与技术用于项目活动，以满足项目的要求。</p>\n<p>三角制约：范围、成本、进度</p>\n<p>项目集：一组相互关联且被协调的项目、子项目和项目集，以便获得分别管理所无法获得的利益</p>\n<p>项目组合：为了实现组织战略目标而在一起管理的项目、项目集、子项目组合和运营工作（可仅限于共享雇主、供应商、技术或资源，包括运营的工作，没有依赖关系）</p>\n<p>项目组合管理：<br>    目的：有效分配资源，实现其对组织的最大贡献</p>\n<p>​\t重点：确定资源的分配的优先顺序，确保与组织战略协调一致</p>\n<p>项目生命周期：项目从开始到结束所经历的一些列阶段</p>\n<p>项目阶段：一组具有逻辑关系的项目活动集合，通常以一个或多个可交付成果的完成结果</p>\n<p>阶段关口：为做出进入下阶段、进行整改或结束项目集或项目的决定，而开展的阶段末审查</p>\n<p>项目管理过程：在创造最终结果的系统化的系列活动，以便对一个或多个输入进行加工，生成一个或多个输出</p>\n<p>项目管理过程组：项目管理出入、工具和技术以及输出的逻辑组合。项目管理过程组包括启动、规划、执行、监控和收尾。项目管理过程组不同于阶段。</p>\n<p>蒙特卡洛分析 模拟技术，特点是用概率统计作工具进行分析；计算出整个项目的可能工期概率分布。</p>\n<p>FS：结束-开始</p>\n<p>SS：开始-开始</p>\n<p>SF：开始-结束（最少使用）</p>\n<p>FF：结束-结束</p>\n<p>资源平衡：在资源需求与资源供给之间取的平衡</p>\n<p>资源平滑：对进度模型中的活动进行调整，是项目资源需求不超过预定的资源限制。</p>\n<p>PMP考试答题的几个注意点：</p>\n<p>1、所有的过程，如果问你下一步做什么。如果有关于沟通规划的，一定选沟通相关的<br>2、如果有什么情景题要做什么，一定有3个步骤：分析环境、分析利益，分析自己<br>3、如果有关于变更的措施，一定首选对管理计划影响最小的<br>4、冲突的管理，看实际情况，如果情况紧急，决策最快的最好，就是强制或者解决问题；<br>5、冲突的解决办法，一定要选择对各方利益损失最小的办法。<br>6、注意几个关键词“总是、绝不、必须”或者是这类标志性的词语；他们通常是错误的答案<br>7、注意“经常、有时、也许、通常、或许”这类代表特殊情况的词语。<br>8、中英文翻译，正确的答案，可能语法是不正确的。<br>9、注意题干中的“除了，不包括”<br>10、项目经验要在PMBOOK之后考虑，有冲突，按照PMBOOK来答题。<br>11、PMI的主张是只管自己责任范围bai的事情</p>\n","site":{"data":{}},"excerpt":"","more":"<p>商业文件：商业论证和效益管理计划，可以找到关于项目目标以及项目对业务目标的贡献的相关信息</p>\n<blockquote>\n<p>商业论证：经批准的商业论证或类似文件是最常用语指定项目章程的商业文件</p>\n<p>效益成本分析：是项目启动时考虑项目是否值得做的分析方法</p>\n</blockquote>\n<p>效益管理计划：</p>\n<blockquote>\n<p>项目效益管理计划描述了项目实现效益的方式和时间，以及应制定的效益衡量机制。项目效益指为发起组织和项目预期受益方创造价值的行动、行为、产品、服务或成果的结果。项目生命周期早期应确定目标效益，并据此制定效益管理计划。它描述了效益的关键要素，可能包括（但不限于）记录以下内容：</p>\n<ul>\n<li>目标效益（例如预计通过项目实施可以创造的有形价值和无形价值；财务价值体现为净现值）；</li>\n<li>战略一致性（例如项目效益与组织业务战略的一致程度）；</li>\n<li>实现效益的时限（例如阶段效益、短期效益、长期效益和持续效益）；</li>\n<li>效益责任人（例如在计划确定的整个时限内负责监督、记录和报告已实现效益的负责人）；</li>\n<li>测量指标（例如用于显示已实现效益的直接测量值和间接测量值）；</li>\n<li>假设（例如预计存在或显而易见的因素）；</li>\n<li>风险（例如实现效益的风险）。</li>\n<li>制定效益管理计划需要使用商业论证和需求评估中的数据和信息，例如，成本效益分析数据。</li>\n</ul>\n<p>在成本效益分析中已经把成本估算与项目拟实现的效益进行了比较。效益管理计划和项目管理计划描述了项目创造的商业价值如何能够成为组织持续运营的一部分，包括使用的测量指标。测量指标可核实商业价值并确认项目成功与否。</p>\n</blockquote>\n<p>回收期（PBT）： 投资额&#x2F;现金流</p>\n<p>平均回报率（ROI）：年利润或年均利润&#x2F;投资总额</p>\n<p>项目信息管理系统：收集整合和传播项目管理过程成果的工具和技术所组成的信息系统</p>\n<p>可交付成果：在某一过程、阶段或项目完成时，必须铲除的任何独特并可合适的产品、成果或服务能力</p>\n<ul>\n<li><p>绩效数据：</p>\n<blockquote>\n<p>今天干的什么事；我完成了3个工作，这是工作绩效数据。</p>\n</blockquote>\n</li>\n<li><p>绩效信息：</p>\n<blockquote>\n<p>将干的事和计划干的事比较产生的信息；这个数据与计划比较，当前应该完成5个，只完成了3个，说明进度落后了，这是工作绩效信息。</p>\n</blockquote>\n</li>\n<li><p>绩效报告：</p>\n<blockquote>\n<p>汇总各种信息报告；每周写汇总各种继续信息，写周报，这叫工作绩效报告</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"项目管理计划\"><a href=\"#项目管理计划\" class=\"headerlink\" title=\"项目管理计划\"></a>项目管理计划</h2><blockquote>\n<p>说明项目将如何进行、监督和控制的一份文件。合并整合了其他各个规划过程所输出的所有子管理计划和基准</p>\n<p>基准：是工作产品经过批准的版本，只有通过正式的变更控制程序才能对其进行变更，用作比较的依据</p>\n<blockquote>\n<p>作用：作为比较的基础，据此考核项目执行情况好坏</p>\n<p>本质：是特殊版本的项目计划</p>\n<p>批准：经高级管理和主要相关方批准</p>\n</blockquote>\n</blockquote>\n<ul>\n<li><p>范围管理计划</p>\n<blockquote>\n<p>描述定义、指定、监督、控制和确认范围</p>\n<ol>\n<li>指定项目范围说明书</li>\n<li>根据详细项目范围说明书创建WBS</li>\n<li>确定如何审批和维护范围基准</li>\n<li>正式验收已完成的项目可交付成果</li>\n</ol>\n</blockquote>\n</li>\n<li><p>需求管理计划（商业分析计划）</p>\n<blockquote>\n<p>如何分析、记录和管理项目和产品需求</p>\n<ol>\n<li>如何规划、跟踪和报告各种需求活动</li>\n<li>配置管理活动</li>\n<li>需求优先级排序过程</li>\n<li>测量指标及使用这些指标的理由</li>\n<li>反应哪些需求属性将被列入跟踪矩阵的跟踪结构</li>\n</ol>\n</blockquote>\n</li>\n<li><p>进度管理计划</p>\n<blockquote>\n<p>管理计划组成部分；编制、监督和控制项目进度简历准则和明确活动</p>\n</blockquote>\n</li>\n<li><p>成本管理计划</p>\n<blockquote>\n<p>如何规划、安排和控制项目成本</p>\n</blockquote>\n</li>\n<li><p>质量管理计划</p>\n<blockquote>\n<p>描述如何实施适用的政策、程序和指南以实现质量目标；描述了醒目管理团队为实现一系列项目质量目标所需的活动和资源；项目采用的质量标准</p>\n</blockquote>\n</li>\n<li><p>资源管理计划</p>\n<blockquote>\n<p>如何分类、分配、管理和释放项目资源指南，为团队管理计划和实物资源管理计划</p>\n</blockquote>\n</li>\n<li><p>沟通管理计划</p>\n<blockquote>\n<p>如何规划、结构化、执行与监督项目沟通，提高沟通的有效性</p>\n<p>内容：</p>\n<ul>\n<li>相关方沟通需求</li>\n<li>需沟通的信息，语言、形式、内容和详细程度</li>\n<li>上报步骤（问题升级程序）</li>\n<li>发布信息的原因</li>\n<li>通用术语表</li>\n<li>发布所需信息、确认已收到，或作出回应（若适用）的时限和频率</li>\n<li>负责沟通相关信息的人员</li>\n<li>负责授权保密信息发布的人员</li>\n<li>接收信息的人员或群体，他们需要、需求和期望</li>\n<li>传递信息的方法或技术，如备忘录、电子邮件、新闻稿、或社交媒体</li>\n<li>为沟通活动分配的资源，时间和预算</li>\n<li>随着项目进展，项目不同阶段相关方的变化，而更新与优化沟通管理计划的方法</li>\n<li>项目信息流向图、工作流程（包含审批程序）、报告清单和会议计划等</li>\n<li>法律法规、技术、组织政策等制约因素</li>\n</ul>\n</blockquote>\n</li>\n<li><p>风险管理计划</p>\n<blockquote>\n<p>如何安排与实施风险管理活动</p>\n<p>内容：</p>\n<ul>\n<li>风险管理战略</li>\n<li>方法论</li>\n<li>角色职责</li>\n<li>资金</li>\n<li>时间安排</li>\n<li>风险类型</li>\n<li>风险结构</li>\n<li>相关方风险偏好</li>\n<li>概率和影响的定义</li>\n<li>概率影响矩阵</li>\n<li>报告格式</li>\n<li>跟踪</li>\n</ul>\n</blockquote>\n</li>\n<li><p>采购管理计划</p>\n</li>\n<li><p>相关方参与计划</p>\n<blockquote>\n<p>用于促进相关方有效参与决策和执行的策略行动；调动个人或相关方参与的特定策略或方法</p>\n</blockquote>\n</li>\n<li><p>变更管理计划</p>\n<blockquote>\n<p>描述在整个项目期间如何正视审批和采纳变更请求</p>\n</blockquote>\n</li>\n<li><p>配置管理计划</p>\n<blockquote>\n<p>描述如何记录和更新项目的特定信息，以及该记录和更新哪些信息以保持产品、服务或成果的一致性和有效性</p>\n</blockquote>\n</li>\n<li><p>项目生命周期</p>\n<blockquote>\n<p>描述项目从开始到结束所经历的一些列阶段</p>\n</blockquote>\n</li>\n<li><p>开发方法</p>\n<blockquote>\n<p>描述产品、服务或成果的开发方法，例如：预测、迭代、敏捷或混合型模式</p>\n</blockquote>\n</li>\n<li><p>管理审查</p>\n<blockquote>\n<p>确定项目经理和有关相关方审查项目进展的时间点，以考核绩效是否符合预期，或者确定是否有必要采取预防或纠正措施</p>\n</blockquote>\n</li>\n<li><p>绩效测量基准</p>\n<blockquote>\n<p>经过整合的项目范围、进度和成本计划，用作项目执行的比较依据，以测量和管理项目绩效</p>\n</blockquote>\n</li>\n<li><p>范围基准</p>\n<blockquote>\n<p>经过批准的范围说明书、WBS和响应的WBS词典，只有通过正式的变更控制程序才能进行变更，它被用作比较的基础</p>\n</blockquote>\n<ul>\n<li><p>项目范围说明书</p>\n<blockquote>\n<p>主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任</p>\n</blockquote>\n</li>\n<li><p>WBS</p>\n<blockquote>\n<p>控制账户&#x3D;&#x3D;&#x3D;》规划包&#x3D;&#x3D;&#x3D;》工作包</p>\n</blockquote>\n</li>\n<li><p>WBS词典</p>\n<blockquote>\n<p>针对每个WBS组件，详细描述可交付成果、活动和进度信息的文件；WBS词典对WBS提供支持</p>\n<p>内容：</p>\n<blockquote>\n<p>账户编码标志号</p>\n<p>工作描述</p>\n<p>负责的组织</p>\n<p>进度里程碑</p>\n<p>相关的进度活动</p>\n<p>所需的资源</p>\n<p>成本估算</p>\n<p>验收标准</p>\n<p>技术参考文件</p>\n<p>协议信息</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>进度基准</p>\n<blockquote>\n<p>是经过批准的进度模型，只有通过正式的变更控制程序才能进行变更，用作与实际结果进行比较的依据</p>\n<p>三种表现形式：</p>\n<blockquote>\n<p>横道图：概括性进度计划</p>\n<blockquote>\n<p>标明活动的开始于结束日期，显示出活动的预期持续时间；相对易读，常用语向管理层会报情况</p>\n</blockquote>\n<p>里程碑图：里程碑进度计划</p>\n<blockquote>\n<p>仅标示出主要可交付成果和关键外部接口的计划开始或完成日期；可以和管理层和项目管理团队沟通，一般在项目早起只有里程碑图</p>\n</blockquote>\n<p>项目进度网络图：详细进度计划</p>\n<blockquote>\n<p>显示项目的网络逻辑，又显示项目关键路径的进度活动。纯逻辑图+逻辑横道图+时标逻辑图</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li><p>成本基准</p>\n</li>\n</ul>\n<h2 id=\"项目文件\"><a href=\"#项目文件\" class=\"headerlink\" title=\"项目文件\"></a>项目文件</h2><blockquote>\n<p>会影响项目管理工作，但又不属于项目管理计划的其他文件</p>\n<p>项目管理计划主要是规划过程组的输出，而五大过程组的输出中都有项目文件</p>\n<p>项目管理49个过程的输出除少数非文件类成果以及属于项目管理计划的内容外，都是项目文件的组成部分</p>\n</blockquote>\n<ul>\n<li><p>活动属性</p>\n<blockquote>\n<p>每项活动具有的多重属性，扩充对活动的描述；活动属性随时间演进，不断更新和补充</p>\n</blockquote>\n</li>\n<li><p>活动清单</p>\n<blockquote>\n<p>包含项目所需的全部进度活动综合清单；每个活动的标识及工作范围详述，是项目团队成员知道需要完成什么样的工作；活动都有独特的名称</p>\n</blockquote>\n</li>\n<li><p>假设日志</p>\n<blockquote>\n<p>记录整个项目生命周期中的所有假设条件和制约因素</p>\n</blockquote>\n</li>\n<li><p>估算依据</p>\n<blockquote>\n<p>指出了持续时间、成本和资源估算是如何得出的，可用于计算变更时间。预算和资源的映像</p>\n</blockquote>\n</li>\n<li><p>变更日志</p>\n<blockquote>\n<p>记录项目过程中出现的变更。与相关方的相关方沟通这些变更及其对项目时间、成本和风险影响</p>\n</blockquote>\n</li>\n<li><p>成本估算</p>\n</li>\n<li><p>成本预测</p>\n</li>\n<li><p>持续时间估算</p>\n</li>\n<li><p>问题日志</p>\n<blockquote>\n<p>整个项目生命周期中，通过会遇到问题、差距、不一致或意外冲突，需要采取某些行动加以处理，确保他们得到调查和解决，以免影响项目绩效</p>\n</blockquote>\n</li>\n<li><p>经验教训登记册</p>\n<blockquote>\n<p>记录项目中所获得知识的项目文件，用于当前项目，并列入经验教训知识库</p>\n</blockquote>\n</li>\n<li><p>里程碑清单</p>\n<blockquote>\n<p>也是活动，不占时间和资源；列出所有项目里程碑；指明每个里程碑是强制还是选择性的</p>\n</blockquote>\n</li>\n<li><p>项目日志</p>\n</li>\n<li><p>项目沟通记录</p>\n</li>\n<li><p>项目进度计划</p>\n<blockquote>\n<p>项目进度计划是进度模型的输出，展示活动之间的相互关联，以及计划日志、持续时间、里程碑和所需资源</p>\n<p>三种表现形式：</p>\n<blockquote>\n<p>横道图：标明活动开始与结束日志，显示出活动预期持续时间；用于向管理层汇报情况</p>\n<p>里程碑图：仅标示出只要可交付成果和关进外部接口的计划开始或完成日期；和管理层和项目管理团队沟通，一般项目早期只有里程碑图</p>\n<p>项目进度网络图：显示项目网络逻辑，又显示项目关键路径上的进度活动；纯逻辑图+逻辑横道图+时标逻辑图</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>项目进度网络图</p>\n<blockquote>\n<p>表明项目进度活动之间的逻辑依赖关系图</p>\n</blockquote>\n</li>\n<li><p>项目范围说明书</p>\n<blockquote>\n<p>主要可交付、项目和产品范围描述、验收标准、假设条件制约因素、项目的除外责任</p>\n<p>作用：表明相关方对项目范围达成共识，团队能开展更详细的规划，是评估变更或额外工作是否超出项目边界基准</p>\n</blockquote>\n</li>\n<li><p>项目团队派工单</p>\n</li>\n<li><p>质量控制测量结果</p>\n</li>\n<li><p>质量测量指标</p>\n<blockquote>\n<p>专用于描述项目或产品属性，以及控制质量过程将如何验证符合程度。质量测量指标的例子包括按时完成的任务的百分比、以 CPI 测量的成本绩效、故障率、识别的日缺陷数量、每月总停机时间、每个代码行的错误、客户满意度分数，以及测试计划所涵盖的需求的百分比（即测试覆盖度）。</p>\n</blockquote>\n</li>\n<li><p>质量报告</p>\n<blockquote>\n<p>可能是图形、数据或定性文件，其中包含的信息可帮助其他过程和部门采取纠正措施，以实现项目质量期望</p>\n<p>包含：</p>\n<blockquote>\n<p>团队上报的质量管理问题</p>\n<p>针对过程、项目和产品的改善建议</p>\n<p>纠正措施建议（返工、缺陷&#x2F;漏洞补救、100%检查等）</p>\n<p>控制质量过程中发现的情况概述</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>需求文件</p>\n<blockquote>\n<p>如何满足于项目相关的业务需求，只有明确的（可测量、可测试）、可跟踪、完整、互相协调，需要主要相关方愿意认可的需求，才能作为基准；格式可以多种多样。可以简单，可以详细</p>\n</blockquote>\n</li>\n<li><p>需求跟踪矩阵</p>\n<blockquote>\n<p>把产品需求从其来源连接到能满足需求的可交付成功的一种表格；提供了在项目生命周期中跟踪需求的一种方法</p>\n<p>有助于被批准的每项需求在项目结束时候都能交付和评估变更对项目的范围影响</p>\n<p>为管理产品范围变更提供了框架</p>\n</blockquote>\n</li>\n<li><p>资源需求</p>\n</li>\n<li><p>风险登记册</p>\n<blockquote>\n<p>记录已是被单个项目风险的详细信息</p>\n<p>随着实施定性风险分析、规划风险应对、实施风险应对和监督风险等过程的开展，这些过程的结果也要记进风险登记册</p>\n<ol>\n<li>已识别风险的清单</li>\n<li>潜在风险责任人</li>\n<li>潜在风险应对措施清单</li>\n</ol>\n</blockquote>\n</li>\n<li><p>风险报告</p>\n<blockquote>\n<p>整体项目风险的信息，提供了与变更请求有关的整体和单个项目风险的来源信息</p>\n</blockquote>\n</li>\n<li><p>进度数据</p>\n<blockquote>\n<p>描述和控制进度计划的信息集合</p>\n<p>进度计划所使用的进度数据至少包括进度里程碑、进度活动、活动属性，以及已知的全部假设条件与制约因素</p>\n<p>可还包括：资源直方图、现金流预测，以及订购与交付进度安排</p>\n<p>简单说就是规划进度过程中产生的有效数据</p>\n</blockquote>\n</li>\n<li><p>进度预算</p>\n</li>\n<li><p>相关方登记册</p>\n<blockquote>\n<p>记录关于已识别相关方的信息</p>\n<ul>\n<li>身份信息。信命、组织指望、地点、联系方式，以及在项目中扮演的角色</li>\n<li>评估信息。主要需求、期望、影响项目成果的钱丽，以及相关方最能影响或冲击的项目生命周期阶段</li>\n<li>相关方分类。内部或外部，作永、影响、权力或利益，上级、下级、外围或横向，或者项目经理选择的其他分类模型，进行分类的结果</li>\n</ul>\n</blockquote>\n</li>\n<li><p>团队章程</p>\n<blockquote>\n<p>为团队创建团队价值观、共识和工作指南的文件</p>\n<p>作用：对可接受行为确定明确的期望，减少失误，提高生产力</p>\n<p>讨论诸如行为规范、沟通决策、会议礼仪等领域，团队成员可以了解彼此重要的价值观</p>\n</blockquote>\n</li>\n<li><p>测试与评估文件</p>\n<blockquote>\n<p>就是测试用例</p>\n</blockquote>\n</li>\n<li><p>资源分解结构</p>\n<blockquote>\n<p>资源依据类别和类型的层级展现</p>\n<p>类别：人力、材料哦、设备和用品</p>\n<p>类型：包括技能水平、等级水平或适用于项目的其他类型</p>\n<p>有助于结合资源使用情况，组织与报告项目的进度数据</p>\n</blockquote>\n</li>\n<li><p>资源日历</p>\n<blockquote>\n<p>表明每种具体资源的可用工作日或工作班次的日历</p>\n<p>规定了在项目期间特定的项目资源何时可用、可用多久</p>\n<p>可以在活动或项目层面建立资源日历</p>\n</blockquote>\n</li>\n<li><p>物质资源分配单</p>\n</li>\n<li><p>项目日历</p>\n<blockquote>\n<p>规定开展进度活动的工作日或班次和不开展进度活动的非工作日的日历</p>\n<p>一般会规定节假日、周末和倒班时间</p>\n<p>进度模型中，可能需要采用不止一个项目日历来编制项目进度计划，因为有些活动需要不同的工作时段</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"变更请求\"><a href=\"#变更请求\" class=\"headerlink\" title=\"变更请求\"></a>变更请求</h2><blockquote>\n<ul>\n<li>关于修改任何文档，可交付成果获基准的正式提议</li>\n<li>引起相关文档、可交付成果获基准的修改，导致项目管理计划其他相关部分的更新</li>\n<li>必须书面提出，任何相关方都可提出</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>纠正措施</p>\n<blockquote>\n<p>为了是工作绩效重新与项目管理计划一致而做的活动（偏差已产生且不可接受）——不会改变基准</p>\n<p>偏差已经产生且不可接受为使未来绩效与项目管理计划一致</p>\n</blockquote>\n</li>\n<li><p>预防措施</p>\n<blockquote>\n<p>为了未来的工作绩效与项目管理计划一致而做的活动（偏差未产生，降低未来放生的概率）——不会改变基准</p>\n<p>偏差未产生，将来可能发生为降低风险消极后果的发生概率 </p>\n</blockquote>\n</li>\n<li><p>缺陷补救</p>\n<blockquote>\n<p>为了修正与一致产品或产品组件而进行的活动（项目成功出现质量缺陷）——改变基准</p>\n<p>发现项目成果存在质量缺陷使交付成果的质量符合要求</p>\n</blockquote>\n</li>\n<li><p>更新</p>\n<blockquote>\n<p>对正式受控的项目文件或计划等进行的变更，反应修改或增加的意见和内容。——改变基准</p>\n<p>需要更新项目计划和文件改变计划以反映实际绩效</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"人际关系与团队技能\"><a href=\"#人际关系与团队技能\" class=\"headerlink\" title=\"人际关系与团队技能\"></a>人际关系与团队技能</h2><ul>\n<li><p>积极倾听</p>\n<blockquote>\n<p>减少误解并促进沟通和知识分享</p>\n</blockquote>\n</li>\n<li><p>引导</p>\n<blockquote>\n<p>指引团队成功的打成决定、解决方案或结论。</p>\n<p>1、跨职能、快速达成一致意见</p>\n<p>2、集中讨论、群体互动</p>\n<p>3、更早发现问题</p>\n<p>4、形式多样灵活</p>\n</blockquote>\n</li>\n<li><p>领导力</p>\n<blockquote>\n<p>帮助沟通愿景并鼓舞项目团队关注合适的知识和知识目标</p>\n</blockquote>\n</li>\n<li><p>人际交往</p>\n<blockquote>\n<p>与相关方建立联系和关系，为知识创造分享的条件</p>\n</blockquote>\n</li>\n<li><p>政治意识</p>\n<blockquote>\n<p>根据环境和组织的政治</p>\n</blockquote>\n</li>\n<li><p>名义小组技术</p>\n<blockquote>\n<p>促进头脑风暴的一种技术，通过投票排列最有用的创意，进一步开展头脑风暴或有限排序。是一种结构化的头脑风暴形式</p>\n<p>投票、排序、促进头脑风暴</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"收集数据\"><a href=\"#收集数据\" class=\"headerlink\" title=\"收集数据\"></a>收集数据</h2><ul>\n<li><p>头脑风暴</p>\n<blockquote>\n<p>短时间内收集大量创意（不批评、不表扬）</p>\n</blockquote>\n</li>\n<li><p>焦点小组</p>\n<blockquote>\n<p>召集预定的相关方和主题专家，了解他们对所讨论的产品、服务或成果的期望和态度</p>\n<p>集中讨论、有主持人、互动比一对一更热烈</p>\n</blockquote>\n</li>\n<li><p>访谈</p>\n<blockquote>\n<p>与相关方直接交谈，获取了解高层级需求、假设条件、制约因素、审批标准以及其他信息的方法。一对一形式获取机密信息</p>\n</blockquote>\n</li>\n<li><p>问卷调查</p>\n<blockquote>\n<p>设计一些列书面的问题，想众多受访者快速收集信息</p>\n<p>受众多、快速收集、地理位置分散、统计分析方法</p>\n</blockquote>\n</li>\n<li><p>标杆对照</p>\n<blockquote>\n<p>将实际或计划的产品、过程和实践，与其他可比组织的实践镜像比较，识别最佳实践，行程改进意见，并对绩效考核提供依据</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数据表现\"><a href=\"#数据表现\" class=\"headerlink\" title=\"数据表现\"></a>数据表现</h2><ul>\n<li><p>亲和图</p>\n<blockquote>\n<p>头脑风暴、大量创意、归纳分类</p>\n</blockquote>\n</li>\n<li><p>思维导图</p>\n<blockquote>\n<p>把从头脑风暴中获得的长衣整合成一张图，泳衣反应创意之间的共性与差异，激发新创意</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"会议\"><a href=\"#会议\" class=\"headerlink\" title=\"会议\"></a>会议</h2><p>项目开工会（Kick-off）：在规划阶段结束和执行阶段开始，传达项目目标、获得团队对项目的承诺，阐明每个相关方的角色和职责（小项目一般在规划阶段结束时开，大项目一般在执行阶段开始时开）。<strong>注意点：项目启动会只开一次，而项目开工会每个阶段都会举行一次</strong></p>\n<h2 id=\"冲突管理\"><a href=\"#冲突管理\" class=\"headerlink\" title=\"冲突管理\"></a>冲突管理</h2><ul>\n<li><p>撤退、回避</p>\n<blockquote>\n<p>置之不理、暂时搁置，推迟问题&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;问题没解决</p>\n<p>从实际或潜在冲突中退出，将问题推迟到准备充分的时候，或者将问题推给其他人员解决。</p>\n</blockquote>\n</li>\n<li><p>缓解、包容</p>\n<blockquote>\n<p>单方退让，求同存异&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;赢-输</p>\n<p>强调一致而非差异；为维持和谐与关系而退让一步，考虑其他方的需要。</p>\n</blockquote>\n</li>\n<li><p>妥协、调解</p>\n<blockquote>\n<p>各让一步，一定程度满意&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;输-输</p>\n<p>为了暂时或部分解决冲突，寻找能让各方都在一定程度上满意的方案，但这种方法有时会导致“双输”局面。</p>\n</blockquote>\n</li>\n<li><p>强迫、命令</p>\n<blockquote>\n<p>强行解决&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;输-赢</p>\n<p>以牺牲其他方为代价，推行某一方的观点； 只提供赢 — 输方案。通常是利用权力来强行解决紧急问题，这种方法通常会导致“赢输”局面。</p>\n</blockquote>\n</li>\n<li><p>合作、解决问题</p>\n<blockquote>\n<p>面对，综合考虑不同观点&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;赢&#x3D;赢</p>\n<p>综合考虑不同的观点和意见，采用合作的态度和开放式对话引导各方达成共识和承诺，这种方法可以带来双赢局面。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"相关方权力-x2F-利益方阵\"><a href=\"#相关方权力-x2F-利益方阵\" class=\"headerlink\" title=\"相关方权力&#x2F;利益方阵\"></a>相关方权力&#x2F;利益方阵</h2><ul>\n<li>权力高，利益高：重点管理</li>\n<li>权力高，利益低：令其满意</li>\n<li>权力低，利益高：随时告知</li>\n<li>权力低，利益低：监督</li>\n</ul>\n<h2 id=\"风险应对策略\"><a href=\"#风险应对策略\" class=\"headerlink\" title=\"风险应对策略\"></a>风险应对策略</h2><ul>\n<li><p>规避</p>\n<blockquote>\n<p>对于威胁，我们常用的第一个应对策略叫做“规避”。它适用于发生概率较高，而且有严重负面影响的高优先级风险。使用这种策略，意味着项目团队要采取行动<strong>消除威胁</strong>，或者<strong>保护项目不受到威胁的影响</strong>。</p>\n<p>“规避”其实是<strong>针对风险原因</strong>的一种应对策略，如果我们能够找到造成风险事件的原因，那我们就能够去想办法避免它发生。</p>\n<p>通常，”规避“策略可能会涉及到项目管理计划中某些内容的变更，或者改变会受负面影响的目标，以便于彻底消除威胁，把它的发生概率降为零。</p>\n</blockquote>\n</li>\n<li><p>减轻</p>\n<blockquote>\n<p>所谓“减轻”就是我们采取相应的措施，<strong>降低威胁发生的概率或影响</strong>。一般来说，提前采取减轻措施，比威胁发生后再尝试进行弥补更有效。</p>\n<p>常见的减轻措施包括：采用比较简单的流程，进行更多次测试，或者采用更可靠的卖方等。</p>\n<p>如果我们无法降低威胁发生的概率，也许可以从决定风险严重性的因素入手，来减轻风险发生的影响。比如，我们可以在一个系统中加入冗余部件，来减轻原始部件故障对系统的影响。</p>\n</blockquote>\n</li>\n<li><p>转移</p>\n<blockquote>\n<p>我们把应对风险的责任转移给第三方，<strong>让第三方管理风险并承担风险发生的责任</strong>。如果使用转移策略的话，通常我们需要向第三方机构支付风险转移的费用。</p>\n<p>另外，风险转移可能需要通过一系列行动才能得以实现，这些行动可能会包括购买保险、使用担保书或保证书等，也可以通过签订协议，把具体风险的归属和风险转移给第三方。</p>\n</blockquote>\n</li>\n<li><p>接受</p>\n<blockquote>\n<p>承认项目存在威胁，但是我们不主动采取措施进行干预。一般来说，这种策略比较适合应对优先级比较低的威胁，或者是没有任何一种其他方法可以有效应对的威胁。</p>\n<p>“接受”的策略其实又可以分为<strong>主动和被动</strong>的两种。常见的主动接受策略就是，为项目建立应急储备，包括预留时间、资金或其他资源来应对出现的威胁；而被动接受策略就是，我们不主动采取行动，但是会定期对项目威胁进行审查，确保它们没有发生特别大的改变。</p>\n</blockquote>\n</li>\n<li><p>上报</p>\n</li>\n</ul>\n<h2 id=\"问题解决流程\"><a href=\"#问题解决流程\" class=\"headerlink\" title=\"问题解决流程\"></a>问题解决流程</h2><ol>\n<li>定义问题</li>\n<li>分析问题</li>\n<li>尽可能多的生成解决方案</li>\n<li>选择方案</li>\n<li>执行</li>\n<li>验证</li>\n</ol>\n<h2 id=\"机会应对策略\"><a href=\"#机会应对策略\" class=\"headerlink\" title=\"机会应对策略\"></a>机会应对策略</h2><ul>\n<li><p>开拓</p>\n<blockquote>\n<p>当机会来临的时候，如果我们想要确保把握住这个机会的话，就可以采取<strong>开拓</strong>的策略。一般来说，使用开拓的策略，会把特定机会出现的概率提高到100%，确保这个机会肯定会出现，从而获得与这个机会相关的收益。</p>\n<p>通常我们可以使用的开拓措施有很多，比如把组织中最有能力的资源分配给项目来缩短完工时间；通过技术升级或者采用全新的技术来节约项目成本并缩短项目持续时间。</p>\n</blockquote>\n</li>\n<li><p>分享</p>\n<blockquote>\n<p>当项目机会来临的时候，如果我们无法独自应对的话，就可以选择把应对机会的责任转移给第三方，当然，这个机会所带来的部分收益我们也会分享给第三方。我们可能会通过建立合伙关系、合作团队、特殊公司或合资企业等不同的方式把机会跟第三方共享。</p>\n<p>在这个过程中需要注意的一点是，我们必须仔细的为已经分享的机会安排新的责任人，这个责任人一定是最有能力为项目抓住机会的人。</p>\n<p>另外，如果采用风险分享策略的话，通常我们要向承担机会应对责任的一方支付风险费用。</p>\n</blockquote>\n</li>\n<li><p>提高</p>\n<blockquote>\n<p>主要是用来提高机会出现的概率和影响。</p>\n<p>前面我们已经讲过，相对“威胁”来说，“机会”是好事，既然是好事，那我们就可以想办法提高它发生的概率，或者让它变得更好一点。一般来说，提前采取提高措施比机会出现后尝试改善收益更有效。</p>\n<p>如果我们能够弄清楚机会出现的原因，那我们就能想办法提高机会出现的概率了；如果不能提高概率的话，那我们也许可以尝试分析有哪些因素会决定这个机会的收益有多大，然后再针对这些因素提高机会对项目的影响。</p>\n</blockquote>\n</li>\n<li><p>接收</p>\n</li>\n<li><p>上报</p>\n</li>\n</ul>\n<h2 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h2><blockquote>\n<p>先针对范围、进度、成本绩效进行<strong>挣值分析</strong></p>\n<p>再通过<strong>偏差分析</strong>得出目标绩效与实际绩效之间的差异</p>\n<p>之后通过<strong>根本性原因分析</strong>识别问题的主要原因</p>\n<p>最后在通过执行<strong>纠正措施&#x3D;》成本效益分析、预防措施&#x3D;》趋势分析、纠正措施或预防措施&#x3D;》备选方案分析</strong>的组合</p>\n</blockquote>\n<ul>\n<li><p>挣值分析：</p>\n<blockquote>\n<p>将实际进度和成本绩效与绩效测量基准进行比较</p>\n<p>PV（Planned Value）：完成计划工作量的预算成本（成本基准，不含管理储备）</p>\n<p>AC（Actual Cost）：实际完成工作量的实际成本</p>\n<p>EC（Earned Cost）：实际完成工作量的预算成本</p>\n<p>BAC：项目总预算成本</p>\n</blockquote>\n</li>\n<li><p>偏差分析：</p>\n<blockquote>\n<p>确定实际绩效与目标绩效之间差异程度及原因的技术</p>\n<p>CV（Cost Variance）：成本偏差，截止某时点已发生的成本偏差</p>\n<blockquote>\n<p>正直表示节约，负值表示超支；CV &#x3D; EV - AC</p>\n</blockquote>\n<p>CPI（Cost Performance Index）：成本绩效指数；截止某时点每花1元钱做了价值多少的事</p>\n<blockquote>\n<p>大于1为好，小于1为不好；CPI &#x3D; EV &#x2F; AC</p>\n</blockquote>\n<p>SV（Schedule Variance）：进度偏差；截止某时点已发生的进度偏差</p>\n<blockquote>\n<p>正直表示提前，负值表示落后；SV &#x3D; EV - PV</p>\n</blockquote>\n<p>SPI（Schedule  Performance Index）：进度绩效指数；截止某时点实际进度是计划进度的多少倍</p>\n<blockquote>\n<p>大于1为好，小于1为不好；SPI &#x3D; EV &#x2F; PV</p>\n</blockquote>\n<p>完工尚需指数TCPI：（BAC - EV）&#x2F;（BAC - AC）</p>\n</blockquote>\n</li>\n<li><p>趋势分析：</p>\n<blockquote>\n<p>根据以往结果预测未来绩效；可以预测项目的进度延误，应尽早对项目时间影响趋势分析，再根据分析结构提出必要的预防措施；</p>\n<p>在项目执行的不通时间点估算的，完成这个项目所需的成本，如果测试的EAC值在不可接受的范围内，就是预警信号</p>\n<blockquote>\n<p>完工偏差：VAC &#x3D; BAC - EAC；VAC&gt;&#x3D;0成本节约；VAC&lt;0成本超支，动用管理储备</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>文件分析：</p>\n<blockquote>\n<p>通过现有文件分析出相关的信息。有助于总结经验教训和分享知识以改进未来项目和组织资产</p>\n</blockquote>\n</li>\n<li><p>回归分析：</p>\n<blockquote>\n<p>项目结果的不通项目变量之间的相互关系，提高未来项目的绩效</p>\n</blockquote>\n</li>\n<li><p>备选方案分析</p>\n<blockquote>\n<p>可用于评估实现项目过程中所述的需求和目标的各种方法，有助于团队权衡资源、成本和持续时间变量，以确定完成项目工作的最佳方式。</p>\n<p>定义范围和估算活动资源都可用备选方案分析</p>\n</blockquote>\n</li>\n<li><p>储备分析</p>\n<blockquote>\n<p>需考虑应急储备（有时称时间储备或缓冲时间），并将其纳入项目进度进化中，用来应对进度方面的不确定性。也可估算项目所需的管理储备。</p>\n<p>应该在项目进度文件中清楚的列出应急储备</p>\n<p>应急储备：</p>\n<blockquote>\n<p>包含在进度基准中一段持续时间，应对已经接受的已识别风险，以及已经制定应急湖减轻措施的已识别风险；</p>\n<p>应对“已知-未知”风险；</p>\n<p>随着项目信息越来越明确，可以动用、介绍或取消应急储备</p>\n</blockquote>\n<p>管理储备：</p>\n<blockquote>\n<p>不包含在进度基准中，但属于项目总持续时间一部分。</p>\n<p>为管理控制的目的而特别留出的项目时段，用来应对项目范围中不可预见的工作</p>\n<p>应对“未知-未知”风险</p>\n<p>动用管理储备会影响到进度基准的更新</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>产品分析</p>\n<blockquote>\n<p>把高层级的产品表述，转变为有形的可交付成果</p>\n</blockquote>\n</li>\n<li><p>假设情景分析</p>\n<blockquote>\n<p>对各种情景进行评估；预测他们对项目目标的影响；考虑各种各样的情景；评估项目进度计划在不利条件下的可行性</p>\n<p>模拟：基于多种不同活动假设【通常使用三点估算的概率分布】计算出多种可能的项目工期，以应对不确定性。</p>\n<p>蒙特卡洛：评估定量和决策制定过程中的风险；首先确定每个活动的可能持续时间概率分布，然后根据此计算出整个项目的可能工期概率分布；可以计算实现特定目标的日期的可能性；</p>\n</blockquote>\n</li>\n<li><p>绩效评审</p>\n<blockquote>\n<p>根据基准，测量、对比和分析绩效</p>\n</blockquote>\n</li>\n<li><p>成本效益分析</p>\n<blockquote>\n<p>基本原理：比较可能的成本与预期的效益，选择最优方案</p>\n<p>主要作用：确定规划的质量活动是否有效利用的成本</p>\n<p>效益表现：减少返工、提高生产率、减低成本、提升相关方满意度</p>\n</blockquote>\n</li>\n<li><p>质量成本</p>\n<blockquote>\n<p>为达到要求而增加投入，还是承担不符合要求而造成的成本；是寻求短期成本降低，还是承担产品生命周期后期频繁出现问题的后果</p>\n<p>一致性成本：预防发生的，例如研发时发生的成本</p>\n<p>非一致性成本：破坏性测试（黑盒测试），例如生产时发生的成本</p>\n</blockquote>\n</li>\n<li><p>根本原因分析</p>\n<blockquote>\n<p>确定引起偏差、缺陷或风险的根本原因</p>\n<p>一项根本原因可能引起多想偏差、缺陷或风险</p>\n<p>识别问题的根本原因并解决问题</p>\n<p>消除所有根本原因可以杜绝问题再次发生</p>\n</blockquote>\n</li>\n<li><p>SWOT分析</p>\n<blockquote>\n<p>从项目的每一个优势、劣势、机会和威胁出发，对项目尽早考察，把产生于（组织）内部的风险都包括在内，更全面考虑风险SWOT也用于考虑组织优势可抵消威胁、机会可克服劣势的程度</p>\n<ul>\n<li>识别项目“内部+外部”威胁和机会</li>\n<li>优势、劣势、机会、威胁</li>\n<li>先内部，后外部</li>\n<li>利用优势、抵消劣势，抓机会，回避风险</li>\n</ul>\n</blockquote>\n</li>\n<li><p>敏感性分析</p>\n<blockquote>\n<p>有助于确定哪些单个风险或其他不确定性来源对项目结果具有最大的潜在影响</p>\n</blockquote>\n</li>\n<li><p>关键性分析</p>\n<blockquote>\n<p>确定风险模型的哪些活动对项目关键路径的影响最大</p>\n</blockquote>\n</li>\n<li><p>决策树分析</p>\n<blockquote>\n<p>在若干备选行动方案中选择一个最佳方案；量化风险工具</p>\n</blockquote>\n</li>\n<li><p>技术绩效分析</p>\n<blockquote>\n<p>把项目执行期间取得的所有成果与取得相关技术成果的计划进行比较</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数据表现-1\"><a href=\"#数据表现-1\" class=\"headerlink\" title=\"数据表现\"></a>数据表现</h2><ul>\n<li><p>亲和图</p>\n<blockquote>\n<p>将收集来的大量信息，进行归类</p>\n</blockquote>\n</li>\n<li><p>因果图</p>\n<blockquote>\n<p>用来分析根本性原因的，采取纠正措施，消除在控制图中所呈现的特殊偏差；与控制图联合使用。</p>\n<p>别名：鱼骨图，石川图</p>\n</blockquote>\n</li>\n<li><p>流程图</p>\n<blockquote>\n<p>通过流程分析找问题原因或出处，通过工作流的逻辑分支及其相对频率，来估算质量成本。也可以用于识别风险过程，分析风险起因。考试中如果选择流程图，通常题干中会有“流程”、“程序”和“过程”等文字，可以判断是用来估算质量成本的。</p>\n</blockquote>\n</li>\n<li><p>直方图</p>\n<blockquote>\n<p>描述几种趋势分散程度和统计分许形状；发生次数统计</p>\n</blockquote>\n</li>\n<li><p>矩阵图</p>\n</li>\n<li><p>散点图</p>\n<blockquote>\n<p>数据点越接近对角线，两个发量之间的关系就越密切</p>\n<p>两个发量间的关系</p>\n<p>别名：相关图（相关关系）</p>\n<p>散点图经常用于问题的转化</p>\n</blockquote>\n</li>\n<li><p>控制图</p>\n<blockquote>\n<p>用来确定一个过程是否稳定，或者是否具有可预测性</p>\n<p>规格上下限、控制上下限</p>\n<p>1点规则：某个数据点超出控制界限</p>\n<p>7点规则：7个或7个以上连续的点落在均值同一侧</p>\n<p>如果失控就必须对其调整</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"分解结构\"><a href=\"#分解结构\" class=\"headerlink\" title=\"分解结构\"></a>分解结构</h2><p>WBS</p>\n<blockquote>\n<p>显示项目可交付成果的分解</p>\n<p>有助于明确高层的职责</p>\n<p>要素：控制账户、规划包、工作包</p>\n</blockquote>\n<p>OBS</p>\n<blockquote>\n<p>按照组织现有的部门、单元或团队排列</p>\n<p>建立部门与项目活动或工作包的对应关系</p>\n</blockquote>\n<p>RBS</p>\n<blockquote>\n<p>按照资源类别和类型，对资源的层级列表</p>\n<p>建立资源与工作包和活动的对应关系</p>\n<p>可与组织的会计系统对接</p>\n<p>可包含人力资源以外的其他各类资源</p>\n</blockquote>\n<h2 id=\"活动4种逻辑关系\"><a href=\"#活动4种逻辑关系\" class=\"headerlink\" title=\"活动4种逻辑关系\"></a>活动4种逻辑关系</h2><p>结束-开始（FS）：上一个活动结束后，下个活动开始</p>\n<p>开始-开始（SS）：上一个活动开始，下个活动同时开始</p>\n<p>开始-结束（SF）：只有当下一个活动开始，上一个活动才能结束。（例：只有第二个保安A开始上岗，前一位保安B才能下岗）（最少用到）</p>\n<p>结束-结束（FF）：上一个活动结束，下个活动也同时结束</p>\n<h2 id=\"活动估算\"><a href=\"#活动估算\" class=\"headerlink\" title=\"活动估算\"></a>活动估算</h2><blockquote>\n<p>估算依据：</p>\n<blockquote>\n<p>1、估算依据文件</p>\n<p>2、全部假设条件的文件</p>\n<p>3、各种已知制约因素</p>\n<p>4、对估算区间说明（如 + - 10 %）</p>\n<p>5、对最终估算的置信水平说明</p>\n<p>6、有关影响估算单位项目风险的文件</p>\n</blockquote>\n</blockquote>\n<p>类比估算：以过去类似项目的参数值（如持续时间、预算、规模、重量和复杂性等）为基础，来估算未来项目的同类参数或指标</p>\n<blockquote>\n<p>用于项目早期阶段或信息不足时</p>\n<p>综合利用历史信息和专家判断</p>\n<p>优点：成本低，速度快</p>\n<p>缺点：准确性差</p>\n<p>可靠关键点：本质相似，不是表面相似；估算团队专业</p>\n</blockquote>\n<p>参数估算：利用历史数据之间的统计关系和其他变量，来进行项目工作进度、成本估算。参数估算的准确性取决于参数模型的成熟度和基础数据的可靠性。可与其他估算方联合使用</p>\n<p>三点估算：通过考虑估算中的不确定风险，可提高活动持续时间估算的准确性。</p>\n<blockquote>\n<p>最可能时间</p>\n<p>最乐观时间</p>\n<p>最悲观时间</p>\n</blockquote>\n<p>自下而上估算：（必要条件：项目的WBS清单）一种估算项目持续时间、资源和成本的方法，通过从下到逐层汇总WBS组成的部分估算而得到的项目估算。首先应对单个工作包或活动进行最具体、系统的估算。</p>\n<blockquote>\n<p>最准确可靠；前提是有详细的WBS；可用于估算活动时间、资源、成本三个过程</p>\n</blockquote>\n<h2 id=\"资源优化\"><a href=\"#资源优化\" class=\"headerlink\" title=\"资源优化\"></a>资源优化</h2><p>资源平衡：为了资源需求与资源供给之间取得平衡，根据资源制约因素对开始日期和完成日期进行一种调整的技术</p>\n<blockquote>\n<p>资源只在特定时间可用，数量有限，或被过度分配时使用</p>\n<p>保持资源使用量处于均衡水平时使用</p>\n<p>资源平衡往往导致关键路径改变，可以用浮动时间来平衡资源需求</p>\n<p>在项目进度计划期间，因为资源平衡，可能导致项目工期发生变化</p>\n</blockquote>\n<p>资源平滑：对进度模型中的活动进行调整，从而使用项目资源需求不超过预定的资源限制的一种技术</p>\n<blockquote>\n<p>不会改变项目关键路劲，完成日期也不会延迟</p>\n<p>活动只在其自由和总浮动时间内延迟</p>\n<p>可能无法实现所有资源的优化</p>\n</blockquote>\n<h2 id=\"进度压缩\"><a href=\"#进度压缩\" class=\"headerlink\" title=\"进度压缩\"></a>进度压缩</h2><p>赶工</p>\n<blockquote>\n<p>通过增加资源，以最小的成本增加来压缩进度工期</p>\n<p>方法：批准加班、增加额外资源、支付加急费用</p>\n<p>适用于通过增加资源就能缩短时间的，且位于关键路径上的活动</p>\n<p>加快关键路径上的活动，会导致风险和&#x2F;或增加成本；局部风险</p>\n<p>需要分析成本和时间比例：选择单位时间成本最低的活动赶工</p>\n</blockquote>\n<p>快速跟进</p>\n<blockquote>\n<p>把顺序执行的活动并行执行</p>\n<p>不直接增加成本</p>\n<p>可能造成返工和风险的增加；全局风险</p>\n</blockquote>\n<p><strong>项目的定义：项目是为创造独特的产品、服务或成果而进行的临时性工作</strong></p>\n<p>项目管理的定义：将知识、技能、工具与技术用于项目活动，以满足项目的要求。</p>\n<p>三角制约：范围、成本、进度</p>\n<p>项目集：一组相互关联且被协调的项目、子项目和项目集，以便获得分别管理所无法获得的利益</p>\n<p>项目组合：为了实现组织战略目标而在一起管理的项目、项目集、子项目组合和运营工作（可仅限于共享雇主、供应商、技术或资源，包括运营的工作，没有依赖关系）</p>\n<p>项目组合管理：<br>    目的：有效分配资源，实现其对组织的最大贡献</p>\n<p>​\t重点：确定资源的分配的优先顺序，确保与组织战略协调一致</p>\n<p>项目生命周期：项目从开始到结束所经历的一些列阶段</p>\n<p>项目阶段：一组具有逻辑关系的项目活动集合，通常以一个或多个可交付成果的完成结果</p>\n<p>阶段关口：为做出进入下阶段、进行整改或结束项目集或项目的决定，而开展的阶段末审查</p>\n<p>项目管理过程：在创造最终结果的系统化的系列活动，以便对一个或多个输入进行加工，生成一个或多个输出</p>\n<p>项目管理过程组：项目管理出入、工具和技术以及输出的逻辑组合。项目管理过程组包括启动、规划、执行、监控和收尾。项目管理过程组不同于阶段。</p>\n<p>蒙特卡洛分析 模拟技术，特点是用概率统计作工具进行分析；计算出整个项目的可能工期概率分布。</p>\n<p>FS：结束-开始</p>\n<p>SS：开始-开始</p>\n<p>SF：开始-结束（最少使用）</p>\n<p>FF：结束-结束</p>\n<p>资源平衡：在资源需求与资源供给之间取的平衡</p>\n<p>资源平滑：对进度模型中的活动进行调整，是项目资源需求不超过预定的资源限制。</p>\n<p>PMP考试答题的几个注意点：</p>\n<p>1、所有的过程，如果问你下一步做什么。如果有关于沟通规划的，一定选沟通相关的<br>2、如果有什么情景题要做什么，一定有3个步骤：分析环境、分析利益，分析自己<br>3、如果有关于变更的措施，一定首选对管理计划影响最小的<br>4、冲突的管理，看实际情况，如果情况紧急，决策最快的最好，就是强制或者解决问题；<br>5、冲突的解决办法，一定要选择对各方利益损失最小的办法。<br>6、注意几个关键词“总是、绝不、必须”或者是这类标志性的词语；他们通常是错误的答案<br>7、注意“经常、有时、也许、通常、或许”这类代表特殊情况的词语。<br>8、中英文翻译，正确的答案，可能语法是不正确的。<br>9、注意题干中的“除了，不包括”<br>10、项目经验要在PMBOOK之后考虑，有冲突，按照PMBOOK来答题。<br>11、PMI的主张是只管自己责任范围bai的事情</p>\n"},{"title":"JSON字符串带BOM头","_content":"**调用三方接口返回值JSON字符串带BOM头\"\\ufeff\"，JSON解析死活报错。**\n\n> 我是用SpringBoot的`RestTemplate`调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是`RestTemplate`的接收转换有问题，就将返回值换成了`String`类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。\n\n接口返回值日志如下：\n\n```\n2020-03-25 13:18:55.687 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Response 200 OK\n2020-03-25 13:18:55.688 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as \"application/json;charset=UTF-8\"\n2020-03-25 13:19:57.370 DEBUG 8595 --- [           main] com.hopefun.scm.open.api.EyuanApi        : 返回值：﻿{\"message\":\"成功\",\"code\":\"1\"}\n```\n\n> 在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。\n\n> 一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着\"\\ufeff\"，导致JSON字符串解析报错，原来罪魁祸首是这个玩意\"\\ufeff\"。Debug还是个好玩意啊。\n\n> 终于发现问题所在解决就轻松多了。\n\n```java\npublic static final String BOM = \"\\ufeff\";\n/**\n * 去除BOM\n *\n * @param bomStr JSON字符串\n * @return 去除BOM后的JSON字符串\n */\nprivate String recursiveBom(String bomStr) {\n    String str = \"\";\n    if (bomStr.startsWith(BOM)) {\n        str = bomStr.substring(1);\n        if (str.startsWith(BOM)) {\n            recursiveBom(str);\n        }\n    }\n    return str;\n}\n\n//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。\nrecursiveBom(bomStr.trim());\n```\n\n","source":"_posts/JAVA/JSON字符串带BOM头.md","raw":"---\ntitle: JSON字符串带BOM头\ntags:\n  - JAVA\ncategories:\n  - JAVA\n---\n**调用三方接口返回值JSON字符串带BOM头\"\\ufeff\"，JSON解析死活报错。**\n\n> 我是用SpringBoot的`RestTemplate`调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是`RestTemplate`的接收转换有问题，就将返回值换成了`String`类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。\n\n接口返回值日志如下：\n\n```\n2020-03-25 13:18:55.687 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Response 200 OK\n2020-03-25 13:18:55.688 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as \"application/json;charset=UTF-8\"\n2020-03-25 13:19:57.370 DEBUG 8595 --- [           main] com.hopefun.scm.open.api.EyuanApi        : 返回值：﻿{\"message\":\"成功\",\"code\":\"1\"}\n```\n\n> 在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。\n\n> 一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着\"\\ufeff\"，导致JSON字符串解析报错，原来罪魁祸首是这个玩意\"\\ufeff\"。Debug还是个好玩意啊。\n\n> 终于发现问题所在解决就轻松多了。\n\n```java\npublic static final String BOM = \"\\ufeff\";\n/**\n * 去除BOM\n *\n * @param bomStr JSON字符串\n * @return 去除BOM后的JSON字符串\n */\nprivate String recursiveBom(String bomStr) {\n    String str = \"\";\n    if (bomStr.startsWith(BOM)) {\n        str = bomStr.substring(1);\n        if (str.startsWith(BOM)) {\n            recursiveBom(str);\n        }\n    }\n    return str;\n}\n\n//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。\nrecursiveBom(bomStr.trim());\n```\n\n","slug":"JAVA/JSON字符串带BOM头","published":1,"date":"2020-03-25T05:40:15.000Z","updated":"2022-11-26T17:11:30.777Z","_id":"clay6rehv0000mw2b8nsya8rf","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>调用三方接口返回值JSON字符串带BOM头”\\ufeff”，JSON解析死活报错。</strong></p>\n<blockquote>\n<p>我是用SpringBoot的<code>RestTemplate</code>调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是<code>RestTemplate</code>的接收转换有问题，就将返回值换成了<code>String</code>类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。</p>\n</blockquote>\n<p>接口返回值日志如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.687</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Response <span class=\"hljs-number\">200</span> OK<br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.688</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Reading to <span class=\"hljs-selector-attr\">[java.lang.String]</span> as <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span><br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.370</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> com<span class=\"hljs-selector-class\">.hopefun</span><span class=\"hljs-selector-class\">.scm</span><span class=\"hljs-selector-class\">.open</span><span class=\"hljs-selector-class\">.api</span><span class=\"hljs-selector-class\">.EyuanApi</span>        : 返回值：﻿&#123;<span class=\"hljs-string\">&quot;message&quot;</span>:<span class=\"hljs-string\">&quot;成功&quot;</span>,<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。</p>\n</blockquote>\n<blockquote>\n<p>一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着”\\ufeff”，导致JSON字符串解析报错，原来罪魁祸首是这个玩意”\\ufeff”。Debug还是个好玩意啊。</p>\n</blockquote>\n<blockquote>\n<p>终于发现问题所在解决就轻松多了。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">BOM</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;\\ufeff&quot;</span>;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 去除BOM</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> bomStr JSON字符串</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 去除BOM后的JSON字符串</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">recursiveBom</span><span class=\"hljs-params\">(String bomStr)</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">if</span> (bomStr.startsWith(BOM)) &#123;<br>        str = bomStr.substring(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">if</span> (str.startsWith(BOM)) &#123;<br>            recursiveBom(str);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> str;<br>&#125;<br><br><span class=\"hljs-comment\">//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。</span><br>recursiveBom(bomStr.trim());<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>调用三方接口返回值JSON字符串带BOM头”\\ufeff”，JSON解析死活报错。</strong></p>\n<blockquote>\n<p>我是用SpringBoot的<code>RestTemplate</code>调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是<code>RestTemplate</code>的接收转换有问题，就将返回值换成了<code>String</code>类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。</p>\n</blockquote>\n<p>接口返回值日志如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.687</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Response <span class=\"hljs-number\">200</span> OK<br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.688</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Reading to <span class=\"hljs-selector-attr\">[java.lang.String]</span> as <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span><br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.370</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> com<span class=\"hljs-selector-class\">.hopefun</span><span class=\"hljs-selector-class\">.scm</span><span class=\"hljs-selector-class\">.open</span><span class=\"hljs-selector-class\">.api</span><span class=\"hljs-selector-class\">.EyuanApi</span>        : 返回值：﻿&#123;<span class=\"hljs-string\">&quot;message&quot;</span>:<span class=\"hljs-string\">&quot;成功&quot;</span>,<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。</p>\n</blockquote>\n<blockquote>\n<p>一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着”\\ufeff”，导致JSON字符串解析报错，原来罪魁祸首是这个玩意”\\ufeff”。Debug还是个好玩意啊。</p>\n</blockquote>\n<blockquote>\n<p>终于发现问题所在解决就轻松多了。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">BOM</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;\\ufeff&quot;</span>;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 去除BOM</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> bomStr JSON字符串</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 去除BOM后的JSON字符串</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">recursiveBom</span><span class=\"hljs-params\">(String bomStr)</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">if</span> (bomStr.startsWith(BOM)) &#123;<br>        str = bomStr.substring(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">if</span> (str.startsWith(BOM)) &#123;<br>            recursiveBom(str);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> str;<br>&#125;<br><br><span class=\"hljs-comment\">//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。</span><br>recursiveBom(bomStr.trim());<br></code></pre></td></tr></table></figure>\n\n"},{"title":"MAC替换Homebrew源","_content":"# homebrew长时间停在Updating Homebrew 这个步骤\n\n在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。\n\n例：执行 brew install composer 命令\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法\n```\n\n \n\n## 方法 1：按住 control + c 取消本次更新操作\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C\n```\n\n按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作\n\n大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C==> Satisfying dependencies\n==> Downloading https://getcomposer.org/download/1.7.2/composer.phar\n...\n```\n\n这个方法是临时的、一次性的\n\n \n\n## 方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\n\n平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：\n\n1. brew.git\n2. homebrew-core.git\n3. homebrew-bottles\n\n通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址\n\n \n\n### 1. 替换 / 还原 brew.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 brew.git 仓库地址:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n \n\n### 2. 替换 / 还原 homebrew-core.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n \n\n### 3. 替换 / 还原 homebrew-bottles 访问地址\n\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系\n\n所以，先来查看当前使用的 shell 版本\n\n```shell\necho $SHELL\n\n# 如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式\n# 如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式\n```\n\n \n\n#### 3.1 zsh 终端操作方式\n\n```shell\n# 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc\n```\n\n \n\n#### 3.2 bash 终端操作方式\n\n```shell\n# 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile\n```\n\n\n\n","source":"_posts/MAC/MAC替换Homebrew源.md","raw":"---\ntitle: MAC替换Homebrew源\ntags:\n  - MAC\n  - Homebrew\ncategories:\n  - MAC\n---\n# homebrew长时间停在Updating Homebrew 这个步骤\n\n在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。\n\n例：执行 brew install composer 命令\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法\n```\n\n \n\n## 方法 1：按住 control + c 取消本次更新操作\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C\n```\n\n按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作\n\n大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C==> Satisfying dependencies\n==> Downloading https://getcomposer.org/download/1.7.2/composer.phar\n...\n```\n\n这个方法是临时的、一次性的\n\n \n\n## 方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\n\n平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：\n\n1. brew.git\n2. homebrew-core.git\n3. homebrew-bottles\n\n通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址\n\n \n\n### 1. 替换 / 还原 brew.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 brew.git 仓库地址:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n \n\n### 2. 替换 / 还原 homebrew-core.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n \n\n### 3. 替换 / 还原 homebrew-bottles 访问地址\n\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系\n\n所以，先来查看当前使用的 shell 版本\n\n```shell\necho $SHELL\n\n# 如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式\n# 如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式\n```\n\n \n\n#### 3.1 zsh 终端操作方式\n\n```shell\n# 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc\n```\n\n \n\n#### 3.2 bash 终端操作方式\n\n```shell\n# 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile\n```\n\n\n\n","slug":"MAC/MAC替换Homebrew源","published":1,"date":"2020-11-19T03:59:59.000Z","updated":"2022-11-26T17:11:30.778Z","_id":"clay6w01f0000sx2bcso9ahf3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"homebrew长时间停在Updating-Homebrew-这个步骤\"><a href=\"#homebrew长时间停在Updating-Homebrew-这个步骤\" class=\"headerlink\" title=\"homebrew长时间停在Updating Homebrew 这个步骤\"></a>homebrew长时间停在Updating Homebrew 这个步骤</h1><p>在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。</p>\n<p>例：执行 brew install composer 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方法-1：按住-control-c-取消本次更新操作\"><a href=\"#方法-1：按住-control-c-取消本次更新操作\" class=\"headerlink\" title=\"方法 1：按住 control + c 取消本次更新操作\"></a>方法 1：按住 control + c 取消本次更新操作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C<br></code></pre></td></tr></table></figure>\n\n<p>按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作</p>\n<p>大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C==&gt; Satisfying dependencies<br>==&gt; Downloading https://getcomposer.org/download/1.7.2/composer.phar<br>...<br></code></pre></td></tr></table></figure>\n\n<p>这个方法是临时的、一次性的</p>\n<h2 id=\"方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\"><a href=\"#方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\" class=\"headerlink\" title=\"方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\"></a>方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速</h2><p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：</p>\n<ol>\n<li>brew.git</li>\n<li>homebrew-core.git</li>\n<li>homebrew-bottles</li>\n</ol>\n<p>通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址</p>\n<h3 id=\"1-替换-x2F-还原-brew-git-仓库地址\"><a href=\"#1-替换-x2F-还原-brew-git-仓库地址\" class=\"headerlink\" title=\"1. 替换 &#x2F; 还原 brew.git 仓库地址\"></a>1. 替换 &#x2F; 还原 brew.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 brew.git 仓库地址:</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 brew.git 仓库地址</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://github.com/Homebrew/brew.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-替换-x2F-还原-homebrew-core-git-仓库地址\"><a href=\"#2-替换-x2F-还原-homebrew-core-git-仓库地址\" class=\"headerlink\" title=\"2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址\"></a>2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-core.git 仓库地址:</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-core.git 仓库地址</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://github.com/Homebrew/homebrew-core.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-替换-x2F-还原-homebrew-bottles-访问地址\"><a href=\"#3-替换-x2F-还原-homebrew-bottles-访问地址\" class=\"headerlink\" title=\"3. 替换 &#x2F; 还原 homebrew-bottles 访问地址\"></a>3. 替换 &#x2F; 还原 homebrew-bottles 访问地址</h3><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p>\n<p>所以，先来查看当前使用的 shell 版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo $SHELL<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-zsh-终端操作方式\"><a href=\"#3-1-zsh-终端操作方式\" class=\"headerlink\" title=\"3.1 zsh 终端操作方式\"></a>3.1 zsh 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-bottles 访问地址:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.zshrc<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-bash-终端操作方式\"><a href=\"#3-2-bash-终端操作方式\" class=\"headerlink\" title=\"3.2 bash 终端操作方式\"></a>3.2 bash 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换 homebrew-bottles 访问 URL:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.bash_profile<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.bash_profile<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"homebrew长时间停在Updating-Homebrew-这个步骤\"><a href=\"#homebrew长时间停在Updating-Homebrew-这个步骤\" class=\"headerlink\" title=\"homebrew长时间停在Updating Homebrew 这个步骤\"></a>homebrew长时间停在Updating Homebrew 这个步骤</h1><p>在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。</p>\n<p>例：执行 brew install composer 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方法-1：按住-control-c-取消本次更新操作\"><a href=\"#方法-1：按住-control-c-取消本次更新操作\" class=\"headerlink\" title=\"方法 1：按住 control + c 取消本次更新操作\"></a>方法 1：按住 control + c 取消本次更新操作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C<br></code></pre></td></tr></table></figure>\n\n<p>按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作</p>\n<p>大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C==&gt; Satisfying dependencies<br>==&gt; Downloading https://getcomposer.org/download/1.7.2/composer.phar<br>...<br></code></pre></td></tr></table></figure>\n\n<p>这个方法是临时的、一次性的</p>\n<h2 id=\"方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\"><a href=\"#方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\" class=\"headerlink\" title=\"方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\"></a>方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速</h2><p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：</p>\n<ol>\n<li>brew.git</li>\n<li>homebrew-core.git</li>\n<li>homebrew-bottles</li>\n</ol>\n<p>通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址</p>\n<h3 id=\"1-替换-x2F-还原-brew-git-仓库地址\"><a href=\"#1-替换-x2F-还原-brew-git-仓库地址\" class=\"headerlink\" title=\"1. 替换 &#x2F; 还原 brew.git 仓库地址\"></a>1. 替换 &#x2F; 还原 brew.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 brew.git 仓库地址:</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 brew.git 仓库地址</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://github.com/Homebrew/brew.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-替换-x2F-还原-homebrew-core-git-仓库地址\"><a href=\"#2-替换-x2F-还原-homebrew-core-git-仓库地址\" class=\"headerlink\" title=\"2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址\"></a>2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-core.git 仓库地址:</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-core.git 仓库地址</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://github.com/Homebrew/homebrew-core.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-替换-x2F-还原-homebrew-bottles-访问地址\"><a href=\"#3-替换-x2F-还原-homebrew-bottles-访问地址\" class=\"headerlink\" title=\"3. 替换 &#x2F; 还原 homebrew-bottles 访问地址\"></a>3. 替换 &#x2F; 还原 homebrew-bottles 访问地址</h3><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p>\n<p>所以，先来查看当前使用的 shell 版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo $SHELL<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-zsh-终端操作方式\"><a href=\"#3-1-zsh-终端操作方式\" class=\"headerlink\" title=\"3.1 zsh 终端操作方式\"></a>3.1 zsh 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-bottles 访问地址:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.zshrc<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-bash-终端操作方式\"><a href=\"#3-2-bash-终端操作方式\" class=\"headerlink\" title=\"3.2 bash 终端操作方式\"></a>3.2 bash 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换 homebrew-bottles 访问 URL:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.bash_profile<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.bash_profile<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"【SpringCloud】Eueka注册中心","_content":"# 【SpringCloud】Eueka注册中心\n\n## 客户端启动时如何注册到服务端\n\nEureka客户端在启动时，首先会创建一个心跳的定时任务，定时向服务端发送心跳信息，服务端会对客户端心跳做出响应，如果响应状态码为404时，表示服务端没有该客户端的服务信息，那么客户端则会向服务端发送注册请求，注册信息包括服务名、ip、端口、唯一实例ID等信息。\n\n\n\n\n\n","source":"_posts/SpringCloud/【SpringCloud】Eueka注册中心.md","raw":"---\ntitle: 【SpringCloud】Eueka注册中心\ntags:\n  - SpringCloud\n  - Eueka\n  - 注册中心\ncategories:\n  - SpringCloud\n---\n# 【SpringCloud】Eueka注册中心\n\n## 客户端启动时如何注册到服务端\n\nEureka客户端在启动时，首先会创建一个心跳的定时任务，定时向服务端发送心跳信息，服务端会对客户端心跳做出响应，如果响应状态码为404时，表示服务端没有该客户端的服务信息，那么客户端则会向服务端发送注册请求，注册信息包括服务名、ip、端口、唯一实例ID等信息。\n\n\n\n\n\n","slug":"SpringCloud/【SpringCloud】Eueka注册中心","published":1,"date":"2021-02-09T05:26:29.000Z","updated":"2022-11-26T17:11:30.777Z","_id":"clay6w01p0009sx2bdzrwaajf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【SpringCloud】Eueka注册中心\"><a href=\"#【SpringCloud】Eueka注册中心\" class=\"headerlink\" title=\"【SpringCloud】Eueka注册中心\"></a>【SpringCloud】Eueka注册中心</h1><h2 id=\"客户端启动时如何注册到服务端\"><a href=\"#客户端启动时如何注册到服务端\" class=\"headerlink\" title=\"客户端启动时如何注册到服务端\"></a>客户端启动时如何注册到服务端</h2><p>Eureka客户端在启动时，首先会创建一个心跳的定时任务，定时向服务端发送心跳信息，服务端会对客户端心跳做出响应，如果响应状态码为404时，表示服务端没有该客户端的服务信息，那么客户端则会向服务端发送注册请求，注册信息包括服务名、ip、端口、唯一实例ID等信息。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【SpringCloud】Eueka注册中心\"><a href=\"#【SpringCloud】Eueka注册中心\" class=\"headerlink\" title=\"【SpringCloud】Eueka注册中心\"></a>【SpringCloud】Eueka注册中心</h1><h2 id=\"客户端启动时如何注册到服务端\"><a href=\"#客户端启动时如何注册到服务端\" class=\"headerlink\" title=\"客户端启动时如何注册到服务端\"></a>客户端启动时如何注册到服务端</h2><p>Eureka客户端在启动时，首先会创建一个心跳的定时任务，定时向服务端发送心跳信息，服务端会对客户端心跳做出响应，如果响应状态码为404时，表示服务端没有该客户端的服务信息，那么客户端则会向服务端发送注册请求，注册信息包括服务名、ip、端口、唯一实例ID等信息。</p>\n"},{"title":"【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值","_content":"# 【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\n\n> 实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。\n\n## 获取请求参数RequestBody\n\n```java\n@Component\n@Slf4j\n@AllArgsConstructor\npublic class HttpRequestFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n\n        String method = request.getMethodValue();\n        String contentType = request.getHeaders().getFirst(\"Content-Type\");\n        if (\"POST\".equals(method)) {\n            return DataBufferUtils.join(exchange.getRequest().getBody())\n                    .flatMap(dataBuffer -> {\n                        byte[] bytes = new byte[dataBuffer.readableByteCount()];\n                        dataBuffer.read(bytes);\n                        try {\n                            String bodyString = new String(bytes, \"utf-8\");\n                            log.info(bodyString);//打印请求参数\n                            exchange.getAttributes().put(\"POST_BODY\", bodyString);\n                        } catch (UnsupportedEncodingException e) {\n                            e.printStackTrace();\n                        }\n                        DataBufferUtils.release(dataBuffer);\n                        Flux<DataBuffer> cachedFlux = Flux.defer(() -> {\n                            DataBuffer buffer = exchange.getResponse().bufferFactory()\n                                    .wrap(bytes);\n                            return Mono.just(buffer);\n                        });\n\n                        ServerHttpRequest mutatedRequest = new ServerHttpRequestDecorator(\n                                exchange.getRequest()) {\n                            @Override\n                            public Flux<DataBuffer> getBody() {\n                                return cachedFlux;\n                            }\n                        };\n                        return chain.filter(exchange.mutate().request(mutatedRequest)\n                                .build());\n                    });\n        }\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```\n\n## 获取请求响应值ResponseBody\n\n**POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取**\n\n```java\n@Slf4j\n@Component\npublic class HttpResponseFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        String path = request.getPath().toString();\n        ServerHttpResponse originalResponse = exchange.getResponse();\n        System.out.println(originalResponse.isCommitted());\n        DataBufferFactory bufferFactory = originalResponse.bufferFactory();\n\n        ServerHttpResponseDecorator decoratedResponse = new ServerHttpResponseDecorator(originalResponse) {\n            @Override\n            public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n\n                if (body instanceof Flux) {\n                    Flux<? extends DataBuffer> fluxBody = (Flux<? extends DataBuffer>) body;\n                    return super.writeWith(fluxBody.buffer().map(dataBuffer -> {\n                        DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n                        DataBuffer join = dataBufferFactory.join(dataBuffer);\n                        byte[] content = new byte[join.readableByteCount()];\n                        join.read(content);\n                        //释放掉内存\n                        DataBufferUtils.release(join);\n                        String s = new String(content, StandardCharsets.UTF_8);\n\n                        List<String> strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);\n                        if (!CollectionUtils.isEmpty(strings) && strings.contains(\"gzip\")) {\n                            GZIPInputStream gzipInputStream = null;\n                            try {\n                                gzipInputStream = new GZIPInputStream(new ByteArrayInputStream(content), content.length);\n                                StringWriter writer = new StringWriter();\n                                IOUtils.copy(gzipInputStream, writer, \"UTF-8\");\n                                s = writer.toString();\n\n                            } catch (IOException e) {\n                                log.error(\"====Gzip IO error\", e);\n                            } finally {\n                                if (gzipInputStream != null) {\n                                    try {\n                                        gzipInputStream.close();\n                                    } catch (IOException e) {\n                                        log.error(\"===Gzip IO close error\", e);\n                                    }\n                                }\n                            }\n                        } else {\n                            s = new String(content, StandardCharsets.UTF_8);\n                        }\n                        log.info(\"bodyString: {}\", s);//打印请求响应值\n                        return bufferFactory.wrap(content);\n                    }));\n                }\n                return super.writeWith(body);\n            }\n        };\n        return chain.filter(exchange.mutate().response(decoratedResponse).build());\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```\n","source":"_posts/SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值.md","raw":"---\ntitle: 【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\ntags:\n  - SpringCloud\n  - Gateway\n  - 全局过滤器\ncategories:\n  - SpringCloud\n---\n# 【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\n\n> 实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。\n\n## 获取请求参数RequestBody\n\n```java\n@Component\n@Slf4j\n@AllArgsConstructor\npublic class HttpRequestFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n\n        String method = request.getMethodValue();\n        String contentType = request.getHeaders().getFirst(\"Content-Type\");\n        if (\"POST\".equals(method)) {\n            return DataBufferUtils.join(exchange.getRequest().getBody())\n                    .flatMap(dataBuffer -> {\n                        byte[] bytes = new byte[dataBuffer.readableByteCount()];\n                        dataBuffer.read(bytes);\n                        try {\n                            String bodyString = new String(bytes, \"utf-8\");\n                            log.info(bodyString);//打印请求参数\n                            exchange.getAttributes().put(\"POST_BODY\", bodyString);\n                        } catch (UnsupportedEncodingException e) {\n                            e.printStackTrace();\n                        }\n                        DataBufferUtils.release(dataBuffer);\n                        Flux<DataBuffer> cachedFlux = Flux.defer(() -> {\n                            DataBuffer buffer = exchange.getResponse().bufferFactory()\n                                    .wrap(bytes);\n                            return Mono.just(buffer);\n                        });\n\n                        ServerHttpRequest mutatedRequest = new ServerHttpRequestDecorator(\n                                exchange.getRequest()) {\n                            @Override\n                            public Flux<DataBuffer> getBody() {\n                                return cachedFlux;\n                            }\n                        };\n                        return chain.filter(exchange.mutate().request(mutatedRequest)\n                                .build());\n                    });\n        }\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```\n\n## 获取请求响应值ResponseBody\n\n**POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取**\n\n```java\n@Slf4j\n@Component\npublic class HttpResponseFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        String path = request.getPath().toString();\n        ServerHttpResponse originalResponse = exchange.getResponse();\n        System.out.println(originalResponse.isCommitted());\n        DataBufferFactory bufferFactory = originalResponse.bufferFactory();\n\n        ServerHttpResponseDecorator decoratedResponse = new ServerHttpResponseDecorator(originalResponse) {\n            @Override\n            public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n\n                if (body instanceof Flux) {\n                    Flux<? extends DataBuffer> fluxBody = (Flux<? extends DataBuffer>) body;\n                    return super.writeWith(fluxBody.buffer().map(dataBuffer -> {\n                        DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n                        DataBuffer join = dataBufferFactory.join(dataBuffer);\n                        byte[] content = new byte[join.readableByteCount()];\n                        join.read(content);\n                        //释放掉内存\n                        DataBufferUtils.release(join);\n                        String s = new String(content, StandardCharsets.UTF_8);\n\n                        List<String> strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);\n                        if (!CollectionUtils.isEmpty(strings) && strings.contains(\"gzip\")) {\n                            GZIPInputStream gzipInputStream = null;\n                            try {\n                                gzipInputStream = new GZIPInputStream(new ByteArrayInputStream(content), content.length);\n                                StringWriter writer = new StringWriter();\n                                IOUtils.copy(gzipInputStream, writer, \"UTF-8\");\n                                s = writer.toString();\n\n                            } catch (IOException e) {\n                                log.error(\"====Gzip IO error\", e);\n                            } finally {\n                                if (gzipInputStream != null) {\n                                    try {\n                                        gzipInputStream.close();\n                                    } catch (IOException e) {\n                                        log.error(\"===Gzip IO close error\", e);\n                                    }\n                                }\n                            }\n                        } else {\n                            s = new String(content, StandardCharsets.UTF_8);\n                        }\n                        log.info(\"bodyString: {}\", s);//打印请求响应值\n                        return bufferFactory.wrap(content);\n                    }));\n                }\n                return super.writeWith(body);\n            }\n        };\n        return chain.filter(exchange.mutate().response(decoratedResponse).build());\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```\n","slug":"SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值","published":1,"date":"2020-07-02T12:50:14.000Z","updated":"2022-11-26T17:11:30.777Z","_id":"clay6w01q000bsx2b0lt5dr4t","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\"><a href=\"#【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\" class=\"headerlink\" title=\"【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\"></a>【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值</h1><blockquote>\n<p>实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。</p>\n</blockquote>\n<h2 id=\"获取请求参数RequestBody\"><a href=\"#获取请求参数RequestBody\" class=\"headerlink\" title=\"获取请求参数RequestBody\"></a>获取请求参数RequestBody</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpRequestFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">method</span> <span class=\"hljs-operator\">=</span> request.getMethodValue();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">contentType</span> <span class=\"hljs-operator\">=</span> request.getHeaders().getFirst(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;POST&quot;</span>.equals(method)) &#123;<br>            <span class=\"hljs-keyword\">return</span> DataBufferUtils.join(exchange.getRequest().getBody())<br>                    .flatMap(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[dataBuffer.readableByteCount()];<br>                        dataBuffer.read(bytes);<br>                        <span class=\"hljs-keyword\">try</span> &#123;<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bodyString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>                            log.info(bodyString);<span class=\"hljs-comment\">//打印请求参数</span><br>                            exchange.getAttributes().put(<span class=\"hljs-string\">&quot;POST_BODY&quot;</span>, bodyString);<br>                        &#125; <span class=\"hljs-keyword\">catch</span> (UnsupportedEncodingException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        DataBufferUtils.release(dataBuffer);<br>                        Flux&lt;DataBuffer&gt; cachedFlux = Flux.defer(() -&gt; &#123;<br>                            <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> exchange.getResponse().bufferFactory()<br>                                    .wrap(bytes);<br>                            <span class=\"hljs-keyword\">return</span> Mono.just(buffer);<br>                        &#125;);<br><br>                        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">mutatedRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpRequestDecorator</span>(<br>                                exchange.getRequest()) &#123;<br>                            <span class=\"hljs-meta\">@Override</span><br>                            <span class=\"hljs-keyword\">public</span> Flux&lt;DataBuffer&gt; <span class=\"hljs-title function_\">getBody</span><span class=\"hljs-params\">()</span> &#123;<br>                                <span class=\"hljs-keyword\">return</span> cachedFlux;<br>                            &#125;<br>                        &#125;;<br>                        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().request(mutatedRequest)<br>                                .build());<br>                    &#125;);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"获取请求响应值ResponseBody\"><a href=\"#获取请求响应值ResponseBody\" class=\"headerlink\" title=\"获取请求响应值ResponseBody\"></a>获取请求响应值ResponseBody</h2><p><strong>POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpResponseFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> request.getPath().toString();<br>        <span class=\"hljs-type\">ServerHttpResponse</span> <span class=\"hljs-variable\">originalResponse</span> <span class=\"hljs-operator\">=</span> exchange.getResponse();<br>        System.out.println(originalResponse.isCommitted());<br>        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">bufferFactory</span> <span class=\"hljs-operator\">=</span> originalResponse.bufferFactory();<br><br>        <span class=\"hljs-type\">ServerHttpResponseDecorator</span> <span class=\"hljs-variable\">decoratedResponse</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpResponseDecorator</span>(originalResponse) &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">writeWith</span><span class=\"hljs-params\">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;<br><br>                <span class=\"hljs-keyword\">if</span> (body <span class=\"hljs-keyword\">instanceof</span> Flux) &#123;<br>                    Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt; fluxBody = (Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt;) body;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(fluxBody.buffer().map(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">dataBufferFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultDataBufferFactory</span>();<br>                        <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">join</span> <span class=\"hljs-operator\">=</span> dataBufferFactory.join(dataBuffer);<br>                        <span class=\"hljs-type\">byte</span>[] content = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[join.readableByteCount()];<br>                        join.read(content);<br>                        <span class=\"hljs-comment\">//释放掉内存</span><br>                        DataBufferUtils.release(join);<br>                        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br><br>                        List&lt;String&gt; strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);<br>                        <span class=\"hljs-keyword\">if</span> (!CollectionUtils.isEmpty(strings) &amp;&amp; strings.contains(<span class=\"hljs-string\">&quot;gzip&quot;</span>)) &#123;<br>                            <span class=\"hljs-type\">GZIPInputStream</span> <span class=\"hljs-variable\">gzipInputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">try</span> &#123;<br>                                gzipInputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GZIPInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(content), content.length);<br>                                <span class=\"hljs-type\">StringWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringWriter</span>();<br>                                IOUtils.copy(gzipInputStream, writer, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>                                s = writer.toString();<br><br>                            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                log.error(<span class=\"hljs-string\">&quot;====Gzip IO error&quot;</span>, e);<br>                            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                                <span class=\"hljs-keyword\">if</span> (gzipInputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>                                    <span class=\"hljs-keyword\">try</span> &#123;<br>                                        gzipInputStream.close();<br>                                    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                        log.error(<span class=\"hljs-string\">&quot;===Gzip IO close error&quot;</span>, e);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                            s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br>                        &#125;<br>                        log.info(<span class=\"hljs-string\">&quot;bodyString: &#123;&#125;&quot;</span>, s);<span class=\"hljs-comment\">//打印请求响应值</span><br>                        <span class=\"hljs-keyword\">return</span> bufferFactory.wrap(content);<br>                    &#125;));<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(body);<br>            &#125;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\"><a href=\"#【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\" class=\"headerlink\" title=\"【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\"></a>【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值</h1><blockquote>\n<p>实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。</p>\n</blockquote>\n<h2 id=\"获取请求参数RequestBody\"><a href=\"#获取请求参数RequestBody\" class=\"headerlink\" title=\"获取请求参数RequestBody\"></a>获取请求参数RequestBody</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpRequestFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">method</span> <span class=\"hljs-operator\">=</span> request.getMethodValue();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">contentType</span> <span class=\"hljs-operator\">=</span> request.getHeaders().getFirst(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;POST&quot;</span>.equals(method)) &#123;<br>            <span class=\"hljs-keyword\">return</span> DataBufferUtils.join(exchange.getRequest().getBody())<br>                    .flatMap(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[dataBuffer.readableByteCount()];<br>                        dataBuffer.read(bytes);<br>                        <span class=\"hljs-keyword\">try</span> &#123;<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bodyString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>                            log.info(bodyString);<span class=\"hljs-comment\">//打印请求参数</span><br>                            exchange.getAttributes().put(<span class=\"hljs-string\">&quot;POST_BODY&quot;</span>, bodyString);<br>                        &#125; <span class=\"hljs-keyword\">catch</span> (UnsupportedEncodingException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        DataBufferUtils.release(dataBuffer);<br>                        Flux&lt;DataBuffer&gt; cachedFlux = Flux.defer(() -&gt; &#123;<br>                            <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> exchange.getResponse().bufferFactory()<br>                                    .wrap(bytes);<br>                            <span class=\"hljs-keyword\">return</span> Mono.just(buffer);<br>                        &#125;);<br><br>                        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">mutatedRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpRequestDecorator</span>(<br>                                exchange.getRequest()) &#123;<br>                            <span class=\"hljs-meta\">@Override</span><br>                            <span class=\"hljs-keyword\">public</span> Flux&lt;DataBuffer&gt; <span class=\"hljs-title function_\">getBody</span><span class=\"hljs-params\">()</span> &#123;<br>                                <span class=\"hljs-keyword\">return</span> cachedFlux;<br>                            &#125;<br>                        &#125;;<br>                        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().request(mutatedRequest)<br>                                .build());<br>                    &#125;);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"获取请求响应值ResponseBody\"><a href=\"#获取请求响应值ResponseBody\" class=\"headerlink\" title=\"获取请求响应值ResponseBody\"></a>获取请求响应值ResponseBody</h2><p><strong>POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpResponseFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> request.getPath().toString();<br>        <span class=\"hljs-type\">ServerHttpResponse</span> <span class=\"hljs-variable\">originalResponse</span> <span class=\"hljs-operator\">=</span> exchange.getResponse();<br>        System.out.println(originalResponse.isCommitted());<br>        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">bufferFactory</span> <span class=\"hljs-operator\">=</span> originalResponse.bufferFactory();<br><br>        <span class=\"hljs-type\">ServerHttpResponseDecorator</span> <span class=\"hljs-variable\">decoratedResponse</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpResponseDecorator</span>(originalResponse) &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">writeWith</span><span class=\"hljs-params\">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;<br><br>                <span class=\"hljs-keyword\">if</span> (body <span class=\"hljs-keyword\">instanceof</span> Flux) &#123;<br>                    Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt; fluxBody = (Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt;) body;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(fluxBody.buffer().map(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">dataBufferFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultDataBufferFactory</span>();<br>                        <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">join</span> <span class=\"hljs-operator\">=</span> dataBufferFactory.join(dataBuffer);<br>                        <span class=\"hljs-type\">byte</span>[] content = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[join.readableByteCount()];<br>                        join.read(content);<br>                        <span class=\"hljs-comment\">//释放掉内存</span><br>                        DataBufferUtils.release(join);<br>                        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br><br>                        List&lt;String&gt; strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);<br>                        <span class=\"hljs-keyword\">if</span> (!CollectionUtils.isEmpty(strings) &amp;&amp; strings.contains(<span class=\"hljs-string\">&quot;gzip&quot;</span>)) &#123;<br>                            <span class=\"hljs-type\">GZIPInputStream</span> <span class=\"hljs-variable\">gzipInputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">try</span> &#123;<br>                                gzipInputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GZIPInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(content), content.length);<br>                                <span class=\"hljs-type\">StringWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringWriter</span>();<br>                                IOUtils.copy(gzipInputStream, writer, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>                                s = writer.toString();<br><br>                            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                log.error(<span class=\"hljs-string\">&quot;====Gzip IO error&quot;</span>, e);<br>                            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                                <span class=\"hljs-keyword\">if</span> (gzipInputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>                                    <span class=\"hljs-keyword\">try</span> &#123;<br>                                        gzipInputStream.close();<br>                                    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                        log.error(<span class=\"hljs-string\">&quot;===Gzip IO close error&quot;</span>, e);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                            s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br>                        &#125;<br>                        log.info(<span class=\"hljs-string\">&quot;bodyString: &#123;&#125;&quot;</span>, s);<span class=\"hljs-comment\">//打印请求响应值</span><br>                        <span class=\"hljs-keyword\">return</span> bufferFactory.wrap(content);<br>                    &#125;));<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(body);<br>            &#125;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"Github刷提交记录","_content":"# Github刷提交记录\n\nhttps://github.com/sky-0914/git-auto-commit\n\n00 12 * * * cd /home/github && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n*/5 * * * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n5 5 0/3 * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n","source":"_posts/奇淫技巧/Github刷提交记录.md","raw":"---\ntitle: Github刷提交记录\ntags:\n  - Github\ncategories:\n  - 奇淫技巧\n---\n# Github刷提交记录\n\nhttps://github.com/sky-0914/git-auto-commit\n\n00 12 * * * cd /home/github && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n*/5 * * * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n5 5 0/3 * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n","slug":"奇淫技巧/Github刷提交记录","published":1,"date":"2021-03-05T16:34:41.000Z","updated":"2022-11-28T02:23:10.322Z","_id":"clay6yjzd000tsx2b42fo9o0a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Github刷提交记录\"><a href=\"#Github刷提交记录\" class=\"headerlink\" title=\"Github刷提交记录\"></a>Github刷提交记录</h1><p><a href=\"https://github.com/sky-0914/git-auto-commit\">https://github.com/sky-0914/git-auto-commit</a></p>\n<p>00 12 * * * cd &#x2F;home&#x2F;github &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n<p>*&#x2F;5 * * * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n<p>5 5 0&#x2F;3 * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Github刷提交记录\"><a href=\"#Github刷提交记录\" class=\"headerlink\" title=\"Github刷提交记录\"></a>Github刷提交记录</h1><p><a href=\"https://github.com/sky-0914/git-auto-commit\">https://github.com/sky-0914/git-auto-commit</a></p>\n<p>00 12 * * * cd &#x2F;home&#x2F;github &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n<p>*&#x2F;5 * * * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n<p>5 5 0&#x2F;3 * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n"},{"title":"构建自己的jar包上传至Mvaen中央仓库和版本更新","_content":"# 构建自己的jar包上传至Mvaen中央仓库和版本更新\n\n一直羡慕别人制造轮子，开源项目，供别人使用；我也想这样，可以自己才疏学浅，本次就将自己写小工具上传到Maven的中央仓库。\n\n一步一步详细教程演示如下：\n\n**开始要注意这个几个Maven相关地址**：\n\n- **工单管理**：[https://issues.sonatype.org](https://issues.sonatype.org/)\n\n> 就是申请上传资格和groupId 的地方,注册账号、创建和管理issue，Jar包的发布是以解决issue的方式起步的\n\n- **构件仓库** : https://oss.sonatype.org/#welcome\n\n> 把jar包上传到这里，Release 之后就会同步到maven中央仓库。\n\n- **仓库镜像**: http://search.maven.org/\n\n> 最终工件可以在这里搜索到。\n\n# 创建一个新的项目Issue\n\n**第一步：注册工单管理(register sonatype)**\n\n由于[Maven 中央仓库](https://maven.apache.org/repository/)是由企业*Sonatype,Inc.*负责运营维护的，因此你需要先前往 https://issues.sonatype.org/secure/Signup!default.jspa 注册一个账号（如果你已经有了账号，可以跳过此步骤）。\n\n**第二步：创建工单（nexus)**\n\n点击header 头 “create”按钮创建一个工单，主要用途注册你上传jar包基本信息，主要groupid，通过审核有两个目的：1.防止重复，约束groupid规范，定义grupid最好有所属的域名\n\n登录了账号之后，你需要新建一个*Issue*。*Issue*是问题的意思，相当于你提交了一个工单给 Sonatype 的工作人员，申请开通Maven中央仓库的发布权限。\n\n点击顶部的[【新建】](https://issues.sonatype.org/secure/CreateIssue!default.jspa)按钮，填写申请表单，即可提交申请。\n\n![](https://i.loli.net/2020/06/10/NycF6o2IwB9TZi8.png)\n\n+ Project URL：项目地址。\n+ SCM URL ：项目clone的git地址。\n+ Summary：你的jar包自己起个名字（无要求）。\n+ Group Id：项目标识。\n\n【提醒】确group id对应的是域名，推荐使用个人域名。\n\n**注意**：*groupId* 不能随意填写。\n\n- 如果你（或所属机构）拥有自己的域名，可以填写自己的域名。工作人员在审核时，会反馈给你，要求验证域名的所有权，你可以采取如下两种方式之一完成验证：\n  1. 为域名添加一个指向 Issue编号 的TXT记录； \n  2. 将域名的访问重定向到你的项目主页地址（*Project URL*）。\n- 如果你没有自己的域名，你只能使用项目托管方的域名。例如 你的项目在Github ，主页地址为 https://github.com/username/projectName，那么你只能使用 *io.github.username* 或 *com.github.username* 作为*groupId*。\n\n> 点击 Create 之后，你就会进入一个 jira 页面(sonatype 使用jira 来追踪每一个项目进度)，与此同时你注册时使用的邮箱中也会收到一封邮件提示你，任务创建成功,正在等待处理。 \n\n> 提交成功后，你需要耐心等待审核。不过，请不用担心，Sonatype工作人员的审核效率是很高的，工作时间范围内，基本上一小时内就会响应。\n\n> 因为我这边用的是自己的域名，所以我需要为域名添加一个一个指向 Issue编号 的TXT记录（也就是你新建这个问题的地址：https://issues.sonatype.org/browse/OSSRH-58328）。\n\n添加TXT记录之后需要回复工作人员\n\n![](https://i.loli.net/2020/06/11/bJ6GNO1qpMTV9iA.png)\n\n1. 新建工单之后，工作人员会回复你，需要审核验证你的域名所有权\n\n   ![](https://i.loli.net/2020/06/11/OWrSZCgvmKNnjRc.png)\n\n2. 我这边添加完TXT记录之后，回复工作人员\n\n   ![](https://i.loli.net/2020/06/11/8kbcLDwT1nVGdHB.png)\n\n3. 工作人员审核验证完之后会回复你，让你可以上传构建你的jar包了，当工单状态变为“已解决”，就可以上传maven项目了\n\n   ![](https://i.loli.net/2020/06/11/9yD17hUrjNpR2P4.png)\n\n## gpg 环境安装\n\n**win下载地址**：https://www.gnupg.org/download/\n\n![](https://i.loli.net/2020/06/09/T5NoarJPWxu6OLy.png)\n\n安装就下一步下一步...\n\n**Mac 安装**：`brew install gpg`\n\n**win或者mac安装之后在命令行输入：**\n\n```shell\n#gpg 常用命令\ngpg --help #帮助\ngpg --version #查看版本\ngpg --list-keys #查看已生成的密钥\ngpg --delete-key [用户ID] #删除密钥\ngpg --gen-key #生成密钥对\n#第一步：输入用户名\n#第二步：输入邮箱地址\n#第三步：输入密码\n#之后就生成好了，可以用gpg --list-keys查看已生成的密钥\n\n#上传公钥到服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --send-keys ${公钥ID} #将公钥发布到 PGP 密钥服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --recv-keys ${公钥ID} #查询公钥是否发布成功\n\ngpg --keyserver hkp://pool.sks-keyservers.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keys.gnupg.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\n\n#查看是否上传成功\ngpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys ${公钥ID}\n\ngpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keys.gnupg.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\n\n#导出密钥对\ngpg --armor --output \"输出文件名\" --export \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys\n\n#导入密钥\ngpg --import test-public-key.asc #导入公钥\ngpg --import test-private-key.asc #导入私钥\n```\n\n1. 输入`gpg --gen-key`生成密钥对\n2. 将密钥对公钥上传到服务器\n\n## 配置Maven\n\n**需要修改的 Maven 配置文件包括：`setting.xml`（全局级别）与 `pom.xml`（项目级别）**\n\n### setting.xml（全局级别）\n\n> 这里的username是你一开始注册sonatype账号的username，而不是注册时填写的邮箱。\n\n```xml\n    <servers>\n        <server>\n            <id>ossrh</id>\n            <username>用户名</username>\n            <password>密码</password>\n        </server>\n    </servers>\n```\n\n使用自己注册的 Sonatype 账号的用户名与密码来配置以上 server 信息。\n\n此处 id `ossrh` 应和下面 `pom.xml` 中 snapshotRepository 和 repository 里面的 id 保持一致。\n\n### pom.xml（项目级别）\n\n#### 说明\n\n```xml\n<name>ali-tools</name>\n<url>https://github.com/452425952/ali-tools</url>\n<description>Ali Tools project for Spring Boot</description>\n```\n\n#### 证书\n\n```xml\n<licenses>\n    <license>\n        <name>The Apache Software License, Version 2.0</name>\n        <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        <distribution>repo</distribution>\n    </license>\n</licenses>\n```\n\n#### scm软件配置管理\n\n```xml\n<scm>\n    <connection>https://github.com/452425952/ali-tools.git</connection>\n    <developerConnection>https://github.com/452425952/ali-tools.git</developerConnection>\n    <url>https://github.com/452425952/ali-tools</url>\n</scm>\n```\n\n#### 开发者信息\n\n```xml\n<developers>\n    <developer>\n        <id>sky-0914</id>\n        <name>sky-0914</name>\n        <email>sky-0914@qq.com</email>\n        <roles>\n            <role>Developer</role>\n        </roles>\n        <timezone>+8</timezone>\n    </developer>\n</developers>\n```\n\n#### 打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件\n\n```xml\n<build>\n    <plugins>\n        <!-- 打包时跳过测试 -->\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>2.18.1</version>\n            <configuration>\n                <skipTests>true</skipTests>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n                <source>${java.version}</source>\n                <target>${java.version}</target>\n                <encoding>UTF-8</encoding>\n            </configuration>\n        </plugin>\n        <!-- 以下都为上传jar默认配置不做修改 -->\n        <plugin>\n            <groupId>org.sonatype.plugins</groupId>\n            <artifactId>nexus-staging-maven-plugin</artifactId>\n            <version>1.6.8</version>\n            <!-- autoReleaseAfterClose的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了 -->\n            <extensions>true</extensions>\n            <configuration>\n                <serverId>ossrh</serverId>\n                <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                <autoReleaseAfterClose>true</autoReleaseAfterClose>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-release-plugin</artifactId>\n            <version>2.5.3</version>\n            <configuration>\n                <autoVersionSubmodules>true</autoVersionSubmodules>\n                <useReleaseProfile>false</useReleaseProfile>\n                <releaseProfiles>release</releaseProfiles>\n                <goals>deploy</goals>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.5</version>\n            <executions>\n                <execution>\n                    <id>sign-artifacts</id>\n                    <phase>verify</phase>\n                    <goals>\n                        <goal>sign</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.2.1</version>\n            <executions>\n                <execution>\n                    <id>attach-sources</id>\n                    <goals>\n                        <goal>jar-no-fork</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>2.9</version>\n            <executions>\n                <execution>\n                    <id>attach-javadocs</id>\n                    <goals>\n                        <goal>jar</goal>\n                    </goals>\n                    <!-- JDK8必须使用下面的配置 -->\n                    <configuration>\n                        <encoding>UTF-8</encoding>\n                        <charset>UTF-8</charset>\n                        <additionalparam>-Xdoclint:none</additionalparam>\n                    </configuration>\n\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n#### 上传打包文件配置\n\n> 这里的id需要和setting.xml中的 server 标签中的id对应\n\n```xml\n<distributionManagement>\n    <snapshotRepository>\n        <id>ossrh</id>\n        <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n    <repository>\n        <id>ossrh</id>\n        <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>\n    </repository>\n</distributionManagement>\n```\n\n## 发布操作\n\n> 执行以下命令进行发布（如果 pom.xml 中 autoReleaseAfterClose 的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了，否则我们继续查看第2步）\n\n```shell\nmvn clean deploy -X # -X可以查看详细信息\n```\n\n**打包过程遇到问题：**\n\n1. javadoc格式错误，需要将错误问题解决。\n2. failureMessage  No public key，这个是gpg秘钥没有上传成功导致，我在实际操作时，明明上传成功，但是还是这样提示，只能多打包几次就可以了，不知道什么原因。解决方法: 如果你知道哪个密钥服务器会被查询，你可以直接在那里上传你的密钥。\n3. 实验过程中我的实际执行结果是（注意可能会超时，多试几次就好）\n\n**登录https://oss.sonatype.org，然后选择staging Repositories**\n\n![](https://i.loli.net/2020/06/11/Ggdz5nprUNHfjJT.png)\n\n**如果在pom文件中的 autoReleaseAfterClose的值没有设置的话，需要手动发布的组件，依次执行Close、Release操作**\n\n![](https://i.loli.net/2020/06/11/xDv8NKnGCl9HQXy.png)\n\n**如果Release成功，并且你是首次发布组件，则需要到你创建到issue中回复 “我已经成功发布该组件”，经历大概2小时后，该组件将会同步到对应的maven仓库 。**\n\n![](https://i.loli.net/2020/06/11/X8nVBHkuAaxfspq.png)\n\n**如果Close或者Release不成功，你可以如下图操作查看原因并谷歌定位，或者回复咨询**\n\n![](https://i.loli.net/2020/06/11/dY13vnJi4oeNUOr.png)\n\n### 查找开源库 \n\n注意开源库发布出去之后，还是需要等待一段时间，才能在这里 https://search.maven.org/  查找我们的开源库，以及查看如何依赖自己的开源库。\n\n![](https://i.loli.net/2020/06/11/H6F5ywXisr8VAlj.png)\n\n# 后续发布到中央仓库\n\n首次发布都是比较痛苦的，我们首次进行发布，实际上遇到很多问题，而且还要Sonatype进行验证。第一次总是比较麻烦的，所谓万事开通难拿，接下来后续的发布动作，其实并没有那么麻烦了\n\n发布命令和原来的一样；如果是和第一次发布在同一台电脑（并且没有重装过了，gpg密钥对还在），那么直接执行\n\n```shell\nmvn clean deploy -X\n```\n\n如果换电脑发布了，那么就需要将原来的gpg密钥对（公钥和私钥）导出来保存之后，重新导入到新电脑上（上述内容介绍了gpg常用命令）\n\n```shell\n#导出密钥对\ngpg --armor --output \"输出文件名\" --export \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys\n\n#导入\ngpg --import test-public-key.asc #导入公钥\ngpg --import test-private-key.asc #导入私钥\n```\n\n---\n\n\n\n参考文章：\n\nhttps://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1\n\nhttp://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/\n\ngpg密钥对过期解决方案：http://blog.didispace.com/maven-gpg-expire/\n\n\n\n# gpg: signing failed: Inappropriate ioctl for device\n\n最近上传jar到中央仓库的时候，遇到一个问题：\n\n> gpg: signing failed: Inappropriate ioctl for device\n\n原因是 gpg 在当前终端无法弹出密码输入页面。\n\n解决办法很简单：\n\n```bash\nexport GPG_TTY=$(tty)\n```\n\n重新执行，发现会弹出一个密码输入界面。\n\n# Mac打maven包——gpg: 签名时失败\n\ngpg: signing failed: Inappropriate ioctl for device\n原因是GPG版本是最新版本，需要在.gnupg文件夹下增加两个配置，\nmac下在~/.gnupg这两个文件夹下修改\ngpg.conf和gpg-agent.conf两个文件，\n在gpg-agent.conf中新建一行添加\n\n```\nallow-loopback-pinentry\n```\n\n在gpg.conf添加\n\n```\nuse-agent \npinentry-mode loopback \n```\n\n保存就可以OK了。\n","source":"_posts/Maven/构建自己的jar包上传至Mvaen中央仓库和版本更新.md","raw":"---\ntitle: 构建自己的jar包上传至Mvaen中央仓库和版本更新\ntags:\n  - Maven\ncategories:\n  - Maven\n---\n# 构建自己的jar包上传至Mvaen中央仓库和版本更新\n\n一直羡慕别人制造轮子，开源项目，供别人使用；我也想这样，可以自己才疏学浅，本次就将自己写小工具上传到Maven的中央仓库。\n\n一步一步详细教程演示如下：\n\n**开始要注意这个几个Maven相关地址**：\n\n- **工单管理**：[https://issues.sonatype.org](https://issues.sonatype.org/)\n\n> 就是申请上传资格和groupId 的地方,注册账号、创建和管理issue，Jar包的发布是以解决issue的方式起步的\n\n- **构件仓库** : https://oss.sonatype.org/#welcome\n\n> 把jar包上传到这里，Release 之后就会同步到maven中央仓库。\n\n- **仓库镜像**: http://search.maven.org/\n\n> 最终工件可以在这里搜索到。\n\n# 创建一个新的项目Issue\n\n**第一步：注册工单管理(register sonatype)**\n\n由于[Maven 中央仓库](https://maven.apache.org/repository/)是由企业*Sonatype,Inc.*负责运营维护的，因此你需要先前往 https://issues.sonatype.org/secure/Signup!default.jspa 注册一个账号（如果你已经有了账号，可以跳过此步骤）。\n\n**第二步：创建工单（nexus)**\n\n点击header 头 “create”按钮创建一个工单，主要用途注册你上传jar包基本信息，主要groupid，通过审核有两个目的：1.防止重复，约束groupid规范，定义grupid最好有所属的域名\n\n登录了账号之后，你需要新建一个*Issue*。*Issue*是问题的意思，相当于你提交了一个工单给 Sonatype 的工作人员，申请开通Maven中央仓库的发布权限。\n\n点击顶部的[【新建】](https://issues.sonatype.org/secure/CreateIssue!default.jspa)按钮，填写申请表单，即可提交申请。\n\n![](https://i.loli.net/2020/06/10/NycF6o2IwB9TZi8.png)\n\n+ Project URL：项目地址。\n+ SCM URL ：项目clone的git地址。\n+ Summary：你的jar包自己起个名字（无要求）。\n+ Group Id：项目标识。\n\n【提醒】确group id对应的是域名，推荐使用个人域名。\n\n**注意**：*groupId* 不能随意填写。\n\n- 如果你（或所属机构）拥有自己的域名，可以填写自己的域名。工作人员在审核时，会反馈给你，要求验证域名的所有权，你可以采取如下两种方式之一完成验证：\n  1. 为域名添加一个指向 Issue编号 的TXT记录； \n  2. 将域名的访问重定向到你的项目主页地址（*Project URL*）。\n- 如果你没有自己的域名，你只能使用项目托管方的域名。例如 你的项目在Github ，主页地址为 https://github.com/username/projectName，那么你只能使用 *io.github.username* 或 *com.github.username* 作为*groupId*。\n\n> 点击 Create 之后，你就会进入一个 jira 页面(sonatype 使用jira 来追踪每一个项目进度)，与此同时你注册时使用的邮箱中也会收到一封邮件提示你，任务创建成功,正在等待处理。 \n\n> 提交成功后，你需要耐心等待审核。不过，请不用担心，Sonatype工作人员的审核效率是很高的，工作时间范围内，基本上一小时内就会响应。\n\n> 因为我这边用的是自己的域名，所以我需要为域名添加一个一个指向 Issue编号 的TXT记录（也就是你新建这个问题的地址：https://issues.sonatype.org/browse/OSSRH-58328）。\n\n添加TXT记录之后需要回复工作人员\n\n![](https://i.loli.net/2020/06/11/bJ6GNO1qpMTV9iA.png)\n\n1. 新建工单之后，工作人员会回复你，需要审核验证你的域名所有权\n\n   ![](https://i.loli.net/2020/06/11/OWrSZCgvmKNnjRc.png)\n\n2. 我这边添加完TXT记录之后，回复工作人员\n\n   ![](https://i.loli.net/2020/06/11/8kbcLDwT1nVGdHB.png)\n\n3. 工作人员审核验证完之后会回复你，让你可以上传构建你的jar包了，当工单状态变为“已解决”，就可以上传maven项目了\n\n   ![](https://i.loli.net/2020/06/11/9yD17hUrjNpR2P4.png)\n\n## gpg 环境安装\n\n**win下载地址**：https://www.gnupg.org/download/\n\n![](https://i.loli.net/2020/06/09/T5NoarJPWxu6OLy.png)\n\n安装就下一步下一步...\n\n**Mac 安装**：`brew install gpg`\n\n**win或者mac安装之后在命令行输入：**\n\n```shell\n#gpg 常用命令\ngpg --help #帮助\ngpg --version #查看版本\ngpg --list-keys #查看已生成的密钥\ngpg --delete-key [用户ID] #删除密钥\ngpg --gen-key #生成密钥对\n#第一步：输入用户名\n#第二步：输入邮箱地址\n#第三步：输入密码\n#之后就生成好了，可以用gpg --list-keys查看已生成的密钥\n\n#上传公钥到服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --send-keys ${公钥ID} #将公钥发布到 PGP 密钥服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --recv-keys ${公钥ID} #查询公钥是否发布成功\n\ngpg --keyserver hkp://pool.sks-keyservers.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keys.gnupg.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\n\n#查看是否上传成功\ngpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys ${公钥ID}\n\ngpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\ngpg --keyserver hkp://keys.gnupg.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735\n\n#导出密钥对\ngpg --armor --output \"输出文件名\" --export \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys\n\n#导入密钥\ngpg --import test-public-key.asc #导入公钥\ngpg --import test-private-key.asc #导入私钥\n```\n\n1. 输入`gpg --gen-key`生成密钥对\n2. 将密钥对公钥上传到服务器\n\n## 配置Maven\n\n**需要修改的 Maven 配置文件包括：`setting.xml`（全局级别）与 `pom.xml`（项目级别）**\n\n### setting.xml（全局级别）\n\n> 这里的username是你一开始注册sonatype账号的username，而不是注册时填写的邮箱。\n\n```xml\n    <servers>\n        <server>\n            <id>ossrh</id>\n            <username>用户名</username>\n            <password>密码</password>\n        </server>\n    </servers>\n```\n\n使用自己注册的 Sonatype 账号的用户名与密码来配置以上 server 信息。\n\n此处 id `ossrh` 应和下面 `pom.xml` 中 snapshotRepository 和 repository 里面的 id 保持一致。\n\n### pom.xml（项目级别）\n\n#### 说明\n\n```xml\n<name>ali-tools</name>\n<url>https://github.com/452425952/ali-tools</url>\n<description>Ali Tools project for Spring Boot</description>\n```\n\n#### 证书\n\n```xml\n<licenses>\n    <license>\n        <name>The Apache Software License, Version 2.0</name>\n        <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        <distribution>repo</distribution>\n    </license>\n</licenses>\n```\n\n#### scm软件配置管理\n\n```xml\n<scm>\n    <connection>https://github.com/452425952/ali-tools.git</connection>\n    <developerConnection>https://github.com/452425952/ali-tools.git</developerConnection>\n    <url>https://github.com/452425952/ali-tools</url>\n</scm>\n```\n\n#### 开发者信息\n\n```xml\n<developers>\n    <developer>\n        <id>sky-0914</id>\n        <name>sky-0914</name>\n        <email>sky-0914@qq.com</email>\n        <roles>\n            <role>Developer</role>\n        </roles>\n        <timezone>+8</timezone>\n    </developer>\n</developers>\n```\n\n#### 打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件\n\n```xml\n<build>\n    <plugins>\n        <!-- 打包时跳过测试 -->\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>2.18.1</version>\n            <configuration>\n                <skipTests>true</skipTests>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n                <source>${java.version}</source>\n                <target>${java.version}</target>\n                <encoding>UTF-8</encoding>\n            </configuration>\n        </plugin>\n        <!-- 以下都为上传jar默认配置不做修改 -->\n        <plugin>\n            <groupId>org.sonatype.plugins</groupId>\n            <artifactId>nexus-staging-maven-plugin</artifactId>\n            <version>1.6.8</version>\n            <!-- autoReleaseAfterClose的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了 -->\n            <extensions>true</extensions>\n            <configuration>\n                <serverId>ossrh</serverId>\n                <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n                <autoReleaseAfterClose>true</autoReleaseAfterClose>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-release-plugin</artifactId>\n            <version>2.5.3</version>\n            <configuration>\n                <autoVersionSubmodules>true</autoVersionSubmodules>\n                <useReleaseProfile>false</useReleaseProfile>\n                <releaseProfiles>release</releaseProfiles>\n                <goals>deploy</goals>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <version>1.5</version>\n            <executions>\n                <execution>\n                    <id>sign-artifacts</id>\n                    <phase>verify</phase>\n                    <goals>\n                        <goal>sign</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.2.1</version>\n            <executions>\n                <execution>\n                    <id>attach-sources</id>\n                    <goals>\n                        <goal>jar-no-fork</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <version>2.9</version>\n            <executions>\n                <execution>\n                    <id>attach-javadocs</id>\n                    <goals>\n                        <goal>jar</goal>\n                    </goals>\n                    <!-- JDK8必须使用下面的配置 -->\n                    <configuration>\n                        <encoding>UTF-8</encoding>\n                        <charset>UTF-8</charset>\n                        <additionalparam>-Xdoclint:none</additionalparam>\n                    </configuration>\n\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n#### 上传打包文件配置\n\n> 这里的id需要和setting.xml中的 server 标签中的id对应\n\n```xml\n<distributionManagement>\n    <snapshotRepository>\n        <id>ossrh</id>\n        <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n    <repository>\n        <id>ossrh</id>\n        <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>\n    </repository>\n</distributionManagement>\n```\n\n## 发布操作\n\n> 执行以下命令进行发布（如果 pom.xml 中 autoReleaseAfterClose 的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了，否则我们继续查看第2步）\n\n```shell\nmvn clean deploy -X # -X可以查看详细信息\n```\n\n**打包过程遇到问题：**\n\n1. javadoc格式错误，需要将错误问题解决。\n2. failureMessage  No public key，这个是gpg秘钥没有上传成功导致，我在实际操作时，明明上传成功，但是还是这样提示，只能多打包几次就可以了，不知道什么原因。解决方法: 如果你知道哪个密钥服务器会被查询，你可以直接在那里上传你的密钥。\n3. 实验过程中我的实际执行结果是（注意可能会超时，多试几次就好）\n\n**登录https://oss.sonatype.org，然后选择staging Repositories**\n\n![](https://i.loli.net/2020/06/11/Ggdz5nprUNHfjJT.png)\n\n**如果在pom文件中的 autoReleaseAfterClose的值没有设置的话，需要手动发布的组件，依次执行Close、Release操作**\n\n![](https://i.loli.net/2020/06/11/xDv8NKnGCl9HQXy.png)\n\n**如果Release成功，并且你是首次发布组件，则需要到你创建到issue中回复 “我已经成功发布该组件”，经历大概2小时后，该组件将会同步到对应的maven仓库 。**\n\n![](https://i.loli.net/2020/06/11/X8nVBHkuAaxfspq.png)\n\n**如果Close或者Release不成功，你可以如下图操作查看原因并谷歌定位，或者回复咨询**\n\n![](https://i.loli.net/2020/06/11/dY13vnJi4oeNUOr.png)\n\n### 查找开源库 \n\n注意开源库发布出去之后，还是需要等待一段时间，才能在这里 https://search.maven.org/  查找我们的开源库，以及查看如何依赖自己的开源库。\n\n![](https://i.loli.net/2020/06/11/H6F5ywXisr8VAlj.png)\n\n# 后续发布到中央仓库\n\n首次发布都是比较痛苦的，我们首次进行发布，实际上遇到很多问题，而且还要Sonatype进行验证。第一次总是比较麻烦的，所谓万事开通难拿，接下来后续的发布动作，其实并没有那么麻烦了\n\n发布命令和原来的一样；如果是和第一次发布在同一台电脑（并且没有重装过了，gpg密钥对还在），那么直接执行\n\n```shell\nmvn clean deploy -X\n```\n\n如果换电脑发布了，那么就需要将原来的gpg密钥对（公钥和私钥）导出来保存之后，重新导入到新电脑上（上述内容介绍了gpg常用命令）\n\n```shell\n#导出密钥对\ngpg --armor --output \"输出文件名\" --export \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  \"用户ID\"\n\ngpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys\n\n#导入\ngpg --import test-public-key.asc #导入公钥\ngpg --import test-private-key.asc #导入私钥\n```\n\n---\n\n\n\n参考文章：\n\nhttps://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1\n\nhttp://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/\n\ngpg密钥对过期解决方案：http://blog.didispace.com/maven-gpg-expire/\n\n\n\n# gpg: signing failed: Inappropriate ioctl for device\n\n最近上传jar到中央仓库的时候，遇到一个问题：\n\n> gpg: signing failed: Inappropriate ioctl for device\n\n原因是 gpg 在当前终端无法弹出密码输入页面。\n\n解决办法很简单：\n\n```bash\nexport GPG_TTY=$(tty)\n```\n\n重新执行，发现会弹出一个密码输入界面。\n\n# Mac打maven包——gpg: 签名时失败\n\ngpg: signing failed: Inappropriate ioctl for device\n原因是GPG版本是最新版本，需要在.gnupg文件夹下增加两个配置，\nmac下在~/.gnupg这两个文件夹下修改\ngpg.conf和gpg-agent.conf两个文件，\n在gpg-agent.conf中新建一行添加\n\n```\nallow-loopback-pinentry\n```\n\n在gpg.conf添加\n\n```\nuse-agent \npinentry-mode loopback \n```\n\n保存就可以OK了。\n","slug":"Maven/构建自己的jar包上传至Mvaen中央仓库和版本更新","published":1,"date":"2021-03-05T15:24:52.000Z","updated":"2022-11-26T17:24:58.818Z","_id":"clay7dbf000002r2bdxk55eyo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"构建自己的jar包上传至Mvaen中央仓库和版本更新\"><a href=\"#构建自己的jar包上传至Mvaen中央仓库和版本更新\" class=\"headerlink\" title=\"构建自己的jar包上传至Mvaen中央仓库和版本更新\"></a>构建自己的jar包上传至Mvaen中央仓库和版本更新</h1><p>一直羡慕别人制造轮子，开源项目，供别人使用；我也想这样，可以自己才疏学浅，本次就将自己写小工具上传到Maven的中央仓库。</p>\n<p>一步一步详细教程演示如下：</p>\n<p><strong>开始要注意这个几个Maven相关地址</strong>：</p>\n<ul>\n<li><strong>工单管理</strong>：<a href=\"https://issues.sonatype.org/\">https://issues.sonatype.org</a></li>\n</ul>\n<blockquote>\n<p>就是申请上传资格和groupId 的地方,注册账号、创建和管理issue，Jar包的发布是以解决issue的方式起步的</p>\n</blockquote>\n<ul>\n<li><strong>构件仓库</strong> : <a href=\"https://oss.sonatype.org/#welcome\">https://oss.sonatype.org/#welcome</a></li>\n</ul>\n<blockquote>\n<p>把jar包上传到这里，Release 之后就会同步到maven中央仓库。</p>\n</blockquote>\n<ul>\n<li><strong>仓库镜像</strong>: <a href=\"http://search.maven.org/\">http://search.maven.org/</a></li>\n</ul>\n<blockquote>\n<p>最终工件可以在这里搜索到。</p>\n</blockquote>\n<h1 id=\"创建一个新的项目Issue\"><a href=\"#创建一个新的项目Issue\" class=\"headerlink\" title=\"创建一个新的项目Issue\"></a>创建一个新的项目Issue</h1><p><strong>第一步：注册工单管理(register sonatype)</strong></p>\n<p>由于<a href=\"https://maven.apache.org/repository/\">Maven 中央仓库</a>是由企业*Sonatype,Inc.*负责运营维护的，因此你需要先前往 <a href=\"https://issues.sonatype.org/secure/Signup!default.jspa\">https://issues.sonatype.org/secure/Signup!default.jspa</a> 注册一个账号（如果你已经有了账号，可以跳过此步骤）。</p>\n<p><strong>第二步：创建工单（nexus)</strong></p>\n<p>点击header 头 “create”按钮创建一个工单，主要用途注册你上传jar包基本信息，主要groupid，通过审核有两个目的：1.防止重复，约束groupid规范，定义grupid最好有所属的域名</p>\n<p>登录了账号之后，你需要新建一个<em>Issue</em>。<em>Issue</em>是问题的意思，相当于你提交了一个工单给 Sonatype 的工作人员，申请开通Maven中央仓库的发布权限。</p>\n<p>点击顶部的<a href=\"https://issues.sonatype.org/secure/CreateIssue!default.jspa\">【新建】</a>按钮，填写申请表单，即可提交申请。</p>\n<p><img src=\"https://i.loli.net/2020/06/10/NycF6o2IwB9TZi8.png\"></p>\n<ul>\n<li>Project URL：项目地址。</li>\n<li>SCM URL ：项目clone的git地址。</li>\n<li>Summary：你的jar包自己起个名字（无要求）。</li>\n<li>Group Id：项目标识。</li>\n</ul>\n<p>【提醒】确group id对应的是域名，推荐使用个人域名。</p>\n<p><strong>注意</strong>：<em>groupId</em> 不能随意填写。</p>\n<ul>\n<li>如果你（或所属机构）拥有自己的域名，可以填写自己的域名。工作人员在审核时，会反馈给你，要求验证域名的所有权，你可以采取如下两种方式之一完成验证：<ol>\n<li>为域名添加一个指向 Issue编号 的TXT记录； </li>\n<li>将域名的访问重定向到你的项目主页地址（<em>Project URL</em>）。</li>\n</ol>\n</li>\n<li>如果你没有自己的域名，你只能使用项目托管方的域名。例如 你的项目在Github ，主页地址为 <a href=\"https://github.com/username/projectName%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BD%A0%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8\">https://github.com/username/projectName，那么你只能使用</a> <em>io.github.username</em> 或 <em>com.github.username</em> 作为<em>groupId</em>。</li>\n</ul>\n<blockquote>\n<p>点击 Create 之后，你就会进入一个 jira 页面(sonatype 使用jira 来追踪每一个项目进度)，与此同时你注册时使用的邮箱中也会收到一封邮件提示你，任务创建成功,正在等待处理。 </p>\n</blockquote>\n<blockquote>\n<p>提交成功后，你需要耐心等待审核。不过，请不用担心，Sonatype工作人员的审核效率是很高的，工作时间范围内，基本上一小时内就会响应。</p>\n</blockquote>\n<blockquote>\n<p>因为我这边用的是自己的域名，所以我需要为域名添加一个一个指向 Issue编号 的TXT记录（也就是你新建这个问题的地址：<a href=\"https://issues.sonatype.org/browse/OSSRH-58328%EF%BC%89%E3%80%82\">https://issues.sonatype.org/browse/OSSRH-58328）。</a></p>\n</blockquote>\n<p>添加TXT记录之后需要回复工作人员</p>\n<p><img src=\"https://i.loli.net/2020/06/11/bJ6GNO1qpMTV9iA.png\"></p>\n<ol>\n<li><p>新建工单之后，工作人员会回复你，需要审核验证你的域名所有权</p>\n<p><img src=\"https://i.loli.net/2020/06/11/OWrSZCgvmKNnjRc.png\"></p>\n</li>\n<li><p>我这边添加完TXT记录之后，回复工作人员</p>\n<p><img src=\"https://i.loli.net/2020/06/11/8kbcLDwT1nVGdHB.png\"></p>\n</li>\n<li><p>工作人员审核验证完之后会回复你，让你可以上传构建你的jar包了，当工单状态变为“已解决”，就可以上传maven项目了</p>\n<p><img src=\"https://i.loli.net/2020/06/11/9yD17hUrjNpR2P4.png\"></p>\n</li>\n</ol>\n<h2 id=\"gpg-环境安装\"><a href=\"#gpg-环境安装\" class=\"headerlink\" title=\"gpg 环境安装\"></a>gpg 环境安装</h2><p><strong>win下载地址</strong>：<a href=\"https://www.gnupg.org/download/\">https://www.gnupg.org/download/</a></p>\n<p><img src=\"https://i.loli.net/2020/06/09/T5NoarJPWxu6OLy.png\"></p>\n<p>安装就下一步下一步…</p>\n<p><strong>Mac 安装</strong>：<code>brew install gpg</code></p>\n<p><strong>win或者mac安装之后在命令行输入：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">gpg 常用命令</span><br>gpg --help #帮助<br>gpg --version #查看版本<br>gpg --list-keys #查看已生成的密钥<br>gpg --delete-key [用户ID] #删除密钥<br>gpg --gen-key #生成密钥对<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">第一步：输入用户名</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">第二步：输入邮箱地址</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">第三步：输入密码</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">之后就生成好了，可以用gpg --list-keys查看已生成的密钥</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">上传公钥到服务器</span><br>gpg --keyserver hkp://pool.sks-keyservers.net --send-keys $&#123;公钥ID&#125; #将公钥发布到 PGP 密钥服务器<br>gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $&#123;公钥ID&#125; #查询公钥是否发布成功<br><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keys.gnupg.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看是否上传成功</span><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys $&#123;公钥ID&#125;<br><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keys.gnupg.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导出密钥对</span><br>gpg --armor --output &quot;输出文件名&quot; --export &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导入密钥</span><br>gpg --import test-public-key.asc #导入公钥<br>gpg --import test-private-key.asc #导入私钥<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>输入<code>gpg --gen-key</code>生成密钥对</li>\n<li>将密钥对公钥上传到服务器</li>\n</ol>\n<h2 id=\"配置Maven\"><a href=\"#配置Maven\" class=\"headerlink\" title=\"配置Maven\"></a>配置Maven</h2><p><strong>需要修改的 Maven 配置文件包括：<code>setting.xml</code>（全局级别）与 <code>pom.xml</code>（项目级别）</strong></p>\n<h3 id=\"setting-xml（全局级别）\"><a href=\"#setting-xml（全局级别）\" class=\"headerlink\" title=\"setting.xml（全局级别）\"></a>setting.xml（全局级别）</h3><blockquote>\n<p>这里的username是你一开始注册sonatype账号的username，而不是注册时填写的邮箱。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>用户名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>密码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servers</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用自己注册的 Sonatype 账号的用户名与密码来配置以上 server 信息。</p>\n<p>此处 id <code>ossrh</code> 应和下面 <code>pom.xml</code> 中 snapshotRepository 和 repository 里面的 id 保持一致。</p>\n<h3 id=\"pom-xml（项目级别）\"><a href=\"#pom-xml（项目级别）\" class=\"headerlink\" title=\"pom.xml（项目级别）\"></a>pom.xml（项目级别）</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>ali-tools<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://github.com/452425952/ali-tools<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>Ali Tools project for Spring Boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">description</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">licenses</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">license</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>The Apache Software License, Version 2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distribution</span>&gt;</span>repo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distribution</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">license</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">licenses</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"scm软件配置管理\"><a href=\"#scm软件配置管理\" class=\"headerlink\" title=\"scm软件配置管理\"></a>scm软件配置管理</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scm</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">connection</span>&gt;</span>https://github.com/452425952/ali-tools.git<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">connection</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">developerConnection</span>&gt;</span>https://github.com/452425952/ali-tools.git<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">developerConnection</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://github.com/452425952/ali-tools<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scm</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"开发者信息\"><a href=\"#开发者信息\" class=\"headerlink\" title=\"开发者信息\"></a>开发者信息</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">developers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">developer</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>sky-0914<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>sky-0914<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">email</span>&gt;</span>sky-0914@qq.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">email</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">roles</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">role</span>&gt;</span>Developer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">role</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">roles</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">timezone</span>&gt;</span>+8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">timezone</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">developer</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">developers</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"打包配置-由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc-利用gpg生成到校验-，所以需要在maven中添加以下构建插件\"><a href=\"#打包配置-由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc-利用gpg生成到校验-，所以需要在maven中添加以下构建插件\" class=\"headerlink\" title=\"打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件\"></a>打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 打包时跳过测试 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.18.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">skipTests</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">skipTests</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 以下都为上传jar默认配置不做修改 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.sonatype.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.6.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- autoReleaseAfterClose的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">extensions</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">extensions</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">serverId</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">serverId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nexusUrl</span>&gt;</span>https://oss.sonatype.org/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nexusUrl</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">autoReleaseAfterClose</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">autoReleaseAfterClose</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-release-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.5.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">autoVersionSubmodules</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">autoVersionSubmodules</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">useReleaseProfile</span>&gt;</span>false<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">useReleaseProfile</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releaseProfiles</span>&gt;</span>release<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releaseProfiles</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>deploy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-gpg-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>sign-artifacts<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>verify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>sign<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>attach-sources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>jar-no-fork<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-javadoc-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>attach-javadocs<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                    <span class=\"hljs-comment\">&lt;!-- JDK8必须使用下面的配置 --&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">charset</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">charset</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">additionalparam</span>&gt;</span>-Xdoclint:none<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">additionalparam</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"上传打包文件配置\"><a href=\"#上传打包文件配置\" class=\"headerlink\" title=\"上传打包文件配置\"></a>上传打包文件配置</h4><blockquote>\n<p>这里的id需要和setting.xml中的 server 标签中的id对应</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"发布操作\"><a href=\"#发布操作\" class=\"headerlink\" title=\"发布操作\"></a>发布操作</h2><blockquote>\n<p>执行以下命令进行发布（如果 pom.xml 中 autoReleaseAfterClose 的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了，否则我们继续查看第2步）</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn clean deploy -X # -X可以查看详细信息<br></code></pre></td></tr></table></figure>\n\n<p><strong>打包过程遇到问题：</strong></p>\n<ol>\n<li>javadoc格式错误，需要将错误问题解决。</li>\n<li>failureMessage  No public key，这个是gpg秘钥没有上传成功导致，我在实际操作时，明明上传成功，但是还是这样提示，只能多打包几次就可以了，不知道什么原因。解决方法: 如果你知道哪个密钥服务器会被查询，你可以直接在那里上传你的密钥。</li>\n<li>实验过程中我的实际执行结果是（注意可能会超时，多试几次就好）</li>\n</ol>\n<p><strong>登录<a href=\"https://oss.sonatype.org,然后选择staging/\">https://oss.sonatype.org，然后选择staging</a> Repositories</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/Ggdz5nprUNHfjJT.png\"></p>\n<p><strong>如果在pom文件中的 autoReleaseAfterClose的值没有设置的话，需要手动发布的组件，依次执行Close、Release操作</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/xDv8NKnGCl9HQXy.png\"></p>\n<p><strong>如果Release成功，并且你是首次发布组件，则需要到你创建到issue中回复 “我已经成功发布该组件”，经历大概2小时后，该组件将会同步到对应的maven仓库 。</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/X8nVBHkuAaxfspq.png\"></p>\n<p><strong>如果Close或者Release不成功，你可以如下图操作查看原因并谷歌定位，或者回复咨询</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/dY13vnJi4oeNUOr.png\"></p>\n<h3 id=\"查找开源库\"><a href=\"#查找开源库\" class=\"headerlink\" title=\"查找开源库\"></a>查找开源库</h3><p>注意开源库发布出去之后，还是需要等待一段时间，才能在这里 <a href=\"https://search.maven.org/\">https://search.maven.org/</a>  查找我们的开源库，以及查看如何依赖自己的开源库。</p>\n<p><img src=\"https://i.loli.net/2020/06/11/H6F5ywXisr8VAlj.png\"></p>\n<h1 id=\"后续发布到中央仓库\"><a href=\"#后续发布到中央仓库\" class=\"headerlink\" title=\"后续发布到中央仓库\"></a>后续发布到中央仓库</h1><p>首次发布都是比较痛苦的，我们首次进行发布，实际上遇到很多问题，而且还要Sonatype进行验证。第一次总是比较麻烦的，所谓万事开通难拿，接下来后续的发布动作，其实并没有那么麻烦了</p>\n<p>发布命令和原来的一样；如果是和第一次发布在同一台电脑（并且没有重装过了，gpg密钥对还在），那么直接执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn clean deploy -X<br></code></pre></td></tr></table></figure>\n\n<p>如果换电脑发布了，那么就需要将原来的gpg密钥对（公钥和私钥）导出来保存之后，重新导入到新电脑上（上述内容介绍了gpg常用命令）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导出密钥对</span><br>gpg --armor --output &quot;输出文件名&quot; --export &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导入</span><br>gpg --import test-public-key.asc #导入公钥<br>gpg --import test-private-key.asc #导入私钥<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>参考文章：</p>\n<p><a href=\"https://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1\">https://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1</a></p>\n<p><a href=\"http://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/\">http://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/</a></p>\n<p>gpg密钥对过期解决方案：<a href=\"http://blog.didispace.com/maven-gpg-expire/\">http://blog.didispace.com/maven-gpg-expire/</a></p>\n<h1 id=\"gpg-signing-failed-Inappropriate-ioctl-for-device\"><a href=\"#gpg-signing-failed-Inappropriate-ioctl-for-device\" class=\"headerlink\" title=\"gpg: signing failed: Inappropriate ioctl for device\"></a>gpg: signing failed: Inappropriate ioctl for device</h1><p>最近上传jar到中央仓库的时候，遇到一个问题：</p>\n<blockquote>\n<p>gpg: signing failed: Inappropriate ioctl for device</p>\n</blockquote>\n<p>原因是 gpg 在当前终端无法弹出密码输入页面。</p>\n<p>解决办法很简单：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> GPG_TTY=$(<span class=\"hljs-built_in\">tty</span>)<br></code></pre></td></tr></table></figure>\n\n<p>重新执行，发现会弹出一个密码输入界面。</p>\n<h1 id=\"Mac打maven包——gpg-签名时失败\"><a href=\"#Mac打maven包——gpg-签名时失败\" class=\"headerlink\" title=\"Mac打maven包——gpg: 签名时失败\"></a>Mac打maven包——gpg: 签名时失败</h1><p>gpg: signing failed: Inappropriate ioctl for device<br>原因是GPG版本是最新版本，需要在.gnupg文件夹下增加两个配置，<br>mac下在~&#x2F;.gnupg这两个文件夹下修改<br>gpg.conf和gpg-agent.conf两个文件，<br>在gpg-agent.conf中新建一行添加</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">allow</span>-loopback-pinentry<br></code></pre></td></tr></table></figure>\n\n<p>在gpg.conf添加</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">use</span>-agent <br>pinentry-mode loopback <br></code></pre></td></tr></table></figure>\n\n<p>保存就可以OK了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"构建自己的jar包上传至Mvaen中央仓库和版本更新\"><a href=\"#构建自己的jar包上传至Mvaen中央仓库和版本更新\" class=\"headerlink\" title=\"构建自己的jar包上传至Mvaen中央仓库和版本更新\"></a>构建自己的jar包上传至Mvaen中央仓库和版本更新</h1><p>一直羡慕别人制造轮子，开源项目，供别人使用；我也想这样，可以自己才疏学浅，本次就将自己写小工具上传到Maven的中央仓库。</p>\n<p>一步一步详细教程演示如下：</p>\n<p><strong>开始要注意这个几个Maven相关地址</strong>：</p>\n<ul>\n<li><strong>工单管理</strong>：<a href=\"https://issues.sonatype.org/\">https://issues.sonatype.org</a></li>\n</ul>\n<blockquote>\n<p>就是申请上传资格和groupId 的地方,注册账号、创建和管理issue，Jar包的发布是以解决issue的方式起步的</p>\n</blockquote>\n<ul>\n<li><strong>构件仓库</strong> : <a href=\"https://oss.sonatype.org/#welcome\">https://oss.sonatype.org/#welcome</a></li>\n</ul>\n<blockquote>\n<p>把jar包上传到这里，Release 之后就会同步到maven中央仓库。</p>\n</blockquote>\n<ul>\n<li><strong>仓库镜像</strong>: <a href=\"http://search.maven.org/\">http://search.maven.org/</a></li>\n</ul>\n<blockquote>\n<p>最终工件可以在这里搜索到。</p>\n</blockquote>\n<h1 id=\"创建一个新的项目Issue\"><a href=\"#创建一个新的项目Issue\" class=\"headerlink\" title=\"创建一个新的项目Issue\"></a>创建一个新的项目Issue</h1><p><strong>第一步：注册工单管理(register sonatype)</strong></p>\n<p>由于<a href=\"https://maven.apache.org/repository/\">Maven 中央仓库</a>是由企业*Sonatype,Inc.*负责运营维护的，因此你需要先前往 <a href=\"https://issues.sonatype.org/secure/Signup!default.jspa\">https://issues.sonatype.org/secure/Signup!default.jspa</a> 注册一个账号（如果你已经有了账号，可以跳过此步骤）。</p>\n<p><strong>第二步：创建工单（nexus)</strong></p>\n<p>点击header 头 “create”按钮创建一个工单，主要用途注册你上传jar包基本信息，主要groupid，通过审核有两个目的：1.防止重复，约束groupid规范，定义grupid最好有所属的域名</p>\n<p>登录了账号之后，你需要新建一个<em>Issue</em>。<em>Issue</em>是问题的意思，相当于你提交了一个工单给 Sonatype 的工作人员，申请开通Maven中央仓库的发布权限。</p>\n<p>点击顶部的<a href=\"https://issues.sonatype.org/secure/CreateIssue!default.jspa\">【新建】</a>按钮，填写申请表单，即可提交申请。</p>\n<p><img src=\"https://i.loli.net/2020/06/10/NycF6o2IwB9TZi8.png\"></p>\n<ul>\n<li>Project URL：项目地址。</li>\n<li>SCM URL ：项目clone的git地址。</li>\n<li>Summary：你的jar包自己起个名字（无要求）。</li>\n<li>Group Id：项目标识。</li>\n</ul>\n<p>【提醒】确group id对应的是域名，推荐使用个人域名。</p>\n<p><strong>注意</strong>：<em>groupId</em> 不能随意填写。</p>\n<ul>\n<li>如果你（或所属机构）拥有自己的域名，可以填写自己的域名。工作人员在审核时，会反馈给你，要求验证域名的所有权，你可以采取如下两种方式之一完成验证：<ol>\n<li>为域名添加一个指向 Issue编号 的TXT记录； </li>\n<li>将域名的访问重定向到你的项目主页地址（<em>Project URL</em>）。</li>\n</ol>\n</li>\n<li>如果你没有自己的域名，你只能使用项目托管方的域名。例如 你的项目在Github ，主页地址为 <a href=\"https://github.com/username/projectName%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BD%A0%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8\">https://github.com/username/projectName，那么你只能使用</a> <em>io.github.username</em> 或 <em>com.github.username</em> 作为<em>groupId</em>。</li>\n</ul>\n<blockquote>\n<p>点击 Create 之后，你就会进入一个 jira 页面(sonatype 使用jira 来追踪每一个项目进度)，与此同时你注册时使用的邮箱中也会收到一封邮件提示你，任务创建成功,正在等待处理。 </p>\n</blockquote>\n<blockquote>\n<p>提交成功后，你需要耐心等待审核。不过，请不用担心，Sonatype工作人员的审核效率是很高的，工作时间范围内，基本上一小时内就会响应。</p>\n</blockquote>\n<blockquote>\n<p>因为我这边用的是自己的域名，所以我需要为域名添加一个一个指向 Issue编号 的TXT记录（也就是你新建这个问题的地址：<a href=\"https://issues.sonatype.org/browse/OSSRH-58328%EF%BC%89%E3%80%82\">https://issues.sonatype.org/browse/OSSRH-58328）。</a></p>\n</blockquote>\n<p>添加TXT记录之后需要回复工作人员</p>\n<p><img src=\"https://i.loli.net/2020/06/11/bJ6GNO1qpMTV9iA.png\"></p>\n<ol>\n<li><p>新建工单之后，工作人员会回复你，需要审核验证你的域名所有权</p>\n<p><img src=\"https://i.loli.net/2020/06/11/OWrSZCgvmKNnjRc.png\"></p>\n</li>\n<li><p>我这边添加完TXT记录之后，回复工作人员</p>\n<p><img src=\"https://i.loli.net/2020/06/11/8kbcLDwT1nVGdHB.png\"></p>\n</li>\n<li><p>工作人员审核验证完之后会回复你，让你可以上传构建你的jar包了，当工单状态变为“已解决”，就可以上传maven项目了</p>\n<p><img src=\"https://i.loli.net/2020/06/11/9yD17hUrjNpR2P4.png\"></p>\n</li>\n</ol>\n<h2 id=\"gpg-环境安装\"><a href=\"#gpg-环境安装\" class=\"headerlink\" title=\"gpg 环境安装\"></a>gpg 环境安装</h2><p><strong>win下载地址</strong>：<a href=\"https://www.gnupg.org/download/\">https://www.gnupg.org/download/</a></p>\n<p><img src=\"https://i.loli.net/2020/06/09/T5NoarJPWxu6OLy.png\"></p>\n<p>安装就下一步下一步…</p>\n<p><strong>Mac 安装</strong>：<code>brew install gpg</code></p>\n<p><strong>win或者mac安装之后在命令行输入：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">gpg 常用命令</span><br>gpg --help #帮助<br>gpg --version #查看版本<br>gpg --list-keys #查看已生成的密钥<br>gpg --delete-key [用户ID] #删除密钥<br>gpg --gen-key #生成密钥对<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">第一步：输入用户名</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">第二步：输入邮箱地址</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">第三步：输入密码</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">之后就生成好了，可以用gpg --list-keys查看已生成的密钥</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">上传公钥到服务器</span><br>gpg --keyserver hkp://pool.sks-keyservers.net --send-keys $&#123;公钥ID&#125; #将公钥发布到 PGP 密钥服务器<br>gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $&#123;公钥ID&#125; #查询公钥是否发布成功<br><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keys.gnupg.net:11371 --send-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看是否上传成功</span><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys $&#123;公钥ID&#125;<br><br>gpg --keyserver hkp://pool.sks-keyservers.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br>gpg --keyserver hkp://keys.gnupg.net:11371 --recv-keys 3C50A16F87687255F1AB96BC7E7CB475C5DF4735<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导出密钥对</span><br>gpg --armor --output &quot;输出文件名&quot; --export &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导入密钥</span><br>gpg --import test-public-key.asc #导入公钥<br>gpg --import test-private-key.asc #导入私钥<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li>输入<code>gpg --gen-key</code>生成密钥对</li>\n<li>将密钥对公钥上传到服务器</li>\n</ol>\n<h2 id=\"配置Maven\"><a href=\"#配置Maven\" class=\"headerlink\" title=\"配置Maven\"></a>配置Maven</h2><p><strong>需要修改的 Maven 配置文件包括：<code>setting.xml</code>（全局级别）与 <code>pom.xml</code>（项目级别）</strong></p>\n<h3 id=\"setting-xml（全局级别）\"><a href=\"#setting-xml（全局级别）\" class=\"headerlink\" title=\"setting.xml（全局级别）\"></a>setting.xml（全局级别）</h3><blockquote>\n<p>这里的username是你一开始注册sonatype账号的username，而不是注册时填写的邮箱。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>用户名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>密码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servers</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用自己注册的 Sonatype 账号的用户名与密码来配置以上 server 信息。</p>\n<p>此处 id <code>ossrh</code> 应和下面 <code>pom.xml</code> 中 snapshotRepository 和 repository 里面的 id 保持一致。</p>\n<h3 id=\"pom-xml（项目级别）\"><a href=\"#pom-xml（项目级别）\" class=\"headerlink\" title=\"pom.xml（项目级别）\"></a>pom.xml（项目级别）</h3><h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>ali-tools<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://github.com/452425952/ali-tools<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">description</span>&gt;</span>Ali Tools project for Spring Boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">description</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">licenses</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">license</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>The Apache Software License, Version 2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distribution</span>&gt;</span>repo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distribution</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">license</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">licenses</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"scm软件配置管理\"><a href=\"#scm软件配置管理\" class=\"headerlink\" title=\"scm软件配置管理\"></a>scm软件配置管理</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scm</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">connection</span>&gt;</span>https://github.com/452425952/ali-tools.git<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">connection</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">developerConnection</span>&gt;</span>https://github.com/452425952/ali-tools.git<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">developerConnection</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://github.com/452425952/ali-tools<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scm</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"开发者信息\"><a href=\"#开发者信息\" class=\"headerlink\" title=\"开发者信息\"></a>开发者信息</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">developers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">developer</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>sky-0914<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>sky-0914<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">email</span>&gt;</span>sky-0914@qq.com<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">email</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">roles</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">role</span>&gt;</span>Developer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">role</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">roles</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">timezone</span>&gt;</span>+8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">timezone</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">developer</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">developers</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"打包配置-由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc-利用gpg生成到校验-，所以需要在maven中添加以下构建插件\"><a href=\"#打包配置-由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc-利用gpg生成到校验-，所以需要在maven中添加以下构建插件\" class=\"headerlink\" title=\"打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件\"></a>打包配置,由于发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 打包时跳过测试 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.18.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">skipTests</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">skipTests</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 以下都为上传jar默认配置不做修改 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.sonatype.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.6.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- autoReleaseAfterClose的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">extensions</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">extensions</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">serverId</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">serverId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nexusUrl</span>&gt;</span>https://oss.sonatype.org/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nexusUrl</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">autoReleaseAfterClose</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">autoReleaseAfterClose</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-release-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.5.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">autoVersionSubmodules</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">autoVersionSubmodules</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">useReleaseProfile</span>&gt;</span>false<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">useReleaseProfile</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releaseProfiles</span>&gt;</span>release<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releaseProfiles</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span>deploy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-gpg-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>sign-artifacts<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>verify<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>sign<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>attach-sources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>jar-no-fork<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-javadoc-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>attach-javadocs<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>jar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                    <span class=\"hljs-comment\">&lt;!-- JDK8必须使用下面的配置 --&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">charset</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">charset</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">additionalparam</span>&gt;</span>-Xdoclint:none<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">additionalparam</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"上传打包文件配置\"><a href=\"#上传打包文件配置\" class=\"headerlink\" title=\"上传打包文件配置\"></a>上传打包文件配置</h4><blockquote>\n<p>这里的id需要和setting.xml中的 server 标签中的id对应</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>ossrh<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"发布操作\"><a href=\"#发布操作\" class=\"headerlink\" title=\"发布操作\"></a>发布操作</h2><blockquote>\n<p>执行以下命令进行发布（如果 pom.xml 中 autoReleaseAfterClose 的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了，否则我们继续查看第2步）</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn clean deploy -X # -X可以查看详细信息<br></code></pre></td></tr></table></figure>\n\n<p><strong>打包过程遇到问题：</strong></p>\n<ol>\n<li>javadoc格式错误，需要将错误问题解决。</li>\n<li>failureMessage  No public key，这个是gpg秘钥没有上传成功导致，我在实际操作时，明明上传成功，但是还是这样提示，只能多打包几次就可以了，不知道什么原因。解决方法: 如果你知道哪个密钥服务器会被查询，你可以直接在那里上传你的密钥。</li>\n<li>实验过程中我的实际执行结果是（注意可能会超时，多试几次就好）</li>\n</ol>\n<p><strong>登录<a href=\"https://oss.sonatype.org,然后选择staging/\">https://oss.sonatype.org，然后选择staging</a> Repositories</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/Ggdz5nprUNHfjJT.png\"></p>\n<p><strong>如果在pom文件中的 autoReleaseAfterClose的值没有设置的话，需要手动发布的组件，依次执行Close、Release操作</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/xDv8NKnGCl9HQXy.png\"></p>\n<p><strong>如果Release成功，并且你是首次发布组件，则需要到你创建到issue中回复 “我已经成功发布该组件”，经历大概2小时后，该组件将会同步到对应的maven仓库 。</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/X8nVBHkuAaxfspq.png\"></p>\n<p><strong>如果Close或者Release不成功，你可以如下图操作查看原因并谷歌定位，或者回复咨询</strong></p>\n<p><img src=\"https://i.loli.net/2020/06/11/dY13vnJi4oeNUOr.png\"></p>\n<h3 id=\"查找开源库\"><a href=\"#查找开源库\" class=\"headerlink\" title=\"查找开源库\"></a>查找开源库</h3><p>注意开源库发布出去之后，还是需要等待一段时间，才能在这里 <a href=\"https://search.maven.org/\">https://search.maven.org/</a>  查找我们的开源库，以及查看如何依赖自己的开源库。</p>\n<p><img src=\"https://i.loli.net/2020/06/11/H6F5ywXisr8VAlj.png\"></p>\n<h1 id=\"后续发布到中央仓库\"><a href=\"#后续发布到中央仓库\" class=\"headerlink\" title=\"后续发布到中央仓库\"></a>后续发布到中央仓库</h1><p>首次发布都是比较痛苦的，我们首次进行发布，实际上遇到很多问题，而且还要Sonatype进行验证。第一次总是比较麻烦的，所谓万事开通难拿，接下来后续的发布动作，其实并没有那么麻烦了</p>\n<p>发布命令和原来的一样；如果是和第一次发布在同一台电脑（并且没有重装过了，gpg密钥对还在），那么直接执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn clean deploy -X<br></code></pre></td></tr></table></figure>\n\n<p>如果换电脑发布了，那么就需要将原来的gpg密钥对（公钥和私钥）导出来保存之后，重新导入到新电脑上（上述内容介绍了gpg常用命令）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导出密钥对</span><br>gpg --armor --output &quot;输出文件名&quot; --export &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-public-key.asc --export  &quot;用户ID&quot;<br><br>gpg --armor --output C:\\Config\\gpg\\test-private-key.asc --export-secret-keys<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">导入</span><br>gpg --import test-public-key.asc #导入公钥<br>gpg --import test-private-key.asc #导入私钥<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>参考文章：</p>\n<p><a href=\"https://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1\">https://blog.csdn.net/xp_lx1/article/details/104722832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1</a></p>\n<p><a href=\"http://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/\">http://www.itmuch.com/work/sonartype-deploy-mvn-depencency-to-maven-central/</a></p>\n<p>gpg密钥对过期解决方案：<a href=\"http://blog.didispace.com/maven-gpg-expire/\">http://blog.didispace.com/maven-gpg-expire/</a></p>\n<h1 id=\"gpg-signing-failed-Inappropriate-ioctl-for-device\"><a href=\"#gpg-signing-failed-Inappropriate-ioctl-for-device\" class=\"headerlink\" title=\"gpg: signing failed: Inappropriate ioctl for device\"></a>gpg: signing failed: Inappropriate ioctl for device</h1><p>最近上传jar到中央仓库的时候，遇到一个问题：</p>\n<blockquote>\n<p>gpg: signing failed: Inappropriate ioctl for device</p>\n</blockquote>\n<p>原因是 gpg 在当前终端无法弹出密码输入页面。</p>\n<p>解决办法很简单：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">export</span> GPG_TTY=$(<span class=\"hljs-built_in\">tty</span>)<br></code></pre></td></tr></table></figure>\n\n<p>重新执行，发现会弹出一个密码输入界面。</p>\n<h1 id=\"Mac打maven包——gpg-签名时失败\"><a href=\"#Mac打maven包——gpg-签名时失败\" class=\"headerlink\" title=\"Mac打maven包——gpg: 签名时失败\"></a>Mac打maven包——gpg: 签名时失败</h1><p>gpg: signing failed: Inappropriate ioctl for device<br>原因是GPG版本是最新版本，需要在.gnupg文件夹下增加两个配置，<br>mac下在~&#x2F;.gnupg这两个文件夹下修改<br>gpg.conf和gpg-agent.conf两个文件，<br>在gpg-agent.conf中新建一行添加</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">allow</span>-loopback-pinentry<br></code></pre></td></tr></table></figure>\n\n<p>在gpg.conf添加</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">use</span>-agent <br>pinentry-mode loopback <br></code></pre></td></tr></table></figure>\n\n<p>保存就可以OK了。</p>\n"},{"title":"Jenkins打Docker镜像推送到私有仓库","_content":"# Jenkins打Docker镜像推送到私有仓库\n\n> 因为我的Jenkins是安装在群晖NAS中的docker，所以我这边就以Docker安装Jenkins为例\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923212025.png)\n\n```shell\necho '================Docker开始=============='\n\necho '================登陆阿里云私有镜像仓库=============='\n# 定义镜像名称\nIMAGE_NAME=\"scm\"\n# 查看当前目录\npwd\n# 进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下\ncd scm-web\n# 查看当前目录\npwd\necho \"# 登陆阿里云docker私有仓库\"\ndocker login --username=${username} --password=${password} registry.cn-hangzhou.aliyuncs.com\necho \"# 打镜像tag\"\ndocker -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER} $WORKSPACE/scm-web\necho \"# 推送到仓库\"\ndocker push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 删除本地镜像\"\ndocker rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 退出私有仓库\"\ndocker logout \n\necho '================Docker结束=============='\n\necho \"部署镜像 ===============>>>>>>>>>>>>>>>>>>>>>>> registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\"\n```\n\n如果上来就直接jenkins sh构建运行shell脚本会报：` docker: command not found`\n\n如果普通docker，把宿主机的这两个文件挂载到jenkins容器中，就可以执行docker命令了。\n\n```shell\n/var/run/docker.sock\n/bin/docker\n```\n\n这个是我在网上看到的教程，我还没试过。。。\n\n有空会试试的，看看行不行。\n\n---\n\n\n\n可以是我群晖NAS的docker，我是先在NAS的shell命令下找到docker文件，之后将该文件复制到homes目录下。\n\n```shell\n# 群晖NAS的docker文件在/usr/local/bin/下\ncp /usr/local/bin/docker /volume1/homes/admin/jenkins_docker/bin\n```\n\n之后就在群晖NAS的web页面去操作docker容器，挂载目录。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923213259.png)\n\n再然后jenkins sh构建运行shell脚本会报：`Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?`\n\n这个是因为docker找不到守护进程，那么我们开启宿主机的2375端口。通过这种方式：`docker -H tcp://172.17.0.1:2375 version`\n\n参考文档：https://blog.csdn.net/liumiaocn/article/details/93749435\n\n然后我们在脚本中添加：\n\n```shell\necho '================Docker开始=============='\n\necho '================登陆阿里云私有镜像仓库=============='\n# 定义镜像名称\nIMAGE_NAME=\"scm\"\n# 查看当前目录\npwd\n# 进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下\ncd scm-web\n# 查看当前目录\npwd\necho \"# 登陆阿里云docker私有仓库\"\ndocker login --username=${username} --password=${password} registry.cn-hangzhou.aliyuncs.com\necho \"# 打镜像tag\"\ndocker -H tcp://172.17.0.1:2375 build -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER} $WORKSPACE/scm-web\necho \"# 推送到仓库\"\ndocker -H tcp://172.17.0.1:2375 push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 删除本地镜像\"\ndocker -H tcp://172.17.0.1:2375 rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 退出私有仓库\"\ndocker logout \n\necho '================Docker结束=============='\n\necho \"部署镜像 ===============>>>>>>>>>>>>>>>>>>>>>>> registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\"\n```\n\n至此就在Jenkins中应用保存。\n\n接下来直接构建，查看控制台输出：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214015.png)\n\n我们在看下阿里云容器服务的镜像仓库有没有\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214126.png)\n\nBingGo！！！\n\n打完收工~~~\n","source":"_posts/环境集成/Jenkins打Docker镜像推送到私有仓库.md","raw":"---\ntitle: Jenkins打Docker镜像推送到私有仓库\ntags:\n  - Jenkins\n  - Docker\ncategories:\n  - 环境集成\n---\n# Jenkins打Docker镜像推送到私有仓库\n\n> 因为我的Jenkins是安装在群晖NAS中的docker，所以我这边就以Docker安装Jenkins为例\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923212025.png)\n\n```shell\necho '================Docker开始=============='\n\necho '================登陆阿里云私有镜像仓库=============='\n# 定义镜像名称\nIMAGE_NAME=\"scm\"\n# 查看当前目录\npwd\n# 进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下\ncd scm-web\n# 查看当前目录\npwd\necho \"# 登陆阿里云docker私有仓库\"\ndocker login --username=${username} --password=${password} registry.cn-hangzhou.aliyuncs.com\necho \"# 打镜像tag\"\ndocker -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER} $WORKSPACE/scm-web\necho \"# 推送到仓库\"\ndocker push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 删除本地镜像\"\ndocker rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 退出私有仓库\"\ndocker logout \n\necho '================Docker结束=============='\n\necho \"部署镜像 ===============>>>>>>>>>>>>>>>>>>>>>>> registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\"\n```\n\n如果上来就直接jenkins sh构建运行shell脚本会报：` docker: command not found`\n\n如果普通docker，把宿主机的这两个文件挂载到jenkins容器中，就可以执行docker命令了。\n\n```shell\n/var/run/docker.sock\n/bin/docker\n```\n\n这个是我在网上看到的教程，我还没试过。。。\n\n有空会试试的，看看行不行。\n\n---\n\n\n\n可以是我群晖NAS的docker，我是先在NAS的shell命令下找到docker文件，之后将该文件复制到homes目录下。\n\n```shell\n# 群晖NAS的docker文件在/usr/local/bin/下\ncp /usr/local/bin/docker /volume1/homes/admin/jenkins_docker/bin\n```\n\n之后就在群晖NAS的web页面去操作docker容器，挂载目录。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923213259.png)\n\n再然后jenkins sh构建运行shell脚本会报：`Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?`\n\n这个是因为docker找不到守护进程，那么我们开启宿主机的2375端口。通过这种方式：`docker -H tcp://172.17.0.1:2375 version`\n\n参考文档：https://blog.csdn.net/liumiaocn/article/details/93749435\n\n然后我们在脚本中添加：\n\n```shell\necho '================Docker开始=============='\n\necho '================登陆阿里云私有镜像仓库=============='\n# 定义镜像名称\nIMAGE_NAME=\"scm\"\n# 查看当前目录\npwd\n# 进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下\ncd scm-web\n# 查看当前目录\npwd\necho \"# 登陆阿里云docker私有仓库\"\ndocker login --username=${username} --password=${password} registry.cn-hangzhou.aliyuncs.com\necho \"# 打镜像tag\"\ndocker -H tcp://172.17.0.1:2375 build -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER} $WORKSPACE/scm-web\necho \"# 推送到仓库\"\ndocker -H tcp://172.17.0.1:2375 push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 删除本地镜像\"\ndocker -H tcp://172.17.0.1:2375 rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\necho \"# 退出私有仓库\"\ndocker logout \n\necho '================Docker结束=============='\n\necho \"部署镜像 ===============>>>>>>>>>>>>>>>>>>>>>>> registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-${BUILD_NUMBER}\"\n```\n\n至此就在Jenkins中应用保存。\n\n接下来直接构建，查看控制台输出：\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214015.png)\n\n我们在看下阿里云容器服务的镜像仓库有没有\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214126.png)\n\nBingGo！！！\n\n打完收工~~~\n","slug":"环境集成/Jenkins打Docker镜像推送到私有仓库","published":1,"date":"2020-09-23T13:55:17.000Z","updated":"2022-11-26T17:24:58.819Z","_id":"clay7dbfb00042r2b5as8dahk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Jenkins打Docker镜像推送到私有仓库\"><a href=\"#Jenkins打Docker镜像推送到私有仓库\" class=\"headerlink\" title=\"Jenkins打Docker镜像推送到私有仓库\"></a>Jenkins打Docker镜像推送到私有仓库</h1><blockquote>\n<p>因为我的Jenkins是安装在群晖NAS中的docker，所以我这边就以Docker安装Jenkins为例</p>\n</blockquote>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923212025.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &#x27;================Docker开始==============&#x27;<br><br>echo &#x27;================登陆阿里云私有镜像仓库==============&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">定义镜像名称</span><br>IMAGE_NAME=&quot;scm&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下</span><br>cd scm-web<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br>echo &quot;# 登陆阿里云docker私有仓库&quot;<br>docker login --username=$&#123;username&#125; --password=$&#123;password&#125; registry.cn-hangzhou.aliyuncs.com<br>echo &quot;# 打镜像tag&quot;<br>docker -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125; $WORKSPACE/scm-web<br>echo &quot;# 推送到仓库&quot;<br>docker push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 删除本地镜像&quot;<br>docker rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 退出私有仓库&quot;<br>docker logout <br><br>echo &#x27;================Docker结束==============&#x27;<br><br>echo &quot;部署镜像 ===============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;&quot;<br></code></pre></td></tr></table></figure>\n\n<p>如果上来就直接jenkins sh构建运行shell脚本会报：<code> docker: command not found</code></p>\n<p>如果普通docker，把宿主机的这两个文件挂载到jenkins容器中，就可以执行docker命令了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">/var/run/docker.sock<br>/bin/docker<br></code></pre></td></tr></table></figure>\n\n<p>这个是我在网上看到的教程，我还没试过。。。</p>\n<p>有空会试试的，看看行不行。</p>\n<hr>\n<p>可以是我群晖NAS的docker，我是先在NAS的shell命令下找到docker文件，之后将该文件复制到homes目录下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">群晖NAS的docker文件在/usr/local/bin/下</span><br>cp /usr/local/bin/docker /volume1/homes/admin/jenkins_docker/bin<br></code></pre></td></tr></table></figure>\n\n<p>之后就在群晖NAS的web页面去操作docker容器，挂载目录。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923213259.png\"></p>\n<p>再然后jenkins sh构建运行shell脚本会报：<code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p>\n<p>这个是因为docker找不到守护进程，那么我们开启宿主机的2375端口。通过这种方式：<code>docker -H tcp://172.17.0.1:2375 version</code></p>\n<p>参考文档：<a href=\"https://blog.csdn.net/liumiaocn/article/details/93749435\">https://blog.csdn.net/liumiaocn/article/details/93749435</a></p>\n<p>然后我们在脚本中添加：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &#x27;================Docker开始==============&#x27;<br><br>echo &#x27;================登陆阿里云私有镜像仓库==============&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">定义镜像名称</span><br>IMAGE_NAME=&quot;scm&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下</span><br>cd scm-web<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br>echo &quot;# 登陆阿里云docker私有仓库&quot;<br>docker login --username=$&#123;username&#125; --password=$&#123;password&#125; registry.cn-hangzhou.aliyuncs.com<br>echo &quot;# 打镜像tag&quot;<br>docker -H tcp://172.17.0.1:2375 build -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125; $WORKSPACE/scm-web<br>echo &quot;# 推送到仓库&quot;<br>docker -H tcp://172.17.0.1:2375 push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 删除本地镜像&quot;<br>docker -H tcp://172.17.0.1:2375 rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 退出私有仓库&quot;<br>docker logout <br><br>echo &#x27;================Docker结束==============&#x27;<br><br>echo &quot;部署镜像 ===============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;&quot;<br></code></pre></td></tr></table></figure>\n\n<p>至此就在Jenkins中应用保存。</p>\n<p>接下来直接构建，查看控制台输出：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214015.png\"></p>\n<p>我们在看下阿里云容器服务的镜像仓库有没有</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214126.png\"></p>\n<p>BingGo！！！</p>\n<p>打完收工~~~</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jenkins打Docker镜像推送到私有仓库\"><a href=\"#Jenkins打Docker镜像推送到私有仓库\" class=\"headerlink\" title=\"Jenkins打Docker镜像推送到私有仓库\"></a>Jenkins打Docker镜像推送到私有仓库</h1><blockquote>\n<p>因为我的Jenkins是安装在群晖NAS中的docker，所以我这边就以Docker安装Jenkins为例</p>\n</blockquote>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923212025.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &#x27;================Docker开始==============&#x27;<br><br>echo &#x27;================登陆阿里云私有镜像仓库==============&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">定义镜像名称</span><br>IMAGE_NAME=&quot;scm&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下</span><br>cd scm-web<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br>echo &quot;# 登陆阿里云docker私有仓库&quot;<br>docker login --username=$&#123;username&#125; --password=$&#123;password&#125; registry.cn-hangzhou.aliyuncs.com<br>echo &quot;# 打镜像tag&quot;<br>docker -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125; $WORKSPACE/scm-web<br>echo &quot;# 推送到仓库&quot;<br>docker push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 删除本地镜像&quot;<br>docker rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 退出私有仓库&quot;<br>docker logout <br><br>echo &#x27;================Docker结束==============&#x27;<br><br>echo &quot;部署镜像 ===============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;&quot;<br></code></pre></td></tr></table></figure>\n\n<p>如果上来就直接jenkins sh构建运行shell脚本会报：<code> docker: command not found</code></p>\n<p>如果普通docker，把宿主机的这两个文件挂载到jenkins容器中，就可以执行docker命令了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">/var/run/docker.sock<br>/bin/docker<br></code></pre></td></tr></table></figure>\n\n<p>这个是我在网上看到的教程，我还没试过。。。</p>\n<p>有空会试试的，看看行不行。</p>\n<hr>\n<p>可以是我群晖NAS的docker，我是先在NAS的shell命令下找到docker文件，之后将该文件复制到homes目录下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">群晖NAS的docker文件在/usr/local/bin/下</span><br>cp /usr/local/bin/docker /volume1/homes/admin/jenkins_docker/bin<br></code></pre></td></tr></table></figure>\n\n<p>之后就在群晖NAS的web页面去操作docker容器，挂载目录。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923213259.png\"></p>\n<p>再然后jenkins sh构建运行shell脚本会报：<code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p>\n<p>这个是因为docker找不到守护进程，那么我们开启宿主机的2375端口。通过这种方式：<code>docker -H tcp://172.17.0.1:2375 version</code></p>\n<p>参考文档：<a href=\"https://blog.csdn.net/liumiaocn/article/details/93749435\">https://blog.csdn.net/liumiaocn/article/details/93749435</a></p>\n<p>然后我们在脚本中添加：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo &#x27;================Docker开始==============&#x27;<br><br>echo &#x27;================登陆阿里云私有镜像仓库==============&#x27;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">定义镜像名称</span><br>IMAGE_NAME=&quot;scm&quot;<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入web目录Dockerfil所在目录下,scm-web是我项目目录，Dockerfile文件在该目录下</span><br>cd scm-web<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前目录</span><br>pwd<br>echo &quot;# 登陆阿里云docker私有仓库&quot;<br>docker login --username=$&#123;username&#125; --password=$&#123;password&#125; registry.cn-hangzhou.aliyuncs.com<br>echo &quot;# 打镜像tag&quot;<br>docker -H tcp://172.17.0.1:2375 build -t registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125; $WORKSPACE/scm-web<br>echo &quot;# 推送到仓库&quot;<br>docker -H tcp://172.17.0.1:2375 push registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 删除本地镜像&quot;<br>docker -H tcp://172.17.0.1:2375 rmi registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;<br>echo &quot;# 退出私有仓库&quot;<br>docker logout <br><br>echo &#x27;================Docker结束==============&#x27;<br><br>echo &quot;部署镜像 ===============&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; registry.cn-hangzhou.aliyuncs.com/hopefun/w2002:$IMAGE_NAME-$&#123;BUILD_NUMBER&#125;&quot;<br></code></pre></td></tr></table></figure>\n\n<p>至此就在Jenkins中应用保存。</p>\n<p>接下来直接构建，查看控制台输出：</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214015.png\"></p>\n<p>我们在看下阿里云容器服务的镜像仓库有没有</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200923214126.png\"></p>\n<p>BingGo！！！</p>\n<p>打完收工~~~</p>\n"},{"title":"Jenkins 集成 SonarQube Scanner","_content":"# Jenkins 集成 SonarQube Scanner\n\n## 1. 安装Jenkins\n\n下载安装包，这里我们下载war包：https://jenkins.io/download/\n\n运行**jenkins.war**的方式有两种：\n\n第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）\n\n第二种：直接执行 **java -jar jenkins.war --httpPort=8080**\n\n第三种：Docker方式部署：\n\n```shell\n#查看jenkins版本命令\ndocker search jenkins\n#拉取镜像命令(不标注表示最新的)\ndocker pull jenkins\n#本文的挂载目录是home下\nmkdir /home/jenkins\n#修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误\nchown -R 1000:1000 /home/jenkins/\n#运用镜像启动容器命令\ndocker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins\n```\n\nhttps://jenkins.io/doc/pipeline/tour/getting-started/\n\n这里我们选择第一种方式\n\n启动tomcat（bin/startup.sh）访问 http://localhost:8080/jenkins/\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png)\n\nJenkins安装完成。\n\n## 2.安装SonarQube Scanner插件\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png)\n\n安装完成后、配置SonarQube\n\n在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png)\n\n接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token\n\n在Jenkins中的系统配置中设置SonarQube servers的token\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png)\n\n在Jenkins中的全局配置中安装SonarQube servers\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png)\n\n## 3.创建任务\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png)\n\n配置SVN或者GIT的配置\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png)\n\n最最重要的是，配置SonarQube **analysis properties**\n\n可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍\n\n```properties\nsonar.projectKey=${JOB_NAME}\nsonar.sources=.\nsonar.projectName=${JOB_NAME}\nsonar.projectVersion=${BUILD_VERSION}\n\nsonar.language=java\nsonar.sourceEncoding=UTF-8\n\nsonar.sources=$WORKSPACE\nsonar.java.binaries=$WORKSPACE\n```\n\n其中，sonar.java.binaries属性至关重要，笔者也是试了好多次\n\n相关文档在这里：\n\nhttps://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\n\nhttps://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode\n","source":"_posts/环境集成/Jenkins集成SonarQube.md","raw":"---\ntitle: Jenkins 集成 SonarQube Scanner\ntags:\n  - Jenkins\n  - SonarQube\ncategories:\n  - 环境集成\n---\n# Jenkins 集成 SonarQube Scanner\n\n## 1. 安装Jenkins\n\n下载安装包，这里我们下载war包：https://jenkins.io/download/\n\n运行**jenkins.war**的方式有两种：\n\n第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）\n\n第二种：直接执行 **java -jar jenkins.war --httpPort=8080**\n\n第三种：Docker方式部署：\n\n```shell\n#查看jenkins版本命令\ndocker search jenkins\n#拉取镜像命令(不标注表示最新的)\ndocker pull jenkins\n#本文的挂载目录是home下\nmkdir /home/jenkins\n#修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误\nchown -R 1000:1000 /home/jenkins/\n#运用镜像启动容器命令\ndocker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins\n```\n\nhttps://jenkins.io/doc/pipeline/tour/getting-started/\n\n这里我们选择第一种方式\n\n启动tomcat（bin/startup.sh）访问 http://localhost:8080/jenkins/\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png)\n\nJenkins安装完成。\n\n## 2.安装SonarQube Scanner插件\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png)\n\n安装完成后、配置SonarQube\n\n在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png)\n\n接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token\n\n在Jenkins中的系统配置中设置SonarQube servers的token\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png)\n\n在Jenkins中的全局配置中安装SonarQube servers\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png)\n\n## 3.创建任务\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png)\n\n配置SVN或者GIT的配置\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png)\n\n最最重要的是，配置SonarQube **analysis properties**\n\n可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍\n\n```properties\nsonar.projectKey=${JOB_NAME}\nsonar.sources=.\nsonar.projectName=${JOB_NAME}\nsonar.projectVersion=${BUILD_VERSION}\n\nsonar.language=java\nsonar.sourceEncoding=UTF-8\n\nsonar.sources=$WORKSPACE\nsonar.java.binaries=$WORKSPACE\n```\n\n其中，sonar.java.binaries属性至关重要，笔者也是试了好多次\n\n相关文档在这里：\n\nhttps://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\n\nhttps://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode\n","slug":"环境集成/Jenkins集成SonarQube","published":1,"date":"2020-09-22T11:49:32.000Z","updated":"2022-11-26T17:24:58.818Z","_id":"clay7dbfc00062r2b5g398mf9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Jenkins-集成-SonarQube-Scanner\"><a href=\"#Jenkins-集成-SonarQube-Scanner\" class=\"headerlink\" title=\"Jenkins 集成 SonarQube Scanner\"></a>Jenkins 集成 SonarQube Scanner</h1><h2 id=\"1-安装Jenkins\"><a href=\"#1-安装Jenkins\" class=\"headerlink\" title=\"1. 安装Jenkins\"></a>1. 安装Jenkins</h2><p>下载安装包，这里我们下载war包：<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a></p>\n<p>运行<strong>jenkins.war</strong>的方式有两种：</p>\n<p>第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）</p>\n<p>第二种：直接执行 <strong>java -jar jenkins.war –httpPort&#x3D;8080</strong></p>\n<p>第三种：Docker方式部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看jenkins版本命令</span><br>docker search jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像命令(不标注表示最新的)</span><br>docker pull jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">本文的挂载目录是home下</span><br>mkdir /home/jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误</span><br>chown -R 1000:1000 /home/jenkins/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">运用镜像启动容器命令</span><br>docker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://jenkins.io/doc/pipeline/tour/getting-started/\">https://jenkins.io/doc/pipeline/tour/getting-started/</a></p>\n<p>这里我们选择第一种方式</p>\n<p>启动tomcat（bin&#x2F;startup.sh）访问 <a href=\"http://localhost:8080/jenkins/\">http://localhost:8080/jenkins/</a></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png\"></p>\n<p>Jenkins安装完成。</p>\n<h2 id=\"2-安装SonarQube-Scanner插件\"><a href=\"#2-安装SonarQube-Scanner插件\" class=\"headerlink\" title=\"2.安装SonarQube Scanner插件\"></a>2.安装SonarQube Scanner插件</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png\"></p>\n<p>安装完成后、配置SonarQube</p>\n<p>在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png\"></p>\n<p>接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token</p>\n<p>在Jenkins中的系统配置中设置SonarQube servers的token</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png\"></p>\n<p>在Jenkins中的全局配置中安装SonarQube servers</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png\"></p>\n<h2 id=\"3-创建任务\"><a href=\"#3-创建任务\" class=\"headerlink\" title=\"3.创建任务\"></a>3.创建任务</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png\"></p>\n<p>配置SVN或者GIT的配置</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png\"></p>\n<p>最最重要的是，配置SonarQube <strong>analysis properties</strong></p>\n<p>可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">sonar.projectKey</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">.</span><br><span class=\"hljs-attr\">sonar.projectName</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.projectVersion</span>=<span class=\"hljs-string\">$&#123;BUILD_VERSION&#125;</span><br><br><span class=\"hljs-attr\">sonar.language</span>=<span class=\"hljs-string\">java</span><br><span class=\"hljs-attr\">sonar.sourceEncoding</span>=<span class=\"hljs-string\">UTF-8</span><br><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">$WORKSPACE</span><br><span class=\"hljs-attr\">sonar.java.binaries</span>=<span class=\"hljs-string\">$WORKSPACE</span><br></code></pre></td></tr></table></figure>\n\n<p>其中，sonar.java.binaries属性至关重要，笔者也是试了好多次</p>\n<p>相关文档在这里：</p>\n<p><a href=\"https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\">https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties</a></p>\n<p><a href=\"https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode\">https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jenkins-集成-SonarQube-Scanner\"><a href=\"#Jenkins-集成-SonarQube-Scanner\" class=\"headerlink\" title=\"Jenkins 集成 SonarQube Scanner\"></a>Jenkins 集成 SonarQube Scanner</h1><h2 id=\"1-安装Jenkins\"><a href=\"#1-安装Jenkins\" class=\"headerlink\" title=\"1. 安装Jenkins\"></a>1. 安装Jenkins</h2><p>下载安装包，这里我们下载war包：<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a></p>\n<p>运行<strong>jenkins.war</strong>的方式有两种：</p>\n<p>第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）</p>\n<p>第二种：直接执行 <strong>java -jar jenkins.war –httpPort&#x3D;8080</strong></p>\n<p>第三种：Docker方式部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看jenkins版本命令</span><br>docker search jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像命令(不标注表示最新的)</span><br>docker pull jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">本文的挂载目录是home下</span><br>mkdir /home/jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误</span><br>chown -R 1000:1000 /home/jenkins/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">运用镜像启动容器命令</span><br>docker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://jenkins.io/doc/pipeline/tour/getting-started/\">https://jenkins.io/doc/pipeline/tour/getting-started/</a></p>\n<p>这里我们选择第一种方式</p>\n<p>启动tomcat（bin&#x2F;startup.sh）访问 <a href=\"http://localhost:8080/jenkins/\">http://localhost:8080/jenkins/</a></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png\"></p>\n<p>Jenkins安装完成。</p>\n<h2 id=\"2-安装SonarQube-Scanner插件\"><a href=\"#2-安装SonarQube-Scanner插件\" class=\"headerlink\" title=\"2.安装SonarQube Scanner插件\"></a>2.安装SonarQube Scanner插件</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png\"></p>\n<p>安装完成后、配置SonarQube</p>\n<p>在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png\"></p>\n<p>接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token</p>\n<p>在Jenkins中的系统配置中设置SonarQube servers的token</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png\"></p>\n<p>在Jenkins中的全局配置中安装SonarQube servers</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png\"></p>\n<h2 id=\"3-创建任务\"><a href=\"#3-创建任务\" class=\"headerlink\" title=\"3.创建任务\"></a>3.创建任务</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png\"></p>\n<p>配置SVN或者GIT的配置</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png\"></p>\n<p>最最重要的是，配置SonarQube <strong>analysis properties</strong></p>\n<p>可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">sonar.projectKey</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">.</span><br><span class=\"hljs-attr\">sonar.projectName</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.projectVersion</span>=<span class=\"hljs-string\">$&#123;BUILD_VERSION&#125;</span><br><br><span class=\"hljs-attr\">sonar.language</span>=<span class=\"hljs-string\">java</span><br><span class=\"hljs-attr\">sonar.sourceEncoding</span>=<span class=\"hljs-string\">UTF-8</span><br><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">$WORKSPACE</span><br><span class=\"hljs-attr\">sonar.java.binaries</span>=<span class=\"hljs-string\">$WORKSPACE</span><br></code></pre></td></tr></table></figure>\n\n<p>其中，sonar.java.binaries属性至关重要，笔者也是试了好多次</p>\n<p>相关文档在这里：</p>\n<p><a href=\"https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\">https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties</a></p>\n<p><a href=\"https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode\">https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode</a></p>\n"},{"title":"【环境安装】CerebroKibana7ES","_content":"# Dokcer-compose安装Cerebro/Kibana/ES\n\n```yaml\nversion: '2.2'\nservices:\n  cerebro:\n    image: lmenezes/cerebro:0.8.3\n    container_name: cerebro\n    ports:\n      - \"9000:9000\"\n    command:\n      - -Dhosts.0.host=http://elasticsearch:9200\n    networks:\n      - es7net\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.1.0\n    container_name: kibana7\n    environment:\n      - I18N_LOCALE=zh-CN\n      - XPACK_GRAPH_ENABLED=true\n      - TIMELION_ENABLED=true\n      - XPACK_MONITORING_COLLECTION_ENABLED=\"true\"\n    ports:\n      - \"5601:5601\"\n    networks:\n      - es7net\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_01\n    environment:\n      - cluster.name=test1\n      - node.name=es7_01\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data1:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - es7net\n  elasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_02\n    environment:\n      - cluster.name=geektime\n      - node.name=es7_02\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data2:/usr/share/elasticsearch/data\n    networks:\n      - es7net\n\n\nvolumes:\n  es7data1:\n    driver: local\n  es7data2:\n    driver: local\n\nnetworks:\n  es7net:\n    driver: bridge\n```\n\n","source":"_posts/环境集成/【环境安装】CerebroKibana7ES.md","raw":"---\ntitle: 【环境安装】CerebroKibana7ES\ntags:\n  - ElasticSearch\n  - ES\ncategories:\n  - 环境集成\n---\n# Dokcer-compose安装Cerebro/Kibana/ES\n\n```yaml\nversion: '2.2'\nservices:\n  cerebro:\n    image: lmenezes/cerebro:0.8.3\n    container_name: cerebro\n    ports:\n      - \"9000:9000\"\n    command:\n      - -Dhosts.0.host=http://elasticsearch:9200\n    networks:\n      - es7net\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.1.0\n    container_name: kibana7\n    environment:\n      - I18N_LOCALE=zh-CN\n      - XPACK_GRAPH_ENABLED=true\n      - TIMELION_ENABLED=true\n      - XPACK_MONITORING_COLLECTION_ENABLED=\"true\"\n    ports:\n      - \"5601:5601\"\n    networks:\n      - es7net\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_01\n    environment:\n      - cluster.name=test1\n      - node.name=es7_01\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data1:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - es7net\n  elasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_02\n    environment:\n      - cluster.name=geektime\n      - node.name=es7_02\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data2:/usr/share/elasticsearch/data\n    networks:\n      - es7net\n\n\nvolumes:\n  es7data1:\n    driver: local\n  es7data2:\n    driver: local\n\nnetworks:\n  es7net:\n    driver: bridge\n```\n\n","slug":"环境集成/【环境安装】CerebroKibana7ES","published":1,"date":"2021-02-25T15:11:38.000Z","updated":"2022-11-26T17:24:58.818Z","_id":"clay7dbfd00072r2bdjzt2hjh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\"><a href=\"#Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\" class=\"headerlink\" title=\"Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES\"></a>Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2.2&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">cerebro:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">lmenezes/cerebro:0.8.3</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">cerebro</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;9000:9000&quot;</span><br>    <span class=\"hljs-attr\">command:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-Dhosts.0.host=http://elasticsearch:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">kibana:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/kibana/kibana:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">kibana7</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">I18N_LOCALE=zh-CN</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_GRAPH_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">TIMELION_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_MONITORING_COLLECTION_ENABLED=&quot;true&quot;</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;5601:5601&quot;</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_01</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=test1</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_01</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data1:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">9200</span><span class=\"hljs-string\">:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch2:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_02</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=geektime</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data2:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br><br><br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-attr\">es7data1:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br>  <span class=\"hljs-attr\">es7data2:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">es7net:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\"><a href=\"#Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\" class=\"headerlink\" title=\"Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES\"></a>Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2.2&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">cerebro:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">lmenezes/cerebro:0.8.3</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">cerebro</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;9000:9000&quot;</span><br>    <span class=\"hljs-attr\">command:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-Dhosts.0.host=http://elasticsearch:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">kibana:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/kibana/kibana:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">kibana7</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">I18N_LOCALE=zh-CN</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_GRAPH_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">TIMELION_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_MONITORING_COLLECTION_ENABLED=&quot;true&quot;</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;5601:5601&quot;</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_01</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=test1</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_01</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data1:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">9200</span><span class=\"hljs-string\">:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch2:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_02</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=geektime</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data2:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br><br><br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-attr\">es7data1:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br>  <span class=\"hljs-attr\">es7data2:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">es7net:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"【环境安装】Docker安装","_content":"# 【环境安装】Docker安装\n\n## CentoOS-7\n\n### 安装步骤:\n\n**1、卸载已经安装的Docker**\n\n```shell\nsudo yum remove docker \\\n          docker-client \\\n          docker-client-latest \\\n          docker-common \\\n          docker-latest \\\n          docker-latest-logrotate \\\n          docker-logrotate \\\n          docker-selinux \\\n          docker-engine-selinux \\\n          docker-engine\n```\n\n**2、配置阿里云yum源仓库**\n\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \n# 如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令\n```\n\n**3、查看可以安装的docker版本**\n\n```shell\nyum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序\n```\n\n**4、安装最新版本Docker**\n\n```shell\nsudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装\n```\n\n**5、设Docker阿里云加速器**\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://lkq3q0he.mirror.aliyuncs.com\"]\n}\nEOF\n```\n\n**6、启动Docker**\n\n```shell\nsudo systemctl daemon-reload #重新加载服务配置文件\n\nsudo systemctl enable docker.service && systemctl restart docker.service   #设置开机启动与重启docker服务\n```\n\n**7、查看Docker版本**\n\n```shell\n~#docker version\nClient: Docker Engine - Community\n Version:           19.03.8\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        afacb8b\n Built:             Wed Mar 11 01:27:04 2020\n OS/Arch:           linux/amd64\n Experimental:      false\n...........\n~#docker info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 0\n Server Version: 19.03.8\n Storage Driver: overlay2\n  Backing Filesystem: <unknown>\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n```\n\n## Ubuntu-18\n\n**1. docker安装**\n\n- 卸载旧版本docker\n- 全新安装时，无需执行该步骤\n\n```shell\n$ sudo apt-get remove --purge docker docker-engine docker.io\n```\n\n- 安装依赖包\n\n```shell\n$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n```\n\n- 添加官方密钥\n\n```shell\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n显示OK,表示添加成功\n\n- 使用下面的命令来设置stable存储库\n\n```shell\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n- 更新一下apt包索引\n\n```shell\n$ sudo apt-get update\n```\n\n- 列出可用的版本\n\n```shell\n$ apt-cache madison docker-ce\n```\n\n- 选择你需要的版本安装，我选择的是适合rancher的\n\n```shell\n$ sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu\n```\n\n## 为Docker替换阿里镜像源\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://t44588bn.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n","source":"_posts/环境集成/【环境安装】Docker安装.md","raw":"---\ntitle: 【环境安装】Docker安装\ntags:\n  - Docker\ncategories:\n  - 环境集成\n---\n# 【环境安装】Docker安装\n\n## CentoOS-7\n\n### 安装步骤:\n\n**1、卸载已经安装的Docker**\n\n```shell\nsudo yum remove docker \\\n          docker-client \\\n          docker-client-latest \\\n          docker-common \\\n          docker-latest \\\n          docker-latest-logrotate \\\n          docker-logrotate \\\n          docker-selinux \\\n          docker-engine-selinux \\\n          docker-engine\n```\n\n**2、配置阿里云yum源仓库**\n\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \n# 如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令\n```\n\n**3、查看可以安装的docker版本**\n\n```shell\nyum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序\n```\n\n**4、安装最新版本Docker**\n\n```shell\nsudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装\n```\n\n**5、设Docker阿里云加速器**\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://lkq3q0he.mirror.aliyuncs.com\"]\n}\nEOF\n```\n\n**6、启动Docker**\n\n```shell\nsudo systemctl daemon-reload #重新加载服务配置文件\n\nsudo systemctl enable docker.service && systemctl restart docker.service   #设置开机启动与重启docker服务\n```\n\n**7、查看Docker版本**\n\n```shell\n~#docker version\nClient: Docker Engine - Community\n Version:           19.03.8\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        afacb8b\n Built:             Wed Mar 11 01:27:04 2020\n OS/Arch:           linux/amd64\n Experimental:      false\n...........\n~#docker info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 0\n Server Version: 19.03.8\n Storage Driver: overlay2\n  Backing Filesystem: <unknown>\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n```\n\n## Ubuntu-18\n\n**1. docker安装**\n\n- 卸载旧版本docker\n- 全新安装时，无需执行该步骤\n\n```shell\n$ sudo apt-get remove --purge docker docker-engine docker.io\n```\n\n- 安装依赖包\n\n```shell\n$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n```\n\n- 添加官方密钥\n\n```shell\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n显示OK,表示添加成功\n\n- 使用下面的命令来设置stable存储库\n\n```shell\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n- 更新一下apt包索引\n\n```shell\n$ sudo apt-get update\n```\n\n- 列出可用的版本\n\n```shell\n$ apt-cache madison docker-ce\n```\n\n- 选择你需要的版本安装，我选择的是适合rancher的\n\n```shell\n$ sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu\n```\n\n## 为Docker替换阿里镜像源\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://t44588bn.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n","slug":"环境集成/【环境安装】Docker安装","published":1,"date":"2021-01-15T05:09:52.000Z","updated":"2022-11-26T17:24:58.818Z","_id":"clay7dbfe00082r2b42vdclqz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境安装】Docker安装\"><a href=\"#【环境安装】Docker安装\" class=\"headerlink\" title=\"【环境安装】Docker安装\"></a>【环境安装】Docker安装</h1><h2 id=\"CentoOS-7\"><a href=\"#CentoOS-7\" class=\"headerlink\" title=\"CentoOS-7\"></a>CentoOS-7</h2><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤:\"></a>安装步骤:</h3><p><strong>1、卸载已经安装的Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum remove docker \\<br>          docker-client \\<br>          docker-client-latest \\<br>          docker-common \\<br>          docker-latest \\<br>          docker-latest-logrotate \\<br>          docker-logrotate \\<br>          docker-selinux \\<br>          docker-engine-selinux \\<br>          docker-engine<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、配置阿里云yum源仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>3、查看可以安装的docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序<br></code></pre></td></tr></table></figure>\n\n<p><strong>4、安装最新版本Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装<br></code></pre></td></tr></table></figure>\n\n<p><strong>5、设Docker阿里云加速器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://lkq3q0he.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure>\n\n<p><strong>6、启动Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl daemon-reload #重新加载服务配置文件<br><br>sudo systemctl enable docker.service &amp;&amp; systemctl restart docker.service   #设置开机启动与重启docker服务<br></code></pre></td></tr></table></figure>\n\n<p><strong>7、查看Docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker version</span><br>Client: Docker Engine - Community<br> Version:           19.03.8<br> API version:       1.40<br> Go version:        go1.12.17<br> Git commit:        afacb8b<br> Built:             Wed Mar 11 01:27:04 2020<br> OS/Arch:           linux/amd64<br> Experimental:      false<br>...........<br><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker info</span><br>Client:<br> Debug Mode: false<br><br>Server:<br> Containers: 0<br>  Running: 0<br>  Paused: 0<br>  Stopped: 0<br> Images: 0<br> Server Version: 19.03.8<br> Storage Driver: overlay2<br>  Backing Filesystem: &lt;unknown&gt;<br>  Supports d_type: true<br>  Native Overlay Diff: true<br> Logging Driver: json-file<br> Cgroup Driver: cgroupfs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu-18\"><a href=\"#Ubuntu-18\" class=\"headerlink\" title=\"Ubuntu-18\"></a>Ubuntu-18</h2><p><strong>1. docker安装</strong></p>\n<ul>\n<li>卸载旧版本docker</li>\n<li>全新安装时，无需执行该步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get remove --purge docker docker-engine docker.io</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>安装依赖包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加官方密钥</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></code></pre></td></tr></table></figure>\n\n<p>显示OK,表示添加成功</p>\n<ul>\n<li>使用下面的命令来设置stable存储库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo add-apt-repository <span class=\"hljs-string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>更新一下apt包索引</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get update</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>列出可用的版本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">apt-cache madison docker-ce</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>选择你需要的版本安装，我选择的是适合rancher的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"为Docker替换阿里镜像源\"><a href=\"#为Docker替换阿里镜像源\" class=\"headerlink\" title=\"为Docker替换阿里镜像源\"></a>为Docker替换阿里镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://t44588bn.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境安装】Docker安装\"><a href=\"#【环境安装】Docker安装\" class=\"headerlink\" title=\"【环境安装】Docker安装\"></a>【环境安装】Docker安装</h1><h2 id=\"CentoOS-7\"><a href=\"#CentoOS-7\" class=\"headerlink\" title=\"CentoOS-7\"></a>CentoOS-7</h2><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤:\"></a>安装步骤:</h3><p><strong>1、卸载已经安装的Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum remove docker \\<br>          docker-client \\<br>          docker-client-latest \\<br>          docker-common \\<br>          docker-latest \\<br>          docker-latest-logrotate \\<br>          docker-logrotate \\<br>          docker-selinux \\<br>          docker-engine-selinux \\<br>          docker-engine<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、配置阿里云yum源仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>3、查看可以安装的docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序<br></code></pre></td></tr></table></figure>\n\n<p><strong>4、安装最新版本Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装<br></code></pre></td></tr></table></figure>\n\n<p><strong>5、设Docker阿里云加速器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://lkq3q0he.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure>\n\n<p><strong>6、启动Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl daemon-reload #重新加载服务配置文件<br><br>sudo systemctl enable docker.service &amp;&amp; systemctl restart docker.service   #设置开机启动与重启docker服务<br></code></pre></td></tr></table></figure>\n\n<p><strong>7、查看Docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker version</span><br>Client: Docker Engine - Community<br> Version:           19.03.8<br> API version:       1.40<br> Go version:        go1.12.17<br> Git commit:        afacb8b<br> Built:             Wed Mar 11 01:27:04 2020<br> OS/Arch:           linux/amd64<br> Experimental:      false<br>...........<br><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker info</span><br>Client:<br> Debug Mode: false<br><br>Server:<br> Containers: 0<br>  Running: 0<br>  Paused: 0<br>  Stopped: 0<br> Images: 0<br> Server Version: 19.03.8<br> Storage Driver: overlay2<br>  Backing Filesystem: &lt;unknown&gt;<br>  Supports d_type: true<br>  Native Overlay Diff: true<br> Logging Driver: json-file<br> Cgroup Driver: cgroupfs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu-18\"><a href=\"#Ubuntu-18\" class=\"headerlink\" title=\"Ubuntu-18\"></a>Ubuntu-18</h2><p><strong>1. docker安装</strong></p>\n<ul>\n<li>卸载旧版本docker</li>\n<li>全新安装时，无需执行该步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get remove --purge docker docker-engine docker.io</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>安装依赖包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加官方密钥</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></code></pre></td></tr></table></figure>\n\n<p>显示OK,表示添加成功</p>\n<ul>\n<li>使用下面的命令来设置stable存储库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo add-apt-repository <span class=\"hljs-string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>更新一下apt包索引</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get update</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>列出可用的版本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">apt-cache madison docker-ce</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>选择你需要的版本安装，我选择的是适合rancher的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"为Docker替换阿里镜像源\"><a href=\"#为Docker替换阿里镜像源\" class=\"headerlink\" title=\"为Docker替换阿里镜像源\"></a>为Docker替换阿里镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://t44588bn.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>\n\n"},{"title":"【环境安装】ElasticSearch安装","_content":"# 【环境安装】ElasticSearch安装\n\n**ElasticSearch官方下载地址：https://www.elastic.co/cn/downloads/elasticsearch**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser es #创建ES用户\nchown -R es ${es解压所在目录}\n#切换用户\nsu es\n```\n\n如需下载其他版本的点击这里：\n\n![](https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png)\n\n选择所需要下载的版本\n\n![](https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png)\n\n## ElasticSearch文件目录\n\n| 目录    | 配置文件          | 描述                                                      |\n| ------- | ----------------- | --------------------------------------------------------- |\n| bin     |                   | 脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等 |\n| config  | elasticsearch.yml | 集群配置文件，user，role based相关配置                    |\n| JDK     |                   | Java运行环境                                              |\n| data    | path.data         | 数据文件                                                  |\n| lib     |                   | Java类库                                                  |\n| logs    | path.log          | 日志文件                                                  |\n| modules |                   | 包含所有ES模块                                            |\n| plugins |                   | 包含所有已安装插件                                        |\n\n## JVM 配置\n\n+ 修改JVM - config/jvm.options\n  + 7.1 下载默认设置是 1 GB\n+ 配置的建议\n  + Xms和Xmx设置成一样大\n  + Xmx不要超过机器内存的30%\n  + 不要超过30GB\n\n## ElasticSearch插件\n\n在命令行输入：\n\n```shell\n#安装插件\nbin/elasticsearch-plugin install analysis-icu\n#查看插件\nbin/elasticsearch-plugin list\n#通过URL请求查看安装的插件\nGET http://localhost:9200/_cat/plugins?v\n```\n\n## ElasticSearch启动\n\n单实例启动\n\n配置elasticsearch.yml\n\n```yaml\ncluster.name: my-nodes \t\t\t\t\t\t#集群名称\nnode.name: node-1 \t\t\t\t\t\t\t#节点名称\npath.data: /opt/elasticsearch-7.6.2/data \t#数据\npath.logs: /opt/elasticsearch-7.6.2/logs \t#日志\nnetwork.host: 0.0.0.0 \t\t\t\t\t\t#ip访问限制\ndiscovery.seed_hosts: [\"192.168.1.70\"] \t\t#主机Host列表\ncluster.initial_master_nodes: [\"node-1\"] \t#节点名，单机版只有一个\ngeteway.recover_after_nodes: 1 \t\t\t\t#需要被发现的节点数\n```\n\n跨域访问\n\n```shell\n#跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容\nhttp.cors.enabled: true \nhttp.cors.allow-origin: \"*\"\n```\n\n利用AJAX跨域修改数据的方法如下：\n\n```javascript\nvar baseUrl = 'http://localhost:9200/',\n    putUrl = baseUrl + 'events/logon_event/2',\n    datas = {\n        \"name\": \"郭富城\",\n        \"occur_time\": \"2015-05-09\",\n        \"enabled\": false,\n        \"times\": 22\n    };\n//  提交数据内容\n$.ajax(putUrl, {\n    type : 'PUT',\n    //  一定要设置contentType，以payload方式提交\n    contentType: 'application/json',\n    //  数据一定转换为字符串\n    data : JSON.stringify(datas),\n    success : function(datas) {\n        console.log(datas)\n    }\n})\n```\n\n现在就可以用javascript来制造数据了。\n\n**结论：**ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。\n\n配置好后启动\n\n```shell\nbin/elasticsearch\n```\n\n多实例启动\n\n```shell\n#node.name ：节点名称\n#cluster.name ：集群名称\n#path.data：es数据存储目录\n#network.host：监听IP，默认127.0.0.1，只允许本地连接\n#http.port：端口，默认是9200，9201，9202三个端口\n#cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必\n./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d \n./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n```\n\n启动完成后打开地址：http://ip:port\n\n```json\n{\nname: \"node02\",\ncluster_name: \"Practice\",\ncluster_uuid: \"PqERjAFRSvqVloFf1jiqPw\",\nversion: {\nnumber: \"7.6.2\",\nbuild_flavor: \"default\",\nbuild_type: \"tar\",\nbuild_hash: \"ef48eb35cf30adf4db14086e8aabd07ef6fb113f\",\nbuild_date: \"2020-03-26T06:34:37.794943Z\",\nbuild_snapshot: false,\nlucene_version: \"8.4.0\",\nminimum_wire_compatibility_version: \"6.8.0\",\nminimum_index_compatibility_version: \"6.0.0-beta1\"\n},\ntagline: \"You Know, for Search\"\n}\n```\n\nhttp://ip:port\n\n## _cat\n\nElasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。\n\n### _cat命令\n\n通过使用_cat可以查看支持的命令：\n\n```\n$ curl localhost:9200/_cat\n=^.^=\n/_cat/allocation\n/_cat/shards\n/_cat/shards/{index}\n/_cat/master\n/_cat/nodes\n/_cat/indices\n/_cat/indices/{index}\n/_cat/segments\n/_cat/segments/{index}\n/_cat/count\n/_cat/count/{index}\n/_cat/recovery\n/_cat/recovery/{index}\n/_cat/health\n/_cat/pending_tasks\n/_cat/aliases\n/_cat/aliases/{alias}\n/_cat/thread_pool\n/_cat/plugins\n/_cat/fielddata\n/_cat/fielddata/{fields}\n/_cat/nodeattrs\n/_cat/repositories\n/_cat/snapshots/{repository}\n```\n\n### verbose \n\n每个命令都支持使用?v参数，来显示详细的信息：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### help\n\n每个命令都支持使用help参数，来输出可以显示的列：\n\n```\n$ curl localhost:9200/_cat/master?help\nid   |   | node id\nhost | h | host name\nip   |   | ip address\nnode | n | node name\n```\n\n### headers\n\n通过h参数，可以指定输出的字段：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n\n$ curl localhost:9200/_cat/master?h=host,ip,node\n127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### 数字类型的格式化\n\n很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。\n\n```\n$ curl localhost:9200/_cat/indices?v\nhealth status index pri rep docs.count docs.deleted store.size pri.store.size\nyellow open   test    5   1          3            0      9.kb          9.kb\n```\n","source":"_posts/环境集成/【环境安装】ElasticSearch安装.md","raw":"---\ntitle: 【环境安装】ElasticSearch安装\ntags:\n  - ElasticSearch\n  - ES\ncategories:\n  - 环境集成\n---\n# 【环境安装】ElasticSearch安装\n\n**ElasticSearch官方下载地址：https://www.elastic.co/cn/downloads/elasticsearch**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser es #创建ES用户\nchown -R es ${es解压所在目录}\n#切换用户\nsu es\n```\n\n如需下载其他版本的点击这里：\n\n![](https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png)\n\n选择所需要下载的版本\n\n![](https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png)\n\n## ElasticSearch文件目录\n\n| 目录    | 配置文件          | 描述                                                      |\n| ------- | ----------------- | --------------------------------------------------------- |\n| bin     |                   | 脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等 |\n| config  | elasticsearch.yml | 集群配置文件，user，role based相关配置                    |\n| JDK     |                   | Java运行环境                                              |\n| data    | path.data         | 数据文件                                                  |\n| lib     |                   | Java类库                                                  |\n| logs    | path.log          | 日志文件                                                  |\n| modules |                   | 包含所有ES模块                                            |\n| plugins |                   | 包含所有已安装插件                                        |\n\n## JVM 配置\n\n+ 修改JVM - config/jvm.options\n  + 7.1 下载默认设置是 1 GB\n+ 配置的建议\n  + Xms和Xmx设置成一样大\n  + Xmx不要超过机器内存的30%\n  + 不要超过30GB\n\n## ElasticSearch插件\n\n在命令行输入：\n\n```shell\n#安装插件\nbin/elasticsearch-plugin install analysis-icu\n#查看插件\nbin/elasticsearch-plugin list\n#通过URL请求查看安装的插件\nGET http://localhost:9200/_cat/plugins?v\n```\n\n## ElasticSearch启动\n\n单实例启动\n\n配置elasticsearch.yml\n\n```yaml\ncluster.name: my-nodes \t\t\t\t\t\t#集群名称\nnode.name: node-1 \t\t\t\t\t\t\t#节点名称\npath.data: /opt/elasticsearch-7.6.2/data \t#数据\npath.logs: /opt/elasticsearch-7.6.2/logs \t#日志\nnetwork.host: 0.0.0.0 \t\t\t\t\t\t#ip访问限制\ndiscovery.seed_hosts: [\"192.168.1.70\"] \t\t#主机Host列表\ncluster.initial_master_nodes: [\"node-1\"] \t#节点名，单机版只有一个\ngeteway.recover_after_nodes: 1 \t\t\t\t#需要被发现的节点数\n```\n\n跨域访问\n\n```shell\n#跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容\nhttp.cors.enabled: true \nhttp.cors.allow-origin: \"*\"\n```\n\n利用AJAX跨域修改数据的方法如下：\n\n```javascript\nvar baseUrl = 'http://localhost:9200/',\n    putUrl = baseUrl + 'events/logon_event/2',\n    datas = {\n        \"name\": \"郭富城\",\n        \"occur_time\": \"2015-05-09\",\n        \"enabled\": false,\n        \"times\": 22\n    };\n//  提交数据内容\n$.ajax(putUrl, {\n    type : 'PUT',\n    //  一定要设置contentType，以payload方式提交\n    contentType: 'application/json',\n    //  数据一定转换为字符串\n    data : JSON.stringify(datas),\n    success : function(datas) {\n        console.log(datas)\n    }\n})\n```\n\n现在就可以用javascript来制造数据了。\n\n**结论：**ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。\n\n配置好后启动\n\n```shell\nbin/elasticsearch\n```\n\n多实例启动\n\n```shell\n#node.name ：节点名称\n#cluster.name ：集群名称\n#path.data：es数据存储目录\n#network.host：监听IP，默认127.0.0.1，只允许本地连接\n#http.port：端口，默认是9200，9201，9202三个端口\n#cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必\n./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d \n./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n```\n\n启动完成后打开地址：http://ip:port\n\n```json\n{\nname: \"node02\",\ncluster_name: \"Practice\",\ncluster_uuid: \"PqERjAFRSvqVloFf1jiqPw\",\nversion: {\nnumber: \"7.6.2\",\nbuild_flavor: \"default\",\nbuild_type: \"tar\",\nbuild_hash: \"ef48eb35cf30adf4db14086e8aabd07ef6fb113f\",\nbuild_date: \"2020-03-26T06:34:37.794943Z\",\nbuild_snapshot: false,\nlucene_version: \"8.4.0\",\nminimum_wire_compatibility_version: \"6.8.0\",\nminimum_index_compatibility_version: \"6.0.0-beta1\"\n},\ntagline: \"You Know, for Search\"\n}\n```\n\nhttp://ip:port\n\n## _cat\n\nElasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。\n\n### _cat命令\n\n通过使用_cat可以查看支持的命令：\n\n```\n$ curl localhost:9200/_cat\n=^.^=\n/_cat/allocation\n/_cat/shards\n/_cat/shards/{index}\n/_cat/master\n/_cat/nodes\n/_cat/indices\n/_cat/indices/{index}\n/_cat/segments\n/_cat/segments/{index}\n/_cat/count\n/_cat/count/{index}\n/_cat/recovery\n/_cat/recovery/{index}\n/_cat/health\n/_cat/pending_tasks\n/_cat/aliases\n/_cat/aliases/{alias}\n/_cat/thread_pool\n/_cat/plugins\n/_cat/fielddata\n/_cat/fielddata/{fields}\n/_cat/nodeattrs\n/_cat/repositories\n/_cat/snapshots/{repository}\n```\n\n### verbose \n\n每个命令都支持使用?v参数，来显示详细的信息：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### help\n\n每个命令都支持使用help参数，来输出可以显示的列：\n\n```\n$ curl localhost:9200/_cat/master?help\nid   |   | node id\nhost | h | host name\nip   |   | ip address\nnode | n | node name\n```\n\n### headers\n\n通过h参数，可以指定输出的字段：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n\n$ curl localhost:9200/_cat/master?h=host,ip,node\n127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### 数字类型的格式化\n\n很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。\n\n```\n$ curl localhost:9200/_cat/indices?v\nhealth status index pri rep docs.count docs.deleted store.size pri.store.size\nyellow open   test    5   1          3            0      9.kb          9.kb\n```\n","slug":"环境集成/【环境安装】ElasticSearch安装","published":1,"date":"2021-02-21T13:50:55.000Z","updated":"2022-11-26T17:24:58.818Z","_id":"clay7dbff000a2r2bfyvleifr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境安装】ElasticSearch安装\"><a href=\"#【环境安装】ElasticSearch安装\" class=\"headerlink\" title=\"【环境安装】ElasticSearch安装\"></a>【环境安装】ElasticSearch安装</h1><p><strong>ElasticSearch官方下载地址：<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser es #创建ES用户<br>chown -R es $&#123;es解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su es<br></code></pre></td></tr></table></figure>\n\n<p>如需下载其他版本的点击这里：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png\"></p>\n<p>选择所需要下载的版本</p>\n<p><img src=\"https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png\"></p>\n<h2 id=\"ElasticSearch文件目录\"><a href=\"#ElasticSearch文件目录\" class=\"headerlink\" title=\"ElasticSearch文件目录\"></a>ElasticSearch文件目录</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>配置文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bin</td>\n<td></td>\n<td>脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等</td>\n</tr>\n<tr>\n<td>config</td>\n<td>elasticsearch.yml</td>\n<td>集群配置文件，user，role based相关配置</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td></td>\n<td>Java运行环境</td>\n</tr>\n<tr>\n<td>data</td>\n<td>path.data</td>\n<td>数据文件</td>\n</tr>\n<tr>\n<td>lib</td>\n<td></td>\n<td>Java类库</td>\n</tr>\n<tr>\n<td>logs</td>\n<td>path.log</td>\n<td>日志文件</td>\n</tr>\n<tr>\n<td>modules</td>\n<td></td>\n<td>包含所有ES模块</td>\n</tr>\n<tr>\n<td>plugins</td>\n<td></td>\n<td>包含所有已安装插件</td>\n</tr>\n</tbody></table>\n<h2 id=\"JVM-配置\"><a href=\"#JVM-配置\" class=\"headerlink\" title=\"JVM 配置\"></a>JVM 配置</h2><ul>\n<li>修改JVM - config&#x2F;jvm.options<ul>\n<li>7.1 下载默认设置是 1 GB</li>\n</ul>\n</li>\n<li>配置的建议<ul>\n<li>Xms和Xmx设置成一样大</li>\n<li>Xmx不要超过机器内存的30%</li>\n<li>不要超过30GB</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ElasticSearch插件\"><a href=\"#ElasticSearch插件\" class=\"headerlink\" title=\"ElasticSearch插件\"></a>ElasticSearch插件</h2><p>在命令行输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装插件</span><br>bin/elasticsearch-plugin install analysis-icu<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看插件</span><br>bin/elasticsearch-plugin list<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">通过URL请求查看安装的插件</span><br>GET http://localhost:9200/_cat/plugins?v<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ElasticSearch启动\"><a href=\"#ElasticSearch启动\" class=\"headerlink\" title=\"ElasticSearch启动\"></a>ElasticSearch启动</h2><p>单实例启动</p>\n<p>配置elasticsearch.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">cluster.name:</span> <span class=\"hljs-string\">my-nodes</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#集群名称</span><br><span class=\"hljs-attr\">node.name:</span> <span class=\"hljs-string\">node-1</span> \t\t\t\t\t\t\t<span class=\"hljs-comment\">#节点名称</span><br><span class=\"hljs-attr\">path.data:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/data</span> \t<span class=\"hljs-comment\">#数据</span><br><span class=\"hljs-attr\">path.logs:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/logs</span> \t<span class=\"hljs-comment\">#日志</span><br><span class=\"hljs-attr\">network.host:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">discovery.seed_hosts:</span> [<span class=\"hljs-string\">&quot;192.168.1.70&quot;</span>] \t\t<span class=\"hljs-comment\">#主机Host列表</span><br><span class=\"hljs-attr\">cluster.initial_master_nodes:</span> [<span class=\"hljs-string\">&quot;node-1&quot;</span>] \t<span class=\"hljs-comment\">#节点名，单机版只有一个</span><br><span class=\"hljs-attr\">geteway.recover_after_nodes:</span> <span class=\"hljs-number\">1</span> \t\t\t\t<span class=\"hljs-comment\">#需要被发现的节点数</span><br></code></pre></td></tr></table></figure>\n\n<p>跨域访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容</span><br>http.cors.enabled: true <br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure>\n\n<p>利用AJAX跨域修改数据的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> baseUrl = <span class=\"hljs-string\">&#x27;http://localhost:9200/&#x27;</span>,<br>    putUrl = baseUrl + <span class=\"hljs-string\">&#x27;events/logon_event/2&#x27;</span>,<br>    datas = &#123;<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭富城&quot;</span>,<br>        <span class=\"hljs-string\">&quot;occur_time&quot;</span>: <span class=\"hljs-string\">&quot;2015-05-09&quot;</span>,<br>        <span class=\"hljs-string\">&quot;enabled&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>        <span class=\"hljs-string\">&quot;times&quot;</span>: <span class=\"hljs-number\">22</span><br>    &#125;;<br><span class=\"hljs-comment\">//  提交数据内容</span><br>$.<span class=\"hljs-title function_\">ajax</span>(putUrl, &#123;<br>    type : <span class=\"hljs-string\">&#x27;PUT&#x27;</span>,<br>    <span class=\"hljs-comment\">//  一定要设置contentType，以payload方式提交</span><br>    <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>,<br>    <span class=\"hljs-comment\">//  数据一定转换为字符串</span><br>    data : <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(datas),<br>    success : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">datas</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(datas)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>现在就可以用javascript来制造数据了。</p>\n<p><strong>结论：</strong>ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。</p>\n<p>配置好后启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/elasticsearch<br></code></pre></td></tr></table></figure>\n\n<p>多实例启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">node.name ：节点名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.name ：集群名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">path.data：es数据存储目录</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">network.host：监听IP，默认127.0.0.1，只允许本地连接</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">http.port：端口，默认是9200，9201，9202三个端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必</span><br>./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d <br>./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br>./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br></code></pre></td></tr></table></figure>\n\n<p>启动完成后打开地址：<a href=\"http://ip:port\">http://ip:port</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;node02&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Practice&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_uuid<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PqERjAFRSvqVloFf1jiqPw&quot;</span><span class=\"hljs-punctuation\">,</span><br>version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;7.6.2&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_flavor<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;default&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_type<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;tar&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_hash<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_date<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2020-03-26T06:34:37.794943Z&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_snapshot<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>lucene_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;8.4.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_wire_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.8.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_index_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.0.0-beta1&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>tagline<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;You Know, for Search&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://ip:port\">http://ip:port</a></p>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"_cat\"></a>_cat</h2><p>Elasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。</p>\n<h3 id=\"cat命令\"><a href=\"#cat命令\" class=\"headerlink\" title=\"_cat命令\"></a>_cat命令</h3><p>通过使用_cat可以查看支持的命令：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat<br>=^.^=<br><span class=\"hljs-regexp\">/_cat/</span>allocation<br><span class=\"hljs-regexp\">/_cat/</span>shards<br><span class=\"hljs-regexp\">/_cat/</span>shards/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/m</span>aster<br><span class=\"hljs-regexp\">/_cat/</span>nodes<br><span class=\"hljs-regexp\">/_cat/i</span>ndices<br><span class=\"hljs-regexp\">/_cat/i</span>ndices/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>segments<br><span class=\"hljs-regexp\">/_cat/</span>segments/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span><br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span>/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>recovery<br><span class=\"hljs-regexp\">/_cat/</span>recovery/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>health<br><span class=\"hljs-regexp\">/_cat/</span>pending_tasks<br><span class=\"hljs-regexp\">/_cat/</span>aliases<br><span class=\"hljs-regexp\">/_cat/</span>aliases/&#123;alias&#125;<br><span class=\"hljs-regexp\">/_cat/</span>thread_pool<br><span class=\"hljs-regexp\">/_cat/</span>plugins<br><span class=\"hljs-regexp\">/_cat/</span>fielddata<br><span class=\"hljs-regexp\">/_cat/</span>fielddata/&#123;fields&#125;<br><span class=\"hljs-regexp\">/_cat/</span>nodeattrs<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">repositories</span><br><span class=\"hljs-regexp\">/_cat/</span>snapshots/&#123;repository&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"verbose\"><a href=\"#verbose\" class=\"headerlink\" title=\"verbose\"></a>verbose</h3><p>每个命令都支持使用?v参数，来显示详细的信息：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><p>每个命令都支持使用help参数，来输出可以显示的列：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?help<br>id   |   | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">id</span><br>host | h | host name<br>ip   |   | ip address<br><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">| n</span> | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">name</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"headers\"><a href=\"#headers\" class=\"headerlink\" title=\"headers\"></a>headers</h3><p>通过h参数，可以指定输出的字段：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br><br>$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?h=host,ip,<span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">127</span>.<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数字类型的格式化\"><a href=\"#数字类型的格式化\" class=\"headerlink\" title=\"数字类型的格式化\"></a>数字类型的格式化</h3><p>很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/indices?v<br>health <span class=\"hljs-keyword\">status</span> <span class=\"hljs-built_in\">index</span> pri rep docs.<span class=\"hljs-built_in\">count</span> docs.deleted store.<span class=\"hljs-built_in\">size</span> pri.store.<span class=\"hljs-built_in\">size</span><br>yellow open   test    <span class=\"hljs-number\">5</span>   <span class=\"hljs-number\">1</span>          <span class=\"hljs-number\">3</span>            <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">9.</span>kb          <span class=\"hljs-number\">9.</span>kb<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境安装】ElasticSearch安装\"><a href=\"#【环境安装】ElasticSearch安装\" class=\"headerlink\" title=\"【环境安装】ElasticSearch安装\"></a>【环境安装】ElasticSearch安装</h1><p><strong>ElasticSearch官方下载地址：<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser es #创建ES用户<br>chown -R es $&#123;es解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su es<br></code></pre></td></tr></table></figure>\n\n<p>如需下载其他版本的点击这里：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png\"></p>\n<p>选择所需要下载的版本</p>\n<p><img src=\"https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png\"></p>\n<h2 id=\"ElasticSearch文件目录\"><a href=\"#ElasticSearch文件目录\" class=\"headerlink\" title=\"ElasticSearch文件目录\"></a>ElasticSearch文件目录</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>配置文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bin</td>\n<td></td>\n<td>脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等</td>\n</tr>\n<tr>\n<td>config</td>\n<td>elasticsearch.yml</td>\n<td>集群配置文件，user，role based相关配置</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td></td>\n<td>Java运行环境</td>\n</tr>\n<tr>\n<td>data</td>\n<td>path.data</td>\n<td>数据文件</td>\n</tr>\n<tr>\n<td>lib</td>\n<td></td>\n<td>Java类库</td>\n</tr>\n<tr>\n<td>logs</td>\n<td>path.log</td>\n<td>日志文件</td>\n</tr>\n<tr>\n<td>modules</td>\n<td></td>\n<td>包含所有ES模块</td>\n</tr>\n<tr>\n<td>plugins</td>\n<td></td>\n<td>包含所有已安装插件</td>\n</tr>\n</tbody></table>\n<h2 id=\"JVM-配置\"><a href=\"#JVM-配置\" class=\"headerlink\" title=\"JVM 配置\"></a>JVM 配置</h2><ul>\n<li>修改JVM - config&#x2F;jvm.options<ul>\n<li>7.1 下载默认设置是 1 GB</li>\n</ul>\n</li>\n<li>配置的建议<ul>\n<li>Xms和Xmx设置成一样大</li>\n<li>Xmx不要超过机器内存的30%</li>\n<li>不要超过30GB</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ElasticSearch插件\"><a href=\"#ElasticSearch插件\" class=\"headerlink\" title=\"ElasticSearch插件\"></a>ElasticSearch插件</h2><p>在命令行输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装插件</span><br>bin/elasticsearch-plugin install analysis-icu<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看插件</span><br>bin/elasticsearch-plugin list<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">通过URL请求查看安装的插件</span><br>GET http://localhost:9200/_cat/plugins?v<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ElasticSearch启动\"><a href=\"#ElasticSearch启动\" class=\"headerlink\" title=\"ElasticSearch启动\"></a>ElasticSearch启动</h2><p>单实例启动</p>\n<p>配置elasticsearch.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">cluster.name:</span> <span class=\"hljs-string\">my-nodes</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#集群名称</span><br><span class=\"hljs-attr\">node.name:</span> <span class=\"hljs-string\">node-1</span> \t\t\t\t\t\t\t<span class=\"hljs-comment\">#节点名称</span><br><span class=\"hljs-attr\">path.data:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/data</span> \t<span class=\"hljs-comment\">#数据</span><br><span class=\"hljs-attr\">path.logs:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/logs</span> \t<span class=\"hljs-comment\">#日志</span><br><span class=\"hljs-attr\">network.host:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">discovery.seed_hosts:</span> [<span class=\"hljs-string\">&quot;192.168.1.70&quot;</span>] \t\t<span class=\"hljs-comment\">#主机Host列表</span><br><span class=\"hljs-attr\">cluster.initial_master_nodes:</span> [<span class=\"hljs-string\">&quot;node-1&quot;</span>] \t<span class=\"hljs-comment\">#节点名，单机版只有一个</span><br><span class=\"hljs-attr\">geteway.recover_after_nodes:</span> <span class=\"hljs-number\">1</span> \t\t\t\t<span class=\"hljs-comment\">#需要被发现的节点数</span><br></code></pre></td></tr></table></figure>\n\n<p>跨域访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容</span><br>http.cors.enabled: true <br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure>\n\n<p>利用AJAX跨域修改数据的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> baseUrl = <span class=\"hljs-string\">&#x27;http://localhost:9200/&#x27;</span>,<br>    putUrl = baseUrl + <span class=\"hljs-string\">&#x27;events/logon_event/2&#x27;</span>,<br>    datas = &#123;<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭富城&quot;</span>,<br>        <span class=\"hljs-string\">&quot;occur_time&quot;</span>: <span class=\"hljs-string\">&quot;2015-05-09&quot;</span>,<br>        <span class=\"hljs-string\">&quot;enabled&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>        <span class=\"hljs-string\">&quot;times&quot;</span>: <span class=\"hljs-number\">22</span><br>    &#125;;<br><span class=\"hljs-comment\">//  提交数据内容</span><br>$.<span class=\"hljs-title function_\">ajax</span>(putUrl, &#123;<br>    type : <span class=\"hljs-string\">&#x27;PUT&#x27;</span>,<br>    <span class=\"hljs-comment\">//  一定要设置contentType，以payload方式提交</span><br>    <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>,<br>    <span class=\"hljs-comment\">//  数据一定转换为字符串</span><br>    data : <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(datas),<br>    success : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">datas</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(datas)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>现在就可以用javascript来制造数据了。</p>\n<p><strong>结论：</strong>ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。</p>\n<p>配置好后启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/elasticsearch<br></code></pre></td></tr></table></figure>\n\n<p>多实例启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">node.name ：节点名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.name ：集群名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">path.data：es数据存储目录</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">network.host：监听IP，默认127.0.0.1，只允许本地连接</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">http.port：端口，默认是9200，9201，9202三个端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必</span><br>./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d <br>./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br>./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br></code></pre></td></tr></table></figure>\n\n<p>启动完成后打开地址：<a href=\"http://ip:port\">http://ip:port</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;node02&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Practice&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_uuid<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PqERjAFRSvqVloFf1jiqPw&quot;</span><span class=\"hljs-punctuation\">,</span><br>version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;7.6.2&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_flavor<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;default&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_type<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;tar&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_hash<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_date<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2020-03-26T06:34:37.794943Z&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_snapshot<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>lucene_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;8.4.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_wire_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.8.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_index_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.0.0-beta1&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>tagline<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;You Know, for Search&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://ip:port\">http://ip:port</a></p>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"_cat\"></a>_cat</h2><p>Elasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。</p>\n<h3 id=\"cat命令\"><a href=\"#cat命令\" class=\"headerlink\" title=\"_cat命令\"></a>_cat命令</h3><p>通过使用_cat可以查看支持的命令：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat<br>=^.^=<br><span class=\"hljs-regexp\">/_cat/</span>allocation<br><span class=\"hljs-regexp\">/_cat/</span>shards<br><span class=\"hljs-regexp\">/_cat/</span>shards/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/m</span>aster<br><span class=\"hljs-regexp\">/_cat/</span>nodes<br><span class=\"hljs-regexp\">/_cat/i</span>ndices<br><span class=\"hljs-regexp\">/_cat/i</span>ndices/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>segments<br><span class=\"hljs-regexp\">/_cat/</span>segments/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span><br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span>/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>recovery<br><span class=\"hljs-regexp\">/_cat/</span>recovery/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>health<br><span class=\"hljs-regexp\">/_cat/</span>pending_tasks<br><span class=\"hljs-regexp\">/_cat/</span>aliases<br><span class=\"hljs-regexp\">/_cat/</span>aliases/&#123;alias&#125;<br><span class=\"hljs-regexp\">/_cat/</span>thread_pool<br><span class=\"hljs-regexp\">/_cat/</span>plugins<br><span class=\"hljs-regexp\">/_cat/</span>fielddata<br><span class=\"hljs-regexp\">/_cat/</span>fielddata/&#123;fields&#125;<br><span class=\"hljs-regexp\">/_cat/</span>nodeattrs<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">repositories</span><br><span class=\"hljs-regexp\">/_cat/</span>snapshots/&#123;repository&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"verbose\"><a href=\"#verbose\" class=\"headerlink\" title=\"verbose\"></a>verbose</h3><p>每个命令都支持使用?v参数，来显示详细的信息：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><p>每个命令都支持使用help参数，来输出可以显示的列：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?help<br>id   |   | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">id</span><br>host | h | host name<br>ip   |   | ip address<br><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">| n</span> | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">name</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"headers\"><a href=\"#headers\" class=\"headerlink\" title=\"headers\"></a>headers</h3><p>通过h参数，可以指定输出的字段：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br><br>$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?h=host,ip,<span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">127</span>.<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数字类型的格式化\"><a href=\"#数字类型的格式化\" class=\"headerlink\" title=\"数字类型的格式化\"></a>数字类型的格式化</h3><p>很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/indices?v<br>health <span class=\"hljs-keyword\">status</span> <span class=\"hljs-built_in\">index</span> pri rep docs.<span class=\"hljs-built_in\">count</span> docs.deleted store.<span class=\"hljs-built_in\">size</span> pri.store.<span class=\"hljs-built_in\">size</span><br>yellow open   test    <span class=\"hljs-number\">5</span>   <span class=\"hljs-number\">1</span>          <span class=\"hljs-number\">3</span>            <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">9.</span>kb          <span class=\"hljs-number\">9.</span>kb<br></code></pre></td></tr></table></figure>\n"},{"title":"【环境安装】Kibana安装","_content":"# 【环境安装】Kibana安装\n\n**Kibana官方下载地址：https://www.elastic.co/cn/kibana**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf kibana-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser kibana #创建kibana用户\nchown -R kibana ${kibana解压所在目录}\n#切换用户\nsu kibana\n```\n\nKibana配置文件\n\n```yaml\nserver.port: 5601 \t\t\t\t\t\t\t\t\t#启动端口号\nserver.host: \"0.0.0.0\"\t\t\t\t\t\t\t\t#ip访问限制\nelasticsearch.hosts: [\"http://192.168.1.70:9200\"]\t#配置ES连接地址\nelasticsearch.requestTimeout: 50000 \t\t\t\t#Kibana连接ES超时时，可修改\n#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加\ni18n.locale: \"zh-CN\" #就支持中文显示了。\n```\n\n进入bin目录下，启动\n\n```shell\nbin/kibana\n# 后台启动\nnohup bin/kibana &\n```\n\n插件安装\n\n```shell\nbin/kibana-plugin list\t\t\t\t\t#查看已安装插件\nbin/kibana-plugin install ${插件名称}\t  #安装插件\nbin/kibana-plugin remove\t\t\t\t#卸载插件\n```\n\n","source":"_posts/环境集成/【环境安装】Kibana安装.md","raw":"---\ntitle: 【环境安装】Kibana安装\ntags:\n  - Kibana\ncategories:\n  - 环境集成\n---\n# 【环境安装】Kibana安装\n\n**Kibana官方下载地址：https://www.elastic.co/cn/kibana**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf kibana-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser kibana #创建kibana用户\nchown -R kibana ${kibana解压所在目录}\n#切换用户\nsu kibana\n```\n\nKibana配置文件\n\n```yaml\nserver.port: 5601 \t\t\t\t\t\t\t\t\t#启动端口号\nserver.host: \"0.0.0.0\"\t\t\t\t\t\t\t\t#ip访问限制\nelasticsearch.hosts: [\"http://192.168.1.70:9200\"]\t#配置ES连接地址\nelasticsearch.requestTimeout: 50000 \t\t\t\t#Kibana连接ES超时时，可修改\n#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加\ni18n.locale: \"zh-CN\" #就支持中文显示了。\n```\n\n进入bin目录下，启动\n\n```shell\nbin/kibana\n# 后台启动\nnohup bin/kibana &\n```\n\n插件安装\n\n```shell\nbin/kibana-plugin list\t\t\t\t\t#查看已安装插件\nbin/kibana-plugin install ${插件名称}\t  #安装插件\nbin/kibana-plugin remove\t\t\t\t#卸载插件\n```\n\n","slug":"环境集成/【环境安装】Kibana安装","published":1,"date":"2020-06-06T08:33:53.000Z","updated":"2022-11-26T17:24:58.818Z","_id":"clay7dbff000b2r2b7hjv2clm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境安装】Kibana安装\"><a href=\"#【环境安装】Kibana安装\" class=\"headerlink\" title=\"【环境安装】Kibana安装\"></a>【环境安装】Kibana安装</h1><p><strong>Kibana官方下载地址：<a href=\"https://www.elastic.co/cn/kibana\">https://www.elastic.co/cn/kibana</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser kibana #创建kibana用户<br>chown -R kibana $&#123;kibana解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su kibana<br></code></pre></td></tr></table></figure>\n\n<p>Kibana配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">server.port:</span> <span class=\"hljs-number\">5601</span> \t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#启动端口号</span><br><span class=\"hljs-attr\">server.host:</span> <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">elasticsearch.hosts:</span> [<span class=\"hljs-string\">&quot;http://192.168.1.70:9200&quot;</span>]\t<span class=\"hljs-comment\">#配置ES连接地址</span><br><span class=\"hljs-attr\">elasticsearch.requestTimeout:</span> <span class=\"hljs-number\">50000</span> \t\t\t\t<span class=\"hljs-comment\">#Kibana连接ES超时时，可修改</span><br><span class=\"hljs-comment\">#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加</span><br><span class=\"hljs-attr\">i18n.locale:</span> <span class=\"hljs-string\">&quot;zh-CN&quot;</span> <span class=\"hljs-comment\">#就支持中文显示了。</span><br></code></pre></td></tr></table></figure>\n\n<p>进入bin目录下，启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">后台启动</span><br>nohup bin/kibana &amp;<br></code></pre></td></tr></table></figure>\n\n<p>插件安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana-plugin list\t\t\t\t\t#查看已安装插件<br>bin/kibana-plugin install $&#123;插件名称&#125;\t  #安装插件<br>bin/kibana-plugin remove\t\t\t\t#卸载插件<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境安装】Kibana安装\"><a href=\"#【环境安装】Kibana安装\" class=\"headerlink\" title=\"【环境安装】Kibana安装\"></a>【环境安装】Kibana安装</h1><p><strong>Kibana官方下载地址：<a href=\"https://www.elastic.co/cn/kibana\">https://www.elastic.co/cn/kibana</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser kibana #创建kibana用户<br>chown -R kibana $&#123;kibana解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su kibana<br></code></pre></td></tr></table></figure>\n\n<p>Kibana配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">server.port:</span> <span class=\"hljs-number\">5601</span> \t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#启动端口号</span><br><span class=\"hljs-attr\">server.host:</span> <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">elasticsearch.hosts:</span> [<span class=\"hljs-string\">&quot;http://192.168.1.70:9200&quot;</span>]\t<span class=\"hljs-comment\">#配置ES连接地址</span><br><span class=\"hljs-attr\">elasticsearch.requestTimeout:</span> <span class=\"hljs-number\">50000</span> \t\t\t\t<span class=\"hljs-comment\">#Kibana连接ES超时时，可修改</span><br><span class=\"hljs-comment\">#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加</span><br><span class=\"hljs-attr\">i18n.locale:</span> <span class=\"hljs-string\">&quot;zh-CN&quot;</span> <span class=\"hljs-comment\">#就支持中文显示了。</span><br></code></pre></td></tr></table></figure>\n\n<p>进入bin目录下，启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">后台启动</span><br>nohup bin/kibana &amp;<br></code></pre></td></tr></table></figure>\n\n<p>插件安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana-plugin list\t\t\t\t\t#查看已安装插件<br>bin/kibana-plugin install $&#123;插件名称&#125;\t  #安装插件<br>bin/kibana-plugin remove\t\t\t\t#卸载插件<br></code></pre></td></tr></table></figure>\n\n"},{"title":"【环境安装】Logstash安装","_content":"# Logstash安装\n\n**Logstash官方下载地址：https://www.elastic.co/cn/logstash**\n\n> 下载同ES相同的版本\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz\n#解压安装包\ntar -zxvf logstash-7.7.1.tar.gz\n```\n\n","source":"_posts/环境集成/【环境安装】Logstash安装.md","raw":"---\ntitle: 【环境安装】Logstash安装\ntags:\n  - Logstash\ncategories:\n  - 环境集成\n---\n# Logstash安装\n\n**Logstash官方下载地址：https://www.elastic.co/cn/logstash**\n\n> 下载同ES相同的版本\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz\n#解压安装包\ntar -zxvf logstash-7.7.1.tar.gz\n```\n\n","slug":"环境集成/【环境安装】Logstash安装","published":1,"date":"2021-03-01T07:47:36.000Z","updated":"2022-11-26T17:24:58.819Z","_id":"clay7dbfl000v2r2bhwnrhgcn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Logstash安装\"><a href=\"#Logstash安装\" class=\"headerlink\" title=\"Logstash安装\"></a>Logstash安装</h1><p><strong>Logstash官方下载地址：<a href=\"https://www.elastic.co/cn/logstash\">https://www.elastic.co/cn/logstash</a></strong></p>\n<blockquote>\n<p>下载同ES相同的版本</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf logstash-7.7.1.tar.gz<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Logstash安装\"><a href=\"#Logstash安装\" class=\"headerlink\" title=\"Logstash安装\"></a>Logstash安装</h1><p><strong>Logstash官方下载地址：<a href=\"https://www.elastic.co/cn/logstash\">https://www.elastic.co/cn/logstash</a></strong></p>\n<blockquote>\n<p>下载同ES相同的版本</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf logstash-7.7.1.tar.gz<br></code></pre></td></tr></table></figure>\n\n"},{"title":"【环境搭建】Nexus搭建Maven私服","_content":"# 【环境搭建】Nexus搭建Maven私服\n\n**Nexus官方下载地址：https://help.sonatype.com/repomanager3/download**\n\n### Docker启动\n\n```shell\n#查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3\ndocker search nexus\n#拉取镜像\ndocker pull sonatype/nexus3\n```\n\n**简单方式启动**\n\n```shell\n#指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。\ndocker run -p 8081:8081 --name nexus sonatype/nexus3\n\n#如果有容器和下面要创建的容器同名的话，先删除\ndocker rm <container_name>\n\n#指定虚拟机与容器共享的文件夹\nmkdir /usr/local/docker/nexus/nexus-data\n\n#启动容器\ndocker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3\n\n#指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限\nchmod 777 /usr/local/docker/nexus/nexus-data\n```\n\n### 利用docker-compose启动\n\n```shell\n#创建docker-compose.yml\nmkdir /usr/local/docker\ncd /usr/local/docker\nvi docker-compose.yml\n```\n\n**docker-compose.yml内容如下：**\n\n```shell\nversion: \"3.7\"\nservices:\n  nexus:\n    restart: \"no\" \n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081 \n    volumes:\n      - /usr/local/docker/nexus/nexus-data:/nexus-data\n```\n\n> version : 指定docker-compose语法版本，版本不同，支持的docker也不同\n\n> restart\n\n> services : 多种服务的根节点\n\n> nexus : 服务名随意起，代表要创建的服务\n\n> restart : 容器的重启策略，有no、always、on-failure、\n> unless-stopped四种可选值。\n\n> image : 容器依据的镜像\n\n> container_name : 容器名\n\n> ports : 端口\n\n> volumes : 数据卷\n\n启动后访问地址：http://ip:port/\n\n**默认账号：admin**\n\n**管理员登录密码在 `nexus/nexus-data` 中`admin` 开头的文件中，将其拷贝输入即可。**\n\n**登录之后会要求修改密码，按要求修改即可。**\n\n## Nexus 配置\n\n**在Maven的conf下的setting.xml文件中配置**\n\n```xml\n<server>\n  <id>releases</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n<server>\n  <id>snapshots</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n```\n\n**配置仓库地址**\n\n```xml\n<!-- 配置远程仓库、阿里云代理镜像 -->\n<mirror>\n   <!--该镜像的唯一标识符。id用来区分不同的mirror元素。 -->\n   <id>maven-public</id>\n   <!--镜像名称 -->\n   <name>maven-public</name>\n   <!--*指的是访问任何仓库都使用我们的私服-->\n   <mirrorOf>*</mirrorOf>\n   <!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->\n   <url>http://${ip}:${port}/repository/maven-public/</url>\n</mirror>\n\n<mirror>\n  <id>nexus-aliyun</id>\n  <mirrorOf>*</mirrorOf>\n  <name>Nexus aliyun</name>\n  <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror>\n\n<mirror>\n  <id>alimaven</id>\n  <mirrorOf>central</mirrorOf>\n  <name>aliyun maven</name>\n  <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n</mirror>\n```\n\n**在项目pom.xml文件里配置私服仓库地址**\n\n```xml\n<repositories>\n  <repository>\n    <id>maven-nexus</id>\n    <name>maven-nexus</name>\n    <url>http://${ip}:${port}/repository/maven-public/</url>\n    <releases>\n      <enabled>true</enabled>\n    </releases>\n    <snapshots>\n      <enabled>true</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n```\n\n**发布私有jar包**\n\n```xml\n<!-- 私服仓库地址、该id对应的是setting.xml文件里的<server>里id配置。名称必须一样 -->\n<distributionManagement>\n  <repository>\n    <id>releases</id>\n    <name>Releases</name>\n    <url>http://${ip}:${port}/repository/maven-releases/</url>\n  </repository>\n  <snapshotRepository>\n    <id>snapshots</id>\n    <name>Snapshot</name>\n    <url>http://${ip}:${port}/repository/maven-snapshots/</url>\n  </snapshotRepository>\n</distributionManagement>\n<!-- 发布私有包时的maven打包插件 -->\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-source-plugin</artifactId>\n    </plugin>\n  </plugins>\n</build>\n```\n\n#### 私服工作原理：\n\n配置Nexus之前，需要先了解一下私服的工作原理，如下图：\n\n![](https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png)\n\n找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；\n\n#### Nexus仓库类型介绍\n\n默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。\n\n- hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）\n- proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包\n- group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）\n\n","source":"_posts/环境集成/【环境搭建】Nexus搭建Maven私服.md","raw":"---\ntitle: 【环境搭建】Nexus搭建Maven私服\ntags:\n  - Nexus\n  - Maven\ncategories:\n  - 环境集成\n---\n# 【环境搭建】Nexus搭建Maven私服\n\n**Nexus官方下载地址：https://help.sonatype.com/repomanager3/download**\n\n### Docker启动\n\n```shell\n#查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3\ndocker search nexus\n#拉取镜像\ndocker pull sonatype/nexus3\n```\n\n**简单方式启动**\n\n```shell\n#指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。\ndocker run -p 8081:8081 --name nexus sonatype/nexus3\n\n#如果有容器和下面要创建的容器同名的话，先删除\ndocker rm <container_name>\n\n#指定虚拟机与容器共享的文件夹\nmkdir /usr/local/docker/nexus/nexus-data\n\n#启动容器\ndocker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3\n\n#指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限\nchmod 777 /usr/local/docker/nexus/nexus-data\n```\n\n### 利用docker-compose启动\n\n```shell\n#创建docker-compose.yml\nmkdir /usr/local/docker\ncd /usr/local/docker\nvi docker-compose.yml\n```\n\n**docker-compose.yml内容如下：**\n\n```shell\nversion: \"3.7\"\nservices:\n  nexus:\n    restart: \"no\" \n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081 \n    volumes:\n      - /usr/local/docker/nexus/nexus-data:/nexus-data\n```\n\n> version : 指定docker-compose语法版本，版本不同，支持的docker也不同\n\n> restart\n\n> services : 多种服务的根节点\n\n> nexus : 服务名随意起，代表要创建的服务\n\n> restart : 容器的重启策略，有no、always、on-failure、\n> unless-stopped四种可选值。\n\n> image : 容器依据的镜像\n\n> container_name : 容器名\n\n> ports : 端口\n\n> volumes : 数据卷\n\n启动后访问地址：http://ip:port/\n\n**默认账号：admin**\n\n**管理员登录密码在 `nexus/nexus-data` 中`admin` 开头的文件中，将其拷贝输入即可。**\n\n**登录之后会要求修改密码，按要求修改即可。**\n\n## Nexus 配置\n\n**在Maven的conf下的setting.xml文件中配置**\n\n```xml\n<server>\n  <id>releases</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n<server>\n  <id>snapshots</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n```\n\n**配置仓库地址**\n\n```xml\n<!-- 配置远程仓库、阿里云代理镜像 -->\n<mirror>\n   <!--该镜像的唯一标识符。id用来区分不同的mirror元素。 -->\n   <id>maven-public</id>\n   <!--镜像名称 -->\n   <name>maven-public</name>\n   <!--*指的是访问任何仓库都使用我们的私服-->\n   <mirrorOf>*</mirrorOf>\n   <!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->\n   <url>http://${ip}:${port}/repository/maven-public/</url>\n</mirror>\n\n<mirror>\n  <id>nexus-aliyun</id>\n  <mirrorOf>*</mirrorOf>\n  <name>Nexus aliyun</name>\n  <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror>\n\n<mirror>\n  <id>alimaven</id>\n  <mirrorOf>central</mirrorOf>\n  <name>aliyun maven</name>\n  <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n</mirror>\n```\n\n**在项目pom.xml文件里配置私服仓库地址**\n\n```xml\n<repositories>\n  <repository>\n    <id>maven-nexus</id>\n    <name>maven-nexus</name>\n    <url>http://${ip}:${port}/repository/maven-public/</url>\n    <releases>\n      <enabled>true</enabled>\n    </releases>\n    <snapshots>\n      <enabled>true</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n```\n\n**发布私有jar包**\n\n```xml\n<!-- 私服仓库地址、该id对应的是setting.xml文件里的<server>里id配置。名称必须一样 -->\n<distributionManagement>\n  <repository>\n    <id>releases</id>\n    <name>Releases</name>\n    <url>http://${ip}:${port}/repository/maven-releases/</url>\n  </repository>\n  <snapshotRepository>\n    <id>snapshots</id>\n    <name>Snapshot</name>\n    <url>http://${ip}:${port}/repository/maven-snapshots/</url>\n  </snapshotRepository>\n</distributionManagement>\n<!-- 发布私有包时的maven打包插件 -->\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-source-plugin</artifactId>\n    </plugin>\n  </plugins>\n</build>\n```\n\n#### 私服工作原理：\n\n配置Nexus之前，需要先了解一下私服的工作原理，如下图：\n\n![](https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png)\n\n找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；\n\n#### Nexus仓库类型介绍\n\n默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。\n\n- hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）\n- proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包\n- group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）\n\n","slug":"环境集成/【环境搭建】Nexus搭建Maven私服","published":1,"date":"2022-11-26T17:00:56.810Z","updated":"2022-11-26T17:24:58.819Z","_id":"clay7dbfl000w2r2b1cnueniu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境搭建】Nexus搭建Maven私服\"><a href=\"#【环境搭建】Nexus搭建Maven私服\" class=\"headerlink\" title=\"【环境搭建】Nexus搭建Maven私服\"></a>【环境搭建】Nexus搭建Maven私服</h1><p><strong>Nexus官方下载地址：<a href=\"https://help.sonatype.com/repomanager3/download\">https://help.sonatype.com/repomanager3/download</a></strong></p>\n<h3 id=\"Docker启动\"><a href=\"#Docker启动\" class=\"headerlink\" title=\"Docker启动\"></a>Docker启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3</span><br>docker search nexus<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像</span><br>docker pull sonatype/nexus3<br></code></pre></td></tr></table></figure>\n\n<p><strong>简单方式启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。</span><br>docker run -p 8081:8081 --name nexus sonatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">如果有容器和下面要创建的容器同名的话，先删除</span><br>docker rm &lt;container_name&gt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定虚拟机与容器共享的文件夹</span><br>mkdir /usr/local/docker/nexus/nexus-data<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动容器</span><br>docker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限</span><br>chmod 777 /usr/local/docker/nexus/nexus-data<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"利用docker-compose启动\"><a href=\"#利用docker-compose启动\" class=\"headerlink\" title=\"利用docker-compose启动\"></a>利用docker-compose启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">创建docker-compose.yml</span><br>mkdir /usr/local/docker<br>cd /usr/local/docker<br>vi docker-compose.yml<br></code></pre></td></tr></table></figure>\n\n<p><strong>docker-compose.yml内容如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">version: &quot;3.7&quot;<br>services:<br>  nexus:<br>    restart: &quot;no&quot; <br>    image: sonatype/nexus3<br>    container_name: nexus<br>    ports:<br>      - 8081:8081 <br>    volumes:<br>      - /usr/local/docker/nexus/nexus-data:/nexus-data<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>version : 指定docker-compose语法版本，版本不同，支持的docker也不同</p>\n</blockquote>\n<blockquote>\n<p>restart</p>\n</blockquote>\n<blockquote>\n<p>services : 多种服务的根节点</p>\n</blockquote>\n<blockquote>\n<p>nexus : 服务名随意起，代表要创建的服务</p>\n</blockquote>\n<blockquote>\n<p>restart : 容器的重启策略，有no、always、on-failure、<br>unless-stopped四种可选值。</p>\n</blockquote>\n<blockquote>\n<p>image : 容器依据的镜像</p>\n</blockquote>\n<blockquote>\n<p>container_name : 容器名</p>\n</blockquote>\n<blockquote>\n<p>ports : 端口</p>\n</blockquote>\n<blockquote>\n<p>volumes : 数据卷</p>\n</blockquote>\n<p>启动后访问地址：<a href=\"http://ip:port/\">http://ip:port/</a></p>\n<p><strong>默认账号：admin</strong></p>\n<p><strong>管理员登录密码在 <code>nexus/nexus-data</code> 中<code>admin</code> 开头的文件中，将其拷贝输入即可。</strong></p>\n<p><strong>登录之后会要求修改密码，按要求修改即可。</strong></p>\n<h2 id=\"Nexus-配置\"><a href=\"#Nexus-配置\" class=\"headerlink\" title=\"Nexus 配置\"></a>Nexus 配置</h2><p><strong>在Maven的conf下的setting.xml文件中配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>配置仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 配置远程仓库、阿里云代理镜像 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--镜像名称 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus-aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Nexus aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>在项目pom.xml文件里配置私服仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repositories</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releases</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releases</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshots</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshots</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>发布私有jar包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 私服仓库地址、该id对应的是setting.xml文件里的&lt;server&gt;里id配置。名称必须一样 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-releases/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Snapshot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-snapshots/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 发布私有包时的maven打包插件 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"私服工作原理：\"><a href=\"#私服工作原理：\" class=\"headerlink\" title=\"私服工作原理：\"></a>私服工作原理：</h4><p>配置Nexus之前，需要先了解一下私服的工作原理，如下图：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png\"></p>\n<p>找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；</p>\n<h4 id=\"Nexus仓库类型介绍\"><a href=\"#Nexus仓库类型介绍\" class=\"headerlink\" title=\"Nexus仓库类型介绍\"></a>Nexus仓库类型介绍</h4><p>默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。</p>\n<ul>\n<li>hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）</li>\n<li>proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包</li>\n<li>group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境搭建】Nexus搭建Maven私服\"><a href=\"#【环境搭建】Nexus搭建Maven私服\" class=\"headerlink\" title=\"【环境搭建】Nexus搭建Maven私服\"></a>【环境搭建】Nexus搭建Maven私服</h1><p><strong>Nexus官方下载地址：<a href=\"https://help.sonatype.com/repomanager3/download\">https://help.sonatype.com/repomanager3/download</a></strong></p>\n<h3 id=\"Docker启动\"><a href=\"#Docker启动\" class=\"headerlink\" title=\"Docker启动\"></a>Docker启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3</span><br>docker search nexus<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像</span><br>docker pull sonatype/nexus3<br></code></pre></td></tr></table></figure>\n\n<p><strong>简单方式启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。</span><br>docker run -p 8081:8081 --name nexus sonatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">如果有容器和下面要创建的容器同名的话，先删除</span><br>docker rm &lt;container_name&gt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定虚拟机与容器共享的文件夹</span><br>mkdir /usr/local/docker/nexus/nexus-data<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动容器</span><br>docker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限</span><br>chmod 777 /usr/local/docker/nexus/nexus-data<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"利用docker-compose启动\"><a href=\"#利用docker-compose启动\" class=\"headerlink\" title=\"利用docker-compose启动\"></a>利用docker-compose启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">创建docker-compose.yml</span><br>mkdir /usr/local/docker<br>cd /usr/local/docker<br>vi docker-compose.yml<br></code></pre></td></tr></table></figure>\n\n<p><strong>docker-compose.yml内容如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">version: &quot;3.7&quot;<br>services:<br>  nexus:<br>    restart: &quot;no&quot; <br>    image: sonatype/nexus3<br>    container_name: nexus<br>    ports:<br>      - 8081:8081 <br>    volumes:<br>      - /usr/local/docker/nexus/nexus-data:/nexus-data<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>version : 指定docker-compose语法版本，版本不同，支持的docker也不同</p>\n</blockquote>\n<blockquote>\n<p>restart</p>\n</blockquote>\n<blockquote>\n<p>services : 多种服务的根节点</p>\n</blockquote>\n<blockquote>\n<p>nexus : 服务名随意起，代表要创建的服务</p>\n</blockquote>\n<blockquote>\n<p>restart : 容器的重启策略，有no、always、on-failure、<br>unless-stopped四种可选值。</p>\n</blockquote>\n<blockquote>\n<p>image : 容器依据的镜像</p>\n</blockquote>\n<blockquote>\n<p>container_name : 容器名</p>\n</blockquote>\n<blockquote>\n<p>ports : 端口</p>\n</blockquote>\n<blockquote>\n<p>volumes : 数据卷</p>\n</blockquote>\n<p>启动后访问地址：<a href=\"http://ip:port/\">http://ip:port/</a></p>\n<p><strong>默认账号：admin</strong></p>\n<p><strong>管理员登录密码在 <code>nexus/nexus-data</code> 中<code>admin</code> 开头的文件中，将其拷贝输入即可。</strong></p>\n<p><strong>登录之后会要求修改密码，按要求修改即可。</strong></p>\n<h2 id=\"Nexus-配置\"><a href=\"#Nexus-配置\" class=\"headerlink\" title=\"Nexus 配置\"></a>Nexus 配置</h2><p><strong>在Maven的conf下的setting.xml文件中配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>配置仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 配置远程仓库、阿里云代理镜像 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--镜像名称 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus-aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Nexus aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>在项目pom.xml文件里配置私服仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repositories</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releases</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releases</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshots</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshots</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>发布私有jar包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 私服仓库地址、该id对应的是setting.xml文件里的&lt;server&gt;里id配置。名称必须一样 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-releases/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Snapshot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-snapshots/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 发布私有包时的maven打包插件 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"私服工作原理：\"><a href=\"#私服工作原理：\" class=\"headerlink\" title=\"私服工作原理：\"></a>私服工作原理：</h4><p>配置Nexus之前，需要先了解一下私服的工作原理，如下图：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png\"></p>\n<p>找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；</p>\n<h4 id=\"Nexus仓库类型介绍\"><a href=\"#Nexus仓库类型介绍\" class=\"headerlink\" title=\"Nexus仓库类型介绍\"></a>Nexus仓库类型介绍</h4><p>默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。</p>\n<ul>\n<li>hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）</li>\n<li>proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包</li>\n<li>group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）</li>\n</ul>\n"},{"title":"阿里Arthas如何使用","_content":"# 阿里Arthas如何使用\n\n[arthas官方文档](https://arthas.gitee.io/index.html)\n\n本文介绍下arthas如何监控服务集群\n\n## [Web Console](https://arthas.gitee.io/web-console.html)\n\n> 先从arthas官方github上releases下载[arthas-tunnel-server](https://github.com/alibaba/arthas/releases)\n>\n> Arthas tunnel server是一个spring boot fat jar应用，直接`java -jar`启动：\n>\n> `java -jar  arthas-tunnel-server.jar`\n>\n> 默认情况下，arthas tunnel server的web端口是`8080`，arthas agent连接的端口是`7777`。\n>\n> 启动之后，可以访问 http://127.0.0.1:8080/ ，再通过`agentId`连接到已注册的arthas agent上。\n>\n> 通过Spring Boot的Endpoint，可以查看到具体的连接信息： http://127.0.0.1:8080/actuator/arthas ，登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到，比如：\n>\n> ![](https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png)\n\n**[Web页面](http://127.0.0.1:8080/ )：**\n\n![](https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png)\n\n**[Spring Boot的Endpoint查看到具体的连接信息]( http://127.0.0.1:8080/actuator/arthas )**\n\n> 登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到\n\n![](https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png)\n\n## Arthas Spring Boot Starter\n\n> 注意：目前只支持SpringBoot2\n\n**添加pom依赖**\n\n```xml\n<dependency>\n  <groupId>com.taobao.arthas</groupId>\n  <artifactId>arthas-spring-boot-starter</artifactId>\n  <version>${arthas.version}</version>\n</dependency>\n```\n\n最新版本：[查看](https://search.maven.org/search?q=arthas-spring-boot-starter)\n\n**配置属性**\n\n```properties\n# arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个\narthas.tunnel-server=ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址\n# 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。\narthas.telnetPort=-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口\narthas.httpPort=-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口\n```\n\n之后直接启动SpringBoot服务后查看\n\n![](https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png)\n\n查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。\n\n![](https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png)\n\n之后，我们就可以通过arthas的相关命令去操作该服务\n\n","source":"_posts/环境集成/阿里Arthas如何使用.md","raw":"---\ntitle: 阿里Arthas如何使用\ntags:\n  - Arthas\ncategories:\n  - 环境集成\n---\n# 阿里Arthas如何使用\n\n[arthas官方文档](https://arthas.gitee.io/index.html)\n\n本文介绍下arthas如何监控服务集群\n\n## [Web Console](https://arthas.gitee.io/web-console.html)\n\n> 先从arthas官方github上releases下载[arthas-tunnel-server](https://github.com/alibaba/arthas/releases)\n>\n> Arthas tunnel server是一个spring boot fat jar应用，直接`java -jar`启动：\n>\n> `java -jar  arthas-tunnel-server.jar`\n>\n> 默认情况下，arthas tunnel server的web端口是`8080`，arthas agent连接的端口是`7777`。\n>\n> 启动之后，可以访问 http://127.0.0.1:8080/ ，再通过`agentId`连接到已注册的arthas agent上。\n>\n> 通过Spring Boot的Endpoint，可以查看到具体的连接信息： http://127.0.0.1:8080/actuator/arthas ，登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到，比如：\n>\n> ![](https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png)\n\n**[Web页面](http://127.0.0.1:8080/ )：**\n\n![](https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png)\n\n**[Spring Boot的Endpoint查看到具体的连接信息]( http://127.0.0.1:8080/actuator/arthas )**\n\n> 登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到\n\n![](https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png)\n\n## Arthas Spring Boot Starter\n\n> 注意：目前只支持SpringBoot2\n\n**添加pom依赖**\n\n```xml\n<dependency>\n  <groupId>com.taobao.arthas</groupId>\n  <artifactId>arthas-spring-boot-starter</artifactId>\n  <version>${arthas.version}</version>\n</dependency>\n```\n\n最新版本：[查看](https://search.maven.org/search?q=arthas-spring-boot-starter)\n\n**配置属性**\n\n```properties\n# arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个\narthas.tunnel-server=ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址\n# 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。\narthas.telnetPort=-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口\narthas.httpPort=-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口\n```\n\n之后直接启动SpringBoot服务后查看\n\n![](https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png)\n\n查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。\n\n![](https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png)\n\n之后，我们就可以通过arthas的相关命令去操作该服务\n\n","slug":"环境集成/阿里Arthas如何使用","published":1,"date":"2021-05-25T11:55:30.000Z","updated":"2022-11-26T17:24:58.819Z","_id":"clay7dbfm000y2r2bepv6bglu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"阿里Arthas如何使用\"><a href=\"#阿里Arthas如何使用\" class=\"headerlink\" title=\"阿里Arthas如何使用\"></a>阿里Arthas如何使用</h1><p><a href=\"https://arthas.gitee.io/index.html\">arthas官方文档</a></p>\n<p>本文介绍下arthas如何监控服务集群</p>\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a><a href=\"https://arthas.gitee.io/web-console.html\">Web Console</a></h2><blockquote>\n<p>先从arthas官方github上releases下载<a href=\"https://github.com/alibaba/arthas/releases\">arthas-tunnel-server</a></p>\n<p>Arthas tunnel server是一个spring boot fat jar应用，直接<code>java -jar</code>启动：</p>\n<p><code>java -jar  arthas-tunnel-server.jar</code></p>\n<p>默认情况下，arthas tunnel server的web端口是<code>8080</code>，arthas agent连接的端口是<code>7777</code>。</p>\n<p>启动之后，可以访问 <a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a> ，再通过<code>agentId</code>连接到已注册的arthas agent上。</p>\n<p>通过Spring Boot的Endpoint，可以查看到具体的连接信息： <a href=\"http://127.0.0.1:8080/actuator/arthas\">http://127.0.0.1:8080/actuator/arthas</a> ，登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到，比如：</p>\n<p><img src=\"https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png\"></p>\n</blockquote>\n<p><strong><a href=\"http://127.0.0.1:8080/\">Web页面</a>：</strong></p>\n<p><img src=\"https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png\"></p>\n<p><strong><a href=\"http://127.0.0.1:8080/actuator/arthas\">Spring Boot的Endpoint查看到具体的连接信息</a></strong></p>\n<blockquote>\n<p>登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png\"></p>\n<h2 id=\"Arthas-Spring-Boot-Starter\"><a href=\"#Arthas-Spring-Boot-Starter\" class=\"headerlink\" title=\"Arthas Spring Boot Starter\"></a>Arthas Spring Boot Starter</h2><blockquote>\n<p>注意：目前只支持SpringBoot2</p>\n</blockquote>\n<p><strong>添加pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.taobao.arthas<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;arthas.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>最新版本：<a href=\"https://search.maven.org/search?q=arthas-spring-boot-starter\">查看</a></p>\n<p><strong>配置属性</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\"># arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个</span><br><span class=\"hljs-attr\">arthas.tunnel-server</span>=<span class=\"hljs-string\">ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址</span><br><span class=\"hljs-comment\"># 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。</span><br><span class=\"hljs-attr\">arthas.telnetPort</span>=<span class=\"hljs-string\">-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口</span><br><span class=\"hljs-attr\">arthas.httpPort</span>=<span class=\"hljs-string\">-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口</span><br></code></pre></td></tr></table></figure>\n\n<p>之后直接启动SpringBoot服务后查看</p>\n<p><img src=\"https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png\"></p>\n<p>查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。</p>\n<p><img src=\"https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png\"></p>\n<p>之后，我们就可以通过arthas的相关命令去操作该服务</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"阿里Arthas如何使用\"><a href=\"#阿里Arthas如何使用\" class=\"headerlink\" title=\"阿里Arthas如何使用\"></a>阿里Arthas如何使用</h1><p><a href=\"https://arthas.gitee.io/index.html\">arthas官方文档</a></p>\n<p>本文介绍下arthas如何监控服务集群</p>\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a><a href=\"https://arthas.gitee.io/web-console.html\">Web Console</a></h2><blockquote>\n<p>先从arthas官方github上releases下载<a href=\"https://github.com/alibaba/arthas/releases\">arthas-tunnel-server</a></p>\n<p>Arthas tunnel server是一个spring boot fat jar应用，直接<code>java -jar</code>启动：</p>\n<p><code>java -jar  arthas-tunnel-server.jar</code></p>\n<p>默认情况下，arthas tunnel server的web端口是<code>8080</code>，arthas agent连接的端口是<code>7777</code>。</p>\n<p>启动之后，可以访问 <a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a> ，再通过<code>agentId</code>连接到已注册的arthas agent上。</p>\n<p>通过Spring Boot的Endpoint，可以查看到具体的连接信息： <a href=\"http://127.0.0.1:8080/actuator/arthas\">http://127.0.0.1:8080/actuator/arthas</a> ，登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到，比如：</p>\n<p><img src=\"https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png\"></p>\n</blockquote>\n<p><strong><a href=\"http://127.0.0.1:8080/\">Web页面</a>：</strong></p>\n<p><img src=\"https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png\"></p>\n<p><strong><a href=\"http://127.0.0.1:8080/actuator/arthas\">Spring Boot的Endpoint查看到具体的连接信息</a></strong></p>\n<blockquote>\n<p>登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png\"></p>\n<h2 id=\"Arthas-Spring-Boot-Starter\"><a href=\"#Arthas-Spring-Boot-Starter\" class=\"headerlink\" title=\"Arthas Spring Boot Starter\"></a>Arthas Spring Boot Starter</h2><blockquote>\n<p>注意：目前只支持SpringBoot2</p>\n</blockquote>\n<p><strong>添加pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.taobao.arthas<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;arthas.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>最新版本：<a href=\"https://search.maven.org/search?q=arthas-spring-boot-starter\">查看</a></p>\n<p><strong>配置属性</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\"># arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个</span><br><span class=\"hljs-attr\">arthas.tunnel-server</span>=<span class=\"hljs-string\">ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址</span><br><span class=\"hljs-comment\"># 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。</span><br><span class=\"hljs-attr\">arthas.telnetPort</span>=<span class=\"hljs-string\">-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口</span><br><span class=\"hljs-attr\">arthas.httpPort</span>=<span class=\"hljs-string\">-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口</span><br></code></pre></td></tr></table></figure>\n\n<p>之后直接启动SpringBoot服务后查看</p>\n<p><img src=\"https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png\"></p>\n<p>查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。</p>\n<p><img src=\"https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png\"></p>\n<p>之后，我们就可以通过arthas的相关命令去操作该服务</p>\n"},{"title":"React基础入门教程","_content":"\n# React 基础入门教程\n\n[React中文官网](https://react.docschina.org/)\n\n**demo样例：**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>TEST</title>\n</head>\n<body>\n<div id=\"test\"></div>\n</body>\n\n<!-- react核心库 -->\n<script src=\"https://unpkg.com/react@17/umd/react.production.min.js\" crossorigin></script>\n<!-- React虚拟DOM，用于支持react操作DOM -->\n<script src=\"https://unpkg.com/react-dom@17/umd/react-dom.production.min.js\" crossorigin></script>\n<!-- 用于将jsx转为js -->\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\n<script type=\"text/babel\">\n\t//1.创建虚拟DOM\n    const DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n    //2.渲染虚拟DOM到页面\n    ReactDOM.render(DOM,document.getElementById('test'))\n</script>\n</html>\n```\n\n## JSX规则\n```\n1. 定义虚拟DOM时，不要写引号。\n2. 标签中混入JS表达式时要用{}。\n3. 样式的类名指定不要用class，要用className。\n4. 内联样式，要用style={{key:value}}的形式去写。\n5. 只有一个根标签\n6. 标签必须闭合\n7. 标签首字母\n   1. 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错\n   2. 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错\n```\n\n## 创建虚拟DOM方式\n\n### 方式一（JSX）\n\n```jsx\n//1.创建虚拟DOM\nconst DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n//2.渲染虚拟DOM到页面\nReactDOM.render(DOM,document.getElementById('test'))\n```\n\n### 方式二（JS）\n\n```js\n//1.创建虚拟DOM\nconst VDOM = React.createElement('h1',{id:'title'},React.createElement('span',{},'Hello,React'))\n//2.渲染虚拟DOM到页面\nReactDOM.render(VDOM,document.getElementById('test'))\n```\n\n## 组件的定义方式\n\n### 方式一（函数式组件）\n\n```jsx\n\t\t//1.创建函数式组件\n\t\tfunction MyComponent(){\n\t\t\tconsole.log(this); //此处的this是undefined，因为babel编译后开启了严格模式\n\t\t\treturn <h2>我是用函数定义的组件(适用于【简单组件】的定义)</h2>\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n### 方式二（类式组件）\n\n```jsx\n\t\t//1.创建类式组件\n\t\tclass MyComponent extends React.Component {\n\t\t\trender(){\n\t\t\t\t//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。\n\t\t\t\t//render中的this是谁？—— MyComponent的实例对象 <=> MyComponent组件实例对象。\n\t\t\t\tconsole.log('render中的this:',this);\n\t\t\t\treturn <h2>我是用类定义的组件(适用于【复杂组件】的定义)</h2>\n\t\t\t}\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。\n\t\t\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n## 组件实例的三大属性\n\n### State（状态）\n\n> React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。\n>\n> React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n\n```jsx\nclass TestComponent extends React.Component {\n    //在组件中定义state属性，并且给它赋值。state必须是个对象\n    state = {\n        flag: false\n    }\n    changeFlag(flag){\n        console.log(\"changeFlag\")\n        //必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面\n        //【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。\n        this.setState({flag: flag})\n        //【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！\n\t\t//this.state.flag = !flag //这是错误的写法\n    }\n\trender() {\n        console.log(\"render\")\n        //取出赋值属性\n        const {flag} = this.state\n        return (\n            <div>\n                <h1>今天天气好{flag ? \"炎热\" : \"凉爽\"}</h1>\n                <button onClick={() => this.changeFlag(!this.state.flag)}>点击我</button>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n### Props（传参）\n\n> state 和 props 主要的区别在于 **props** 是不可变的，而 state 可以根据与用户交互来改变。\n>\n> 这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n\n```jsx\nclass TestComponent extends React.Component {\n    render() {\n        console.log(\"render\")\n        //取出传过来参数\n        const {className, grade, list} = this.props\n        return (\n            <div>\n                 <h2>{schoolName}-年级：{grade}-{classNum}班</h2>\n                <div>\n                    {\n                        list.map((item, index) => {\n                            return (\n                                <ul key={item.id} onClick={() => this.alertInfo(item)}>\n                                    <li>姓名：{item.name}</li>\n                                    <li>年龄：{item.age}</li>\n                                </ul>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nconst cla = {\n    schoolName: \"XX高级中学\",\n    classNum: 1,\n    grade: \"高中\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla}/>, document.getElementById(\"test\"))\n```\n\n#### 参数限制\n\n> 自 React v15.5 起，`React.PropTypes` 已移入另一个包中。请使用 [`prop-types` 库](https://www.npmjs.com/package/prop-types) 代替。\n\n```js\nclass TestComponent extends React.Component{}...//组件类\n//对标签属性进行类型、必要性的限制\nTestComponent.propTypes = {\n    schoolName: PropTypes.string.isRequired,    //限制schoolName必传，且为字符串\n    classNum: PropTypes.number,                 //限制classNum为数值\n    afterSchool: PropTypes.func.isRequired,     //限制afterSchool为函数\n}\n\n//指定默认标签属性值\nTestComponent.defaultProps = {\n    grade:'高中',   //grade默认值\n    classNum:1,         //classNum默认值\n}\n\nconst cla = {\n    schoolName:\"江宁高级中学\",\n    classNum: 1,\n    // grade: \"高三\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla} afterSchool={afterSchool}/>, document.getElementById(\"test\"))\n\nfunction afterSchool() {\n    console.info(\"放学啦。。。\");\n}\n```\n\n**函数式组件使用**\n\n```js\n//创建组件\nfunction Person (props){\n    const {name,age,sex} = props\n    return (\n        <ul>\n            <li>姓名：{name}</li>\n            <li>性别：{sex}</li>\n            <li>年龄：{age}</li>\n        </ul>\n\t)\n}\nPerson.propTypes = {\n    name:PropTypes.string.isRequired, //限制name必传，且为字符串\n    sex:PropTypes.string,//限制sex为字符串\n    age:PropTypes.number,//限制age为数值\n}\n\n//指定默认标签属性值\nPerson.defaultProps = {\n    sex:'男',//sex默认值为男\n    age:18 //age默认值为18\n}\n//渲染组件到页面\nReactDOM.render(<Person name=\"jerry\"/>,document.getElementById('test'))\n```\n\n### Ref（可以获取真实DOM节点）\n\n> React提供的这个`ref`属性，**表示为对组件真正实例的引用，其实就是`ReactDOM.render()返回的组件实例`**；需要区分一下，`ReactDOM.render()`渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。\n>\n> **通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref**\n>\n> 官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 [状态提升](https://react.docschina.org/docs/lifting-state-up.html) 以获取更多有关示例\n\n\n#### 字符串形式\n\n```js\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {test1} = this.refs;\n        console.info(test1, test1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref=\"test1\" placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### 回调函数形式\n\n```js\n//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {input1} = this;\n        console.info(input1, input1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    // 方式二\n    saveInput = (a)=>{\n        this.input1 = a;\n        console.log('@',a);\n    }\n    render() {\n        return (\n            <div>\n                {/*JSX里的注释得这么写*/}\n                {/* 方式一 */}\n                {/* a标识当前元素，{}方法体里表示：将当前元素a赋值给当前实例中的属性input1 */}\n                {/* <input ref={a => {this.input1 = a;console.log('@',a)}} placeholder=\"test1\"/>*/}\n                {/* 方式二 */}\n                <input ref={this.saveInput}  placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### `React.createRef()`形式\n\n```js\n//React 16.3 版本引入的 React.createRef() API\n//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。\nclass TestComponent extends React.Component {\n    input1 = React.createRef();\n    input2 = React.createRef();\n    test1 = (e) => {\n        console.info(this.input1, this.input1.current.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, this.input2.current.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref={this.input1} placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input ref={this.input2} placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n## React的受控组件和非受控组件\n\n> 受控组件就是可以被 react 状态控制的组件\n> 在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。\n> 好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。\n>\n> **React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件**\n\n## 高阶函数定义\n\n> 如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。\n>\n> 1. 若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。\n> 2. 若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。\n>\n> 常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。\n\n## React生命周期\n\n### （旧）生命周期\n\n![](https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png)\n\n#### （旧）生命周期详解：\n\n> 18版本可能会移除的钩子函数：\n>\n> ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n>\n> ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n>\n> ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n>\n> 17版本还可以用，但是必须得加上`UNSAFE_`前缀\n>\n> 举例：`UNSAFE_componentWillMount()`\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n   1. `constructor(props)`【构造器】\n   2. ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n   \n2. 更新阶段: 由组件内部`this.setSate()`或父组件`render()`触发\n   1. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n   2. ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. `componentDidUpdate()`【组件更新完毕的钩子】\n   \n   > ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n   \n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n   \n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n   \n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 组件将要挂载的钩子\n     */\n    componentWillMount() {\n        console.info(\"componentWillMount-组件将要挂载的钩子\")\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate() {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\")\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件将要更新的钩子\n     */\n    componentWillUpdate() {\n        console.info(\"componentWillUpdate-组件将要更新的钩子\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     */\n    componentDidUpdate() {\n        console.log('componentDidUpdate-组件更新完毕的钩子');\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n                <A count={this.state.count}></A>\n            </div>\n        )\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     * @param props\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\n//子组件\nclass A extends React.Component {\n    /**\n     * 组件将要接收新的props的钩子\n     * @param props\n     */\n    componentWillReceiveProps(props) {\n        console.log('A---componentWillReceiveProps', props);\n    }\n\n    //控制组件更新的“阀门”\n    shouldComponentUpdate() {\n        console.log('A---shouldComponentUpdate');\n        return true\n    }\n\n    //组件将要更新的钩子\n    componentWillUpdate() {\n        console.log('A---componentWillUpdate');\n    }\n\n    //组件更新完毕的钩子\n    componentDidUpdate() {\n        console.log('A---componentDidUpdate');\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>我是子组件“A”，父组件传过来的值是：{this.props.count}</h2>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n### （新）生命周期\n\n***展示不常用生命周期：**\n\n![](https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png)\n\n**展示常用生命周期：**\n\n![](https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png)\n\n#### （新）生命周期详解：\n\n[官方文档：生命周期](https://react.docschina.org/docs/react-component.html#shouldcomponentupdate)\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n\t1. `constructor(props)`【构造器】\n\t\n\t2. `getDerivedStateFromProps(props,state)`\n\t\n\t   > 代码示例：\n\t   >\n\t   > ```js\n\t   > static getDerivedStateFromProps(props,state){\n\t   >     console.log('getDerivedStateFromProps',props,state);\n\t   >     //返回快照值\n\t   >     return null\n\t   > }\n\t   > ```\n\t   >\n\t   > 新增（极少用到）\n\t   >\n\t   > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\t\n\t3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\t\n\t4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n\t\n2. 更新阶段: 由组件内部`this.setSate()`或父组件重新`render()`触发\n     1. `getDerivedStateFromProps(props,state)`\n\n        > 代码示例：\n        >\n        > ```js\n        > static getDerivedStateFromProps(props,state){\n        >     console.log('getDerivedStateFromProps',props,state);\n        >     //返回快照值\n        >     return null\n        > }\n        > ```\n        >\n        > 新增（极少用到）\n        >\n        > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\n     2. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n\n     3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\n     4. `getSnapshotBeforeUpdate(prevProps, prevState)`【在更新之前获取快照】\n\n        > 新增（极少用到）\n        >\n        > 使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。\n\n     5. `componentDidUpdate(prevProps, prevState, snapshot)`【组件更新完毕的钩子】\n\n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n\n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n\n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 若state的值在任何时候都取决于props\n     * @param props\n     * @param state\n     */\n    static getDerivedStateFromProps(props, state) {\n        console.log('getDerivedStateFromProps-若state的值在任何时候都取决于props', props, state);\n        // return {count: state.count + 1};\n        return null;\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @param props\n     * @param state\n     * @param value\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate(props, state, value) {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\", props, state, value)\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     * @param prevProps\n     * @param prevState\n     * @param snapshot\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('componentDidUpdate-组件更新完毕的钩子', prevProps, prevState, snapshot);\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n            </div>\n        )\n    }\n\n    /**\n     * 在更新之前获取快照\n     */\n    getSnapshotBeforeUpdate() {\n        console.log('getSnapshotBeforeUpdate-在更新之前获取快照');\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n## Diffing算法\n\n**diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务**\n\n![](https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png)\n\n**遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)**\n\n> 0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先\n\n![](https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png)\n\n## For循环为什么key不能用index索引值作为key\n\n> 可能会出现严重的效率问题\n\n```js\n\n\t/*\n   经典面试题:\n      1). react/vue中的key有什么作用？（key的内部原理是什么？）\n      2). 为什么遍历列表时，key最好不要用index?\n\n\t\t\t1. 虚拟DOM中key的作用：\n\t\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。\n\n\t\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,\n\t\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：\n\n\t\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：\n\t\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM\n\t\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM\n\n\t\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key\n\t\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面\n\n\t\t\t2. 用index作为key可能会引发的问题：\n\t\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:\n\t\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==> 界面效果没问题, 但效率低。\n\n\t\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：\n\t\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==> 界面有问题。\n\n\t\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，\n\t\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。\n\n\t\t\t3. 开发中如何选择key?:\n\t\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。\n\t\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。\n   */\n\n\t/*\n\t\t慢动作回放----使用index索引值作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=0>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=0>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t-----------------------------------------------------------------\n\n\t慢动作回放----使用id唯一标识作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=3>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\n\t */\n\tclass Person extends React.Component{\n\n\t\tstate = {\n\t\t\tpersons:[\n\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t]\n\t\t}\n\n\t\tadd = ()=>{\n\t\t\tconst {persons} = this.state\n\t\t\tconst p = {id:persons.length+1,name:'小王',age:20}\n\t\t\tthis.setState({persons:[p,...persons]})\n\t\t}\n\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>展示人员信息</h2>\n\t\t\t\t\t<button onClick={this.add}>添加一个小王</button>\n\t\t\t\t\t<h3>使用index（索引值）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj,index)=>{\n\t\t\t\t\t\t\t\treturn <li key={index}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<h3>使用id（数据的唯一标识）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj)=>{\n\t\t\t\t\t\t\t\treturn <li key={personObj.id}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\tReactDOM.render(<Person/>,document.getElementById('test'))\n```\n\n","source":"_posts/前端/React/React基础.md","raw":"---\ntitle: React基础入门教程\ntags:\n  - React\n  - 前端\ncategories:\n  - 前端\n---\n\n# React 基础入门教程\n\n[React中文官网](https://react.docschina.org/)\n\n**demo样例：**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>TEST</title>\n</head>\n<body>\n<div id=\"test\"></div>\n</body>\n\n<!-- react核心库 -->\n<script src=\"https://unpkg.com/react@17/umd/react.production.min.js\" crossorigin></script>\n<!-- React虚拟DOM，用于支持react操作DOM -->\n<script src=\"https://unpkg.com/react-dom@17/umd/react-dom.production.min.js\" crossorigin></script>\n<!-- 用于将jsx转为js -->\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n\n<script type=\"text/babel\">\n\t//1.创建虚拟DOM\n    const DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n    //2.渲染虚拟DOM到页面\n    ReactDOM.render(DOM,document.getElementById('test'))\n</script>\n</html>\n```\n\n## JSX规则\n```\n1. 定义虚拟DOM时，不要写引号。\n2. 标签中混入JS表达式时要用{}。\n3. 样式的类名指定不要用class，要用className。\n4. 内联样式，要用style={{key:value}}的形式去写。\n5. 只有一个根标签\n6. 标签必须闭合\n7. 标签首字母\n   1. 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错\n   2. 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错\n```\n\n## 创建虚拟DOM方式\n\n### 方式一（JSX）\n\n```jsx\n//1.创建虚拟DOM\nconst DOM = <h1>创建虚拟DOM方式一（JSX）</h1>\n//2.渲染虚拟DOM到页面\nReactDOM.render(DOM,document.getElementById('test'))\n```\n\n### 方式二（JS）\n\n```js\n//1.创建虚拟DOM\nconst VDOM = React.createElement('h1',{id:'title'},React.createElement('span',{},'Hello,React'))\n//2.渲染虚拟DOM到页面\nReactDOM.render(VDOM,document.getElementById('test'))\n```\n\n## 组件的定义方式\n\n### 方式一（函数式组件）\n\n```jsx\n\t\t//1.创建函数式组件\n\t\tfunction MyComponent(){\n\t\t\tconsole.log(this); //此处的this是undefined，因为babel编译后开启了严格模式\n\t\t\treturn <h2>我是用函数定义的组件(适用于【简单组件】的定义)</h2>\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n### 方式二（类式组件）\n\n```jsx\n\t\t//1.创建类式组件\n\t\tclass MyComponent extends React.Component {\n\t\t\trender(){\n\t\t\t\t//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。\n\t\t\t\t//render中的this是谁？—— MyComponent的实例对象 <=> MyComponent组件实例对象。\n\t\t\t\tconsole.log('render中的this:',this);\n\t\t\t\treturn <h2>我是用类定义的组件(适用于【复杂组件】的定义)</h2>\n\t\t\t}\n\t\t}\n\t\t//2.渲染组件到页面\n\t\tReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\t\t/* \n\t\t\t执行了ReactDOM.render(<MyComponent/>.......之后，发生了什么？\n\t\t\t\t\t1.React解析组件标签，找到了MyComponent组件。\n\t\t\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。\n\t\t\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。\n\t\t*/\n```\n\n## 组件实例的三大属性\n\n### State（状态）\n\n> React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。\n>\n> React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。\n\n```jsx\nclass TestComponent extends React.Component {\n    //在组件中定义state属性，并且给它赋值。state必须是个对象\n    state = {\n        flag: false\n    }\n    changeFlag(flag){\n        console.log(\"changeFlag\")\n        //必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面\n        //【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。\n        this.setState({flag: flag})\n        //【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！\n\t\t//this.state.flag = !flag //这是错误的写法\n    }\n\trender() {\n        console.log(\"render\")\n        //取出赋值属性\n        const {flag} = this.state\n        return (\n            <div>\n                <h1>今天天气好{flag ? \"炎热\" : \"凉爽\"}</h1>\n                <button onClick={() => this.changeFlag(!this.state.flag)}>点击我</button>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n### Props（传参）\n\n> state 和 props 主要的区别在于 **props** 是不可变的，而 state 可以根据与用户交互来改变。\n>\n> 这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。\n\n```jsx\nclass TestComponent extends React.Component {\n    render() {\n        console.log(\"render\")\n        //取出传过来参数\n        const {className, grade, list} = this.props\n        return (\n            <div>\n                 <h2>{schoolName}-年级：{grade}-{classNum}班</h2>\n                <div>\n                    {\n                        list.map((item, index) => {\n                            return (\n                                <ul key={item.id} onClick={() => this.alertInfo(item)}>\n                                    <li>姓名：{item.name}</li>\n                                    <li>年龄：{item.age}</li>\n                                </ul>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nconst cla = {\n    schoolName: \"XX高级中学\",\n    classNum: 1,\n    grade: \"高中\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla}/>, document.getElementById(\"test\"))\n```\n\n#### 参数限制\n\n> 自 React v15.5 起，`React.PropTypes` 已移入另一个包中。请使用 [`prop-types` 库](https://www.npmjs.com/package/prop-types) 代替。\n\n```js\nclass TestComponent extends React.Component{}...//组件类\n//对标签属性进行类型、必要性的限制\nTestComponent.propTypes = {\n    schoolName: PropTypes.string.isRequired,    //限制schoolName必传，且为字符串\n    classNum: PropTypes.number,                 //限制classNum为数值\n    afterSchool: PropTypes.func.isRequired,     //限制afterSchool为函数\n}\n\n//指定默认标签属性值\nTestComponent.defaultProps = {\n    grade:'高中',   //grade默认值\n    classNum:1,         //classNum默认值\n}\n\nconst cla = {\n    schoolName:\"江宁高级中学\",\n    classNum: 1,\n    // grade: \"高三\",\n    list: [{id: 1, name: \"张三\", age: \"18\"}, {id: 2, name: \"李四\", age: 18}, {id: 3, name: \"王五\", age: 20}]\n}\nReactDOM.render(<TestComponent {...cla} afterSchool={afterSchool}/>, document.getElementById(\"test\"))\n\nfunction afterSchool() {\n    console.info(\"放学啦。。。\");\n}\n```\n\n**函数式组件使用**\n\n```js\n//创建组件\nfunction Person (props){\n    const {name,age,sex} = props\n    return (\n        <ul>\n            <li>姓名：{name}</li>\n            <li>性别：{sex}</li>\n            <li>年龄：{age}</li>\n        </ul>\n\t)\n}\nPerson.propTypes = {\n    name:PropTypes.string.isRequired, //限制name必传，且为字符串\n    sex:PropTypes.string,//限制sex为字符串\n    age:PropTypes.number,//限制age为数值\n}\n\n//指定默认标签属性值\nPerson.defaultProps = {\n    sex:'男',//sex默认值为男\n    age:18 //age默认值为18\n}\n//渲染组件到页面\nReactDOM.render(<Person name=\"jerry\"/>,document.getElementById('test'))\n```\n\n### Ref（可以获取真实DOM节点）\n\n> React提供的这个`ref`属性，**表示为对组件真正实例的引用，其实就是`ReactDOM.render()返回的组件实例`**；需要区分一下，`ReactDOM.render()`渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。\n>\n> **通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref**\n>\n> 官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 [状态提升](https://react.docschina.org/docs/lifting-state-up.html) 以获取更多有关示例\n\n\n#### 字符串形式\n\n```js\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {test1} = this.refs;\n        console.info(test1, test1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref=\"test1\" placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### 回调函数形式\n\n```js\n//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题\nclass TestComponent extends React.Component {\n    test1 = (e) => {\n        //字符串形式已经被弃用\n        let {input1} = this;\n        console.info(input1, input1.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, e.target.value)\n    }\n    // 方式二\n    saveInput = (a)=>{\n        this.input1 = a;\n        console.log('@',a);\n    }\n    render() {\n        return (\n            <div>\n                {/*JSX里的注释得这么写*/}\n                {/* 方式一 */}\n                {/* a标识当前元素，{}方法体里表示：将当前元素a赋值给当前实例中的属性input1 */}\n                {/* <input ref={a => {this.input1 = a;console.log('@',a)}} placeholder=\"test1\"/>*/}\n                {/* 方式二 */}\n                <input ref={this.saveInput}  placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n#### `React.createRef()`形式\n\n```js\n//React 16.3 版本引入的 React.createRef() API\n//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。\nclass TestComponent extends React.Component {\n    input1 = React.createRef();\n    input2 = React.createRef();\n    test1 = (e) => {\n        console.info(this.input1, this.input1.current.value)\n    }\n    //函数默认会带上当前事件绑定的DOM元素\n    test2 = (e) => {\n        console.info(e, this.input2.current.value)\n    }\n    render() {\n        return (\n            <div>\n                <input ref={this.input1} placeholder=\"test1\"/>\n                <br/>\n                <button onClick={this.test1}>点击获取test1数据</button>\n                <br/>\n                <input ref={this.input2} placeholder=\"失去焦点获取当前输入数据\" onBlur={this.test2}/>\n            </div>\n        )\n    }\n}\nReactDOM.render(<TestComponent/>, document.getElementById(\"test\"))\n```\n\n## React的受控组件和非受控组件\n\n> 受控组件就是可以被 react 状态控制的组件\n> 在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。\n> 好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。\n>\n> **React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件**\n\n## 高阶函数定义\n\n> 如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。\n>\n> 1. 若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。\n> 2. 若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。\n>\n> 常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。\n\n## React生命周期\n\n### （旧）生命周期\n\n![](https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png)\n\n#### （旧）生命周期详解：\n\n> 18版本可能会移除的钩子函数：\n>\n> ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n>\n> ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n>\n> ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n>\n> 17版本还可以用，但是必须得加上`UNSAFE_`前缀\n>\n> 举例：`UNSAFE_componentWillMount()`\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n   1. `constructor(props)`【构造器】\n   2. ~~`componentWillMount()`【组件将要挂载的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n   \n2. 更新阶段: 由组件内部`this.setSate()`或父组件`render()`触发\n   1. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n   2. ~~`componentWillUpdate()`【组件将要更新的钩子】已弃用~~\n   3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n   4. `componentDidUpdate()`【组件更新完毕的钩子】\n   \n   > ~~`componentWillReceiveProps(props)`【子组件将要接收新的props的钩子】已弃用~~\n   \n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n   \n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n   \n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 组件将要挂载的钩子\n     */\n    componentWillMount() {\n        console.info(\"componentWillMount-组件将要挂载的钩子\")\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate() {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\")\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件将要更新的钩子\n     */\n    componentWillUpdate() {\n        console.info(\"componentWillUpdate-组件将要更新的钩子\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     */\n    componentDidUpdate() {\n        console.log('componentDidUpdate-组件更新完毕的钩子');\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n                <A count={this.state.count}></A>\n            </div>\n        )\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     * @param props\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\n//子组件\nclass A extends React.Component {\n    /**\n     * 组件将要接收新的props的钩子\n     * @param props\n     */\n    componentWillReceiveProps(props) {\n        console.log('A---componentWillReceiveProps', props);\n    }\n\n    //控制组件更新的“阀门”\n    shouldComponentUpdate() {\n        console.log('A---shouldComponentUpdate');\n        return true\n    }\n\n    //组件将要更新的钩子\n    componentWillUpdate() {\n        console.log('A---componentWillUpdate');\n    }\n\n    //组件更新完毕的钩子\n    componentDidUpdate() {\n        console.log('A---componentDidUpdate');\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>我是子组件“A”，父组件传过来的值是：{this.props.count}</h2>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n### （新）生命周期\n\n***展示不常用生命周期：**\n\n![](https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png)\n\n**展示常用生命周期：**\n\n![](https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png)\n\n#### （新）生命周期详解：\n\n[官方文档：生命周期](https://react.docschina.org/docs/react-component.html#shouldcomponentupdate)\n\n1. 初始化阶段: 由`ReactDOM.render()`触发---初次渲染\n\t1. `constructor(props)`【构造器】\n\t\n\t2. `getDerivedStateFromProps(props,state)`\n\t\n\t   > 代码示例：\n\t   >\n\t   > ```js\n\t   > static getDerivedStateFromProps(props,state){\n\t   >     console.log('getDerivedStateFromProps',props,state);\n\t   >     //返回快照值\n\t   >     return null\n\t   > }\n\t   > ```\n\t   >\n\t   > 新增（极少用到）\n\t   >\n\t   > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\t\n\t3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\t\n\t4. **`componentDidMount()` 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）**\n\t\n2. 更新阶段: 由组件内部`this.setSate()`或父组件重新`render()`触发\n     1. `getDerivedStateFromProps(props,state)`\n\n        > 代码示例：\n        >\n        > ```js\n        > static getDerivedStateFromProps(props,state){\n        >     console.log('getDerivedStateFromProps',props,state);\n        >     //返回快照值\n        >     return null\n        > }\n        > ```\n        >\n        > 新增（极少用到）\n        >\n        > 若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps\n\n     2. `shouldComponentUpdate()`【控制组件更新的“阀门”，有返回值：true/false】\n\n     3. **`render()`【将虚拟DOM渲染到页面】（必须用）**\n\n     4. `getSnapshotBeforeUpdate(prevProps, prevState)`【在更新之前获取快照】\n\n        > 新增（极少用到）\n        >\n        > 使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。\n\n     5. `componentDidUpdate(prevProps, prevState, snapshot)`【组件更新完毕的钩子】\n\n3. 卸载组件: 由`ReactDOM.unmountComponentAtNode({真实DOM元素})`触发\n\n   > 示例：ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n\n   1. **`componentWillUnmount()` 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）**\n\n**代码示例：**\n\n```js\nclass TestComponent extends React.Component {\n    /**\n     * 构造器\n     * @param props\n     */\n    constructor(props) {\n        console.log('constructor-构造器', props);\n        super(props)\n        this.state = {count: 0}\n    }\n\n    /**\n     * 若state的值在任何时候都取决于props\n     * @param props\n     * @param state\n     */\n    static getDerivedStateFromProps(props, state) {\n        console.log('getDerivedStateFromProps-若state的值在任何时候都取决于props', props, state);\n        // return {count: state.count + 1};\n        return null;\n    }\n\n    /**\n     * 控制组件更新的“阀门”\n     * @param props\n     * @param state\n     * @param value\n     * @returns {boolean} true：继续、false：不走了\n     */\n    shouldComponentUpdate(props, state, value) {\n        console.info(\"shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false\", props, state, value)\n        //返回值控制接下来的钩子函数走向，true：继续、false：不走了\n        return this.state.count % 2 === 0;\n    }\n\n    /**\n     * 组件挂载完毕的钩子\n     */\n    componentDidMount() {\n        console.info(\"componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）\")\n    }\n\n    /**\n     * 组件更新完毕的钩子\n     * @param prevProps\n     * @param prevState\n     * @param snapshot\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log('componentDidUpdate-组件更新完毕的钩子', prevProps, prevState, snapshot);\n    }\n\n    /**\n     * 将虚拟DOM渲染到页面\n     */\n    render() {\n        console.info(\"render-将虚拟DOM渲染到页面\")\n        let {count} = this.state;\n        return (\n            <div>\n                <h1>我是父组件，当前数字：{count}</h1>\n                <button onClick={() => this.addCount()}>点我+1</button>\n                <button onClick={() => this.forceUpdate()}>强制更新</button>\n                <button onClick={() => ReactDOM.unmountComponentAtNode(document.getElementById('test'))}\n                        style={{backgroundColor: \"red\"}}>卸载组件\n                </button>\n            </div>\n        )\n    }\n\n    /**\n     * 在更新之前获取快照\n     */\n    getSnapshotBeforeUpdate() {\n        console.log('getSnapshotBeforeUpdate-在更新之前获取快照');\n    }\n\n    /**\n     * 组件将要卸载的钩子\n     */\n    componentWillUnmount() {\n        console.info(\"componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）\")\n    }\n\n    //=============================================================\n    //自定义方法\n    addCount() {\n        this.setState({count: this.state.count + 1});\n    }\n}\n\nReactDOM.render(<TestComponent a=\"aaa\" b=\"bbb\"/>, document.getElementById(\"test\"));\n```\n\n## Diffing算法\n\n**diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务**\n\n![](https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png)\n\n**遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)**\n\n> 0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先\n\n![](https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png)\n\n## For循环为什么key不能用index索引值作为key\n\n> 可能会出现严重的效率问题\n\n```js\n\n\t/*\n   经典面试题:\n      1). react/vue中的key有什么作用？（key的内部原理是什么？）\n      2). 为什么遍历列表时，key最好不要用index?\n\n\t\t\t1. 虚拟DOM中key的作用：\n\t\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。\n\n\t\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,\n\t\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：\n\n\t\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：\n\t\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM\n\t\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM\n\n\t\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key\n\t\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面\n\n\t\t\t2. 用index作为key可能会引发的问题：\n\t\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:\n\t\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==> 界面效果没问题, 但效率低。\n\n\t\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：\n\t\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==> 界面有问题。\n\n\t\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，\n\t\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。\n\n\t\t\t3. 开发中如何选择key?:\n\t\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。\n\t\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。\n   */\n\n\t/*\n\t\t慢动作回放----使用index索引值作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=0>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=0>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t-----------------------------------------------------------------\n\n\t慢动作回放----使用id唯一标识作为key\n\n\t\t\t初始数据：\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t初始的虚拟DOM：\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\t\t\t更新后的数据：\n\t\t\t\t\t{id:3,name:'小王',age:20},\n\t\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t更新数据后的虚拟DOM：\n\t\t\t\t\t<li key=3>小王---20<input type=\"text\"/></li>\n\t\t\t\t\t<li key=1>小张---18<input type=\"text\"/></li>\n\t\t\t\t\t<li key=2>小李---19<input type=\"text\"/></li>\n\n\n\t */\n\tclass Person extends React.Component{\n\n\t\tstate = {\n\t\t\tpersons:[\n\t\t\t\t{id:1,name:'小张',age:18},\n\t\t\t\t{id:2,name:'小李',age:19},\n\t\t\t]\n\t\t}\n\n\t\tadd = ()=>{\n\t\t\tconst {persons} = this.state\n\t\t\tconst p = {id:persons.length+1,name:'小王',age:20}\n\t\t\tthis.setState({persons:[p,...persons]})\n\t\t}\n\n\t\trender(){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>展示人员信息</h2>\n\t\t\t\t\t<button onClick={this.add}>添加一个小王</button>\n\t\t\t\t\t<h3>使用index（索引值）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj,index)=>{\n\t\t\t\t\t\t\t\treturn <li key={index}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<h3>使用id（数据的唯一标识）作为key</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.persons.map((personObj)=>{\n\t\t\t\t\t\t\t\treturn <li key={personObj.id}>{personObj.name}---{personObj.age}<input type=\"text\"/></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\n\tReactDOM.render(<Person/>,document.getElementById('test'))\n```\n\n","slug":"前端/React/React基础","published":1,"date":"2022-04-07T17:04:24.000Z","updated":"2022-11-26T17:39:32.680Z","_id":"clay7oz320000cn2b9j991xqb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"React-基础入门教程\"><a href=\"#React-基础入门教程\" class=\"headerlink\" title=\"React 基础入门教程\"></a>React 基础入门教程</h1><p><a href=\"https://react.docschina.org/\">React中文官网</a></p>\n<p><strong>demo样例：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>TEST<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- react核心库 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- React虚拟DOM，用于支持react操作DOM --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 用于将jsx转为js --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-comment\">//1.创建虚拟DOM</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JSX规则\"><a href=\"#JSX规则\" class=\"headerlink\" title=\"JSX规则\"></a>JSX规则</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 定义虚拟DOM时，不要写引号。<br><span class=\"hljs-bullet\">2.</span> 标签中混入JS表达式时要用&#123;&#125;。<br><span class=\"hljs-bullet\">3.</span> 样式的类名指定不要用class，要用className。<br><span class=\"hljs-bullet\">4.</span> 内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。<br><span class=\"hljs-bullet\">5.</span> 只有一个根标签<br><span class=\"hljs-bullet\">6.</span> 标签必须闭合<br><span class=\"hljs-bullet\">7.</span> 标签首字母<br><span class=\"hljs-bullet\">   1.</span> 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错<br><span class=\"hljs-bullet\">   2.</span> 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建虚拟DOM方式\"><a href=\"#创建虚拟DOM方式\" class=\"headerlink\" title=\"创建虚拟DOM方式\"></a>创建虚拟DOM方式</h2><h3 id=\"方式一（JSX）\"><a href=\"#方式一（JSX）\" class=\"headerlink\" title=\"方式一（JSX）\"></a>方式一（JSX）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（JS）\"><a href=\"#方式二（JS）\" class=\"headerlink\" title=\"方式二（JS）\"></a>方式二（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VDOM</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;h1&#x27;</span>,&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;title&#x27;</span>&#125;,<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;span&#x27;</span>,&#123;&#125;,<span class=\"hljs-string\">&#x27;Hello,React&#x27;</span>))<br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">VDOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件的定义方式\"><a href=\"#组件的定义方式\" class=\"headerlink\" title=\"组件的定义方式\"></a>组件的定义方式</h2><h3 id=\"方式一（函数式组件）\"><a href=\"#方式一（函数式组件）\" class=\"headerlink\" title=\"方式一（函数式组件）\"></a>方式一（函数式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建函数式组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyComponent</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>); <span class=\"hljs-comment\">//此处的this是undefined，因为babel编译后开启了严格模式</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（类式组件）\"><a href=\"#方式二（类式组件）\" class=\"headerlink\" title=\"方式二（类式组件）\"></a>方式二（类式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建类式组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-comment\">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br>\t\t<span class=\"hljs-comment\">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span><br>\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;render中的this:&#x27;</span>,<span class=\"hljs-variable language_\">this</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span><br><span class=\"hljs-comment\">\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件实例的三大属性\"><a href=\"#组件实例的三大属性\" class=\"headerlink\" title=\"组件实例的三大属性\"></a>组件实例的三大属性</h2><h3 id=\"State（状态）\"><a href=\"#State（状态）\" class=\"headerlink\" title=\"State（状态）\"></a>State（状态）</h3><blockquote>\n<p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p>\n<p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">//在组件中定义state属性，并且给它赋值。state必须是个对象</span><br>    state = &#123;<br>        <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span><br>    &#125;<br>    <span class=\"hljs-title function_\">changeFlag</span>(<span class=\"hljs-params\">flag</span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;changeFlag&quot;</span>)<br>        <span class=\"hljs-comment\">//必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面</span><br>        <span class=\"hljs-comment\">//【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">flag</span>: flag&#125;)<br>        <span class=\"hljs-comment\">//【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！</span><br>\t\t<span class=\"hljs-comment\">//this.state.flag = !flag //这是错误的写法</span><br>    &#125;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出赋值属性</span><br>        <span class=\"hljs-keyword\">const</span> &#123;flag&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气好&#123;flag ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.changeFlag(!this.state.flag)&#125;&gt;点击我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Props（传参）\"><a href=\"#Props（传参）\" class=\"headerlink\" title=\"Props（传参）\"></a>Props（传参）</h3><blockquote>\n<p>state 和 props 主要的区别在于 <strong>props</strong> 是不可变的，而 state 可以根据与用户交互来改变。</p>\n<p>这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出传过来参数</span><br>        <span class=\"hljs-keyword\">const</span> &#123;className, grade, list&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;schoolName&#125;-年级：&#123;grade&#125;-&#123;classNum&#125;班<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                    &#123;</span><br><span class=\"language-xml\">                        list.map((item, index) =&gt; &#123;</span><br><span class=\"language-xml\">                            return (</span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;item.id&#125;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.alertInfo(item)&#125;&gt;</span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;item.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;item.age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">                            )</span><br><span class=\"language-xml\">                        &#125;)</span><br><span class=\"language-xml\">                    &#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-string\">&quot;XX高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attr\">grade</span>: <span class=\"hljs-string\">&quot;高中&quot;</span>,<br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125;/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数限制\"><a href=\"#参数限制\" class=\"headerlink\" title=\"参数限制\"></a>参数限制</h4><blockquote>\n<p>自 React v15.5 起，<code>React.PropTypes</code> 已移入另一个包中。请使用 <a href=\"https://www.npmjs.com/package/prop-types\"><code>prop-types</code> 库</a> 代替。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;&#125;...<span class=\"hljs-comment\">//组件类</span><br><span class=\"hljs-comment\">//对标签属性进行类型、必要性的限制</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>,    <span class=\"hljs-comment\">//限制schoolName必传，且为字符串</span><br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,                 <span class=\"hljs-comment\">//限制classNum为数值</span><br>    <span class=\"hljs-attr\">afterSchool</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">func</span>.<span class=\"hljs-property\">isRequired</span>,     <span class=\"hljs-comment\">//限制afterSchool为函数</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">grade</span>:<span class=\"hljs-string\">&#x27;高中&#x27;</span>,   <span class=\"hljs-comment\">//grade默认值</span><br>    <span class=\"hljs-attr\">classNum</span>:<span class=\"hljs-number\">1</span>,         <span class=\"hljs-comment\">//classNum默认值</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>:<span class=\"hljs-string\">&quot;江宁高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-comment\">// grade: &quot;高三&quot;,</span><br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125; <span class=\"hljs-attr\">afterSchool</span>=<span class=\"hljs-string\">&#123;afterSchool&#125;/</span>&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterSchool</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;放学啦。。。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>函数式组件使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span> (props)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name,age,sex&#125; = props<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>性别：&#123;sex&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>, <span class=\"hljs-comment\">//限制name必传，且为字符串</span><br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,<span class=\"hljs-comment\">//限制sex为字符串</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,<span class=\"hljs-comment\">//限制age为数值</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>,<span class=\"hljs-comment\">//sex默认值为男</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">//age默认值为18</span><br>&#125;<br><span class=\"hljs-comment\">//渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;jerry&quot;</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ref（可以获取真实DOM节点）\"><a href=\"#Ref（可以获取真实DOM节点）\" class=\"headerlink\" title=\"Ref（可以获取真实DOM节点）\"></a>Ref（可以获取真实DOM节点）</h3><blockquote>\n<p>React提供的这个<code>ref</code>属性，**表示为对组件真正实例的引用，其实就是<code>ReactDOM.render()返回的组件实例</code>**；需要区分一下，<code>ReactDOM.render()</code>渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。</p>\n<p><strong>通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref</strong></p>\n<p>官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 <a href=\"https://react.docschina.org/docs/lifting-state-up.html\">状态提升</a> 以获取更多有关示例</p>\n</blockquote>\n<h4 id=\"字符串形式\"><a href=\"#字符串形式\" class=\"headerlink\" title=\"字符串形式\"></a>字符串形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;test1&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(test1, test1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;test1&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"回调函数形式\"><a href=\"#回调函数形式\" class=\"headerlink\" title=\"回调函数形式\"></a>回调函数形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;input1&#125; = <span class=\"hljs-variable language_\">this</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(input1, input1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 方式二</span><br>    saveInput = <span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span> = a;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;@&#x27;</span>,a);<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                &#123;/*JSX里的注释得这么写*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式一 */&#125;</span><br><span class=\"language-xml\">                &#123;/* a标识当前元素，&#123;&#125;方法体里表示：将当前元素a赋值给当前实例中的属性input1 */&#125;</span><br><span class=\"language-xml\">                &#123;/* <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;a</span> =&gt;</span> &#123;this.input1 = a;console.log(&#x27;@&#x27;,a)&#125;&#125; placeholder=&quot;test1&quot;/&gt;*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式二 */&#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.saveInput&#125;</span>  <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"React-createRef-形式\"><a href=\"#React-createRef-形式\" class=\"headerlink\" title=\"React.createRef()形式\"></a><code>React.createRef()</code>形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//React 16.3 版本引入的 React.createRef() API</span><br><span class=\"hljs-comment\">//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    input1 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    input2 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input2</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input1&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input2&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"React的受控组件和非受控组件\"><a href=\"#React的受控组件和非受控组件\" class=\"headerlink\" title=\"React的受控组件和非受控组件\"></a>React的受控组件和非受控组件</h2><blockquote>\n<p>受控组件就是可以被 react 状态控制的组件<br>在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。<br>好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。</p>\n<p><strong>React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件</strong></p>\n</blockquote>\n<h2 id=\"高阶函数定义\"><a href=\"#高阶函数定义\" class=\"headerlink\" title=\"高阶函数定义\"></a>高阶函数定义</h2><blockquote>\n<p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p>\n<ol>\n<li>若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。</li>\n<li>若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。</li>\n</ol>\n<p>常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。</p>\n</blockquote>\n<h2 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h2><h3 id=\"（旧）生命周期\"><a href=\"#（旧）生命周期\" class=\"headerlink\" title=\"（旧）生命周期\"></a>（旧）生命周期</h3><p><img src=\"https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png\"></p>\n<h4 id=\"（旧）生命周期详解：\"><a href=\"#（旧）生命周期详解：\" class=\"headerlink\" title=\"（旧）生命周期详解：\"></a>（旧）生命周期详解：</h4><blockquote>\n<p>18版本可能会移除的钩子函数：</p>\n<p><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></p>\n<p><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></p>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n<p>17版本还可以用，但是必须得加上<code>UNSAFE_</code>前缀</p>\n<p>举例：<code>UNSAFE_componentWillMount()</code></p>\n</blockquote>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><code>constructor(props)</code>【构造器】</li>\n<li><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件<code>render()</code>触发</p>\n<ol>\n<li><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</li>\n<li><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><code>componentDidUpdate()</code>【组件更新完毕的钩子】</li>\n</ol>\n<blockquote>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n</blockquote>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要挂载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillMount-组件将要挂载的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要更新的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUpdate-组件将要更新的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">A</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&#123;this.state.count&#125;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">A</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//子组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要接收新的props的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillReceiveProps</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillReceiveProps&#x27;</span>, props);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//控制组件更新的“阀门”</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---shouldComponentUpdate&#x27;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件将要更新的钩子</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件更新完毕的钩子</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentDidUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是子组件“A”，父组件传过来的值是：&#123;this.props.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"（新）生命周期\"><a href=\"#（新）生命周期\" class=\"headerlink\" title=\"（新）生命周期\"></a>（新）生命周期</h3><p>*<strong>展示不常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png\"></p>\n<p><strong>展示常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png\"></p>\n<h4 id=\"（新）生命周期详解：\"><a href=\"#（新）生命周期详解：\" class=\"headerlink\" title=\"（新）生命周期详解：\"></a>（新）生命周期详解：</h4><p><a href=\"https://react.docschina.org/docs/react-component.html#shouldcomponentupdate\">官方文档：生命周期</a></p>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><p><code>constructor(props)</code>【构造器】</p>\n</li>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></p>\n</li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render()</code>触发</p>\n<ol>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</p>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><code>getSnapshotBeforeUpdate(prevProps, prevState)</code>【在更新之前获取快照】</p>\n<blockquote>\n<p>新增（极少用到）</p>\n<p>使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。</p>\n</blockquote>\n</li>\n<li><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code>【组件更新完毕的钩子】</p>\n</li>\n</ol>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 若state的值在任何时候都取决于props</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props, state</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps-若state的值在任何时候都取决于props&#x27;</span>, props, state);<br>        <span class=\"hljs-comment\">// return &#123;count: state.count + 1&#125;;</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">value</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\">props, state, value</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>, props, state, value)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevProps</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevState</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">snapshot</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\">prevProps, prevState, snapshot</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>, prevProps, prevState, snapshot);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 在更新之前获取快照</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">getSnapshotBeforeUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getSnapshotBeforeUpdate-在更新之前获取快照&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Diffing算法\"><a href=\"#Diffing算法\" class=\"headerlink\" title=\"Diffing算法\"></a>Diffing算法</h2><p><strong>diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png\"></p>\n<p><strong>遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)</strong></p>\n<blockquote>\n<p>0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png\"></p>\n<h2 id=\"For循环为什么key不能用index索引值作为key\"><a href=\"#For循环为什么key不能用index索引值作为key\" class=\"headerlink\" title=\"For循环为什么key不能用index索引值作为key\"></a>For循环为什么key不能用index索引值作为key</h2><blockquote>\n<p>可能会出现严重的效率问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  经典面试题:</span><br><span class=\"hljs-comment\">     1). react/vue中的key有什么作用？（key的内部原理是什么？）</span><br><span class=\"hljs-comment\">     2). 为什么遍历列表时，key最好不要用index?</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t1. 虚拟DOM中key的作用：</span><br><span class=\"hljs-comment\">\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t2. 用index作为key可能会引发的问题：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t3. 开发中如何选择key?:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。</span><br><span class=\"hljs-comment\">  */</span><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t慢动作回放----使用index索引值作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">-----------------------------------------------------------------</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">慢动作回放----使用id唯一标识作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=3&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br><br>\tstate = &#123;<br>\t\t<span class=\"hljs-attr\">persons</span>:[<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小张&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;,<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小李&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span>&#125;,<br>\t\t]<br>\t&#125;<br><br>\tadd = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>\t\t<span class=\"hljs-keyword\">const</span> &#123;persons&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>\t\t<span class=\"hljs-keyword\">const</span> p = &#123;<span class=\"hljs-attr\">id</span>:persons.<span class=\"hljs-property\">length</span>+<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小王&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">persons</span>:[p,...persons]&#125;)<br>\t&#125;<br><br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (<br>\t\t\t<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>展示人员信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用index（索引值）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj,index)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;index&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用id（数据的唯一标识）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>\t\t)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-基础入门教程\"><a href=\"#React-基础入门教程\" class=\"headerlink\" title=\"React 基础入门教程\"></a>React 基础入门教程</h1><p><a href=\"https://react.docschina.org/\">React中文官网</a></p>\n<p><strong>demo样例：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>TEST<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- react核心库 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- React虚拟DOM，用于支持react操作DOM --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 用于将jsx转为js --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">\t<span class=\"hljs-comment\">//1.创建虚拟DOM</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JSX规则\"><a href=\"#JSX规则\" class=\"headerlink\" title=\"JSX规则\"></a>JSX规则</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-bullet\">1.</span> 定义虚拟DOM时，不要写引号。<br><span class=\"hljs-bullet\">2.</span> 标签中混入JS表达式时要用&#123;&#125;。<br><span class=\"hljs-bullet\">3.</span> 样式的类名指定不要用class，要用className。<br><span class=\"hljs-bullet\">4.</span> 内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。<br><span class=\"hljs-bullet\">5.</span> 只有一个根标签<br><span class=\"hljs-bullet\">6.</span> 标签必须闭合<br><span class=\"hljs-bullet\">7.</span> 标签首字母<br><span class=\"hljs-bullet\">   1.</span> 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错<br><span class=\"hljs-bullet\">   2.</span> 若大写字母开头，react就去渲染对应的组件。若组件没有定义，则报错<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建虚拟DOM方式\"><a href=\"#创建虚拟DOM方式\" class=\"headerlink\" title=\"创建虚拟DOM方式\"></a>创建虚拟DOM方式</h2><h3 id=\"方式一（JSX）\"><a href=\"#方式一（JSX）\" class=\"headerlink\" title=\"方式一（JSX）\"></a>方式一（JSX）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOM</span> = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>创建虚拟DOM方式一（JSX）<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">DOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（JS）\"><a href=\"#方式二（JS）\" class=\"headerlink\" title=\"方式二（JS）\"></a>方式二（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//1.创建虚拟DOM</span><br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">VDOM</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;h1&#x27;</span>,&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;title&#x27;</span>&#125;,<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;span&#x27;</span>,&#123;&#125;,<span class=\"hljs-string\">&#x27;Hello,React&#x27;</span>))<br><span class=\"hljs-comment\">//2.渲染虚拟DOM到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable constant_\">VDOM</span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件的定义方式\"><a href=\"#组件的定义方式\" class=\"headerlink\" title=\"组件的定义方式\"></a>组件的定义方式</h2><h3 id=\"方式一（函数式组件）\"><a href=\"#方式一（函数式组件）\" class=\"headerlink\" title=\"方式一（函数式组件）\"></a>方式一（函数式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建函数式组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyComponent</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>); <span class=\"hljs-comment\">//此处的this是undefined，因为babel编译后开启了严格模式</span><br>\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方式二（类式组件）\"><a href=\"#方式二（类式组件）\" class=\"headerlink\" title=\"方式二（类式组件）\"></a>方式二（类式组件）</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//1.创建类式组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-comment\">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br>\t\t<span class=\"hljs-comment\">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span><br>\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;render中的this:&#x27;</span>,<span class=\"hljs-variable language_\">this</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">//2.渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyComponent</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">\t执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span><br><span class=\"hljs-comment\">\t\t\t1.React解析组件标签，找到了MyComponent组件。</span><br><span class=\"hljs-comment\">\t\t\t2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span><br><span class=\"hljs-comment\">\t\t\t3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"组件实例的三大属性\"><a href=\"#组件实例的三大属性\" class=\"headerlink\" title=\"组件实例的三大属性\"></a>组件实例的三大属性</h2><h3 id=\"State（状态）\"><a href=\"#State（状态）\" class=\"headerlink\" title=\"State（状态）\"></a>State（状态）</h3><blockquote>\n<p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p>\n<p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">//在组件中定义state属性，并且给它赋值。state必须是个对象</span><br>    state = &#123;<br>        <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span><br>    &#125;<br>    <span class=\"hljs-title function_\">changeFlag</span>(<span class=\"hljs-params\">flag</span>)&#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;changeFlag&quot;</span>)<br>        <span class=\"hljs-comment\">//必须通过父类的setState()方法重新赋值，React才会重新去调用render()方法重新渲染页面</span><br>        <span class=\"hljs-comment\">//【严重注意】：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">flag</span>: flag&#125;)<br>        <span class=\"hljs-comment\">//【严重注意】：状态state属性不可直接更改，下面这行就是直接更改！！！</span><br>\t\t<span class=\"hljs-comment\">//this.state.flag = !flag //这是错误的写法</span><br>    &#125;<br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出赋值属性</span><br>        <span class=\"hljs-keyword\">const</span> &#123;flag&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>今天天气好&#123;flag ? &quot;炎热&quot; : &quot;凉爽&quot;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.changeFlag(!this.state.flag)&#125;&gt;点击我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Props（传参）\"><a href=\"#Props（传参）\" class=\"headerlink\" title=\"Props（传参）\"></a>Props（传参）</h3><blockquote>\n<p>state 和 props 主要的区别在于 <strong>props</strong> 是不可变的，而 state 可以根据与用户交互来改变。</p>\n<p>这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>)<br>        <span class=\"hljs-comment\">//取出传过来参数</span><br>        <span class=\"hljs-keyword\">const</span> &#123;className, grade, list&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span><br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;schoolName&#125;-年级：&#123;grade&#125;-&#123;classNum&#125;班<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                    &#123;</span><br><span class=\"language-xml\">                        list.map((item, index) =&gt; &#123;</span><br><span class=\"language-xml\">                            return (</span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;item.id&#125;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.alertInfo(item)&#125;&gt;</span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;item.name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;item.age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">                                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">                            )</span><br><span class=\"language-xml\">                        &#125;)</span><br><span class=\"language-xml\">                    &#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-string\">&quot;XX高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-attr\">grade</span>: <span class=\"hljs-string\">&quot;高中&quot;</span>,<br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125;/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数限制\"><a href=\"#参数限制\" class=\"headerlink\" title=\"参数限制\"></a>参数限制</h4><blockquote>\n<p>自 React v15.5 起，<code>React.PropTypes</code> 已移入另一个包中。请使用 <a href=\"https://www.npmjs.com/package/prop-types\"><code>prop-types</code> 库</a> 代替。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;&#125;...<span class=\"hljs-comment\">//组件类</span><br><span class=\"hljs-comment\">//对标签属性进行类型、必要性的限制</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>,    <span class=\"hljs-comment\">//限制schoolName必传，且为字符串</span><br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,                 <span class=\"hljs-comment\">//限制classNum为数值</span><br>    <span class=\"hljs-attr\">afterSchool</span>: <span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">func</span>.<span class=\"hljs-property\">isRequired</span>,     <span class=\"hljs-comment\">//限制afterSchool为函数</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">TestComponent</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">grade</span>:<span class=\"hljs-string\">&#x27;高中&#x27;</span>,   <span class=\"hljs-comment\">//grade默认值</span><br>    <span class=\"hljs-attr\">classNum</span>:<span class=\"hljs-number\">1</span>,         <span class=\"hljs-comment\">//classNum默认值</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> cla = &#123;<br>    <span class=\"hljs-attr\">schoolName</span>:<span class=\"hljs-string\">&quot;江宁高级中学&quot;</span>,<br>    <span class=\"hljs-attr\">classNum</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-comment\">// grade: &quot;高三&quot;,</span><br>    <span class=\"hljs-attr\">list</span>: [&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-string\">&quot;18&quot;</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>&#125;, &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>&#125;]<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> &#123;<span class=\"hljs-attr\">...cla</span>&#125; <span class=\"hljs-attr\">afterSchool</span>=<span class=\"hljs-string\">&#123;afterSchool&#125;/</span>&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">afterSchool</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;放学啦。。。&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>函数式组件使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建组件</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span> (props)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;name,age,sex&#125; = props<br>    <span class=\"hljs-keyword\">return</span> (<br>        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>姓名：&#123;name&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>性别：&#123;sex&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>年龄：&#123;age&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br>\t)<br>&#125;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">propTypes</span> = &#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>.<span class=\"hljs-property\">isRequired</span>, <span class=\"hljs-comment\">//限制name必传，且为字符串</span><br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">string</span>,<span class=\"hljs-comment\">//限制sex为字符串</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-title class_\">PropTypes</span>.<span class=\"hljs-property\">number</span>,<span class=\"hljs-comment\">//限制age为数值</span><br>&#125;<br><br><span class=\"hljs-comment\">//指定默认标签属性值</span><br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">defaultProps</span> = &#123;<br>    <span class=\"hljs-attr\">sex</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>,<span class=\"hljs-comment\">//sex默认值为男</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">//age默认值为18</span><br>&#125;<br><span class=\"hljs-comment\">//渲染组件到页面</span><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;jerry&quot;</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ref（可以获取真实DOM节点）\"><a href=\"#Ref（可以获取真实DOM节点）\" class=\"headerlink\" title=\"Ref（可以获取真实DOM节点）\"></a>Ref（可以获取真实DOM节点）</h3><blockquote>\n<p>React提供的这个<code>ref</code>属性，**表示为对组件真正实例的引用，其实就是<code>ReactDOM.render()返回的组件实例</code>**；需要区分一下，<code>ReactDOM.render()</code>渲染组件时返回的是组件实例；而渲染dom元素时，返回是具体的dom节点。</p>\n<p><strong>通过event.target得到发生事件的DOM元素对象 ，不要过度使用ref</strong></p>\n<p>官方说明：你可能首先会想到使用 refs 在你的 app 中“让事情发生”。如果是这种情况，请花一点时间，认真再考虑一下 state 属性应该被安排在哪个组件层中。通常你会想明白，让更高的组件层级拥有这个 state，是更恰当的。查看 <a href=\"https://react.docschina.org/docs/lifting-state-up.html\">状态提升</a> 以获取更多有关示例</p>\n</blockquote>\n<h4 id=\"字符串形式\"><a href=\"#字符串形式\" class=\"headerlink\" title=\"字符串形式\"></a>字符串形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;test1&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">refs</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(test1, test1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;test1&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"回调函数形式\"><a href=\"#回调函数形式\" class=\"headerlink\" title=\"回调函数形式\"></a>回调函数形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//回调函数形式：此种方式第一次都会默认调用一次，会有执行次数的问题</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">//字符串形式已经被弃用</span><br>        <span class=\"hljs-keyword\">let</span> &#123;input1&#125; = <span class=\"hljs-variable language_\">this</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(input1, input1.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">// 方式二</span><br>    saveInput = <span class=\"hljs-function\">(<span class=\"hljs-params\">a</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span> = a;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;@&#x27;</span>,a);<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                &#123;/*JSX里的注释得这么写*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式一 */&#125;</span><br><span class=\"language-xml\">                &#123;/* a标识当前元素，&#123;&#125;方法体里表示：将当前元素a赋值给当前实例中的属性input1 */&#125;</span><br><span class=\"language-xml\">                &#123;/* <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;a</span> =&gt;</span> &#123;this.input1 = a;console.log(&#x27;@&#x27;,a)&#125;&#125; placeholder=&quot;test1&quot;/&gt;*/&#125;</span><br><span class=\"language-xml\">                &#123;/* 方式二 */&#125;</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.saveInput&#125;</span>  <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"React-createRef-形式\"><a href=\"#React-createRef-形式\" class=\"headerlink\" title=\"React.createRef()形式\"></a><code>React.createRef()</code>形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//React 16.3 版本引入的 React.createRef() API</span><br><span class=\"hljs-comment\">//Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    input1 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    input2 = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();<br>    test1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input1</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//函数默认会带上当前事件绑定的DOM元素</span><br>    test2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(e, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input2</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>)<br>    &#125;<br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input1&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;test1&quot;</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.test1&#125;</span>&gt;</span>点击获取test1数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input2&#125;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;失去焦点获取当前输入数据&quot;</span> <span class=\"hljs-attr\">onBlur</span>=<span class=\"hljs-string\">&#123;this.test2&#125;/</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"React的受控组件和非受控组件\"><a href=\"#React的受控组件和非受控组件\" class=\"headerlink\" title=\"React的受控组件和非受控组件\"></a>React的受控组件和非受控组件</h2><blockquote>\n<p>受控组件就是可以被 react 状态控制的组件<br>在 react 中，Input textarea 等组件默认是非受控组件（输入框内部的值是用户控制，和React无关）。但是也可以转化成受控组件，就是通过 onChange 事件获取当前输入内容，将当前输入内容作为 value 传入，此时就成为受控组件。<br>好处：可以通过 onChange 事件控制用户输入，使用正则表达式过滤不合理输入。</p>\n<p><strong>React没有实现数据的双向绑定，一句话概括：双向数据绑定就是受控组件</strong></p>\n</blockquote>\n<h2 id=\"高阶函数定义\"><a href=\"#高阶函数定义\" class=\"headerlink\" title=\"高阶函数定义\"></a>高阶函数定义</h2><blockquote>\n<p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p>\n<ol>\n<li>若某xx函数，接收的参数是一个函数，那么xx函数就可以称之为高阶函数。</li>\n<li>若某xx函数，调用的返回值依然是一个函数，那么xx函数就可以称之为高阶函数。</li>\n</ol>\n<p>常见的高阶函数有：Promise、setTimeout、arr.map()等等。。。</p>\n</blockquote>\n<h2 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h2><h3 id=\"（旧）生命周期\"><a href=\"#（旧）生命周期\" class=\"headerlink\" title=\"（旧）生命周期\"></a>（旧）生命周期</h3><p><img src=\"https://i.loli.net/2021/03/24/qY2bIOLzhsgK1fV.png\"></p>\n<h4 id=\"（旧）生命周期详解：\"><a href=\"#（旧）生命周期详解：\" class=\"headerlink\" title=\"（旧）生命周期详解：\"></a>（旧）生命周期详解：</h4><blockquote>\n<p>18版本可能会移除的钩子函数：</p>\n<p><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></p>\n<p><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></p>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n<p>17版本还可以用，但是必须得加上<code>UNSAFE_</code>前缀</p>\n<p>举例：<code>UNSAFE_componentWillMount()</code></p>\n</blockquote>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><code>constructor(props)</code>【构造器】</li>\n<li><del><code>componentWillMount()</code>【组件将要挂载的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件<code>render()</code>触发</p>\n<ol>\n<li><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</li>\n<li><del><code>componentWillUpdate()</code>【组件将要更新的钩子】已弃用</del></li>\n<li><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></li>\n<li><code>componentDidUpdate()</code>【组件更新完毕的钩子】</li>\n</ol>\n<blockquote>\n<p><del><code>componentWillReceiveProps(props)</code>【子组件将要接收新的props的钩子】已弃用</del></p>\n</blockquote>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要挂载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillMount-组件将要挂载的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要更新的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUpdate-组件将要更新的钩子&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">A</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&#123;this.state.count&#125;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">A</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//子组件</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要接收新的props的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillReceiveProps</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillReceiveProps&#x27;</span>, props);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//控制组件更新的“阀门”</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---shouldComponentUpdate&#x27;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件将要更新的钩子</span><br>    <span class=\"hljs-title function_\">componentWillUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentWillUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//组件更新完毕的钩子</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;A---componentDidUpdate&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>我是子组件“A”，父组件传过来的值是：&#123;this.props.count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"（新）生命周期\"><a href=\"#（新）生命周期\" class=\"headerlink\" title=\"（新）生命周期\"></a>（新）生命周期</h3><p>*<strong>展示不常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/24/jbJCSoNipsql2X7.png\"></p>\n<p><strong>展示常用生命周期：</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/l3HKgexf7y2wnmc.png\"></p>\n<h4 id=\"（新）生命周期详解：\"><a href=\"#（新）生命周期详解：\" class=\"headerlink\" title=\"（新）生命周期详解：\"></a>（新）生命周期详解：</h4><p><a href=\"https://react.docschina.org/docs/react-component.html#shouldcomponentupdate\">官方文档：生命周期</a></p>\n<ol>\n<li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p>\n<ol>\n<li><p><code>constructor(props)</code>【构造器】</p>\n</li>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><strong><code>componentDidMount()</code> 【组件挂载完毕的钩子】（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）</strong></p>\n</li>\n</ol>\n</li>\n<li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render()</code>触发</p>\n<ol>\n<li><p><code>getDerivedStateFromProps(props,state)</code></p>\n<blockquote>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props,state</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);<br>    <span class=\"hljs-comment\">//返回快照值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>新增（极少用到）</p>\n<p>若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</p>\n</blockquote>\n</li>\n<li><p><code>shouldComponentUpdate()</code>【控制组件更新的“阀门”，有返回值：true&#x2F;false】</p>\n</li>\n<li><p><strong><code>render()</code>【将虚拟DOM渲染到页面】（必须用）</strong></p>\n</li>\n<li><p><code>getSnapshotBeforeUpdate(prevProps, prevState)</code>【在更新之前获取快照】</p>\n<blockquote>\n<p>新增（极少用到）</p>\n<p>使用场景：类似微信朋友圈，朋友圈消息在不断更新动态新增时，刷到中间时停住，同时，消息也在不断新增。</p>\n</blockquote>\n</li>\n<li><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code>【组件更新完毕的钩子】</p>\n</li>\n</ol>\n</li>\n<li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode(&#123;真实DOM元素&#125;)</code>触发</p>\n<blockquote>\n<p>示例：ReactDOM.unmountComponentAtNode(document.getElementById(‘test’))</p>\n</blockquote>\n<ol>\n<li><strong><code>componentWillUnmount()</code> 【组件将要卸载的钩子】 （常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）</strong></li>\n</ol>\n</li>\n</ol>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 构造器</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;constructor-构造器&#x27;</span>, props);<br>        <span class=\"hljs-variable language_\">super</span>(props)<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>&#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 若state的值在任何时候都取决于props</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromProps</span>(<span class=\"hljs-params\">props, state</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getDerivedStateFromProps-若state的值在任何时候都取决于props&#x27;</span>, props, state);<br>        <span class=\"hljs-comment\">// return &#123;count: state.count + 1&#125;;</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 控制组件更新的“阀门”</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">props</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">state</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">value</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@returns</span> &#123;<span class=\"hljs-type\">boolean</span>&#125; true：继续、false：不走了</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">shouldComponentUpdate</span>(<span class=\"hljs-params\">props, state, value</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;shouldComponentUpdate-控制组件更新的“阀门”，有返回值：true/false&quot;</span>, props, state, value)<br>        <span class=\"hljs-comment\">//返回值控制接下来的钩子函数走向，true：继续、false：不走了</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件挂载完毕的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidMount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentDidMount-组件挂载完毕的钩子-（常用：一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件更新完毕的钩子</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevProps</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">prevState</span></span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">snapshot</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentDidUpdate</span>(<span class=\"hljs-params\">prevProps, prevState, snapshot</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;componentDidUpdate-组件更新完毕的钩子&#x27;</span>, prevProps, prevState, snapshot);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将虚拟DOM渲染到页面</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;render-将虚拟DOM渲染到页面&quot;</span>)<br>        <span class=\"hljs-keyword\">let</span> &#123;count&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>        <span class=\"hljs-keyword\">return</span> (<br>            <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>我是父组件，当前数字：&#123;count&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.addCount()&#125;&gt;点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> this.forceUpdate()&#125;&gt;强制更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))&#125;</span><br><span class=\"language-xml\">                        style=&#123;&#123;backgroundColor: &quot;red&quot;&#125;&#125;&gt;卸载组件</span><br><span class=\"language-xml\">                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 在更新之前获取快照</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">getSnapshotBeforeUpdate</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;getSnapshotBeforeUpdate-在更新之前获取快照&#x27;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 组件将要卸载的钩子</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-title function_\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">&quot;componentWillUnmount-组件将要卸载的钩子-（常用：一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息）&quot;</span>)<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=============================================================</span><br>    <span class=\"hljs-comment\">//自定义方法</span><br>    <span class=\"hljs-title function_\">addCount</span>(<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">count</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>&#125;);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TestComponent</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">b</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>/&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Diffing算法\"><a href=\"#Diffing算法\" class=\"headerlink\" title=\"Diffing算法\"></a>Diffing算法</h2><p><strong>diff算法其实就是对DOM进行different比较不同的一种算法(虚拟的比较更节约性能) 补丁:用来更新DOM的任务</strong></p>\n<p><img src=\"https://i.loli.net/2021/03/26/5humsyKqxLcRCP8.png\"></p>\n<p><strong>遍历规则：先序深度优先遍历(从根节点向下级子节点遍历)</strong></p>\n<blockquote>\n<p>0是根节点、1 2 5叫广度优先、1 2 3 4 5深度优先</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/03/26/91itJMZoAcTDa78.png\"></p>\n<h2 id=\"For循环为什么key不能用index索引值作为key\"><a href=\"#For循环为什么key不能用index索引值作为key\" class=\"headerlink\" title=\"For循环为什么key不能用index索引值作为key\"></a>For循环为什么key不能用index索引值作为key</h2><blockquote>\n<p>可能会出现严重的效率问题</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  经典面试题:</span><br><span class=\"hljs-comment\">     1). react/vue中的key有什么作用？（key的内部原理是什么？）</span><br><span class=\"hljs-comment\">     2). 为什么遍历列表时，key最好不要用index?</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t1. 虚拟DOM中key的作用：</span><br><span class=\"hljs-comment\">\t\t\t\t1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】,</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\ta. 旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(1).若虚拟DOM中内容没变, 直接使用之前的真实DOM</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t(2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\tb. 旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t根据数据创建新的真实DOM，随后渲染到到页面</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t2. 用index作为key可能会引发的问题：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2. 如果结构中还包含输入类的DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t仅用于渲染列表用于展示，使用index作为key是没有问题的。</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t3. 开发中如何选择key?:</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t2.如果确定只是简单的展示数据，用index也是可以的。</span><br><span class=\"hljs-comment\">  */</span><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t慢动作回放----使用index索引值作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=0&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">-----------------------------------------------------------------</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">慢动作回放----使用id唯一标识作为key</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t初始数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t初始的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\">\t\t更新后的数据：</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:3,name:&#x27;小王&#x27;,age:20&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:1,name:&#x27;小张&#x27;,age:18&#125;,</span><br><span class=\"hljs-comment\">\t\t\t\t&#123;id:2,name:&#x27;小李&#x27;,age:19&#125;,</span><br><span class=\"hljs-comment\">\t\t更新数据后的虚拟DOM：</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=3&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\">\t\t\t\t&lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;</span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br><br>\tstate = &#123;<br>\t\t<span class=\"hljs-attr\">persons</span>:[<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小张&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;,<br>\t\t\t&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小李&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span>&#125;,<br>\t\t]<br>\t&#125;<br><br>\tadd = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>\t\t<span class=\"hljs-keyword\">const</span> &#123;persons&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>\t\t<span class=\"hljs-keyword\">const</span> p = &#123;<span class=\"hljs-attr\">id</span>:persons.<span class=\"hljs-property\">length</span>+<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小王&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;<br>\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<span class=\"hljs-attr\">persons</span>:[p,...persons]&#125;)<br>\t&#125;<br><br>\t<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> (<br>\t\t\t<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>展示人员信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用index（索引值）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj,index)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;index&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>使用id（数据的唯一标识）作为key<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\tthis.state.persons.map((personObj)=&gt;&#123;</span><br><span class=\"language-xml\">\t\t\t\t\t\t\treturn <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t\t\t\t&#125;)</span><br><span class=\"language-xml\">\t\t\t\t\t&#125;</span><br><span class=\"language-xml\">\t\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>\t\t)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Person</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n"},{"title":"ElasticSearch入门","_content":"# ElasticSearch入门\n\n## ElasticSearch的基本概念\n\n+ **Index**\n\n  > 类似于mysql数据库中的database（数据库）\n  >\n  > 是文档的容器，是一类文档的集合\n  >\n  > + Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型\n  > + Shard：体现了物理空间的概念，索引中的数据分散在Shard上\n\n+ **~~Type~~**\n\n  > ~~类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。~~\n  >\n  > 在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type \"_doc\"。\n\n+ **Document**\n\n  > 由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。\n  >\n  > 文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成\n\n+ **Field**\n\n  > es中一个文档中对应的多个列与mysql数据库中每一列对应。字段\n\n+ **Mapping**\n\n  > 文档字段类型\n\n+ **indexed**\n\n  > 就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。\n\n+ **Query DSL**\n\n  > 类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL\n\n+ **GET/PUT/POST/DELETE**\n\n  > 分别类似与mysql中的select/update/delete......\n\n### 类比：\n\n| 关系型数据库     | ES            |\n| ---------------- | ------------- |\n| Table            | Index（Type） |\n| Row              | Document      |\n| Column           | Field         |\n| Schema（表定义） | Mapping       |\n| SQL              | DSL           |\n\n**每个文档都会有相应的元数据**\n\n```json\n\n```\n\n元数据用于标注文档的相关信息：\n\n+ _index：文档所属索引名（库名）\n+ _type：文档所属类型名（表名）\n+ _id：唯一ID\n+ _source：原始JSON数据\n+ ~~_all：整合所有内容到该字段，7.0版本已被废除~~\n+ _version：版本号\n+ _score：相关性打分\n\n## 分布式系统的可用性和扩展性\n\n+ 高可用\n  - 服务可用性-允许所有节点停止服务\n  - 数据可用性-部分节点丢失，不会丢失数据\n+ 可扩展\n  - 请求量提升/数据不断的增长（将数据分布到所有节点上）\n\n### 分布式特性\n\n+ ElasticSearch的分布式架构好处\n  - 存储的水平扩容\n  - 提高系统的可用性，部分节点停止服务，整个集群的服务不受影响\n+ ElasticSearch分布式架构\n  - 不同的集群通过不同的名字来区分，默认为“elasticSearch”\n  - 通过配置文件可修改，或者在命令行中 ``-E cluster-name=test `` 进行设定\n  - 一个集群可以有一个或多个节点\n\n### Master-eligible nodes（Master候选者） 和 Master Node\n\n+ 每个节点启动后，默认就是一个Master-eligible节点\n  - 可以设置 ``node.master:false`` 禁止\n+ Master-eligible节点可以参加选主流程，称为Master Node节点\n+ 当第一个节点启动的时候，会将自己选举成Master Node节点\n+ 每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）\n  - 集群状态（Cluster State），维护了一个集群中，必要的信息\n    + 所有的节点信息\n    + 所有的索引和相关的Mapping和Setting信息\n    + 分片的路由信息\n\n### Date Node & Coordinating Node（数据整合节点）\n\n+ Data Node\n  + 可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用\n+ Coordinating Node\n  + 负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起\n  + 每个节点默认都起到Coordinating Node的职责\n\n### 其他节点类型\n\n+ Hot & Warm Node（冷热节点）\n  + 不同硬件配置的Data Node，用来实现Hot & Warm架构，降低就能部署的成本\n+ Machine Learning Node\n  + 负责跑机器学习的Job，用来做异常检测的\n+ ~~Tribe Node~~\n  + （5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理\n\n### 配置节点类型\n\n+ 开发环境中一个节点可以承担多种角色\n+ 生产环境中，应该设置单一的角色的节点（dedicated node）\n\n| 节点类型          | 配置参数    | 默认值                                                    |\n| ----------------- | ----------- | --------------------------------------------------------- |\n| maste eligible    | node.master | true                                                      |\n| data              | node.data   | true                                                      |\n| ingest            | node.ingest | true                                                      |\n| coordinating only | 无          | 每个节点默认都是coordinating节点，设置其他类型全部为false |\n| machine learning  | node.ml     | true（需enable x-pack）                                   |\n\n### 分片（Primary Shard & Replica Shard）\n\n+ 主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商\n  + 一个分片是一个运行的Lucene（搜索引擎）的实例\n  + 主分片数在索引创建时指定，后续不允许修改，除非Reindex\n+ 副本，用以解决数据高可用的问题。副本是主分片的拷贝\n  + 副本分片数，可以动态调整\n  + 增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）\n\n### 查看集群的健康状况\n\n![image-20210309114915854](C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png)\n\n**在Kibana的开发工具中，快捷键按下`Ctrl+/`可以直接跳到ES官方的API中**\n\n### 文档的CRUD\n\n```http\n\n#更新（先删除原数据，在新建新数据，同时版本+1）、创建\nPUT {Index}/_doc/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#创建（自动生成ID）\nPOST {Index}/_doc\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#查询 \nGET {Index}/_doc/{id}\n#更新（文档必须已经存在，更新只会对相应字段做增量修改）\nPOST {Index}/_update/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#删除\nDELETE {Index}/_doc/{id}\n```\n\n+ Type名，约定都用_doc\n+ Create：如果ID已经存在，会失败\n+ Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加\n+ Update：文档必须已经存在，更新只会对相应字段做增量修改\n\n> Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1\n\n### Bulk API\n\n+ 在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作\n+ 支持四种类型的操作\n  + Index\n  + Create\n  + Update\n  + Delete\n+ 可以在URL中指定Index，也可以在请求的Payload中进行\n+ 操作中单条操作失败，并不会影响到其他操作\n+ 返回结果包括了每一条操作执行结果\n\n```http\n\nPOST _bulk\n{\"index\":{\"_index\":\"test\",\"_id\":\"1\"}}\n{\"field1\":\"value1\"}\n{\"delete\":{\"_index\":\"test\",\"_id\":\"2\"}}\n{\"create\":{\"_index\":\"test2\",\"_id\":\"3\"}}\n{\"field1\":\"value3\"}\n{\"update\":{\"_index\":\"test3\",\"_id\":\"3\"}}\n{\"doc\":{\"field2\":\"value2\"}}\n```\n\n### 批量读取-MEGT\n\n批量操作，可以减少网络连接所产生的开销，提高性能\n\n```http\n\nGET _mget\n{\n  \"docs\":[\n      {\n        \"_index\":\"users\",\n        \"_id\":1\n      },\n      {\n        \"_index\":\"users\",\n        \"_id\":2\n      }\n    ]\n}\n```\n\n### 批量查询-MSEARCH \n\n```http\n\nPOST {index}/_msearch\n```\n\n### 索引：正排、倒排\n\n正排例如书本的目录，文档ID到文档和单词的关联\n\n倒排书本最后的索引页就是倒排索引，单词到文档ID的关系\n\n**倒排索引的核心组成**\n\n+ 倒排索引包含两个部分\n  + 单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系\n    + 单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询\n  + 倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成\n    + 倒排索引项（Posting ）\n      + 文档ID\n      + 词频TF：该单词问文档中出现的次数，用于相关性评分\n      + 位置（Position）：单词在文档中分词的文职。用于语句搜索\n      + 偏移（Offset）：记录单词的开始结束位置，实现高亮显示\n\n### Analysis与Analyzer（分词器）\n\n+ Analysis：文本分析是把全文本转换一系列单词（term/token）的过程，也叫分词\n+ Analysis是通过Analyzer来实现的\n  + 可以使用Elasticsearch内置的分析器/或者按需自定义定制化分析器\n+ 除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析\n\n#### Analyzer（分词器）的组成\n\n+ 分词器是专门处理分词的组件，Analyzer由三部分组成\n  + Character Filters（针对原始文本处理，例如去除html标签）\n  + Tokenizer（按照规则切分为单词）\n  + Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）\n\n#### Elasticsearch内置分词器\n\n+ Standard Analyzer：默认分词器，按词切分，小写处理\n+ Simple Analyzer：按照非字母切分（符号被过滤），小写处理\n+ Stop Analyzer：小写处理，停用词过滤（the、a、is）\n+ Whitespace Analyzer：按照空格切分，不转小写\n+ Keyword Analyzer：不分词，直接降输入当做关键字输出\n+ Patter Analyzer：正则表达式，默认`\\W+`（非支付分隔）\n+ Language：提供了30多种常见语言分词器\n+ Customer Analyzer：自定义分词器\n\n#### 使用_analyzer API\n\n```http\n# 示例\n\n\n# standard：默认分词器，按词切分，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"standard\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# simple：按照非字母切分，非字母都被去除，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"simple\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语\nGET /_analyze\n{\n  \"analyzer\":\"stop\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# whitespace：按照空格切分\nGET /_analyze\n{\n  \"analyzer\":\"whitespace\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# keyword：关键字\nGET /_analyze\n{\n  \"analyzer\":\"keyword\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n```\n\n#### ICU Analyzer\n\n+ 需要安装plugin\n  + Elasticsearch-plugin install analysis-icu\n+ 提供了Unicode的支持，更好的支持亚洲语言\n\n#### 更多的中文分词器\n\n+ IK\n  + 支持自定义词库，支持热更新分词字典\n  + https://github.com/medcl/elasticsearch-analysis-ik\n+ THULAC\n  + 清华大学自然语言处理和社会人文计算实验室的一套中文分词器\n  + https://github.com/microbun/elasticsearch-thulac-plugin\n\n## Search 搜索API\n\n+ URL Search\n  + 在url中使用查询参数\n+ Request Body Search\n  + 使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）\n\n**指定查询索引**\n\n| 语法                   | 范围              |\n| ---------------------- | ----------------- |\n| /_search               | 集群上所有的索引  |\n| /index1/_search        | index1            |\n| /index1,index2/_search | index1和index2    |\n| /index*/_search        | 以index开头的索引 |\n\n#### URL查询\n\n`http://{ip}:{port}/{index}/_search?q={field}:{value}`\n\n#### Request Body\n\n```http\nhttp://\n```\n\n","source":"_posts/数据库/ElasticSearch/ElasticSearch入门.md","raw":"---\ntitle: ElasticSearch入门\ntags:\n  - ElasticSearch\n  - ES\n  - 数据库\ncategories:\n  - 数据库\n---\n# ElasticSearch入门\n\n## ElasticSearch的基本概念\n\n+ **Index**\n\n  > 类似于mysql数据库中的database（数据库）\n  >\n  > 是文档的容器，是一类文档的集合\n  >\n  > + Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型\n  > + Shard：体现了物理空间的概念，索引中的数据分散在Shard上\n\n+ **~~Type~~**\n\n  > ~~类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。~~\n  >\n  > 在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type \"_doc\"。\n\n+ **Document**\n\n  > 由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。\n  >\n  > 文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成\n\n+ **Field**\n\n  > es中一个文档中对应的多个列与mysql数据库中每一列对应。字段\n\n+ **Mapping**\n\n  > 文档字段类型\n\n+ **indexed**\n\n  > 就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。\n\n+ **Query DSL**\n\n  > 类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL\n\n+ **GET/PUT/POST/DELETE**\n\n  > 分别类似与mysql中的select/update/delete......\n\n### 类比：\n\n| 关系型数据库     | ES            |\n| ---------------- | ------------- |\n| Table            | Index（Type） |\n| Row              | Document      |\n| Column           | Field         |\n| Schema（表定义） | Mapping       |\n| SQL              | DSL           |\n\n**每个文档都会有相应的元数据**\n\n```json\n\n```\n\n元数据用于标注文档的相关信息：\n\n+ _index：文档所属索引名（库名）\n+ _type：文档所属类型名（表名）\n+ _id：唯一ID\n+ _source：原始JSON数据\n+ ~~_all：整合所有内容到该字段，7.0版本已被废除~~\n+ _version：版本号\n+ _score：相关性打分\n\n## 分布式系统的可用性和扩展性\n\n+ 高可用\n  - 服务可用性-允许所有节点停止服务\n  - 数据可用性-部分节点丢失，不会丢失数据\n+ 可扩展\n  - 请求量提升/数据不断的增长（将数据分布到所有节点上）\n\n### 分布式特性\n\n+ ElasticSearch的分布式架构好处\n  - 存储的水平扩容\n  - 提高系统的可用性，部分节点停止服务，整个集群的服务不受影响\n+ ElasticSearch分布式架构\n  - 不同的集群通过不同的名字来区分，默认为“elasticSearch”\n  - 通过配置文件可修改，或者在命令行中 ``-E cluster-name=test `` 进行设定\n  - 一个集群可以有一个或多个节点\n\n### Master-eligible nodes（Master候选者） 和 Master Node\n\n+ 每个节点启动后，默认就是一个Master-eligible节点\n  - 可以设置 ``node.master:false`` 禁止\n+ Master-eligible节点可以参加选主流程，称为Master Node节点\n+ 当第一个节点启动的时候，会将自己选举成Master Node节点\n+ 每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）\n  - 集群状态（Cluster State），维护了一个集群中，必要的信息\n    + 所有的节点信息\n    + 所有的索引和相关的Mapping和Setting信息\n    + 分片的路由信息\n\n### Date Node & Coordinating Node（数据整合节点）\n\n+ Data Node\n  + 可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用\n+ Coordinating Node\n  + 负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起\n  + 每个节点默认都起到Coordinating Node的职责\n\n### 其他节点类型\n\n+ Hot & Warm Node（冷热节点）\n  + 不同硬件配置的Data Node，用来实现Hot & Warm架构，降低就能部署的成本\n+ Machine Learning Node\n  + 负责跑机器学习的Job，用来做异常检测的\n+ ~~Tribe Node~~\n  + （5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理\n\n### 配置节点类型\n\n+ 开发环境中一个节点可以承担多种角色\n+ 生产环境中，应该设置单一的角色的节点（dedicated node）\n\n| 节点类型          | 配置参数    | 默认值                                                    |\n| ----------------- | ----------- | --------------------------------------------------------- |\n| maste eligible    | node.master | true                                                      |\n| data              | node.data   | true                                                      |\n| ingest            | node.ingest | true                                                      |\n| coordinating only | 无          | 每个节点默认都是coordinating节点，设置其他类型全部为false |\n| machine learning  | node.ml     | true（需enable x-pack）                                   |\n\n### 分片（Primary Shard & Replica Shard）\n\n+ 主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商\n  + 一个分片是一个运行的Lucene（搜索引擎）的实例\n  + 主分片数在索引创建时指定，后续不允许修改，除非Reindex\n+ 副本，用以解决数据高可用的问题。副本是主分片的拷贝\n  + 副本分片数，可以动态调整\n  + 增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）\n\n### 查看集群的健康状况\n\n![image-20210309114915854](C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png)\n\n**在Kibana的开发工具中，快捷键按下`Ctrl+/`可以直接跳到ES官方的API中**\n\n### 文档的CRUD\n\n```http\n\n#更新（先删除原数据，在新建新数据，同时版本+1）、创建\nPUT {Index}/_doc/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#创建（自动生成ID）\nPOST {Index}/_doc\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#查询 \nGET {Index}/_doc/{id}\n#更新（文档必须已经存在，更新只会对相应字段做增量修改）\nPOST {Index}/_update/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#删除\nDELETE {Index}/_doc/{id}\n```\n\n+ Type名，约定都用_doc\n+ Create：如果ID已经存在，会失败\n+ Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加\n+ Update：文档必须已经存在，更新只会对相应字段做增量修改\n\n> Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1\n\n### Bulk API\n\n+ 在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作\n+ 支持四种类型的操作\n  + Index\n  + Create\n  + Update\n  + Delete\n+ 可以在URL中指定Index，也可以在请求的Payload中进行\n+ 操作中单条操作失败，并不会影响到其他操作\n+ 返回结果包括了每一条操作执行结果\n\n```http\n\nPOST _bulk\n{\"index\":{\"_index\":\"test\",\"_id\":\"1\"}}\n{\"field1\":\"value1\"}\n{\"delete\":{\"_index\":\"test\",\"_id\":\"2\"}}\n{\"create\":{\"_index\":\"test2\",\"_id\":\"3\"}}\n{\"field1\":\"value3\"}\n{\"update\":{\"_index\":\"test3\",\"_id\":\"3\"}}\n{\"doc\":{\"field2\":\"value2\"}}\n```\n\n### 批量读取-MEGT\n\n批量操作，可以减少网络连接所产生的开销，提高性能\n\n```http\n\nGET _mget\n{\n  \"docs\":[\n      {\n        \"_index\":\"users\",\n        \"_id\":1\n      },\n      {\n        \"_index\":\"users\",\n        \"_id\":2\n      }\n    ]\n}\n```\n\n### 批量查询-MSEARCH \n\n```http\n\nPOST {index}/_msearch\n```\n\n### 索引：正排、倒排\n\n正排例如书本的目录，文档ID到文档和单词的关联\n\n倒排书本最后的索引页就是倒排索引，单词到文档ID的关系\n\n**倒排索引的核心组成**\n\n+ 倒排索引包含两个部分\n  + 单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系\n    + 单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询\n  + 倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成\n    + 倒排索引项（Posting ）\n      + 文档ID\n      + 词频TF：该单词问文档中出现的次数，用于相关性评分\n      + 位置（Position）：单词在文档中分词的文职。用于语句搜索\n      + 偏移（Offset）：记录单词的开始结束位置，实现高亮显示\n\n### Analysis与Analyzer（分词器）\n\n+ Analysis：文本分析是把全文本转换一系列单词（term/token）的过程，也叫分词\n+ Analysis是通过Analyzer来实现的\n  + 可以使用Elasticsearch内置的分析器/或者按需自定义定制化分析器\n+ 除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析\n\n#### Analyzer（分词器）的组成\n\n+ 分词器是专门处理分词的组件，Analyzer由三部分组成\n  + Character Filters（针对原始文本处理，例如去除html标签）\n  + Tokenizer（按照规则切分为单词）\n  + Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）\n\n#### Elasticsearch内置分词器\n\n+ Standard Analyzer：默认分词器，按词切分，小写处理\n+ Simple Analyzer：按照非字母切分（符号被过滤），小写处理\n+ Stop Analyzer：小写处理，停用词过滤（the、a、is）\n+ Whitespace Analyzer：按照空格切分，不转小写\n+ Keyword Analyzer：不分词，直接降输入当做关键字输出\n+ Patter Analyzer：正则表达式，默认`\\W+`（非支付分隔）\n+ Language：提供了30多种常见语言分词器\n+ Customer Analyzer：自定义分词器\n\n#### 使用_analyzer API\n\n```http\n# 示例\n\n\n# standard：默认分词器，按词切分，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"standard\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# simple：按照非字母切分，非字母都被去除，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"simple\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语\nGET /_analyze\n{\n  \"analyzer\":\"stop\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# whitespace：按照空格切分\nGET /_analyze\n{\n  \"analyzer\":\"whitespace\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# keyword：关键字\nGET /_analyze\n{\n  \"analyzer\":\"keyword\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n```\n\n#### ICU Analyzer\n\n+ 需要安装plugin\n  + Elasticsearch-plugin install analysis-icu\n+ 提供了Unicode的支持，更好的支持亚洲语言\n\n#### 更多的中文分词器\n\n+ IK\n  + 支持自定义词库，支持热更新分词字典\n  + https://github.com/medcl/elasticsearch-analysis-ik\n+ THULAC\n  + 清华大学自然语言处理和社会人文计算实验室的一套中文分词器\n  + https://github.com/microbun/elasticsearch-thulac-plugin\n\n## Search 搜索API\n\n+ URL Search\n  + 在url中使用查询参数\n+ Request Body Search\n  + 使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）\n\n**指定查询索引**\n\n| 语法                   | 范围              |\n| ---------------------- | ----------------- |\n| /_search               | 集群上所有的索引  |\n| /index1/_search        | index1            |\n| /index1,index2/_search | index1和index2    |\n| /index*/_search        | 以index开头的索引 |\n\n#### URL查询\n\n`http://{ip}:{port}/{index}/_search?q={field}:{value}`\n\n#### Request Body\n\n```http\nhttp://\n```\n\n","slug":"数据库/ElasticSearch/ElasticSearch入门","published":1,"date":"2021-03-10T06:58:49.000Z","updated":"2022-11-26T17:40:30.667Z","_id":"clay7wrxd0007cn2b6os5cb8u","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ElasticSearch入门\"><a href=\"#ElasticSearch入门\" class=\"headerlink\" title=\"ElasticSearch入门\"></a>ElasticSearch入门</h1><h2 id=\"ElasticSearch的基本概念\"><a href=\"#ElasticSearch的基本概念\" class=\"headerlink\" title=\"ElasticSearch的基本概念\"></a>ElasticSearch的基本概念</h2><ul>\n<li><p><strong>Index</strong></p>\n<blockquote>\n<p>类似于mysql数据库中的database（数据库）</p>\n<p>是文档的容器，是一类文档的集合</p>\n<ul>\n<li>Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型</li>\n<li>Shard：体现了物理空间的概念，索引中的数据分散在Shard上</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong><del>Type</del></strong></p>\n<blockquote>\n<p><del>类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。</del></p>\n<p>在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type “_doc”。</p>\n</blockquote>\n</li>\n<li><p><strong>Document</strong></p>\n<blockquote>\n<p>由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。</p>\n<p>文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成</p>\n</blockquote>\n</li>\n<li><p><strong>Field</strong></p>\n<blockquote>\n<p>es中一个文档中对应的多个列与mysql数据库中每一列对应。字段</p>\n</blockquote>\n</li>\n<li><p><strong>Mapping</strong></p>\n<blockquote>\n<p>文档字段类型</p>\n</blockquote>\n</li>\n<li><p><strong>indexed</strong></p>\n<blockquote>\n<p>就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。</p>\n</blockquote>\n</li>\n<li><p><strong>Query DSL</strong></p>\n<blockquote>\n<p>类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL</p>\n</blockquote>\n</li>\n<li><p><strong>GET&#x2F;PUT&#x2F;POST&#x2F;DELETE</strong></p>\n<blockquote>\n<p>分别类似与mysql中的select&#x2F;update&#x2F;delete……</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"类比：\"><a href=\"#类比：\" class=\"headerlink\" title=\"类比：\"></a>类比：</h3><table>\n<thead>\n<tr>\n<th>关系型数据库</th>\n<th>ES</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Table</td>\n<td>Index（Type）</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>Schema（表定义）</td>\n<td>Mapping</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>DSL</td>\n</tr>\n</tbody></table>\n<p><strong>每个文档都会有相应的元数据</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><br></code></pre></td></tr></table></figure>\n\n<p>元数据用于标注文档的相关信息：</p>\n<ul>\n<li>_index：文档所属索引名（库名）</li>\n<li>_type：文档所属类型名（表名）</li>\n<li>_id：唯一ID</li>\n<li>_source：原始JSON数据</li>\n<li><del>_all：整合所有内容到该字段，7.0版本已被废除</del></li>\n<li>_version：版本号</li>\n<li>_score：相关性打分</li>\n</ul>\n<h2 id=\"分布式系统的可用性和扩展性\"><a href=\"#分布式系统的可用性和扩展性\" class=\"headerlink\" title=\"分布式系统的可用性和扩展性\"></a>分布式系统的可用性和扩展性</h2><ul>\n<li>高可用<ul>\n<li>服务可用性-允许所有节点停止服务</li>\n<li>数据可用性-部分节点丢失，不会丢失数据</li>\n</ul>\n</li>\n<li>可扩展<ul>\n<li>请求量提升&#x2F;数据不断的增长（将数据分布到所有节点上）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分布式特性\"><a href=\"#分布式特性\" class=\"headerlink\" title=\"分布式特性\"></a>分布式特性</h3><ul>\n<li>ElasticSearch的分布式架构好处<ul>\n<li>存储的水平扩容</li>\n<li>提高系统的可用性，部分节点停止服务，整个集群的服务不受影响</li>\n</ul>\n</li>\n<li>ElasticSearch分布式架构<ul>\n<li>不同的集群通过不同的名字来区分，默认为“elasticSearch”</li>\n<li>通过配置文件可修改，或者在命令行中 <code>-E cluster-name=test </code> 进行设定</li>\n<li>一个集群可以有一个或多个节点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Master-eligible-nodes（Master候选者）-和-Master-Node\"><a href=\"#Master-eligible-nodes（Master候选者）-和-Master-Node\" class=\"headerlink\" title=\"Master-eligible nodes（Master候选者） 和 Master Node\"></a>Master-eligible nodes（Master候选者） 和 Master Node</h3><ul>\n<li>每个节点启动后，默认就是一个Master-eligible节点<ul>\n<li>可以设置 <code>node.master:false</code> 禁止</li>\n</ul>\n</li>\n<li>Master-eligible节点可以参加选主流程，称为Master Node节点</li>\n<li>当第一个节点启动的时候，会将自己选举成Master Node节点</li>\n<li>每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）<ul>\n<li>集群状态（Cluster State），维护了一个集群中，必要的信息<ul>\n<li>所有的节点信息</li>\n<li>所有的索引和相关的Mapping和Setting信息</li>\n<li>分片的路由信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Date-Node-amp-Coordinating-Node（数据整合节点）\"><a href=\"#Date-Node-amp-Coordinating-Node（数据整合节点）\" class=\"headerlink\" title=\"Date Node &amp; Coordinating Node（数据整合节点）\"></a>Date Node &amp; Coordinating Node（数据整合节点）</h3><ul>\n<li>Data Node<ul>\n<li>可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用</li>\n</ul>\n</li>\n<li>Coordinating Node<ul>\n<li>负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起</li>\n<li>每个节点默认都起到Coordinating Node的职责</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他节点类型\"><a href=\"#其他节点类型\" class=\"headerlink\" title=\"其他节点类型\"></a>其他节点类型</h3><ul>\n<li>Hot &amp; Warm Node（冷热节点）<ul>\n<li>不同硬件配置的Data Node，用来实现Hot &amp; Warm架构，降低就能部署的成本</li>\n</ul>\n</li>\n<li>Machine Learning Node<ul>\n<li>负责跑机器学习的Job，用来做异常检测的</li>\n</ul>\n</li>\n<li><del>Tribe Node</del><ul>\n<li>（5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置节点类型\"><a href=\"#配置节点类型\" class=\"headerlink\" title=\"配置节点类型\"></a>配置节点类型</h3><ul>\n<li>开发环境中一个节点可以承担多种角色</li>\n<li>生产环境中，应该设置单一的角色的节点（dedicated node）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>节点类型</th>\n<th>配置参数</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>maste eligible</td>\n<td>node.master</td>\n<td>true</td>\n</tr>\n<tr>\n<td>data</td>\n<td>node.data</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ingest</td>\n<td>node.ingest</td>\n<td>true</td>\n</tr>\n<tr>\n<td>coordinating only</td>\n<td>无</td>\n<td>每个节点默认都是coordinating节点，设置其他类型全部为false</td>\n</tr>\n<tr>\n<td>machine learning</td>\n<td>node.ml</td>\n<td>true（需enable x-pack）</td>\n</tr>\n</tbody></table>\n<h3 id=\"分片（Primary-Shard-amp-Replica-Shard）\"><a href=\"#分片（Primary-Shard-amp-Replica-Shard）\" class=\"headerlink\" title=\"分片（Primary Shard &amp; Replica Shard）\"></a>分片（Primary Shard &amp; Replica Shard）</h3><ul>\n<li>主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商<ul>\n<li>一个分片是一个运行的Lucene（搜索引擎）的实例</li>\n<li>主分片数在索引创建时指定，后续不允许修改，除非Reindex</li>\n</ul>\n</li>\n<li>副本，用以解决数据高可用的问题。副本是主分片的拷贝<ul>\n<li>副本分片数，可以动态调整</li>\n<li>增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看集群的健康状况\"><a href=\"#查看集群的健康状况\" class=\"headerlink\" title=\"查看集群的健康状况\"></a>查看集群的健康状况</h3><p><img src=\"C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png\" alt=\"image-20210309114915854\"></p>\n<p><strong>在Kibana的开发工具中，快捷键按下<code>Ctrl+/</code>可以直接跳到ES官方的API中</strong></p>\n<h3 id=\"文档的CRUD\"><a href=\"#文档的CRUD\" class=\"headerlink\" title=\"文档的CRUD\"></a>文档的CRUD</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>#更新（先删除原数据，在新建新数据，同时版本+1）、创建<br>PUT &#123;Index&#125;/_doc/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#创建（自动生成ID）<br>POST &#123;Index&#125;/_doc<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#查询 <br>GET &#123;Index&#125;/_doc/&#123;id&#125;<br>#更新（文档必须已经存在，更新只会对相应字段做增量修改）<br>POST &#123;Index&#125;/_update/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#删除<br>DELETE &#123;Index&#125;/_doc/&#123;id&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Type名，约定都用_doc</li>\n<li>Create：如果ID已经存在，会失败</li>\n<li>Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加</li>\n<li>Update：文档必须已经存在，更新只会对相应字段做增量修改</li>\n</ul>\n<blockquote>\n<p>Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1</p>\n</blockquote>\n<h3 id=\"Bulk-API\"><a href=\"#Bulk-API\" class=\"headerlink\" title=\"Bulk API\"></a>Bulk API</h3><ul>\n<li>在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作</li>\n<li>支持四种类型的操作<ul>\n<li>Index</li>\n<li>Create</li>\n<li>Update</li>\n<li>Delete</li>\n</ul>\n</li>\n<li>可以在URL中指定Index，也可以在请求的Payload中进行</li>\n<li>操作中单条操作失败，并不会影响到其他操作</li>\n<li>返回结果包括了每一条操作执行结果</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST _bulk<br>&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value1&quot;&#125;<br>&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;<br>&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;test2&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value3&quot;&#125;<br>&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;test3&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;doc&quot;:&#123;&quot;field2&quot;:&quot;value2&quot;&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量读取-MEGT\"><a href=\"#批量读取-MEGT\" class=\"headerlink\" title=\"批量读取-MEGT\"></a>批量读取-MEGT</h3><p>批量操作，可以减少网络连接所产生的开销，提高性能</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>GET _mget<br>&#123;<br>  &quot;docs&quot;:[<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:1<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:2<br>      &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量查询-MSEARCH\"><a href=\"#批量查询-MSEARCH\" class=\"headerlink\" title=\"批量查询-MSEARCH\"></a>批量查询-MSEARCH</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST &#123;index&#125;/_msearch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"索引：正排、倒排\"><a href=\"#索引：正排、倒排\" class=\"headerlink\" title=\"索引：正排、倒排\"></a>索引：正排、倒排</h3><p>正排例如书本的目录，文档ID到文档和单词的关联</p>\n<p>倒排书本最后的索引页就是倒排索引，单词到文档ID的关系</p>\n<p><strong>倒排索引的核心组成</strong></p>\n<ul>\n<li>倒排索引包含两个部分<ul>\n<li>单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系<ul>\n<li>单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询</li>\n</ul>\n</li>\n<li>倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成<ul>\n<li>倒排索引项（Posting ）<ul>\n<li>文档ID</li>\n<li>词频TF：该单词问文档中出现的次数，用于相关性评分</li>\n<li>位置（Position）：单词在文档中分词的文职。用于语句搜索</li>\n<li>偏移（Offset）：记录单词的开始结束位置，实现高亮显示</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Analysis与Analyzer（分词器）\"><a href=\"#Analysis与Analyzer（分词器）\" class=\"headerlink\" title=\"Analysis与Analyzer（分词器）\"></a>Analysis与Analyzer（分词器）</h3><ul>\n<li>Analysis：文本分析是把全文本转换一系列单词（term&#x2F;token）的过程，也叫分词</li>\n<li>Analysis是通过Analyzer来实现的<ul>\n<li>可以使用Elasticsearch内置的分析器&#x2F;或者按需自定义定制化分析器</li>\n</ul>\n</li>\n<li>除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析</li>\n</ul>\n<h4 id=\"Analyzer（分词器）的组成\"><a href=\"#Analyzer（分词器）的组成\" class=\"headerlink\" title=\"Analyzer（分词器）的组成\"></a>Analyzer（分词器）的组成</h4><ul>\n<li>分词器是专门处理分词的组件，Analyzer由三部分组成<ul>\n<li>Character Filters（针对原始文本处理，例如去除html标签）</li>\n<li>Tokenizer（按照规则切分为单词）</li>\n<li>Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Elasticsearch内置分词器\"><a href=\"#Elasticsearch内置分词器\" class=\"headerlink\" title=\"Elasticsearch内置分词器\"></a>Elasticsearch内置分词器</h4><ul>\n<li>Standard Analyzer：默认分词器，按词切分，小写处理</li>\n<li>Simple Analyzer：按照非字母切分（符号被过滤），小写处理</li>\n<li>Stop Analyzer：小写处理，停用词过滤（the、a、is）</li>\n<li>Whitespace Analyzer：按照空格切分，不转小写</li>\n<li>Keyword Analyzer：不分词，直接降输入当做关键字输出</li>\n<li>Patter Analyzer：正则表达式，默认<code>\\W+</code>（非支付分隔）</li>\n<li>Language：提供了30多种常见语言分词器</li>\n<li>Customer Analyzer：自定义分词器</li>\n</ul>\n<h4 id=\"使用-analyzer-API\"><a href=\"#使用-analyzer-API\" class=\"headerlink\" title=\"使用_analyzer API\"></a>使用_analyzer API</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"># 示例<br><br><br># standard：默认分词器，按词切分，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;standard&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># simple：按照非字母切分，非字母都被去除，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;simple&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;stop&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># whitespace：按照空格切分<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;whitespace&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># keyword：关键字<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;keyword&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ICU-Analyzer\"><a href=\"#ICU-Analyzer\" class=\"headerlink\" title=\"ICU Analyzer\"></a>ICU Analyzer</h4><ul>\n<li>需要安装plugin<ul>\n<li>Elasticsearch-plugin install analysis-icu</li>\n</ul>\n</li>\n<li>提供了Unicode的支持，更好的支持亚洲语言</li>\n</ul>\n<h4 id=\"更多的中文分词器\"><a href=\"#更多的中文分词器\" class=\"headerlink\" title=\"更多的中文分词器\"></a>更多的中文分词器</h4><ul>\n<li>IK<ul>\n<li>支持自定义词库，支持热更新分词字典</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\">https://github.com/medcl/elasticsearch-analysis-ik</a></li>\n</ul>\n</li>\n<li>THULAC<ul>\n<li>清华大学自然语言处理和社会人文计算实验室的一套中文分词器</li>\n<li><a href=\"https://github.com/microbun/elasticsearch-thulac-plugin\">https://github.com/microbun/elasticsearch-thulac-plugin</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Search-搜索API\"><a href=\"#Search-搜索API\" class=\"headerlink\" title=\"Search 搜索API\"></a>Search 搜索API</h2><ul>\n<li>URL Search<ul>\n<li>在url中使用查询参数</li>\n</ul>\n</li>\n<li>Request Body Search<ul>\n<li>使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）</li>\n</ul>\n</li>\n</ul>\n<p><strong>指定查询索引</strong></p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;_search</td>\n<td>集群上所有的索引</td>\n</tr>\n<tr>\n<td>&#x2F;index1&#x2F;_search</td>\n<td>index1</td>\n</tr>\n<tr>\n<td>&#x2F;index1,index2&#x2F;_search</td>\n<td>index1和index2</td>\n</tr>\n<tr>\n<td>&#x2F;index*&#x2F;_search</td>\n<td>以index开头的索引</td>\n</tr>\n</tbody></table>\n<h4 id=\"URL查询\"><a href=\"#URL查询\" class=\"headerlink\" title=\"URL查询\"></a>URL查询</h4><p><code>http://&#123;ip&#125;:&#123;port&#125;/&#123;index&#125;/_search?q=&#123;field&#125;:&#123;value&#125;</code></p>\n<h4 id=\"Request-Body\"><a href=\"#Request-Body\" class=\"headerlink\" title=\"Request Body\"></a>Request Body</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\">http://<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ElasticSearch入门\"><a href=\"#ElasticSearch入门\" class=\"headerlink\" title=\"ElasticSearch入门\"></a>ElasticSearch入门</h1><h2 id=\"ElasticSearch的基本概念\"><a href=\"#ElasticSearch的基本概念\" class=\"headerlink\" title=\"ElasticSearch的基本概念\"></a>ElasticSearch的基本概念</h2><ul>\n<li><p><strong>Index</strong></p>\n<blockquote>\n<p>类似于mysql数据库中的database（数据库）</p>\n<p>是文档的容器，是一类文档的集合</p>\n<ul>\n<li>Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型</li>\n<li>Shard：体现了物理空间的概念，索引中的数据分散在Shard上</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong><del>Type</del></strong></p>\n<blockquote>\n<p><del>类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。</del></p>\n<p>在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type “_doc”。</p>\n</blockquote>\n</li>\n<li><p><strong>Document</strong></p>\n<blockquote>\n<p>由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。</p>\n<p>文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成</p>\n</blockquote>\n</li>\n<li><p><strong>Field</strong></p>\n<blockquote>\n<p>es中一个文档中对应的多个列与mysql数据库中每一列对应。字段</p>\n</blockquote>\n</li>\n<li><p><strong>Mapping</strong></p>\n<blockquote>\n<p>文档字段类型</p>\n</blockquote>\n</li>\n<li><p><strong>indexed</strong></p>\n<blockquote>\n<p>就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。</p>\n</blockquote>\n</li>\n<li><p><strong>Query DSL</strong></p>\n<blockquote>\n<p>类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL</p>\n</blockquote>\n</li>\n<li><p><strong>GET&#x2F;PUT&#x2F;POST&#x2F;DELETE</strong></p>\n<blockquote>\n<p>分别类似与mysql中的select&#x2F;update&#x2F;delete……</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"类比：\"><a href=\"#类比：\" class=\"headerlink\" title=\"类比：\"></a>类比：</h3><table>\n<thead>\n<tr>\n<th>关系型数据库</th>\n<th>ES</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Table</td>\n<td>Index（Type）</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>Schema（表定义）</td>\n<td>Mapping</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>DSL</td>\n</tr>\n</tbody></table>\n<p><strong>每个文档都会有相应的元数据</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><br></code></pre></td></tr></table></figure>\n\n<p>元数据用于标注文档的相关信息：</p>\n<ul>\n<li>_index：文档所属索引名（库名）</li>\n<li>_type：文档所属类型名（表名）</li>\n<li>_id：唯一ID</li>\n<li>_source：原始JSON数据</li>\n<li><del>_all：整合所有内容到该字段，7.0版本已被废除</del></li>\n<li>_version：版本号</li>\n<li>_score：相关性打分</li>\n</ul>\n<h2 id=\"分布式系统的可用性和扩展性\"><a href=\"#分布式系统的可用性和扩展性\" class=\"headerlink\" title=\"分布式系统的可用性和扩展性\"></a>分布式系统的可用性和扩展性</h2><ul>\n<li>高可用<ul>\n<li>服务可用性-允许所有节点停止服务</li>\n<li>数据可用性-部分节点丢失，不会丢失数据</li>\n</ul>\n</li>\n<li>可扩展<ul>\n<li>请求量提升&#x2F;数据不断的增长（将数据分布到所有节点上）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分布式特性\"><a href=\"#分布式特性\" class=\"headerlink\" title=\"分布式特性\"></a>分布式特性</h3><ul>\n<li>ElasticSearch的分布式架构好处<ul>\n<li>存储的水平扩容</li>\n<li>提高系统的可用性，部分节点停止服务，整个集群的服务不受影响</li>\n</ul>\n</li>\n<li>ElasticSearch分布式架构<ul>\n<li>不同的集群通过不同的名字来区分，默认为“elasticSearch”</li>\n<li>通过配置文件可修改，或者在命令行中 <code>-E cluster-name=test </code> 进行设定</li>\n<li>一个集群可以有一个或多个节点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Master-eligible-nodes（Master候选者）-和-Master-Node\"><a href=\"#Master-eligible-nodes（Master候选者）-和-Master-Node\" class=\"headerlink\" title=\"Master-eligible nodes（Master候选者） 和 Master Node\"></a>Master-eligible nodes（Master候选者） 和 Master Node</h3><ul>\n<li>每个节点启动后，默认就是一个Master-eligible节点<ul>\n<li>可以设置 <code>node.master:false</code> 禁止</li>\n</ul>\n</li>\n<li>Master-eligible节点可以参加选主流程，称为Master Node节点</li>\n<li>当第一个节点启动的时候，会将自己选举成Master Node节点</li>\n<li>每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）<ul>\n<li>集群状态（Cluster State），维护了一个集群中，必要的信息<ul>\n<li>所有的节点信息</li>\n<li>所有的索引和相关的Mapping和Setting信息</li>\n<li>分片的路由信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Date-Node-amp-Coordinating-Node（数据整合节点）\"><a href=\"#Date-Node-amp-Coordinating-Node（数据整合节点）\" class=\"headerlink\" title=\"Date Node &amp; Coordinating Node（数据整合节点）\"></a>Date Node &amp; Coordinating Node（数据整合节点）</h3><ul>\n<li>Data Node<ul>\n<li>可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用</li>\n</ul>\n</li>\n<li>Coordinating Node<ul>\n<li>负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起</li>\n<li>每个节点默认都起到Coordinating Node的职责</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他节点类型\"><a href=\"#其他节点类型\" class=\"headerlink\" title=\"其他节点类型\"></a>其他节点类型</h3><ul>\n<li>Hot &amp; Warm Node（冷热节点）<ul>\n<li>不同硬件配置的Data Node，用来实现Hot &amp; Warm架构，降低就能部署的成本</li>\n</ul>\n</li>\n<li>Machine Learning Node<ul>\n<li>负责跑机器学习的Job，用来做异常检测的</li>\n</ul>\n</li>\n<li><del>Tribe Node</del><ul>\n<li>（5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置节点类型\"><a href=\"#配置节点类型\" class=\"headerlink\" title=\"配置节点类型\"></a>配置节点类型</h3><ul>\n<li>开发环境中一个节点可以承担多种角色</li>\n<li>生产环境中，应该设置单一的角色的节点（dedicated node）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>节点类型</th>\n<th>配置参数</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>maste eligible</td>\n<td>node.master</td>\n<td>true</td>\n</tr>\n<tr>\n<td>data</td>\n<td>node.data</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ingest</td>\n<td>node.ingest</td>\n<td>true</td>\n</tr>\n<tr>\n<td>coordinating only</td>\n<td>无</td>\n<td>每个节点默认都是coordinating节点，设置其他类型全部为false</td>\n</tr>\n<tr>\n<td>machine learning</td>\n<td>node.ml</td>\n<td>true（需enable x-pack）</td>\n</tr>\n</tbody></table>\n<h3 id=\"分片（Primary-Shard-amp-Replica-Shard）\"><a href=\"#分片（Primary-Shard-amp-Replica-Shard）\" class=\"headerlink\" title=\"分片（Primary Shard &amp; Replica Shard）\"></a>分片（Primary Shard &amp; Replica Shard）</h3><ul>\n<li>主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商<ul>\n<li>一个分片是一个运行的Lucene（搜索引擎）的实例</li>\n<li>主分片数在索引创建时指定，后续不允许修改，除非Reindex</li>\n</ul>\n</li>\n<li>副本，用以解决数据高可用的问题。副本是主分片的拷贝<ul>\n<li>副本分片数，可以动态调整</li>\n<li>增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看集群的健康状况\"><a href=\"#查看集群的健康状况\" class=\"headerlink\" title=\"查看集群的健康状况\"></a>查看集群的健康状况</h3><p><img src=\"C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png\" alt=\"image-20210309114915854\"></p>\n<p><strong>在Kibana的开发工具中，快捷键按下<code>Ctrl+/</code>可以直接跳到ES官方的API中</strong></p>\n<h3 id=\"文档的CRUD\"><a href=\"#文档的CRUD\" class=\"headerlink\" title=\"文档的CRUD\"></a>文档的CRUD</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>#更新（先删除原数据，在新建新数据，同时版本+1）、创建<br>PUT &#123;Index&#125;/_doc/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#创建（自动生成ID）<br>POST &#123;Index&#125;/_doc<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#查询 <br>GET &#123;Index&#125;/_doc/&#123;id&#125;<br>#更新（文档必须已经存在，更新只会对相应字段做增量修改）<br>POST &#123;Index&#125;/_update/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#删除<br>DELETE &#123;Index&#125;/_doc/&#123;id&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Type名，约定都用_doc</li>\n<li>Create：如果ID已经存在，会失败</li>\n<li>Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加</li>\n<li>Update：文档必须已经存在，更新只会对相应字段做增量修改</li>\n</ul>\n<blockquote>\n<p>Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1</p>\n</blockquote>\n<h3 id=\"Bulk-API\"><a href=\"#Bulk-API\" class=\"headerlink\" title=\"Bulk API\"></a>Bulk API</h3><ul>\n<li>在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作</li>\n<li>支持四种类型的操作<ul>\n<li>Index</li>\n<li>Create</li>\n<li>Update</li>\n<li>Delete</li>\n</ul>\n</li>\n<li>可以在URL中指定Index，也可以在请求的Payload中进行</li>\n<li>操作中单条操作失败，并不会影响到其他操作</li>\n<li>返回结果包括了每一条操作执行结果</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST _bulk<br>&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value1&quot;&#125;<br>&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;<br>&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;test2&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value3&quot;&#125;<br>&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;test3&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;doc&quot;:&#123;&quot;field2&quot;:&quot;value2&quot;&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量读取-MEGT\"><a href=\"#批量读取-MEGT\" class=\"headerlink\" title=\"批量读取-MEGT\"></a>批量读取-MEGT</h3><p>批量操作，可以减少网络连接所产生的开销，提高性能</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>GET _mget<br>&#123;<br>  &quot;docs&quot;:[<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:1<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:2<br>      &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量查询-MSEARCH\"><a href=\"#批量查询-MSEARCH\" class=\"headerlink\" title=\"批量查询-MSEARCH\"></a>批量查询-MSEARCH</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST &#123;index&#125;/_msearch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"索引：正排、倒排\"><a href=\"#索引：正排、倒排\" class=\"headerlink\" title=\"索引：正排、倒排\"></a>索引：正排、倒排</h3><p>正排例如书本的目录，文档ID到文档和单词的关联</p>\n<p>倒排书本最后的索引页就是倒排索引，单词到文档ID的关系</p>\n<p><strong>倒排索引的核心组成</strong></p>\n<ul>\n<li>倒排索引包含两个部分<ul>\n<li>单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系<ul>\n<li>单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询</li>\n</ul>\n</li>\n<li>倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成<ul>\n<li>倒排索引项（Posting ）<ul>\n<li>文档ID</li>\n<li>词频TF：该单词问文档中出现的次数，用于相关性评分</li>\n<li>位置（Position）：单词在文档中分词的文职。用于语句搜索</li>\n<li>偏移（Offset）：记录单词的开始结束位置，实现高亮显示</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Analysis与Analyzer（分词器）\"><a href=\"#Analysis与Analyzer（分词器）\" class=\"headerlink\" title=\"Analysis与Analyzer（分词器）\"></a>Analysis与Analyzer（分词器）</h3><ul>\n<li>Analysis：文本分析是把全文本转换一系列单词（term&#x2F;token）的过程，也叫分词</li>\n<li>Analysis是通过Analyzer来实现的<ul>\n<li>可以使用Elasticsearch内置的分析器&#x2F;或者按需自定义定制化分析器</li>\n</ul>\n</li>\n<li>除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析</li>\n</ul>\n<h4 id=\"Analyzer（分词器）的组成\"><a href=\"#Analyzer（分词器）的组成\" class=\"headerlink\" title=\"Analyzer（分词器）的组成\"></a>Analyzer（分词器）的组成</h4><ul>\n<li>分词器是专门处理分词的组件，Analyzer由三部分组成<ul>\n<li>Character Filters（针对原始文本处理，例如去除html标签）</li>\n<li>Tokenizer（按照规则切分为单词）</li>\n<li>Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Elasticsearch内置分词器\"><a href=\"#Elasticsearch内置分词器\" class=\"headerlink\" title=\"Elasticsearch内置分词器\"></a>Elasticsearch内置分词器</h4><ul>\n<li>Standard Analyzer：默认分词器，按词切分，小写处理</li>\n<li>Simple Analyzer：按照非字母切分（符号被过滤），小写处理</li>\n<li>Stop Analyzer：小写处理，停用词过滤（the、a、is）</li>\n<li>Whitespace Analyzer：按照空格切分，不转小写</li>\n<li>Keyword Analyzer：不分词，直接降输入当做关键字输出</li>\n<li>Patter Analyzer：正则表达式，默认<code>\\W+</code>（非支付分隔）</li>\n<li>Language：提供了30多种常见语言分词器</li>\n<li>Customer Analyzer：自定义分词器</li>\n</ul>\n<h4 id=\"使用-analyzer-API\"><a href=\"#使用-analyzer-API\" class=\"headerlink\" title=\"使用_analyzer API\"></a>使用_analyzer API</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"># 示例<br><br><br># standard：默认分词器，按词切分，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;standard&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># simple：按照非字母切分，非字母都被去除，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;simple&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;stop&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># whitespace：按照空格切分<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;whitespace&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># keyword：关键字<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;keyword&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ICU-Analyzer\"><a href=\"#ICU-Analyzer\" class=\"headerlink\" title=\"ICU Analyzer\"></a>ICU Analyzer</h4><ul>\n<li>需要安装plugin<ul>\n<li>Elasticsearch-plugin install analysis-icu</li>\n</ul>\n</li>\n<li>提供了Unicode的支持，更好的支持亚洲语言</li>\n</ul>\n<h4 id=\"更多的中文分词器\"><a href=\"#更多的中文分词器\" class=\"headerlink\" title=\"更多的中文分词器\"></a>更多的中文分词器</h4><ul>\n<li>IK<ul>\n<li>支持自定义词库，支持热更新分词字典</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\">https://github.com/medcl/elasticsearch-analysis-ik</a></li>\n</ul>\n</li>\n<li>THULAC<ul>\n<li>清华大学自然语言处理和社会人文计算实验室的一套中文分词器</li>\n<li><a href=\"https://github.com/microbun/elasticsearch-thulac-plugin\">https://github.com/microbun/elasticsearch-thulac-plugin</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Search-搜索API\"><a href=\"#Search-搜索API\" class=\"headerlink\" title=\"Search 搜索API\"></a>Search 搜索API</h2><ul>\n<li>URL Search<ul>\n<li>在url中使用查询参数</li>\n</ul>\n</li>\n<li>Request Body Search<ul>\n<li>使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）</li>\n</ul>\n</li>\n</ul>\n<p><strong>指定查询索引</strong></p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;_search</td>\n<td>集群上所有的索引</td>\n</tr>\n<tr>\n<td>&#x2F;index1&#x2F;_search</td>\n<td>index1</td>\n</tr>\n<tr>\n<td>&#x2F;index1,index2&#x2F;_search</td>\n<td>index1和index2</td>\n</tr>\n<tr>\n<td>&#x2F;index*&#x2F;_search</td>\n<td>以index开头的索引</td>\n</tr>\n</tbody></table>\n<h4 id=\"URL查询\"><a href=\"#URL查询\" class=\"headerlink\" title=\"URL查询\"></a>URL查询</h4><p><code>http://&#123;ip&#125;:&#123;port&#125;/&#123;index&#125;/_search?q=&#123;field&#125;:&#123;value&#125;</code></p>\n<h4 id=\"Request-Body\"><a href=\"#Request-Body\" class=\"headerlink\" title=\"Request Body\"></a>Request Body</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\">http://<br></code></pre></td></tr></table></figure>\n\n"},{"title":"1-Mysql执行流程与架构","_content":"# Mysql执行流程与架构\n\n```mysql\nshow global status like \"Thread%\" -- 查看当前客户端连接数\n\nSHOW VARIABLES -- 查看系统变量及其值\nshow global variables like 'wait_timeout' -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）\nshow global variables like 'interactive_timeout' -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）\n```\n\n### 1、mysql 缓存\n\n> 将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。`show variables like \"query_cache%\"`查看状态已是OFF状态。\n>\n> 为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）\n\n### 2、预处理器\n\n> 分析表是否存在，相关权限的校验（用户权限，表增删改查权限）\n\n### 3、解析器Parser\n\n> 主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号\"(\"，那么右边一定要有个括号\")\"\n\n**解析树：**\n\n![](https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png)\n\n### 4、优化器Optimizer\n\n> 成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。\n>\n> 关联查询：决定优先查哪张表\n>\n> 索引：决定是否使用索引或者使用哪个索引\n>\n> 优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。\n\n### 5、执行计划\n\n> 优化器得到的结果就是执行计划。\n>\n> 那么如何去查看一条sql语句执行的成本呢？通过这个：`show status like 'Last_query_cost'`在调整过sql语句后执行后，前后对比下。\n>\n> 格式化成JSON形式查看：`EXPLAIN FORMAT=JSON SELECT t.* FROM t` \n\n### 6、执行器\n\n> 执行执行计划，并且读写数据。\n\n#### 那么从哪里读写数据呢？\n\n**存储引擎-表类型：**\n\n> 查看mysql支持的存储引擎：`show engines` 插件式的\n\n1. archive\n\n   > + 用于历史存储\n\n2. csv\n\n   > + 纯文本格式\n   > + 不支持索引\n   > + 用于迁移数据\n\n3. innodb（5.5版本及之后默认）\n\n   > 每次从磁盘读取的大小是16KB，一页=16KB。\n\n   > + 支持事务\n   > + 行级锁\n   > + 读写并发操作\n   > + 聚簇索引、非聚簇索引\n\n4. myisam\n\n   > + 锁表\n   > + 用于只读场景\n\n5. memory\n\n   > + 数据放在内存\n   > + 用于临时表\n\n   .\n\n   .\n\n   .\n\n![](https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png)\n\nmysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。\n\n当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做**“脏页”**，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页\n\nmysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做**“刷脏”**\n\n验证bufferpool在mysql中的状态：`SHOW STATUS LIKE \"%innodb_buffer_pool%\"`\n\n![](https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png)\n\n当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；\n\n**“redo log”：**\n\n> 作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，\n>\n> 特性：崩溃恢复（crash safe）。\n>\n> 为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO > 随机IO）。\n>\n> 文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。\n\n**“undo log”：**\n\n> 记录的是事务发生前的数据的状态\n>\n> 保证原子性：要么全部成功，要么全部失败\n>\n> 只有增删改的记录，查询是没有的\n\n**更新语句执行流程：**\n\n![](https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png)\n","source":"_posts/数据库/Mysql/1、Mysql执行流程与架构.md","raw":"---\ntitle: 1-Mysql执行流程与架构\ntags:\n  - Mysql\n  - 数据库\ncategories:\n  - 数据库\n---\n# Mysql执行流程与架构\n\n```mysql\nshow global status like \"Thread%\" -- 查看当前客户端连接数\n\nSHOW VARIABLES -- 查看系统变量及其值\nshow global variables like 'wait_timeout' -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）\nshow global variables like 'interactive_timeout' -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）\n```\n\n### 1、mysql 缓存\n\n> 将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。`show variables like \"query_cache%\"`查看状态已是OFF状态。\n>\n> 为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）\n\n### 2、预处理器\n\n> 分析表是否存在，相关权限的校验（用户权限，表增删改查权限）\n\n### 3、解析器Parser\n\n> 主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号\"(\"，那么右边一定要有个括号\")\"\n\n**解析树：**\n\n![](https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png)\n\n### 4、优化器Optimizer\n\n> 成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。\n>\n> 关联查询：决定优先查哪张表\n>\n> 索引：决定是否使用索引或者使用哪个索引\n>\n> 优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。\n\n### 5、执行计划\n\n> 优化器得到的结果就是执行计划。\n>\n> 那么如何去查看一条sql语句执行的成本呢？通过这个：`show status like 'Last_query_cost'`在调整过sql语句后执行后，前后对比下。\n>\n> 格式化成JSON形式查看：`EXPLAIN FORMAT=JSON SELECT t.* FROM t` \n\n### 6、执行器\n\n> 执行执行计划，并且读写数据。\n\n#### 那么从哪里读写数据呢？\n\n**存储引擎-表类型：**\n\n> 查看mysql支持的存储引擎：`show engines` 插件式的\n\n1. archive\n\n   > + 用于历史存储\n\n2. csv\n\n   > + 纯文本格式\n   > + 不支持索引\n   > + 用于迁移数据\n\n3. innodb（5.5版本及之后默认）\n\n   > 每次从磁盘读取的大小是16KB，一页=16KB。\n\n   > + 支持事务\n   > + 行级锁\n   > + 读写并发操作\n   > + 聚簇索引、非聚簇索引\n\n4. myisam\n\n   > + 锁表\n   > + 用于只读场景\n\n5. memory\n\n   > + 数据放在内存\n   > + 用于临时表\n\n   .\n\n   .\n\n   .\n\n![](https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png)\n\nmysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。\n\n当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做**“脏页”**，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页\n\nmysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做**“刷脏”**\n\n验证bufferpool在mysql中的状态：`SHOW STATUS LIKE \"%innodb_buffer_pool%\"`\n\n![](https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png)\n\n当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；\n\n**“redo log”：**\n\n> 作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，\n>\n> 特性：崩溃恢复（crash safe）。\n>\n> 为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO > 随机IO）。\n>\n> 文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。\n\n**“undo log”：**\n\n> 记录的是事务发生前的数据的状态\n>\n> 保证原子性：要么全部成功，要么全部失败\n>\n> 只有增删改的记录，查询是没有的\n\n**更新语句执行流程：**\n\n![](https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png)\n","slug":"数据库/Mysql/1、Mysql执行流程与架构","published":1,"date":"2022-04-07T16:55:21.000Z","updated":"2022-11-26T17:42:39.377Z","_id":"clay7y4kd0000ij2b115q9p9n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql执行流程与架构\"><a href=\"#Mysql执行流程与架构\" class=\"headerlink\" title=\"Mysql执行流程与架构\"></a>Mysql执行流程与架构</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">show global status like &quot;Thread%&quot; -- 查看当前客户端连接数<br><br>SHOW VARIABLES -- 查看系统变量及其值<br>show global variables like &#x27;wait_timeout&#x27; -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）<br>show global variables like &#x27;interactive_timeout&#x27; -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1、mysql-缓存\"><a href=\"#1、mysql-缓存\" class=\"headerlink\" title=\"1、mysql 缓存\"></a>1、mysql 缓存</h3><blockquote>\n<p>将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。<code>show variables like &quot;query_cache%&quot;</code>查看状态已是OFF状态。</p>\n<p>为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）</p>\n</blockquote>\n<h3 id=\"2、预处理器\"><a href=\"#2、预处理器\" class=\"headerlink\" title=\"2、预处理器\"></a>2、预处理器</h3><blockquote>\n<p>分析表是否存在，相关权限的校验（用户权限，表增删改查权限）</p>\n</blockquote>\n<h3 id=\"3、解析器Parser\"><a href=\"#3、解析器Parser\" class=\"headerlink\" title=\"3、解析器Parser\"></a>3、解析器Parser</h3><blockquote>\n<p>主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号”(“，那么右边一定要有个括号”)”</p>\n</blockquote>\n<p><strong>解析树：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png\"></p>\n<h3 id=\"4、优化器Optimizer\"><a href=\"#4、优化器Optimizer\" class=\"headerlink\" title=\"4、优化器Optimizer\"></a>4、优化器Optimizer</h3><blockquote>\n<p>成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。</p>\n<p>关联查询：决定优先查哪张表</p>\n<p>索引：决定是否使用索引或者使用哪个索引</p>\n<p>优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。</p>\n</blockquote>\n<h3 id=\"5、执行计划\"><a href=\"#5、执行计划\" class=\"headerlink\" title=\"5、执行计划\"></a>5、执行计划</h3><blockquote>\n<p>优化器得到的结果就是执行计划。</p>\n<p>那么如何去查看一条sql语句执行的成本呢？通过这个：<code>show status like &#39;Last_query_cost&#39;</code>在调整过sql语句后执行后，前后对比下。</p>\n<p>格式化成JSON形式查看：<code>EXPLAIN FORMAT=JSON SELECT t.* FROM t</code> </p>\n</blockquote>\n<h3 id=\"6、执行器\"><a href=\"#6、执行器\" class=\"headerlink\" title=\"6、执行器\"></a>6、执行器</h3><blockquote>\n<p>执行执行计划，并且读写数据。</p>\n</blockquote>\n<h4 id=\"那么从哪里读写数据呢？\"><a href=\"#那么从哪里读写数据呢？\" class=\"headerlink\" title=\"那么从哪里读写数据呢？\"></a>那么从哪里读写数据呢？</h4><p><strong>存储引擎-表类型：</strong></p>\n<blockquote>\n<p>查看mysql支持的存储引擎：<code>show engines</code> 插件式的</p>\n</blockquote>\n<ol>\n<li><p>archive</p>\n<blockquote>\n<ul>\n<li>用于历史存储</li>\n</ul>\n</blockquote>\n</li>\n<li><p>csv</p>\n<blockquote>\n<ul>\n<li>纯文本格式</li>\n<li>不支持索引</li>\n<li>用于迁移数据</li>\n</ul>\n</blockquote>\n</li>\n<li><p>innodb（5.5版本及之后默认）</p>\n<blockquote>\n<p>每次从磁盘读取的大小是16KB，一页&#x3D;16KB。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>支持事务</li>\n<li>行级锁</li>\n<li>读写并发操作</li>\n<li>聚簇索引、非聚簇索引</li>\n</ul>\n</blockquote>\n</li>\n<li><p>myisam</p>\n<blockquote>\n<ul>\n<li>锁表</li>\n<li>用于只读场景</li>\n</ul>\n</blockquote>\n</li>\n<li><p>memory</p>\n<blockquote>\n<ul>\n<li>数据放在内存</li>\n<li>用于临时表</li>\n</ul>\n</blockquote>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n</li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png\"></p>\n<p>mysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。</p>\n<p>当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做<strong>“脏页”</strong>，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页</p>\n<p>mysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做<strong>“刷脏”</strong></p>\n<p>验证bufferpool在mysql中的状态：<code>SHOW STATUS LIKE &quot;%innodb_buffer_pool%&quot;</code></p>\n<p><img src=\"https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png\"></p>\n<p>当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；</p>\n<p><strong>“redo log”：</strong></p>\n<blockquote>\n<p>作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，</p>\n<p>特性：崩溃恢复（crash safe）。</p>\n<p>为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO &gt; 随机IO）。</p>\n<p>文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。</p>\n</blockquote>\n<p><strong>“undo log”：</strong></p>\n<blockquote>\n<p>记录的是事务发生前的数据的状态</p>\n<p>保证原子性：要么全部成功，要么全部失败</p>\n<p>只有增删改的记录，查询是没有的</p>\n</blockquote>\n<p><strong>更新语句执行流程：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql执行流程与架构\"><a href=\"#Mysql执行流程与架构\" class=\"headerlink\" title=\"Mysql执行流程与架构\"></a>Mysql执行流程与架构</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">show global status like &quot;Thread%&quot; -- 查看当前客户端连接数<br><br>SHOW VARIABLES -- 查看系统变量及其值<br>show global variables like &#x27;wait_timeout&#x27; -- 非交互式超时时间，如JAVA的JDBC连接。（没有界面）<br>show global variables like &#x27;interactive_timeout&#x27; -- 交互式超时时间，如数据库工具。（有交互界面，如Navicat）<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1、mysql-缓存\"><a href=\"#1、mysql-缓存\" class=\"headerlink\" title=\"1、mysql 缓存\"></a>1、mysql 缓存</h3><blockquote>\n<p>将数据放入到内存中，以KV的形式存储在内存中，减少服务端处理的时间，加快处理速度并返回给客户端。<br/>mysql5.7缓存默认关闭；mysql8.0已移除。<code>show variables like &quot;query_cache%&quot;</code>查看状态已是OFF状态。</p>\n<p>为什么要移除缓存：<br/>第一点：如果一条sql语句多加了一个空格会认为是不同的sql语句<br/>第二点：缓存是针对表的，而不是针对sql语句；表里有任何数据变化，都会对整张表进行缓存<br/>缓存还是用专业的缓存工具（redis等）</p>\n</blockquote>\n<h3 id=\"2、预处理器\"><a href=\"#2、预处理器\" class=\"headerlink\" title=\"2、预处理器\"></a>2、预处理器</h3><blockquote>\n<p>分析表是否存在，相关权限的校验（用户权限，表增删改查权限）</p>\n</blockquote>\n<h3 id=\"3、解析器Parser\"><a href=\"#3、解析器Parser\" class=\"headerlink\" title=\"3、解析器Parser\"></a>3、解析器Parser</h3><blockquote>\n<p>主要用于分析sql语句：<br/>词法解析-解析成一个一个的单词<br/>语法解析-解析语法规则，比如左边有一个括号”(“，那么右边一定要有个括号”)”</p>\n</blockquote>\n<p><strong>解析树：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/36CmLkWBalOfRIZ.png\"></p>\n<h3 id=\"4、优化器Optimizer\"><a href=\"#4、优化器Optimizer\" class=\"headerlink\" title=\"4、优化器Optimizer\"></a>4、优化器Optimizer</h3><blockquote>\n<p>成本模型（cost）：所有决定都是基于mysql的成本模型去决定的，根据成本模型找出成本最小的最优的方式。</p>\n<p>关联查询：决定优先查哪张表</p>\n<p>索引：决定是否使用索引或者使用哪个索引</p>\n<p>优化器基于解析树再去生成一个数据结构，这个就叫做执行计划。</p>\n</blockquote>\n<h3 id=\"5、执行计划\"><a href=\"#5、执行计划\" class=\"headerlink\" title=\"5、执行计划\"></a>5、执行计划</h3><blockquote>\n<p>优化器得到的结果就是执行计划。</p>\n<p>那么如何去查看一条sql语句执行的成本呢？通过这个：<code>show status like &#39;Last_query_cost&#39;</code>在调整过sql语句后执行后，前后对比下。</p>\n<p>格式化成JSON形式查看：<code>EXPLAIN FORMAT=JSON SELECT t.* FROM t</code> </p>\n</blockquote>\n<h3 id=\"6、执行器\"><a href=\"#6、执行器\" class=\"headerlink\" title=\"6、执行器\"></a>6、执行器</h3><blockquote>\n<p>执行执行计划，并且读写数据。</p>\n</blockquote>\n<h4 id=\"那么从哪里读写数据呢？\"><a href=\"#那么从哪里读写数据呢？\" class=\"headerlink\" title=\"那么从哪里读写数据呢？\"></a>那么从哪里读写数据呢？</h4><p><strong>存储引擎-表类型：</strong></p>\n<blockquote>\n<p>查看mysql支持的存储引擎：<code>show engines</code> 插件式的</p>\n</blockquote>\n<ol>\n<li><p>archive</p>\n<blockquote>\n<ul>\n<li>用于历史存储</li>\n</ul>\n</blockquote>\n</li>\n<li><p>csv</p>\n<blockquote>\n<ul>\n<li>纯文本格式</li>\n<li>不支持索引</li>\n<li>用于迁移数据</li>\n</ul>\n</blockquote>\n</li>\n<li><p>innodb（5.5版本及之后默认）</p>\n<blockquote>\n<p>每次从磁盘读取的大小是16KB，一页&#x3D;16KB。</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>支持事务</li>\n<li>行级锁</li>\n<li>读写并发操作</li>\n<li>聚簇索引、非聚簇索引</li>\n</ul>\n</blockquote>\n</li>\n<li><p>myisam</p>\n<blockquote>\n<ul>\n<li>锁表</li>\n<li>用于只读场景</li>\n</ul>\n</blockquote>\n</li>\n<li><p>memory</p>\n<blockquote>\n<ul>\n<li>数据放在内存</li>\n<li>用于临时表</li>\n</ul>\n</blockquote>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n</li>\n</ol>\n<p><img src=\"https://i.loli.net/2021/06/29/cBAzmPyU5JNkTde.png\"></p>\n<p>mysql引入了bufferpool内存，用于提升读写的效率。mysql将磁盘数据每次读取的页缓存到了bufferpool，那么每次修改或者写入的时候都是先记录到bufferpool中。</p>\n<p>当内存中bufferpool中的数据与磁盘中的数据不一致时，此时页叫做<strong>“脏页”</strong>，当事务还没有提交的时候、或者两者数据间的时间差就会产生脏页</p>\n<p>mysql后台会起一个线程池，当服务端空闲的时候就将bufferpool中的数据写入到磁盘；这个动作叫做<strong>“刷脏”</strong></p>\n<p>验证bufferpool在mysql中的状态：<code>SHOW STATUS LIKE &quot;%innodb_buffer_pool%&quot;</code></p>\n<p><img src=\"https://i.loli.net/2021/07/25/ieEtcUKw7BjG3MN.png\"></p>\n<p>当刷脏的时候mysql服务宕机了，此时内存中的数据还没有回写到磁盘当中，那么此时的数据会丢失吗？不会，innodb会将内存中数据记录到一个redo log日志文件当中；</p>\n<p><strong>“redo log”：</strong></p>\n<blockquote>\n<p>作用就是记录内存中的数据，当出现宕机的情况时，重启之后会从redo log中找到数据并且回写到磁盘当中，</p>\n<p>特性：崩溃恢复（crash safe）。</p>\n<p>为什么要引入redo log，而不直接写入到磁盘中呢？因为写入到磁盘需要先读取数据，在磁盘当中寻找地址的过程：随机IO，而记录到log文件中是：顺序IO；顺序IO一定比随机IO速度要快的（顺序IO &gt; 随机IO）。</p>\n<p>文件大小是固定的，当日志文件记录达到最大文件大小时，会将数据刷到磁盘中，同时释放出一部分文件大小用来记录新的日志；以此类推，是不断循环覆盖的。</p>\n</blockquote>\n<p><strong>“undo log”：</strong></p>\n<blockquote>\n<p>记录的是事务发生前的数据的状态</p>\n<p>保证原子性：要么全部成功，要么全部失败</p>\n<p>只有增删改的记录，查询是没有的</p>\n</blockquote>\n<p><strong>更新语句执行流程：</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/25/Lf6CGTe3huSIocW.png\"></p>\n"},{"title":"2-Mysql索引原理与使用规则","_content":"# Mysql索引原理与使用规则\n\n## 数据库索引到底是什么\n\n> 是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。\n\n![](https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png)\n\n索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。\n\n## 索引的数据结构\n\n<font style=\"color:red\">数据结构图形工具：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</font>\n\n### 二叉查找树（Binary Search Tree）\n\n> 左子树的节点小于父节点\n>\n> 右子树的节点大于父节点\n\n![](https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png) \n\n在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）\n\n![](https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png)\n\n### 平衡二叉树（AVL Tree - Balanced Binary Search Tree）\n\n> 约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font>\n>\n> 插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整\n\n![](https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png)\n\n#### AVL 数据存储\n\n> 1. 键值：建立索引的字段值\n> 2. 数据磁盘地址\n> 3. 子节点引用\n\n![](https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png)\n\n**注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb = 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）**\n\n### 多路平衡查找树（Balanced Tree B树）\n\n> 特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。\n>\n> 大大的降低了树的深度\n\n![](https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png)\n\n#### 通过分裂、合并保持B树的平衡\n\n> 当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡\n\n![](https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png)\n\n### B+Tree 加强版多路平衡查找树\n\n> 特点：深度更低、I/O稳定、范围，排序查询的性能大幅度的提升\n>\n> 与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。\n>\n> 根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。\n>\n> 查找任何数据时，它的I/O次数都是相同的；树整体的深度决定I/O的次数。\n>\n> 叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。\n>\n> 优势：\n>\n> 1. B-Tree能解决的，B+Tree都能解决\n> 2. 扫库、扫表能力更强\n> 3. 磁盘读写能力更强\n> 4. 排序能力更强\n> 5. 效率更加稳定\n\n![](https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png)\n\n### Hash\n\n> 在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。\n>\n> 在memory存储引擎中是可以简历hash索引的。\n\n## 索引\n\n### 聚集索引（聚簇索引）\n\n> 索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引\n\n在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）\n\n### 二级索引（辅助索引、非聚集索引）\n\n创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。\n\n![](https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png)\n\n### 覆盖索引\n\n查询的数据已经包含在了索引里了；\n\n比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。\n\n```sql\nSELECT name FROM t WHERE name = '张三';\n```\n\n## 索引的使用原则\n\n列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。\n\n联合索引的最左匹配原则\n\n![](https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png)\n\n## 索引下推\n\n![](https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png)\n\n```sql\nSELECT * FROM t WHERE age = '18' AND name LIKE '%三';\n```\n\n正常情况下，存储引擎层根据索引查出`age='18'`的数据，拿到Server层再根据`name LIKE '%三'`条件再过滤；如果`age='18'`的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；\n\n所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。\n\n```sql\n-- 默认是开启 on\nshow variables like 'optimizer_switch';\n```\n\n> 得到结果值：index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on,engine_condition_pushdown=on,<font style=\"color:red\">index_condition_pushdown=on</font>,mrr=on,mrr_cost_based=on,block_nested_loop=on,batched_key_access=off,materialization=on,semijoin=on,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on,use_index_extensions=on,condition_fanout_filter=on,derived_merge=on\n>\n> index_condition_pushdown=on 表示开启索引下推\n\n\n\n","source":"_posts/数据库/Mysql/2、Mysql索引原理与使用规则.md","raw":"---\ntitle: 2-Mysql索引原理与使用规则\ntags:\n  - Mysql\n  - 数据库\ncategories:\n  - 数据库\n---\n# Mysql索引原理与使用规则\n\n## 数据库索引到底是什么\n\n> 是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。\n\n![](https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png)\n\n索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。\n\n## 索引的数据结构\n\n<font style=\"color:red\">数据结构图形工具：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</font>\n\n### 二叉查找树（Binary Search Tree）\n\n> 左子树的节点小于父节点\n>\n> 右子树的节点大于父节点\n\n![](https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png) \n\n在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）\n\n![](https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png)\n\n### 平衡二叉树（AVL Tree - Balanced Binary Search Tree）\n\n> 约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font>\n>\n> 插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整\n\n![](https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png)\n\n#### AVL 数据存储\n\n> 1. 键值：建立索引的字段值\n> 2. 数据磁盘地址\n> 3. 子节点引用\n\n![](https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png)\n\n**注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb = 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）**\n\n### 多路平衡查找树（Balanced Tree B树）\n\n> 特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。\n>\n> 大大的降低了树的深度\n\n![](https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png)\n\n#### 通过分裂、合并保持B树的平衡\n\n> 当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡\n\n![](https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png)\n\n### B+Tree 加强版多路平衡查找树\n\n> 特点：深度更低、I/O稳定、范围，排序查询的性能大幅度的提升\n>\n> 与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。\n>\n> 根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。\n>\n> 查找任何数据时，它的I/O次数都是相同的；树整体的深度决定I/O的次数。\n>\n> 叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。\n>\n> 优势：\n>\n> 1. B-Tree能解决的，B+Tree都能解决\n> 2. 扫库、扫表能力更强\n> 3. 磁盘读写能力更强\n> 4. 排序能力更强\n> 5. 效率更加稳定\n\n![](https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png)\n\n### Hash\n\n> 在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。\n>\n> 在memory存储引擎中是可以简历hash索引的。\n\n## 索引\n\n### 聚集索引（聚簇索引）\n\n> 索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引\n\n在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）\n\n### 二级索引（辅助索引、非聚集索引）\n\n创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。\n\n![](https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png)\n\n### 覆盖索引\n\n查询的数据已经包含在了索引里了；\n\n比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。\n\n```sql\nSELECT name FROM t WHERE name = '张三';\n```\n\n## 索引的使用原则\n\n列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。\n\n联合索引的最左匹配原则\n\n![](https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png)\n\n## 索引下推\n\n![](https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png)\n\n```sql\nSELECT * FROM t WHERE age = '18' AND name LIKE '%三';\n```\n\n正常情况下，存储引擎层根据索引查出`age='18'`的数据，拿到Server层再根据`name LIKE '%三'`条件再过滤；如果`age='18'`的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；\n\n所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。\n\n```sql\n-- 默认是开启 on\nshow variables like 'optimizer_switch';\n```\n\n> 得到结果值：index_merge=on,index_merge_union=on,index_merge_sort_union=on,index_merge_intersection=on,engine_condition_pushdown=on,<font style=\"color:red\">index_condition_pushdown=on</font>,mrr=on,mrr_cost_based=on,block_nested_loop=on,batched_key_access=off,materialization=on,semijoin=on,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on,use_index_extensions=on,condition_fanout_filter=on,derived_merge=on\n>\n> index_condition_pushdown=on 表示开启索引下推\n\n\n\n","slug":"数据库/Mysql/2、Mysql索引原理与使用规则","published":1,"date":"2022-03-01T15:19:16.000Z","updated":"2022-11-26T17:42:39.374Z","_id":"clay7y4ko0005ij2bc37a5xz8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql索引原理与使用规则\"><a href=\"#Mysql索引原理与使用规则\" class=\"headerlink\" title=\"Mysql索引原理与使用规则\"></a>Mysql索引原理与使用规则</h1><h2 id=\"数据库索引到底是什么\"><a href=\"#数据库索引到底是什么\" class=\"headerlink\" title=\"数据库索引到底是什么\"></a>数据库索引到底是什么</h2><blockquote>\n<p>是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png\"></p>\n<p>索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。</p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h2><p><font style=\"color:red\">数据结构图形工具：<a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></font></p>\n<h3 id=\"二叉查找树（Binary-Search-Tree）\"><a href=\"#二叉查找树（Binary-Search-Tree）\" class=\"headerlink\" title=\"二叉查找树（Binary Search Tree）\"></a>二叉查找树（Binary Search Tree）</h3><blockquote>\n<p>左子树的节点小于父节点</p>\n<p>右子树的节点大于父节点</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png\"> </p>\n<p>在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）</p>\n<p><img src=\"https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png\"></p>\n<h3 id=\"平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\"><a href=\"#平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\" class=\"headerlink\" title=\"平衡二叉树（AVL Tree - Balanced Binary Search Tree）\"></a>平衡二叉树（AVL Tree - Balanced Binary Search Tree）</h3><blockquote>\n<p>约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font></p>\n<p>插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png\"></p>\n<h4 id=\"AVL-数据存储\"><a href=\"#AVL-数据存储\" class=\"headerlink\" title=\"AVL 数据存储\"></a>AVL 数据存储</h4><blockquote>\n<ol>\n<li>键值：建立索引的字段值</li>\n<li>数据磁盘地址</li>\n<li>子节点引用</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png\"></p>\n<p><strong>注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb &#x3D; 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）</strong></p>\n<h3 id=\"多路平衡查找树（Balanced-Tree-B树）\"><a href=\"#多路平衡查找树（Balanced-Tree-B树）\" class=\"headerlink\" title=\"多路平衡查找树（Balanced Tree B树）\"></a>多路平衡查找树（Balanced Tree B树）</h3><blockquote>\n<p>特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。</p>\n<p>大大的降低了树的深度</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png\"></p>\n<h4 id=\"通过分裂、合并保持B树的平衡\"><a href=\"#通过分裂、合并保持B树的平衡\" class=\"headerlink\" title=\"通过分裂、合并保持B树的平衡\"></a>通过分裂、合并保持B树的平衡</h4><blockquote>\n<p>当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png\"></p>\n<h3 id=\"B-Tree-加强版多路平衡查找树\"><a href=\"#B-Tree-加强版多路平衡查找树\" class=\"headerlink\" title=\"B+Tree 加强版多路平衡查找树\"></a>B+Tree 加强版多路平衡查找树</h3><blockquote>\n<p>特点：深度更低、I&#x2F;O稳定、范围，排序查询的性能大幅度的提升</p>\n<p>与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。</p>\n<p>根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。</p>\n<p>查找任何数据时，它的I&#x2F;O次数都是相同的；树整体的深度决定I&#x2F;O的次数。</p>\n<p>叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。</p>\n<p>优势：</p>\n<ol>\n<li>B-Tree能解决的，B+Tree都能解决</li>\n<li>扫库、扫表能力更强</li>\n<li>磁盘读写能力更强</li>\n<li>排序能力更强</li>\n<li>效率更加稳定</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png\"></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><blockquote>\n<p>在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。</p>\n<p>在memory存储引擎中是可以简历hash索引的。</p>\n</blockquote>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"聚集索引（聚簇索引）\"><a href=\"#聚集索引（聚簇索引）\" class=\"headerlink\" title=\"聚集索引（聚簇索引）\"></a>聚集索引（聚簇索引）</h3><blockquote>\n<p>索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引</p>\n</blockquote>\n<p>在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）</p>\n<h3 id=\"二级索引（辅助索引、非聚集索引）\"><a href=\"#二级索引（辅助索引、非聚集索引）\" class=\"headerlink\" title=\"二级索引（辅助索引、非聚集索引）\"></a>二级索引（辅助索引、非聚集索引）</h3><p>创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png\"></p>\n<h3 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h3><p>查询的数据已经包含在了索引里了；</p>\n<p>比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> name <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"索引的使用原则\"><a href=\"#索引的使用原则\" class=\"headerlink\" title=\"索引的使用原则\"></a>索引的使用原则</h2><p>列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。</p>\n<p>联合索引的最左匹配原则</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png\"></p>\n<h2 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h2><p><img src=\"https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> age <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;18&#x27;</span> <span class=\"hljs-keyword\">AND</span> name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">&#x27;%三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>正常情况下，存储引擎层根据索引查出<code>age=&#39;18&#39;</code>的数据，拿到Server层再根据<code>name LIKE &#39;%三&#39;</code>条件再过滤；如果<code>age=&#39;18&#39;</code>的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；</p>\n<p>所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 默认是开启 on</span><br><span class=\"hljs-keyword\">show</span> variables <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;optimizer_switch&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>得到结果值：index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,engine_condition_pushdown&#x3D;on,<font style=\"color:red\">index_condition_pushdown&#x3D;on</font>,mrr&#x3D;on,mrr_cost_based&#x3D;on,block_nested_loop&#x3D;on,batched_key_access&#x3D;off,materialization&#x3D;on,semijoin&#x3D;on,loosescan&#x3D;on,firstmatch&#x3D;on,duplicateweedout&#x3D;on,subquery_materialization_cost_based&#x3D;on,use_index_extensions&#x3D;on,condition_fanout_filter&#x3D;on,derived_merge&#x3D;on</p>\n<p>index_condition_pushdown&#x3D;on 表示开启索引下推</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql索引原理与使用规则\"><a href=\"#Mysql索引原理与使用规则\" class=\"headerlink\" title=\"Mysql索引原理与使用规则\"></a>Mysql索引原理与使用规则</h1><h2 id=\"数据库索引到底是什么\"><a href=\"#数据库索引到底是什么\" class=\"headerlink\" title=\"数据库索引到底是什么\"></a>数据库索引到底是什么</h2><blockquote>\n<p>是数据库管理系统（DBMS）中一个排序的<font style=\"color:red\">数据结构</font>，以协助快速查询、更新数据库表中数据。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/07/25/pXONuCHUJ9bZrYQ.png\"></p>\n<p>索引值存储的是建立索引的值，比如说主键id建立索引，在系统中存储的是主键id和该条数据在磁盘中对应的地址；当查询条件根据索引查询时，查到了索引值，然后再根据索引中的地址快速定位到磁盘中的该条数据。</p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h2><p><font style=\"color:red\">数据结构图形工具：<a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></font></p>\n<h3 id=\"二叉查找树（Binary-Search-Tree）\"><a href=\"#二叉查找树（Binary-Search-Tree）\" class=\"headerlink\" title=\"二叉查找树（Binary Search Tree）\"></a>二叉查找树（Binary Search Tree）</h3><blockquote>\n<p>左子树的节点小于父节点</p>\n<p>右子树的节点大于父节点</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/4LkoH6lubz7qgZw.png\"> </p>\n<p>在某些特定情况下，该数据结构会退化成链表形式；当数据按照有序的插入时（正序或倒叙）</p>\n<p><img src=\"https://s2.loli.net/2022/02/22/RAlILcjTinD3Ox2.png\"></p>\n<h3 id=\"平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\"><a href=\"#平衡二叉树（AVL-Tree-Balanced-Binary-Search-Tree）\" class=\"headerlink\" title=\"平衡二叉树（AVL Tree - Balanced Binary Search Tree）\"></a>平衡二叉树（AVL Tree - Balanced Binary Search Tree）</h3><blockquote>\n<p>约束：<font style=\"color:red\">左右子树的深度差绝对值不能超过1</font></p>\n<p>插入数值后，会对左右子树的节点深度做检查对比，当违反了约束条件后，会根据数值进行左旋（左旋转）或右旋（右旋转）的调整</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/Ko6ItLbFr8qlnDN.png\"></p>\n<h4 id=\"AVL-数据存储\"><a href=\"#AVL-数据存储\" class=\"headerlink\" title=\"AVL 数据存储\"></a>AVL 数据存储</h4><blockquote>\n<ol>\n<li>键值：建立索引的字段值</li>\n<li>数据磁盘地址</li>\n<li>子节点引用</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/KMDqheZNiyLz2sP.png\"></p>\n<p><strong>注意：存储引擎从磁盘加载数据到Server层进行比较，这时Mysql加载磁盘数据时最小单位是Page（16 Kb &#x3D; 16384 bytes）；此时单个节点的数据不满16Kb，那么可以将子节点的数据上移，填满一页16Kb的大小，一个节点可以存储多个分叉节点（子节点指针），此时就变成了多路平衡查找树（Balanced Tree B树）</strong></p>\n<h3 id=\"多路平衡查找树（Balanced-Tree-B树）\"><a href=\"#多路平衡查找树（Balanced-Tree-B树）\" class=\"headerlink\" title=\"多路平衡查找树（Balanced Tree B树）\"></a>多路平衡查找树（Balanced Tree B树）</h3><blockquote>\n<p>特点：更多的键值、更多的节点与子节点指针；键值是N，度（Degree）是N+1，比如节点里存了两个键值，那么度就是3个，有3个分叉，有10个键值的话，有会有11个度，11个分叉。</p>\n<p>大大的降低了树的深度</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/T86lejnbprRFWIH.png\"></p>\n<h4 id=\"通过分裂、合并保持B树的平衡\"><a href=\"#通过分裂、合并保持B树的平衡\" class=\"headerlink\" title=\"通过分裂、合并保持B树的平衡\"></a>通过分裂、合并保持B树的平衡</h4><blockquote>\n<p>当B树不断插入数据时是通过分裂和合并的操作去实现B树的平衡</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/hxgvRC8qOHYIp31.png\"></p>\n<h3 id=\"B-Tree-加强版多路平衡查找树\"><a href=\"#B-Tree-加强版多路平衡查找树\" class=\"headerlink\" title=\"B+Tree 加强版多路平衡查找树\"></a>B+Tree 加强版多路平衡查找树</h3><blockquote>\n<p>特点：深度更低、I&#x2F;O稳定、范围，排序查询的性能大幅度的提升</p>\n<p>与B+Tree与B-Tree不同地方在于，它的度（Degree）与键值是相等的。</p>\n<p>根节点与子节点不会存储数据在磁盘上的地址，数据一律放到叶子节点上存储，而根节点与子节点存储的是键值与子节点引用指针，进一步减少树的深度。</p>\n<p>查找任何数据时，它的I&#x2F;O次数都是相同的；树整体的深度决定I&#x2F;O的次数。</p>\n<p>叶子节点还有个指针指向下一个相连叶子节点，让叶子节点形成一个有序的链表结构；范围查询时不用再返回根节点遍历查询了，直接通过叶子节点查找就可以了。</p>\n<p>优势：</p>\n<ol>\n<li>B-Tree能解决的，B+Tree都能解决</li>\n<li>扫库、扫表能力更强</li>\n<li>磁盘读写能力更强</li>\n<li>排序能力更强</li>\n<li>效率更加稳定</li>\n</ol>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/02/22/9koyvDjCASrINFu.png\"></p>\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><blockquote>\n<p>在innodb存储引擎中，为热点数据在内存中建立的KV关系；无法创建hash索引的。</p>\n<p>在memory存储引擎中是可以简历hash索引的。</p>\n</blockquote>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><h3 id=\"聚集索引（聚簇索引）\"><a href=\"#聚集索引（聚簇索引）\" class=\"headerlink\" title=\"聚集索引（聚簇索引）\"></a>聚集索引（聚簇索引）</h3><blockquote>\n<p>索引的键值逻辑顺序与表数据行的物理顺序是一致的；在Innodb存储引擎中，主键索引就是聚集索引（聚簇索引），其他索引叫非聚集索引，又或者叫辅助索引、二级索引</p>\n</blockquote>\n<p>在Innodb存储引擎中，如果一张表没有主键，会找到某个字段是唯一索引并且不能为空的当做聚集索引（聚簇索引）；如果一张表中即没有主键也没有唯一并且不能为空的索引，那么存储引擎会自动创建一个隐藏字段_rowid（6 bytes），把它当做该表的聚集索引（聚簇索引）</p>\n<h3 id=\"二级索引（辅助索引、非聚集索引）\"><a href=\"#二级索引（辅助索引、非聚集索引）\" class=\"headerlink\" title=\"二级索引（辅助索引、非聚集索引）\"></a>二级索引（辅助索引、非聚集索引）</h3><p>创建二级索引时，在Innodb存储引擎中，二级索引的B+树中叶子节点存储的数据是主键值，这样先通过二级索引查找到该数据的主键，然后在通过主键值去主键索引中查找具体数据，该操作也步骤也叫做回表。相比较与聚集索引效率会低下，因为二级索引多查找了一棵索引树。</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/VMKn5xCZyDLmtIO.png\"></p>\n<h3 id=\"覆盖索引\"><a href=\"#覆盖索引\" class=\"headerlink\" title=\"覆盖索引\"></a>覆盖索引</h3><p>查询的数据已经包含在了索引里了；</p>\n<p>比如表t，字段有id、name、age，索引有主键索引id，二级索引name。只查找name，这样根据二级索引的B+树查找到了张三的值，就接直接返回张三，不用回表，不用再根据主键值再去查找主键的B+树查数据了，这叫做覆盖索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> name <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> name <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"索引的使用原则\"><a href=\"#索引的使用原则\" class=\"headerlink\" title=\"索引的使用原则\"></a>索引的使用原则</h2><p>列的离散度（选择读）公式：count(distinct(count_name)):count(*)；重复值越少离散度越高。离散度越小建立的索引使用率越高。</p>\n<p>联合索引的最左匹配原则</p>\n<p><img src=\"https://s2.loli.net/2022/02/23/shkYLtuM38QJ2xX.png\"></p>\n<h2 id=\"索引下推\"><a href=\"#索引下推\" class=\"headerlink\" title=\"索引下推\"></a>索引下推</h2><p><img src=\"https://s2.loli.net/2022/03/01/exCFEwbQWSRr9fq.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> age <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;18&#x27;</span> <span class=\"hljs-keyword\">AND</span> name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">&#x27;%三&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>正常情况下，存储引擎层根据索引查出<code>age=&#39;18&#39;</code>的数据，拿到Server层再根据<code>name LIKE &#39;%三&#39;</code>条件再过滤；如果<code>age=&#39;18&#39;</code>的数据有很多，那么拿到Server层的数据就很多，过滤也就很慢，代价较大；</p>\n<p>所以索引下推就是当存储引擎根据索引过滤出数据过大时，会将原本在Server过滤的条件，不满足于最左原则的索引下推到存储引擎层进行过滤，防止过大的数据到Server层进行过滤。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 默认是开启 on</span><br><span class=\"hljs-keyword\">show</span> variables <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;optimizer_switch&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>得到结果值：index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,engine_condition_pushdown&#x3D;on,<font style=\"color:red\">index_condition_pushdown&#x3D;on</font>,mrr&#x3D;on,mrr_cost_based&#x3D;on,block_nested_loop&#x3D;on,batched_key_access&#x3D;off,materialization&#x3D;on,semijoin&#x3D;on,loosescan&#x3D;on,firstmatch&#x3D;on,duplicateweedout&#x3D;on,subquery_materialization_cost_based&#x3D;on,use_index_extensions&#x3D;on,condition_fanout_filter&#x3D;on,derived_merge&#x3D;on</p>\n<p>index_condition_pushdown&#x3D;on 表示开启索引下推</p>\n</blockquote>\n"},{"title":"3-Mysql事务与锁详解","_content":"# Mysql事务与锁详解\n\n## 数据库事务的定义\n\n> 事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。\n\n## 事务的四大特性（ACID）\n\n### 原子性（Atomicity）\n\n> 最小逻辑单位，不可分割，要么都成功，要么都失败。\n>\n> 依赖事务日志 undo.log实现。\n\n### 一致性（Consistency）\n\n> 事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束\n\n### <font style=\"color:red\">隔离性（Isolation）</font>\n\n> 多个事务间互不干扰。\n\n### 持久性（Durability）\n\n> 依赖 redo.log +双写缓冲实现。\n\n## 事务并发的问题\n\n### 脏读\n\n> 在一个事务内读取到另一个事务未提交的数据。\n\n![image-20220302224922097](https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png)\n\n### 不可重复读\n\n> 在一个事务内读取到另一个事务已提交的数据。\n>\n> 更新update或删除delete导致的数据变化叫做不可重复读。\n\n![](https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png)\n\n### 幻读\n\n> 在一个事务内读取到另一个事务已提交的插入数据。\n>\n> 只有当插入insert导致行数的增加才叫做幻读。\n\n![](https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png)\n\n**总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。**\n\n## 事务隔离级别\n\n### Read Uncommitted(未提交读)一未解决任何并发问题\n> 事务未提交的数据对其他事务也是可见的，会出现脏读。\n\n### Read Committed(已提交读)一解决脏读问题\n> 一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。\n\n### Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\n> 在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。\n>\n> 但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。\n\n### Serializable(串行化)一解决所有问题\n> 最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。\n\n**Mysql InnoDB 对事务隔离级别的支持程度**\n\n![](https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png)\n\n\n\n**快照读：**\t***<u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u>***\n\n```sql\n-- 普通的select语句\nSELECT * FROM t;\n```\n\n**当前读：**\t***<u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u>***\n\n```sql\n-- 加锁的select语句\nSELECT * FROM t FOR UPDATE\n-- DML语句\n```\n\n**RC和RR的区别**\n\nRR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。\n\nRC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。\n\n具体的机制就是两种隔离级别的ReadView的差异。\n\n## Mysql 锁基本类型\n\n> **行锁与表锁区别**\n>\n> 锁定粒度：表锁\t>\t行锁\n>\n> 加锁效率：表锁\t>\t行锁\n>\n> 冲突概率：表锁\t>\t行锁\n>\n> 并发性能：表锁\t<\t行锁\n\n![](https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png)\n\n1、一张表没有索引，为什么会锁表？\n\n> 一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。\n\n2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？\n\n> 二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。\n\n### InnoDB Locking\n\n#### 行锁：共享锁（Shared Locks）\n\n> 共享锁又称为读锁，简称S锁\n>\n> 共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。\n\n加锁方式：\n\n```sql\nSELECT * FROM t WHERE id = 1 LOCK IN SHARE MODE;\n```\n\n释放锁方式：事务结束释放锁\n\n#### 行锁：排他锁（Exclusive Locks）\n\n> 排他锁又称为写锁，简称X锁。\n>\n> 排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。\n\n加锁方式：\n\n+ 自动：`DELETE/UPDATE/INSERT`DML语句默认动加上排他锁（X锁）\n+ 手动：`FOR UPDATE`语句\n\n释放锁方式：事务结束释放锁\n\n#### 意向共享锁（IS）/意向排他锁（IX）\n\n> 意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。\n>\n> 作用：为了提升加表锁的效率。\n\n+ **意向共享锁（Intention Shared Locks，简称IS锁）：**表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。\n+ **意向排他锁（Intention Exclusive Locks，简称IX锁）：**表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。\n\n### 锁的算法（在什么样的情况下锁的范围）\n\n![](https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png)\n\n#### 记录锁（Record Locks）：锁定记录\n\n> 当你使用`FOR UPDATE`语句进行加锁时，精准命中一条记录，就会锁住该条记录；\n\n![](https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png)\n\n#### 间隙锁（Gap locks）:锁定范围\n\n> 当你使用`FOR UPDATE`语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；\n>\n> 注意：相同的间隙锁不排斥，排斥的是插入\n>\n> > 比如我使用\n> >\n> > ```sql\n> > SELECT * FROM t WHERE id = 6 FOR UPDATE;\n> > ```\n> >\n> > 这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥\n> >\n> > ```sql\n> > INSERT INTO `t`(`id`,`name`) VALUES (5,\"张三\");\n> > INSERT INTO `t`(`id`,`name`) VALUES (6,\"张三\");\n> > ```\n\n![](https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png)\n\n#### 临键锁（Nest-key Locks）：锁定范围加记录\n\n> InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；\n>\n> 条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；\n>\n> 会锁住最后一个记录（Record）的下一个key的左开右闭的区间。\n\n![](https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png)\n\n\n\n\n\n\n\n\n\n","source":"_posts/数据库/Mysql/3、Mysql事务与锁详解.md","raw":"---\ntitle: 3-Mysql事务与锁详解\ntags:\n  - Mysql\n  - 数据库\n  - 锁\ncategories:\n  - 数据库\n---\n# Mysql事务与锁详解\n\n## 数据库事务的定义\n\n> 事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。\n\n## 事务的四大特性（ACID）\n\n### 原子性（Atomicity）\n\n> 最小逻辑单位，不可分割，要么都成功，要么都失败。\n>\n> 依赖事务日志 undo.log实现。\n\n### 一致性（Consistency）\n\n> 事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束\n\n### <font style=\"color:red\">隔离性（Isolation）</font>\n\n> 多个事务间互不干扰。\n\n### 持久性（Durability）\n\n> 依赖 redo.log +双写缓冲实现。\n\n## 事务并发的问题\n\n### 脏读\n\n> 在一个事务内读取到另一个事务未提交的数据。\n\n![image-20220302224922097](https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png)\n\n### 不可重复读\n\n> 在一个事务内读取到另一个事务已提交的数据。\n>\n> 更新update或删除delete导致的数据变化叫做不可重复读。\n\n![](https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png)\n\n### 幻读\n\n> 在一个事务内读取到另一个事务已提交的插入数据。\n>\n> 只有当插入insert导致行数的增加才叫做幻读。\n\n![](https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png)\n\n**总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。**\n\n## 事务隔离级别\n\n### Read Uncommitted(未提交读)一未解决任何并发问题\n> 事务未提交的数据对其他事务也是可见的，会出现脏读。\n\n### Read Committed(已提交读)一解决脏读问题\n> 一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。\n\n### Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\n> 在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。\n>\n> 但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。\n\n### Serializable(串行化)一解决所有问题\n> 最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。\n\n**Mysql InnoDB 对事务隔离级别的支持程度**\n\n![](https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png)\n\n\n\n**快照读：**\t***<u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u>***\n\n```sql\n-- 普通的select语句\nSELECT * FROM t;\n```\n\n**当前读：**\t***<u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u>***\n\n```sql\n-- 加锁的select语句\nSELECT * FROM t FOR UPDATE\n-- DML语句\n```\n\n**RC和RR的区别**\n\nRR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。\n\nRC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。\n\n具体的机制就是两种隔离级别的ReadView的差异。\n\n## Mysql 锁基本类型\n\n> **行锁与表锁区别**\n>\n> 锁定粒度：表锁\t>\t行锁\n>\n> 加锁效率：表锁\t>\t行锁\n>\n> 冲突概率：表锁\t>\t行锁\n>\n> 并发性能：表锁\t<\t行锁\n\n![](https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png)\n\n1、一张表没有索引，为什么会锁表？\n\n> 一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。\n\n2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？\n\n> 二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。\n\n### InnoDB Locking\n\n#### 行锁：共享锁（Shared Locks）\n\n> 共享锁又称为读锁，简称S锁\n>\n> 共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。\n\n加锁方式：\n\n```sql\nSELECT * FROM t WHERE id = 1 LOCK IN SHARE MODE;\n```\n\n释放锁方式：事务结束释放锁\n\n#### 行锁：排他锁（Exclusive Locks）\n\n> 排他锁又称为写锁，简称X锁。\n>\n> 排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。\n\n加锁方式：\n\n+ 自动：`DELETE/UPDATE/INSERT`DML语句默认动加上排他锁（X锁）\n+ 手动：`FOR UPDATE`语句\n\n释放锁方式：事务结束释放锁\n\n#### 意向共享锁（IS）/意向排他锁（IX）\n\n> 意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。\n>\n> 作用：为了提升加表锁的效率。\n\n+ **意向共享锁（Intention Shared Locks，简称IS锁）：**表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。\n+ **意向排他锁（Intention Exclusive Locks，简称IX锁）：**表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。\n\n### 锁的算法（在什么样的情况下锁的范围）\n\n![](https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png)\n\n#### 记录锁（Record Locks）：锁定记录\n\n> 当你使用`FOR UPDATE`语句进行加锁时，精准命中一条记录，就会锁住该条记录；\n\n![](https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png)\n\n#### 间隙锁（Gap locks）:锁定范围\n\n> 当你使用`FOR UPDATE`语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；\n>\n> 注意：相同的间隙锁不排斥，排斥的是插入\n>\n> > 比如我使用\n> >\n> > ```sql\n> > SELECT * FROM t WHERE id = 6 FOR UPDATE;\n> > ```\n> >\n> > 这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥\n> >\n> > ```sql\n> > INSERT INTO `t`(`id`,`name`) VALUES (5,\"张三\");\n> > INSERT INTO `t`(`id`,`name`) VALUES (6,\"张三\");\n> > ```\n\n![](https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png)\n\n#### 临键锁（Nest-key Locks）：锁定范围加记录\n\n> InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；\n>\n> 条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；\n>\n> 会锁住最后一个记录（Record）的下一个key的左开右闭的区间。\n\n![](https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png)\n\n\n\n\n\n\n\n\n\n","slug":"数据库/Mysql/3、Mysql事务与锁详解","published":1,"date":"2022-07-07T08:15:57.607Z","updated":"2022-11-26T17:42:39.380Z","_id":"clay7y4kp0006ij2bdlm05ere","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql事务与锁详解\"><a href=\"#Mysql事务与锁详解\" class=\"headerlink\" title=\"Mysql事务与锁详解\"></a>Mysql事务与锁详解</h1><h2 id=\"数据库事务的定义\"><a href=\"#数据库事务的定义\" class=\"headerlink\" title=\"数据库事务的定义\"></a>数据库事务的定义</h2><blockquote>\n<p>事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。</p>\n</blockquote>\n<h2 id=\"事务的四大特性（ACID）\"><a href=\"#事务的四大特性（ACID）\" class=\"headerlink\" title=\"事务的四大特性（ACID）\"></a>事务的四大特性（ACID）</h2><h3 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h3><blockquote>\n<p>最小逻辑单位，不可分割，要么都成功，要么都失败。</p>\n<p>依赖事务日志 undo.log实现。</p>\n</blockquote>\n<h3 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h3><blockquote>\n<p>事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束</p>\n</blockquote>\n<h3 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a><font style=\"color:red\">隔离性（Isolation）</font></h3><blockquote>\n<p>多个事务间互不干扰。</p>\n</blockquote>\n<h3 id=\"持久性（Durability）\"><a href=\"#持久性（Durability）\" class=\"headerlink\" title=\"持久性（Durability）\"></a>持久性（Durability）</h3><blockquote>\n<p>依赖 redo.log +双写缓冲实现。</p>\n</blockquote>\n<h2 id=\"事务并发的问题\"><a href=\"#事务并发的问题\" class=\"headerlink\" title=\"事务并发的问题\"></a>事务并发的问题</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><blockquote>\n<p>在一个事务内读取到另一个事务未提交的数据。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png\" alt=\"image-20220302224922097\"></p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的数据。</p>\n<p>更新update或删除delete导致的数据变化叫做不可重复读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png\"></p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的插入数据。</p>\n<p>只有当插入insert导致行数的增加才叫做幻读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png\"></p>\n<p><strong>总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</strong></p>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><h3 id=\"Read-Uncommitted-未提交读-一未解决任何并发问题\"><a href=\"#Read-Uncommitted-未提交读-一未解决任何并发问题\" class=\"headerlink\" title=\"Read Uncommitted(未提交读)一未解决任何并发问题\"></a>Read Uncommitted(未提交读)一未解决任何并发问题</h3><blockquote>\n<p>事务未提交的数据对其他事务也是可见的，会出现脏读。</p>\n</blockquote>\n<h3 id=\"Read-Committed-已提交读-一解决脏读问题\"><a href=\"#Read-Committed-已提交读-一解决脏读问题\" class=\"headerlink\" title=\"Read Committed(已提交读)一解决脏读问题\"></a>Read Committed(已提交读)一解决脏读问题</h3><blockquote>\n<p>一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。</p>\n</blockquote>\n<h3 id=\"Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\"><a href=\"#Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\" class=\"headerlink\" title=\"Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\"></a>Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题</h3><blockquote>\n<p>在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。</p>\n<p>但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。</p>\n</blockquote>\n<h3 id=\"Serializable-串行化-一解决所有问题\"><a href=\"#Serializable-串行化-一解决所有问题\" class=\"headerlink\" title=\"Serializable(串行化)一解决所有问题\"></a>Serializable(串行化)一解决所有问题</h3><blockquote>\n<p>最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。</p>\n</blockquote>\n<p><strong>Mysql InnoDB 对事务隔离级别的支持程度</strong></p>\n<p><img src=\"https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png\"></p>\n<p><strong>快照读：</strong>\t<em><strong><u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 普通的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t;<br></code></pre></td></tr></table></figure>\n\n<p><strong>当前读：</strong>\t<em><strong><u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 加锁的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span><br><span class=\"hljs-comment\">-- DML语句</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>RC和RR的区别</strong></p>\n<p>RR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。</p>\n<p>RC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。</p>\n<p>具体的机制就是两种隔离级别的ReadView的差异。</p>\n<h2 id=\"Mysql-锁基本类型\"><a href=\"#Mysql-锁基本类型\" class=\"headerlink\" title=\"Mysql 锁基本类型\"></a>Mysql 锁基本类型</h2><blockquote>\n<p><strong>行锁与表锁区别</strong></p>\n<p>锁定粒度：表锁\t&gt;\t行锁</p>\n<p>加锁效率：表锁\t&gt;\t行锁</p>\n<p>冲突概率：表锁\t&gt;\t行锁</p>\n<p>并发性能：表锁\t&lt;\t行锁</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png\"></p>\n<p>1、一张表没有索引，为什么会锁表？</p>\n<blockquote>\n<p>一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。</p>\n</blockquote>\n<p>2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？</p>\n<blockquote>\n<p>二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。</p>\n</blockquote>\n<h3 id=\"InnoDB-Locking\"><a href=\"#InnoDB-Locking\" class=\"headerlink\" title=\"InnoDB Locking\"></a>InnoDB Locking</h3><h4 id=\"行锁：共享锁（Shared-Locks）\"><a href=\"#行锁：共享锁（Shared-Locks）\" class=\"headerlink\" title=\"行锁：共享锁（Shared Locks）\"></a>行锁：共享锁（Shared Locks）</h4><blockquote>\n<p>共享锁又称为读锁，简称S锁</p>\n<p>共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> LOCK <span class=\"hljs-keyword\">IN</span> SHARE MODE;<br></code></pre></td></tr></table></figure>\n\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"行锁：排他锁（Exclusive-Locks）\"><a href=\"#行锁：排他锁（Exclusive-Locks）\" class=\"headerlink\" title=\"行锁：排他锁（Exclusive Locks）\"></a>行锁：排他锁（Exclusive Locks）</h4><blockquote>\n<p>排他锁又称为写锁，简称X锁。</p>\n<p>排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<ul>\n<li>自动：<code>DELETE/UPDATE/INSERT</code>DML语句默认动加上排他锁（X锁）</li>\n<li>手动：<code>FOR UPDATE</code>语句</li>\n</ul>\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"意向共享锁（IS）-x2F-意向排他锁（IX）\"><a href=\"#意向共享锁（IS）-x2F-意向排他锁（IX）\" class=\"headerlink\" title=\"意向共享锁（IS）&#x2F;意向排他锁（IX）\"></a>意向共享锁（IS）&#x2F;意向排他锁（IX）</h4><blockquote>\n<p>意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。</p>\n<p>作用：为了提升加表锁的效率。</p>\n</blockquote>\n<ul>\n<li><strong>意向共享锁（Intention Shared Locks，简称IS锁）：</strong>表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。</li>\n<li><strong>意向排他锁（Intention Exclusive Locks，简称IX锁）：</strong>表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。</li>\n</ul>\n<h3 id=\"锁的算法（在什么样的情况下锁的范围）\"><a href=\"#锁的算法（在什么样的情况下锁的范围）\" class=\"headerlink\" title=\"锁的算法（在什么样的情况下锁的范围）\"></a>锁的算法（在什么样的情况下锁的范围）</h3><p><img src=\"https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png\"></p>\n<h4 id=\"记录锁（Record-Locks）：锁定记录\"><a href=\"#记录锁（Record-Locks）：锁定记录\" class=\"headerlink\" title=\"记录锁（Record Locks）：锁定记录\"></a>记录锁（Record Locks）：锁定记录</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行加锁时，精准命中一条记录，就会锁住该条记录；</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png\"></p>\n<h4 id=\"间隙锁（Gap-locks）-锁定范围\"><a href=\"#间隙锁（Gap-locks）-锁定范围\" class=\"headerlink\" title=\"间隙锁（Gap locks）:锁定范围\"></a>间隙锁（Gap locks）:锁定范围</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；</p>\n<p>注意：相同的间隙锁不排斥，排斥的是插入</p>\n<blockquote>\n<p>比如我使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">5</span>,&quot;张三&quot;);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">6</span>,&quot;张三&quot;);<br></code></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png\"></p>\n<h4 id=\"临键锁（Nest-key-Locks）：锁定范围加记录\"><a href=\"#临键锁（Nest-key-Locks）：锁定范围加记录\" class=\"headerlink\" title=\"临键锁（Nest-key Locks）：锁定范围加记录\"></a>临键锁（Nest-key Locks）：锁定范围加记录</h4><blockquote>\n<p>InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；</p>\n<p>条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；</p>\n<p>会锁住最后一个记录（Record）的下一个key的左开右闭的区间。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql事务与锁详解\"><a href=\"#Mysql事务与锁详解\" class=\"headerlink\" title=\"Mysql事务与锁详解\"></a>Mysql事务与锁详解</h1><h2 id=\"数据库事务的定义\"><a href=\"#数据库事务的定义\" class=\"headerlink\" title=\"数据库事务的定义\"></a>数据库事务的定义</h2><blockquote>\n<p>事务是数据库管理系统(DBMS) 执行过程中的一个<font style=\"color:red\">逻辑单位</font>（整体不可分割，原子性），由一个有限的数据库操作序列构成。</p>\n</blockquote>\n<h2 id=\"事务的四大特性（ACID）\"><a href=\"#事务的四大特性（ACID）\" class=\"headerlink\" title=\"事务的四大特性（ACID）\"></a>事务的四大特性（ACID）</h2><h3 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h3><blockquote>\n<p>最小逻辑单位，不可分割，要么都成功，要么都失败。</p>\n<p>依赖事务日志 undo.log实现。</p>\n</blockquote>\n<h3 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h3><blockquote>\n<p>事务开始之前，事务结束之后，数据都要是合法的；数据库自身的完整性约束；用户自定义的完成性的约束</p>\n</blockquote>\n<h3 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a><font style=\"color:red\">隔离性（Isolation）</font></h3><blockquote>\n<p>多个事务间互不干扰。</p>\n</blockquote>\n<h3 id=\"持久性（Durability）\"><a href=\"#持久性（Durability）\" class=\"headerlink\" title=\"持久性（Durability）\"></a>持久性（Durability）</h3><blockquote>\n<p>依赖 redo.log +双写缓冲实现。</p>\n</blockquote>\n<h2 id=\"事务并发的问题\"><a href=\"#事务并发的问题\" class=\"headerlink\" title=\"事务并发的问题\"></a>事务并发的问题</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><blockquote>\n<p>在一个事务内读取到另一个事务未提交的数据。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/FC8Gv1BWXDZcH4Q.png\" alt=\"image-20220302224922097\"></p>\n<h3 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的数据。</p>\n<p>更新update或删除delete导致的数据变化叫做不可重复读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/yD6HU4v5FAVod1x.png\"></p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><blockquote>\n<p>在一个事务内读取到另一个事务已提交的插入数据。</p>\n<p>只有当插入insert导致行数的增加才叫做幻读。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/03/02/RAhfiL8VESnQcCN.png\"></p>\n<p><strong>总结：事务并发的三大问题实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。</strong></p>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><h3 id=\"Read-Uncommitted-未提交读-一未解决任何并发问题\"><a href=\"#Read-Uncommitted-未提交读-一未解决任何并发问题\" class=\"headerlink\" title=\"Read Uncommitted(未提交读)一未解决任何并发问题\"></a>Read Uncommitted(未提交读)一未解决任何并发问题</h3><blockquote>\n<p>事务未提交的数据对其他事务也是可见的，会出现脏读。</p>\n</blockquote>\n<h3 id=\"Read-Committed-已提交读-一解决脏读问题\"><a href=\"#Read-Committed-已提交读-一解决脏读问题\" class=\"headerlink\" title=\"Read Committed(已提交读)一解决脏读问题\"></a>Read Committed(已提交读)一解决脏读问题</h3><blockquote>\n<p>一个事务开始之后，只能看到已提交的事务所做的修改，会出现不可重复读。</p>\n</blockquote>\n<h3 id=\"Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\"><a href=\"#Repeatable-Read-可重复读：Mysql5-7默认的事务隔离级别-一解决不可重复读问题\" class=\"headerlink\" title=\"Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题\"></a>Repeatable Read(可重复读：Mysql5.7默认的事务隔离级别)一解决不可重复读问题</h3><blockquote>\n<p>在同一个事务中多次读取同样的数据结果是一样的，这种隔离级别未定义解决幻读的问题。</p>\n<p>但是在mysql InnoDB的存储引擎中是已经解决了幻读的问题了（因为使用了间隙锁，能够阻塞插入，防止了幻读问题），所以默认用的就是Repeatable Read(可重复读)。</p>\n</blockquote>\n<h3 id=\"Serializable-串行化-一解决所有问题\"><a href=\"#Serializable-串行化-一解决所有问题\" class=\"headerlink\" title=\"Serializable(串行化)一解决所有问题\"></a>Serializable(串行化)一解决所有问题</h3><blockquote>\n<p>最高的隔离级别，通过强制事务的串行执行。导致并发度的效率大大降低。</p>\n</blockquote>\n<p><strong>Mysql InnoDB 对事务隔离级别的支持程度</strong></p>\n<p><img src=\"https://s2.loli.net/2022/03/02/G319nBkL7QtAUrP.png\"></p>\n<p><strong>快照读：</strong>\t<em><strong><u>生成一个数据请求时间点的一致性数据快照(Snapshot)，并用这个快照来提供一定级别（语句级 或事务级)的一致性读取 (MVCC) Multi Version Concurrency Control。</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 普通的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t;<br></code></pre></td></tr></table></figure>\n\n<p><strong>当前读：</strong>\t<em><strong><u>在读取数据前,对其加锁,阻止其他事务对数据进行 修改(LBCC)Lock Based Concurrency Control。基于最新的数据去操作的时候就是当前读</u></strong></em></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">-- 加锁的select语句</span><br><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span><br><span class=\"hljs-comment\">-- DML语句</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>RC和RR的区别</strong></p>\n<p>RR的快照建立时问是第一次查询的时候，所以未提交的事务和其后的事务的事务是不能看见的。</p>\n<p>RC的快照建立时问是当前select，所以能够看到其他事务已提交的数摆。</p>\n<p>具体的机制就是两种隔离级别的ReadView的差异。</p>\n<h2 id=\"Mysql-锁基本类型\"><a href=\"#Mysql-锁基本类型\" class=\"headerlink\" title=\"Mysql 锁基本类型\"></a>Mysql 锁基本类型</h2><blockquote>\n<p><strong>行锁与表锁区别</strong></p>\n<p>锁定粒度：表锁\t&gt;\t行锁</p>\n<p>加锁效率：表锁\t&gt;\t行锁</p>\n<p>冲突概率：表锁\t&gt;\t行锁</p>\n<p>并发性能：表锁\t&lt;\t行锁</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/07/EJouhikRpYVWvGn.png\"></p>\n<p>1、一张表没有索引，为什么会锁表？</p>\n<blockquote>\n<p>一张表里如果有主键索引，会将它作为聚簇索引，其次如果没有主键索引，它会找表里不为空并且是唯一的索引作为聚簇索引，再其次如果既没有主键也没有不为空并且是唯一的索引，它就会用隐藏的字段rowid作为聚簇索引；这时它会进行全表扫描，锁住所有rowid的行，就导致整张表锁住了。</p>\n</blockquote>\n<p>2、同一条数据唯一索引加锁，为什么阻塞主键索引加锁？</p>\n<blockquote>\n<p>二级索引加锁时，因为二级索引是非聚簇索引，加锁时会通过非聚簇索引找到聚簇索引（也就是主键索引），锁住的其实是聚簇索引，所以就导致加锁冲突了。</p>\n</blockquote>\n<h3 id=\"InnoDB-Locking\"><a href=\"#InnoDB-Locking\" class=\"headerlink\" title=\"InnoDB Locking\"></a>InnoDB Locking</h3><h4 id=\"行锁：共享锁（Shared-Locks）\"><a href=\"#行锁：共享锁（Shared-Locks）\" class=\"headerlink\" title=\"行锁：共享锁（Shared Locks）\"></a>行锁：共享锁（Shared Locks）</h4><blockquote>\n<p>共享锁又称为读锁，简称S锁</p>\n<p>共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数 据，但是只能读不能修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> LOCK <span class=\"hljs-keyword\">IN</span> SHARE MODE;<br></code></pre></td></tr></table></figure>\n\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"行锁：排他锁（Exclusive-Locks）\"><a href=\"#行锁：排他锁（Exclusive-Locks）\" class=\"headerlink\" title=\"行锁：排他锁（Exclusive Locks）\"></a>行锁：排他锁（Exclusive Locks）</h4><blockquote>\n<p>排他锁又称为写锁，简称X锁。</p>\n<p>排他锁不能与其他锁并存，如一个事务获取了一个数据行的排他锁， 其他事务就不能再获取该行的锁（共享锁、排他锁），只有该获取了排他锁的事务是可以对数据行进行读取和修改。</p>\n</blockquote>\n<p>加锁方式：</p>\n<ul>\n<li>自动：<code>DELETE/UPDATE/INSERT</code>DML语句默认动加上排他锁（X锁）</li>\n<li>手动：<code>FOR UPDATE</code>语句</li>\n</ul>\n<p>释放锁方式：事务结束释放锁</p>\n<h4 id=\"意向共享锁（IS）-x2F-意向排他锁（IX）\"><a href=\"#意向共享锁（IS）-x2F-意向排他锁（IX）\" class=\"headerlink\" title=\"意向共享锁（IS）&#x2F;意向排他锁（IX）\"></a>意向共享锁（IS）&#x2F;意向排他锁（IX）</h4><blockquote>\n<p>意向锁是又存储引擎自己维护的，用户无法手动操作意向锁。</p>\n<p>作用：为了提升加表锁的效率。</p>\n</blockquote>\n<ul>\n<li><strong>意向共享锁（Intention Shared Locks，简称IS锁）：</strong>表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须取的该表（表级别）的意向共享锁（IS锁）；类似JAVA中的偏向锁。</li>\n<li><strong>意向排他锁（Intention Exclusive Locks，简称IX锁）：</strong>表示事务准备给数据行加入排他锁，也就是说一个数据行加排他锁前必须取的该表（表级别）的意向排他锁（IX锁）；类似JAVA中的偏向锁。</li>\n</ul>\n<h3 id=\"锁的算法（在什么样的情况下锁的范围）\"><a href=\"#锁的算法（在什么样的情况下锁的范围）\" class=\"headerlink\" title=\"锁的算法（在什么样的情况下锁的范围）\"></a>锁的算法（在什么样的情况下锁的范围）</h3><p><img src=\"https://s2.loli.net/2022/04/08/ZFG2sBXtj8PWklY.png\"></p>\n<h4 id=\"记录锁（Record-Locks）：锁定记录\"><a href=\"#记录锁（Record-Locks）：锁定记录\" class=\"headerlink\" title=\"记录锁（Record Locks）：锁定记录\"></a>记录锁（Record Locks）：锁定记录</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行加锁时，精准命中一条记录，就会锁住该条记录；</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/IiEmL94FJbjAHTe.png\"></p>\n<h4 id=\"间隙锁（Gap-locks）-锁定范围\"><a href=\"#间隙锁（Gap-locks）-锁定范围\" class=\"headerlink\" title=\"间隙锁（Gap locks）:锁定范围\"></a>间隙锁（Gap locks）:锁定范围</h4><blockquote>\n<p>当你使用<code>FOR UPDATE</code>语句进行范围查询或者等值查询时，如果没有命中任何数据记录的时候，就会锁住这个范围的区间；</p>\n<p>注意：相同的间隙锁不排斥，排斥的是插入</p>\n<blockquote>\n<p>比如我使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">FROM</span> t <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">UPDATE</span>;<br></code></pre></td></tr></table></figure>\n\n<p>这时锁住的是4-7之间的范围，这时我再使用该条语句，是不会排斥的，但是，当我进行插入时就会排斥</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">5</span>,&quot;张三&quot;);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `t`(`id`,`name`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-number\">6</span>,&quot;张三&quot;);<br></code></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/Hum1NZdhgUFrCqx.png\"></p>\n<h4 id=\"临键锁（Nest-key-Locks）：锁定范围加记录\"><a href=\"#临键锁（Nest-key-Locks）：锁定范围加记录\" class=\"headerlink\" title=\"临键锁（Nest-key Locks）：锁定范围加记录\"></a>临键锁（Nest-key Locks）：锁定范围加记录</h4><blockquote>\n<p>InnoDB存储引擎行锁的默认算法；临键锁包含了间隙锁；它能够阻塞插入所以防止了幻读的问题；</p>\n<p>条件是必须是范围查询，同时命中数据的记录（包含记录和区间）；如果用等值查询是不满足条件的即包含记录和区间的；</p>\n<p>会锁住最后一个记录（Record）的下一个key的左开右闭的区间。</p>\n</blockquote>\n<p><img src=\"https://s2.loli.net/2022/04/08/AsJVpSF2DgjYL74.png\"></p>\n"},{"title":"JAVA转换树结构数据","_content":"# JAVA 转换 树结构数据\n\n**第一步：引入fastjson**\n\n```pom\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>${fastjson.version}</version>\n</dependency>\n```\n\n**第二步：用到了工具内的JSONPath**\n\n[JSONPath使用教程](https://blog.csdn.net/lwg_1540652358/article/details/84111339)\n\n```java\n    /**\n     * 树转换\n     *\n     * @param obj                  需要转换的对象\n     * @param parentCodeFieldName  父标识字段名\n     * @param parentCode           父标识值\n     * @param currentCodeFieldName 当前标识字段名\n     * @param childrenFiledName    子树的字段名\n     * @param c                    需要转换的Class类型\n     * @param <T>                  泛型\n     * @return 返回List<T>\n     */\n    public static <T> List<T> tree(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class<T> c) {\n        long t1 = System.currentTimeMillis();\n        String jsonStr = JSON.toJSONString(obj);\n        log.debug(\"树转换开始 >>>>>>>>>>>>>>>> {}\", JSON.toJSONString(obj));\n        //获取第一层级的数据\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            //为空的话直接返回空集合\n            return Lists.newArrayList();\n        }\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n        List<T> list = JSONArray.parseArray(jsonArray.toString(), c);\n        log.debug(\"树转换结束, 转换时间: {} ms . >>>>>>>>>>>>>>>> {}\", (System.currentTimeMillis() - t1), JSON.toJSONString(list));\n        return list;\n    }\n\n    private static void treeChildren(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName) {\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            return;\n        }\n        currentJsonObj.put(childrenFiledName, jsonArray);\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n    }\n```\n\n\n","source":"_posts/JAVA/JAVA转换树结构数据.md","raw":"---\ntitle: JAVA转换树结构数据\ntags:\n  - JAVA\n  - fastjson\ncategories:\n  - JAVA\n---\n# JAVA 转换 树结构数据\n\n**第一步：引入fastjson**\n\n```pom\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>${fastjson.version}</version>\n</dependency>\n```\n\n**第二步：用到了工具内的JSONPath**\n\n[JSONPath使用教程](https://blog.csdn.net/lwg_1540652358/article/details/84111339)\n\n```java\n    /**\n     * 树转换\n     *\n     * @param obj                  需要转换的对象\n     * @param parentCodeFieldName  父标识字段名\n     * @param parentCode           父标识值\n     * @param currentCodeFieldName 当前标识字段名\n     * @param childrenFiledName    子树的字段名\n     * @param c                    需要转换的Class类型\n     * @param <T>                  泛型\n     * @return 返回List<T>\n     */\n    public static <T> List<T> tree(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class<T> c) {\n        long t1 = System.currentTimeMillis();\n        String jsonStr = JSON.toJSONString(obj);\n        log.debug(\"树转换开始 >>>>>>>>>>>>>>>> {}\", JSON.toJSONString(obj));\n        //获取第一层级的数据\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            //为空的话直接返回空集合\n            return Lists.newArrayList();\n        }\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n        List<T> list = JSONArray.parseArray(jsonArray.toString(), c);\n        log.debug(\"树转换结束, 转换时间: {} ms . >>>>>>>>>>>>>>>> {}\", (System.currentTimeMillis() - t1), JSON.toJSONString(list));\n        return list;\n    }\n\n    private static void treeChildren(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName) {\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            return;\n        }\n        currentJsonObj.put(childrenFiledName, jsonArray);\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n    }\n```\n\n\n","slug":"JAVA/JAVA转换树结构数据","published":1,"date":"2022-11-28T10:48:44.531Z","updated":"2022-11-28T10:57:23.997Z","_id":"clb0oel7l00006oiaeadhbd2j","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JAVA-转换-树结构数据\"><a href=\"#JAVA-转换-树结构数据\" class=\"headerlink\" title=\"JAVA 转换 树结构数据\"></a>JAVA 转换 树结构数据</h1><p><strong>第一步：引入fastjson</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步：用到了工具内的JSONPath</strong></p>\n<p><a href=\"https://blog.csdn.net/lwg_1540652358/article/details/84111339\">JSONPath使用教程</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 树转换</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> obj                  需要转换的对象</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCodeFieldName  父标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCode           父标识值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> currentCodeFieldName 当前标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> childrenFiledName    子树的字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> c                    需要转换的Class类型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &lt;T&gt;                  泛型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 返回List&lt;T&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"hljs-title function_\">tree</span><span class=\"hljs-params\">(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class&lt;T&gt; c)</span> &#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">t1</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> JSON.toJSONString(obj);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, JSON.toJSONString(obj));<br>    <span class=\"hljs-comment\">//获取第一层级的数据</span><br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-comment\">//为空的话直接返回空集合</span><br>        <span class=\"hljs-keyword\">return</span> Lists.newArrayList();<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>    List&lt;T&gt; list = JSONArray.parseArray(jsonArray.toString(), c);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换结束, 转换时间: &#123;&#125; ms . &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, (System.currentTimeMillis() - t1), JSON.toJSONString(list));<br>    <span class=\"hljs-keyword\">return</span> list;<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">treeChildren</span><span class=\"hljs-params\">(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName)</span> &#123;<br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    currentJsonObj.put(childrenFiledName, jsonArray);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-转换-树结构数据\"><a href=\"#JAVA-转换-树结构数据\" class=\"headerlink\" title=\"JAVA 转换 树结构数据\"></a>JAVA 转换 树结构数据</h1><p><strong>第一步：引入fastjson</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步：用到了工具内的JSONPath</strong></p>\n<p><a href=\"https://blog.csdn.net/lwg_1540652358/article/details/84111339\">JSONPath使用教程</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 树转换</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> obj                  需要转换的对象</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCodeFieldName  父标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCode           父标识值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> currentCodeFieldName 当前标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> childrenFiledName    子树的字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> c                    需要转换的Class类型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &lt;T&gt;                  泛型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 返回List&lt;T&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"hljs-title function_\">tree</span><span class=\"hljs-params\">(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class&lt;T&gt; c)</span> &#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">t1</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> JSON.toJSONString(obj);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, JSON.toJSONString(obj));<br>    <span class=\"hljs-comment\">//获取第一层级的数据</span><br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-comment\">//为空的话直接返回空集合</span><br>        <span class=\"hljs-keyword\">return</span> Lists.newArrayList();<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>    List&lt;T&gt; list = JSONArray.parseArray(jsonArray.toString(), c);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换结束, 转换时间: &#123;&#125; ms . &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, (System.currentTimeMillis() - t1), JSON.toJSONString(list));<br>    <span class=\"hljs-keyword\">return</span> list;<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">treeChildren</span><span class=\"hljs-params\">(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName)</span> &#123;<br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    currentJsonObj.put(childrenFiledName, jsonArray);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"【SpringCloud】Eureka整合使用和配置","_content":"**遵循SpringBoot三板斧**\n### 服务端\n**第一步加依赖**\n```pom\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-eureka-server</artifactId>\n</dependency>\n```\n**第二步加注解**\n```java\n//在启动类上加注解\n@EnableEurekaServer\n@SpringBootApplication\npublic class EurekaApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaApplication.class, args);\n    }\n}\n```\n**第三步写配置**\n```yml\nspring:\n  application:\n    name: eureka\n# 详见EurekaServerConfigBean，需要注意与Client和Instance在client的jar包不同，Server是在server的jar包。\n# eureka的各项配置可见EurekaXXXConfigBean。\neureka:\n  datacenter: cloud           # 修改Eureka监控页面的System Status Data center\n  environment: test            # 修改Eureka监控页面的System Status Environment\n  instance:\n    hostname: localhost\n    prefer-ip-address: true\n    leaseRenewalIntervalInSeconds:  5 # 心跳间隔，5秒\n    leaseExpirationDurationInSeconds: 10  # 没有心跳的淘汰时间，10秒\n    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}} #SpringCloud 2.0 已经改成 ${spring.cloud.client.ip-address} 了，于是修改\n  client:\n    healthcheck:\n      enabled: true\n    # 默认情况下，eureka server同时也是eureka client，用于相互注册形成高可用eureka服务。\n    # 单点时，如果registerWithEureka配置为true，则eureka server会报错Cannot execute request on any known server\n    registerWithEureka: false # 是否注册到eureka服务，默认为true，当前已为eureka server，且单点eureka，故配置为false\n    fetchRegistry: false # eureka之间如果网络不稳定，客户端一般也会缓存了注册列表，因此eureka服务可以不缓存，我觉得更能确保eureka之间的一致。\n    serviceUrl:\n      # registerWithEureka关闭后，defaultZone没有配置的必要。如果打开，即使配置为本机一样报错。\n      # 也就是说defaultZone任何时候都没有配置为localhost的必要。这点上John的配置更好，永超和周立包括志朋的配置有点多余。\n      # 但是周立说的对，这个属性默认配置是http://localhost:8761/eureka，也就是当你没有用户名密码安全认证时，本机调试时，客户端可以不配置，\n      # 但对于server来说，这个默认没有什么作用。对于client来说，也只有调试的时候有点作用。\n      # 但有一点很奇怪，既然默认了8761端口，为什么eureka server的默认端口要用8080而不是8761呢？\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #应用的主机名称\n  #      defaultZone: http://${security.user.name}:${security.user.password}@localhost:${server.port}/eureka # 本配置应删除。\n  server:\n    # 自我保护机制，默认true。打开后，心跳失败在15分钟内低于85%(renewalPercentThreshold)的服务，也不进行剔除。\n    # 关闭后，主页提示：RENEWALS ARE LESSER THAN THE THRESHOLD. THE SELF PRESERVATION MODE IS TURNED OFF.\n    # THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.\n    enableSelfPreservation: true # 本地调试时可fasle关闭。但生产建议打开，可防止因网络不稳定等原因导致误剔除服务。\n    renewalPercentThreshold: 0.85 # 默认85%\n    # 在服务器接收请求之前等待的初始时间，默认等待5min（John Carnell）\n    waitTimeInMsWhenSyncEmpty: 5 # John说开发时最好注释此配置，服务注册需要3次心跳，每次10s，也就是30s才能显示在eureka。但是为什么我这里马上就显示呢？\n    # eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上\n    # 默认30秒，eclipse提示默认0应该是错误的，源代码中responseCacheUpdateIntervalMs = 30 * 1000。\n    response-cache-update-interval-ms: 3000 # 网上很多专家的博客错误写成responseCacheUpdateInvervalMs，请注意。这里配置为3秒。\n    # eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，\n    # 过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。\n    # 由于启用了evict其实就用不太上改这个配置了，默认180s\n    responseCacheAutoExpirationInSeconds: 180\n    # 启用主动失效，并且每次主动失效检测间隔为3s。源码evictionIntervalTimerInMs = 60 * 1000，默认一分钟。\n    # 需要注意的是该配置会打印INFO日志，增加info日志量，修改后从每60秒打印一次变成3秒打印一次。\n    evictionIntervalTimerInMs: 3000 # 注意不要写成EvictionIntervalTimerInMs，yml大小写敏感。\n```\n如果是多实例高可用修改下列配置\n```yml\neureka:\n  client:\n    registerWithEureka: true # 是否注册到eureka服务\n    serviceUrl:\n      defaultZone: http://peer2:1112/eureka/,http://peer3:1112/eureka/ #应用的主机名称\n```\n### 客户端\n**第一步加依赖**\n```pom\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n**第二步加注解**\n```java\n//@EnableEurekaClient\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class ClientApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ClientApplication.class, args);\n    }\n}\n```\n**第三步写配置**\n```yml\neureka:\n  instance:\n#    ip-address: #指定ip地址\n    # 是否以IP注册到Eureka Server上，如果false则不是IP而是服务器名称\n    # 但我设置了false，eureka主页仍显示192.168.100.16:client-microservice:8010\n    preferIpAddress: true # 将IP注册到Eureka Server上，而如果不配置就是机器的主机名。默认false。应该始终设置为true。如果基于Docker等容器的部署，容器会生成一个随机的主机名，此时DNS不存在该名，无法解析 - John Carnell\n    # 实例名。SpringCloud体系里的，服务实体向eureka注册时，注册名默认是“IP名:应用名:应用端口名”${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.int}}\n    # 如果服务名，ip，端口都一致的话，eureka只显示一个服务\n    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.int[1,9]}}-@project.version@\n    # 服务续约的两个重要属性\n    leaseRenewalIntervalInSeconds: 30 # 服务续约间隔时间。默认每隔30秒，客户端会向服务端发送心跳。见DiscoveryClient.initScheduledTasks\n    leaseExpirationDurationInSeconds: 90 # 服务失效时间。缺省为90秒服务端接收不到客户端的心跳，则剔除该客户端服务实例。\n    # 端点配置。若配置了context-path，actuator的监控端点会增加前缀，此时eureka也需要相应增加\n    #status-page-url-path: ${server.servlet.context-path}/actuator/info\n    #health-check-url-path: ${server.servlet.context-path}/actuator/health\n\n    #    Eureka 的元数据\n    metadata-map:\n      zc-data: Current services are goods services  # 不会影响客户端\n      zone: ABD               # Eureka可以理解的元数据，可以影响客户端\n#    appname: AAAAA            # 填坑 Swagger：配置和spring.application.name 冲突\n  client:\n    # eureka服务的位置，如配置错误，则：Cannot execute request on any known server\n    # 详见：com.netflix.discovery.endpoint.EndpointUtils\n    service-url:\n      defaultZone: http://localhost:8761/eureka/ #应用的主机名称\n    # 是否启用eureka客户端。默认true\n    enabled: true # 本地调试时，若不想启动eureka，可配置false即可，而不需要注释掉@EnableDiscoveryClient这么麻烦。感谢永超，从他的书知道这个属性。\n    # 支持registerWithEureka(John、周立)和register-with-eureka(翟永超)两种写法，eclipse的STS默认使用后者。\n    # 基本所有配置使用横杠或者驼峰都可以，鼠标放在上面，eclipse都可以显示详细注解和默认值（如果有）。\n    registerWithEureka: true # 默认true，因此也可省略。\n    fetchRegistry: true # 默认true，此处可不配置。\n    # 缓存清单更新时间，默认30秒。见EurekaClientConfigBean，其中DefaultEurekaClientConfig可不看（前者spring实现，后者Netflix实现）\n    registry-fetch-interval-seconds: 30 # 如果想eureka server剔除服务后尽快在client体现，我觉得可缩短此时间。\n    # 周立在Camden SR4（对应eureka-client.jar1.2.6）中说有该属性，但我在SR6（对应1.2.4）和SR4中都找不到；\n    # 又查找了Brixton SR7（对应1.1.7，其实不光eureka-client，整个spring-cloud-netflix都是这个版本），也是没有。\n    # 这是因为该属性IDE确实不能提示，但写法是正确的。作用是修改eureka的健康检查方式（心跳），改为用actuator，详见HealthCheckHandler HealthIndicator。\n    # 周立写的不是太详细，可详见这博客：https://blog.csdn.net/xiao_jun_0820/article/details/77991963\n    # 若配置healthcheck，需引入actuator。\n    healthcheck:\n      enabled: true # 我建议配置为true。心跳机制有个问题，如当客户端的数据库连接出现问题导致不可用时，心跳机制不能反映，但actuator的health可以。\n```\n最后可以通过`DiscoveryClient`对象，在日志中打印出服务实例的相关内容。\n```java\n@Slf4j\n@RestController\npublic class TestController {\n\t@Autowired\n    private DiscoveryClient discoveryClient;\n\n    @GetMapping(\"/getDiscoveryClient\")\n    public List<ServiceInstance> getDiscoveryClient() {\n        return discoveryClient.getInstances(\"server-1\");//获取客户端实例服务\n    }\n\n    @GetMapping(\"/getServices\")\n    public List<String> getServices() {\n        return discoveryClient.getServices();\n    }\n}\n```\n","source":"_posts/SpringCloud/【SpringCloud】Eureka整合使用和配置.md","raw":"---\ntitle: 【SpringCloud】Eureka整合使用和配置\ntags:\n  - SpringCloud\n  - Eureka\n  - 注册中心\ncategories:\n  - SpringCloud\n---\n**遵循SpringBoot三板斧**\n### 服务端\n**第一步加依赖**\n```pom\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-eureka-server</artifactId>\n</dependency>\n```\n**第二步加注解**\n```java\n//在启动类上加注解\n@EnableEurekaServer\n@SpringBootApplication\npublic class EurekaApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaApplication.class, args);\n    }\n}\n```\n**第三步写配置**\n```yml\nspring:\n  application:\n    name: eureka\n# 详见EurekaServerConfigBean，需要注意与Client和Instance在client的jar包不同，Server是在server的jar包。\n# eureka的各项配置可见EurekaXXXConfigBean。\neureka:\n  datacenter: cloud           # 修改Eureka监控页面的System Status Data center\n  environment: test            # 修改Eureka监控页面的System Status Environment\n  instance:\n    hostname: localhost\n    prefer-ip-address: true\n    leaseRenewalIntervalInSeconds:  5 # 心跳间隔，5秒\n    leaseExpirationDurationInSeconds: 10  # 没有心跳的淘汰时间，10秒\n    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}} #SpringCloud 2.0 已经改成 ${spring.cloud.client.ip-address} 了，于是修改\n  client:\n    healthcheck:\n      enabled: true\n    # 默认情况下，eureka server同时也是eureka client，用于相互注册形成高可用eureka服务。\n    # 单点时，如果registerWithEureka配置为true，则eureka server会报错Cannot execute request on any known server\n    registerWithEureka: false # 是否注册到eureka服务，默认为true，当前已为eureka server，且单点eureka，故配置为false\n    fetchRegistry: false # eureka之间如果网络不稳定，客户端一般也会缓存了注册列表，因此eureka服务可以不缓存，我觉得更能确保eureka之间的一致。\n    serviceUrl:\n      # registerWithEureka关闭后，defaultZone没有配置的必要。如果打开，即使配置为本机一样报错。\n      # 也就是说defaultZone任何时候都没有配置为localhost的必要。这点上John的配置更好，永超和周立包括志朋的配置有点多余。\n      # 但是周立说的对，这个属性默认配置是http://localhost:8761/eureka，也就是当你没有用户名密码安全认证时，本机调试时，客户端可以不配置，\n      # 但对于server来说，这个默认没有什么作用。对于client来说，也只有调试的时候有点作用。\n      # 但有一点很奇怪，既然默认了8761端口，为什么eureka server的默认端口要用8080而不是8761呢？\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #应用的主机名称\n  #      defaultZone: http://${security.user.name}:${security.user.password}@localhost:${server.port}/eureka # 本配置应删除。\n  server:\n    # 自我保护机制，默认true。打开后，心跳失败在15分钟内低于85%(renewalPercentThreshold)的服务，也不进行剔除。\n    # 关闭后，主页提示：RENEWALS ARE LESSER THAN THE THRESHOLD. THE SELF PRESERVATION MODE IS TURNED OFF.\n    # THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.\n    enableSelfPreservation: true # 本地调试时可fasle关闭。但生产建议打开，可防止因网络不稳定等原因导致误剔除服务。\n    renewalPercentThreshold: 0.85 # 默认85%\n    # 在服务器接收请求之前等待的初始时间，默认等待5min（John Carnell）\n    waitTimeInMsWhenSyncEmpty: 5 # John说开发时最好注释此配置，服务注册需要3次心跳，每次10s，也就是30s才能显示在eureka。但是为什么我这里马上就显示呢？\n    # eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上\n    # 默认30秒，eclipse提示默认0应该是错误的，源代码中responseCacheUpdateIntervalMs = 30 * 1000。\n    response-cache-update-interval-ms: 3000 # 网上很多专家的博客错误写成responseCacheUpdateInvervalMs，请注意。这里配置为3秒。\n    # eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，\n    # 过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。\n    # 由于启用了evict其实就用不太上改这个配置了，默认180s\n    responseCacheAutoExpirationInSeconds: 180\n    # 启用主动失效，并且每次主动失效检测间隔为3s。源码evictionIntervalTimerInMs = 60 * 1000，默认一分钟。\n    # 需要注意的是该配置会打印INFO日志，增加info日志量，修改后从每60秒打印一次变成3秒打印一次。\n    evictionIntervalTimerInMs: 3000 # 注意不要写成EvictionIntervalTimerInMs，yml大小写敏感。\n```\n如果是多实例高可用修改下列配置\n```yml\neureka:\n  client:\n    registerWithEureka: true # 是否注册到eureka服务\n    serviceUrl:\n      defaultZone: http://peer2:1112/eureka/,http://peer3:1112/eureka/ #应用的主机名称\n```\n### 客户端\n**第一步加依赖**\n```pom\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n**第二步加注解**\n```java\n//@EnableEurekaClient\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class ClientApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ClientApplication.class, args);\n    }\n}\n```\n**第三步写配置**\n```yml\neureka:\n  instance:\n#    ip-address: #指定ip地址\n    # 是否以IP注册到Eureka Server上，如果false则不是IP而是服务器名称\n    # 但我设置了false，eureka主页仍显示192.168.100.16:client-microservice:8010\n    preferIpAddress: true # 将IP注册到Eureka Server上，而如果不配置就是机器的主机名。默认false。应该始终设置为true。如果基于Docker等容器的部署，容器会生成一个随机的主机名，此时DNS不存在该名，无法解析 - John Carnell\n    # 实例名。SpringCloud体系里的，服务实体向eureka注册时，注册名默认是“IP名:应用名:应用端口名”${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.int}}\n    # 如果服务名，ip，端口都一致的话，eureka只显示一个服务\n    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.int[1,9]}}-@project.version@\n    # 服务续约的两个重要属性\n    leaseRenewalIntervalInSeconds: 30 # 服务续约间隔时间。默认每隔30秒，客户端会向服务端发送心跳。见DiscoveryClient.initScheduledTasks\n    leaseExpirationDurationInSeconds: 90 # 服务失效时间。缺省为90秒服务端接收不到客户端的心跳，则剔除该客户端服务实例。\n    # 端点配置。若配置了context-path，actuator的监控端点会增加前缀，此时eureka也需要相应增加\n    #status-page-url-path: ${server.servlet.context-path}/actuator/info\n    #health-check-url-path: ${server.servlet.context-path}/actuator/health\n\n    #    Eureka 的元数据\n    metadata-map:\n      zc-data: Current services are goods services  # 不会影响客户端\n      zone: ABD               # Eureka可以理解的元数据，可以影响客户端\n#    appname: AAAAA            # 填坑 Swagger：配置和spring.application.name 冲突\n  client:\n    # eureka服务的位置，如配置错误，则：Cannot execute request on any known server\n    # 详见：com.netflix.discovery.endpoint.EndpointUtils\n    service-url:\n      defaultZone: http://localhost:8761/eureka/ #应用的主机名称\n    # 是否启用eureka客户端。默认true\n    enabled: true # 本地调试时，若不想启动eureka，可配置false即可，而不需要注释掉@EnableDiscoveryClient这么麻烦。感谢永超，从他的书知道这个属性。\n    # 支持registerWithEureka(John、周立)和register-with-eureka(翟永超)两种写法，eclipse的STS默认使用后者。\n    # 基本所有配置使用横杠或者驼峰都可以，鼠标放在上面，eclipse都可以显示详细注解和默认值（如果有）。\n    registerWithEureka: true # 默认true，因此也可省略。\n    fetchRegistry: true # 默认true，此处可不配置。\n    # 缓存清单更新时间，默认30秒。见EurekaClientConfigBean，其中DefaultEurekaClientConfig可不看（前者spring实现，后者Netflix实现）\n    registry-fetch-interval-seconds: 30 # 如果想eureka server剔除服务后尽快在client体现，我觉得可缩短此时间。\n    # 周立在Camden SR4（对应eureka-client.jar1.2.6）中说有该属性，但我在SR6（对应1.2.4）和SR4中都找不到；\n    # 又查找了Brixton SR7（对应1.1.7，其实不光eureka-client，整个spring-cloud-netflix都是这个版本），也是没有。\n    # 这是因为该属性IDE确实不能提示，但写法是正确的。作用是修改eureka的健康检查方式（心跳），改为用actuator，详见HealthCheckHandler HealthIndicator。\n    # 周立写的不是太详细，可详见这博客：https://blog.csdn.net/xiao_jun_0820/article/details/77991963\n    # 若配置healthcheck，需引入actuator。\n    healthcheck:\n      enabled: true # 我建议配置为true。心跳机制有个问题，如当客户端的数据库连接出现问题导致不可用时，心跳机制不能反映，但actuator的health可以。\n```\n最后可以通过`DiscoveryClient`对象，在日志中打印出服务实例的相关内容。\n```java\n@Slf4j\n@RestController\npublic class TestController {\n\t@Autowired\n    private DiscoveryClient discoveryClient;\n\n    @GetMapping(\"/getDiscoveryClient\")\n    public List<ServiceInstance> getDiscoveryClient() {\n        return discoveryClient.getInstances(\"server-1\");//获取客户端实例服务\n    }\n\n    @GetMapping(\"/getServices\")\n    public List<String> getServices() {\n        return discoveryClient.getServices();\n    }\n}\n```\n","slug":"SpringCloud/【SpringCloud】Eureka整合使用和配置","published":1,"date":"2022-11-28T10:52:11.713Z","updated":"2022-11-28T10:57:23.997Z","_id":"clb0oel7s00016oia3xfo5toy","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>遵循SpringBoot三板斧</strong></p>\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><p><strong>第一步加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步加注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在启动类上加注解</span><br><span class=\"hljs-meta\">@EnableEurekaServer</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EurekaApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>第三步写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">eureka</span><br><span class=\"hljs-comment\"># 详见EurekaServerConfigBean，需要注意与Client和Instance在client的jar包不同，Server是在server的jar包。</span><br><span class=\"hljs-comment\"># eureka的各项配置可见EurekaXXXConfigBean。</span><br><span class=\"hljs-attr\">eureka:</span><br>  <span class=\"hljs-attr\">datacenter:</span> <span class=\"hljs-string\">cloud</span>           <span class=\"hljs-comment\"># 修改Eureka监控页面的System Status Data center</span><br>  <span class=\"hljs-attr\">environment:</span> <span class=\"hljs-string\">test</span>            <span class=\"hljs-comment\"># 修改Eureka监控页面的System Status Environment</span><br>  <span class=\"hljs-attr\">instance:</span><br>    <span class=\"hljs-attr\">hostname:</span> <span class=\"hljs-string\">localhost</span><br>    <span class=\"hljs-attr\">prefer-ip-address:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">leaseRenewalIntervalInSeconds:</span>  <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\"># 心跳间隔，5秒</span><br>    <span class=\"hljs-attr\">leaseExpirationDurationInSeconds:</span> <span class=\"hljs-number\">10</span>  <span class=\"hljs-comment\"># 没有心跳的淘汰时间，10秒</span><br>    <span class=\"hljs-attr\">instance-id:</span> <span class=\"hljs-string\">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span> <span class=\"hljs-comment\">#SpringCloud 2.0 已经改成 $&#123;spring.cloud.client.ip-address&#125; 了，于是修改</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">healthcheck:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-comment\"># 默认情况下，eureka server同时也是eureka client，用于相互注册形成高可用eureka服务。</span><br>    <span class=\"hljs-comment\"># 单点时，如果registerWithEureka配置为true，则eureka server会报错Cannot execute request on any known server</span><br>    <span class=\"hljs-attr\">registerWithEureka:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 是否注册到eureka服务，默认为true，当前已为eureka server，且单点eureka，故配置为false</span><br>    <span class=\"hljs-attr\">fetchRegistry:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># eureka之间如果网络不稳定，客户端一般也会缓存了注册列表，因此eureka服务可以不缓存，我觉得更能确保eureka之间的一致。</span><br>    <span class=\"hljs-attr\">serviceUrl:</span><br>      <span class=\"hljs-comment\"># registerWithEureka关闭后，defaultZone没有配置的必要。如果打开，即使配置为本机一样报错。</span><br>      <span class=\"hljs-comment\"># 也就是说defaultZone任何时候都没有配置为localhost的必要。这点上John的配置更好，永超和周立包括志朋的配置有点多余。</span><br>      <span class=\"hljs-comment\"># 但是周立说的对，这个属性默认配置是http://localhost:8761/eureka，也就是当你没有用户名密码安全认证时，本机调试时，客户端可以不配置，</span><br>      <span class=\"hljs-comment\"># 但对于server来说，这个默认没有什么作用。对于client来说，也只有调试的时候有点作用。</span><br>      <span class=\"hljs-comment\"># 但有一点很奇怪，既然默认了8761端口，为什么eureka server的默认端口要用8080而不是8761呢？</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class=\"hljs-comment\">#应用的主机名称</span><br>  <span class=\"hljs-comment\">#      defaultZone: http://$&#123;security.user.name&#125;:$&#123;security.user.password&#125;@localhost:$&#123;server.port&#125;/eureka # 本配置应删除。</span><br>  <span class=\"hljs-attr\">server:</span><br>    <span class=\"hljs-comment\"># 自我保护机制，默认true。打开后，心跳失败在15分钟内低于85%(renewalPercentThreshold)的服务，也不进行剔除。</span><br>    <span class=\"hljs-comment\"># 关闭后，主页提示：RENEWALS ARE LESSER THAN THE THRESHOLD. THE SELF PRESERVATION MODE IS TURNED OFF.</span><br>    <span class=\"hljs-comment\"># THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</span><br>    <span class=\"hljs-attr\">enableSelfPreservation:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 本地调试时可fasle关闭。但生产建议打开，可防止因网络不稳定等原因导致误剔除服务。</span><br>    <span class=\"hljs-attr\">renewalPercentThreshold:</span> <span class=\"hljs-number\">0.85</span> <span class=\"hljs-comment\"># 默认85%</span><br>    <span class=\"hljs-comment\"># 在服务器接收请求之前等待的初始时间，默认等待5min（John Carnell）</span><br>    <span class=\"hljs-attr\">waitTimeInMsWhenSyncEmpty:</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\"># John说开发时最好注释此配置，服务注册需要3次心跳，每次10s，也就是30s才能显示在eureka。但是为什么我这里马上就显示呢？</span><br>    <span class=\"hljs-comment\"># eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上</span><br>    <span class=\"hljs-comment\"># 默认30秒，eclipse提示默认0应该是错误的，源代码中responseCacheUpdateIntervalMs = 30 * 1000。</span><br>    <span class=\"hljs-attr\">response-cache-update-interval-ms:</span> <span class=\"hljs-number\">3000</span> <span class=\"hljs-comment\"># 网上很多专家的博客错误写成responseCacheUpdateInvervalMs，请注意。这里配置为3秒。</span><br>    <span class=\"hljs-comment\"># eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，</span><br>    <span class=\"hljs-comment\"># 过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。</span><br>    <span class=\"hljs-comment\"># 由于启用了evict其实就用不太上改这个配置了，默认180s</span><br>    <span class=\"hljs-attr\">responseCacheAutoExpirationInSeconds:</span> <span class=\"hljs-number\">180</span><br>    <span class=\"hljs-comment\"># 启用主动失效，并且每次主动失效检测间隔为3s。源码evictionIntervalTimerInMs = 60 * 1000，默认一分钟。</span><br>    <span class=\"hljs-comment\"># 需要注意的是该配置会打印INFO日志，增加info日志量，修改后从每60秒打印一次变成3秒打印一次。</span><br>    <span class=\"hljs-attr\">evictionIntervalTimerInMs:</span> <span class=\"hljs-number\">3000</span> <span class=\"hljs-comment\"># 注意不要写成EvictionIntervalTimerInMs，yml大小写敏感。</span><br></code></pre></td></tr></table></figure>\n<p>如果是多实例高可用修改下列配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">eureka:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">registerWithEureka:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否注册到eureka服务</span><br>    <span class=\"hljs-attr\">serviceUrl:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://peer2:1112/eureka/,http://peer3:1112/eureka/</span> <span class=\"hljs-comment\">#应用的主机名称</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p><strong>第一步加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步加注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//@EnableEurekaClient</span><br><span class=\"hljs-meta\">@EnableDiscoveryClient</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClientApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(ClientApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>第三步写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">eureka:</span><br>  <span class=\"hljs-attr\">instance:</span><br><span class=\"hljs-comment\">#    ip-address: #指定ip地址</span><br>    <span class=\"hljs-comment\"># 是否以IP注册到Eureka Server上，如果false则不是IP而是服务器名称</span><br>    <span class=\"hljs-comment\"># 但我设置了false，eureka主页仍显示192.168.100.16:client-microservice:8010</span><br>    <span class=\"hljs-attr\">preferIpAddress:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 将IP注册到Eureka Server上，而如果不配置就是机器的主机名。默认false。应该始终设置为true。如果基于Docker等容器的部署，容器会生成一个随机的主机名，此时DNS不存在该名，无法解析 - John Carnell</span><br>    <span class=\"hljs-comment\"># 实例名。SpringCloud体系里的，服务实体向eureka注册时，注册名默认是“IP名:应用名:应用端口名”$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;random.int&#125;&#125;</span><br>    <span class=\"hljs-comment\"># 如果服务名，ip，端口都一致的话，eureka只显示一个服务</span><br>    <span class=\"hljs-attr\">instance-id:</span> <span class=\"hljs-string\">$&#123;spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;random.int[1,9]&#125;&#125;-@project.version@</span><br>    <span class=\"hljs-comment\"># 服务续约的两个重要属性</span><br>    <span class=\"hljs-attr\">leaseRenewalIntervalInSeconds:</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-comment\"># 服务续约间隔时间。默认每隔30秒，客户端会向服务端发送心跳。见DiscoveryClient.initScheduledTasks</span><br>    <span class=\"hljs-attr\">leaseExpirationDurationInSeconds:</span> <span class=\"hljs-number\">90</span> <span class=\"hljs-comment\"># 服务失效时间。缺省为90秒服务端接收不到客户端的心跳，则剔除该客户端服务实例。</span><br>    <span class=\"hljs-comment\"># 端点配置。若配置了context-path，actuator的监控端点会增加前缀，此时eureka也需要相应增加</span><br>    <span class=\"hljs-comment\">#status-page-url-path: $&#123;server.servlet.context-path&#125;/actuator/info</span><br>    <span class=\"hljs-comment\">#health-check-url-path: $&#123;server.servlet.context-path&#125;/actuator/health</span><br><br>    <span class=\"hljs-comment\">#    Eureka 的元数据</span><br>    <span class=\"hljs-attr\">metadata-map:</span><br>      <span class=\"hljs-attr\">zc-data:</span> <span class=\"hljs-string\">Current</span> <span class=\"hljs-string\">services</span> <span class=\"hljs-string\">are</span> <span class=\"hljs-string\">goods</span> <span class=\"hljs-string\">services</span>  <span class=\"hljs-comment\"># 不会影响客户端</span><br>      <span class=\"hljs-attr\">zone:</span> <span class=\"hljs-string\">ABD</span>               <span class=\"hljs-comment\"># Eureka可以理解的元数据，可以影响客户端</span><br><span class=\"hljs-comment\">#    appname: AAAAA            # 填坑 Swagger：配置和spring.application.name 冲突</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-comment\"># eureka服务的位置，如配置错误，则：Cannot execute request on any known server</span><br>    <span class=\"hljs-comment\"># 详见：com.netflix.discovery.endpoint.EndpointUtils</span><br>    <span class=\"hljs-attr\">service-url:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://localhost:8761/eureka/</span> <span class=\"hljs-comment\">#应用的主机名称</span><br>    <span class=\"hljs-comment\"># 是否启用eureka客户端。默认true</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 本地调试时，若不想启动eureka，可配置false即可，而不需要注释掉@EnableDiscoveryClient这么麻烦。感谢永超，从他的书知道这个属性。</span><br>    <span class=\"hljs-comment\"># 支持registerWithEureka(John、周立)和register-with-eureka(翟永超)两种写法，eclipse的STS默认使用后者。</span><br>    <span class=\"hljs-comment\"># 基本所有配置使用横杠或者驼峰都可以，鼠标放在上面，eclipse都可以显示详细注解和默认值（如果有）。</span><br>    <span class=\"hljs-attr\">registerWithEureka:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 默认true，因此也可省略。</span><br>    <span class=\"hljs-attr\">fetchRegistry:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 默认true，此处可不配置。</span><br>    <span class=\"hljs-comment\"># 缓存清单更新时间，默认30秒。见EurekaClientConfigBean，其中DefaultEurekaClientConfig可不看（前者spring实现，后者Netflix实现）</span><br>    <span class=\"hljs-attr\">registry-fetch-interval-seconds:</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-comment\"># 如果想eureka server剔除服务后尽快在client体现，我觉得可缩短此时间。</span><br>    <span class=\"hljs-comment\"># 周立在Camden SR4（对应eureka-client.jar1.2.6）中说有该属性，但我在SR6（对应1.2.4）和SR4中都找不到；</span><br>    <span class=\"hljs-comment\"># 又查找了Brixton SR7（对应1.1.7，其实不光eureka-client，整个spring-cloud-netflix都是这个版本），也是没有。</span><br>    <span class=\"hljs-comment\"># 这是因为该属性IDE确实不能提示，但写法是正确的。作用是修改eureka的健康检查方式（心跳），改为用actuator，详见HealthCheckHandler HealthIndicator。</span><br>    <span class=\"hljs-comment\"># 周立写的不是太详细，可详见这博客：https://blog.csdn.net/xiao_jun_0820/article/details/77991963</span><br>    <span class=\"hljs-comment\"># 若配置healthcheck，需引入actuator。</span><br>    <span class=\"hljs-attr\">healthcheck:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 我建议配置为true。心跳机制有个问题，如当客户端的数据库连接出现问题导致不可用时，心跳机制不能反映，但actuator的health可以。</span><br></code></pre></td></tr></table></figure>\n<p>最后可以通过<code>DiscoveryClient</code>对象，在日志中打印出服务实例的相关内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestController</span> &#123;<br>\t<span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> DiscoveryClient discoveryClient;<br><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/getDiscoveryClient&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> List&lt;ServiceInstance&gt; <span class=\"hljs-title function_\">getDiscoveryClient</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> discoveryClient.getInstances(<span class=\"hljs-string\">&quot;server-1&quot;</span>);<span class=\"hljs-comment\">//获取客户端实例服务</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/getServices&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title function_\">getServices</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> discoveryClient.getServices();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>遵循SpringBoot三板斧</strong></p>\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><p><strong>第一步加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步加注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在启动类上加注解</span><br><span class=\"hljs-meta\">@EnableEurekaServer</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EurekaApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>第三步写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">eureka</span><br><span class=\"hljs-comment\"># 详见EurekaServerConfigBean，需要注意与Client和Instance在client的jar包不同，Server是在server的jar包。</span><br><span class=\"hljs-comment\"># eureka的各项配置可见EurekaXXXConfigBean。</span><br><span class=\"hljs-attr\">eureka:</span><br>  <span class=\"hljs-attr\">datacenter:</span> <span class=\"hljs-string\">cloud</span>           <span class=\"hljs-comment\"># 修改Eureka监控页面的System Status Data center</span><br>  <span class=\"hljs-attr\">environment:</span> <span class=\"hljs-string\">test</span>            <span class=\"hljs-comment\"># 修改Eureka监控页面的System Status Environment</span><br>  <span class=\"hljs-attr\">instance:</span><br>    <span class=\"hljs-attr\">hostname:</span> <span class=\"hljs-string\">localhost</span><br>    <span class=\"hljs-attr\">prefer-ip-address:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">leaseRenewalIntervalInSeconds:</span>  <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\"># 心跳间隔，5秒</span><br>    <span class=\"hljs-attr\">leaseExpirationDurationInSeconds:</span> <span class=\"hljs-number\">10</span>  <span class=\"hljs-comment\"># 没有心跳的淘汰时间，10秒</span><br>    <span class=\"hljs-attr\">instance-id:</span> <span class=\"hljs-string\">$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span> <span class=\"hljs-comment\">#SpringCloud 2.0 已经改成 $&#123;spring.cloud.client.ip-address&#125; 了，于是修改</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">healthcheck:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-comment\"># 默认情况下，eureka server同时也是eureka client，用于相互注册形成高可用eureka服务。</span><br>    <span class=\"hljs-comment\"># 单点时，如果registerWithEureka配置为true，则eureka server会报错Cannot execute request on any known server</span><br>    <span class=\"hljs-attr\">registerWithEureka:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 是否注册到eureka服务，默认为true，当前已为eureka server，且单点eureka，故配置为false</span><br>    <span class=\"hljs-attr\">fetchRegistry:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># eureka之间如果网络不稳定，客户端一般也会缓存了注册列表，因此eureka服务可以不缓存，我觉得更能确保eureka之间的一致。</span><br>    <span class=\"hljs-attr\">serviceUrl:</span><br>      <span class=\"hljs-comment\"># registerWithEureka关闭后，defaultZone没有配置的必要。如果打开，即使配置为本机一样报错。</span><br>      <span class=\"hljs-comment\"># 也就是说defaultZone任何时候都没有配置为localhost的必要。这点上John的配置更好，永超和周立包括志朋的配置有点多余。</span><br>      <span class=\"hljs-comment\"># 但是周立说的对，这个属性默认配置是http://localhost:8761/eureka，也就是当你没有用户名密码安全认证时，本机调试时，客户端可以不配置，</span><br>      <span class=\"hljs-comment\"># 但对于server来说，这个默认没有什么作用。对于client来说，也只有调试的时候有点作用。</span><br>      <span class=\"hljs-comment\"># 但有一点很奇怪，既然默认了8761端口，为什么eureka server的默认端口要用8080而不是8761呢？</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class=\"hljs-comment\">#应用的主机名称</span><br>  <span class=\"hljs-comment\">#      defaultZone: http://$&#123;security.user.name&#125;:$&#123;security.user.password&#125;@localhost:$&#123;server.port&#125;/eureka # 本配置应删除。</span><br>  <span class=\"hljs-attr\">server:</span><br>    <span class=\"hljs-comment\"># 自我保护机制，默认true。打开后，心跳失败在15分钟内低于85%(renewalPercentThreshold)的服务，也不进行剔除。</span><br>    <span class=\"hljs-comment\"># 关闭后，主页提示：RENEWALS ARE LESSER THAN THE THRESHOLD. THE SELF PRESERVATION MODE IS TURNED OFF.</span><br>    <span class=\"hljs-comment\"># THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.</span><br>    <span class=\"hljs-attr\">enableSelfPreservation:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 本地调试时可fasle关闭。但生产建议打开，可防止因网络不稳定等原因导致误剔除服务。</span><br>    <span class=\"hljs-attr\">renewalPercentThreshold:</span> <span class=\"hljs-number\">0.85</span> <span class=\"hljs-comment\"># 默认85%</span><br>    <span class=\"hljs-comment\"># 在服务器接收请求之前等待的初始时间，默认等待5min（John Carnell）</span><br>    <span class=\"hljs-attr\">waitTimeInMsWhenSyncEmpty:</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\"># John说开发时最好注释此配置，服务注册需要3次心跳，每次10s，也就是30s才能显示在eureka。但是为什么我这里马上就显示呢？</span><br>    <span class=\"hljs-comment\"># eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上</span><br>    <span class=\"hljs-comment\"># 默认30秒，eclipse提示默认0应该是错误的，源代码中responseCacheUpdateIntervalMs = 30 * 1000。</span><br>    <span class=\"hljs-attr\">response-cache-update-interval-ms:</span> <span class=\"hljs-number\">3000</span> <span class=\"hljs-comment\"># 网上很多专家的博客错误写成responseCacheUpdateInvervalMs，请注意。这里配置为3秒。</span><br>    <span class=\"hljs-comment\"># eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，</span><br>    <span class=\"hljs-comment\"># 过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap。</span><br>    <span class=\"hljs-comment\"># 由于启用了evict其实就用不太上改这个配置了，默认180s</span><br>    <span class=\"hljs-attr\">responseCacheAutoExpirationInSeconds:</span> <span class=\"hljs-number\">180</span><br>    <span class=\"hljs-comment\"># 启用主动失效，并且每次主动失效检测间隔为3s。源码evictionIntervalTimerInMs = 60 * 1000，默认一分钟。</span><br>    <span class=\"hljs-comment\"># 需要注意的是该配置会打印INFO日志，增加info日志量，修改后从每60秒打印一次变成3秒打印一次。</span><br>    <span class=\"hljs-attr\">evictionIntervalTimerInMs:</span> <span class=\"hljs-number\">3000</span> <span class=\"hljs-comment\"># 注意不要写成EvictionIntervalTimerInMs，yml大小写敏感。</span><br></code></pre></td></tr></table></figure>\n<p>如果是多实例高可用修改下列配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">eureka:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">registerWithEureka:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否注册到eureka服务</span><br>    <span class=\"hljs-attr\">serviceUrl:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://peer2:1112/eureka/,http://peer3:1112/eureka/</span> <span class=\"hljs-comment\">#应用的主机名称</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p><strong>第一步加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步加注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//@EnableEurekaClient</span><br><span class=\"hljs-meta\">@EnableDiscoveryClient</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClientApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(ClientApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>第三步写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">eureka:</span><br>  <span class=\"hljs-attr\">instance:</span><br><span class=\"hljs-comment\">#    ip-address: #指定ip地址</span><br>    <span class=\"hljs-comment\"># 是否以IP注册到Eureka Server上，如果false则不是IP而是服务器名称</span><br>    <span class=\"hljs-comment\"># 但我设置了false，eureka主页仍显示192.168.100.16:client-microservice:8010</span><br>    <span class=\"hljs-attr\">preferIpAddress:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 将IP注册到Eureka Server上，而如果不配置就是机器的主机名。默认false。应该始终设置为true。如果基于Docker等容器的部署，容器会生成一个随机的主机名，此时DNS不存在该名，无法解析 - John Carnell</span><br>    <span class=\"hljs-comment\"># 实例名。SpringCloud体系里的，服务实体向eureka注册时，注册名默认是“IP名:应用名:应用端口名”$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;random.int&#125;&#125;</span><br>    <span class=\"hljs-comment\"># 如果服务名，ip，端口都一致的话，eureka只显示一个服务</span><br>    <span class=\"hljs-attr\">instance-id:</span> <span class=\"hljs-string\">$&#123;spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;spring.cloud.client.ip-address&#125;:$&#123;spring.application.instance_id:$&#123;random.int[1,9]&#125;&#125;-@project.version@</span><br>    <span class=\"hljs-comment\"># 服务续约的两个重要属性</span><br>    <span class=\"hljs-attr\">leaseRenewalIntervalInSeconds:</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-comment\"># 服务续约间隔时间。默认每隔30秒，客户端会向服务端发送心跳。见DiscoveryClient.initScheduledTasks</span><br>    <span class=\"hljs-attr\">leaseExpirationDurationInSeconds:</span> <span class=\"hljs-number\">90</span> <span class=\"hljs-comment\"># 服务失效时间。缺省为90秒服务端接收不到客户端的心跳，则剔除该客户端服务实例。</span><br>    <span class=\"hljs-comment\"># 端点配置。若配置了context-path，actuator的监控端点会增加前缀，此时eureka也需要相应增加</span><br>    <span class=\"hljs-comment\">#status-page-url-path: $&#123;server.servlet.context-path&#125;/actuator/info</span><br>    <span class=\"hljs-comment\">#health-check-url-path: $&#123;server.servlet.context-path&#125;/actuator/health</span><br><br>    <span class=\"hljs-comment\">#    Eureka 的元数据</span><br>    <span class=\"hljs-attr\">metadata-map:</span><br>      <span class=\"hljs-attr\">zc-data:</span> <span class=\"hljs-string\">Current</span> <span class=\"hljs-string\">services</span> <span class=\"hljs-string\">are</span> <span class=\"hljs-string\">goods</span> <span class=\"hljs-string\">services</span>  <span class=\"hljs-comment\"># 不会影响客户端</span><br>      <span class=\"hljs-attr\">zone:</span> <span class=\"hljs-string\">ABD</span>               <span class=\"hljs-comment\"># Eureka可以理解的元数据，可以影响客户端</span><br><span class=\"hljs-comment\">#    appname: AAAAA            # 填坑 Swagger：配置和spring.application.name 冲突</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-comment\"># eureka服务的位置，如配置错误，则：Cannot execute request on any known server</span><br>    <span class=\"hljs-comment\"># 详见：com.netflix.discovery.endpoint.EndpointUtils</span><br>    <span class=\"hljs-attr\">service-url:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://localhost:8761/eureka/</span> <span class=\"hljs-comment\">#应用的主机名称</span><br>    <span class=\"hljs-comment\"># 是否启用eureka客户端。默认true</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 本地调试时，若不想启动eureka，可配置false即可，而不需要注释掉@EnableDiscoveryClient这么麻烦。感谢永超，从他的书知道这个属性。</span><br>    <span class=\"hljs-comment\"># 支持registerWithEureka(John、周立)和register-with-eureka(翟永超)两种写法，eclipse的STS默认使用后者。</span><br>    <span class=\"hljs-comment\"># 基本所有配置使用横杠或者驼峰都可以，鼠标放在上面，eclipse都可以显示详细注解和默认值（如果有）。</span><br>    <span class=\"hljs-attr\">registerWithEureka:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 默认true，因此也可省略。</span><br>    <span class=\"hljs-attr\">fetchRegistry:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 默认true，此处可不配置。</span><br>    <span class=\"hljs-comment\"># 缓存清单更新时间，默认30秒。见EurekaClientConfigBean，其中DefaultEurekaClientConfig可不看（前者spring实现，后者Netflix实现）</span><br>    <span class=\"hljs-attr\">registry-fetch-interval-seconds:</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-comment\"># 如果想eureka server剔除服务后尽快在client体现，我觉得可缩短此时间。</span><br>    <span class=\"hljs-comment\"># 周立在Camden SR4（对应eureka-client.jar1.2.6）中说有该属性，但我在SR6（对应1.2.4）和SR4中都找不到；</span><br>    <span class=\"hljs-comment\"># 又查找了Brixton SR7（对应1.1.7，其实不光eureka-client，整个spring-cloud-netflix都是这个版本），也是没有。</span><br>    <span class=\"hljs-comment\"># 这是因为该属性IDE确实不能提示，但写法是正确的。作用是修改eureka的健康检查方式（心跳），改为用actuator，详见HealthCheckHandler HealthIndicator。</span><br>    <span class=\"hljs-comment\"># 周立写的不是太详细，可详见这博客：https://blog.csdn.net/xiao_jun_0820/article/details/77991963</span><br>    <span class=\"hljs-comment\"># 若配置healthcheck，需引入actuator。</span><br>    <span class=\"hljs-attr\">healthcheck:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 我建议配置为true。心跳机制有个问题，如当客户端的数据库连接出现问题导致不可用时，心跳机制不能反映，但actuator的health可以。</span><br></code></pre></td></tr></table></figure>\n<p>最后可以通过<code>DiscoveryClient</code>对象，在日志中打印出服务实例的相关内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestController</span> &#123;<br>\t<span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> DiscoveryClient discoveryClient;<br><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/getDiscoveryClient&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> List&lt;ServiceInstance&gt; <span class=\"hljs-title function_\">getDiscoveryClient</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> discoveryClient.getInstances(<span class=\"hljs-string\">&quot;server-1&quot;</span>);<span class=\"hljs-comment\">//获取客户端实例服务</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/getServices&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title function_\">getServices</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> discoveryClient.getServices();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"【SpringCloud】Feign 总结问题，注意点，性能调优，切换okhttp3","_content":"### Feign常见问题总结\n**FeignClient接口如使用`@PathVariable` ，必须指定value属性**\n```java\n//在一些早期版本中， @PathVariable(\"id\") 中的 \"id\" ，也就是value属性，必须指定，不能省略。\n@FeignClient(\"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/simple/{id}\", method = RequestMethod.GET)\n  public User findById(@PathVariable(\"id\") Long id);\n  ...\n}\n```\n**Java代码自定义Feign Client的注意点与坑**\n```java\n@FeignClient(name = \"microservice-provider-user\", configuration = UserFeignConfig.class)\npublic interface UserFeignClient {\n  @GetMapping(\"/users/{id}\")\n  User findById(@PathVariable(\"id\") Long id);\n}\n\n/**\n * 该Feign Client的配置类，注意：\n * 1. 该类可以独立出去；\n * 2. 该类上也可添加@Configuration声明是一个配置类；\n * 配置类上也可添加@Configuration注解，声明这是一个配置类；\n * 但此时千万别将该放置在主应用程序上下文@ComponentScan所扫描的包中，\n * 否则，该配置将会被所有Feign Client共享，无法实现细粒度配置！\n * 个人建议：像我一样，不加@Configuration注解\n *\n * @author zhouli\n */\nclass UserFeignConfig {\n  @Bean\n  public Logger.Level logger() {\n    return Logger.Level.FULL;\n  }\n}\n```\n- 配置类上也可添加@Configuraiton 注解，声明这是一个配置类；但此时千万别将该放置在主应用程序上下文@ComponentScan 所扫描的包中，否则，该配置将会被所有Feign Client共享（相当于变成了通用配置，其实本质还是Spring父子上下文扫描包重叠导致的问题），无法实现细粒度配置！\n- **个人建议：**像我一样，不加@Configuration注解，省得进坑。\n- **最佳实践：**尽量用配置属性自定义Feign的配置！！！\n\n**@FeignClient 注解属性**\n```java\n//@FeignClient(name = \"microservice-provider-user\")\n//在早期的Spring Cloud版本中，无需提供name属性，从Brixton版开始，@FeignClient必须提供name属性，否则应用将无法正常启动！\n//另外，name、url等属性支持占位符。例如：\n@FeignClient(name = \"${feign.name}\", url = \"${feign.url}\")\n```\n**类级别的@RequestMapping会被Spring MVC加载**\n```java\n@RequestMapping(\"/users\")\n@FeignClient(name = \"microservice-user\")\npublic class TestFeignClient {\n    // ...\n}\n```\n类上的`@RequestMapping` 注解也会被Spring MVC加载。该问题现已经被解决，早期的版本有两种解决方案：\n**方案1：**不在类上加@RequestMapping 注解；\n**方案2：**添加如下代码：\n```java\n@Configuration\n@ConditionalOnClass({ Feign.class })\npublic class FeignMappingDefaultConfiguration {\n    @Bean\n    public WebMvcRegistrations feignWebRegistrations() {\n        return new WebMvcRegistrationsAdapter() {\n            @Override\n            public RequestMappingHandlerMapping getRequestMappingHandlerMapping() {\n                return new FeignFilterRequestMappingHandlerMapping();\n            }\n        };\n    }\n\n    private static class FeignFilterRequestMappingHandlerMapping extends RequestMappingHandlerMapping {\n        @Override\n        protected boolean isHandler(Class<?> beanType) {\n            return super.isHandler(beanType) && !beanType.isInterface();\n        }\n    }\n}\n```\n**首次请求失败**\nRibbon的饥饿加载(eager-load)模式\n\n**如需产生Hystrix Stream监控信息，需要做一些额外操作**\nFeign本身已经整合了Hystrix，可直接使用`@FeignClient(value = \"microservice-provider-user\", fallback = XXX.class)` 来指定fallback类，fallback类继承`@FeignClient`所标注的接口即可。\n\n但是假设如需使用Hystrix Stream进行监控，默认情况下，访问http://IP:PORT/actuator/hystrix.stream 是会返回404，这是因为Feign虽然整合了Hystrix，但并没有整合Hystrix的监控。如何添加监控支持呢？需要以下几步：\n\n第一步：添加依赖，示例：\n```pom\n<!-- 整合hystrix，其实feign中自带了hystrix，引入该依赖主要是为了使用其中的hystrix-metrics-event-stream，用于dashboard -->\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-hystrix</artifactId>\n</dependency>\n```\n第二步：在启动类上添加@EnableCircuitBreaker 注解，示例：\n```java\n@SpringBootApplication\n@EnableFeignClients\n@EnableDiscoveryClient\n@EnableCircuitBreaker\npublic class MovieFeignHystrixApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(MovieFeignHystrixApplication.class, args);\n  }\n}\n```\n第三步：在application.yml中添加如下内容，暴露hystrix.stream端点：\n```yml\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: 'hystrix.stream'\n```\n这样，访问任意Feign Client接口的API后，再访问http://IP:PORT/actuator/hystrix.stream ，就会展示一大堆Hystrix监控数据了。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/feign-problems/\n\n#### Feign 上传文件\n**加依赖**\n```pom\n<dependency>\n    <groupId>io.github.openfeign.form</groupId>\n    <artifactId>feign-form</artifactId>\n\t<version>3.0.3</version>\n</dependency>\n<dependency>\n\t<groupId>io.github.openfeign.form</groupId>\n\t<artifactId>feign-form-spring</artifactId>\n\t<version>3.0.3</version>\n</dependency>\n```\n**编写Feign Client**\n```java\n@FeignClient(name = \"ms-content-sample\", configuration = UploadFeignClient.MultipartSupportConfig.class)\npublic interface UploadFeignClient {\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST,\n            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE},\n            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n    @ResponseBody\n    String handleFileUpload(@RequestPart(value = \"file\") MultipartFile file);\n\n    class MultipartSupportConfig {\n        @Bean\n        public Encoder feignFormEncoder() {\n            return new SpringFormEncoder();\n        }\n    }\n}\n```\n如代码所示，在这个Feign Client中，我们引用了配置类`MultipartSupportConfig` ，在`MultipartSupportConfig` 中，我们实例化了`SpringFormEncoder` 。这样这个Feign Client就能够上传啦。\n**注意点**\n-\n```java\n//RequestMapping注解中的produeces 、consumes 不能少；\n@RequestMapping(value = \"/upload\", method = RequestMethod.POST,\n            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE},\n            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n```\n- 接口定义中的注解`@RequestPart(value = \"file\")` 不能写成`@RequestParam(value = \"file\"）` 。\n- 最好将Hystrix的超时时间设长一点，例如5秒，否则可能文件还没上传完，Hystrix就超时了，从而导致客户端侧的报错。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/\n\n#### Feign实现Form表单提交\n**添加依赖：**\n```pom\n<dependency>\n  <groupId>io.github.openfeign.form</groupId>\n  <artifactId>feign-form</artifactId>\n  <version>3.2.2</version>\n</dependency>\n<dependency>\n  <groupId>io.github.openfeign.form</groupId>\n  <artifactId>feign-form-spring</artifactId>\n  <version>3.2.2</version>\n</dependency>\n```\n**Feign Client示例：**\n```java\n@FeignClient(name = \"xxx\", url = \"http://www.itmuch.com/\", configuration = TestFeignClient.FormSupportConfig.class)\npublic interface TestFeignClient {\n    @PostMapping(value = \"/test\",\n            consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE},\n            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE}\n            )\n    void post(Map<String, ?> queryParam);\n\n    class FormSupportConfig {\n        @Autowired\n        private ObjectFactory<HttpMessageConverters> messageConverters;\n        // new一个form编码器，实现支持form表单提交\n        @Bean\n        public Encoder feignFormEncoder() {\n            return new SpringFormEncoder(new SpringEncoder(messageConverters));\n        }\n        // 开启Feign的日志\n        @Bean\n        public Logger.Level logger() {\n            return Logger.Level.FULL;\n        }\n    }\n}\n```\n**调用示例：**\n```java\n@GetMapping(\"/user/{id}\")\npublic User findById(@PathVariable Long id) {\n  HashMap<String, String> param = Maps.newHashMap();\n  param.put(\"username\",\"zhangsan\");\n  param.put(\"password\",\"pwd\");\n  this.testFeignClient.post(param);\n  return new User();\n}\n```\n**日志：**\n```code\n...[TestFeignClient#post] ---> POST http://www.baidu.com/test HTTP/1.1\n...[TestFeignClient#post] Accept: application/json;charset=UTF-8\n...[TestFeignClient#post] Content-Type: application/x-www-form-urlencoded; charset=UTF-8\n...[TestFeignClient#post] Content-Length: 30\n...[TestFeignClient#post]\n...[TestFeignClient#post] password=pwd&username=zhangsan\n...[TestFeignClient#post] ---> END HTTP (30-byte body)\n```\n由日志可知，此时Feign已能使用Form表单方式提交数据。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/feign-form-params/\n\n### Feign GET请求如何构造多参数\n假设需请求的URL包含多个参数，例如http://microservice-provider-user/get?id=1&username=张三 ，该如何使用Feign构造呢？\n我们知道，Spring Cloud为Feign添加了Spring MVC的注解支持，那么我们不妨按照Spring MVC的写法尝试一下：\n```java\n@FeignClient(\"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/get\", method = RequestMethod.GET)\n  public User get0(User user);\n}\n```\n然而，这种写法并不正确，控制台会输出类似如下的异常。\n```code\nfeign.FeignException: status 405 reading UserFeignClient#get0(User); content:\n{\"timestamp\":1482676142940,\"status\":405,\"error\":\"Method Not Allowed\",\"exception\":\"org.springframework.web.HttpRequestMethodNotSupportedException\",\"message\":\"Request method 'POST' not supported\",\"path\":\"/get\"}\n```\n由异常可知，尽管我们指定了GET方法，Feign依然会使用POST方法发送请求。于是导致了异常。正确写法如下\n\n**方法一[推荐]**\n**注意:使用该方法无法使用Fegin的继承模式**\n```java\n@FeignClient(\"microservice-provider-user\")\npublic interface UserFeignClient {\n  @GetMapping(\"/get\")\n  public User get0(@SpringQueryMap User user);\n}\n```\n**方法二[推荐]**\n```java\n@FeignClient(name = \"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/get\", method = RequestMethod.GET)\n  public User get1(@RequestParam(\"id\") Long id, @RequestParam(\"username\") String username);\n}\n```\n这是最为直观的方式，URL有几个参数，Feign接口中的方法就有几个参数。使用@RequestParam注解指定请求的参数是什么。\n\n**方法三[不推荐]**\n多参数的URL也可使用Map来构建。当目标URL参数非常多的时候，可使用这种方式简化Feign接口的编写。\n```java\n@FeignClient(name = \"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/get\", method = RequestMethod.GET)\n  public User get2(@RequestParam Map<String, Object> map);\n}\n```\n在调用时，可使用类似以下的代码。\n```java\npublic User get(String username, String password) {\n  HashMap<String, Object> map = Maps.newHashMap();\n  map.put(\"id\", \"1\");\n  map.put(\"username\", \"张三\");\n  return this.userFeignClient.get2(map);\n}\n```\n**注意：**这种方式不建议使用。主要是因为可读性不好，而且如果参数为空的时候会有一些问题，例如`map.put(\"username\", null);` 会导致服务调用方（消费者服务）接收到的username是\"\" ，而不是null。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/\n\n### 切换为 Okhttp3 提升 QPS 性能优化\n**加依赖引入okhttp3**\n```pom\n<dependency>\n\t<groupId>io.github.openfeign</groupId>\n\t<artifactId>feign-okhttp</artifactId>\n\t<version>${version}</version>\n</dependency>\n```\n**写配置**\n```yml\nfeign:\n  # feign启用hystrix，才能熔断、降级\n  # hystrix:\n  # enabled: true\n  # 启用 okhttp 关闭默认 httpclient\n  httpclient:\n    enabled: false #关闭httpclient\n\t# 配置连接池\n    max-connections: 200 #feign的最大连接数\n    max-connections-per-route: 50 #fegin单个路径的最大连接数\n  okhttp:\n    enabled: true\n  # 请求与响应的压缩以提高通信效率\n  compression:\n    request:\n      enabled: true\n      min-request-size: 2048\n      mime-types: text/xml,application/xml,application/json\n    response:\n      enabled: true\n```\n**参数配置**\n```java\n/**\n * 配置 okhttp 与连接池\n * ConnectionPool 默认创建5个线程，保持5分钟长连接\n */\n@Configuration\n@ConditionalOnClass(Feign.class)\n@AutoConfigureBefore(FeignAutoConfiguration.class) //SpringBoot自动配置\npublic class OkHttpConfig {\n\n    // 默认老外留给你彩蛋中文乱码，加上它就 OK\n    @Bean\n    public Encoder encoder() {\n        return new FormEncoder();\n    }\n\n    @Bean\n    public okhttp3.OkHttpClient okHttpClient() {\n        return new okhttp3.OkHttpClient.Builder()\n                //设置连接超时\n                .connectTimeout(10, TimeUnit.SECONDS)\n                //设置读超时\n                .readTimeout(10, TimeUnit.SECONDS)\n                //设置写超时\n                .writeTimeout(10, TimeUnit.SECONDS)\n                //是否自动重连\n                .retryOnConnectionFailure(true)\n                .connectionPool(new ConnectionPool(10, 5L, TimeUnit.MINUTES))\n                .build();\n    }\n}\n```\n原文链接：https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ\n\n","source":"_posts/SpringCloud/【SpringCloud】Feign 总结问题，注意点，性能调优，切换okhttp3.md","raw":"---\ntitle: 【SpringCloud】Feign 总结问题，注意点，性能调优，切换okhttp3\ntags:\n  - SpringCloud\n  - Feign\n  - okhttp\ncategories:\n  - SpringCloud\n---\n### Feign常见问题总结\n**FeignClient接口如使用`@PathVariable` ，必须指定value属性**\n```java\n//在一些早期版本中， @PathVariable(\"id\") 中的 \"id\" ，也就是value属性，必须指定，不能省略。\n@FeignClient(\"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/simple/{id}\", method = RequestMethod.GET)\n  public User findById(@PathVariable(\"id\") Long id);\n  ...\n}\n```\n**Java代码自定义Feign Client的注意点与坑**\n```java\n@FeignClient(name = \"microservice-provider-user\", configuration = UserFeignConfig.class)\npublic interface UserFeignClient {\n  @GetMapping(\"/users/{id}\")\n  User findById(@PathVariable(\"id\") Long id);\n}\n\n/**\n * 该Feign Client的配置类，注意：\n * 1. 该类可以独立出去；\n * 2. 该类上也可添加@Configuration声明是一个配置类；\n * 配置类上也可添加@Configuration注解，声明这是一个配置类；\n * 但此时千万别将该放置在主应用程序上下文@ComponentScan所扫描的包中，\n * 否则，该配置将会被所有Feign Client共享，无法实现细粒度配置！\n * 个人建议：像我一样，不加@Configuration注解\n *\n * @author zhouli\n */\nclass UserFeignConfig {\n  @Bean\n  public Logger.Level logger() {\n    return Logger.Level.FULL;\n  }\n}\n```\n- 配置类上也可添加@Configuraiton 注解，声明这是一个配置类；但此时千万别将该放置在主应用程序上下文@ComponentScan 所扫描的包中，否则，该配置将会被所有Feign Client共享（相当于变成了通用配置，其实本质还是Spring父子上下文扫描包重叠导致的问题），无法实现细粒度配置！\n- **个人建议：**像我一样，不加@Configuration注解，省得进坑。\n- **最佳实践：**尽量用配置属性自定义Feign的配置！！！\n\n**@FeignClient 注解属性**\n```java\n//@FeignClient(name = \"microservice-provider-user\")\n//在早期的Spring Cloud版本中，无需提供name属性，从Brixton版开始，@FeignClient必须提供name属性，否则应用将无法正常启动！\n//另外，name、url等属性支持占位符。例如：\n@FeignClient(name = \"${feign.name}\", url = \"${feign.url}\")\n```\n**类级别的@RequestMapping会被Spring MVC加载**\n```java\n@RequestMapping(\"/users\")\n@FeignClient(name = \"microservice-user\")\npublic class TestFeignClient {\n    // ...\n}\n```\n类上的`@RequestMapping` 注解也会被Spring MVC加载。该问题现已经被解决，早期的版本有两种解决方案：\n**方案1：**不在类上加@RequestMapping 注解；\n**方案2：**添加如下代码：\n```java\n@Configuration\n@ConditionalOnClass({ Feign.class })\npublic class FeignMappingDefaultConfiguration {\n    @Bean\n    public WebMvcRegistrations feignWebRegistrations() {\n        return new WebMvcRegistrationsAdapter() {\n            @Override\n            public RequestMappingHandlerMapping getRequestMappingHandlerMapping() {\n                return new FeignFilterRequestMappingHandlerMapping();\n            }\n        };\n    }\n\n    private static class FeignFilterRequestMappingHandlerMapping extends RequestMappingHandlerMapping {\n        @Override\n        protected boolean isHandler(Class<?> beanType) {\n            return super.isHandler(beanType) && !beanType.isInterface();\n        }\n    }\n}\n```\n**首次请求失败**\nRibbon的饥饿加载(eager-load)模式\n\n**如需产生Hystrix Stream监控信息，需要做一些额外操作**\nFeign本身已经整合了Hystrix，可直接使用`@FeignClient(value = \"microservice-provider-user\", fallback = XXX.class)` 来指定fallback类，fallback类继承`@FeignClient`所标注的接口即可。\n\n但是假设如需使用Hystrix Stream进行监控，默认情况下，访问http://IP:PORT/actuator/hystrix.stream 是会返回404，这是因为Feign虽然整合了Hystrix，但并没有整合Hystrix的监控。如何添加监控支持呢？需要以下几步：\n\n第一步：添加依赖，示例：\n```pom\n<!-- 整合hystrix，其实feign中自带了hystrix，引入该依赖主要是为了使用其中的hystrix-metrics-event-stream，用于dashboard -->\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-hystrix</artifactId>\n</dependency>\n```\n第二步：在启动类上添加@EnableCircuitBreaker 注解，示例：\n```java\n@SpringBootApplication\n@EnableFeignClients\n@EnableDiscoveryClient\n@EnableCircuitBreaker\npublic class MovieFeignHystrixApplication {\n  public static void main(String[] args) {\n    SpringApplication.run(MovieFeignHystrixApplication.class, args);\n  }\n}\n```\n第三步：在application.yml中添加如下内容，暴露hystrix.stream端点：\n```yml\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: 'hystrix.stream'\n```\n这样，访问任意Feign Client接口的API后，再访问http://IP:PORT/actuator/hystrix.stream ，就会展示一大堆Hystrix监控数据了。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/feign-problems/\n\n#### Feign 上传文件\n**加依赖**\n```pom\n<dependency>\n    <groupId>io.github.openfeign.form</groupId>\n    <artifactId>feign-form</artifactId>\n\t<version>3.0.3</version>\n</dependency>\n<dependency>\n\t<groupId>io.github.openfeign.form</groupId>\n\t<artifactId>feign-form-spring</artifactId>\n\t<version>3.0.3</version>\n</dependency>\n```\n**编写Feign Client**\n```java\n@FeignClient(name = \"ms-content-sample\", configuration = UploadFeignClient.MultipartSupportConfig.class)\npublic interface UploadFeignClient {\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST,\n            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE},\n            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n    @ResponseBody\n    String handleFileUpload(@RequestPart(value = \"file\") MultipartFile file);\n\n    class MultipartSupportConfig {\n        @Bean\n        public Encoder feignFormEncoder() {\n            return new SpringFormEncoder();\n        }\n    }\n}\n```\n如代码所示，在这个Feign Client中，我们引用了配置类`MultipartSupportConfig` ，在`MultipartSupportConfig` 中，我们实例化了`SpringFormEncoder` 。这样这个Feign Client就能够上传啦。\n**注意点**\n-\n```java\n//RequestMapping注解中的produeces 、consumes 不能少；\n@RequestMapping(value = \"/upload\", method = RequestMethod.POST,\n            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE},\n            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n```\n- 接口定义中的注解`@RequestPart(value = \"file\")` 不能写成`@RequestParam(value = \"file\"）` 。\n- 最好将Hystrix的超时时间设长一点，例如5秒，否则可能文件还没上传完，Hystrix就超时了，从而导致客户端侧的报错。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/\n\n#### Feign实现Form表单提交\n**添加依赖：**\n```pom\n<dependency>\n  <groupId>io.github.openfeign.form</groupId>\n  <artifactId>feign-form</artifactId>\n  <version>3.2.2</version>\n</dependency>\n<dependency>\n  <groupId>io.github.openfeign.form</groupId>\n  <artifactId>feign-form-spring</artifactId>\n  <version>3.2.2</version>\n</dependency>\n```\n**Feign Client示例：**\n```java\n@FeignClient(name = \"xxx\", url = \"http://www.itmuch.com/\", configuration = TestFeignClient.FormSupportConfig.class)\npublic interface TestFeignClient {\n    @PostMapping(value = \"/test\",\n            consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE},\n            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE}\n            )\n    void post(Map<String, ?> queryParam);\n\n    class FormSupportConfig {\n        @Autowired\n        private ObjectFactory<HttpMessageConverters> messageConverters;\n        // new一个form编码器，实现支持form表单提交\n        @Bean\n        public Encoder feignFormEncoder() {\n            return new SpringFormEncoder(new SpringEncoder(messageConverters));\n        }\n        // 开启Feign的日志\n        @Bean\n        public Logger.Level logger() {\n            return Logger.Level.FULL;\n        }\n    }\n}\n```\n**调用示例：**\n```java\n@GetMapping(\"/user/{id}\")\npublic User findById(@PathVariable Long id) {\n  HashMap<String, String> param = Maps.newHashMap();\n  param.put(\"username\",\"zhangsan\");\n  param.put(\"password\",\"pwd\");\n  this.testFeignClient.post(param);\n  return new User();\n}\n```\n**日志：**\n```code\n...[TestFeignClient#post] ---> POST http://www.baidu.com/test HTTP/1.1\n...[TestFeignClient#post] Accept: application/json;charset=UTF-8\n...[TestFeignClient#post] Content-Type: application/x-www-form-urlencoded; charset=UTF-8\n...[TestFeignClient#post] Content-Length: 30\n...[TestFeignClient#post]\n...[TestFeignClient#post] password=pwd&username=zhangsan\n...[TestFeignClient#post] ---> END HTTP (30-byte body)\n```\n由日志可知，此时Feign已能使用Form表单方式提交数据。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/feign-form-params/\n\n### Feign GET请求如何构造多参数\n假设需请求的URL包含多个参数，例如http://microservice-provider-user/get?id=1&username=张三 ，该如何使用Feign构造呢？\n我们知道，Spring Cloud为Feign添加了Spring MVC的注解支持，那么我们不妨按照Spring MVC的写法尝试一下：\n```java\n@FeignClient(\"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/get\", method = RequestMethod.GET)\n  public User get0(User user);\n}\n```\n然而，这种写法并不正确，控制台会输出类似如下的异常。\n```code\nfeign.FeignException: status 405 reading UserFeignClient#get0(User); content:\n{\"timestamp\":1482676142940,\"status\":405,\"error\":\"Method Not Allowed\",\"exception\":\"org.springframework.web.HttpRequestMethodNotSupportedException\",\"message\":\"Request method 'POST' not supported\",\"path\":\"/get\"}\n```\n由异常可知，尽管我们指定了GET方法，Feign依然会使用POST方法发送请求。于是导致了异常。正确写法如下\n\n**方法一[推荐]**\n**注意:使用该方法无法使用Fegin的继承模式**\n```java\n@FeignClient(\"microservice-provider-user\")\npublic interface UserFeignClient {\n  @GetMapping(\"/get\")\n  public User get0(@SpringQueryMap User user);\n}\n```\n**方法二[推荐]**\n```java\n@FeignClient(name = \"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/get\", method = RequestMethod.GET)\n  public User get1(@RequestParam(\"id\") Long id, @RequestParam(\"username\") String username);\n}\n```\n这是最为直观的方式，URL有几个参数，Feign接口中的方法就有几个参数。使用@RequestParam注解指定请求的参数是什么。\n\n**方法三[不推荐]**\n多参数的URL也可使用Map来构建。当目标URL参数非常多的时候，可使用这种方式简化Feign接口的编写。\n```java\n@FeignClient(name = \"microservice-provider-user\")\npublic interface UserFeignClient {\n  @RequestMapping(value = \"/get\", method = RequestMethod.GET)\n  public User get2(@RequestParam Map<String, Object> map);\n}\n```\n在调用时，可使用类似以下的代码。\n```java\npublic User get(String username, String password) {\n  HashMap<String, Object> map = Maps.newHashMap();\n  map.put(\"id\", \"1\");\n  map.put(\"username\", \"张三\");\n  return this.userFeignClient.get2(map);\n}\n```\n**注意：**这种方式不建议使用。主要是因为可读性不好，而且如果参数为空的时候会有一些问题，例如`map.put(\"username\", null);` 会导致服务调用方（消费者服务）接收到的username是\"\" ，而不是null。\n\n原文链接：http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/\n\n### 切换为 Okhttp3 提升 QPS 性能优化\n**加依赖引入okhttp3**\n```pom\n<dependency>\n\t<groupId>io.github.openfeign</groupId>\n\t<artifactId>feign-okhttp</artifactId>\n\t<version>${version}</version>\n</dependency>\n```\n**写配置**\n```yml\nfeign:\n  # feign启用hystrix，才能熔断、降级\n  # hystrix:\n  # enabled: true\n  # 启用 okhttp 关闭默认 httpclient\n  httpclient:\n    enabled: false #关闭httpclient\n\t# 配置连接池\n    max-connections: 200 #feign的最大连接数\n    max-connections-per-route: 50 #fegin单个路径的最大连接数\n  okhttp:\n    enabled: true\n  # 请求与响应的压缩以提高通信效率\n  compression:\n    request:\n      enabled: true\n      min-request-size: 2048\n      mime-types: text/xml,application/xml,application/json\n    response:\n      enabled: true\n```\n**参数配置**\n```java\n/**\n * 配置 okhttp 与连接池\n * ConnectionPool 默认创建5个线程，保持5分钟长连接\n */\n@Configuration\n@ConditionalOnClass(Feign.class)\n@AutoConfigureBefore(FeignAutoConfiguration.class) //SpringBoot自动配置\npublic class OkHttpConfig {\n\n    // 默认老外留给你彩蛋中文乱码，加上它就 OK\n    @Bean\n    public Encoder encoder() {\n        return new FormEncoder();\n    }\n\n    @Bean\n    public okhttp3.OkHttpClient okHttpClient() {\n        return new okhttp3.OkHttpClient.Builder()\n                //设置连接超时\n                .connectTimeout(10, TimeUnit.SECONDS)\n                //设置读超时\n                .readTimeout(10, TimeUnit.SECONDS)\n                //设置写超时\n                .writeTimeout(10, TimeUnit.SECONDS)\n                //是否自动重连\n                .retryOnConnectionFailure(true)\n                .connectionPool(new ConnectionPool(10, 5L, TimeUnit.MINUTES))\n                .build();\n    }\n}\n```\n原文链接：https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ\n\n","slug":"SpringCloud/【SpringCloud】Feign 总结问题，注意点，性能调优，切换okhttp3","published":1,"date":"2022-11-28T10:54:23.534Z","updated":"2022-11-28T10:57:23.997Z","_id":"clb0oel8200036oia0y8afc2e","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Feign常见问题总结\"><a href=\"#Feign常见问题总结\" class=\"headerlink\" title=\"Feign常见问题总结\"></a>Feign常见问题总结</h3><p><strong>FeignClient接口如使用<code>@PathVariable</code> ，必须指定value属性</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在一些早期版本中， @PathVariable(&quot;id&quot;) 中的 &quot;id&quot; ，也就是value属性，必须指定，不能省略。</span><br><span class=\"hljs-meta\">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/simple/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Java代码自定义Feign Client的注意点与坑</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-provider-user&quot;, configuration = UserFeignConfig.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span><br>  User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 该Feign Client的配置类，注意：</span><br><span class=\"hljs-comment\"> * 1. 该类可以独立出去；</span><br><span class=\"hljs-comment\"> * 2. 该类上也可添加<span class=\"hljs-doctag\">@Configuration</span>声明是一个配置类；</span><br><span class=\"hljs-comment\"> * 配置类上也可添加<span class=\"hljs-doctag\">@Configuration</span>注解，声明这是一个配置类；</span><br><span class=\"hljs-comment\"> * 但此时千万别将该放置在主应用程序上下文<span class=\"hljs-doctag\">@ComponentScan</span>所扫描的包中，</span><br><span class=\"hljs-comment\"> * 否则，该配置将会被所有Feign Client共享，无法实现细粒度配置！</span><br><span class=\"hljs-comment\"> * 个人建议：像我一样，不加<span class=\"hljs-doctag\">@Configuration</span>注解</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zhouli</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserFeignConfig</span> &#123;<br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-keyword\">public</span> Logger.Level <span class=\"hljs-title function_\">logger</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> Logger.Level.FULL;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>配置类上也可添加@Configuraiton 注解，声明这是一个配置类；但此时千万别将该放置在主应用程序上下文@ComponentScan 所扫描的包中，否则，该配置将会被所有Feign Client共享（相当于变成了通用配置，其实本质还是Spring父子上下文扫描包重叠导致的问题），无法实现细粒度配置！</li>\n<li><strong>个人建议：</strong>像我一样，不加@Configuration注解，省得进坑。</li>\n<li><strong>最佳实践：</strong>尽量用配置属性自定义Feign的配置！！！</li>\n</ul>\n<p><strong>@FeignClient 注解属性</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-comment\">//在早期的Spring Cloud版本中，无需提供name属性，从Brixton版开始，@FeignClient必须提供name属性，否则应用将无法正常启动！</span><br><span class=\"hljs-comment\">//另外，name、url等属性支持占位符。例如：</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;$&#123;feign.name&#125;&quot;, url = &quot;$&#123;feign.url&#125;&quot;)</span><br></code></pre></td></tr></table></figure>\n<p><strong>类级别的@RequestMapping会被Spring MVC加载</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RequestMapping(&quot;/users&quot;)</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestFeignClient</span> &#123;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>类上的<code>@RequestMapping</code> 注解也会被Spring MVC加载。该问题现已经被解决，早期的版本有两种解决方案：<br><strong>方案1：</strong>不在类上加@RequestMapping 注解；<br><strong>方案2：</strong>添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConditionalOnClass(&#123; Feign.class &#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeignMappingDefaultConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> WebMvcRegistrations <span class=\"hljs-title function_\">feignWebRegistrations</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebMvcRegistrationsAdapter</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> RequestMappingHandlerMapping <span class=\"hljs-title function_\">getRequestMappingHandlerMapping</span><span class=\"hljs-params\">()</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FeignFilterRequestMappingHandlerMapping</span>();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeignFilterRequestMappingHandlerMapping</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RequestMappingHandlerMapping</span> &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isHandler</span><span class=\"hljs-params\">(Class&lt;?&gt; beanType)</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.isHandler(beanType) &amp;&amp; !beanType.isInterface();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>首次请求失败</strong><br>Ribbon的饥饿加载(eager-load)模式</p>\n<p><strong>如需产生Hystrix Stream监控信息，需要做一些额外操作</strong><br>Feign本身已经整合了Hystrix，可直接使用<code>@FeignClient(value = &quot;microservice-provider-user&quot;, fallback = XXX.class)</code> 来指定fallback类，fallback类继承<code>@FeignClient</code>所标注的接口即可。</p>\n<p>但是假设如需使用Hystrix Stream进行监控，默认情况下，访问<a href=\"http://IP:PORT/actuator/hystrix.stream\">http://IP:PORT/actuator/hystrix.stream</a> 是会返回404，这是因为Feign虽然整合了Hystrix，但并没有整合Hystrix的监控。如何添加监控支持呢？需要以下几步：</p>\n<p>第一步：添加依赖，示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 整合hystrix，其实feign中自带了hystrix，引入该依赖主要是为了使用其中的hystrix-metrics-event-stream，用于dashboard --&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p>第二步：在启动类上添加@EnableCircuitBreaker 注解，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-meta\">@EnableFeignClients</span><br><span class=\"hljs-meta\">@EnableDiscoveryClient</span><br><span class=\"hljs-meta\">@EnableCircuitBreaker</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MovieFeignHystrixApplication</span> &#123;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    SpringApplication.run(MovieFeignHystrixApplication.class, args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第三步：在application.yml中添加如下内容，暴露hystrix.stream端点：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">management:</span><br>  <span class=\"hljs-attr\">endpoints:</span><br>    <span class=\"hljs-attr\">web:</span><br>      <span class=\"hljs-attr\">exposure:</span><br>        <span class=\"hljs-attr\">include:</span> <span class=\"hljs-string\">&#x27;hystrix.stream&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>这样，访问任意Feign Client接口的API后，再访问<a href=\"http://IP:PORT/actuator/hystrix.stream\">http://IP:PORT/actuator/hystrix.stream</a> ，就会展示一大堆Hystrix监控数据了。</p>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/feign-problems/\">http://www.itmuch.com/spring-cloud-sum/feign-problems/</a></p>\n<h4 id=\"Feign-上传文件\"><a href=\"#Feign-上传文件\" class=\"headerlink\" title=\"Feign 上传文件\"></a>Feign 上传文件</h4><p><strong>加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>    &lt;artifactId&gt;feign-form&lt;/artifactId&gt;<br>\t&lt;version&gt;3.0.3&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>\t&lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;<br>\t&lt;version&gt;3.0.3&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>编写Feign Client</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;ms-content-sample&quot;, configuration = UploadFeignClient.MultipartSupportConfig.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UploadFeignClient</span> &#123;<br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST,</span><br><span class=\"hljs-meta\">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;,</span><br><span class=\"hljs-meta\">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    String <span class=\"hljs-title function_\">handleFileUpload</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestPart(value = &quot;file&quot;)</span> MultipartFile file)</span>;<br><br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MultipartSupportConfig</span> &#123;<br>        <span class=\"hljs-meta\">@Bean</span><br>        <span class=\"hljs-keyword\">public</span> Encoder <span class=\"hljs-title function_\">feignFormEncoder</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpringFormEncoder</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如代码所示，在这个Feign Client中，我们引用了配置类<code>MultipartSupportConfig</code> ，在<code>MultipartSupportConfig</code> 中，我们实例化了<code>SpringFormEncoder</code> 。这样这个Feign Client就能够上传啦。<br><strong>注意点</strong><br>-</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//RequestMapping注解中的produeces 、consumes 不能少；</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST,</span><br><span class=\"hljs-meta\">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;,</span><br><span class=\"hljs-meta\">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>接口定义中的注解<code>@RequestPart(value = &quot;file&quot;)</code> 不能写成<code>@RequestParam(value = &quot;file&quot;）</code> 。</li>\n<li>最好将Hystrix的超时时间设长一点，例如5秒，否则可能文件还没上传完，Hystrix就超时了，从而导致客户端侧的报错。</li>\n</ul>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/\">http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/</a></p>\n<h4 id=\"Feign实现Form表单提交\"><a href=\"#Feign实现Form表单提交\" class=\"headerlink\" title=\"Feign实现Form表单提交\"></a>Feign实现Form表单提交</h4><p><strong>添加依赖：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>  &lt;artifactId&gt;feign-form&lt;/artifactId&gt;<br>  &lt;version&gt;3.2.2&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>  &lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;<br>  &lt;version&gt;3.2.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>Feign Client示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;xxx&quot;, url = &quot;http://www.itmuch.com/&quot;, configuration = TestFeignClient.FormSupportConfig.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">TestFeignClient</span> &#123;<br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/test&quot;,</span><br><span class=\"hljs-meta\">            consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;,</span><br><span class=\"hljs-meta\">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;</span><br><span class=\"hljs-meta\">            )</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">post</span><span class=\"hljs-params\">(Map&lt;String, ?&gt; queryParam)</span>;<br><br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FormSupportConfig</span> &#123;<br>        <span class=\"hljs-meta\">@Autowired</span><br>        <span class=\"hljs-keyword\">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;<br>        <span class=\"hljs-comment\">// new一个form编码器，实现支持form表单提交</span><br>        <span class=\"hljs-meta\">@Bean</span><br>        <span class=\"hljs-keyword\">public</span> Encoder <span class=\"hljs-title function_\">feignFormEncoder</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpringFormEncoder</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpringEncoder</span>(messageConverters));<br>        &#125;<br>        <span class=\"hljs-comment\">// 开启Feign的日志</span><br>        <span class=\"hljs-meta\">@Bean</span><br>        <span class=\"hljs-keyword\">public</span> Logger.Level <span class=\"hljs-title function_\">logger</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> Logger.Level.FULL;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>调用示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> Long id)</span> &#123;<br>  HashMap&lt;String, String&gt; param = Maps.newHashMap();<br>  param.put(<span class=\"hljs-string\">&quot;username&quot;</span>,<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);<br>  param.put(<span class=\"hljs-string\">&quot;password&quot;</span>,<span class=\"hljs-string\">&quot;pwd&quot;</span>);<br>  <span class=\"hljs-built_in\">this</span>.testFeignClient.post(param);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>日志：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs code\">...[TestFeignClient#post] ---&gt; POST http://www.baidu.com/test HTTP/1.1<br>...[TestFeignClient#post] Accept: application/json;charset=UTF-8<br>...[TestFeignClient#post] Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>...[TestFeignClient#post] Content-Length: 30<br>...[TestFeignClient#post]<br>...[TestFeignClient#post] password=pwd&amp;username=zhangsan<br>...[TestFeignClient#post] ---&gt; END HTTP (30-byte body)<br></code></pre></td></tr></table></figure>\n<p>由日志可知，此时Feign已能使用Form表单方式提交数据。</p>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/feign-form-params/\">http://www.itmuch.com/spring-cloud-sum/feign-form-params/</a></p>\n<h3 id=\"Feign-GET请求如何构造多参数\"><a href=\"#Feign-GET请求如何构造多参数\" class=\"headerlink\" title=\"Feign GET请求如何构造多参数\"></a>Feign GET请求如何构造多参数</h3><p>假设需请求的URL包含多个参数，例如<a href=\"http://microservice-provider-user/get?id=1&amp;username=%E5%BC%A0%E4%B8%89\">http://microservice-provider-user/get?id=1&amp;username=张三</a> ，该如何使用Feign构造呢？<br>我们知道，Spring Cloud为Feign添加了Spring MVC的注解支持，那么我们不妨按照Spring MVC的写法尝试一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get0</span><span class=\"hljs-params\">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然而，这种写法并不正确，控制台会输出类似如下的异常。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs code\">feign.FeignException: status 405 reading UserFeignClient#get0(User); content:<br>&#123;&quot;timestamp&quot;:1482676142940,&quot;status&quot;:405,&quot;error&quot;:&quot;Method Not Allowed&quot;,&quot;exception&quot;:&quot;org.springframework.web.HttpRequestMethodNotSupportedException&quot;,&quot;message&quot;:&quot;Request method &#x27;POST&#x27; not supported&quot;,&quot;path&quot;:&quot;/get&quot;&#125;<br></code></pre></td></tr></table></figure>\n<p>由异常可知，尽管我们指定了GET方法，Feign依然会使用POST方法发送请求。于是导致了异常。正确写法如下</p>\n<p><strong>方法一[推荐]</strong><br><strong>注意:使用该方法无法使用Fegin的继承模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@GetMapping(&quot;/get&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get0</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@SpringQueryMap</span> User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>方法二[推荐]</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(&quot;id&quot;)</span> Long id, <span class=\"hljs-meta\">@RequestParam(&quot;username&quot;)</span> String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这是最为直观的方式，URL有几个参数，Feign接口中的方法就有几个参数。使用@RequestParam注解指定请求的参数是什么。</p>\n<p><strong>方法三[不推荐]</strong><br>多参数的URL也可使用Map来构建。当目标URL参数非常多的时候，可使用这种方式简化Feign接口的编写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get2</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam</span> Map&lt;String, Object&gt; map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在调用时，可使用类似以下的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(String username, String password)</span> &#123;<br>  HashMap&lt;String, Object&gt; map = Maps.newHashMap();<br>  map.put(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>  map.put(<span class=\"hljs-string\">&quot;username&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.userFeignClient.get2(map);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>注意：</strong>这种方式不建议使用。主要是因为可读性不好，而且如果参数为空的时候会有一些问题，例如<code>map.put(&quot;username&quot;, null);</code> 会导致服务调用方（消费者服务）接收到的username是”” ，而不是null。</p>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/\">http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/</a></p>\n<h3 id=\"切换为-Okhttp3-提升-QPS-性能优化\"><a href=\"#切换为-Okhttp3-提升-QPS-性能优化\" class=\"headerlink\" title=\"切换为 Okhttp3 提升 QPS 性能优化\"></a>切换为 Okhttp3 提升 QPS 性能优化</h3><p><strong>加依赖引入okhttp3</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;<br>\t&lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;<br>\t&lt;version&gt;$&#123;version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-comment\"># feign启用hystrix，才能熔断、降级</span><br>  <span class=\"hljs-comment\"># hystrix:</span><br>  <span class=\"hljs-comment\"># enabled: true</span><br>  <span class=\"hljs-comment\"># 启用 okhttp 关闭默认 httpclient</span><br>  <span class=\"hljs-attr\">httpclient:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">#关闭httpclient</span><br>\t<span class=\"hljs-comment\"># 配置连接池</span><br>    <span class=\"hljs-attr\">max-connections:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\">#feign的最大连接数</span><br>    <span class=\"hljs-attr\">max-connections-per-route:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\">#fegin单个路径的最大连接数</span><br>  <span class=\"hljs-attr\">okhttp:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-comment\"># 请求与响应的压缩以提高通信效率</span><br>  <span class=\"hljs-attr\">compression:</span><br>    <span class=\"hljs-attr\">request:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">min-request-size:</span> <span class=\"hljs-number\">2048</span><br>      <span class=\"hljs-attr\">mime-types:</span> <span class=\"hljs-string\">text/xml,application/xml,application/json</span><br>    <span class=\"hljs-attr\">response:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n<p><strong>参数配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 配置 okhttp 与连接池</span><br><span class=\"hljs-comment\"> * ConnectionPool 默认创建5个线程，保持5分钟长连接</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConditionalOnClass(Feign.class)</span><br><span class=\"hljs-meta\">@AutoConfigureBefore(FeignAutoConfiguration.class)</span> <span class=\"hljs-comment\">//SpringBoot自动配置</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OkHttpConfig</span> &#123;<br><br>    <span class=\"hljs-comment\">// 默认老外留给你彩蛋中文乱码，加上它就 OK</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Encoder <span class=\"hljs-title function_\">encoder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormEncoder</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> okhttp3.OkHttpClient <span class=\"hljs-title function_\">okHttpClient</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">okhttp3</span>.OkHttpClient.Builder()<br>                <span class=\"hljs-comment\">//设置连接超时</span><br>                .connectTimeout(<span class=\"hljs-number\">10</span>, TimeUnit.SECONDS)<br>                <span class=\"hljs-comment\">//设置读超时</span><br>                .readTimeout(<span class=\"hljs-number\">10</span>, TimeUnit.SECONDS)<br>                <span class=\"hljs-comment\">//设置写超时</span><br>                .writeTimeout(<span class=\"hljs-number\">10</span>, TimeUnit.SECONDS)<br>                <span class=\"hljs-comment\">//是否自动重连</span><br>                .retryOnConnectionFailure(<span class=\"hljs-literal\">true</span>)<br>                .connectionPool(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConnectionPool</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5L</span>, TimeUnit.MINUTES))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ\">https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Feign常见问题总结\"><a href=\"#Feign常见问题总结\" class=\"headerlink\" title=\"Feign常见问题总结\"></a>Feign常见问题总结</h3><p><strong>FeignClient接口如使用<code>@PathVariable</code> ，必须指定value属性</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在一些早期版本中， @PathVariable(&quot;id&quot;) 中的 &quot;id&quot; ，也就是value属性，必须指定，不能省略。</span><br><span class=\"hljs-meta\">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/simple/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Java代码自定义Feign Client的注意点与坑</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-provider-user&quot;, configuration = UserFeignConfig.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span><br>  User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 该Feign Client的配置类，注意：</span><br><span class=\"hljs-comment\"> * 1. 该类可以独立出去；</span><br><span class=\"hljs-comment\"> * 2. 该类上也可添加<span class=\"hljs-doctag\">@Configuration</span>声明是一个配置类；</span><br><span class=\"hljs-comment\"> * 配置类上也可添加<span class=\"hljs-doctag\">@Configuration</span>注解，声明这是一个配置类；</span><br><span class=\"hljs-comment\"> * 但此时千万别将该放置在主应用程序上下文<span class=\"hljs-doctag\">@ComponentScan</span>所扫描的包中，</span><br><span class=\"hljs-comment\"> * 否则，该配置将会被所有Feign Client共享，无法实现细粒度配置！</span><br><span class=\"hljs-comment\"> * 个人建议：像我一样，不加<span class=\"hljs-doctag\">@Configuration</span>注解</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zhouli</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserFeignConfig</span> &#123;<br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-keyword\">public</span> Logger.Level <span class=\"hljs-title function_\">logger</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> Logger.Level.FULL;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>配置类上也可添加@Configuraiton 注解，声明这是一个配置类；但此时千万别将该放置在主应用程序上下文@ComponentScan 所扫描的包中，否则，该配置将会被所有Feign Client共享（相当于变成了通用配置，其实本质还是Spring父子上下文扫描包重叠导致的问题），无法实现细粒度配置！</li>\n<li><strong>个人建议：</strong>像我一样，不加@Configuration注解，省得进坑。</li>\n<li><strong>最佳实践：</strong>尽量用配置属性自定义Feign的配置！！！</li>\n</ul>\n<p><strong>@FeignClient 注解属性</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-comment\">//在早期的Spring Cloud版本中，无需提供name属性，从Brixton版开始，@FeignClient必须提供name属性，否则应用将无法正常启动！</span><br><span class=\"hljs-comment\">//另外，name、url等属性支持占位符。例如：</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;$&#123;feign.name&#125;&quot;, url = &quot;$&#123;feign.url&#125;&quot;)</span><br></code></pre></td></tr></table></figure>\n<p><strong>类级别的@RequestMapping会被Spring MVC加载</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RequestMapping(&quot;/users&quot;)</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestFeignClient</span> &#123;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>类上的<code>@RequestMapping</code> 注解也会被Spring MVC加载。该问题现已经被解决，早期的版本有两种解决方案：<br><strong>方案1：</strong>不在类上加@RequestMapping 注解；<br><strong>方案2：</strong>添加如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConditionalOnClass(&#123; Feign.class &#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeignMappingDefaultConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> WebMvcRegistrations <span class=\"hljs-title function_\">feignWebRegistrations</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebMvcRegistrationsAdapter</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> RequestMappingHandlerMapping <span class=\"hljs-title function_\">getRequestMappingHandlerMapping</span><span class=\"hljs-params\">()</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FeignFilterRequestMappingHandlerMapping</span>();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeignFilterRequestMappingHandlerMapping</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RequestMappingHandlerMapping</span> &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isHandler</span><span class=\"hljs-params\">(Class&lt;?&gt; beanType)</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.isHandler(beanType) &amp;&amp; !beanType.isInterface();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>首次请求失败</strong><br>Ribbon的饥饿加载(eager-load)模式</p>\n<p><strong>如需产生Hystrix Stream监控信息，需要做一些额外操作</strong><br>Feign本身已经整合了Hystrix，可直接使用<code>@FeignClient(value = &quot;microservice-provider-user&quot;, fallback = XXX.class)</code> 来指定fallback类，fallback类继承<code>@FeignClient</code>所标注的接口即可。</p>\n<p>但是假设如需使用Hystrix Stream进行监控，默认情况下，访问<a href=\"http://IP:PORT/actuator/hystrix.stream\">http://IP:PORT/actuator/hystrix.stream</a> 是会返回404，这是因为Feign虽然整合了Hystrix，但并没有整合Hystrix的监控。如何添加监控支持呢？需要以下几步：</p>\n<p>第一步：添加依赖，示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 整合hystrix，其实feign中自带了hystrix，引入该依赖主要是为了使用其中的hystrix-metrics-event-stream，用于dashboard --&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p>第二步：在启动类上添加@EnableCircuitBreaker 注解，示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-meta\">@EnableFeignClients</span><br><span class=\"hljs-meta\">@EnableDiscoveryClient</span><br><span class=\"hljs-meta\">@EnableCircuitBreaker</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MovieFeignHystrixApplication</span> &#123;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    SpringApplication.run(MovieFeignHystrixApplication.class, args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第三步：在application.yml中添加如下内容，暴露hystrix.stream端点：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">management:</span><br>  <span class=\"hljs-attr\">endpoints:</span><br>    <span class=\"hljs-attr\">web:</span><br>      <span class=\"hljs-attr\">exposure:</span><br>        <span class=\"hljs-attr\">include:</span> <span class=\"hljs-string\">&#x27;hystrix.stream&#x27;</span><br></code></pre></td></tr></table></figure>\n<p>这样，访问任意Feign Client接口的API后，再访问<a href=\"http://IP:PORT/actuator/hystrix.stream\">http://IP:PORT/actuator/hystrix.stream</a> ，就会展示一大堆Hystrix监控数据了。</p>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/feign-problems/\">http://www.itmuch.com/spring-cloud-sum/feign-problems/</a></p>\n<h4 id=\"Feign-上传文件\"><a href=\"#Feign-上传文件\" class=\"headerlink\" title=\"Feign 上传文件\"></a>Feign 上传文件</h4><p><strong>加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>    &lt;artifactId&gt;feign-form&lt;/artifactId&gt;<br>\t&lt;version&gt;3.0.3&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>\t&lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;<br>\t&lt;version&gt;3.0.3&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>编写Feign Client</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;ms-content-sample&quot;, configuration = UploadFeignClient.MultipartSupportConfig.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UploadFeignClient</span> &#123;<br>    <span class=\"hljs-meta\">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST,</span><br><span class=\"hljs-meta\">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;,</span><br><span class=\"hljs-meta\">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br>    <span class=\"hljs-meta\">@ResponseBody</span><br>    String <span class=\"hljs-title function_\">handleFileUpload</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestPart(value = &quot;file&quot;)</span> MultipartFile file)</span>;<br><br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MultipartSupportConfig</span> &#123;<br>        <span class=\"hljs-meta\">@Bean</span><br>        <span class=\"hljs-keyword\">public</span> Encoder <span class=\"hljs-title function_\">feignFormEncoder</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpringFormEncoder</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如代码所示，在这个Feign Client中，我们引用了配置类<code>MultipartSupportConfig</code> ，在<code>MultipartSupportConfig</code> 中，我们实例化了<code>SpringFormEncoder</code> 。这样这个Feign Client就能够上传啦。<br><strong>注意点</strong><br>-</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//RequestMapping注解中的produeces 、consumes 不能少；</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST,</span><br><span class=\"hljs-meta\">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;,</span><br><span class=\"hljs-meta\">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>接口定义中的注解<code>@RequestPart(value = &quot;file&quot;)</code> 不能写成<code>@RequestParam(value = &quot;file&quot;）</code> 。</li>\n<li>最好将Hystrix的超时时间设长一点，例如5秒，否则可能文件还没上传完，Hystrix就超时了，从而导致客户端侧的报错。</li>\n</ul>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/\">http://www.itmuch.com/spring-cloud-sum/spring-cloud-feign-upload/</a></p>\n<h4 id=\"Feign实现Form表单提交\"><a href=\"#Feign实现Form表单提交\" class=\"headerlink\" title=\"Feign实现Form表单提交\"></a>Feign实现Form表单提交</h4><p><strong>添加依赖：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>  &lt;artifactId&gt;feign-form&lt;/artifactId&gt;<br>  &lt;version&gt;3.2.2&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.github.openfeign.form&lt;/groupId&gt;<br>  &lt;artifactId&gt;feign-form-spring&lt;/artifactId&gt;<br>  &lt;version&gt;3.2.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>Feign Client示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;xxx&quot;, url = &quot;http://www.itmuch.com/&quot;, configuration = TestFeignClient.FormSupportConfig.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">TestFeignClient</span> &#123;<br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/test&quot;,</span><br><span class=\"hljs-meta\">            consumes = &#123;MediaType.APPLICATION_FORM_URLENCODED_VALUE&#125;,</span><br><span class=\"hljs-meta\">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;</span><br><span class=\"hljs-meta\">            )</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">post</span><span class=\"hljs-params\">(Map&lt;String, ?&gt; queryParam)</span>;<br><br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FormSupportConfig</span> &#123;<br>        <span class=\"hljs-meta\">@Autowired</span><br>        <span class=\"hljs-keyword\">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;<br>        <span class=\"hljs-comment\">// new一个form编码器，实现支持form表单提交</span><br>        <span class=\"hljs-meta\">@Bean</span><br>        <span class=\"hljs-keyword\">public</span> Encoder <span class=\"hljs-title function_\">feignFormEncoder</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpringFormEncoder</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpringEncoder</span>(messageConverters));<br>        &#125;<br>        <span class=\"hljs-comment\">// 开启Feign的日志</span><br>        <span class=\"hljs-meta\">@Bean</span><br>        <span class=\"hljs-keyword\">public</span> Logger.Level <span class=\"hljs-title function_\">logger</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> Logger.Level.FULL;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>调用示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> Long id)</span> &#123;<br>  HashMap&lt;String, String&gt; param = Maps.newHashMap();<br>  param.put(<span class=\"hljs-string\">&quot;username&quot;</span>,<span class=\"hljs-string\">&quot;zhangsan&quot;</span>);<br>  param.put(<span class=\"hljs-string\">&quot;password&quot;</span>,<span class=\"hljs-string\">&quot;pwd&quot;</span>);<br>  <span class=\"hljs-built_in\">this</span>.testFeignClient.post(param);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>日志：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs code\">...[TestFeignClient#post] ---&gt; POST http://www.baidu.com/test HTTP/1.1<br>...[TestFeignClient#post] Accept: application/json;charset=UTF-8<br>...[TestFeignClient#post] Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>...[TestFeignClient#post] Content-Length: 30<br>...[TestFeignClient#post]<br>...[TestFeignClient#post] password=pwd&amp;username=zhangsan<br>...[TestFeignClient#post] ---&gt; END HTTP (30-byte body)<br></code></pre></td></tr></table></figure>\n<p>由日志可知，此时Feign已能使用Form表单方式提交数据。</p>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/feign-form-params/\">http://www.itmuch.com/spring-cloud-sum/feign-form-params/</a></p>\n<h3 id=\"Feign-GET请求如何构造多参数\"><a href=\"#Feign-GET请求如何构造多参数\" class=\"headerlink\" title=\"Feign GET请求如何构造多参数\"></a>Feign GET请求如何构造多参数</h3><p>假设需请求的URL包含多个参数，例如<a href=\"http://microservice-provider-user/get?id=1&amp;username=%E5%BC%A0%E4%B8%89\">http://microservice-provider-user/get?id=1&amp;username=张三</a> ，该如何使用Feign构造呢？<br>我们知道，Spring Cloud为Feign添加了Spring MVC的注解支持，那么我们不妨按照Spring MVC的写法尝试一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get0</span><span class=\"hljs-params\">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然而，这种写法并不正确，控制台会输出类似如下的异常。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs code\">feign.FeignException: status 405 reading UserFeignClient#get0(User); content:<br>&#123;&quot;timestamp&quot;:1482676142940,&quot;status&quot;:405,&quot;error&quot;:&quot;Method Not Allowed&quot;,&quot;exception&quot;:&quot;org.springframework.web.HttpRequestMethodNotSupportedException&quot;,&quot;message&quot;:&quot;Request method &#x27;POST&#x27; not supported&quot;,&quot;path&quot;:&quot;/get&quot;&#125;<br></code></pre></td></tr></table></figure>\n<p>由异常可知，尽管我们指定了GET方法，Feign依然会使用POST方法发送请求。于是导致了异常。正确写法如下</p>\n<p><strong>方法一[推荐]</strong><br><strong>注意:使用该方法无法使用Fegin的继承模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(&quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@GetMapping(&quot;/get&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get0</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@SpringQueryMap</span> User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>方法二[推荐]</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(&quot;id&quot;)</span> Long id, <span class=\"hljs-meta\">@RequestParam(&quot;username&quot;)</span> String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这是最为直观的方式，URL有几个参数，Feign接口中的方法就有几个参数。使用@RequestParam注解指定请求的参数是什么。</p>\n<p><strong>方法三[不推荐]</strong><br>多参数的URL也可使用Map来构建。当目标URL参数非常多的时候，可使用这种方式简化Feign接口的编写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FeignClient(name = &quot;microservice-provider-user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserFeignClient</span> &#123;<br>  <span class=\"hljs-meta\">@RequestMapping(value = &quot;/get&quot;, method = RequestMethod.GET)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get2</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam</span> Map&lt;String, Object&gt; map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在调用时，可使用类似以下的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(String username, String password)</span> &#123;<br>  HashMap&lt;String, Object&gt; map = Maps.newHashMap();<br>  map.put(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>  map.put(<span class=\"hljs-string\">&quot;username&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.userFeignClient.get2(map);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>注意：</strong>这种方式不建议使用。主要是因为可读性不好，而且如果参数为空的时候会有一些问题，例如<code>map.put(&quot;username&quot;, null);</code> 会导致服务调用方（消费者服务）接收到的username是”” ，而不是null。</p>\n<p>原文链接：<a href=\"http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/\">http://www.itmuch.com/spring-cloud-sum/feign-multiple-params-2/</a></p>\n<h3 id=\"切换为-Okhttp3-提升-QPS-性能优化\"><a href=\"#切换为-Okhttp3-提升-QPS-性能优化\" class=\"headerlink\" title=\"切换为 Okhttp3 提升 QPS 性能优化\"></a>切换为 Okhttp3 提升 QPS 性能优化</h3><p><strong>加依赖引入okhttp3</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;<br>\t&lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;<br>\t&lt;version&gt;$&#123;version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-comment\"># feign启用hystrix，才能熔断、降级</span><br>  <span class=\"hljs-comment\"># hystrix:</span><br>  <span class=\"hljs-comment\"># enabled: true</span><br>  <span class=\"hljs-comment\"># 启用 okhttp 关闭默认 httpclient</span><br>  <span class=\"hljs-attr\">httpclient:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">#关闭httpclient</span><br>\t<span class=\"hljs-comment\"># 配置连接池</span><br>    <span class=\"hljs-attr\">max-connections:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\">#feign的最大连接数</span><br>    <span class=\"hljs-attr\">max-connections-per-route:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\">#fegin单个路径的最大连接数</span><br>  <span class=\"hljs-attr\">okhttp:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-comment\"># 请求与响应的压缩以提高通信效率</span><br>  <span class=\"hljs-attr\">compression:</span><br>    <span class=\"hljs-attr\">request:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">min-request-size:</span> <span class=\"hljs-number\">2048</span><br>      <span class=\"hljs-attr\">mime-types:</span> <span class=\"hljs-string\">text/xml,application/xml,application/json</span><br>    <span class=\"hljs-attr\">response:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n<p><strong>参数配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 配置 okhttp 与连接池</span><br><span class=\"hljs-comment\"> * ConnectionPool 默认创建5个线程，保持5分钟长连接</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ConditionalOnClass(Feign.class)</span><br><span class=\"hljs-meta\">@AutoConfigureBefore(FeignAutoConfiguration.class)</span> <span class=\"hljs-comment\">//SpringBoot自动配置</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OkHttpConfig</span> &#123;<br><br>    <span class=\"hljs-comment\">// 默认老外留给你彩蛋中文乱码，加上它就 OK</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Encoder <span class=\"hljs-title function_\">encoder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormEncoder</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> okhttp3.OkHttpClient <span class=\"hljs-title function_\">okHttpClient</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">okhttp3</span>.OkHttpClient.Builder()<br>                <span class=\"hljs-comment\">//设置连接超时</span><br>                .connectTimeout(<span class=\"hljs-number\">10</span>, TimeUnit.SECONDS)<br>                <span class=\"hljs-comment\">//设置读超时</span><br>                .readTimeout(<span class=\"hljs-number\">10</span>, TimeUnit.SECONDS)<br>                <span class=\"hljs-comment\">//设置写超时</span><br>                .writeTimeout(<span class=\"hljs-number\">10</span>, TimeUnit.SECONDS)<br>                <span class=\"hljs-comment\">//是否自动重连</span><br>                .retryOnConnectionFailure(<span class=\"hljs-literal\">true</span>)<br>                .connectionPool(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConnectionPool</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5L</span>, TimeUnit.MINUTES))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ\">https://mp.weixin.qq.com/s/PAjXS9d6Sxa04pw1Lw2HXQ</a></p>\n"},{"title":"【SpringCloud】Feign性能优化","_content":"#### 1、替换 tomcat\n首先，把 tomcat 换成 undertow，这个性能在 Jmeter 的压测下，undertow 比 tomcat 高一倍\n**第一步，pom 修改去除tomcat**\n```pom\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-tomcat</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\n```\n**第二步，配置**\n```yml\nserver:\n  undertow:\n    max-http-post-size: 0\n# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可\n    io-threads: 4\n# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8\n    worker-threads: 32\n# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理\n# 每块buffer的空间大小,越小的空间被利用越充分\n    buffer-size: 1024\n# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region\n#   buffers-per-region: 1024 # 这个参数不需要写了\n# 是否分配的直接内存\n    direct-buffers: true\n```\n#### 2、替换 HTTPClient\n**第一步，加依赖**\n```pom\n<dependency>\n\t<groupId>io.github.openfeign</groupId>\n\t<artifactId>feign-httpclient</artifactId>\n</dependency>\n```\n**第二部，在 application.yml或者 bootstrap.yml 里面配置**\n```yml\n# feign配置\nfeign:\n  hystrix:\n    # 在feign中开启hystrix功能，默认情况下feign不开启hystrix功能\n    enabled: true\n  ## 配置httpclient线程池\n  httpclient:\n    enabled: true\n  okhttp:\n    enabled: false\n```\n**第三步，配置 HTTPClient Bean**\n```java\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class HttpPool {\n\n    @Bean\n    public HttpClient httpClient(){\n        System.out.println(\"===== Apache httpclient 初始化连接池开始===\" );\n        // 生成默认请求配置\n        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom();\n        // 超时时间\n        requestConfigBuilder.setSocketTimeout(5 * 1000);\n        // 连接时间\n        requestConfigBuilder.setConnectTimeout(5 * 1000);\n        RequestConfig defaultRequestConfig = requestConfigBuilder.build();\n        // 连接池配置\n        // 长连接保持30秒\n        final PoolingHttpClientConnectionManager pollingConnectionManager = new PoolingHttpClientConnectionManager(30, TimeUnit.MILLISECONDS);\n        // 总连接数\n        pollingConnectionManager.setMaxTotal(1000);\n        // 同路由的并发数\n        pollingConnectionManager.setDefaultMaxPerRoute(100);\n\n        // httpclient 配置\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n        // 保持长连接配置，需要在头添加Keep-Alive\n        httpClientBuilder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        httpClientBuilder.setConnectionManager(pollingConnectionManager);\n        httpClientBuilder.setDefaultRequestConfig(defaultRequestConfig);\n        HttpClient client = httpClientBuilder.build();\n\n        // 启动定时器，定时回收过期的连接\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"=====closeIdleConnections===\");\n                pollingConnectionManager.closeExpiredConnections();\n                pollingConnectionManager.closeIdleConnections(5, TimeUnit.SECONDS);\n            }\n        }, 10 * 1000, 5 * 1000);\n        System.out.println(\"===== Apache httpclient 初始化连接池完毕===\");\n\n        return client;\n    }\n}\n```\n#### 3、配置 Hystrix\n**第一步，依赖**\n```pom\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-hystrix</artifactId>\n</dependency>\n```\n**第二步，配置**\n```yml\n# 配置hystrix的参数\nhystrix:\n  threadpool:\n    # default: 默认参数，作用的所有的hystrix的客户端,如果需要对某个具体的接口，可以写接口+方法名称\n    default:\n      coreSize: 500\n  command:\n    default:\n      fallback:\n        # 是否开启回退方法\n        enabled: true\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 30000 #缺省为1000\n```\n原文链接：[https://www.jianshu.com/p/fe1c4412de7f](https://www.jianshu.com/p/fe1c4412de7f \"https://www.jianshu.com/p/fe1c4412de7f\")\n","source":"_posts/SpringCloud/【SpringCloud】Feign性能优化.md","raw":"---\ntitle: 【SpringCloud】Feign性能优化\ntags:\n  - SpringCloud\n  - Feign\ncategories:\n  - SpringCloud\n---\n#### 1、替换 tomcat\n首先，把 tomcat 换成 undertow，这个性能在 Jmeter 的压测下，undertow 比 tomcat 高一倍\n**第一步，pom 修改去除tomcat**\n```pom\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-web</artifactId>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-tomcat</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\n```\n**第二步，配置**\n```yml\nserver:\n  undertow:\n    max-http-post-size: 0\n# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可\n    io-threads: 4\n# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8\n    worker-threads: 32\n# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理\n# 每块buffer的空间大小,越小的空间被利用越充分\n    buffer-size: 1024\n# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region\n#   buffers-per-region: 1024 # 这个参数不需要写了\n# 是否分配的直接内存\n    direct-buffers: true\n```\n#### 2、替换 HTTPClient\n**第一步，加依赖**\n```pom\n<dependency>\n\t<groupId>io.github.openfeign</groupId>\n\t<artifactId>feign-httpclient</artifactId>\n</dependency>\n```\n**第二部，在 application.yml或者 bootstrap.yml 里面配置**\n```yml\n# feign配置\nfeign:\n  hystrix:\n    # 在feign中开启hystrix功能，默认情况下feign不开启hystrix功能\n    enabled: true\n  ## 配置httpclient线程池\n  httpclient:\n    enabled: true\n  okhttp:\n    enabled: false\n```\n**第三步，配置 HTTPClient Bean**\n```java\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class HttpPool {\n\n    @Bean\n    public HttpClient httpClient(){\n        System.out.println(\"===== Apache httpclient 初始化连接池开始===\" );\n        // 生成默认请求配置\n        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom();\n        // 超时时间\n        requestConfigBuilder.setSocketTimeout(5 * 1000);\n        // 连接时间\n        requestConfigBuilder.setConnectTimeout(5 * 1000);\n        RequestConfig defaultRequestConfig = requestConfigBuilder.build();\n        // 连接池配置\n        // 长连接保持30秒\n        final PoolingHttpClientConnectionManager pollingConnectionManager = new PoolingHttpClientConnectionManager(30, TimeUnit.MILLISECONDS);\n        // 总连接数\n        pollingConnectionManager.setMaxTotal(1000);\n        // 同路由的并发数\n        pollingConnectionManager.setDefaultMaxPerRoute(100);\n\n        // httpclient 配置\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n        // 保持长连接配置，需要在头添加Keep-Alive\n        httpClientBuilder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        httpClientBuilder.setConnectionManager(pollingConnectionManager);\n        httpClientBuilder.setDefaultRequestConfig(defaultRequestConfig);\n        HttpClient client = httpClientBuilder.build();\n\n        // 启动定时器，定时回收过期的连接\n        Timer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"=====closeIdleConnections===\");\n                pollingConnectionManager.closeExpiredConnections();\n                pollingConnectionManager.closeIdleConnections(5, TimeUnit.SECONDS);\n            }\n        }, 10 * 1000, 5 * 1000);\n        System.out.println(\"===== Apache httpclient 初始化连接池完毕===\");\n\n        return client;\n    }\n}\n```\n#### 3、配置 Hystrix\n**第一步，依赖**\n```pom\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-hystrix</artifactId>\n</dependency>\n```\n**第二步，配置**\n```yml\n# 配置hystrix的参数\nhystrix:\n  threadpool:\n    # default: 默认参数，作用的所有的hystrix的客户端,如果需要对某个具体的接口，可以写接口+方法名称\n    default:\n      coreSize: 500\n  command:\n    default:\n      fallback:\n        # 是否开启回退方法\n        enabled: true\n      execution:\n        isolation:\n          thread:\n            timeoutInMilliseconds: 30000 #缺省为1000\n```\n原文链接：[https://www.jianshu.com/p/fe1c4412de7f](https://www.jianshu.com/p/fe1c4412de7f \"https://www.jianshu.com/p/fe1c4412de7f\")\n","slug":"SpringCloud/【SpringCloud】Feign性能优化","published":1,"date":"2022-11-28T10:53:17.305Z","updated":"2022-11-28T10:57:23.998Z","_id":"clb0oel8300046oia0co7aljt","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、替换-tomcat\"><a href=\"#1、替换-tomcat\" class=\"headerlink\" title=\"1、替换 tomcat\"></a>1、替换 tomcat</h4><p>首先，把 tomcat 换成 undertow，这个性能在 Jmeter 的压测下，undertow 比 tomcat 高一倍<br><strong>第一步，pom 修改去除tomcat</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>\t&lt;exclusions&gt;<br>\t\t&lt;exclusion&gt;<br>\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>\t\t&lt;/exclusion&gt;<br>\t&lt;/exclusions&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步，配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">undertow:</span><br>    <span class=\"hljs-attr\">max-http-post-size:</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-comment\"># 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可</span><br>    <span class=\"hljs-attr\">io-threads:</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-comment\"># 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8</span><br>    <span class=\"hljs-attr\">worker-threads:</span> <span class=\"hljs-number\">32</span><br><span class=\"hljs-comment\"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理</span><br><span class=\"hljs-comment\"># 每块buffer的空间大小,越小的空间被利用越充分</span><br>    <span class=\"hljs-attr\">buffer-size:</span> <span class=\"hljs-number\">1024</span><br><span class=\"hljs-comment\"># 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region</span><br><span class=\"hljs-comment\">#   buffers-per-region: 1024 # 这个参数不需要写了</span><br><span class=\"hljs-comment\"># 是否分配的直接内存</span><br>    <span class=\"hljs-attr\">direct-buffers:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2、替换-HTTPClient\"><a href=\"#2、替换-HTTPClient\" class=\"headerlink\" title=\"2、替换 HTTPClient\"></a>2、替换 HTTPClient</h4><p><strong>第一步，加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;<br>\t&lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二部，在 application.yml或者 bootstrap.yml 里面配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># feign配置</span><br><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">hystrix:</span><br>    <span class=\"hljs-comment\"># 在feign中开启hystrix功能，默认情况下feign不开启hystrix功能</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-comment\">## 配置httpclient线程池</span><br>  <span class=\"hljs-attr\">httpclient:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">okhttp:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n<p><strong>第三步，配置 HTTPClient Bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Timer;<br><span class=\"hljs-keyword\">import</span> java.util.TimerTask;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-keyword\">import</span> org.apache.http.client.HttpClient;<br><span class=\"hljs-keyword\">import</span> org.apache.http.client.config.RequestConfig;<br><span class=\"hljs-keyword\">import</span> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;<br><span class=\"hljs-keyword\">import</span> org.apache.http.impl.client.HttpClientBuilder;<br><span class=\"hljs-keyword\">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpPool</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> HttpClient <span class=\"hljs-title function_\">httpClient</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;===== Apache httpclient 初始化连接池开始===&quot;</span> );<br>        <span class=\"hljs-comment\">// 生成默认请求配置</span><br>        RequestConfig.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">requestConfigBuilder</span> <span class=\"hljs-operator\">=</span> RequestConfig.custom();<br>        <span class=\"hljs-comment\">// 超时时间</span><br>        requestConfigBuilder.setSocketTimeout(<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-comment\">// 连接时间</span><br>        requestConfigBuilder.setConnectTimeout(<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-type\">RequestConfig</span> <span class=\"hljs-variable\">defaultRequestConfig</span> <span class=\"hljs-operator\">=</span> requestConfigBuilder.build();<br>        <span class=\"hljs-comment\">// 连接池配置</span><br>        <span class=\"hljs-comment\">// 长连接保持30秒</span><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">PoolingHttpClientConnectionManager</span> <span class=\"hljs-variable\">pollingConnectionManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PoolingHttpClientConnectionManager</span>(<span class=\"hljs-number\">30</span>, TimeUnit.MILLISECONDS);<br>        <span class=\"hljs-comment\">// 总连接数</span><br>        pollingConnectionManager.setMaxTotal(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-comment\">// 同路由的并发数</span><br>        pollingConnectionManager.setDefaultMaxPerRoute(<span class=\"hljs-number\">100</span>);<br><br>        <span class=\"hljs-comment\">// httpclient 配置</span><br>        <span class=\"hljs-type\">HttpClientBuilder</span> <span class=\"hljs-variable\">httpClientBuilder</span> <span class=\"hljs-operator\">=</span> HttpClientBuilder.create();<br>        <span class=\"hljs-comment\">// 保持长连接配置，需要在头添加Keep-Alive</span><br>        httpClientBuilder.setKeepAliveStrategy(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultConnectionKeepAliveStrategy</span>());<br>        httpClientBuilder.setConnectionManager(pollingConnectionManager);<br>        httpClientBuilder.setDefaultRequestConfig(defaultRequestConfig);<br>        <span class=\"hljs-type\">HttpClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> httpClientBuilder.build();<br><br>        <span class=\"hljs-comment\">// 启动定时器，定时回收过期的连接</span><br>        <span class=\"hljs-type\">Timer</span> <span class=\"hljs-variable\">timer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Timer</span>();<br>        timer.schedule(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimerTask</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;=====closeIdleConnections===&quot;</span>);<br>                pollingConnectionManager.closeExpiredConnections();<br>                pollingConnectionManager.closeIdleConnections(<span class=\"hljs-number\">5</span>, TimeUnit.SECONDS);<br>            &#125;<br>        &#125;, <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;===== Apache httpclient 初始化连接池完毕===&quot;</span>);<br><br>        <span class=\"hljs-keyword\">return</span> client;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3、配置-Hystrix\"><a href=\"#3、配置-Hystrix\" class=\"headerlink\" title=\"3、配置 Hystrix\"></a>3、配置 Hystrix</h4><p><strong>第一步，依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步，配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># 配置hystrix的参数</span><br><span class=\"hljs-attr\">hystrix:</span><br>  <span class=\"hljs-attr\">threadpool:</span><br>    <span class=\"hljs-comment\"># default: 默认参数，作用的所有的hystrix的客户端,如果需要对某个具体的接口，可以写接口+方法名称</span><br>    <span class=\"hljs-attr\">default:</span><br>      <span class=\"hljs-attr\">coreSize:</span> <span class=\"hljs-number\">500</span><br>  <span class=\"hljs-attr\">command:</span><br>    <span class=\"hljs-attr\">default:</span><br>      <span class=\"hljs-attr\">fallback:</span><br>        <span class=\"hljs-comment\"># 是否开启回退方法</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">execution:</span><br>        <span class=\"hljs-attr\">isolation:</span><br>          <span class=\"hljs-attr\">thread:</span><br>            <span class=\"hljs-attr\">timeoutInMilliseconds:</span> <span class=\"hljs-number\">30000</span> <span class=\"hljs-comment\">#缺省为1000</span><br></code></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://www.jianshu.com/p/fe1c4412de7f\" title=\"https://www.jianshu.com/p/fe1c4412de7f\">https://www.jianshu.com/p/fe1c4412de7f</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、替换-tomcat\"><a href=\"#1、替换-tomcat\" class=\"headerlink\" title=\"1、替换 tomcat\"></a>1、替换 tomcat</h4><p>首先，把 tomcat 换成 undertow，这个性能在 Jmeter 的压测下，undertow 比 tomcat 高一倍<br><strong>第一步，pom 修改去除tomcat</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>\t&lt;exclusions&gt;<br>\t\t&lt;exclusion&gt;<br>\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t\t\t&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>\t\t&lt;/exclusion&gt;<br>\t&lt;/exclusions&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步，配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">undertow:</span><br>    <span class=\"hljs-attr\">max-http-post-size:</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-comment\"># 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可</span><br>    <span class=\"hljs-attr\">io-threads:</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-comment\"># 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8</span><br>    <span class=\"hljs-attr\">worker-threads:</span> <span class=\"hljs-number\">32</span><br><span class=\"hljs-comment\"># 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理</span><br><span class=\"hljs-comment\"># 每块buffer的空间大小,越小的空间被利用越充分</span><br>    <span class=\"hljs-attr\">buffer-size:</span> <span class=\"hljs-number\">1024</span><br><span class=\"hljs-comment\"># 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region</span><br><span class=\"hljs-comment\">#   buffers-per-region: 1024 # 这个参数不需要写了</span><br><span class=\"hljs-comment\"># 是否分配的直接内存</span><br>    <span class=\"hljs-attr\">direct-buffers:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2、替换-HTTPClient\"><a href=\"#2、替换-HTTPClient\" class=\"headerlink\" title=\"2、替换 HTTPClient\"></a>2、替换 HTTPClient</h4><p><strong>第一步，加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;<br>\t&lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二部，在 application.yml或者 bootstrap.yml 里面配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># feign配置</span><br><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">hystrix:</span><br>    <span class=\"hljs-comment\"># 在feign中开启hystrix功能，默认情况下feign不开启hystrix功能</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-comment\">## 配置httpclient线程池</span><br>  <span class=\"hljs-attr\">httpclient:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">okhttp:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n<p><strong>第三步，配置 HTTPClient Bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Timer;<br><span class=\"hljs-keyword\">import</span> java.util.TimerTask;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-keyword\">import</span> org.apache.http.client.HttpClient;<br><span class=\"hljs-keyword\">import</span> org.apache.http.client.config.RequestConfig;<br><span class=\"hljs-keyword\">import</span> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;<br><span class=\"hljs-keyword\">import</span> org.apache.http.impl.client.HttpClientBuilder;<br><span class=\"hljs-keyword\">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpPool</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> HttpClient <span class=\"hljs-title function_\">httpClient</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;===== Apache httpclient 初始化连接池开始===&quot;</span> );<br>        <span class=\"hljs-comment\">// 生成默认请求配置</span><br>        RequestConfig.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">requestConfigBuilder</span> <span class=\"hljs-operator\">=</span> RequestConfig.custom();<br>        <span class=\"hljs-comment\">// 超时时间</span><br>        requestConfigBuilder.setSocketTimeout(<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-comment\">// 连接时间</span><br>        requestConfigBuilder.setConnectTimeout(<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-type\">RequestConfig</span> <span class=\"hljs-variable\">defaultRequestConfig</span> <span class=\"hljs-operator\">=</span> requestConfigBuilder.build();<br>        <span class=\"hljs-comment\">// 连接池配置</span><br>        <span class=\"hljs-comment\">// 长连接保持30秒</span><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">PoolingHttpClientConnectionManager</span> <span class=\"hljs-variable\">pollingConnectionManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PoolingHttpClientConnectionManager</span>(<span class=\"hljs-number\">30</span>, TimeUnit.MILLISECONDS);<br>        <span class=\"hljs-comment\">// 总连接数</span><br>        pollingConnectionManager.setMaxTotal(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-comment\">// 同路由的并发数</span><br>        pollingConnectionManager.setDefaultMaxPerRoute(<span class=\"hljs-number\">100</span>);<br><br>        <span class=\"hljs-comment\">// httpclient 配置</span><br>        <span class=\"hljs-type\">HttpClientBuilder</span> <span class=\"hljs-variable\">httpClientBuilder</span> <span class=\"hljs-operator\">=</span> HttpClientBuilder.create();<br>        <span class=\"hljs-comment\">// 保持长连接配置，需要在头添加Keep-Alive</span><br>        httpClientBuilder.setKeepAliveStrategy(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultConnectionKeepAliveStrategy</span>());<br>        httpClientBuilder.setConnectionManager(pollingConnectionManager);<br>        httpClientBuilder.setDefaultRequestConfig(defaultRequestConfig);<br>        <span class=\"hljs-type\">HttpClient</span> <span class=\"hljs-variable\">client</span> <span class=\"hljs-operator\">=</span> httpClientBuilder.build();<br><br>        <span class=\"hljs-comment\">// 启动定时器，定时回收过期的连接</span><br>        <span class=\"hljs-type\">Timer</span> <span class=\"hljs-variable\">timer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Timer</span>();<br>        timer.schedule(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimerTask</span>() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;=====closeIdleConnections===&quot;</span>);<br>                pollingConnectionManager.closeExpiredConnections();<br>                pollingConnectionManager.closeIdleConnections(<span class=\"hljs-number\">5</span>, TimeUnit.SECONDS);<br>            &#125;<br>        &#125;, <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">1000</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;===== Apache httpclient 初始化连接池完毕===&quot;</span>);<br><br>        <span class=\"hljs-keyword\">return</span> client;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3、配置-Hystrix\"><a href=\"#3、配置-Hystrix\" class=\"headerlink\" title=\"3、配置 Hystrix\"></a>3、配置 Hystrix</h4><p><strong>第一步，依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步，配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># 配置hystrix的参数</span><br><span class=\"hljs-attr\">hystrix:</span><br>  <span class=\"hljs-attr\">threadpool:</span><br>    <span class=\"hljs-comment\"># default: 默认参数，作用的所有的hystrix的客户端,如果需要对某个具体的接口，可以写接口+方法名称</span><br>    <span class=\"hljs-attr\">default:</span><br>      <span class=\"hljs-attr\">coreSize:</span> <span class=\"hljs-number\">500</span><br>  <span class=\"hljs-attr\">command:</span><br>    <span class=\"hljs-attr\">default:</span><br>      <span class=\"hljs-attr\">fallback:</span><br>        <span class=\"hljs-comment\"># 是否开启回退方法</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">execution:</span><br>        <span class=\"hljs-attr\">isolation:</span><br>          <span class=\"hljs-attr\">thread:</span><br>            <span class=\"hljs-attr\">timeoutInMilliseconds:</span> <span class=\"hljs-number\">30000</span> <span class=\"hljs-comment\">#缺省为1000</span><br></code></pre></td></tr></table></figure>\n<p>原文链接：<a href=\"https://www.jianshu.com/p/fe1c4412de7f\" title=\"https://www.jianshu.com/p/fe1c4412de7f\">https://www.jianshu.com/p/fe1c4412de7f</a></p>\n"},{"title":"【SpringCloud】Feign组成和配置","_content":"### Feign的组成\n| 接口  | 作用  | 默认值  |\n| ------------ | ------------ | ------------ |\n| `Feign.Builder`  | Feign的入口  | `Feign.Builder`  |\n| `Client`  | Feign底层用什么去请求  | **和Ribbon配合时：**`LoadBalancerFeignClient`<br> **不和Ribbon配合时：**`Fgien.Client.Default` |\n| `Contract`  | 契约，注解支持  | `SpringMVCContract`  |\n| `Encoder`  | 解码器，用于将独享转换成HTTP请求消息体  | `SpringEncoder`  |\n| `Decoder`  | 编码器，将相应消息体转成对象  | `ResponseEntityDecoder`  |\n| `Logger`  | 日志管理器  | `Slf4jLogger`  |\n| `RequestInterceptor`  | 用于为每个请求添加通用逻辑（拦截器，例子：比如想给每个请求都带上heared）  | 无  |\n\n### Feign的日记级别\n| 日志级别  | 打印内容  |\n| ------------ | ------------ |\n| NONE（默认）  | 不记录任何日志  |\n| BASIC  |仅记录请求方法，URL，响应状态代码以及执行时间（适合生产环境）   |\n| HEADERS  | 记录BASIC级别的基础上，记录请求和响应的header  |\n| FULL  | 记录请求和弦ineader，body和元数据  |\n\n### 首先如何整合Feign\n**遵循SpringBoot的三板斧**\n**第一步：加依赖**\n```pom\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n```\n**第二步：写注解**\n```java\n@EnableFeignClients //在启动类上加\n```\n**第三步：写配置**\n```yml\n#没有配置\n```\n****\n### 如何给Feign添加日志级别\n\n#### 细粒度\n**方式一：代码实现**\n第一步：添加Feign配置类，可以添加在主类下，但是不用添加`@Configuration`。如果添加了`@Configuration`而且又放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；如果一定添加`@Configuration`，就放在主类加载之外的包。建议还是不用加`@Configuration`。\n```java\npublic class FeignConfig {\n    @Bean\n    public Logger.Level Logger() {\n        return Logger.Level.FULL;\n    }\n}\n```\n第二步：给`@FeignClient`添加配置类\n```java\n//@FeignClient configuration = GoodsFeignConfig.class 细粒度配置，指定配置类\n@FeignClient(name = \"goods\", configuration = FeignConfig.class)\n```\n第四步：写配置\n```yml\nlogging:\n  level:\n    com.xxx.xxx.FeignAPI: DEBUG #需要将FeignClient接口全路径写上# 开启日志 格式为logging.level.+Feign客户端路径\n```\n**方式二：配置属性实现**\n```yml\nfeign:\n  client:\n    config:\n      #想要调用的微服务名称\n      server-1:\n        loggerLevel: FULL\n```\n#### 全局配置\n**方式一：代码实现**\n~~添加了`@Configuration`放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；让父子上下文ComponentScan重叠（强烈不建议）~~\n**唯一正确方式**\n```java\n//在启动类上为@EnableFeignClients注解添加defaultConfiguration配置\n@EnableFeignClients(defaultConfiguration = FeignConfig.class)\n```\n**方式二：配置属性实现**\n```yml\nfeign:\n  client:\n    config:\n      #将调用的微服务名称改成default就配置成全局的了\n      default:\n        loggerLevel: FULL\n```\n\n### Feign支持的配置项\n#### 代码方式\n\n| 配置项  | 作用  |\n| ------------ | ------------ |\n| `Logger.Level`  | 指定日志级别  |\n| `Retryer`  | 指定重试策略  |\n| `ErrorDecoder`  | 指定错误解码器  |\n| `Request.Options`  | 超时时间  |\n| `Collection<RequestInterceptor>`  | 拦截器  |\n| `SetterFactory`  | 用于设置Hystrix的配置属性，Fgien整合Hystrix才会用  |\n\n#### 配置属性\n```yml\nfeign:\n  client:\n    config:\n      feignName:\n        connectTimeout: 5000  # 相当于Request.Optionsn 连接超时时间\n        readTimeout: 5000     # 相当于Request.Options 读取超时时间\n        loggerLevel: full     # 配置Feign的日志级别，相当于代码配置方式中的Logger\n        errorDecoder: com.example.SimpleErrorDecoder  # Feign的错误解码器，相当于代码配置方式中的ErrorDecoder\n        retryer: com.example.SimpleRetryer  # 配置重试，相当于代码配置方式中的Retryer\n        requestInterceptors: # 配置拦截器，相当于代码配置方式中的RequestInterceptor\n          - com.example.FooRequestInterceptor\n          - com.example.BarRequestInterceptor\n\t\t# 是否对404错误解码\n        decode404: false\n\t\tencode: com.example.SimpleEncoder\n\t\tdecoder: com.example.SimpleDecoder\n\t\tcontract: com.example.SimpleContract\n```\n\n**Feign还支持对请求和响应进行GZIP压缩，以提高通信效率，配置方式如下：**\n```yml\n# 配置请求GZIP压缩\nfeign.compression.request.enabled=true\n# 配置响应GZIP压缩\nfeign.compression.response.enabled=true\n# 配置压缩支持的MIME TYPE\nfeign.compression.request.mime-types=text/xml,application/xml,application/json\n# 配置压缩数据大小的下限\nfeign.compression.request.min-request-size=2048\n```\n\n### Ribbon配置 VS Feign配置\n| 粒度  | Ribbon  | Feign  |\n| ------------ | ------------ | ------------ |\n| 代码局部  |` @RibbonClient(configuration=RibbonConfig.class)`，`RibbonConfig`类必须加`@Configuration`,且必须放在父上下文无法扫到的包下  | `@FeignClient(configuration=FeignConfig.class)`，`FeignConfig`类的`@Configuration`可以不加（可选），如果有，必须放在父上下文无法扫到的包下  |\n| 代码全局  | `@RibbonClients(defaultConfigurtion=RibbonConfig.class)`  | `@EnableFeignClients(defaultConfiguration = FeignConfig.class)`<br>...  |\n| 配置属性局部  | <clientName(服务名称)>.ribbon.NFLoadBalancerClassName<br>...  | feign.client.config.<clientName(服务名称)>.loggerLevel <br>...  |\n| 配置属性全局  | 无 | feign.client.config.default.loggerLevel  |\n\n### Feign 代码方式 VS 配置属性方式\n| 配置方式  | 有点  | 缺点  |\n| ------------ | ------------ | ------------ |\n| 代码配置  | 基于代码，更加灵活  | 如果Feign的配置类加了`@Configuration`注解，需注意父子上下文，线上修改需要重打包，发布  |\n| 属性配置  | 易上手<br> 配置更加直观<br> 线上修改无需重新打包，发布<br> **优先级更高**  | 极端场景下没有代码配置更加灵活  |\n\n**优先级：细粒度属性配置 > 细粒度代码配置 > 全局属性配置 > 全局代码配置**\n\n\n\n\n\n\n\n\n\n","source":"_posts/SpringCloud/【SpringCloud】Feign组成和配置.md","raw":"---\ntitle: 【SpringCloud】Feign组成和配置\ntags:\n  - SpringCloud\n  - Feign\ncategories:\n  - SpringCloud\n---\n### Feign的组成\n| 接口  | 作用  | 默认值  |\n| ------------ | ------------ | ------------ |\n| `Feign.Builder`  | Feign的入口  | `Feign.Builder`  |\n| `Client`  | Feign底层用什么去请求  | **和Ribbon配合时：**`LoadBalancerFeignClient`<br> **不和Ribbon配合时：**`Fgien.Client.Default` |\n| `Contract`  | 契约，注解支持  | `SpringMVCContract`  |\n| `Encoder`  | 解码器，用于将独享转换成HTTP请求消息体  | `SpringEncoder`  |\n| `Decoder`  | 编码器，将相应消息体转成对象  | `ResponseEntityDecoder`  |\n| `Logger`  | 日志管理器  | `Slf4jLogger`  |\n| `RequestInterceptor`  | 用于为每个请求添加通用逻辑（拦截器，例子：比如想给每个请求都带上heared）  | 无  |\n\n### Feign的日记级别\n| 日志级别  | 打印内容  |\n| ------------ | ------------ |\n| NONE（默认）  | 不记录任何日志  |\n| BASIC  |仅记录请求方法，URL，响应状态代码以及执行时间（适合生产环境）   |\n| HEADERS  | 记录BASIC级别的基础上，记录请求和响应的header  |\n| FULL  | 记录请求和弦ineader，body和元数据  |\n\n### 首先如何整合Feign\n**遵循SpringBoot的三板斧**\n**第一步：加依赖**\n```pom\n<dependency>\n\t<groupId>org.springframework.cloud</groupId>\n\t<artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n```\n**第二步：写注解**\n```java\n@EnableFeignClients //在启动类上加\n```\n**第三步：写配置**\n```yml\n#没有配置\n```\n****\n### 如何给Feign添加日志级别\n\n#### 细粒度\n**方式一：代码实现**\n第一步：添加Feign配置类，可以添加在主类下，但是不用添加`@Configuration`。如果添加了`@Configuration`而且又放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；如果一定添加`@Configuration`，就放在主类加载之外的包。建议还是不用加`@Configuration`。\n```java\npublic class FeignConfig {\n    @Bean\n    public Logger.Level Logger() {\n        return Logger.Level.FULL;\n    }\n}\n```\n第二步：给`@FeignClient`添加配置类\n```java\n//@FeignClient configuration = GoodsFeignConfig.class 细粒度配置，指定配置类\n@FeignClient(name = \"goods\", configuration = FeignConfig.class)\n```\n第四步：写配置\n```yml\nlogging:\n  level:\n    com.xxx.xxx.FeignAPI: DEBUG #需要将FeignClient接口全路径写上# 开启日志 格式为logging.level.+Feign客户端路径\n```\n**方式二：配置属性实现**\n```yml\nfeign:\n  client:\n    config:\n      #想要调用的微服务名称\n      server-1:\n        loggerLevel: FULL\n```\n#### 全局配置\n**方式一：代码实现**\n~~添加了`@Configuration`放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；让父子上下文ComponentScan重叠（强烈不建议）~~\n**唯一正确方式**\n```java\n//在启动类上为@EnableFeignClients注解添加defaultConfiguration配置\n@EnableFeignClients(defaultConfiguration = FeignConfig.class)\n```\n**方式二：配置属性实现**\n```yml\nfeign:\n  client:\n    config:\n      #将调用的微服务名称改成default就配置成全局的了\n      default:\n        loggerLevel: FULL\n```\n\n### Feign支持的配置项\n#### 代码方式\n\n| 配置项  | 作用  |\n| ------------ | ------------ |\n| `Logger.Level`  | 指定日志级别  |\n| `Retryer`  | 指定重试策略  |\n| `ErrorDecoder`  | 指定错误解码器  |\n| `Request.Options`  | 超时时间  |\n| `Collection<RequestInterceptor>`  | 拦截器  |\n| `SetterFactory`  | 用于设置Hystrix的配置属性，Fgien整合Hystrix才会用  |\n\n#### 配置属性\n```yml\nfeign:\n  client:\n    config:\n      feignName:\n        connectTimeout: 5000  # 相当于Request.Optionsn 连接超时时间\n        readTimeout: 5000     # 相当于Request.Options 读取超时时间\n        loggerLevel: full     # 配置Feign的日志级别，相当于代码配置方式中的Logger\n        errorDecoder: com.example.SimpleErrorDecoder  # Feign的错误解码器，相当于代码配置方式中的ErrorDecoder\n        retryer: com.example.SimpleRetryer  # 配置重试，相当于代码配置方式中的Retryer\n        requestInterceptors: # 配置拦截器，相当于代码配置方式中的RequestInterceptor\n          - com.example.FooRequestInterceptor\n          - com.example.BarRequestInterceptor\n\t\t# 是否对404错误解码\n        decode404: false\n\t\tencode: com.example.SimpleEncoder\n\t\tdecoder: com.example.SimpleDecoder\n\t\tcontract: com.example.SimpleContract\n```\n\n**Feign还支持对请求和响应进行GZIP压缩，以提高通信效率，配置方式如下：**\n```yml\n# 配置请求GZIP压缩\nfeign.compression.request.enabled=true\n# 配置响应GZIP压缩\nfeign.compression.response.enabled=true\n# 配置压缩支持的MIME TYPE\nfeign.compression.request.mime-types=text/xml,application/xml,application/json\n# 配置压缩数据大小的下限\nfeign.compression.request.min-request-size=2048\n```\n\n### Ribbon配置 VS Feign配置\n| 粒度  | Ribbon  | Feign  |\n| ------------ | ------------ | ------------ |\n| 代码局部  |` @RibbonClient(configuration=RibbonConfig.class)`，`RibbonConfig`类必须加`@Configuration`,且必须放在父上下文无法扫到的包下  | `@FeignClient(configuration=FeignConfig.class)`，`FeignConfig`类的`@Configuration`可以不加（可选），如果有，必须放在父上下文无法扫到的包下  |\n| 代码全局  | `@RibbonClients(defaultConfigurtion=RibbonConfig.class)`  | `@EnableFeignClients(defaultConfiguration = FeignConfig.class)`<br>...  |\n| 配置属性局部  | <clientName(服务名称)>.ribbon.NFLoadBalancerClassName<br>...  | feign.client.config.<clientName(服务名称)>.loggerLevel <br>...  |\n| 配置属性全局  | 无 | feign.client.config.default.loggerLevel  |\n\n### Feign 代码方式 VS 配置属性方式\n| 配置方式  | 有点  | 缺点  |\n| ------------ | ------------ | ------------ |\n| 代码配置  | 基于代码，更加灵活  | 如果Feign的配置类加了`@Configuration`注解，需注意父子上下文，线上修改需要重打包，发布  |\n| 属性配置  | 易上手<br> 配置更加直观<br> 线上修改无需重新打包，发布<br> **优先级更高**  | 极端场景下没有代码配置更加灵活  |\n\n**优先级：细粒度属性配置 > 细粒度代码配置 > 全局属性配置 > 全局代码配置**\n\n\n\n\n\n\n\n\n\n","slug":"SpringCloud/【SpringCloud】Feign组成和配置","published":1,"date":"2022-11-28T10:55:36.340Z","updated":"2022-11-28T10:57:23.997Z","_id":"clb0oel8300056oiah1ib8ncc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Feign的组成\"><a href=\"#Feign的组成\" class=\"headerlink\" title=\"Feign的组成\"></a>Feign的组成</h3><table>\n<thead>\n<tr>\n<th>接口</th>\n<th>作用</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Feign.Builder</code></td>\n<td>Feign的入口</td>\n<td><code>Feign.Builder</code></td>\n</tr>\n<tr>\n<td><code>Client</code></td>\n<td>Feign底层用什么去请求</td>\n<td><strong>和Ribbon配合时：</strong><code>LoadBalancerFeignClient</code><br> <strong>不和Ribbon配合时：</strong><code>Fgien.Client.Default</code></td>\n</tr>\n<tr>\n<td><code>Contract</code></td>\n<td>契约，注解支持</td>\n<td><code>SpringMVCContract</code></td>\n</tr>\n<tr>\n<td><code>Encoder</code></td>\n<td>解码器，用于将独享转换成HTTP请求消息体</td>\n<td><code>SpringEncoder</code></td>\n</tr>\n<tr>\n<td><code>Decoder</code></td>\n<td>编码器，将相应消息体转成对象</td>\n<td><code>ResponseEntityDecoder</code></td>\n</tr>\n<tr>\n<td><code>Logger</code></td>\n<td>日志管理器</td>\n<td><code>Slf4jLogger</code></td>\n</tr>\n<tr>\n<td><code>RequestInterceptor</code></td>\n<td>用于为每个请求添加通用逻辑（拦截器，例子：比如想给每个请求都带上heared）</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h3 id=\"Feign的日记级别\"><a href=\"#Feign的日记级别\" class=\"headerlink\" title=\"Feign的日记级别\"></a>Feign的日记级别</h3><table>\n<thead>\n<tr>\n<th>日志级别</th>\n<th>打印内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NONE（默认）</td>\n<td>不记录任何日志</td>\n</tr>\n<tr>\n<td>BASIC</td>\n<td>仅记录请求方法，URL，响应状态代码以及执行时间（适合生产环境）</td>\n</tr>\n<tr>\n<td>HEADERS</td>\n<td>记录BASIC级别的基础上，记录请求和响应的header</td>\n</tr>\n<tr>\n<td>FULL</td>\n<td>记录请求和弦ineader，body和元数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"首先如何整合Feign\"><a href=\"#首先如何整合Feign\" class=\"headerlink\" title=\"首先如何整合Feign\"></a>首先如何整合Feign</h3><p><strong>遵循SpringBoot的三板斧</strong><br><strong>第一步：加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步：写注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableFeignClients</span> <span class=\"hljs-comment\">//在启动类上加</span><br></code></pre></td></tr></table></figure>\n<p><strong>第三步：写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#没有配置</span><br></code></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"如何给Feign添加日志级别\"><a href=\"#如何给Feign添加日志级别\" class=\"headerlink\" title=\"如何给Feign添加日志级别\"></a>如何给Feign添加日志级别</h3><h4 id=\"细粒度\"><a href=\"#细粒度\" class=\"headerlink\" title=\"细粒度\"></a>细粒度</h4><p><strong>方式一：代码实现</strong><br>第一步：添加Feign配置类，可以添加在主类下，但是不用添加<code>@Configuration</code>。如果添加了<code>@Configuration</code>而且又放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；如果一定添加<code>@Configuration</code>，就放在主类加载之外的包。建议还是不用加<code>@Configuration</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeignConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Logger.Level <span class=\"hljs-title function_\">Logger</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第二步：给<code>@FeignClient</code>添加配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//@FeignClient configuration = GoodsFeignConfig.class 细粒度配置，指定配置类</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;goods&quot;, configuration = FeignConfig.class)</span><br></code></pre></td></tr></table></figure>\n<p>第四步：写配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">logging:</span><br>  <span class=\"hljs-attr\">level:</span><br>    <span class=\"hljs-attr\">com.xxx.xxx.FeignAPI:</span> <span class=\"hljs-string\">DEBUG</span> <span class=\"hljs-comment\">#需要将FeignClient接口全路径写上# 开启日志 格式为logging.level.+Feign客户端路径</span><br></code></pre></td></tr></table></figure>\n<p><strong>方式二：配置属性实现</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">config:</span><br>      <span class=\"hljs-comment\">#想要调用的微服务名称</span><br>      <span class=\"hljs-attr\">server-1:</span><br>        <span class=\"hljs-attr\">loggerLevel:</span> <span class=\"hljs-string\">FULL</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h4><p><strong>方式一：代码实现</strong><br><del>添加了<code>@Configuration</code>放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；让父子上下文ComponentScan重叠（强烈不建议）</del><br><strong>唯一正确方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在启动类上为@EnableFeignClients注解添加defaultConfiguration配置</span><br><span class=\"hljs-meta\">@EnableFeignClients(defaultConfiguration = FeignConfig.class)</span><br></code></pre></td></tr></table></figure>\n<p><strong>方式二：配置属性实现</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">config:</span><br>      <span class=\"hljs-comment\">#将调用的微服务名称改成default就配置成全局的了</span><br>      <span class=\"hljs-attr\">default:</span><br>        <span class=\"hljs-attr\">loggerLevel:</span> <span class=\"hljs-string\">FULL</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Feign支持的配置项\"><a href=\"#Feign支持的配置项\" class=\"headerlink\" title=\"Feign支持的配置项\"></a>Feign支持的配置项</h3><h4 id=\"代码方式\"><a href=\"#代码方式\" class=\"headerlink\" title=\"代码方式\"></a>代码方式</h4><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Logger.Level</code></td>\n<td>指定日志级别</td>\n</tr>\n<tr>\n<td><code>Retryer</code></td>\n<td>指定重试策略</td>\n</tr>\n<tr>\n<td><code>ErrorDecoder</code></td>\n<td>指定错误解码器</td>\n</tr>\n<tr>\n<td><code>Request.Options</code></td>\n<td>超时时间</td>\n</tr>\n<tr>\n<td><code>Collection&lt;RequestInterceptor&gt;</code></td>\n<td>拦截器</td>\n</tr>\n<tr>\n<td><code>SetterFactory</code></td>\n<td>用于设置Hystrix的配置属性，Fgien整合Hystrix才会用</td>\n</tr>\n</tbody></table>\n<h4 id=\"配置属性\"><a href=\"#配置属性\" class=\"headerlink\" title=\"配置属性\"></a>配置属性</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">config:</span><br>      <span class=\"hljs-attr\">feignName:</span><br>        <span class=\"hljs-attr\">connectTimeout:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-comment\"># 相当于Request.Optionsn 连接超时时间</span><br>        <span class=\"hljs-attr\">readTimeout:</span> <span class=\"hljs-number\">5000</span>     <span class=\"hljs-comment\"># 相当于Request.Options 读取超时时间</span><br>        <span class=\"hljs-attr\">loggerLevel:</span> <span class=\"hljs-string\">full</span>     <span class=\"hljs-comment\"># 配置Feign的日志级别，相当于代码配置方式中的Logger</span><br>        <span class=\"hljs-attr\">errorDecoder:</span> <span class=\"hljs-string\">com.example.SimpleErrorDecoder</span>  <span class=\"hljs-comment\"># Feign的错误解码器，相当于代码配置方式中的ErrorDecoder</span><br>        <span class=\"hljs-attr\">retryer:</span> <span class=\"hljs-string\">com.example.SimpleRetryer</span>  <span class=\"hljs-comment\"># 配置重试，相当于代码配置方式中的Retryer</span><br>        <span class=\"hljs-attr\">requestInterceptors:</span> <span class=\"hljs-comment\"># 配置拦截器，相当于代码配置方式中的RequestInterceptor</span><br>          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">com.example.FooRequestInterceptor</span><br>          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">com.example.BarRequestInterceptor</span><br>\t\t<span class=\"hljs-comment\"># 是否对404错误解码</span><br>        <span class=\"hljs-attr\">decode404:</span> <span class=\"hljs-literal\">false</span><br>\t\t<span class=\"hljs-attr\">encode:</span> <span class=\"hljs-string\">com.example.SimpleEncoder</span><br>\t\t<span class=\"hljs-attr\">decoder:</span> <span class=\"hljs-string\">com.example.SimpleDecoder</span><br>\t\t<span class=\"hljs-attr\">contract:</span> <span class=\"hljs-string\">com.example.SimpleContract</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>Feign还支持对请求和响应进行GZIP压缩，以提高通信效率，配置方式如下：</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># 配置请求GZIP压缩</span><br><span class=\"hljs-string\">feign.compression.request.enabled=true</span><br><span class=\"hljs-comment\"># 配置响应GZIP压缩</span><br><span class=\"hljs-string\">feign.compression.response.enabled=true</span><br><span class=\"hljs-comment\"># 配置压缩支持的MIME TYPE</span><br><span class=\"hljs-string\">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class=\"hljs-comment\"># 配置压缩数据大小的下限</span><br><span class=\"hljs-string\">feign.compression.request.min-request-size=2048</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ribbon配置-VS-Feign配置\"><a href=\"#Ribbon配置-VS-Feign配置\" class=\"headerlink\" title=\"Ribbon配置 VS Feign配置\"></a>Ribbon配置 VS Feign配置</h3><table>\n<thead>\n<tr>\n<th>粒度</th>\n<th>Ribbon</th>\n<th>Feign</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码局部</td>\n<td><code> @RibbonClient(configuration=RibbonConfig.class)</code>，<code>RibbonConfig</code>类必须加<code>@Configuration</code>,且必须放在父上下文无法扫到的包下</td>\n<td><code>@FeignClient(configuration=FeignConfig.class)</code>，<code>FeignConfig</code>类的<code>@Configuration</code>可以不加（可选），如果有，必须放在父上下文无法扫到的包下</td>\n</tr>\n<tr>\n<td>代码全局</td>\n<td><code>@RibbonClients(defaultConfigurtion=RibbonConfig.class)</code></td>\n<td><code>@EnableFeignClients(defaultConfiguration = FeignConfig.class)</code><br>…</td>\n</tr>\n<tr>\n<td>配置属性局部</td>\n<td>&lt;clientName(服务名称)&gt;.ribbon.NFLoadBalancerClassName<br>…</td>\n<td>feign.client.config.&lt;clientName(服务名称)&gt;.loggerLevel <br>…</td>\n</tr>\n<tr>\n<td>配置属性全局</td>\n<td>无</td>\n<td>feign.client.config.default.loggerLevel</td>\n</tr>\n</tbody></table>\n<h3 id=\"Feign-代码方式-VS-配置属性方式\"><a href=\"#Feign-代码方式-VS-配置属性方式\" class=\"headerlink\" title=\"Feign 代码方式 VS 配置属性方式\"></a>Feign 代码方式 VS 配置属性方式</h3><table>\n<thead>\n<tr>\n<th>配置方式</th>\n<th>有点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码配置</td>\n<td>基于代码，更加灵活</td>\n<td>如果Feign的配置类加了<code>@Configuration</code>注解，需注意父子上下文，线上修改需要重打包，发布</td>\n</tr>\n<tr>\n<td>属性配置</td>\n<td>易上手<br> 配置更加直观<br> 线上修改无需重新打包，发布<br> <strong>优先级更高</strong></td>\n<td>极端场景下没有代码配置更加灵活</td>\n</tr>\n</tbody></table>\n<p><strong>优先级：细粒度属性配置 &gt; 细粒度代码配置 &gt; 全局属性配置 &gt; 全局代码配置</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Feign的组成\"><a href=\"#Feign的组成\" class=\"headerlink\" title=\"Feign的组成\"></a>Feign的组成</h3><table>\n<thead>\n<tr>\n<th>接口</th>\n<th>作用</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Feign.Builder</code></td>\n<td>Feign的入口</td>\n<td><code>Feign.Builder</code></td>\n</tr>\n<tr>\n<td><code>Client</code></td>\n<td>Feign底层用什么去请求</td>\n<td><strong>和Ribbon配合时：</strong><code>LoadBalancerFeignClient</code><br> <strong>不和Ribbon配合时：</strong><code>Fgien.Client.Default</code></td>\n</tr>\n<tr>\n<td><code>Contract</code></td>\n<td>契约，注解支持</td>\n<td><code>SpringMVCContract</code></td>\n</tr>\n<tr>\n<td><code>Encoder</code></td>\n<td>解码器，用于将独享转换成HTTP请求消息体</td>\n<td><code>SpringEncoder</code></td>\n</tr>\n<tr>\n<td><code>Decoder</code></td>\n<td>编码器，将相应消息体转成对象</td>\n<td><code>ResponseEntityDecoder</code></td>\n</tr>\n<tr>\n<td><code>Logger</code></td>\n<td>日志管理器</td>\n<td><code>Slf4jLogger</code></td>\n</tr>\n<tr>\n<td><code>RequestInterceptor</code></td>\n<td>用于为每个请求添加通用逻辑（拦截器，例子：比如想给每个请求都带上heared）</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h3 id=\"Feign的日记级别\"><a href=\"#Feign的日记级别\" class=\"headerlink\" title=\"Feign的日记级别\"></a>Feign的日记级别</h3><table>\n<thead>\n<tr>\n<th>日志级别</th>\n<th>打印内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NONE（默认）</td>\n<td>不记录任何日志</td>\n</tr>\n<tr>\n<td>BASIC</td>\n<td>仅记录请求方法，URL，响应状态代码以及执行时间（适合生产环境）</td>\n</tr>\n<tr>\n<td>HEADERS</td>\n<td>记录BASIC级别的基础上，记录请求和响应的header</td>\n</tr>\n<tr>\n<td>FULL</td>\n<td>记录请求和弦ineader，body和元数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"首先如何整合Feign\"><a href=\"#首先如何整合Feign\" class=\"headerlink\" title=\"首先如何整合Feign\"></a>首先如何整合Feign</h3><p><strong>遵循SpringBoot的三板斧</strong><br><strong>第一步：加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步：写注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableFeignClients</span> <span class=\"hljs-comment\">//在启动类上加</span><br></code></pre></td></tr></table></figure>\n<p><strong>第三步：写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#没有配置</span><br></code></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"如何给Feign添加日志级别\"><a href=\"#如何给Feign添加日志级别\" class=\"headerlink\" title=\"如何给Feign添加日志级别\"></a>如何给Feign添加日志级别</h3><h4 id=\"细粒度\"><a href=\"#细粒度\" class=\"headerlink\" title=\"细粒度\"></a>细粒度</h4><p><strong>方式一：代码实现</strong><br>第一步：添加Feign配置类，可以添加在主类下，但是不用添加<code>@Configuration</code>。如果添加了<code>@Configuration</code>而且又放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；如果一定添加<code>@Configuration</code>，就放在主类加载之外的包。建议还是不用加<code>@Configuration</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FeignConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Logger.Level <span class=\"hljs-title function_\">Logger</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第二步：给<code>@FeignClient</code>添加配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//@FeignClient configuration = GoodsFeignConfig.class 细粒度配置，指定配置类</span><br><span class=\"hljs-meta\">@FeignClient(name = &quot;goods&quot;, configuration = FeignConfig.class)</span><br></code></pre></td></tr></table></figure>\n<p>第四步：写配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">logging:</span><br>  <span class=\"hljs-attr\">level:</span><br>    <span class=\"hljs-attr\">com.xxx.xxx.FeignAPI:</span> <span class=\"hljs-string\">DEBUG</span> <span class=\"hljs-comment\">#需要将FeignClient接口全路径写上# 开启日志 格式为logging.level.+Feign客户端路径</span><br></code></pre></td></tr></table></figure>\n<p><strong>方式二：配置属性实现</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">config:</span><br>      <span class=\"hljs-comment\">#想要调用的微服务名称</span><br>      <span class=\"hljs-attr\">server-1:</span><br>        <span class=\"hljs-attr\">loggerLevel:</span> <span class=\"hljs-string\">FULL</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h4><p><strong>方式一：代码实现</strong><br><del>添加了<code>@Configuration</code>放在了主类之下，那么就会所有Feign客户端实例共享，同Ribbon配置类一样父子上下文加载冲突；让父子上下文ComponentScan重叠（强烈不建议）</del><br><strong>唯一正确方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在启动类上为@EnableFeignClients注解添加defaultConfiguration配置</span><br><span class=\"hljs-meta\">@EnableFeignClients(defaultConfiguration = FeignConfig.class)</span><br></code></pre></td></tr></table></figure>\n<p><strong>方式二：配置属性实现</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">config:</span><br>      <span class=\"hljs-comment\">#将调用的微服务名称改成default就配置成全局的了</span><br>      <span class=\"hljs-attr\">default:</span><br>        <span class=\"hljs-attr\">loggerLevel:</span> <span class=\"hljs-string\">FULL</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Feign支持的配置项\"><a href=\"#Feign支持的配置项\" class=\"headerlink\" title=\"Feign支持的配置项\"></a>Feign支持的配置项</h3><h4 id=\"代码方式\"><a href=\"#代码方式\" class=\"headerlink\" title=\"代码方式\"></a>代码方式</h4><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Logger.Level</code></td>\n<td>指定日志级别</td>\n</tr>\n<tr>\n<td><code>Retryer</code></td>\n<td>指定重试策略</td>\n</tr>\n<tr>\n<td><code>ErrorDecoder</code></td>\n<td>指定错误解码器</td>\n</tr>\n<tr>\n<td><code>Request.Options</code></td>\n<td>超时时间</td>\n</tr>\n<tr>\n<td><code>Collection&lt;RequestInterceptor&gt;</code></td>\n<td>拦截器</td>\n</tr>\n<tr>\n<td><code>SetterFactory</code></td>\n<td>用于设置Hystrix的配置属性，Fgien整合Hystrix才会用</td>\n</tr>\n</tbody></table>\n<h4 id=\"配置属性\"><a href=\"#配置属性\" class=\"headerlink\" title=\"配置属性\"></a>配置属性</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">feign:</span><br>  <span class=\"hljs-attr\">client:</span><br>    <span class=\"hljs-attr\">config:</span><br>      <span class=\"hljs-attr\">feignName:</span><br>        <span class=\"hljs-attr\">connectTimeout:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-comment\"># 相当于Request.Optionsn 连接超时时间</span><br>        <span class=\"hljs-attr\">readTimeout:</span> <span class=\"hljs-number\">5000</span>     <span class=\"hljs-comment\"># 相当于Request.Options 读取超时时间</span><br>        <span class=\"hljs-attr\">loggerLevel:</span> <span class=\"hljs-string\">full</span>     <span class=\"hljs-comment\"># 配置Feign的日志级别，相当于代码配置方式中的Logger</span><br>        <span class=\"hljs-attr\">errorDecoder:</span> <span class=\"hljs-string\">com.example.SimpleErrorDecoder</span>  <span class=\"hljs-comment\"># Feign的错误解码器，相当于代码配置方式中的ErrorDecoder</span><br>        <span class=\"hljs-attr\">retryer:</span> <span class=\"hljs-string\">com.example.SimpleRetryer</span>  <span class=\"hljs-comment\"># 配置重试，相当于代码配置方式中的Retryer</span><br>        <span class=\"hljs-attr\">requestInterceptors:</span> <span class=\"hljs-comment\"># 配置拦截器，相当于代码配置方式中的RequestInterceptor</span><br>          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">com.example.FooRequestInterceptor</span><br>          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">com.example.BarRequestInterceptor</span><br>\t\t<span class=\"hljs-comment\"># 是否对404错误解码</span><br>        <span class=\"hljs-attr\">decode404:</span> <span class=\"hljs-literal\">false</span><br>\t\t<span class=\"hljs-attr\">encode:</span> <span class=\"hljs-string\">com.example.SimpleEncoder</span><br>\t\t<span class=\"hljs-attr\">decoder:</span> <span class=\"hljs-string\">com.example.SimpleDecoder</span><br>\t\t<span class=\"hljs-attr\">contract:</span> <span class=\"hljs-string\">com.example.SimpleContract</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>Feign还支持对请求和响应进行GZIP压缩，以提高通信效率，配置方式如下：</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\"># 配置请求GZIP压缩</span><br><span class=\"hljs-string\">feign.compression.request.enabled=true</span><br><span class=\"hljs-comment\"># 配置响应GZIP压缩</span><br><span class=\"hljs-string\">feign.compression.response.enabled=true</span><br><span class=\"hljs-comment\"># 配置压缩支持的MIME TYPE</span><br><span class=\"hljs-string\">feign.compression.request.mime-types=text/xml,application/xml,application/json</span><br><span class=\"hljs-comment\"># 配置压缩数据大小的下限</span><br><span class=\"hljs-string\">feign.compression.request.min-request-size=2048</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ribbon配置-VS-Feign配置\"><a href=\"#Ribbon配置-VS-Feign配置\" class=\"headerlink\" title=\"Ribbon配置 VS Feign配置\"></a>Ribbon配置 VS Feign配置</h3><table>\n<thead>\n<tr>\n<th>粒度</th>\n<th>Ribbon</th>\n<th>Feign</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码局部</td>\n<td><code> @RibbonClient(configuration=RibbonConfig.class)</code>，<code>RibbonConfig</code>类必须加<code>@Configuration</code>,且必须放在父上下文无法扫到的包下</td>\n<td><code>@FeignClient(configuration=FeignConfig.class)</code>，<code>FeignConfig</code>类的<code>@Configuration</code>可以不加（可选），如果有，必须放在父上下文无法扫到的包下</td>\n</tr>\n<tr>\n<td>代码全局</td>\n<td><code>@RibbonClients(defaultConfigurtion=RibbonConfig.class)</code></td>\n<td><code>@EnableFeignClients(defaultConfiguration = FeignConfig.class)</code><br>…</td>\n</tr>\n<tr>\n<td>配置属性局部</td>\n<td>&lt;clientName(服务名称)&gt;.ribbon.NFLoadBalancerClassName<br>…</td>\n<td>feign.client.config.&lt;clientName(服务名称)&gt;.loggerLevel <br>…</td>\n</tr>\n<tr>\n<td>配置属性全局</td>\n<td>无</td>\n<td>feign.client.config.default.loggerLevel</td>\n</tr>\n</tbody></table>\n<h3 id=\"Feign-代码方式-VS-配置属性方式\"><a href=\"#Feign-代码方式-VS-配置属性方式\" class=\"headerlink\" title=\"Feign 代码方式 VS 配置属性方式\"></a>Feign 代码方式 VS 配置属性方式</h3><table>\n<thead>\n<tr>\n<th>配置方式</th>\n<th>有点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码配置</td>\n<td>基于代码，更加灵活</td>\n<td>如果Feign的配置类加了<code>@Configuration</code>注解，需注意父子上下文，线上修改需要重打包，发布</td>\n</tr>\n<tr>\n<td>属性配置</td>\n<td>易上手<br> 配置更加直观<br> 线上修改无需重新打包，发布<br> <strong>优先级更高</strong></td>\n<td>极端场景下没有代码配置更加灵活</td>\n</tr>\n</tbody></table>\n<p><strong>优先级：细粒度属性配置 &gt; 细粒度代码配置 &gt; 全局属性配置 &gt; 全局代码配置</strong></p>\n"},{"title":"【SpringCloud】Ribbon组成和负载均衡规则","_content":"### Ribbon饥饿加载\n>\t默认情况下Ribbon是懒加载的。当服务起动好之后，第一次请求是非常慢的，第二次之后就快很多。\n\n#### 解决方式：开启饥饿加载\n```yml\nribbon:\n eager-load:\n  enabled: true #开启饥饿加载\n  clients: server-1,server-2,server-3 #为哪些服务的名称开启饥饿加载,多个用逗号分隔\n```\n\n### Ribbon组成\n| 接口  \t\t\t\t\t   | 作用  \t\t\t\t\t\t| 默认值  |\n| ------------ \t\t\t\t| ------------ \t\t\t\t\t| ------------ |\n| `IclientConfig`  \t\t\t| 读取配置  \t\t\t\t\t| `DefaultClientConfigImpl`  |\n| `IRule` \t\t    \t\t| 负载均衡规则，选择实例 \t\t  | `ZoneAvoidanceRule`  |\n| `IPing`  \t\t\t\t\t| 筛选掉ping不通的实例  \t\t | `DumyPing`（该类什么不干，认为每个实例都可用，都能ping通）  |\n| `ServerList<Server>`  \t\t| 交给Ribbon的实例列表  \t\t | **Ribbon:**`ConfigurationBasedServerList`<br>**Spring Cloud Alibaba:**`NacosServerList` |\n| `ServerListFilter<Server>`  | 过滤掉不符合条件的实例 \t\t  | `ZonePreferenceServerListFilter`  |\n| `ILoadBalancer` \t\t\t| Ribbon的入口  \t\t\t\t| `ZoneAwareLoadBalancer`  |\n| `ServerListUpdater`  \t\t| 更新交给Ribbon的List的策略  \t| `PollingServerListUpdater`  |\n\n**这里的每一项都可以自定义**\n`IclientConfig`Ribbon支持非常灵活的配置就是由该组件提供的\n`IRule`为Ribbon提供规则，从而选择实例、该组件是最核心的组件\n**举例：**\n代码方式\n```java\n@Configuration\npublic class RibbonRuleConfig {\n    @Bean\n    public IRule ribbonRulr() {\n        return new RandomRule();\n    }\n\t@Bean\n\tpublic IPing iPing(){\n\t\treturn new PingUrl();\n\t}\n}\n```\n配置属性方式\n```yml\n<clientName>:\n ribbon:\n  NFLoadBalancerClassName: #ILoadBalancer该接口实现类\n  NFLoadBalancerRuleClassName: #IRule该接口实现类\n  NFLoadBalancerPingClassName: #Iping该接口实现类\n  NIWSServerListClassName: #ServerList该接口实现类\n  NIWSServerListFilterClassName: #ServiceListFilter该接口实现类\n```\n**在这些属性中定义的类优先于使用`@RibbonClient(configuration=RibbonConfig.class)`Spring 定义的bean 以及由Spring Cloud Netflix提供的默认值。描述：配置文件中定义ribbon优先代码定义**\n\n### Ribbon负载均衡的八种算法，其中~~`ResponseTimeWeightedRule`~~已废除\n|  规则名称 | 特点  |\n| ------------ | ------------ |\n| `AvailabilityFilteringRule`  | 过滤掉一直连接失败的被标记为circuit tripped（电路跳闸）的后端Service，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤Server的逻辑，其实就是检查status的记录的各个Server的运行状态  |\n| `BestAvailableRule`  | 选择一个最小的并发请求的Server，逐个考察Server，如果Server被tripped了，则跳过  |\n| `RandomRule`  | 随机选择一个Server  |\n| ~~`ResponseTimeWeightedRule`~~  | 已废弃，作用同WeightedResponseTimeRule  |\n| `RetryRule`  | 对选定的负责均衡策略机上充值机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的Server  |\n| `RoundRobinRule`  | 轮询选择，轮询index，选择index对应位置Server  |\n| `WeightedResponseTimeRule`  | 根据相应时间加权，相应时间越长，权重越小，被选中的可能性越低  |\n| `ZoneAvoidanceRule`  | （默认是这个）负责判断Server所Zone的性能和Server的可用性选择Server，在没有Zone的环境下，类似于轮询（`RoundRobinRule`）  |\n\n\n### 实现负载均衡<细粒度>配置-随机\n\n#### 方式一：JAVA代码方式\n首先定义RestTemplate，并且添加注解`@LoadBalanced`，这样RestTemplate就实现了负载均衡\n```java\n@LoadBalanced\n@Bean\npublic RestTemplate restTemplate() {\n//template.getMessageConverters().set(1, new StringHttpMessageConverter(StandardCharsets.UTF_8));//解决中文乱码\nreturn new RestTemplate();\n}\n```\n\n在SpringBootApplication主类下添加配置类。该类主要作用于为哪个服务做负载均衡。默认的是轮训\n```java\n@Configuration\n@RibbonClient(name = \"${服务名称}\", configuration = GoodsRibbonRuleConfig.class)//configuration: 指向负载均衡规则的配置类\npublic class GoodsRibbonConfig {\n}\n```\n\n添加Ribbon的配置类，注意该类必须配置在`@SpringBootApplication`主类以外的包下。不然的话所有的服务都会按照这个规则来实现。会被所有的RibbonClient共享。主要是主类的主上下文和Ribbon的子上下文起冲突了。父子上下文不能重叠。相关连接：https://blog.csdn.net/qq_32588349/article/details/52097943\n```java\n@Configuration\npublic class GoodsRibbonRuleConfig {\n    @Bean\n    public IRule ribbonRulr() {\n        return new RandomRule();\n    }\n}\n```\n或者使用自定义注解排除该类\n\n#### 方式一：配置属性方式\n```yml\nserver-1: # 服务名称 Service-ID\n  ribbon:\n    # 属性配置方式【推荐】\n    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #  配置文件配置负载均衡算法-我这里使用的是自定义的Ribbon的负载均衡算法，默认\n```\n**优先级：配置（不会影响其他服务）>(大于) 硬编码（类得写在SpringBoot启动类包外，不然会影响其他服务）**\n\n#### 总结：\n| 配置方式  | 有点  | 缺点  |\n| ------------ | ------------ | ------------ |\n| 代码配置  | 基于代码，更加灵活  | 有坑（父子上下文）<br> 线上修改得重新打包，发布  |\n| 属性配置  | 易上手 配置更加直观 <br> 线上修改无需重新打包，发布 <br> **优先级更高**  | 极端场景下没有配置配置方式灵活  |\n\n### 实现负载均衡<全局>配置-随机\n\n#### 方式一：Ribbon的配置类定义在主类下\n~~让ComponentScan上下文重叠（**强烈不建议使用**）~~\n#### 方式二：\n```java\n@Configuration\n@RibbonClients(defaultConfiguration = GoodsRibbonRuleConfig.class)//Ribbon负载均衡全局粒度配置（所有服务都按照这个配置）\npublic class RibbonConfig {\n}\n```\n","source":"_posts/SpringCloud/【SpringCloud】Ribbon组成和负载均衡规则.md","raw":"---\ntitle: 【SpringCloud】Ribbon组成和负载均衡规则\ntags:\n  - SpringCloud\n  - Ribbon\ncategories:\n  - SpringCloud\n---\n### Ribbon饥饿加载\n>\t默认情况下Ribbon是懒加载的。当服务起动好之后，第一次请求是非常慢的，第二次之后就快很多。\n\n#### 解决方式：开启饥饿加载\n```yml\nribbon:\n eager-load:\n  enabled: true #开启饥饿加载\n  clients: server-1,server-2,server-3 #为哪些服务的名称开启饥饿加载,多个用逗号分隔\n```\n\n### Ribbon组成\n| 接口  \t\t\t\t\t   | 作用  \t\t\t\t\t\t| 默认值  |\n| ------------ \t\t\t\t| ------------ \t\t\t\t\t| ------------ |\n| `IclientConfig`  \t\t\t| 读取配置  \t\t\t\t\t| `DefaultClientConfigImpl`  |\n| `IRule` \t\t    \t\t| 负载均衡规则，选择实例 \t\t  | `ZoneAvoidanceRule`  |\n| `IPing`  \t\t\t\t\t| 筛选掉ping不通的实例  \t\t | `DumyPing`（该类什么不干，认为每个实例都可用，都能ping通）  |\n| `ServerList<Server>`  \t\t| 交给Ribbon的实例列表  \t\t | **Ribbon:**`ConfigurationBasedServerList`<br>**Spring Cloud Alibaba:**`NacosServerList` |\n| `ServerListFilter<Server>`  | 过滤掉不符合条件的实例 \t\t  | `ZonePreferenceServerListFilter`  |\n| `ILoadBalancer` \t\t\t| Ribbon的入口  \t\t\t\t| `ZoneAwareLoadBalancer`  |\n| `ServerListUpdater`  \t\t| 更新交给Ribbon的List的策略  \t| `PollingServerListUpdater`  |\n\n**这里的每一项都可以自定义**\n`IclientConfig`Ribbon支持非常灵活的配置就是由该组件提供的\n`IRule`为Ribbon提供规则，从而选择实例、该组件是最核心的组件\n**举例：**\n代码方式\n```java\n@Configuration\npublic class RibbonRuleConfig {\n    @Bean\n    public IRule ribbonRulr() {\n        return new RandomRule();\n    }\n\t@Bean\n\tpublic IPing iPing(){\n\t\treturn new PingUrl();\n\t}\n}\n```\n配置属性方式\n```yml\n<clientName>:\n ribbon:\n  NFLoadBalancerClassName: #ILoadBalancer该接口实现类\n  NFLoadBalancerRuleClassName: #IRule该接口实现类\n  NFLoadBalancerPingClassName: #Iping该接口实现类\n  NIWSServerListClassName: #ServerList该接口实现类\n  NIWSServerListFilterClassName: #ServiceListFilter该接口实现类\n```\n**在这些属性中定义的类优先于使用`@RibbonClient(configuration=RibbonConfig.class)`Spring 定义的bean 以及由Spring Cloud Netflix提供的默认值。描述：配置文件中定义ribbon优先代码定义**\n\n### Ribbon负载均衡的八种算法，其中~~`ResponseTimeWeightedRule`~~已废除\n|  规则名称 | 特点  |\n| ------------ | ------------ |\n| `AvailabilityFilteringRule`  | 过滤掉一直连接失败的被标记为circuit tripped（电路跳闸）的后端Service，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤Server的逻辑，其实就是检查status的记录的各个Server的运行状态  |\n| `BestAvailableRule`  | 选择一个最小的并发请求的Server，逐个考察Server，如果Server被tripped了，则跳过  |\n| `RandomRule`  | 随机选择一个Server  |\n| ~~`ResponseTimeWeightedRule`~~  | 已废弃，作用同WeightedResponseTimeRule  |\n| `RetryRule`  | 对选定的负责均衡策略机上充值机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的Server  |\n| `RoundRobinRule`  | 轮询选择，轮询index，选择index对应位置Server  |\n| `WeightedResponseTimeRule`  | 根据相应时间加权，相应时间越长，权重越小，被选中的可能性越低  |\n| `ZoneAvoidanceRule`  | （默认是这个）负责判断Server所Zone的性能和Server的可用性选择Server，在没有Zone的环境下，类似于轮询（`RoundRobinRule`）  |\n\n\n### 实现负载均衡<细粒度>配置-随机\n\n#### 方式一：JAVA代码方式\n首先定义RestTemplate，并且添加注解`@LoadBalanced`，这样RestTemplate就实现了负载均衡\n```java\n@LoadBalanced\n@Bean\npublic RestTemplate restTemplate() {\n//template.getMessageConverters().set(1, new StringHttpMessageConverter(StandardCharsets.UTF_8));//解决中文乱码\nreturn new RestTemplate();\n}\n```\n\n在SpringBootApplication主类下添加配置类。该类主要作用于为哪个服务做负载均衡。默认的是轮训\n```java\n@Configuration\n@RibbonClient(name = \"${服务名称}\", configuration = GoodsRibbonRuleConfig.class)//configuration: 指向负载均衡规则的配置类\npublic class GoodsRibbonConfig {\n}\n```\n\n添加Ribbon的配置类，注意该类必须配置在`@SpringBootApplication`主类以外的包下。不然的话所有的服务都会按照这个规则来实现。会被所有的RibbonClient共享。主要是主类的主上下文和Ribbon的子上下文起冲突了。父子上下文不能重叠。相关连接：https://blog.csdn.net/qq_32588349/article/details/52097943\n```java\n@Configuration\npublic class GoodsRibbonRuleConfig {\n    @Bean\n    public IRule ribbonRulr() {\n        return new RandomRule();\n    }\n}\n```\n或者使用自定义注解排除该类\n\n#### 方式一：配置属性方式\n```yml\nserver-1: # 服务名称 Service-ID\n  ribbon:\n    # 属性配置方式【推荐】\n    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #  配置文件配置负载均衡算法-我这里使用的是自定义的Ribbon的负载均衡算法，默认\n```\n**优先级：配置（不会影响其他服务）>(大于) 硬编码（类得写在SpringBoot启动类包外，不然会影响其他服务）**\n\n#### 总结：\n| 配置方式  | 有点  | 缺点  |\n| ------------ | ------------ | ------------ |\n| 代码配置  | 基于代码，更加灵活  | 有坑（父子上下文）<br> 线上修改得重新打包，发布  |\n| 属性配置  | 易上手 配置更加直观 <br> 线上修改无需重新打包，发布 <br> **优先级更高**  | 极端场景下没有配置配置方式灵活  |\n\n### 实现负载均衡<全局>配置-随机\n\n#### 方式一：Ribbon的配置类定义在主类下\n~~让ComponentScan上下文重叠（**强烈不建议使用**）~~\n#### 方式二：\n```java\n@Configuration\n@RibbonClients(defaultConfiguration = GoodsRibbonRuleConfig.class)//Ribbon负载均衡全局粒度配置（所有服务都按照这个配置）\npublic class RibbonConfig {\n}\n```\n","slug":"SpringCloud/【SpringCloud】Ribbon组成和负载均衡规则","published":1,"date":"2022-11-28T10:56:29.975Z","updated":"2022-11-28T10:57:23.997Z","_id":"clb0oel8500086oia58od8onn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Ribbon饥饿加载\"><a href=\"#Ribbon饥饿加载\" class=\"headerlink\" title=\"Ribbon饥饿加载\"></a>Ribbon饥饿加载</h3><blockquote>\n<p>默认情况下Ribbon是懒加载的。当服务起动好之后，第一次请求是非常慢的，第二次之后就快很多。</p>\n</blockquote>\n<h4 id=\"解决方式：开启饥饿加载\"><a href=\"#解决方式：开启饥饿加载\" class=\"headerlink\" title=\"解决方式：开启饥饿加载\"></a>解决方式：开启饥饿加载</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">ribbon:</span><br> <span class=\"hljs-attr\">eager-load:</span><br>  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#开启饥饿加载</span><br>  <span class=\"hljs-attr\">clients:</span> <span class=\"hljs-string\">server-1,server-2,server-3</span> <span class=\"hljs-comment\">#为哪些服务的名称开启饥饿加载,多个用逗号分隔</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ribbon组成\"><a href=\"#Ribbon组成\" class=\"headerlink\" title=\"Ribbon组成\"></a>Ribbon组成</h3><p>| 接口  \t\t\t\t\t   | 作用  \t\t\t\t\t\t| 默认值  |<br>| ———— \t\t\t\t| ———— \t\t\t\t\t| ———— |<br>| <code>IclientConfig</code>  \t\t\t| 读取配置  \t\t\t\t\t| <code>DefaultClientConfigImpl</code>  |<br>| <code>IRule</code> \t\t    \t\t| 负载均衡规则，选择实例 \t\t  | <code>ZoneAvoidanceRule</code>  |<br>| <code>IPing</code>  \t\t\t\t\t| 筛选掉ping不通的实例  \t\t | <code>DumyPing</code>（该类什么不干，认为每个实例都可用，都能ping通）  |<br>| <code>ServerList&lt;Server&gt;</code>  \t\t| 交给Ribbon的实例列表  \t\t | <strong>Ribbon:</strong><code>ConfigurationBasedServerList</code><br><strong>Spring Cloud Alibaba:</strong><code>NacosServerList</code> |<br>| <code>ServerListFilter&lt;Server&gt;</code>  | 过滤掉不符合条件的实例 \t\t  | <code>ZonePreferenceServerListFilter</code>  |<br>| <code>ILoadBalancer</code> \t\t\t| Ribbon的入口  \t\t\t\t| <code>ZoneAwareLoadBalancer</code>  |<br>| <code>ServerListUpdater</code>  \t\t| 更新交给Ribbon的List的策略  \t| <code>PollingServerListUpdater</code>  |</p>\n<p><strong>这里的每一项都可以自定义</strong><br><code>IclientConfig</code>Ribbon支持非常灵活的配置就是由该组件提供的<br><code>IRule</code>为Ribbon提供规则，从而选择实例、该组件是最核心的组件<br><strong>举例：</strong><br>代码方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RibbonRuleConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> IRule <span class=\"hljs-title function_\">ribbonRulr</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomRule</span>();<br>    &#125;<br>\t<span class=\"hljs-meta\">@Bean</span><br>\t<span class=\"hljs-keyword\">public</span> IPing <span class=\"hljs-title function_\">iPing</span><span class=\"hljs-params\">()</span>&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PingUrl</span>();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>配置属性方式</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">&lt;clientName&gt;:</span><br> <span class=\"hljs-attr\">ribbon:</span><br>  <span class=\"hljs-attr\">NFLoadBalancerClassName:</span> <span class=\"hljs-comment\">#ILoadBalancer该接口实现类</span><br>  <span class=\"hljs-attr\">NFLoadBalancerRuleClassName:</span> <span class=\"hljs-comment\">#IRule该接口实现类</span><br>  <span class=\"hljs-attr\">NFLoadBalancerPingClassName:</span> <span class=\"hljs-comment\">#Iping该接口实现类</span><br>  <span class=\"hljs-attr\">NIWSServerListClassName:</span> <span class=\"hljs-comment\">#ServerList该接口实现类</span><br>  <span class=\"hljs-attr\">NIWSServerListFilterClassName:</span> <span class=\"hljs-comment\">#ServiceListFilter该接口实现类</span><br></code></pre></td></tr></table></figure>\n<p><strong>在这些属性中定义的类优先于使用<code>@RibbonClient(configuration=RibbonConfig.class)</code>Spring 定义的bean 以及由Spring Cloud Netflix提供的默认值。描述：配置文件中定义ribbon优先代码定义</strong></p>\n<h3 id=\"Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除\"><a href=\"#Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除\" class=\"headerlink\" title=\"Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除\"></a>Ribbon负载均衡的八种算法，其中<del><code>ResponseTimeWeightedRule</code></del>已废除</h3><table>\n<thead>\n<tr>\n<th>规则名称</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>AvailabilityFilteringRule</code></td>\n<td>过滤掉一直连接失败的被标记为circuit tripped（电路跳闸）的后端Service，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤Server的逻辑，其实就是检查status的记录的各个Server的运行状态</td>\n</tr>\n<tr>\n<td><code>BestAvailableRule</code></td>\n<td>选择一个最小的并发请求的Server，逐个考察Server，如果Server被tripped了，则跳过</td>\n</tr>\n<tr>\n<td><code>RandomRule</code></td>\n<td>随机选择一个Server</td>\n</tr>\n<tr>\n<td><del><code>ResponseTimeWeightedRule</code></del></td>\n<td>已废弃，作用同WeightedResponseTimeRule</td>\n</tr>\n<tr>\n<td><code>RetryRule</code></td>\n<td>对选定的负责均衡策略机上充值机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的Server</td>\n</tr>\n<tr>\n<td><code>RoundRobinRule</code></td>\n<td>轮询选择，轮询index，选择index对应位置Server</td>\n</tr>\n<tr>\n<td><code>WeightedResponseTimeRule</code></td>\n<td>根据相应时间加权，相应时间越长，权重越小，被选中的可能性越低</td>\n</tr>\n<tr>\n<td><code>ZoneAvoidanceRule</code></td>\n<td>（默认是这个）负责判断Server所Zone的性能和Server的可用性选择Server，在没有Zone的环境下，类似于轮询（<code>RoundRobinRule</code>）</td>\n</tr>\n</tbody></table>\n<h3 id=\"实现负载均衡-lt-细粒度-gt-配置-随机\"><a href=\"#实现负载均衡-lt-细粒度-gt-配置-随机\" class=\"headerlink\" title=\"实现负载均衡&lt;细粒度&gt;配置-随机\"></a>实现负载均衡&lt;细粒度&gt;配置-随机</h3><h4 id=\"方式一：JAVA代码方式\"><a href=\"#方式一：JAVA代码方式\" class=\"headerlink\" title=\"方式一：JAVA代码方式\"></a>方式一：JAVA代码方式</h4><p>首先定义RestTemplate，并且添加注解<code>@LoadBalanced</code>，这样RestTemplate就实现了负载均衡</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@LoadBalanced</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> RestTemplate <span class=\"hljs-title function_\">restTemplate</span><span class=\"hljs-params\">()</span> &#123;<br><span class=\"hljs-comment\">//template.getMessageConverters().set(1, new StringHttpMessageConverter(StandardCharsets.UTF_8));//解决中文乱码</span><br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在SpringBootApplication主类下添加配置类。该类主要作用于为哪个服务做负载均衡。默认的是轮训</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@RibbonClient(name = &quot;$&#123;服务名称&#125;&quot;, configuration = GoodsRibbonRuleConfig.class)</span><span class=\"hljs-comment\">//configuration: 指向负载均衡规则的配置类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GoodsRibbonConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>添加Ribbon的配置类，注意该类必须配置在<code>@SpringBootApplication</code>主类以外的包下。不然的话所有的服务都会按照这个规则来实现。会被所有的RibbonClient共享。主要是主类的主上下文和Ribbon的子上下文起冲突了。父子上下文不能重叠。相关连接：<a href=\"https://blog.csdn.net/qq_32588349/article/details/52097943\">https://blog.csdn.net/qq_32588349/article/details/52097943</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GoodsRibbonRuleConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> IRule <span class=\"hljs-title function_\">ribbonRulr</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomRule</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用自定义注解排除该类</p>\n<h4 id=\"方式一：配置属性方式\"><a href=\"#方式一：配置属性方式\" class=\"headerlink\" title=\"方式一：配置属性方式\"></a>方式一：配置属性方式</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server-1:</span> <span class=\"hljs-comment\"># 服务名称 Service-ID</span><br>  <span class=\"hljs-attr\">ribbon:</span><br>    <span class=\"hljs-comment\"># 属性配置方式【推荐】</span><br>    <span class=\"hljs-attr\">NFLoadBalancerRuleClassName:</span> <span class=\"hljs-string\">com.netflix.loadbalancer.RandomRule</span> <span class=\"hljs-comment\">#  配置文件配置负载均衡算法-我这里使用的是自定义的Ribbon的负载均衡算法，默认</span><br></code></pre></td></tr></table></figure>\n<p><strong>优先级：配置（不会影响其他服务）&gt;(大于) 硬编码（类得写在SpringBoot启动类包外，不然会影响其他服务）</strong></p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><table>\n<thead>\n<tr>\n<th>配置方式</th>\n<th>有点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码配置</td>\n<td>基于代码，更加灵活</td>\n<td>有坑（父子上下文）<br> 线上修改得重新打包，发布</td>\n</tr>\n<tr>\n<td>属性配置</td>\n<td>易上手 配置更加直观 <br> 线上修改无需重新打包，发布 <br> <strong>优先级更高</strong></td>\n<td>极端场景下没有配置配置方式灵活</td>\n</tr>\n</tbody></table>\n<h3 id=\"实现负载均衡-lt-全局-gt-配置-随机\"><a href=\"#实现负载均衡-lt-全局-gt-配置-随机\" class=\"headerlink\" title=\"实现负载均衡&lt;全局&gt;配置-随机\"></a>实现负载均衡&lt;全局&gt;配置-随机</h3><h4 id=\"方式一：Ribbon的配置类定义在主类下\"><a href=\"#方式一：Ribbon的配置类定义在主类下\" class=\"headerlink\" title=\"方式一：Ribbon的配置类定义在主类下\"></a>方式一：Ribbon的配置类定义在主类下</h4><p><del>让ComponentScan上下文重叠（<strong>强烈不建议使用</strong>）</del></p>\n<h4 id=\"方式二：\"><a href=\"#方式二：\" class=\"headerlink\" title=\"方式二：\"></a>方式二：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@RibbonClients(defaultConfiguration = GoodsRibbonRuleConfig.class)</span><span class=\"hljs-comment\">//Ribbon负载均衡全局粒度配置（所有服务都按照这个配置）</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RibbonConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Ribbon饥饿加载\"><a href=\"#Ribbon饥饿加载\" class=\"headerlink\" title=\"Ribbon饥饿加载\"></a>Ribbon饥饿加载</h3><blockquote>\n<p>默认情况下Ribbon是懒加载的。当服务起动好之后，第一次请求是非常慢的，第二次之后就快很多。</p>\n</blockquote>\n<h4 id=\"解决方式：开启饥饿加载\"><a href=\"#解决方式：开启饥饿加载\" class=\"headerlink\" title=\"解决方式：开启饥饿加载\"></a>解决方式：开启饥饿加载</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">ribbon:</span><br> <span class=\"hljs-attr\">eager-load:</span><br>  <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#开启饥饿加载</span><br>  <span class=\"hljs-attr\">clients:</span> <span class=\"hljs-string\">server-1,server-2,server-3</span> <span class=\"hljs-comment\">#为哪些服务的名称开启饥饿加载,多个用逗号分隔</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Ribbon组成\"><a href=\"#Ribbon组成\" class=\"headerlink\" title=\"Ribbon组成\"></a>Ribbon组成</h3><p>| 接口  \t\t\t\t\t   | 作用  \t\t\t\t\t\t| 默认值  |<br>| ———— \t\t\t\t| ———— \t\t\t\t\t| ———— |<br>| <code>IclientConfig</code>  \t\t\t| 读取配置  \t\t\t\t\t| <code>DefaultClientConfigImpl</code>  |<br>| <code>IRule</code> \t\t    \t\t| 负载均衡规则，选择实例 \t\t  | <code>ZoneAvoidanceRule</code>  |<br>| <code>IPing</code>  \t\t\t\t\t| 筛选掉ping不通的实例  \t\t | <code>DumyPing</code>（该类什么不干，认为每个实例都可用，都能ping通）  |<br>| <code>ServerList&lt;Server&gt;</code>  \t\t| 交给Ribbon的实例列表  \t\t | <strong>Ribbon:</strong><code>ConfigurationBasedServerList</code><br><strong>Spring Cloud Alibaba:</strong><code>NacosServerList</code> |<br>| <code>ServerListFilter&lt;Server&gt;</code>  | 过滤掉不符合条件的实例 \t\t  | <code>ZonePreferenceServerListFilter</code>  |<br>| <code>ILoadBalancer</code> \t\t\t| Ribbon的入口  \t\t\t\t| <code>ZoneAwareLoadBalancer</code>  |<br>| <code>ServerListUpdater</code>  \t\t| 更新交给Ribbon的List的策略  \t| <code>PollingServerListUpdater</code>  |</p>\n<p><strong>这里的每一项都可以自定义</strong><br><code>IclientConfig</code>Ribbon支持非常灵活的配置就是由该组件提供的<br><code>IRule</code>为Ribbon提供规则，从而选择实例、该组件是最核心的组件<br><strong>举例：</strong><br>代码方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RibbonRuleConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> IRule <span class=\"hljs-title function_\">ribbonRulr</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomRule</span>();<br>    &#125;<br>\t<span class=\"hljs-meta\">@Bean</span><br>\t<span class=\"hljs-keyword\">public</span> IPing <span class=\"hljs-title function_\">iPing</span><span class=\"hljs-params\">()</span>&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PingUrl</span>();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>配置属性方式</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">&lt;clientName&gt;:</span><br> <span class=\"hljs-attr\">ribbon:</span><br>  <span class=\"hljs-attr\">NFLoadBalancerClassName:</span> <span class=\"hljs-comment\">#ILoadBalancer该接口实现类</span><br>  <span class=\"hljs-attr\">NFLoadBalancerRuleClassName:</span> <span class=\"hljs-comment\">#IRule该接口实现类</span><br>  <span class=\"hljs-attr\">NFLoadBalancerPingClassName:</span> <span class=\"hljs-comment\">#Iping该接口实现类</span><br>  <span class=\"hljs-attr\">NIWSServerListClassName:</span> <span class=\"hljs-comment\">#ServerList该接口实现类</span><br>  <span class=\"hljs-attr\">NIWSServerListFilterClassName:</span> <span class=\"hljs-comment\">#ServiceListFilter该接口实现类</span><br></code></pre></td></tr></table></figure>\n<p><strong>在这些属性中定义的类优先于使用<code>@RibbonClient(configuration=RibbonConfig.class)</code>Spring 定义的bean 以及由Spring Cloud Netflix提供的默认值。描述：配置文件中定义ribbon优先代码定义</strong></p>\n<h3 id=\"Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除\"><a href=\"#Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除\" class=\"headerlink\" title=\"Ribbon负载均衡的八种算法，其中ResponseTimeWeightedRule已废除\"></a>Ribbon负载均衡的八种算法，其中<del><code>ResponseTimeWeightedRule</code></del>已废除</h3><table>\n<thead>\n<tr>\n<th>规则名称</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>AvailabilityFilteringRule</code></td>\n<td>过滤掉一直连接失败的被标记为circuit tripped（电路跳闸）的后端Service，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤Server的逻辑，其实就是检查status的记录的各个Server的运行状态</td>\n</tr>\n<tr>\n<td><code>BestAvailableRule</code></td>\n<td>选择一个最小的并发请求的Server，逐个考察Server，如果Server被tripped了，则跳过</td>\n</tr>\n<tr>\n<td><code>RandomRule</code></td>\n<td>随机选择一个Server</td>\n</tr>\n<tr>\n<td><del><code>ResponseTimeWeightedRule</code></del></td>\n<td>已废弃，作用同WeightedResponseTimeRule</td>\n</tr>\n<tr>\n<td><code>RetryRule</code></td>\n<td>对选定的负责均衡策略机上充值机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的Server</td>\n</tr>\n<tr>\n<td><code>RoundRobinRule</code></td>\n<td>轮询选择，轮询index，选择index对应位置Server</td>\n</tr>\n<tr>\n<td><code>WeightedResponseTimeRule</code></td>\n<td>根据相应时间加权，相应时间越长，权重越小，被选中的可能性越低</td>\n</tr>\n<tr>\n<td><code>ZoneAvoidanceRule</code></td>\n<td>（默认是这个）负责判断Server所Zone的性能和Server的可用性选择Server，在没有Zone的环境下，类似于轮询（<code>RoundRobinRule</code>）</td>\n</tr>\n</tbody></table>\n<h3 id=\"实现负载均衡-lt-细粒度-gt-配置-随机\"><a href=\"#实现负载均衡-lt-细粒度-gt-配置-随机\" class=\"headerlink\" title=\"实现负载均衡&lt;细粒度&gt;配置-随机\"></a>实现负载均衡&lt;细粒度&gt;配置-随机</h3><h4 id=\"方式一：JAVA代码方式\"><a href=\"#方式一：JAVA代码方式\" class=\"headerlink\" title=\"方式一：JAVA代码方式\"></a>方式一：JAVA代码方式</h4><p>首先定义RestTemplate，并且添加注解<code>@LoadBalanced</code>，这样RestTemplate就实现了负载均衡</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@LoadBalanced</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> RestTemplate <span class=\"hljs-title function_\">restTemplate</span><span class=\"hljs-params\">()</span> &#123;<br><span class=\"hljs-comment\">//template.getMessageConverters().set(1, new StringHttpMessageConverter(StandardCharsets.UTF_8));//解决中文乱码</span><br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在SpringBootApplication主类下添加配置类。该类主要作用于为哪个服务做负载均衡。默认的是轮训</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@RibbonClient(name = &quot;$&#123;服务名称&#125;&quot;, configuration = GoodsRibbonRuleConfig.class)</span><span class=\"hljs-comment\">//configuration: 指向负载均衡规则的配置类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GoodsRibbonConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>添加Ribbon的配置类，注意该类必须配置在<code>@SpringBootApplication</code>主类以外的包下。不然的话所有的服务都会按照这个规则来实现。会被所有的RibbonClient共享。主要是主类的主上下文和Ribbon的子上下文起冲突了。父子上下文不能重叠。相关连接：<a href=\"https://blog.csdn.net/qq_32588349/article/details/52097943\">https://blog.csdn.net/qq_32588349/article/details/52097943</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GoodsRibbonRuleConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> IRule <span class=\"hljs-title function_\">ribbonRulr</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RandomRule</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用自定义注解排除该类</p>\n<h4 id=\"方式一：配置属性方式\"><a href=\"#方式一：配置属性方式\" class=\"headerlink\" title=\"方式一：配置属性方式\"></a>方式一：配置属性方式</h4><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server-1:</span> <span class=\"hljs-comment\"># 服务名称 Service-ID</span><br>  <span class=\"hljs-attr\">ribbon:</span><br>    <span class=\"hljs-comment\"># 属性配置方式【推荐】</span><br>    <span class=\"hljs-attr\">NFLoadBalancerRuleClassName:</span> <span class=\"hljs-string\">com.netflix.loadbalancer.RandomRule</span> <span class=\"hljs-comment\">#  配置文件配置负载均衡算法-我这里使用的是自定义的Ribbon的负载均衡算法，默认</span><br></code></pre></td></tr></table></figure>\n<p><strong>优先级：配置（不会影响其他服务）&gt;(大于) 硬编码（类得写在SpringBoot启动类包外，不然会影响其他服务）</strong></p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><table>\n<thead>\n<tr>\n<th>配置方式</th>\n<th>有点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码配置</td>\n<td>基于代码，更加灵活</td>\n<td>有坑（父子上下文）<br> 线上修改得重新打包，发布</td>\n</tr>\n<tr>\n<td>属性配置</td>\n<td>易上手 配置更加直观 <br> 线上修改无需重新打包，发布 <br> <strong>优先级更高</strong></td>\n<td>极端场景下没有配置配置方式灵活</td>\n</tr>\n</tbody></table>\n<h3 id=\"实现负载均衡-lt-全局-gt-配置-随机\"><a href=\"#实现负载均衡-lt-全局-gt-配置-随机\" class=\"headerlink\" title=\"实现负载均衡&lt;全局&gt;配置-随机\"></a>实现负载均衡&lt;全局&gt;配置-随机</h3><h4 id=\"方式一：Ribbon的配置类定义在主类下\"><a href=\"#方式一：Ribbon的配置类定义在主类下\" class=\"headerlink\" title=\"方式一：Ribbon的配置类定义在主类下\"></a>方式一：Ribbon的配置类定义在主类下</h4><p><del>让ComponentScan上下文重叠（<strong>强烈不建议使用</strong>）</del></p>\n<h4 id=\"方式二：\"><a href=\"#方式二：\" class=\"headerlink\" title=\"方式二：\"></a>方式二：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@RibbonClients(defaultConfiguration = GoodsRibbonRuleConfig.class)</span><span class=\"hljs-comment\">//Ribbon负载均衡全局粒度配置（所有服务都按照这个配置）</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RibbonConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"【SpringBoot2】整合Redis多数据源","_content":"**配置文件属性**\n```yaml\nspring:\n  redis:\n    database: 1\n    host: 192.168.50.144\n    port: 6379\n    password:\n    timeout: 600 #Springboot2.0 不能设置为0\n    lettuce:\n      pool:\n        max-active: 50\n        max-wait: -1\n        max-idle: 8\n        min-idle: 0\n  redis2:\n    database: 2\n    host: 192.168.50.144\n    port: 6379\n    password:\n    timeout: 600\n```\n**配置类**\n```java\n@EnableCaching\n@Configuration\npublic class RedisDevConfiguration {\n    @Bean(name = \"redisDevTemplate\")\n    public StringRedisTemplate redisTemplate(@Value(\"${spring.redis.host}\") String hostName,\n                                             @Value(\"${spring.redis.port}\") int port, @Value(\"${spring.redis.password}\") String password,\n                                             @Value(\"${spring.redis.lettuce.pool.max-idle}\") int maxIdle, @Value(\"${spring.redis.lettuce.pool.max-active}\") int maxTotal,\n                                             @Value(\"${spring.redis.database}\") int index, @Value(\"${spring.redis.lettuce.pool.max-wait}\") long maxWaitMillis,@Value(\"${spring.redis.lettuce.pool.min-idle}\") int minIdle) {\n        StringRedisTemplate temple = new StringRedisTemplate();\n        temple.setConnectionFactory(\n                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));\n\n        return temple;\n    }\n\n\n    @Bean(name = \"redisUatTemplate\")\n    public StringRedisTemplate redisUatTemplate(@Value(\"${spring.redis2.host}\") String hostName,\n                                             @Value(\"${spring.redis2.port}\") int port, @Value(\"${spring.redis2.password}\") String password,\n                                             @Value(\"${spring.redis.lettuce.pool.max-idle}\") int maxIdle, @Value(\"${spring.redis.lettuce.pool.max-active}\") int maxTotal,\n                                             @Value(\"${spring.redis2.database}\") int index, @Value(\"${spring.redis.lettuce.pool.max-wait}\") long maxWaitMillis,@Value(\"${spring.redis.lettuce.pool.min-idle}\") int minIdle) {\n        StringRedisTemplate temple = new StringRedisTemplate();\n        temple.setConnectionFactory(\n                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));\n\n        return temple;\n    }\n\n    public RedisConnectionFactory connectionFactory(String hostName, int port, String password, int maxIdle,\n                                                    int maxTotal, int index, long maxWaitMillis,int minIdle) {\n        JedisConnectionFactory jedis = new JedisConnectionFactory();\n        jedis.setHostName(hostName);\n        jedis.setPort(port);\n        if (StringUtils.isNotEmpty(password)) {\n            jedis.setPassword(password);\n        }\n        if (index != 0) {\n            jedis.setDatabase(index);\n        }\n        jedis.setPoolConfig(poolCofig(maxIdle, maxTotal, maxWaitMillis,minIdle));\n        // 初始化连接pool\n        jedis.afterPropertiesSet();\n        RedisConnectionFactory factory = jedis;\n\n        return factory;\n    }\n\n    public JedisPoolConfig poolCofig(int maxIdle, int maxTotal, long maxWaitMillis,int minIdle) {\n        JedisPoolConfig poolCofig = new JedisPoolConfig();\n        poolCofig.setMaxIdle(maxIdle);\n        poolCofig.setMaxTotal(maxTotal);\n        poolCofig.setMaxWaitMillis(maxWaitMillis);\n        poolCofig.setMinIdle(minIdle);\n        return poolCofig;\n    }\n}\n```\n**如何使用**\n```java\n\t@Resource(name = \"redisDevTemplate\")\n\tprivate StringRedisTemplate template;\n\n\t@Resource(name = \"redisUatTemplate\")\n\tprivate StringRedisTemplate lockTemplate;\n```\n","source":"_posts/SpringBoot/【SpringBoot2】整合Redis多数据源.md","raw":"---\ntitle: 【SpringBoot2】整合Redis多数据源\ntags:\n  - SpringBoot\n  - Redis\ncategories:\n  - SpringBoot\n---\n**配置文件属性**\n```yaml\nspring:\n  redis:\n    database: 1\n    host: 192.168.50.144\n    port: 6379\n    password:\n    timeout: 600 #Springboot2.0 不能设置为0\n    lettuce:\n      pool:\n        max-active: 50\n        max-wait: -1\n        max-idle: 8\n        min-idle: 0\n  redis2:\n    database: 2\n    host: 192.168.50.144\n    port: 6379\n    password:\n    timeout: 600\n```\n**配置类**\n```java\n@EnableCaching\n@Configuration\npublic class RedisDevConfiguration {\n    @Bean(name = \"redisDevTemplate\")\n    public StringRedisTemplate redisTemplate(@Value(\"${spring.redis.host}\") String hostName,\n                                             @Value(\"${spring.redis.port}\") int port, @Value(\"${spring.redis.password}\") String password,\n                                             @Value(\"${spring.redis.lettuce.pool.max-idle}\") int maxIdle, @Value(\"${spring.redis.lettuce.pool.max-active}\") int maxTotal,\n                                             @Value(\"${spring.redis.database}\") int index, @Value(\"${spring.redis.lettuce.pool.max-wait}\") long maxWaitMillis,@Value(\"${spring.redis.lettuce.pool.min-idle}\") int minIdle) {\n        StringRedisTemplate temple = new StringRedisTemplate();\n        temple.setConnectionFactory(\n                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));\n\n        return temple;\n    }\n\n\n    @Bean(name = \"redisUatTemplate\")\n    public StringRedisTemplate redisUatTemplate(@Value(\"${spring.redis2.host}\") String hostName,\n                                             @Value(\"${spring.redis2.port}\") int port, @Value(\"${spring.redis2.password}\") String password,\n                                             @Value(\"${spring.redis.lettuce.pool.max-idle}\") int maxIdle, @Value(\"${spring.redis.lettuce.pool.max-active}\") int maxTotal,\n                                             @Value(\"${spring.redis2.database}\") int index, @Value(\"${spring.redis.lettuce.pool.max-wait}\") long maxWaitMillis,@Value(\"${spring.redis.lettuce.pool.min-idle}\") int minIdle) {\n        StringRedisTemplate temple = new StringRedisTemplate();\n        temple.setConnectionFactory(\n                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));\n\n        return temple;\n    }\n\n    public RedisConnectionFactory connectionFactory(String hostName, int port, String password, int maxIdle,\n                                                    int maxTotal, int index, long maxWaitMillis,int minIdle) {\n        JedisConnectionFactory jedis = new JedisConnectionFactory();\n        jedis.setHostName(hostName);\n        jedis.setPort(port);\n        if (StringUtils.isNotEmpty(password)) {\n            jedis.setPassword(password);\n        }\n        if (index != 0) {\n            jedis.setDatabase(index);\n        }\n        jedis.setPoolConfig(poolCofig(maxIdle, maxTotal, maxWaitMillis,minIdle));\n        // 初始化连接pool\n        jedis.afterPropertiesSet();\n        RedisConnectionFactory factory = jedis;\n\n        return factory;\n    }\n\n    public JedisPoolConfig poolCofig(int maxIdle, int maxTotal, long maxWaitMillis,int minIdle) {\n        JedisPoolConfig poolCofig = new JedisPoolConfig();\n        poolCofig.setMaxIdle(maxIdle);\n        poolCofig.setMaxTotal(maxTotal);\n        poolCofig.setMaxWaitMillis(maxWaitMillis);\n        poolCofig.setMinIdle(minIdle);\n        return poolCofig;\n    }\n}\n```\n**如何使用**\n```java\n\t@Resource(name = \"redisDevTemplate\")\n\tprivate StringRedisTemplate template;\n\n\t@Resource(name = \"redisUatTemplate\")\n\tprivate StringRedisTemplate lockTemplate;\n```\n","slug":"SpringBoot/【SpringBoot2】整合Redis多数据源","published":1,"date":"2022-11-28T10:51:16.627Z","updated":"2022-11-28T10:57:23.998Z","_id":"clb0oel85000a6oiagh3b40l7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>配置文件属性</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.50</span><span class=\"hljs-number\">.144</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">password:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-comment\">#Springboot2.0 不能设置为0</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">50</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">redis2:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">2</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.50</span><span class=\"hljs-number\">.144</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">password:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span><br></code></pre></td></tr></table></figure>\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisDevConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean(name = &quot;redisDevTemplate&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> StringRedisTemplate <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span> String hostName,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span> <span class=\"hljs-type\">int</span> port, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span> String password,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxIdle, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-active&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxTotal,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.database&#125;&quot;)</span> <span class=\"hljs-type\">int</span> index, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-wait&#125;&quot;)</span> <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.min-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">StringRedisTemplate</span> <span class=\"hljs-variable\">temple</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisTemplate</span>();<br>        temple.setConnectionFactory(<br>                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));<br><br>        <span class=\"hljs-keyword\">return</span> temple;<br>    &#125;<br><br><br>    <span class=\"hljs-meta\">@Bean(name = &quot;redisUatTemplate&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> StringRedisTemplate <span class=\"hljs-title function_\">redisUatTemplate</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.host&#125;&quot;)</span> String hostName,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.port&#125;&quot;)</span> <span class=\"hljs-type\">int</span> port, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.password&#125;&quot;)</span> String password,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxIdle, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-active&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxTotal,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.database&#125;&quot;)</span> <span class=\"hljs-type\">int</span> index, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-wait&#125;&quot;)</span> <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.min-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">StringRedisTemplate</span> <span class=\"hljs-variable\">temple</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisTemplate</span>();<br>        temple.setConnectionFactory(<br>                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));<br><br>        <span class=\"hljs-keyword\">return</span> temple;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> RedisConnectionFactory <span class=\"hljs-title function_\">connectionFactory</span><span class=\"hljs-params\">(String hostName, <span class=\"hljs-type\">int</span> port, String password, <span class=\"hljs-type\">int</span> maxIdle,</span><br><span class=\"hljs-params\">                                                    <span class=\"hljs-type\">int</span> maxTotal, <span class=\"hljs-type\">int</span> index, <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">JedisConnectionFactory</span> <span class=\"hljs-variable\">jedis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JedisConnectionFactory</span>();<br>        jedis.setHostName(hostName);<br>        jedis.setPort(port);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(password)) &#123;<br>            jedis.setPassword(password);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (index != <span class=\"hljs-number\">0</span>) &#123;<br>            jedis.setDatabase(index);<br>        &#125;<br>        jedis.setPoolConfig(poolCofig(maxIdle, maxTotal, maxWaitMillis,minIdle));<br>        <span class=\"hljs-comment\">// 初始化连接pool</span><br>        jedis.afterPropertiesSet();<br>        <span class=\"hljs-type\">RedisConnectionFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> jedis;<br><br>        <span class=\"hljs-keyword\">return</span> factory;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> JedisPoolConfig <span class=\"hljs-title function_\">poolCofig</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> maxIdle, <span class=\"hljs-type\">int</span> maxTotal, <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">JedisPoolConfig</span> <span class=\"hljs-variable\">poolCofig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JedisPoolConfig</span>();<br>        poolCofig.setMaxIdle(maxIdle);<br>        poolCofig.setMaxTotal(maxTotal);<br>        poolCofig.setMaxWaitMillis(maxWaitMillis);<br>        poolCofig.setMinIdle(minIdle);<br>        <span class=\"hljs-keyword\">return</span> poolCofig;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Resource(name = &quot;redisDevTemplate&quot;)</span><br><span class=\"hljs-keyword\">private</span> StringRedisTemplate template;<br><br><span class=\"hljs-meta\">@Resource(name = &quot;redisUatTemplate&quot;)</span><br><span class=\"hljs-keyword\">private</span> StringRedisTemplate lockTemplate;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>配置文件属性</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.50</span><span class=\"hljs-number\">.144</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">password:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-comment\">#Springboot2.0 不能设置为0</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">50</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attr\">redis2:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">2</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.50</span><span class=\"hljs-number\">.144</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">password:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span><br></code></pre></td></tr></table></figure>\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisDevConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean(name = &quot;redisDevTemplate&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> StringRedisTemplate <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span> String hostName,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span> <span class=\"hljs-type\">int</span> port, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.password&#125;&quot;)</span> String password,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxIdle, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-active&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxTotal,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.database&#125;&quot;)</span> <span class=\"hljs-type\">int</span> index, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-wait&#125;&quot;)</span> <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.min-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">StringRedisTemplate</span> <span class=\"hljs-variable\">temple</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisTemplate</span>();<br>        temple.setConnectionFactory(<br>                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));<br><br>        <span class=\"hljs-keyword\">return</span> temple;<br>    &#125;<br><br><br>    <span class=\"hljs-meta\">@Bean(name = &quot;redisUatTemplate&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> StringRedisTemplate <span class=\"hljs-title function_\">redisUatTemplate</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.host&#125;&quot;)</span> String hostName,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.port&#125;&quot;)</span> <span class=\"hljs-type\">int</span> port, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.password&#125;&quot;)</span> String password,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxIdle, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-active&#125;&quot;)</span> <span class=\"hljs-type\">int</span> maxTotal,</span><br><span class=\"hljs-params\">                                             <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis2.database&#125;&quot;)</span> <span class=\"hljs-type\">int</span> index, <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.max-wait&#125;&quot;)</span> <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-meta\">@Value(&quot;$&#123;spring.redis.lettuce.pool.min-idle&#125;&quot;)</span> <span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">StringRedisTemplate</span> <span class=\"hljs-variable\">temple</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisTemplate</span>();<br>        temple.setConnectionFactory(<br>                connectionFactory(hostName, port, password, maxIdle, maxTotal, index, maxWaitMillis,minIdle));<br><br>        <span class=\"hljs-keyword\">return</span> temple;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> RedisConnectionFactory <span class=\"hljs-title function_\">connectionFactory</span><span class=\"hljs-params\">(String hostName, <span class=\"hljs-type\">int</span> port, String password, <span class=\"hljs-type\">int</span> maxIdle,</span><br><span class=\"hljs-params\">                                                    <span class=\"hljs-type\">int</span> maxTotal, <span class=\"hljs-type\">int</span> index, <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">JedisConnectionFactory</span> <span class=\"hljs-variable\">jedis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JedisConnectionFactory</span>();<br>        jedis.setHostName(hostName);<br>        jedis.setPort(port);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(password)) &#123;<br>            jedis.setPassword(password);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (index != <span class=\"hljs-number\">0</span>) &#123;<br>            jedis.setDatabase(index);<br>        &#125;<br>        jedis.setPoolConfig(poolCofig(maxIdle, maxTotal, maxWaitMillis,minIdle));<br>        <span class=\"hljs-comment\">// 初始化连接pool</span><br>        jedis.afterPropertiesSet();<br>        <span class=\"hljs-type\">RedisConnectionFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> jedis;<br><br>        <span class=\"hljs-keyword\">return</span> factory;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> JedisPoolConfig <span class=\"hljs-title function_\">poolCofig</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> maxIdle, <span class=\"hljs-type\">int</span> maxTotal, <span class=\"hljs-type\">long</span> maxWaitMillis,<span class=\"hljs-type\">int</span> minIdle)</span> &#123;<br>        <span class=\"hljs-type\">JedisPoolConfig</span> <span class=\"hljs-variable\">poolCofig</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JedisPoolConfig</span>();<br>        poolCofig.setMaxIdle(maxIdle);<br>        poolCofig.setMaxTotal(maxTotal);<br>        poolCofig.setMaxWaitMillis(maxWaitMillis);<br>        poolCofig.setMinIdle(minIdle);<br>        <span class=\"hljs-keyword\">return</span> poolCofig;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Resource(name = &quot;redisDevTemplate&quot;)</span><br><span class=\"hljs-keyword\">private</span> StringRedisTemplate template;<br><br><span class=\"hljs-meta\">@Resource(name = &quot;redisUatTemplate&quot;)</span><br><span class=\"hljs-keyword\">private</span> StringRedisTemplate lockTemplate;<br></code></pre></td></tr></table></figure>\n"},{"title":"【SpringBoot2】整合Redis缓存","_content":"遵循SpringBoot三板斧\n**第一步加依赖**\n```pom\n<!-- Redis -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<!-- redis依赖commons-pool 这个依赖一定要添加 -->\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-pool2</artifactId>\n\t<version>2.6.0</version>\n</dependency>\n```\n**第二步写注解**\n```java\n@EnableCaching//开启缓存支持\n```\n**第三步写配置**\n```yml\nspring:\n  redis:\n    database: 0\n    host: 192.168.1.11\n    port: 6379\n    password:\n    timeout: 600\n    lettuce:\n      pool:\n        max-active: 50\n        max-wait: -1\n        max-idle: 8\n        min-idle: 0\n```\n**编写Redis配置类**\n```java\n/**\n * @Author: zc\n * @Date: 2019/11/3 14:12\n * @Description: SpringBoot2.0 Redis缓存配置\n * @EnableCaching:开启缓存支持\n */\n@Slf4j\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Value(\"${sys.dataCaching.expireTime:0}\")\n    private int expireTime;\n\n    @Resource\n    private LettuceConnectionFactory lettuceConnectionFactory;\n\n    @Override\n    @Bean\n    public KeyGenerator keyGenerator() {//设置自定义key{ClassName + methodName + params}\n        return (target, method, params) -> {\n            StringBuilder sb = new StringBuilder();\n            sb.append(target.getClass().getName());\n            sb.append(\",Method:\");\n            sb.append(method.getName());\n            sb.append(\",Params[\");\n            for (int i = 0; i < params.length; i++) {\n                sb.append(params[i].toString());\n                if (i != (params.length - 1)) {\n                    sb.append(\",\");\n                }\n            }\n            sb.append(\"]\");\n            log.debug(\"Data Caching Redis Key : {}\", sb.toString());\n            return sb.toString();\n        };\n    }\n\t//自定义keyGenerator，Key生成器\n\t@Bean\n    public KeyGenerator updateByIdkeyGenerator() {\n        return (target, method, params) -> {\n            StringBuilder sb = new StringBuilder();\n            sb.append(target.getClass().getName());\n            sb.append(\",Method:\");\n            sb.append(\"getById\");\n            sb.append(\",Params[\");\n            try {\n                Field id = params[0].getClass().getDeclaredField(\"id\");\n                id.setAccessible(true);\n                sb.append(id.get(params[0]).toString());\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            } catch (NoSuchFieldException e) {\n                e.printStackTrace();\n            }\n            sb.append(\"]\");\n            log.debug(\"Data Caching Redis Key : {}\", sb.toString());\n            return sb.toString();\n        };\n    }\n\t//自定义keyGenerator，Key生成器\n    @Bean\n    public KeyGenerator deleteByIdkeyGenerator() {\n        return (target, method, params) -> {\n            StringBuilder sb = new StringBuilder();\n            sb.append(target.getClass().getName());\n            sb.append(\",Method:\");\n            sb.append(\"getById\");\n            sb.append(\",Params[\");\n            for (int i = 0; i < params.length; i++) {\n                sb.append(params[i].toString());\n                if (i != (params.length - 1)) {\n                    sb.append(\",\");\n                }\n            }\n            sb.append(\"]\");\n            log.debug(\"Data Caching Redis Key : {}\", sb.toString());\n            return sb.toString();\n        };\n    }\n\t\n\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {\n        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();\n        //设置缓存过期时间\n        if (expireTime > 0) {\n            log.info(\"Redis 缓存过期时间 : {}\", expireTime);\n            //设置缓存有效期 秒\n            redisCacheConfiguration.entryTtl(Duration.ofSeconds(expireTime));\n        } else {\n            log.info(\"Redis 未设置缓存过期时间\");\n        }\n        return RedisCacheManager\n                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))\n                .cacheDefaults(redisCacheConfiguration).build();\n    }\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {//创建RedisTemplate\n        // 设置序列化\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(\n                Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        // 配置redisTemplate\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<String, Object>();\n        redisTemplate.setConnectionFactory(lettuceConnectionFactory);\n        RedisSerializer<?> stringSerializer = new StringRedisSerializer();\n        // key序列化\n        redisTemplate.setKeySerializer(stringSerializer);\n        // value序列化\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        // Hash key序列化\n        redisTemplate.setHashKeySerializer(stringSerializer);\n        // Hash value序列化\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n```\n**如何使用查询缓存**\n```java\n@CacheConfig(cacheNames = \"demoDao\")\n@Component\npublic class DemoDao implements IDemoDAO<> {\n    @Autowired\n    DemoMapper mapper;\n\n\t//用默认配置的keyGenerator\n    @Cacheable\n    @Override\n    public Demo getById(Integer id) {\n        return mapper.getById(id);\n    }\n\t//使用配置的keyGenerator，清空缓存\n\t@CacheEvict(keyGenerator = \"updateByIdkeyGenerator\")\n    @Override\n    public int update(T entity) {\n        return mapper.update(entity);\n    }\n\t//使用配置的keyGenerator，清空缓存\n\t@CacheEvict(keyGenerator = \"deleteByIdkeyGenerator\")\n    @Override\n    public int deleteById(Integer id) {\n        return mapper.deleteById(id);\n    }\n}\n```\n","source":"_posts/SpringBoot/【SpringBoot2】整合Redis缓存.md","raw":"---\ntitle: 【SpringBoot2】整合Redis缓存\ntags:\n  - SpringBoot\n  - Redis\n  - 缓存\ncategories:\n  - SpringBoot\n---\n遵循SpringBoot三板斧\n**第一步加依赖**\n```pom\n<!-- Redis -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<!-- redis依赖commons-pool 这个依赖一定要添加 -->\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-pool2</artifactId>\n\t<version>2.6.0</version>\n</dependency>\n```\n**第二步写注解**\n```java\n@EnableCaching//开启缓存支持\n```\n**第三步写配置**\n```yml\nspring:\n  redis:\n    database: 0\n    host: 192.168.1.11\n    port: 6379\n    password:\n    timeout: 600\n    lettuce:\n      pool:\n        max-active: 50\n        max-wait: -1\n        max-idle: 8\n        min-idle: 0\n```\n**编写Redis配置类**\n```java\n/**\n * @Author: zc\n * @Date: 2019/11/3 14:12\n * @Description: SpringBoot2.0 Redis缓存配置\n * @EnableCaching:开启缓存支持\n */\n@Slf4j\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Value(\"${sys.dataCaching.expireTime:0}\")\n    private int expireTime;\n\n    @Resource\n    private LettuceConnectionFactory lettuceConnectionFactory;\n\n    @Override\n    @Bean\n    public KeyGenerator keyGenerator() {//设置自定义key{ClassName + methodName + params}\n        return (target, method, params) -> {\n            StringBuilder sb = new StringBuilder();\n            sb.append(target.getClass().getName());\n            sb.append(\",Method:\");\n            sb.append(method.getName());\n            sb.append(\",Params[\");\n            for (int i = 0; i < params.length; i++) {\n                sb.append(params[i].toString());\n                if (i != (params.length - 1)) {\n                    sb.append(\",\");\n                }\n            }\n            sb.append(\"]\");\n            log.debug(\"Data Caching Redis Key : {}\", sb.toString());\n            return sb.toString();\n        };\n    }\n\t//自定义keyGenerator，Key生成器\n\t@Bean\n    public KeyGenerator updateByIdkeyGenerator() {\n        return (target, method, params) -> {\n            StringBuilder sb = new StringBuilder();\n            sb.append(target.getClass().getName());\n            sb.append(\",Method:\");\n            sb.append(\"getById\");\n            sb.append(\",Params[\");\n            try {\n                Field id = params[0].getClass().getDeclaredField(\"id\");\n                id.setAccessible(true);\n                sb.append(id.get(params[0]).toString());\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            } catch (NoSuchFieldException e) {\n                e.printStackTrace();\n            }\n            sb.append(\"]\");\n            log.debug(\"Data Caching Redis Key : {}\", sb.toString());\n            return sb.toString();\n        };\n    }\n\t//自定义keyGenerator，Key生成器\n    @Bean\n    public KeyGenerator deleteByIdkeyGenerator() {\n        return (target, method, params) -> {\n            StringBuilder sb = new StringBuilder();\n            sb.append(target.getClass().getName());\n            sb.append(\",Method:\");\n            sb.append(\"getById\");\n            sb.append(\",Params[\");\n            for (int i = 0; i < params.length; i++) {\n                sb.append(params[i].toString());\n                if (i != (params.length - 1)) {\n                    sb.append(\",\");\n                }\n            }\n            sb.append(\"]\");\n            log.debug(\"Data Caching Redis Key : {}\", sb.toString());\n            return sb.toString();\n        };\n    }\n\t\n\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {\n        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();\n        //设置缓存过期时间\n        if (expireTime > 0) {\n            log.info(\"Redis 缓存过期时间 : {}\", expireTime);\n            //设置缓存有效期 秒\n            redisCacheConfiguration.entryTtl(Duration.ofSeconds(expireTime));\n        } else {\n            log.info(\"Redis 未设置缓存过期时间\");\n        }\n        return RedisCacheManager\n                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))\n                .cacheDefaults(redisCacheConfiguration).build();\n    }\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {//创建RedisTemplate\n        // 设置序列化\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(\n                Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        // 配置redisTemplate\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<String, Object>();\n        redisTemplate.setConnectionFactory(lettuceConnectionFactory);\n        RedisSerializer<?> stringSerializer = new StringRedisSerializer();\n        // key序列化\n        redisTemplate.setKeySerializer(stringSerializer);\n        // value序列化\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        // Hash key序列化\n        redisTemplate.setHashKeySerializer(stringSerializer);\n        // Hash value序列化\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n```\n**如何使用查询缓存**\n```java\n@CacheConfig(cacheNames = \"demoDao\")\n@Component\npublic class DemoDao implements IDemoDAO<> {\n    @Autowired\n    DemoMapper mapper;\n\n\t//用默认配置的keyGenerator\n    @Cacheable\n    @Override\n    public Demo getById(Integer id) {\n        return mapper.getById(id);\n    }\n\t//使用配置的keyGenerator，清空缓存\n\t@CacheEvict(keyGenerator = \"updateByIdkeyGenerator\")\n    @Override\n    public int update(T entity) {\n        return mapper.update(entity);\n    }\n\t//使用配置的keyGenerator，清空缓存\n\t@CacheEvict(keyGenerator = \"deleteByIdkeyGenerator\")\n    @Override\n    public int deleteById(Integer id) {\n        return mapper.deleteById(id);\n    }\n}\n```\n","slug":"SpringBoot/【SpringBoot2】整合Redis缓存","published":1,"date":"2022-11-28T10:50:06.361Z","updated":"2022-11-28T10:57:23.997Z","_id":"clb0oel87000c6oia0n1k8p6u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>遵循SpringBoot三板斧<br><strong>第一步加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- Redis --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;!-- redis依赖commons-pool 这个依赖一定要添加 --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>\t&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;<br>\t&lt;version&gt;2.6.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步写注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableCaching</span><span class=\"hljs-comment\">//开启缓存支持</span><br></code></pre></td></tr></table></figure>\n<p><strong>第三步写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.11</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">password:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">50</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p><strong>编写Redis配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span>: zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2019/11/3 14:12</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>: SpringBoot2.0 Redis缓存配置</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@EnableCaching</span>:开启缓存支持</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">CachingConfigurerSupport</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;sys.dataCaching.expireTime:0&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> expireTime;<br><br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> LettuceConnectionFactory lettuceConnectionFactory;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> KeyGenerator <span class=\"hljs-title function_\">keyGenerator</span><span class=\"hljs-params\">()</span> &#123;<span class=\"hljs-comment\">//设置自定义key&#123;ClassName + methodName + params&#125;</span><br>        <span class=\"hljs-keyword\">return</span> (target, method, params) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Method:&quot;</span>);<br>            sb.append(method.getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Params[&quot;</span>);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; params.length; i++) &#123;<br>                sb.append(params[i].toString());<br>                <span class=\"hljs-keyword\">if</span> (i != (params.length - <span class=\"hljs-number\">1</span>)) &#123;<br>                    sb.append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            sb.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class=\"hljs-keyword\">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br>\t<span class=\"hljs-comment\">//自定义keyGenerator，Key生成器</span><br>\t<span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> KeyGenerator <span class=\"hljs-title function_\">updateByIdkeyGenerator</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (target, method, params) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Method:&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;getById&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;,Params[&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> params[<span class=\"hljs-number\">0</span>].getClass().getDeclaredField(<span class=\"hljs-string\">&quot;id&quot;</span>);<br>                id.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                sb.append(id.get(params[<span class=\"hljs-number\">0</span>]).toString());<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (NoSuchFieldException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            sb.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class=\"hljs-keyword\">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br>\t<span class=\"hljs-comment\">//自定义keyGenerator，Key生成器</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> KeyGenerator <span class=\"hljs-title function_\">deleteByIdkeyGenerator</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (target, method, params) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Method:&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;getById&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;,Params[&quot;</span>);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; params.length; i++) &#123;<br>                sb.append(params[i].toString());<br>                <span class=\"hljs-keyword\">if</span> (i != (params.length - <span class=\"hljs-number\">1</span>)) &#123;<br>                    sb.append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            sb.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class=\"hljs-keyword\">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br>\t<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> CacheManager <span class=\"hljs-title function_\">cacheManager</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class=\"hljs-type\">RedisCacheConfiguration</span> <span class=\"hljs-variable\">redisCacheConfiguration</span> <span class=\"hljs-operator\">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        <span class=\"hljs-comment\">//设置缓存过期时间</span><br>        <span class=\"hljs-keyword\">if</span> (expireTime &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            log.info(<span class=\"hljs-string\">&quot;Redis 缓存过期时间 : &#123;&#125;&quot;</span>, expireTime);<br>            <span class=\"hljs-comment\">//设置缓存有效期 秒</span><br>            redisCacheConfiguration.entryTtl(Duration.ofSeconds(expireTime));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            log.info(<span class=\"hljs-string\">&quot;Redis 未设置缓存过期时间&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> RedisCacheManager<br>                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))<br>                .cacheDefaults(redisCacheConfiguration).build();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory factory)</span> &#123;<span class=\"hljs-comment\">//创建RedisTemplate</span><br>        <span class=\"hljs-comment\">// 设置序列化</span><br>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(<br>                Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">om</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class=\"hljs-comment\">// 配置redisTemplate</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;String, Object&gt;();<br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        RedisSerializer&lt;?&gt; stringSerializer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-comment\">// key序列化</span><br>        redisTemplate.setKeySerializer(stringSerializer);<br>        <span class=\"hljs-comment\">// value序列化</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class=\"hljs-comment\">// Hash key序列化</span><br>        redisTemplate.setHashKeySerializer(stringSerializer);<br>        <span class=\"hljs-comment\">// Hash value序列化</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>如何使用查询缓存</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@CacheConfig(cacheNames = &quot;demoDao&quot;)</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoDao</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IDemoDAO</span>&lt;&gt; &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    DemoMapper mapper;<br><br>\t<span class=\"hljs-comment\">//用默认配置的keyGenerator</span><br>    <span class=\"hljs-meta\">@Cacheable</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Demo <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> mapper.getById(id);<br>    &#125;<br>\t<span class=\"hljs-comment\">//使用配置的keyGenerator，清空缓存</span><br>\t<span class=\"hljs-meta\">@CacheEvict(keyGenerator = &quot;updateByIdkeyGenerator&quot;)</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(T entity)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> mapper.update(entity);<br>    &#125;<br>\t<span class=\"hljs-comment\">//使用配置的keyGenerator，清空缓存</span><br>\t<span class=\"hljs-meta\">@CacheEvict(keyGenerator = &quot;deleteByIdkeyGenerator&quot;)</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> mapper.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>遵循SpringBoot三板斧<br><strong>第一步加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- Redis --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;!-- redis依赖commons-pool 这个依赖一定要添加 --&gt;<br>&lt;dependency&gt;<br>\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>\t&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;<br>\t&lt;version&gt;2.6.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>第二步写注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableCaching</span><span class=\"hljs-comment\">//开启缓存支持</span><br></code></pre></td></tr></table></figure>\n<p><strong>第三步写配置</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.11</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">password:</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">600</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">50</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p><strong>编写Redis配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span>: zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2019/11/3 14:12</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>: SpringBoot2.0 Redis缓存配置</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@EnableCaching</span>:开启缓存支持</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">CachingConfigurerSupport</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;sys.dataCaching.expireTime:0&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> expireTime;<br><br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> LettuceConnectionFactory lettuceConnectionFactory;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> KeyGenerator <span class=\"hljs-title function_\">keyGenerator</span><span class=\"hljs-params\">()</span> &#123;<span class=\"hljs-comment\">//设置自定义key&#123;ClassName + methodName + params&#125;</span><br>        <span class=\"hljs-keyword\">return</span> (target, method, params) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Method:&quot;</span>);<br>            sb.append(method.getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Params[&quot;</span>);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; params.length; i++) &#123;<br>                sb.append(params[i].toString());<br>                <span class=\"hljs-keyword\">if</span> (i != (params.length - <span class=\"hljs-number\">1</span>)) &#123;<br>                    sb.append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            sb.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class=\"hljs-keyword\">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br>\t<span class=\"hljs-comment\">//自定义keyGenerator，Key生成器</span><br>\t<span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> KeyGenerator <span class=\"hljs-title function_\">updateByIdkeyGenerator</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (target, method, params) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Method:&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;getById&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;,Params[&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> params[<span class=\"hljs-number\">0</span>].getClass().getDeclaredField(<span class=\"hljs-string\">&quot;id&quot;</span>);<br>                id.setAccessible(<span class=\"hljs-literal\">true</span>);<br>                sb.append(id.get(params[<span class=\"hljs-number\">0</span>]).toString());<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (NoSuchFieldException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            sb.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class=\"hljs-keyword\">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br>\t<span class=\"hljs-comment\">//自定义keyGenerator，Key生成器</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> KeyGenerator <span class=\"hljs-title function_\">deleteByIdkeyGenerator</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (target, method, params) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            sb.append(target.getClass().getName());<br>            sb.append(<span class=\"hljs-string\">&quot;,Method:&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;getById&quot;</span>);<br>            sb.append(<span class=\"hljs-string\">&quot;,Params[&quot;</span>);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; params.length; i++) &#123;<br>                sb.append(params[i].toString());<br>                <span class=\"hljs-keyword\">if</span> (i != (params.length - <span class=\"hljs-number\">1</span>)) &#123;<br>                    sb.append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            sb.append(<span class=\"hljs-string\">&quot;]&quot;</span>);<br>            log.debug(<span class=\"hljs-string\">&quot;Data Caching Redis Key : &#123;&#125;&quot;</span>, sb.toString());<br>            <span class=\"hljs-keyword\">return</span> sb.toString();<br>        &#125;;<br>    &#125;<br>\t<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> CacheManager <span class=\"hljs-title function_\">cacheManager</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class=\"hljs-type\">RedisCacheConfiguration</span> <span class=\"hljs-variable\">redisCacheConfiguration</span> <span class=\"hljs-operator\">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        <span class=\"hljs-comment\">//设置缓存过期时间</span><br>        <span class=\"hljs-keyword\">if</span> (expireTime &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            log.info(<span class=\"hljs-string\">&quot;Redis 缓存过期时间 : &#123;&#125;&quot;</span>, expireTime);<br>            <span class=\"hljs-comment\">//设置缓存有效期 秒</span><br>            redisCacheConfiguration.entryTtl(Duration.ofSeconds(expireTime));<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            log.info(<span class=\"hljs-string\">&quot;Redis 未设置缓存过期时间&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> RedisCacheManager<br>                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))<br>                .cacheDefaults(redisCacheConfiguration).build();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory factory)</span> &#123;<span class=\"hljs-comment\">//创建RedisTemplate</span><br>        <span class=\"hljs-comment\">// 设置序列化</span><br>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(<br>                Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">om</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class=\"hljs-comment\">// 配置redisTemplate</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;String, Object&gt;();<br>        redisTemplate.setConnectionFactory(lettuceConnectionFactory);<br>        RedisSerializer&lt;?&gt; stringSerializer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-comment\">// key序列化</span><br>        redisTemplate.setKeySerializer(stringSerializer);<br>        <span class=\"hljs-comment\">// value序列化</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class=\"hljs-comment\">// Hash key序列化</span><br>        redisTemplate.setHashKeySerializer(stringSerializer);<br>        <span class=\"hljs-comment\">// Hash value序列化</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>如何使用查询缓存</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@CacheConfig(cacheNames = &quot;demoDao&quot;)</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoDao</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IDemoDAO</span>&lt;&gt; &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    DemoMapper mapper;<br><br>\t<span class=\"hljs-comment\">//用默认配置的keyGenerator</span><br>    <span class=\"hljs-meta\">@Cacheable</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Demo <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> mapper.getById(id);<br>    &#125;<br>\t<span class=\"hljs-comment\">//使用配置的keyGenerator，清空缓存</span><br>\t<span class=\"hljs-meta\">@CacheEvict(keyGenerator = &quot;updateByIdkeyGenerator&quot;)</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(T entity)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> mapper.update(entity);<br>    &#125;<br>\t<span class=\"hljs-comment\">//使用配置的keyGenerator，清空缓存</span><br>\t<span class=\"hljs-meta\">@CacheEvict(keyGenerator = &quot;deleteByIdkeyGenerator&quot;)</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> mapper.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"MySQL数据和索引占用空间查询","_content":"# MySQL 学习笔记\n\n### 数据库操作\n\n```mysql\n-- 查看当前数据库\n    SELECT DATABASE();\n-- 显示当前时间、用户名、数据库版本\n    SELECT now(), user(), version();\n-- 创建库\n    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项\n    数据库选项：\n        CHARACTER SET charset_name\n        COLLATE collation_name\n-- 查看已有库\n    SHOW DATABASES[ LIKE 'PATTERN']\n-- 查看当前库信息\n    SHOW CREATE DATABASE 数据库名\n-- 修改库的选项信息\n    ALTER DATABASE 库名 选项信息\n-- 删除库\n    DROP DATABASE[ IF EXISTS] 数据库名\n        同时删除该数据库相关的目录及其目录内容\n```\n\n### 表的操作\n\n```mysql\n-- 创建表\n    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]\n        每个字段必须有数据类型\n        最后一个字段后不能有逗号\n        TEMPORARY 临时表，会话结束时表自动消失\n        对于字段的定义：\n            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']\n-- 表选项\n    -- 字符集\n        CHARSET = charset_name\n        如果表没有设定，则使用数据库字符集\n    -- 存储引擎\n        ENGINE = engine_name\n        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同\n        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive\n        不同的引擎在保存表的结构和数据时采用不同的方式\n        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引\n        InnoDB表文件含义：.frm表定义，表空间数据和日志文件\n        SHOW ENGINES -- 显示存储引擎的状态信息\n        SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息\n    -- 自增起始数\n    \tAUTO_INCREMENT = 行数\n    -- 数据文件目录\n        DATA DIRECTORY = '目录'\n    -- 索引文件目录\n        INDEX DIRECTORY = '目录'\n    -- 表注释\n        COMMENT = 'string'\n    -- 分区选项\n        PARTITION BY ... (详细见手册)\n-- 查看所有表\n    SHOW TABLES[ LIKE 'pattern']\n    SHOW TABLES FROM 表名\n-- 查看表机构\n    SHOW CREATE TABLE 表名 （信息更详细）\n    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']\n    SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']\n-- 修改表\n    -- 修改表本身的选项\n        ALTER TABLE 表名 表的选项\n        eg: ALTER TABLE 表名 ENGINE=MYISAM;\n    -- 对表进行重命名\n        RENAME TABLE 原表名 TO 新表名\n        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）\n        -- RENAME可以交换两个表名\n    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）\n        ALTER TABLE 表名 操作名\n        -- 操作名\n            ADD[ COLUMN] 字段定义       -- 增加字段\n                AFTER 字段名          -- 表示增加在该字段名后面\n                FIRST               -- 表示增加在第一个\n            ADD PRIMARY KEY(字段名)   -- 创建主键\n            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引\n            ADD INDEX [索引名] (字段名) -- 创建普通索引\n            DROP[ COLUMN] 字段名      -- 删除字段\n            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)\n            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改\n            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)\n            DROP INDEX 索引名 -- 删除索引\n            DROP FOREIGN KEY 外键    -- 删除外键\n\n-- 删除表\n    DROP TABLE[ IF EXISTS] 表名 ...\n-- 清空表数据\n    TRUNCATE [TABLE] 表名\n-- 复制表结构\n    CREATE TABLE 表名 LIKE 要复制的表名\n-- 复制表结构和数据\n    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名\n-- 检查表是否有错误\n    CHECK TABLE tbl_name [, tbl_name] ... [option] ...\n-- 优化表\n    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n-- 修复表\n    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]\n-- 分析表\n    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n\n### 数据操作\n\n```mysql\n-- 增\n    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]\n        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。\n        -- 可同时插入多条数据记录！\n        REPLACE 与 INSERT 完全一样，可互换。\n    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]\n-- 查\n    SELECT 字段列表 FROM 表名[ 其他子句]\n        -- 可来自多个表的多个字段\n        -- 其他子句可以不使用\n        -- 字段列表可以用*代替，表示所有字段\n-- 删\n    DELETE FROM 表名[ 删除条件子句]\n        没有条件子句，则会删除全部\n-- 改\n    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]\n```\n\n### 字符集编码\n\n```mysql\n-- MySQL、数据库、表、字段均可设置编码\n-- 数据编码与客户端编码不需一致\nSHOW VARIABLES LIKE 'character_set_%'   -- 查看所有字符集编码项\n    character_set_client        客户端向服务器发送数据时使用的编码\n    character_set_results       服务器端将结果返回给客户端所使用的编码\n    character_set_connection    连接层编码\nSET 变量名 = 变量值\n    SET character_set_client = gbk;\n    SET character_set_results = gbk;\n    SET character_set_connection = gbk;\nSET NAMES GBK;  -- 相当于完成以上三个设置\n-- 校对集\n    校对集用以排序\n    SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern']   查看所有字符集\n    SHOW COLLATION [LIKE 'pattern']     查看所有校对集\n    CHARSET 字符集编码     设置字符集编码\n    COLLATE 校对集编码     设置校对集编码\n```\n\n### 数据类型（列类型）\n\n**1. 数值类型**\n\n```mysql\n-- a. 整型 ----------\n    类型         字节     范围（有符号位）\n    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255\n    smallint    2字节    -32768 ~ 32767\n    mediumint   3字节    -8388608 ~ 8388607\n    int         4字节\n    bigint      8字节\n\n    int(M)  M表示总位数\n    - 默认存在符号位，unsigned 属性修改\n    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改\n        例：int(5)   插入一个数'123'，补填后为'00123'\n    - 在满足要求的情况下，越小越好。\n    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。\n\n-- b. 浮点型 ----------\n    类型             字节     范围\n    float(单精度)     4字节\n    double(双精度)    8字节\n    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。\n        不同于整型，前后均会补填0.\n    定义浮点型时，需指定总位数和小数位数。\n        float(M, D)     double(M, D)\n        M表示总位数，D表示小数位数。\n        M和D的大小会决定浮点数的范围。不同于整型的固定范围。\n        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。\n        支持科学计数法表示。\n        浮点数表示近似值。\n\n-- c. 定点数 ----------\n    decimal -- 可变长度\n    decimal(M, D)   M也表示总位数，D表示小数位数。\n    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。\n    将浮点数转换为字符串来保存，每9位数字保存为4个字节。\n```\n\n**2. 字符串类型**\n\n```mysql\n-- a. char, varchar ----------\n    char    定长字符串，速度快，但浪费空间\n    varchar 变长字符串，速度慢，但节省空间\n    M表示能存储的最大长度，此长度是字符数，非字节数。\n    不同的编码，所占用的空间不同。\n    char,最多255个字符，与编码无关。\n    varchar,最多65535字符，与编码有关。\n    一条有效记录最大不能超过65535个字节。\n        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符\n    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。\n    varchar 的最大有效长度由最大行大小和使用的字符集确定。\n    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。\n    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3\n\n-- b. blob, text ----------\n    blob 二进制字符串（字节字符串）\n        tinyblob, blob, mediumblob, longblob\n    text 非二进制字符串（字符字符串）\n        tinytext, text, mediumtext, longtext\n    text 在定义时，不需要定义长度，也不会计算总长度。\n    text 类型在定义时，不可给default值\n\n-- c. binary, varbinary ----------\n    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。\n    char, varchar, text 对应 binary, varbinary, blob.\n```\n\n**3. 日期时间类型**\n\n```mysql\n一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。\ndatetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59\ndate        3字节    日期         1000-01-01 到 9999-12-31\ntimestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07\ntime        3字节    时间         -838:59:59 到 838:59:59\nyear        1字节    年份         1901 - 2155\n\ndatetime    YYYY-MM-DD hh:mm:ss\ntimestamp   YY-MM-DD hh:mm:ss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\ndate        YYYY-MM-DD\n            YY-MM-DD\n            YYYYMMDD\n            YYMMDD\n            YYYYMMDD\n            YYMMDD\ntime        hh:mm:ss\n            hhmmss\n            hhmmss\nyear        YYYY\n            YY\n            YYYY\n            YY\n```\n\n**4. 枚举和集合**\n\n```mysql\n-- 枚举(enum) ----------\nenum(val1, val2, val3...)\n    在已知的值中进行单选。最大数量为65535.\n    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。\n    表现为字符串类型，存储却是整型。\n    NULL值的索引是NULL。\n    空字符串错误值的索引值是0。\n\n-- 集合（set） ----------\nset(val1, val2, val3...)\n    create table tab ( gender set('男', '女', '无') );\n    insert into tab values ('男, 女');\n    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。\n    当创建表时，SET成员值的尾部空格将自动被删除。\n\n/* 选择类型 */\n-- PHP角度\n1. 功能满足\n2. 存储空间尽量小，处理效率更高\n3. 考虑兼容问题\n```\n\n**IP存储**\n\n```mysql\n1. 只需存储，可用字符串\n2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned\n    1) PHP函数转换\n        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。\n        利用sprintf函数格式化字符串\n        sprintf(\"%u\", ip2long('192.168.3.134'));\n        然后用long2ip将整型转回IP字符串\n    2) MySQL函数转换(无符号整型，UNSIGNED)\n        INET_ATON('127.0.0.1') 将IP转为整型\n        INET_NTOA(2130706433) 将整型转为IP\n```\n\n### 列属性（列约束）\n\n```mysql\n1. PRIMARY 主键\n    - 能唯一标识记录的字段，可以作为主键。\n    - 一个表只能有一个主键。\n    - 主键具有唯一性。\n    - 声明字段时，用 primary key 标识。\n        也可以在字段列表之后声明\n            例：create table tab ( id int, stu varchar(10), primary key (id));\n    - 主键字段的值不能为null。\n    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。\n        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));\n\n2. UNIQUE 唯一索引（唯一约束）\n    使得某字段的值也不能重复。\n\n3. NULL 约束\n    null不是数据类型，是列的一个属性。\n    表示当前列是否可以为null，表示什么都没有。\n    null, 允许为空。默认。\n    not null, 不允许为空。\n    insert into tab values (null, 'val');\n        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n\n4. DEFAULT 默认值属性\n    当前字段的默认值。\n    insert into tab values (default, 'val');    -- 此时表示强制使用默认值。\n    create table tab ( add_time timestamp default current_timestamp );\n        -- 表示将当前时间的时间戳设为默认值。\n        current_date, current_time\n\n5. AUTO_INCREMENT 自动增长约束\n    自动增长必须为索引（主键或unique）\n    只能存在一个字段为自动增长。\n    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;\n\n6. COMMENT 注释\n    例：create table tab ( id int ) comment '注释内容';\n\n7. FOREIGN KEY 外键约束\n    用于限制主表与从表数据完整性。\n    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);\n        -- 将表t1的t1_id外键关联到表t2的id字段。\n        -- 每个外键都有一个名字，可以通过 constraint 指定\n\n    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n\n    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。\n\n    MySQL中，可以对InnoDB引擎使用外键约束：\n    语法：\n    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]\n    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。\n\n    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。\n    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：\n    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。\n    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。\n    3. restrict，拒绝父表删除和更新。\n\n    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。\n```\n\n### 建表规范\n\n```mysql\n    -- Normal Format, NF\n        - 每个表保存一个实体信息\n        - 每个具有一个ID字段作为主键\n        - ID主键 + 原子表\n    -- 1NF, 第一范式\n        字段不能再分，就满足第一范式。\n    -- 2NF, 第二范式\n        满足第一范式的前提下，不能出现部分依赖。\n        消除符合主键就可以避免部分依赖。增加单列关键字。\n    -- 3NF, 第三范式\n        满足第二范式的前提下，不能出现传递依赖。\n        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。\n        将一个实体信息的数据放在一个表内实现。\n```\n\n### SELECT\n\n```mysql\nSELECT [ALL|DISTINCT] select_expr FROM -> WHERE -> GROUP BY [合计函数] -> HAVING -> ORDER BY -> LIMIT\n\na. select_expr\n    -- 可以用 * 表示所有字段。\n        select * from tb;\n    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）\n        select stu, 29+25, now() from tb;\n    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。\n        - 使用 as 关键字，也可省略 as.\n        select stu+10 as add10 from tb;\n\nb. FROM 子句\n    用于标识查询来源。\n    -- 可以为表起别名。使用as关键字。\n        SELECT * FROM tb1 AS tt, tb2 AS bb;\n    -- from子句后，可以同时出现多个表。\n        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。\n        SELECT * FROM tb1, tb2;\n    -- 向优化符提示如何选择索引\n        USE INDEX、IGNORE INDEX、FORCE INDEX\n        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;\n        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;\n\nc. WHERE 子句\n    -- 从from获得的数据源中进行筛选。\n    -- 整型1表示真，0表示假。\n    -- 表达式由运算符和运算数组成。\n        -- 运算数：变量（字段）、值、函数返回值\n        -- 运算符：\n            =, <=>, <>, !=, <=, <, >=, >, !, &&, ||,\n            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor\n            is/is not 加上ture/false/unknown，检验某个值的真假\n            <=>与<>功能相同，<=>可用于null比较\n\nd. GROUP BY 子句, 分组子句\n    GROUP BY 字段/别名 [排序方式]\n    分组后会进行排序。升序：ASC，降序：DESC\n\n    以下[合计函数]需配合 GROUP BY 使用：\n    count 返回不同的非NULL值数目  count(*)、count(字段)\n    sum 求和\n    max 求最大值\n    min 求最小值\n    avg 求平均值\n    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。\n\ne. HAVING 子句，条件子句\n    与 where 功能、用法相同，执行时机不同。\n    where 在开始时执行检测数据，对原数据进行过滤。\n    having 对筛选出的结果再次进行过滤。\n    having 字段必须是查询出来的，where 字段必须是数据表存在的。\n    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。\n    where 不可以使用合计函数。一般需用合计函数才会用 having\n    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。\n\nf. ORDER BY 子句，排序子句\n    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...\n    升序：ASC，降序：DESC\n    支持多个字段的排序。\n\ng. LIMIT 子句，限制结果数量子句\n    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。\n    limit 起始位置, 获取条数\n    省略第一个参数，表示从索引0开始。limit 获取条数\n\nh. DISTINCT, ALL 选项\n    distinct 去除重复记录\n    默认为 all, 全部记录\n```\n\n### UNION\n\n> 将多个select查询的结果组合成一个结果集合。\n\n```mysql\nSELECT ... UNION [ALL|DISTINCT] SELECT ...\n默认 DISTINCT 方式，即所有返回的行都是唯一的\n建议，对每个SELECT查询加上小括号包裹。\nORDER BY 排序时，需加上 LIMIT 进行结合。\n需要各select查询的字段数量一样。\n每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。\n```\n\n### 子查询\n\n> 子查询需用括号包裹。\n\n```mysql\n-- from型\n    from后要求是一个表，必须给子查询结果取个别名。\n    - 简化每个查询内的条件。\n    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。\n    - 子查询返回一个表，表型子查询。\n    select * from (select * from tb where id>0) as subfrom where id>1;\n-- where型\n    - 子查询返回一个值，标量子查询。\n    - 不需要给子查询取别名。\n    - where子查询内的表，不能直接用以更新。\n    select * from tb where money = (select max(money) from tb);\n    -- 列子查询\n        如果子查询结果返回的是一列。\n        使用 in 或 not in 完成查询\n        exists 和 not exists 条件\n            如果子查询返回数据，则返回1或0。常用于判断条件。\n            select column1 from t1 where exists (select * from t2);\n    -- 行子查询\n        查询条件是一个行。\n        select * from t1 where (id, gender) in (select id, gender from t2);\n        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)\n        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。\n\n    -- 特殊运算符\n    != all()    相当于 not in\n    = some()    相当于 in。any 是 some 的别名\n    != some()   不等同于 not in，不等于其中某一个。\n    all, some 可以配合其他运算符一起使用。\n```\n\n### 连接查询(join)```mysql\n\n> 将多个表的字段进行连接，可以指定连接条件。\n\n```mysql\n-- 内连接(inner join)\n    - 默认就是内连接，可省略inner。\n    - 只有数据存在时才能发送连接。即连接结果不能出现空行。\n    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）\n    也可用where表示连接条件。\n    还有 using, 但需字段名相同。 using(字段名)\n\n-- 交叉连接 cross join\n   即，没有条件的内连接。\n   select * from tb1 cross join tb2;\n-- 外连接(outer join)\n    - 如果数据不存在，也会出现在连接结果中。\n    -- 左外连接 left join\n        如果数据不存在，左表记录会出现，而右表为null填充\n    -- 右外连接 right join\n        如果数据不存在，右表记录会出现，而左表为null填充\n-- 自然连接(natural join)\n    自动判断连接条件完成连接。\n    相当于省略了using，会自动查找相同字段名。\n    natural join\n    natural left join\n    natural right join\n\nselect info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;\n```\n\n### 导入导出\n\n```mysql\nselect * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据\nload data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据\n    生成的数据默认的分隔符是制表符\n    local未指定，则数据文件必须在服务器上\n    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理\n-- 控制格式\nfields  控制字段格式\n默认：fields terminated by '\\t' enclosed by '' escaped by '\\\\'\n    terminated by 'string'  -- 终止\n    enclosed by 'char'      -- 包裹\n    escaped by 'char'       -- 转义\n    -- 示例：\n        SELECT a,b,a+b INTO OUTFILE '/tmp/result.text'\n        FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n        LINES TERMINATED BY '\\n'\n        FROM test_table;\nlines   控制行格式\n默认：lines terminated by '\\n'\n    terminated by 'string'  -- 终止\n```\n\n### INSERT\n\n```mysql\nselect语句获得的数据可以用insert插入。\n\n可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。\n    或者使用set语法。\n    INSERT INTO tbl_name SET field=value,...；\n\n可以一次性使用多个值，采用(), (), ();的形式。\n    INSERT INTO tbl_name VALUES (), (), ();\n\n可以在列值指定时，使用表达式。\n    INSERT INTO tbl_name VALUES (field_value, 10+10, now());\n可以使用一个特殊值 DEFAULT，表示该列使用默认值。\n    INSERT INTO tbl_name VALUES (field_value, DEFAULT);\n\n可以通过一个查询的结果，作为需要插入的值。\n    INSERT INTO tbl_name SELECT ...;\n\n可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。\n    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;\n```\n\n### DELETE\n\n```mysql\nDELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]\n\n按照条件删除。where\n\n指定删除的最多记录数。limit\n\n可以通过排序条件删除。order by + limit\n\n支持多表删除，使用类似连接语法。\ndelete from 需要删除数据多表1，表2 using 表连接操作 条件。\n```\n\n### TRUNCATE\n\n```mysql\nTRUNCATE [TABLE] tbl_name\n清空数据\n删除重建表\n\n区别：\n1，truncate 是删除表再创建，delete 是逐条删除\n2，truncate 重置auto_increment的值。而delete不会\n3，truncate 不知道删除了几条，而delete知道。\n4，当被用于带分区的表时，truncate 会保留分区\n```\n\n### 备份与还原\n\n> 备份，将数据的结构与表内数据保存起来。\n> 利用 mysqldump 指令完成。\n\n```mysql\n-- 导出\nmysqldump [options] db_name [tables]\nmysqldump [options] ---database DB1 [DB2 DB3...]\nmysqldump [options] --all--database\n\n\n1. 导出一张表\n　　mysqldump -u用户名 -p密码 库名 表名 > 文件名(D:/a.sql)\n2. 导出多张表\n　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 > 文件名(D:/a.sql)\n3. 导出所有表\n　　mysqldump -u用户名 -p密码 库名 > 文件名(D:/a.sql)\n4. 导出一个库\n　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 > 文件名(D:/a.sql)\n\n可以-w携带WHERE条件\n\n-- 导入\n1. 在登录mysql的情况下：\n　　source  备份文件\n2. 在不登录的情况下\n　　mysql -u用户名 -p密码 库名 < 备份文件\n```\n\n### 视图\n\n> 什么是视图：\n>     视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。\n>     视图具有表结构文件，但不存在数据文件。\n>     对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。\n>     视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。\n\n```mysql\n-- 创建视图\nCREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] VIEW view_name [(column_list)] AS select_statement\n    - 视图名必须唯一，同时不能与表重名。\n    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。\n    - 可以指定视图执行的算法，通过ALGORITHM指定。\n    - column_list如果存在，则数目必须等于SELECT语句检索的列数\n\n-- 查看结构\n    SHOW CREATE VIEW view_name\n\n-- 删除视图\n    - 删除视图后，数据依然存在。\n    - 可同时删除多个视图。\n    DROP VIEW [IF EXISTS] view_name ...\n\n-- 修改视图结构\n    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。\n    ALTER VIEW view_name [(column_list)] AS select_statement\n\n-- 视图作用\n    1. 简化业务逻辑\n    2. 对客户端隐藏真实的表结构\n\n-- 视图算法(ALGORITHM)\n    MERGE       合并\n        将视图的查询语句，与外部查询需要先合并再执行！\n    TEMPTABLE   临时表\n        将视图执行完毕后，形成临时表，再做外层查询！\n    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。\n```\n\n### 事务(transaction)\n\n> 事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。\n\n```mysql\n- 支持连续SQL的集体成功或集体撤销。\n- 事务是数据库在数据晚自习方面的一个功能。\n- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。\n- InnoDB被称为事务安全型引擎。\n\n-- 事务开启\n    START TRANSACTION; 或者 BEGIN;\n    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。\n-- 事务提交\n    COMMIT;\n-- 事务回滚\n    ROLLBACK;\n    如果部分操作发生问题，映射到事务开启前。\n\n-- 事务的特性\n    1. 原子性（Atomicity）\n        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。\n    2. 一致性（Consistency）\n        事务前后数据的完整性必须保持一致。\n        - 事务开始和结束时，外部数据一致\n        - 在整个事务过程中，操作是连续的\n    3. 隔离性（Isolation）\n        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。\n    4. 持久性（Durability）\n        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。\n\n-- 事务的实现\n    1. 要求是事务支持的表类型\n    2. 执行一组相关的操作前开启事务\n    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。\n\n-- 事务的原理\n    利用InnoDB的自动提交(autocommit)特性完成。\n    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。\n    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。\n\n-- 注意\n    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。\n    2. 事务不能被嵌套\n\n-- 保存点\n    SAVEPOINT 保存点名称 -- 设置一个事务保存点\n    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点\n    RELEASE SAVEPOINT 保存点名称 -- 删除保存点\n\n-- InnoDB自动提交特性设置\n    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。\n    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。\n    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，\n        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)\n        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)\n```\n\n### 锁表\n\n> 表锁定只用于防止其它客户端进行不正当地读取和写入\n> MyISAM 支持表锁，InnoDB 支持行锁\n\n```mysql\n-- 锁定\n    LOCK TABLES tbl_name [AS alias]\n-- 解锁\n    UNLOCK TABLES\n```\n\n### 触发器\n\n> 触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象\n> 监听：记录的增加、修改、删除。\n\n```mysql\n-- 创建触发器\nCREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt\n    参数：\n    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。\n    trigger_event指明了激活触发程序的语句的类型\n        INSERT：将新行插入表时激活触发程序\n        UPDATE：更改某一行时激活触发程序\n        DELETE：从表中删除某一行时激活触发程序\n    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。\n    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构\n\n-- 删除\nDROP TRIGGER [schema_name.]trigger_name\n\n可以使用old和new代替旧的和新的数据\n    更新操作，更新前是old，更新后是new.\n    删除操作，只有old.\n    增加操作，只有new.\n\n-- 注意\n    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。\n\n\n-- 字符连接函数\nconcat(str1,str2,...])\nconcat_ws(separator,str1,str2,...)\n\n-- 分支语句\nif 条件 then\n    执行语句\nelseif 条件 then\n    执行语句\nelse\n    执行语句\nend if;\n\n-- 修改最外层语句结束符\ndelimiter 自定义结束符号\n    SQL语句\n自定义结束符号\n\ndelimiter ;     -- 修改回原来的分号\n\n-- 语句块包裹\nbegin\n    语句块\nend\n\n-- 特殊的执行\n1. 只要添加记录，就会触发程序。\n2. Insert into on duplicate key update 语法会触发：\n    如果没有重复记录，会触发 before insert, after insert;\n    如果有重复记录并更新，会触发 before insert, before update, after update;\n    如果有重复记录但是没有发生更新，则触发 before insert, before update\n3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert\n```\n\n### SQL编程\n\n```mysql\n--// 局部变量 ----------\n-- 变量声明\n    declare var_name[,...] type [default value]\n    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。\n\n-- 赋值\n    使用 set 和 select into 语句为变量赋值。\n\n    - 注意：在函数内是可以使用全局变量（用户自定义的变量）\n\n\n--// 全局变量 ----------\n-- 定义、赋值\nset 语句可以定义并为变量赋值。\nset @var = value;\n也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。\n还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。\nselect @var:=20;\nselect @v1:=id, @v2=name from t1 limit 1;\nselect * from tbl_name where @var:=30;\n\nselect into 可以将表中查询获得的数据赋给变量。\n    -| select max(height) into @max_height from tb;\n\n-- 自定义变量名\n为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。\n@var=10;\n\n    - 变量被定义后，在整个会话周期都有效（登录到退出）\n\n\n--// 控制结构 ----------\n-- if语句\nif search_condition then\n    statement_list   \n[elseif search_condition then\n    statement_list]\n...\n[else\n    statement_list]\nend if;\n\n-- case语句\nCASE value WHEN [compare-value] THEN result\n[WHEN [compare-value] THEN result ...]\n[ELSE result]\nEND\n\n\n-- while循环\n[begin_label:] while search_condition do\n    statement_list\nend while [end_label];\n\n- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。\n\n    -- 退出循环\n        退出整个循环 leave\n        退出当前循环 iterate\n        通过退出的标签决定退出哪个循环\n\n\n--// 内置函数 ----------\n-- 数值函数\nabs(x)          -- 绝对值 abs(-10.9) = 10\nformat(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46\nceil(x)         -- 向上取整 ceil(10.1) = 11\nfloor(x)        -- 向下取整 floor (10.1) = 10\nround(x)        -- 四舍五入去整\nmod(m, n)       -- m%n m mod n 求余 10%3=1\npi()            -- 获得圆周率\npow(m, n)       -- m^n\nsqrt(x)         -- 算术平方根\nrand()          -- 随机数\ntruncate(x, d)  -- 截取d位小数\n\n-- 时间日期函数\nnow(), current_timestamp();     -- 当前日期时间\ncurrent_date();                 -- 当前日期\ncurrent_time();                 -- 当前时间\ndate('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分\ntime('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分\ndate_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j'); -- 格式化时间\nunix_timestamp();               -- 获得unix时间戳\nfrom_unixtime();                -- 从时间戳获得时间\n\n-- 字符串函数\nlength(string)          -- string长度，字节\nchar_length(string)     -- string的字符个数\nsubstring(str, position [,length])      -- 从str的position开始,取length个字符\nreplace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str\ninstr(string ,substring)    -- 返回substring首次在string中出现的位置\nconcat(string [,...])   -- 连接字串\ncharset(str)            -- 返回字串字符集\nlcase(string)           -- 转换成小写\nleft(string, length)    -- 从string2中的左边起取length个字符\nload_file(file_name)    -- 从文件读取内容\nlocate(substring, string [,start_position]) -- 同instr,但可指定开始位置\nlpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length\nltrim(string)           -- 去除前端空格\nrepeat(string, count)   -- 重复count次\nrpad(string, length, pad)   --在str后用pad补充,直到长度为length\nrtrim(string)           -- 去除后端空格\nstrcmp(string1 ,string2)    -- 逐字符比较两字串大小\n\n-- 流程函数\ncase when [condition] then result [when [condition] then result ...] [else result] end   多分支\nif(expr1,expr2,expr3)  双分支。\n\n-- 聚合函数\ncount()\nsum();\nmax();\nmin();\navg();\ngroup_concat()\n\n-- 其他常用函数\nmd5();\ndefault();\n\n--// 存储函数，自定义函数 ----------\n-- 新建\n    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型\n        函数体\n\n    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。\n    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。\n    - 参数部分，由\"参数名\"和\"参数类型\"组成。多个参数用逗号隔开。\n    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。\n    - 多条语句应该使用 begin...end 语句块包含。\n    - 一定要有 return 返回值语句。\n\n-- 删除\n    DROP FUNCTION [IF EXISTS] function_name;\n\n-- 查看\n    SHOW FUNCTION STATUS LIKE 'partten'\n    SHOW CREATE FUNCTION function_name;\n\n-- 修改\n    ALTER FUNCTION function_name 函数选项\n\n\n--// 存储过程，自定义功能 ----------\n-- 定义\n存储存储过程 是一段代码（过程），存储在数据库中的sql组成。\n一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。\n而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。\n\n-- 创建\nCREATE PROCEDURE sp_name (参数列表)\n    过程体\n\n参数列表：不同于函数的参数列表，需要指明参数类型\nIN，表示输入型\nOUT，表示输出型\nINOUT，表示混合型\n\n注意，没有返回值。\n```\n\n### 存储过程\n\n> 存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。\n> 调用：CALL 过程名\n\n```mysql\n-- 注意\n- 没有返回值。\n- 只能单独调用，不可夹杂在其他语句中\n\n-- 参数\nIN|OUT|INOUT 参数名 数据类型\nIN      输入：在调用过程中，将数据输入到过程体内部的参数\nOUT     输出：在调用过程中，将过程体处理完的结果返回到客户端\nINOUT   输入输出：既可输入，也可输出\n\n-- 语法\nCREATE PROCEDURE 过程名 (参数列表)\nBEGIN\n    过程体\nEND\n```\n\n### 用户和权限管理\n\n```mysql\n-- root密码重置\n1. 停止MySQL服务\n2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &\n    [Windows] mysqld --skip-grant-tables\n3. use mysql;\n4. UPDATE `user` SET PASSWORD=PASSWORD(\"密码\") WHERE `user` = \"root\";\n5. FLUSH PRIVILEGES;\n\n用户信息表：mysql.user\n-- 刷新权限\nFLUSH PRIVILEGES;\n-- 增加用户\nCREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)\n    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。\n    - 只能创建用户，不能赋予权限。\n    - 用户名，注意引号：如 'user_name'@'192.168.1.1'\n    - 密码也需引号，纯数字密码也要加引号\n    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD\n-- 重命名用户\nRENAME USER old_user TO new_user\n-- 设置密码\nSET PASSWORD = PASSWORD('密码')  -- 为当前用户设置密码\nSET PASSWORD FOR 用户名 = PASSWORD('密码') -- 为指定用户设置密码\n-- 删除用户\nDROP USER 用户名\n-- 分配权限/添加用户\nGRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password']\n    - all privileges 表示所有权限\n    - *.* 表示所有库的所有表\n    - 库名.表名 表示某库下面的某表\n    GRANT ALL PRIVILEGES ON `pms`.* TO 'pms'@'%' IDENTIFIED BY 'pms0817';\n-- 查看权限\nSHOW GRANTS FOR 用户名\n    -- 查看当前用户权限\n    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();\n-- 撤消权限\nREVOKE 权限列表 ON 表名 FROM 用户名\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限\n-- 权限层级\n-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。\n全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user\n    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。\n数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host\n    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。\n表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv\n    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。\n列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv\n    当使用REVOKE时，您必须指定与被授权列相同的列。\n-- 权限列表\nALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限\nALTER   -- 允许使用ALTER TABLE\nALTER ROUTINE   -- 更改或取消已存储的子程序\nCREATE  -- 允许使用CREATE TABLE\nCREATE ROUTINE  -- 创建已存储的子程序\nCREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE\nCREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。\nCREATE VIEW     -- 允许使用CREATE VIEW\nDELETE  -- 允许使用DELETE\nDROP    -- 允许使用DROP TABLE\nEXECUTE     -- 允许用户运行已存储的子程序\nFILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE\nINDEX   -- 允许使用CREATE INDEX和DROP INDEX\nINSERT  -- 允许使用INSERT\nLOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES\nPROCESS     -- 允许使用SHOW FULL PROCESSLIST\nREFERENCES  -- 未被实施\nRELOAD  -- 允许使用FLUSH\nREPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址\nREPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）\nSELECT  -- 允许使用SELECT\nSHOW DATABASES  -- 显示所有数据库\nSHOW VIEW   -- 允许使用SHOW CREATE VIEW\nSHUTDOWN    -- 允许使用mysqladmin shutdown\nSUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。\nUPDATE  -- 允许使用UPDATE\nUSAGE   -- “无权限”的同义词\nGRANT OPTION    -- 允许授予权限\n```\n\n### 表维护\n\n```mysql\n-- 分析和存储表的关键字分布\nANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...\n-- 检查一个或多个表是否有错误\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\noption = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}\n-- 整理数据文件的碎片\nOPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n### 杂项\n\n```mysql\n1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！\n2. 每个库目录存在一个保存当前数据库的选项文件db.opt。\n3. 注释：\n    单行注释 # 注释内容\n    多行注释 /* 注释内容 */\n    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)\n4. 模式通配符：\n    _   任意单个字符\n    %   任意多个字符，甚至包括零字符\n    单引号需要进行转义 \\'\n5. CMD命令行内的语句结束符可以为 \";\", \"\\G\", \"\\g\"，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。\n6. SQL对大小写不敏感\n7. 清除已有语句：\\c\n```\n\n原文连接：https://shockerli.net/post/1000-line-mysql-note/\n","source":"_posts/数据库/Mysql/MySQL学习笔记.md","raw":"---\ntitle: MySQL数据和索引占用空间查询\ntags:\n  - Mysql\n  - 数据库\ncategories:\n  - 数据库\n---\n# MySQL 学习笔记\n\n### 数据库操作\n\n```mysql\n-- 查看当前数据库\n    SELECT DATABASE();\n-- 显示当前时间、用户名、数据库版本\n    SELECT now(), user(), version();\n-- 创建库\n    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项\n    数据库选项：\n        CHARACTER SET charset_name\n        COLLATE collation_name\n-- 查看已有库\n    SHOW DATABASES[ LIKE 'PATTERN']\n-- 查看当前库信息\n    SHOW CREATE DATABASE 数据库名\n-- 修改库的选项信息\n    ALTER DATABASE 库名 选项信息\n-- 删除库\n    DROP DATABASE[ IF EXISTS] 数据库名\n        同时删除该数据库相关的目录及其目录内容\n```\n\n### 表的操作\n\n```mysql\n-- 创建表\n    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]\n        每个字段必须有数据类型\n        最后一个字段后不能有逗号\n        TEMPORARY 临时表，会话结束时表自动消失\n        对于字段的定义：\n            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']\n-- 表选项\n    -- 字符集\n        CHARSET = charset_name\n        如果表没有设定，则使用数据库字符集\n    -- 存储引擎\n        ENGINE = engine_name\n        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同\n        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive\n        不同的引擎在保存表的结构和数据时采用不同的方式\n        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引\n        InnoDB表文件含义：.frm表定义，表空间数据和日志文件\n        SHOW ENGINES -- 显示存储引擎的状态信息\n        SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息\n    -- 自增起始数\n    \tAUTO_INCREMENT = 行数\n    -- 数据文件目录\n        DATA DIRECTORY = '目录'\n    -- 索引文件目录\n        INDEX DIRECTORY = '目录'\n    -- 表注释\n        COMMENT = 'string'\n    -- 分区选项\n        PARTITION BY ... (详细见手册)\n-- 查看所有表\n    SHOW TABLES[ LIKE 'pattern']\n    SHOW TABLES FROM 表名\n-- 查看表机构\n    SHOW CREATE TABLE 表名 （信息更详细）\n    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']\n    SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']\n-- 修改表\n    -- 修改表本身的选项\n        ALTER TABLE 表名 表的选项\n        eg: ALTER TABLE 表名 ENGINE=MYISAM;\n    -- 对表进行重命名\n        RENAME TABLE 原表名 TO 新表名\n        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）\n        -- RENAME可以交换两个表名\n    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）\n        ALTER TABLE 表名 操作名\n        -- 操作名\n            ADD[ COLUMN] 字段定义       -- 增加字段\n                AFTER 字段名          -- 表示增加在该字段名后面\n                FIRST               -- 表示增加在第一个\n            ADD PRIMARY KEY(字段名)   -- 创建主键\n            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引\n            ADD INDEX [索引名] (字段名) -- 创建普通索引\n            DROP[ COLUMN] 字段名      -- 删除字段\n            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)\n            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改\n            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)\n            DROP INDEX 索引名 -- 删除索引\n            DROP FOREIGN KEY 外键    -- 删除外键\n\n-- 删除表\n    DROP TABLE[ IF EXISTS] 表名 ...\n-- 清空表数据\n    TRUNCATE [TABLE] 表名\n-- 复制表结构\n    CREATE TABLE 表名 LIKE 要复制的表名\n-- 复制表结构和数据\n    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名\n-- 检查表是否有错误\n    CHECK TABLE tbl_name [, tbl_name] ... [option] ...\n-- 优化表\n    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n-- 修复表\n    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]\n-- 分析表\n    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n\n### 数据操作\n\n```mysql\n-- 增\n    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]\n        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。\n        -- 可同时插入多条数据记录！\n        REPLACE 与 INSERT 完全一样，可互换。\n    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]\n-- 查\n    SELECT 字段列表 FROM 表名[ 其他子句]\n        -- 可来自多个表的多个字段\n        -- 其他子句可以不使用\n        -- 字段列表可以用*代替，表示所有字段\n-- 删\n    DELETE FROM 表名[ 删除条件子句]\n        没有条件子句，则会删除全部\n-- 改\n    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]\n```\n\n### 字符集编码\n\n```mysql\n-- MySQL、数据库、表、字段均可设置编码\n-- 数据编码与客户端编码不需一致\nSHOW VARIABLES LIKE 'character_set_%'   -- 查看所有字符集编码项\n    character_set_client        客户端向服务器发送数据时使用的编码\n    character_set_results       服务器端将结果返回给客户端所使用的编码\n    character_set_connection    连接层编码\nSET 变量名 = 变量值\n    SET character_set_client = gbk;\n    SET character_set_results = gbk;\n    SET character_set_connection = gbk;\nSET NAMES GBK;  -- 相当于完成以上三个设置\n-- 校对集\n    校对集用以排序\n    SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern']   查看所有字符集\n    SHOW COLLATION [LIKE 'pattern']     查看所有校对集\n    CHARSET 字符集编码     设置字符集编码\n    COLLATE 校对集编码     设置校对集编码\n```\n\n### 数据类型（列类型）\n\n**1. 数值类型**\n\n```mysql\n-- a. 整型 ----------\n    类型         字节     范围（有符号位）\n    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255\n    smallint    2字节    -32768 ~ 32767\n    mediumint   3字节    -8388608 ~ 8388607\n    int         4字节\n    bigint      8字节\n\n    int(M)  M表示总位数\n    - 默认存在符号位，unsigned 属性修改\n    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改\n        例：int(5)   插入一个数'123'，补填后为'00123'\n    - 在满足要求的情况下，越小越好。\n    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。\n\n-- b. 浮点型 ----------\n    类型             字节     范围\n    float(单精度)     4字节\n    double(双精度)    8字节\n    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。\n        不同于整型，前后均会补填0.\n    定义浮点型时，需指定总位数和小数位数。\n        float(M, D)     double(M, D)\n        M表示总位数，D表示小数位数。\n        M和D的大小会决定浮点数的范围。不同于整型的固定范围。\n        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。\n        支持科学计数法表示。\n        浮点数表示近似值。\n\n-- c. 定点数 ----------\n    decimal -- 可变长度\n    decimal(M, D)   M也表示总位数，D表示小数位数。\n    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。\n    将浮点数转换为字符串来保存，每9位数字保存为4个字节。\n```\n\n**2. 字符串类型**\n\n```mysql\n-- a. char, varchar ----------\n    char    定长字符串，速度快，但浪费空间\n    varchar 变长字符串，速度慢，但节省空间\n    M表示能存储的最大长度，此长度是字符数，非字节数。\n    不同的编码，所占用的空间不同。\n    char,最多255个字符，与编码无关。\n    varchar,最多65535字符，与编码有关。\n    一条有效记录最大不能超过65535个字节。\n        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符\n    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。\n    varchar 的最大有效长度由最大行大小和使用的字符集确定。\n    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。\n    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3\n\n-- b. blob, text ----------\n    blob 二进制字符串（字节字符串）\n        tinyblob, blob, mediumblob, longblob\n    text 非二进制字符串（字符字符串）\n        tinytext, text, mediumtext, longtext\n    text 在定义时，不需要定义长度，也不会计算总长度。\n    text 类型在定义时，不可给default值\n\n-- c. binary, varbinary ----------\n    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。\n    char, varchar, text 对应 binary, varbinary, blob.\n```\n\n**3. 日期时间类型**\n\n```mysql\n一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。\ndatetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59\ndate        3字节    日期         1000-01-01 到 9999-12-31\ntimestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07\ntime        3字节    时间         -838:59:59 到 838:59:59\nyear        1字节    年份         1901 - 2155\n\ndatetime    YYYY-MM-DD hh:mm:ss\ntimestamp   YY-MM-DD hh:mm:ss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\ndate        YYYY-MM-DD\n            YY-MM-DD\n            YYYYMMDD\n            YYMMDD\n            YYYYMMDD\n            YYMMDD\ntime        hh:mm:ss\n            hhmmss\n            hhmmss\nyear        YYYY\n            YY\n            YYYY\n            YY\n```\n\n**4. 枚举和集合**\n\n```mysql\n-- 枚举(enum) ----------\nenum(val1, val2, val3...)\n    在已知的值中进行单选。最大数量为65535.\n    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。\n    表现为字符串类型，存储却是整型。\n    NULL值的索引是NULL。\n    空字符串错误值的索引值是0。\n\n-- 集合（set） ----------\nset(val1, val2, val3...)\n    create table tab ( gender set('男', '女', '无') );\n    insert into tab values ('男, 女');\n    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。\n    当创建表时，SET成员值的尾部空格将自动被删除。\n\n/* 选择类型 */\n-- PHP角度\n1. 功能满足\n2. 存储空间尽量小，处理效率更高\n3. 考虑兼容问题\n```\n\n**IP存储**\n\n```mysql\n1. 只需存储，可用字符串\n2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned\n    1) PHP函数转换\n        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。\n        利用sprintf函数格式化字符串\n        sprintf(\"%u\", ip2long('192.168.3.134'));\n        然后用long2ip将整型转回IP字符串\n    2) MySQL函数转换(无符号整型，UNSIGNED)\n        INET_ATON('127.0.0.1') 将IP转为整型\n        INET_NTOA(2130706433) 将整型转为IP\n```\n\n### 列属性（列约束）\n\n```mysql\n1. PRIMARY 主键\n    - 能唯一标识记录的字段，可以作为主键。\n    - 一个表只能有一个主键。\n    - 主键具有唯一性。\n    - 声明字段时，用 primary key 标识。\n        也可以在字段列表之后声明\n            例：create table tab ( id int, stu varchar(10), primary key (id));\n    - 主键字段的值不能为null。\n    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。\n        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));\n\n2. UNIQUE 唯一索引（唯一约束）\n    使得某字段的值也不能重复。\n\n3. NULL 约束\n    null不是数据类型，是列的一个属性。\n    表示当前列是否可以为null，表示什么都没有。\n    null, 允许为空。默认。\n    not null, 不允许为空。\n    insert into tab values (null, 'val');\n        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n\n4. DEFAULT 默认值属性\n    当前字段的默认值。\n    insert into tab values (default, 'val');    -- 此时表示强制使用默认值。\n    create table tab ( add_time timestamp default current_timestamp );\n        -- 表示将当前时间的时间戳设为默认值。\n        current_date, current_time\n\n5. AUTO_INCREMENT 自动增长约束\n    自动增长必须为索引（主键或unique）\n    只能存在一个字段为自动增长。\n    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;\n\n6. COMMENT 注释\n    例：create table tab ( id int ) comment '注释内容';\n\n7. FOREIGN KEY 外键约束\n    用于限制主表与从表数据完整性。\n    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);\n        -- 将表t1的t1_id外键关联到表t2的id字段。\n        -- 每个外键都有一个名字，可以通过 constraint 指定\n\n    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n\n    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。\n\n    MySQL中，可以对InnoDB引擎使用外键约束：\n    语法：\n    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]\n    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。\n\n    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。\n    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：\n    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。\n    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。\n    3. restrict，拒绝父表删除和更新。\n\n    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。\n```\n\n### 建表规范\n\n```mysql\n    -- Normal Format, NF\n        - 每个表保存一个实体信息\n        - 每个具有一个ID字段作为主键\n        - ID主键 + 原子表\n    -- 1NF, 第一范式\n        字段不能再分，就满足第一范式。\n    -- 2NF, 第二范式\n        满足第一范式的前提下，不能出现部分依赖。\n        消除符合主键就可以避免部分依赖。增加单列关键字。\n    -- 3NF, 第三范式\n        满足第二范式的前提下，不能出现传递依赖。\n        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。\n        将一个实体信息的数据放在一个表内实现。\n```\n\n### SELECT\n\n```mysql\nSELECT [ALL|DISTINCT] select_expr FROM -> WHERE -> GROUP BY [合计函数] -> HAVING -> ORDER BY -> LIMIT\n\na. select_expr\n    -- 可以用 * 表示所有字段。\n        select * from tb;\n    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）\n        select stu, 29+25, now() from tb;\n    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。\n        - 使用 as 关键字，也可省略 as.\n        select stu+10 as add10 from tb;\n\nb. FROM 子句\n    用于标识查询来源。\n    -- 可以为表起别名。使用as关键字。\n        SELECT * FROM tb1 AS tt, tb2 AS bb;\n    -- from子句后，可以同时出现多个表。\n        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。\n        SELECT * FROM tb1, tb2;\n    -- 向优化符提示如何选择索引\n        USE INDEX、IGNORE INDEX、FORCE INDEX\n        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;\n        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;\n\nc. WHERE 子句\n    -- 从from获得的数据源中进行筛选。\n    -- 整型1表示真，0表示假。\n    -- 表达式由运算符和运算数组成。\n        -- 运算数：变量（字段）、值、函数返回值\n        -- 运算符：\n            =, <=>, <>, !=, <=, <, >=, >, !, &&, ||,\n            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor\n            is/is not 加上ture/false/unknown，检验某个值的真假\n            <=>与<>功能相同，<=>可用于null比较\n\nd. GROUP BY 子句, 分组子句\n    GROUP BY 字段/别名 [排序方式]\n    分组后会进行排序。升序：ASC，降序：DESC\n\n    以下[合计函数]需配合 GROUP BY 使用：\n    count 返回不同的非NULL值数目  count(*)、count(字段)\n    sum 求和\n    max 求最大值\n    min 求最小值\n    avg 求平均值\n    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。\n\ne. HAVING 子句，条件子句\n    与 where 功能、用法相同，执行时机不同。\n    where 在开始时执行检测数据，对原数据进行过滤。\n    having 对筛选出的结果再次进行过滤。\n    having 字段必须是查询出来的，where 字段必须是数据表存在的。\n    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。\n    where 不可以使用合计函数。一般需用合计函数才会用 having\n    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。\n\nf. ORDER BY 子句，排序子句\n    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...\n    升序：ASC，降序：DESC\n    支持多个字段的排序。\n\ng. LIMIT 子句，限制结果数量子句\n    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。\n    limit 起始位置, 获取条数\n    省略第一个参数，表示从索引0开始。limit 获取条数\n\nh. DISTINCT, ALL 选项\n    distinct 去除重复记录\n    默认为 all, 全部记录\n```\n\n### UNION\n\n> 将多个select查询的结果组合成一个结果集合。\n\n```mysql\nSELECT ... UNION [ALL|DISTINCT] SELECT ...\n默认 DISTINCT 方式，即所有返回的行都是唯一的\n建议，对每个SELECT查询加上小括号包裹。\nORDER BY 排序时，需加上 LIMIT 进行结合。\n需要各select查询的字段数量一样。\n每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。\n```\n\n### 子查询\n\n> 子查询需用括号包裹。\n\n```mysql\n-- from型\n    from后要求是一个表，必须给子查询结果取个别名。\n    - 简化每个查询内的条件。\n    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。\n    - 子查询返回一个表，表型子查询。\n    select * from (select * from tb where id>0) as subfrom where id>1;\n-- where型\n    - 子查询返回一个值，标量子查询。\n    - 不需要给子查询取别名。\n    - where子查询内的表，不能直接用以更新。\n    select * from tb where money = (select max(money) from tb);\n    -- 列子查询\n        如果子查询结果返回的是一列。\n        使用 in 或 not in 完成查询\n        exists 和 not exists 条件\n            如果子查询返回数据，则返回1或0。常用于判断条件。\n            select column1 from t1 where exists (select * from t2);\n    -- 行子查询\n        查询条件是一个行。\n        select * from t1 where (id, gender) in (select id, gender from t2);\n        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)\n        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。\n\n    -- 特殊运算符\n    != all()    相当于 not in\n    = some()    相当于 in。any 是 some 的别名\n    != some()   不等同于 not in，不等于其中某一个。\n    all, some 可以配合其他运算符一起使用。\n```\n\n### 连接查询(join)```mysql\n\n> 将多个表的字段进行连接，可以指定连接条件。\n\n```mysql\n-- 内连接(inner join)\n    - 默认就是内连接，可省略inner。\n    - 只有数据存在时才能发送连接。即连接结果不能出现空行。\n    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）\n    也可用where表示连接条件。\n    还有 using, 但需字段名相同。 using(字段名)\n\n-- 交叉连接 cross join\n   即，没有条件的内连接。\n   select * from tb1 cross join tb2;\n-- 外连接(outer join)\n    - 如果数据不存在，也会出现在连接结果中。\n    -- 左外连接 left join\n        如果数据不存在，左表记录会出现，而右表为null填充\n    -- 右外连接 right join\n        如果数据不存在，右表记录会出现，而左表为null填充\n-- 自然连接(natural join)\n    自动判断连接条件完成连接。\n    相当于省略了using，会自动查找相同字段名。\n    natural join\n    natural left join\n    natural right join\n\nselect info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;\n```\n\n### 导入导出\n\n```mysql\nselect * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据\nload data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据\n    生成的数据默认的分隔符是制表符\n    local未指定，则数据文件必须在服务器上\n    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理\n-- 控制格式\nfields  控制字段格式\n默认：fields terminated by '\\t' enclosed by '' escaped by '\\\\'\n    terminated by 'string'  -- 终止\n    enclosed by 'char'      -- 包裹\n    escaped by 'char'       -- 转义\n    -- 示例：\n        SELECT a,b,a+b INTO OUTFILE '/tmp/result.text'\n        FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n        LINES TERMINATED BY '\\n'\n        FROM test_table;\nlines   控制行格式\n默认：lines terminated by '\\n'\n    terminated by 'string'  -- 终止\n```\n\n### INSERT\n\n```mysql\nselect语句获得的数据可以用insert插入。\n\n可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。\n    或者使用set语法。\n    INSERT INTO tbl_name SET field=value,...；\n\n可以一次性使用多个值，采用(), (), ();的形式。\n    INSERT INTO tbl_name VALUES (), (), ();\n\n可以在列值指定时，使用表达式。\n    INSERT INTO tbl_name VALUES (field_value, 10+10, now());\n可以使用一个特殊值 DEFAULT，表示该列使用默认值。\n    INSERT INTO tbl_name VALUES (field_value, DEFAULT);\n\n可以通过一个查询的结果，作为需要插入的值。\n    INSERT INTO tbl_name SELECT ...;\n\n可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。\n    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;\n```\n\n### DELETE\n\n```mysql\nDELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]\n\n按照条件删除。where\n\n指定删除的最多记录数。limit\n\n可以通过排序条件删除。order by + limit\n\n支持多表删除，使用类似连接语法。\ndelete from 需要删除数据多表1，表2 using 表连接操作 条件。\n```\n\n### TRUNCATE\n\n```mysql\nTRUNCATE [TABLE] tbl_name\n清空数据\n删除重建表\n\n区别：\n1，truncate 是删除表再创建，delete 是逐条删除\n2，truncate 重置auto_increment的值。而delete不会\n3，truncate 不知道删除了几条，而delete知道。\n4，当被用于带分区的表时，truncate 会保留分区\n```\n\n### 备份与还原\n\n> 备份，将数据的结构与表内数据保存起来。\n> 利用 mysqldump 指令完成。\n\n```mysql\n-- 导出\nmysqldump [options] db_name [tables]\nmysqldump [options] ---database DB1 [DB2 DB3...]\nmysqldump [options] --all--database\n\n\n1. 导出一张表\n　　mysqldump -u用户名 -p密码 库名 表名 > 文件名(D:/a.sql)\n2. 导出多张表\n　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 > 文件名(D:/a.sql)\n3. 导出所有表\n　　mysqldump -u用户名 -p密码 库名 > 文件名(D:/a.sql)\n4. 导出一个库\n　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 > 文件名(D:/a.sql)\n\n可以-w携带WHERE条件\n\n-- 导入\n1. 在登录mysql的情况下：\n　　source  备份文件\n2. 在不登录的情况下\n　　mysql -u用户名 -p密码 库名 < 备份文件\n```\n\n### 视图\n\n> 什么是视图：\n>     视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。\n>     视图具有表结构文件，但不存在数据文件。\n>     对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。\n>     视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。\n\n```mysql\n-- 创建视图\nCREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] VIEW view_name [(column_list)] AS select_statement\n    - 视图名必须唯一，同时不能与表重名。\n    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。\n    - 可以指定视图执行的算法，通过ALGORITHM指定。\n    - column_list如果存在，则数目必须等于SELECT语句检索的列数\n\n-- 查看结构\n    SHOW CREATE VIEW view_name\n\n-- 删除视图\n    - 删除视图后，数据依然存在。\n    - 可同时删除多个视图。\n    DROP VIEW [IF EXISTS] view_name ...\n\n-- 修改视图结构\n    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。\n    ALTER VIEW view_name [(column_list)] AS select_statement\n\n-- 视图作用\n    1. 简化业务逻辑\n    2. 对客户端隐藏真实的表结构\n\n-- 视图算法(ALGORITHM)\n    MERGE       合并\n        将视图的查询语句，与外部查询需要先合并再执行！\n    TEMPTABLE   临时表\n        将视图执行完毕后，形成临时表，再做外层查询！\n    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。\n```\n\n### 事务(transaction)\n\n> 事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。\n\n```mysql\n- 支持连续SQL的集体成功或集体撤销。\n- 事务是数据库在数据晚自习方面的一个功能。\n- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。\n- InnoDB被称为事务安全型引擎。\n\n-- 事务开启\n    START TRANSACTION; 或者 BEGIN;\n    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。\n-- 事务提交\n    COMMIT;\n-- 事务回滚\n    ROLLBACK;\n    如果部分操作发生问题，映射到事务开启前。\n\n-- 事务的特性\n    1. 原子性（Atomicity）\n        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。\n    2. 一致性（Consistency）\n        事务前后数据的完整性必须保持一致。\n        - 事务开始和结束时，外部数据一致\n        - 在整个事务过程中，操作是连续的\n    3. 隔离性（Isolation）\n        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。\n    4. 持久性（Durability）\n        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。\n\n-- 事务的实现\n    1. 要求是事务支持的表类型\n    2. 执行一组相关的操作前开启事务\n    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。\n\n-- 事务的原理\n    利用InnoDB的自动提交(autocommit)特性完成。\n    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。\n    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。\n\n-- 注意\n    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。\n    2. 事务不能被嵌套\n\n-- 保存点\n    SAVEPOINT 保存点名称 -- 设置一个事务保存点\n    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点\n    RELEASE SAVEPOINT 保存点名称 -- 删除保存点\n\n-- InnoDB自动提交特性设置\n    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。\n    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。\n    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，\n        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)\n        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)\n```\n\n### 锁表\n\n> 表锁定只用于防止其它客户端进行不正当地读取和写入\n> MyISAM 支持表锁，InnoDB 支持行锁\n\n```mysql\n-- 锁定\n    LOCK TABLES tbl_name [AS alias]\n-- 解锁\n    UNLOCK TABLES\n```\n\n### 触发器\n\n> 触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象\n> 监听：记录的增加、修改、删除。\n\n```mysql\n-- 创建触发器\nCREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt\n    参数：\n    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。\n    trigger_event指明了激活触发程序的语句的类型\n        INSERT：将新行插入表时激活触发程序\n        UPDATE：更改某一行时激活触发程序\n        DELETE：从表中删除某一行时激活触发程序\n    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。\n    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构\n\n-- 删除\nDROP TRIGGER [schema_name.]trigger_name\n\n可以使用old和new代替旧的和新的数据\n    更新操作，更新前是old，更新后是new.\n    删除操作，只有old.\n    增加操作，只有new.\n\n-- 注意\n    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。\n\n\n-- 字符连接函数\nconcat(str1,str2,...])\nconcat_ws(separator,str1,str2,...)\n\n-- 分支语句\nif 条件 then\n    执行语句\nelseif 条件 then\n    执行语句\nelse\n    执行语句\nend if;\n\n-- 修改最外层语句结束符\ndelimiter 自定义结束符号\n    SQL语句\n自定义结束符号\n\ndelimiter ;     -- 修改回原来的分号\n\n-- 语句块包裹\nbegin\n    语句块\nend\n\n-- 特殊的执行\n1. 只要添加记录，就会触发程序。\n2. Insert into on duplicate key update 语法会触发：\n    如果没有重复记录，会触发 before insert, after insert;\n    如果有重复记录并更新，会触发 before insert, before update, after update;\n    如果有重复记录但是没有发生更新，则触发 before insert, before update\n3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert\n```\n\n### SQL编程\n\n```mysql\n--// 局部变量 ----------\n-- 变量声明\n    declare var_name[,...] type [default value]\n    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。\n\n-- 赋值\n    使用 set 和 select into 语句为变量赋值。\n\n    - 注意：在函数内是可以使用全局变量（用户自定义的变量）\n\n\n--// 全局变量 ----------\n-- 定义、赋值\nset 语句可以定义并为变量赋值。\nset @var = value;\n也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。\n还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。\nselect @var:=20;\nselect @v1:=id, @v2=name from t1 limit 1;\nselect * from tbl_name where @var:=30;\n\nselect into 可以将表中查询获得的数据赋给变量。\n    -| select max(height) into @max_height from tb;\n\n-- 自定义变量名\n为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。\n@var=10;\n\n    - 变量被定义后，在整个会话周期都有效（登录到退出）\n\n\n--// 控制结构 ----------\n-- if语句\nif search_condition then\n    statement_list   \n[elseif search_condition then\n    statement_list]\n...\n[else\n    statement_list]\nend if;\n\n-- case语句\nCASE value WHEN [compare-value] THEN result\n[WHEN [compare-value] THEN result ...]\n[ELSE result]\nEND\n\n\n-- while循环\n[begin_label:] while search_condition do\n    statement_list\nend while [end_label];\n\n- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。\n\n    -- 退出循环\n        退出整个循环 leave\n        退出当前循环 iterate\n        通过退出的标签决定退出哪个循环\n\n\n--// 内置函数 ----------\n-- 数值函数\nabs(x)          -- 绝对值 abs(-10.9) = 10\nformat(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46\nceil(x)         -- 向上取整 ceil(10.1) = 11\nfloor(x)        -- 向下取整 floor (10.1) = 10\nround(x)        -- 四舍五入去整\nmod(m, n)       -- m%n m mod n 求余 10%3=1\npi()            -- 获得圆周率\npow(m, n)       -- m^n\nsqrt(x)         -- 算术平方根\nrand()          -- 随机数\ntruncate(x, d)  -- 截取d位小数\n\n-- 时间日期函数\nnow(), current_timestamp();     -- 当前日期时间\ncurrent_date();                 -- 当前日期\ncurrent_time();                 -- 当前时间\ndate('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分\ntime('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分\ndate_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j'); -- 格式化时间\nunix_timestamp();               -- 获得unix时间戳\nfrom_unixtime();                -- 从时间戳获得时间\n\n-- 字符串函数\nlength(string)          -- string长度，字节\nchar_length(string)     -- string的字符个数\nsubstring(str, position [,length])      -- 从str的position开始,取length个字符\nreplace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str\ninstr(string ,substring)    -- 返回substring首次在string中出现的位置\nconcat(string [,...])   -- 连接字串\ncharset(str)            -- 返回字串字符集\nlcase(string)           -- 转换成小写\nleft(string, length)    -- 从string2中的左边起取length个字符\nload_file(file_name)    -- 从文件读取内容\nlocate(substring, string [,start_position]) -- 同instr,但可指定开始位置\nlpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length\nltrim(string)           -- 去除前端空格\nrepeat(string, count)   -- 重复count次\nrpad(string, length, pad)   --在str后用pad补充,直到长度为length\nrtrim(string)           -- 去除后端空格\nstrcmp(string1 ,string2)    -- 逐字符比较两字串大小\n\n-- 流程函数\ncase when [condition] then result [when [condition] then result ...] [else result] end   多分支\nif(expr1,expr2,expr3)  双分支。\n\n-- 聚合函数\ncount()\nsum();\nmax();\nmin();\navg();\ngroup_concat()\n\n-- 其他常用函数\nmd5();\ndefault();\n\n--// 存储函数，自定义函数 ----------\n-- 新建\n    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型\n        函数体\n\n    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。\n    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。\n    - 参数部分，由\"参数名\"和\"参数类型\"组成。多个参数用逗号隔开。\n    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。\n    - 多条语句应该使用 begin...end 语句块包含。\n    - 一定要有 return 返回值语句。\n\n-- 删除\n    DROP FUNCTION [IF EXISTS] function_name;\n\n-- 查看\n    SHOW FUNCTION STATUS LIKE 'partten'\n    SHOW CREATE FUNCTION function_name;\n\n-- 修改\n    ALTER FUNCTION function_name 函数选项\n\n\n--// 存储过程，自定义功能 ----------\n-- 定义\n存储存储过程 是一段代码（过程），存储在数据库中的sql组成。\n一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。\n而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。\n\n-- 创建\nCREATE PROCEDURE sp_name (参数列表)\n    过程体\n\n参数列表：不同于函数的参数列表，需要指明参数类型\nIN，表示输入型\nOUT，表示输出型\nINOUT，表示混合型\n\n注意，没有返回值。\n```\n\n### 存储过程\n\n> 存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。\n> 调用：CALL 过程名\n\n```mysql\n-- 注意\n- 没有返回值。\n- 只能单独调用，不可夹杂在其他语句中\n\n-- 参数\nIN|OUT|INOUT 参数名 数据类型\nIN      输入：在调用过程中，将数据输入到过程体内部的参数\nOUT     输出：在调用过程中，将过程体处理完的结果返回到客户端\nINOUT   输入输出：既可输入，也可输出\n\n-- 语法\nCREATE PROCEDURE 过程名 (参数列表)\nBEGIN\n    过程体\nEND\n```\n\n### 用户和权限管理\n\n```mysql\n-- root密码重置\n1. 停止MySQL服务\n2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &\n    [Windows] mysqld --skip-grant-tables\n3. use mysql;\n4. UPDATE `user` SET PASSWORD=PASSWORD(\"密码\") WHERE `user` = \"root\";\n5. FLUSH PRIVILEGES;\n\n用户信息表：mysql.user\n-- 刷新权限\nFLUSH PRIVILEGES;\n-- 增加用户\nCREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)\n    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。\n    - 只能创建用户，不能赋予权限。\n    - 用户名，注意引号：如 'user_name'@'192.168.1.1'\n    - 密码也需引号，纯数字密码也要加引号\n    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD\n-- 重命名用户\nRENAME USER old_user TO new_user\n-- 设置密码\nSET PASSWORD = PASSWORD('密码')  -- 为当前用户设置密码\nSET PASSWORD FOR 用户名 = PASSWORD('密码') -- 为指定用户设置密码\n-- 删除用户\nDROP USER 用户名\n-- 分配权限/添加用户\nGRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password']\n    - all privileges 表示所有权限\n    - *.* 表示所有库的所有表\n    - 库名.表名 表示某库下面的某表\n    GRANT ALL PRIVILEGES ON `pms`.* TO 'pms'@'%' IDENTIFIED BY 'pms0817';\n-- 查看权限\nSHOW GRANTS FOR 用户名\n    -- 查看当前用户权限\n    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();\n-- 撤消权限\nREVOKE 权限列表 ON 表名 FROM 用户名\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限\n-- 权限层级\n-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。\n全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user\n    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。\n数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host\n    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。\n表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv\n    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。\n列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv\n    当使用REVOKE时，您必须指定与被授权列相同的列。\n-- 权限列表\nALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限\nALTER   -- 允许使用ALTER TABLE\nALTER ROUTINE   -- 更改或取消已存储的子程序\nCREATE  -- 允许使用CREATE TABLE\nCREATE ROUTINE  -- 创建已存储的子程序\nCREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE\nCREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。\nCREATE VIEW     -- 允许使用CREATE VIEW\nDELETE  -- 允许使用DELETE\nDROP    -- 允许使用DROP TABLE\nEXECUTE     -- 允许用户运行已存储的子程序\nFILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE\nINDEX   -- 允许使用CREATE INDEX和DROP INDEX\nINSERT  -- 允许使用INSERT\nLOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES\nPROCESS     -- 允许使用SHOW FULL PROCESSLIST\nREFERENCES  -- 未被实施\nRELOAD  -- 允许使用FLUSH\nREPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址\nREPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）\nSELECT  -- 允许使用SELECT\nSHOW DATABASES  -- 显示所有数据库\nSHOW VIEW   -- 允许使用SHOW CREATE VIEW\nSHUTDOWN    -- 允许使用mysqladmin shutdown\nSUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。\nUPDATE  -- 允许使用UPDATE\nUSAGE   -- “无权限”的同义词\nGRANT OPTION    -- 允许授予权限\n```\n\n### 表维护\n\n```mysql\n-- 分析和存储表的关键字分布\nANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...\n-- 检查一个或多个表是否有错误\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\noption = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}\n-- 整理数据文件的碎片\nOPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n### 杂项\n\n```mysql\n1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！\n2. 每个库目录存在一个保存当前数据库的选项文件db.opt。\n3. 注释：\n    单行注释 # 注释内容\n    多行注释 /* 注释内容 */\n    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)\n4. 模式通配符：\n    _   任意单个字符\n    %   任意多个字符，甚至包括零字符\n    单引号需要进行转义 \\'\n5. CMD命令行内的语句结束符可以为 \";\", \"\\G\", \"\\g\"，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。\n6. SQL对大小写不敏感\n7. 清除已有语句：\\c\n```\n\n原文连接：https://shockerli.net/post/1000-line-mysql-note/\n","slug":"数据库/Mysql/MySQL学习笔记","published":1,"date":"2022-11-28T10:03:40.011Z","updated":"2022-11-28T10:57:23.998Z","_id":"clb0oel88000e6oia9vm3gsak","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MySQL-学习笔记\"><a href=\"#MySQL-学习笔记\" class=\"headerlink\" title=\"MySQL 学习笔记\"></a>MySQL 学习笔记</h1><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 查看当前数据库<br>    SELECT DATABASE();<br>-- 显示当前时间、用户名、数据库版本<br>    SELECT now(), user(), version();<br>-- 创建库<br>    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项<br>    数据库选项：<br>        CHARACTER SET charset_name<br>        COLLATE collation_name<br>-- 查看已有库<br>    SHOW DATABASES[ LIKE &#x27;PATTERN&#x27;]<br>-- 查看当前库信息<br>    SHOW CREATE DATABASE 数据库名<br>-- 修改库的选项信息<br>    ALTER DATABASE 库名 选项信息<br>-- 删除库<br>    DROP DATABASE[ IF EXISTS] 数据库名<br>        同时删除该数据库相关的目录及其目录内容<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表的操作\"><a href=\"#表的操作\" class=\"headerlink\" title=\"表的操作\"></a>表的操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建表<br>    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]<br>        每个字段必须有数据类型<br>        最后一个字段后不能有逗号<br>        TEMPORARY 临时表，会话结束时表自动消失<br>        对于字段的定义：<br>            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &#x27;string&#x27;]<br>-- 表选项<br>    -- 字符集<br>        CHARSET = charset_name<br>        如果表没有设定，则使用数据库字符集<br>    -- 存储引擎<br>        ENGINE = engine_name<br>        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同<br>        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive<br>        不同的引擎在保存表的结构和数据时采用不同的方式<br>        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引<br>        InnoDB表文件含义：.frm表定义，表空间数据和日志文件<br>        SHOW ENGINES -- 显示存储引擎的状态信息<br>        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息<br>    -- 自增起始数<br>    \tAUTO_INCREMENT = 行数<br>    -- 数据文件目录<br>        DATA DIRECTORY = &#x27;目录&#x27;<br>    -- 索引文件目录<br>        INDEX DIRECTORY = &#x27;目录&#x27;<br>    -- 表注释<br>        COMMENT = &#x27;string&#x27;<br>    -- 分区选项<br>        PARTITION BY ... (详细见手册)<br>-- 查看所有表<br>    SHOW TABLES[ LIKE &#x27;pattern&#x27;]<br>    SHOW TABLES FROM 表名<br>-- 查看表机构<br>    SHOW CREATE TABLE 表名 （信息更详细）<br>    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &#x27;PATTERN&#x27;]<br>    SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;]<br>-- 修改表<br>    -- 修改表本身的选项<br>        ALTER TABLE 表名 表的选项<br>        eg: ALTER TABLE 表名 ENGINE=MYISAM;<br>    -- 对表进行重命名<br>        RENAME TABLE 原表名 TO 新表名<br>        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）<br>        -- RENAME可以交换两个表名<br>    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）<br>        ALTER TABLE 表名 操作名<br>        -- 操作名<br>            ADD[ COLUMN] 字段定义       -- 增加字段<br>                AFTER 字段名          -- 表示增加在该字段名后面<br>                FIRST               -- 表示增加在第一个<br>            ADD PRIMARY KEY(字段名)   -- 创建主键<br>            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引<br>            ADD INDEX [索引名] (字段名) -- 创建普通索引<br>            DROP[ COLUMN] 字段名      -- 删除字段<br>            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)<br>            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改<br>            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)<br>            DROP INDEX 索引名 -- 删除索引<br>            DROP FOREIGN KEY 外键    -- 删除外键<br><br>-- 删除表<br>    DROP TABLE[ IF EXISTS] 表名 ...<br>-- 清空表数据<br>    TRUNCATE [TABLE] 表名<br>-- 复制表结构<br>    CREATE TABLE 表名 LIKE 要复制的表名<br>-- 复制表结构和数据<br>    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名<br>-- 检查表是否有错误<br>    CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>-- 优化表<br>    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br>-- 修复表<br>    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]<br>-- 分析表<br>    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 增<br>    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]<br>        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。<br>        -- 可同时插入多条数据记录！<br>        REPLACE 与 INSERT 完全一样，可互换。<br>    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]<br>-- 查<br>    SELECT 字段列表 FROM 表名[ 其他子句]<br>        -- 可来自多个表的多个字段<br>        -- 其他子句可以不使用<br>        -- 字段列表可以用*代替，表示所有字段<br>-- 删<br>    DELETE FROM 表名[ 删除条件子句]<br>        没有条件子句，则会删除全部<br>-- 改<br>    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符集编码\"><a href=\"#字符集编码\" class=\"headerlink\" title=\"字符集编码\"></a>字符集编码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- MySQL、数据库、表、字段均可设置编码<br>-- 数据编码与客户端编码不需一致<br>SHOW VARIABLES LIKE &#x27;character_set_%&#x27;   -- 查看所有字符集编码项<br>    character_set_client        客户端向服务器发送数据时使用的编码<br>    character_set_results       服务器端将结果返回给客户端所使用的编码<br>    character_set_connection    连接层编码<br>SET 变量名 = 变量值<br>    SET character_set_client = gbk;<br>    SET character_set_results = gbk;<br>    SET character_set_connection = gbk;<br>SET NAMES GBK;  -- 相当于完成以上三个设置<br>-- 校对集<br>    校对集用以排序<br>    SHOW CHARACTER SET [LIKE &#x27;pattern&#x27;]/SHOW CHARSET [LIKE &#x27;pattern&#x27;]   查看所有字符集<br>    SHOW COLLATION [LIKE &#x27;pattern&#x27;]     查看所有校对集<br>    CHARSET 字符集编码     设置字符集编码<br>    COLLATE 校对集编码     设置校对集编码<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数据类型（列类型）\"><a href=\"#数据类型（列类型）\" class=\"headerlink\" title=\"数据类型（列类型）\"></a>数据类型（列类型）</h3><p><strong>1. 数值类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. 整型 ----------<br>    类型         字节     范围（有符号位）<br>    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255<br>    smallint    2字节    -32768 ~ 32767<br>    mediumint   3字节    -8388608 ~ 8388607<br>    int         4字节<br>    bigint      8字节<br><br>    int(M)  M表示总位数<br>    - 默认存在符号位，unsigned 属性修改<br>    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改<br>        例：int(5)   插入一个数&#x27;123&#x27;，补填后为&#x27;00123&#x27;<br>    - 在满足要求的情况下，越小越好。<br>    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。<br><br>-- b. 浮点型 ----------<br>    类型             字节     范围<br>    float(单精度)     4字节<br>    double(双精度)    8字节<br>    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。<br>        不同于整型，前后均会补填0.<br>    定义浮点型时，需指定总位数和小数位数。<br>        float(M, D)     double(M, D)<br>        M表示总位数，D表示小数位数。<br>        M和D的大小会决定浮点数的范围。不同于整型的固定范围。<br>        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。<br>        支持科学计数法表示。<br>        浮点数表示近似值。<br><br>-- c. 定点数 ----------<br>    decimal -- 可变长度<br>    decimal(M, D)   M也表示总位数，D表示小数位数。<br>    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。<br>    将浮点数转换为字符串来保存，每9位数字保存为4个字节。<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. 字符串类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. char, varchar ----------<br>    char    定长字符串，速度快，但浪费空间<br>    varchar 变长字符串，速度慢，但节省空间<br>    M表示能存储的最大长度，此长度是字符数，非字节数。<br>    不同的编码，所占用的空间不同。<br>    char,最多255个字符，与编码无关。<br>    varchar,最多65535字符，与编码有关。<br>    一条有效记录最大不能超过65535个字节。<br>        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符<br>    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。<br>    varchar 的最大有效长度由最大行大小和使用的字符集确定。<br>    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。<br>    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3<br><br>-- b. blob, text ----------<br>    blob 二进制字符串（字节字符串）<br>        tinyblob, blob, mediumblob, longblob<br>    text 非二进制字符串（字符字符串）<br>        tinytext, text, mediumtext, longtext<br>    text 在定义时，不需要定义长度，也不会计算总长度。<br>    text 类型在定义时，不可给default值<br><br>-- c. binary, varbinary ----------<br>    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。<br>    char, varchar, text 对应 binary, varbinary, blob.<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. 日期时间类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。<br>datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59<br>date        3字节    日期         1000-01-01 到 9999-12-31<br>timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07<br>time        3字节    时间         -838:59:59 到 838:59:59<br>year        1字节    年份         1901 - 2155<br><br>datetime    YYYY-MM-DD hh:mm:ss<br>timestamp   YY-MM-DD hh:mm:ss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>date        YYYY-MM-DD<br>            YY-MM-DD<br>            YYYYMMDD<br>            YYMMDD<br>            YYYYMMDD<br>            YYMMDD<br>time        hh:mm:ss<br>            hhmmss<br>            hhmmss<br>year        YYYY<br>            YY<br>            YYYY<br>            YY<br></code></pre></td></tr></table></figure>\n\n<p><strong>4. 枚举和集合</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 枚举(enum) ----------<br>enum(val1, val2, val3...)<br>    在已知的值中进行单选。最大数量为65535.<br>    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。<br>    表现为字符串类型，存储却是整型。<br>    NULL值的索引是NULL。<br>    空字符串错误值的索引值是0。<br><br>-- 集合（set） ----------<br>set(val1, val2, val3...)<br>    create table tab ( gender set(&#x27;男&#x27;, &#x27;女&#x27;, &#x27;无&#x27;) );<br>    insert into tab values (&#x27;男, 女&#x27;);<br>    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。<br>    当创建表时，SET成员值的尾部空格将自动被删除。<br><br>/* 选择类型 */<br>-- PHP角度<br>1. 功能满足<br>2. 存储空间尽量小，处理效率更高<br>3. 考虑兼容问题<br></code></pre></td></tr></table></figure>\n\n<p><strong>IP存储</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 只需存储，可用字符串<br>2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned<br>    1) PHP函数转换<br>        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。<br>        利用sprintf函数格式化字符串<br>        sprintf(&quot;%u&quot;, ip2long(&#x27;192.168.3.134&#x27;));<br>        然后用long2ip将整型转回IP字符串<br>    2) MySQL函数转换(无符号整型，UNSIGNED)<br>        INET_ATON(&#x27;127.0.0.1&#x27;) 将IP转为整型<br>        INET_NTOA(2130706433) 将整型转为IP<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列属性（列约束）\"><a href=\"#列属性（列约束）\" class=\"headerlink\" title=\"列属性（列约束）\"></a>列属性（列约束）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. PRIMARY 主键<br>    - 能唯一标识记录的字段，可以作为主键。<br>    - 一个表只能有一个主键。<br>    - 主键具有唯一性。<br>    - 声明字段时，用 primary key 标识。<br>        也可以在字段列表之后声明<br>            例：create table tab ( id int, stu varchar(10), primary key (id));<br>    - 主键字段的值不能为null。<br>    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。<br>        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));<br><br>2. UNIQUE 唯一索引（唯一约束）<br>    使得某字段的值也不能重复。<br><br>3. NULL 约束<br>    null不是数据类型，是列的一个属性。<br>    表示当前列是否可以为null，表示什么都没有。<br>    null, 允许为空。默认。<br>    not null, 不允许为空。<br>    insert into tab values (null, &#x27;val&#x27;);<br>        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null<br><br>4. DEFAULT 默认值属性<br>    当前字段的默认值。<br>    insert into tab values (default, &#x27;val&#x27;);    -- 此时表示强制使用默认值。<br>    create table tab ( add_time timestamp default current_timestamp );<br>        -- 表示将当前时间的时间戳设为默认值。<br>        current_date, current_time<br><br>5. AUTO_INCREMENT 自动增长约束<br>    自动增长必须为索引（主键或unique）<br>    只能存在一个字段为自动增长。<br>    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;<br><br>6. COMMENT 注释<br>    例：create table tab ( id int ) comment &#x27;注释内容&#x27;;<br><br>7. FOREIGN KEY 外键约束<br>    用于限制主表与从表数据完整性。<br>    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);<br>        -- 将表t1的t1_id外键关联到表t2的id字段。<br>        -- 每个外键都有一个名字，可以通过 constraint 指定<br><br>    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。<br><br>    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。<br><br>    MySQL中，可以对InnoDB引擎使用外键约束：<br>    语法：<br>    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]<br>    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。<br><br>    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。<br>    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：<br>    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。<br>    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。<br>    3. restrict，拒绝父表删除和更新。<br><br>    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建表规范\"><a href=\"#建表规范\" class=\"headerlink\" title=\"建表规范\"></a>建表规范</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- Normal Format, NF<br>    - 每个表保存一个实体信息<br>    - 每个具有一个ID字段作为主键<br>    - ID主键 + 原子表<br>-- 1NF, 第一范式<br>    字段不能再分，就满足第一范式。<br>-- 2NF, 第二范式<br>    满足第一范式的前提下，不能出现部分依赖。<br>    消除符合主键就可以避免部分依赖。增加单列关键字。<br>-- 3NF, 第三范式<br>    满足第二范式的前提下，不能出现传递依赖。<br>    某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。<br>    将一个实体信息的数据放在一个表内实现。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT<br><br>a. select_expr<br>    -- 可以用 * 表示所有字段。<br>        select * from tb;<br>    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）<br>        select stu, 29+25, now() from tb;<br>    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。<br>        - 使用 as 关键字，也可省略 as.<br>        select stu+10 as add10 from tb;<br><br>b. FROM 子句<br>    用于标识查询来源。<br>    -- 可以为表起别名。使用as关键字。<br>        SELECT * FROM tb1 AS tt, tb2 AS bb;<br>    -- from子句后，可以同时出现多个表。<br>        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。<br>        SELECT * FROM tb1, tb2;<br>    -- 向优化符提示如何选择索引<br>        USE INDEX、IGNORE INDEX、FORCE INDEX<br>        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;<br>        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;<br><br>c. WHERE 子句<br>    -- 从from获得的数据源中进行筛选。<br>    -- 整型1表示真，0表示假。<br>    -- 表达式由运算符和运算数组成。<br>        -- 运算数：变量（字段）、值、函数返回值<br>        -- 运算符：<br>            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,<br>            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor<br>            is/is not 加上ture/false/unknown，检验某个值的真假<br>            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较<br><br>d. GROUP BY 子句, 分组子句<br>    GROUP BY 字段/别名 [排序方式]<br>    分组后会进行排序。升序：ASC，降序：DESC<br><br>    以下[合计函数]需配合 GROUP BY 使用：<br>    count 返回不同的非NULL值数目  count(*)、count(字段)<br>    sum 求和<br>    max 求最大值<br>    min 求最小值<br>    avg 求平均值<br>    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。<br><br>e. HAVING 子句，条件子句<br>    与 where 功能、用法相同，执行时机不同。<br>    where 在开始时执行检测数据，对原数据进行过滤。<br>    having 对筛选出的结果再次进行过滤。<br>    having 字段必须是查询出来的，where 字段必须是数据表存在的。<br>    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。<br>    where 不可以使用合计函数。一般需用合计函数才会用 having<br>    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。<br><br>f. ORDER BY 子句，排序子句<br>    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...<br>    升序：ASC，降序：DESC<br>    支持多个字段的排序。<br><br>g. LIMIT 子句，限制结果数量子句<br>    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。<br>    limit 起始位置, 获取条数<br>    省略第一个参数，表示从索引0开始。limit 获取条数<br><br>h. DISTINCT, ALL 选项<br>    distinct 去除重复记录<br>    默认为 all, 全部记录<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h3><blockquote>\n<p>将多个select查询的结果组合成一个结果集合。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT ... UNION [ALL|DISTINCT] SELECT ...<br>默认 DISTINCT 方式，即所有返回的行都是唯一的<br>建议，对每个SELECT查询加上小括号包裹。<br>ORDER BY 排序时，需加上 LIMIT 进行结合。<br>需要各select查询的字段数量一样。<br>每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><blockquote>\n<p>子查询需用括号包裹。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- from型<br>    from后要求是一个表，必须给子查询结果取个别名。<br>    - 简化每个查询内的条件。<br>    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。<br>    - 子查询返回一个表，表型子查询。<br>    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;<br>-- where型<br>    - 子查询返回一个值，标量子查询。<br>    - 不需要给子查询取别名。<br>    - where子查询内的表，不能直接用以更新。<br>    select * from tb where money = (select max(money) from tb);<br>    -- 列子查询<br>        如果子查询结果返回的是一列。<br>        使用 in 或 not in 完成查询<br>        exists 和 not exists 条件<br>            如果子查询返回数据，则返回1或0。常用于判断条件。<br>            select column1 from t1 where exists (select * from t2);<br>    -- 行子查询<br>        查询条件是一个行。<br>        select * from t1 where (id, gender) in (select id, gender from t2);<br>        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)<br>        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。<br><br>    -- 特殊运算符<br>    != all()    相当于 not in<br>    = some()    相当于 in。any 是 some 的别名<br>    != some()   不等同于 not in，不等于其中某一个。<br>    all, some 可以配合其他运算符一起使用。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"连接查询-join-96-96-96-mysql\"><a href=\"#连接查询-join-96-96-96-mysql\" class=\"headerlink\" title=\"连接查询(join)&#96;&#96;&#96;mysql\"></a>连接查询(join)&#96;&#96;&#96;mysql</h3><blockquote>\n<p>将多个表的字段进行连接，可以指定连接条件。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 内连接(inner join)<br>    - 默认就是内连接，可省略inner。<br>    - 只有数据存在时才能发送连接。即连接结果不能出现空行。<br>    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）<br>    也可用where表示连接条件。<br>    还有 using, 但需字段名相同。 using(字段名)<br><br>-- 交叉连接 cross join<br>   即，没有条件的内连接。<br>   select * from tb1 cross join tb2;<br>-- 外连接(outer join)<br>    - 如果数据不存在，也会出现在连接结果中。<br>    -- 左外连接 left join<br>        如果数据不存在，左表记录会出现，而右表为null填充<br>    -- 右外连接 right join<br>        如果数据不存在，右表记录会出现，而左表为null填充<br>-- 自然连接(natural join)<br>    自动判断连接条件完成连接。<br>    相当于省略了using，会自动查找相同字段名。<br>    natural join<br>    natural left join<br>    natural right join<br><br>select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据<br>load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据<br>    生成的数据默认的分隔符是制表符<br>    local未指定，则数据文件必须在服务器上<br>    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理<br>-- 控制格式<br>fields  控制字段格式<br>默认：fields terminated by &#x27;\\t&#x27; enclosed by &#x27;&#x27; escaped by &#x27;\\\\&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br>    enclosed by &#x27;char&#x27;      -- 包裹<br>    escaped by &#x27;char&#x27;       -- 转义<br>    -- 示例：<br>        SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27;<br>        FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;<br>        LINES TERMINATED BY &#x27;\\n&#x27;<br>        FROM test_table;<br>lines   控制行格式<br>默认：lines terminated by &#x27;\\n&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select语句获得的数据可以用insert插入。<br><br>可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。<br>    或者使用set语法。<br>    INSERT INTO tbl_name SET field=value,...；<br><br>可以一次性使用多个值，采用(), (), ();的形式。<br>    INSERT INTO tbl_name VALUES (), (), ();<br><br>可以在列值指定时，使用表达式。<br>    INSERT INTO tbl_name VALUES (field_value, 10+10, now());<br>可以使用一个特殊值 DEFAULT，表示该列使用默认值。<br>    INSERT INTO tbl_name VALUES (field_value, DEFAULT);<br><br>可以通过一个查询的结果，作为需要插入的值。<br>    INSERT INTO tbl_name SELECT ...;<br><br>可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。<br>    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]<br><br>按照条件删除。where<br><br>指定删除的最多记录数。limit<br><br>可以通过排序条件删除。order by + limit<br><br>支持多表删除，使用类似连接语法。<br>delete from 需要删除数据多表1，表2 using 表连接操作 条件。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"TRUNCATE\"><a href=\"#TRUNCATE\" class=\"headerlink\" title=\"TRUNCATE\"></a>TRUNCATE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">TRUNCATE [TABLE] tbl_name<br>清空数据<br>删除重建表<br><br>区别：<br>1，truncate 是删除表再创建，delete 是逐条删除<br>2，truncate 重置auto_increment的值。而delete不会<br>3，truncate 不知道删除了几条，而delete知道。<br>4，当被用于带分区的表时，truncate 会保留分区<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份与还原\"><a href=\"#备份与还原\" class=\"headerlink\" title=\"备份与还原\"></a>备份与还原</h3><blockquote>\n<p>备份，将数据的结构与表内数据保存起来。<br>利用 mysqldump 指令完成。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 导出<br>mysqldump [options] db_name [tables]<br>mysqldump [options] ---database DB1 [DB2 DB3...]<br>mysqldump [options] --all--database<br><br><br>1. 导出一张表<br>　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)<br>2. 导出多张表<br>　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)<br>3. 导出所有表<br>　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)<br>4. 导出一个库<br>　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)<br><br>可以-w携带WHERE条件<br><br>-- 导入<br>1. 在登录mysql的情况下：<br>　　source  备份文件<br>2. 在不登录的情况下<br>　　mysql -u用户名 -p密码 库名 &lt; 备份文件<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><blockquote>\n<p>什么是视图：<br>    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>    视图具有表结构文件，但不存在数据文件。<br>    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建视图<br>CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement<br>    - 视图名必须唯一，同时不能与表重名。<br>    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。<br>    - 可以指定视图执行的算法，通过ALGORITHM指定。<br>    - column_list如果存在，则数目必须等于SELECT语句检索的列数<br><br>-- 查看结构<br>    SHOW CREATE VIEW view_name<br><br>-- 删除视图<br>    - 删除视图后，数据依然存在。<br>    - 可同时删除多个视图。<br>    DROP VIEW [IF EXISTS] view_name ...<br><br>-- 修改视图结构<br>    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。<br>    ALTER VIEW view_name [(column_list)] AS select_statement<br><br>-- 视图作用<br>    1. 简化业务逻辑<br>    2. 对客户端隐藏真实的表结构<br><br>-- 视图算法(ALGORITHM)<br>    MERGE       合并<br>        将视图的查询语句，与外部查询需要先合并再执行！<br>    TEMPTABLE   临时表<br>        将视图执行完毕后，形成临时表，再做外层查询！<br>    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"事务-transaction\"><a href=\"#事务-transaction\" class=\"headerlink\" title=\"事务(transaction)\"></a>事务(transaction)</h3><blockquote>\n<p>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">- 支持连续SQL的集体成功或集体撤销。<br>- 事务是数据库在数据晚自习方面的一个功能。<br>- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。<br>- InnoDB被称为事务安全型引擎。<br><br>-- 事务开启<br>    START TRANSACTION; 或者 BEGIN;<br>    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。<br>-- 事务提交<br>    COMMIT;<br>-- 事务回滚<br>    ROLLBACK;<br>    如果部分操作发生问题，映射到事务开启前。<br><br>-- 事务的特性<br>    1. 原子性（Atomicity）<br>        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。<br>    2. 一致性（Consistency）<br>        事务前后数据的完整性必须保持一致。<br>        - 事务开始和结束时，外部数据一致<br>        - 在整个事务过程中，操作是连续的<br>    3. 隔离性（Isolation）<br>        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。<br>    4. 持久性（Durability）<br>        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。<br><br>-- 事务的实现<br>    1. 要求是事务支持的表类型<br>    2. 执行一组相关的操作前开启事务<br>    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。<br><br>-- 事务的原理<br>    利用InnoDB的自动提交(autocommit)特性完成。<br>    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。<br>    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。<br><br>-- 注意<br>    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。<br>    2. 事务不能被嵌套<br><br>-- 保存点<br>    SAVEPOINT 保存点名称 -- 设置一个事务保存点<br>    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点<br>    RELEASE SAVEPOINT 保存点名称 -- 删除保存点<br><br>-- InnoDB自动提交特性设置<br>    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。<br>    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。<br>    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，<br>        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)<br>        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h3><blockquote>\n<p>表锁定只用于防止其它客户端进行不正当地读取和写入<br>MyISAM 支持表锁，InnoDB 支持行锁</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 锁定<br>    LOCK TABLES tbl_name [AS alias]<br>-- 解锁<br>    UNLOCK TABLES<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><blockquote>\n<p>触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象<br>监听：记录的增加、修改、删除。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建触发器<br>CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt<br>    参数：<br>    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。<br>    trigger_event指明了激活触发程序的语句的类型<br>        INSERT：将新行插入表时激活触发程序<br>        UPDATE：更改某一行时激活触发程序<br>        DELETE：从表中删除某一行时激活触发程序<br>    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。<br>    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构<br><br>-- 删除<br>DROP TRIGGER [schema_name.]trigger_name<br><br>可以使用old和new代替旧的和新的数据<br>    更新操作，更新前是old，更新后是new.<br>    删除操作，只有old.<br>    增加操作，只有new.<br><br>-- 注意<br>    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。<br><br><br>-- 字符连接函数<br>concat(str1,str2,...])<br>concat_ws(separator,str1,str2,...)<br><br>-- 分支语句<br>if 条件 then<br>    执行语句<br>elseif 条件 then<br>    执行语句<br>else<br>    执行语句<br>end if;<br><br>-- 修改最外层语句结束符<br>delimiter 自定义结束符号<br>    SQL语句<br>自定义结束符号<br><br>delimiter ;     -- 修改回原来的分号<br><br>-- 语句块包裹<br>begin<br>    语句块<br>end<br><br>-- 特殊的执行<br>1. 只要添加记录，就会触发程序。<br>2. Insert into on duplicate key update 语法会触发：<br>    如果没有重复记录，会触发 before insert, after insert;<br>    如果有重复记录并更新，会触发 before insert, before update, after update;<br>    如果有重复记录但是没有发生更新，则触发 before insert, before update<br>3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SQL编程\"><a href=\"#SQL编程\" class=\"headerlink\" title=\"SQL编程\"></a>SQL编程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">--// 局部变量 ----------<br>-- 变量声明<br>    declare var_name[,...] type [default value]<br>    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。<br><br>-- 赋值<br>    使用 set 和 select into 语句为变量赋值。<br><br>    - 注意：在函数内是可以使用全局变量（用户自定义的变量）<br><br><br>--// 全局变量 ----------<br>-- 定义、赋值<br>set 语句可以定义并为变量赋值。<br>set @var = value;<br>也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。<br>还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。<br>select @var:=20;<br>select @v1:=id, @v2=name from t1 limit 1;<br>select * from tbl_name where @var:=30;<br><br>select into 可以将表中查询获得的数据赋给变量。<br>    -| select max(height) into @max_height from tb;<br><br>-- 自定义变量名<br>为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。<br>@var=10;<br><br>    - 变量被定义后，在整个会话周期都有效（登录到退出）<br><br><br>--// 控制结构 ----------<br>-- if语句<br>if search_condition then<br>    statement_list   <br>[elseif search_condition then<br>    statement_list]<br>...<br>[else<br>    statement_list]<br>end if;<br><br>-- case语句<br>CASE value WHEN [compare-value] THEN result<br>[WHEN [compare-value] THEN result ...]<br>[ELSE result]<br>END<br><br><br>-- while循环<br>[begin_label:] while search_condition do<br>    statement_list<br>end while [end_label];<br><br>- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。<br><br>    -- 退出循环<br>        退出整个循环 leave<br>        退出当前循环 iterate<br>        通过退出的标签决定退出哪个循环<br><br><br>--// 内置函数 ----------<br>-- 数值函数<br>abs(x)          -- 绝对值 abs(-10.9) = 10<br>format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46<br>ceil(x)         -- 向上取整 ceil(10.1) = 11<br>floor(x)        -- 向下取整 floor (10.1) = 10<br>round(x)        -- 四舍五入去整<br>mod(m, n)       -- m%n m mod n 求余 10%3=1<br>pi()            -- 获得圆周率<br>pow(m, n)       -- m^n<br>sqrt(x)         -- 算术平方根<br>rand()          -- 随机数<br>truncate(x, d)  -- 截取d位小数<br><br>-- 时间日期函数<br>now(), current_timestamp();     -- 当前日期时间<br>current_date();                 -- 当前日期<br>current_time();                 -- 当前时间<br>date(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取日期部分<br>time(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取时间部分<br>date_format(&#x27;yyyy-mm-dd hh:ii:ss&#x27;, &#x27;%d %y %a %d %m %b %j&#x27;); -- 格式化时间<br>unix_timestamp();               -- 获得unix时间戳<br>from_unixtime();                -- 从时间戳获得时间<br><br>-- 字符串函数<br>length(string)          -- string长度，字节<br>char_length(string)     -- string的字符个数<br>substring(str, position [,length])      -- 从str的position开始,取length个字符<br>replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str<br>instr(string ,substring)    -- 返回substring首次在string中出现的位置<br>concat(string [,...])   -- 连接字串<br>charset(str)            -- 返回字串字符集<br>lcase(string)           -- 转换成小写<br>left(string, length)    -- 从string2中的左边起取length个字符<br>load_file(file_name)    -- 从文件读取内容<br>locate(substring, string [,start_position]) -- 同instr,但可指定开始位置<br>lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length<br>ltrim(string)           -- 去除前端空格<br>repeat(string, count)   -- 重复count次<br>rpad(string, length, pad)   --在str后用pad补充,直到长度为length<br>rtrim(string)           -- 去除后端空格<br>strcmp(string1 ,string2)    -- 逐字符比较两字串大小<br><br>-- 流程函数<br>case when [condition] then result [when [condition] then result ...] [else result] end   多分支<br>if(expr1,expr2,expr3)  双分支。<br><br>-- 聚合函数<br>count()<br>sum();<br>max();<br>min();<br>avg();<br>group_concat()<br><br>-- 其他常用函数<br>md5();<br>default();<br><br>--// 存储函数，自定义函数 ----------<br>-- 新建<br>    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型<br>        函数体<br><br>    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。<br>    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。<br>    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。<br>    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。<br>    - 多条语句应该使用 begin...end 语句块包含。<br>    - 一定要有 return 返回值语句。<br><br>-- 删除<br>    DROP FUNCTION [IF EXISTS] function_name;<br><br>-- 查看<br>    SHOW FUNCTION STATUS LIKE &#x27;partten&#x27;<br>    SHOW CREATE FUNCTION function_name;<br><br>-- 修改<br>    ALTER FUNCTION function_name 函数选项<br><br><br>--// 存储过程，自定义功能 ----------<br>-- 定义<br>存储存储过程 是一段代码（过程），存储在数据库中的sql组成。<br>一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。<br>而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。<br><br>-- 创建<br>CREATE PROCEDURE sp_name (参数列表)<br>    过程体<br><br>参数列表：不同于函数的参数列表，需要指明参数类型<br>IN，表示输入型<br>OUT，表示输出型<br>INOUT，表示混合型<br><br>注意，没有返回值。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><blockquote>\n<p>存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。<br>调用：CALL 过程名</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 注意<br>- 没有返回值。<br>- 只能单独调用，不可夹杂在其他语句中<br><br>-- 参数<br>IN|OUT|INOUT 参数名 数据类型<br>IN      输入：在调用过程中，将数据输入到过程体内部的参数<br>OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端<br>INOUT   输入输出：既可输入，也可输出<br><br>-- 语法<br>CREATE PROCEDURE 过程名 (参数列表)<br>BEGIN<br>    过程体<br>END<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"用户和权限管理\"><a href=\"#用户和权限管理\" class=\"headerlink\" title=\"用户和权限管理\"></a>用户和权限管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- root密码重置<br>1. 停止MySQL服务<br>2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;<br>    [Windows] mysqld --skip-grant-tables<br>3. use mysql;<br>4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;<br>5. FLUSH PRIVILEGES;<br><br>用户信息表：mysql.user<br>-- 刷新权限<br>FLUSH PRIVILEGES;<br>-- 增加用户<br>CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)<br>    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。<br>    - 只能创建用户，不能赋予权限。<br>    - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;<br>    - 密码也需引号，纯数字密码也要加引号<br>    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD<br>-- 重命名用户<br>RENAME USER old_user TO new_user<br>-- 设置密码<br>SET PASSWORD = PASSWORD(&#x27;密码&#x27;)  -- 为当前用户设置密码<br>SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;) -- 为指定用户设置密码<br>-- 删除用户<br>DROP USER 用户名<br>-- 分配权限/添加用户<br>GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#x27;password&#x27;]<br>    - all privileges 表示所有权限<br>    - *.* 表示所有库的所有表<br>    - 库名.表名 表示某库下面的某表<br>    GRANT ALL PRIVILEGES ON `pms`.* TO &#x27;pms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;pms0817&#x27;;<br>-- 查看权限<br>SHOW GRANTS FOR 用户名<br>    -- 查看当前用户权限<br>    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();<br>-- 撤消权限<br>REVOKE 权限列表 ON 表名 FROM 用户名<br>REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限<br>-- 权限层级<br>-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。<br>全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user<br>    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。<br>数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host<br>    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。<br>表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv<br>    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。<br>列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv<br>    当使用REVOKE时，您必须指定与被授权列相同的列。<br>-- 权限列表<br>ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限<br>ALTER   -- 允许使用ALTER TABLE<br>ALTER ROUTINE   -- 更改或取消已存储的子程序<br>CREATE  -- 允许使用CREATE TABLE<br>CREATE ROUTINE  -- 创建已存储的子程序<br>CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE<br>CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。<br>CREATE VIEW     -- 允许使用CREATE VIEW<br>DELETE  -- 允许使用DELETE<br>DROP    -- 允许使用DROP TABLE<br>EXECUTE     -- 允许用户运行已存储的子程序<br>FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE<br>INDEX   -- 允许使用CREATE INDEX和DROP INDEX<br>INSERT  -- 允许使用INSERT<br>LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES<br>PROCESS     -- 允许使用SHOW FULL PROCESSLIST<br>REFERENCES  -- 未被实施<br>RELOAD  -- 允许使用FLUSH<br>REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址<br>REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）<br>SELECT  -- 允许使用SELECT<br>SHOW DATABASES  -- 显示所有数据库<br>SHOW VIEW   -- 允许使用SHOW CREATE VIEW<br>SHUTDOWN    -- 允许使用mysqladmin shutdown<br>SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。<br>UPDATE  -- 允许使用UPDATE<br>USAGE   -- “无权限”的同义词<br>GRANT OPTION    -- 允许授予权限<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表维护\"><a href=\"#表维护\" class=\"headerlink\" title=\"表维护\"></a>表维护</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 分析和存储表的关键字分布<br>ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...<br>-- 检查一个或多个表是否有错误<br>CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;<br>-- 整理数据文件的碎片<br>OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！<br>2. 每个库目录存在一个保存当前数据库的选项文件db.opt。<br>3. 注释：<br>    单行注释 # 注释内容<br>    多行注释 /* 注释内容 */<br>    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)<br>4. 模式通配符：<br>    _   任意单个字符<br>    %   任意多个字符，甚至包括零字符<br>    单引号需要进行转义 \\&#x27;<br>5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\\G&quot;, &quot;\\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。<br>6. SQL对大小写不敏感<br>7. 清除已有语句：\\c<br></code></pre></td></tr></table></figure>\n\n<p>原文连接：<a href=\"https://shockerli.net/post/1000-line-mysql-note/\">https://shockerli.net/post/1000-line-mysql-note/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL-学习笔记\"><a href=\"#MySQL-学习笔记\" class=\"headerlink\" title=\"MySQL 学习笔记\"></a>MySQL 学习笔记</h1><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 查看当前数据库<br>    SELECT DATABASE();<br>-- 显示当前时间、用户名、数据库版本<br>    SELECT now(), user(), version();<br>-- 创建库<br>    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项<br>    数据库选项：<br>        CHARACTER SET charset_name<br>        COLLATE collation_name<br>-- 查看已有库<br>    SHOW DATABASES[ LIKE &#x27;PATTERN&#x27;]<br>-- 查看当前库信息<br>    SHOW CREATE DATABASE 数据库名<br>-- 修改库的选项信息<br>    ALTER DATABASE 库名 选项信息<br>-- 删除库<br>    DROP DATABASE[ IF EXISTS] 数据库名<br>        同时删除该数据库相关的目录及其目录内容<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表的操作\"><a href=\"#表的操作\" class=\"headerlink\" title=\"表的操作\"></a>表的操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建表<br>    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]<br>        每个字段必须有数据类型<br>        最后一个字段后不能有逗号<br>        TEMPORARY 临时表，会话结束时表自动消失<br>        对于字段的定义：<br>            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &#x27;string&#x27;]<br>-- 表选项<br>    -- 字符集<br>        CHARSET = charset_name<br>        如果表没有设定，则使用数据库字符集<br>    -- 存储引擎<br>        ENGINE = engine_name<br>        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同<br>        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive<br>        不同的引擎在保存表的结构和数据时采用不同的方式<br>        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引<br>        InnoDB表文件含义：.frm表定义，表空间数据和日志文件<br>        SHOW ENGINES -- 显示存储引擎的状态信息<br>        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息<br>    -- 自增起始数<br>    \tAUTO_INCREMENT = 行数<br>    -- 数据文件目录<br>        DATA DIRECTORY = &#x27;目录&#x27;<br>    -- 索引文件目录<br>        INDEX DIRECTORY = &#x27;目录&#x27;<br>    -- 表注释<br>        COMMENT = &#x27;string&#x27;<br>    -- 分区选项<br>        PARTITION BY ... (详细见手册)<br>-- 查看所有表<br>    SHOW TABLES[ LIKE &#x27;pattern&#x27;]<br>    SHOW TABLES FROM 表名<br>-- 查看表机构<br>    SHOW CREATE TABLE 表名 （信息更详细）<br>    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &#x27;PATTERN&#x27;]<br>    SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;]<br>-- 修改表<br>    -- 修改表本身的选项<br>        ALTER TABLE 表名 表的选项<br>        eg: ALTER TABLE 表名 ENGINE=MYISAM;<br>    -- 对表进行重命名<br>        RENAME TABLE 原表名 TO 新表名<br>        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）<br>        -- RENAME可以交换两个表名<br>    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）<br>        ALTER TABLE 表名 操作名<br>        -- 操作名<br>            ADD[ COLUMN] 字段定义       -- 增加字段<br>                AFTER 字段名          -- 表示增加在该字段名后面<br>                FIRST               -- 表示增加在第一个<br>            ADD PRIMARY KEY(字段名)   -- 创建主键<br>            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引<br>            ADD INDEX [索引名] (字段名) -- 创建普通索引<br>            DROP[ COLUMN] 字段名      -- 删除字段<br>            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)<br>            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改<br>            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)<br>            DROP INDEX 索引名 -- 删除索引<br>            DROP FOREIGN KEY 外键    -- 删除外键<br><br>-- 删除表<br>    DROP TABLE[ IF EXISTS] 表名 ...<br>-- 清空表数据<br>    TRUNCATE [TABLE] 表名<br>-- 复制表结构<br>    CREATE TABLE 表名 LIKE 要复制的表名<br>-- 复制表结构和数据<br>    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名<br>-- 检查表是否有错误<br>    CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>-- 优化表<br>    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br>-- 修复表<br>    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]<br>-- 分析表<br>    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 增<br>    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]<br>        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。<br>        -- 可同时插入多条数据记录！<br>        REPLACE 与 INSERT 完全一样，可互换。<br>    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]<br>-- 查<br>    SELECT 字段列表 FROM 表名[ 其他子句]<br>        -- 可来自多个表的多个字段<br>        -- 其他子句可以不使用<br>        -- 字段列表可以用*代替，表示所有字段<br>-- 删<br>    DELETE FROM 表名[ 删除条件子句]<br>        没有条件子句，则会删除全部<br>-- 改<br>    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符集编码\"><a href=\"#字符集编码\" class=\"headerlink\" title=\"字符集编码\"></a>字符集编码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- MySQL、数据库、表、字段均可设置编码<br>-- 数据编码与客户端编码不需一致<br>SHOW VARIABLES LIKE &#x27;character_set_%&#x27;   -- 查看所有字符集编码项<br>    character_set_client        客户端向服务器发送数据时使用的编码<br>    character_set_results       服务器端将结果返回给客户端所使用的编码<br>    character_set_connection    连接层编码<br>SET 变量名 = 变量值<br>    SET character_set_client = gbk;<br>    SET character_set_results = gbk;<br>    SET character_set_connection = gbk;<br>SET NAMES GBK;  -- 相当于完成以上三个设置<br>-- 校对集<br>    校对集用以排序<br>    SHOW CHARACTER SET [LIKE &#x27;pattern&#x27;]/SHOW CHARSET [LIKE &#x27;pattern&#x27;]   查看所有字符集<br>    SHOW COLLATION [LIKE &#x27;pattern&#x27;]     查看所有校对集<br>    CHARSET 字符集编码     设置字符集编码<br>    COLLATE 校对集编码     设置校对集编码<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数据类型（列类型）\"><a href=\"#数据类型（列类型）\" class=\"headerlink\" title=\"数据类型（列类型）\"></a>数据类型（列类型）</h3><p><strong>1. 数值类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. 整型 ----------<br>    类型         字节     范围（有符号位）<br>    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255<br>    smallint    2字节    -32768 ~ 32767<br>    mediumint   3字节    -8388608 ~ 8388607<br>    int         4字节<br>    bigint      8字节<br><br>    int(M)  M表示总位数<br>    - 默认存在符号位，unsigned 属性修改<br>    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改<br>        例：int(5)   插入一个数&#x27;123&#x27;，补填后为&#x27;00123&#x27;<br>    - 在满足要求的情况下，越小越好。<br>    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。<br><br>-- b. 浮点型 ----------<br>    类型             字节     范围<br>    float(单精度)     4字节<br>    double(双精度)    8字节<br>    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。<br>        不同于整型，前后均会补填0.<br>    定义浮点型时，需指定总位数和小数位数。<br>        float(M, D)     double(M, D)<br>        M表示总位数，D表示小数位数。<br>        M和D的大小会决定浮点数的范围。不同于整型的固定范围。<br>        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。<br>        支持科学计数法表示。<br>        浮点数表示近似值。<br><br>-- c. 定点数 ----------<br>    decimal -- 可变长度<br>    decimal(M, D)   M也表示总位数，D表示小数位数。<br>    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。<br>    将浮点数转换为字符串来保存，每9位数字保存为4个字节。<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. 字符串类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. char, varchar ----------<br>    char    定长字符串，速度快，但浪费空间<br>    varchar 变长字符串，速度慢，但节省空间<br>    M表示能存储的最大长度，此长度是字符数，非字节数。<br>    不同的编码，所占用的空间不同。<br>    char,最多255个字符，与编码无关。<br>    varchar,最多65535字符，与编码有关。<br>    一条有效记录最大不能超过65535个字节。<br>        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符<br>    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。<br>    varchar 的最大有效长度由最大行大小和使用的字符集确定。<br>    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。<br>    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3<br><br>-- b. blob, text ----------<br>    blob 二进制字符串（字节字符串）<br>        tinyblob, blob, mediumblob, longblob<br>    text 非二进制字符串（字符字符串）<br>        tinytext, text, mediumtext, longtext<br>    text 在定义时，不需要定义长度，也不会计算总长度。<br>    text 类型在定义时，不可给default值<br><br>-- c. binary, varbinary ----------<br>    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。<br>    char, varchar, text 对应 binary, varbinary, blob.<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. 日期时间类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。<br>datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59<br>date        3字节    日期         1000-01-01 到 9999-12-31<br>timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07<br>time        3字节    时间         -838:59:59 到 838:59:59<br>year        1字节    年份         1901 - 2155<br><br>datetime    YYYY-MM-DD hh:mm:ss<br>timestamp   YY-MM-DD hh:mm:ss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>date        YYYY-MM-DD<br>            YY-MM-DD<br>            YYYYMMDD<br>            YYMMDD<br>            YYYYMMDD<br>            YYMMDD<br>time        hh:mm:ss<br>            hhmmss<br>            hhmmss<br>year        YYYY<br>            YY<br>            YYYY<br>            YY<br></code></pre></td></tr></table></figure>\n\n<p><strong>4. 枚举和集合</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 枚举(enum) ----------<br>enum(val1, val2, val3...)<br>    在已知的值中进行单选。最大数量为65535.<br>    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。<br>    表现为字符串类型，存储却是整型。<br>    NULL值的索引是NULL。<br>    空字符串错误值的索引值是0。<br><br>-- 集合（set） ----------<br>set(val1, val2, val3...)<br>    create table tab ( gender set(&#x27;男&#x27;, &#x27;女&#x27;, &#x27;无&#x27;) );<br>    insert into tab values (&#x27;男, 女&#x27;);<br>    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。<br>    当创建表时，SET成员值的尾部空格将自动被删除。<br><br>/* 选择类型 */<br>-- PHP角度<br>1. 功能满足<br>2. 存储空间尽量小，处理效率更高<br>3. 考虑兼容问题<br></code></pre></td></tr></table></figure>\n\n<p><strong>IP存储</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 只需存储，可用字符串<br>2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned<br>    1) PHP函数转换<br>        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。<br>        利用sprintf函数格式化字符串<br>        sprintf(&quot;%u&quot;, ip2long(&#x27;192.168.3.134&#x27;));<br>        然后用long2ip将整型转回IP字符串<br>    2) MySQL函数转换(无符号整型，UNSIGNED)<br>        INET_ATON(&#x27;127.0.0.1&#x27;) 将IP转为整型<br>        INET_NTOA(2130706433) 将整型转为IP<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列属性（列约束）\"><a href=\"#列属性（列约束）\" class=\"headerlink\" title=\"列属性（列约束）\"></a>列属性（列约束）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. PRIMARY 主键<br>    - 能唯一标识记录的字段，可以作为主键。<br>    - 一个表只能有一个主键。<br>    - 主键具有唯一性。<br>    - 声明字段时，用 primary key 标识。<br>        也可以在字段列表之后声明<br>            例：create table tab ( id int, stu varchar(10), primary key (id));<br>    - 主键字段的值不能为null。<br>    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。<br>        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));<br><br>2. UNIQUE 唯一索引（唯一约束）<br>    使得某字段的值也不能重复。<br><br>3. NULL 约束<br>    null不是数据类型，是列的一个属性。<br>    表示当前列是否可以为null，表示什么都没有。<br>    null, 允许为空。默认。<br>    not null, 不允许为空。<br>    insert into tab values (null, &#x27;val&#x27;);<br>        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null<br><br>4. DEFAULT 默认值属性<br>    当前字段的默认值。<br>    insert into tab values (default, &#x27;val&#x27;);    -- 此时表示强制使用默认值。<br>    create table tab ( add_time timestamp default current_timestamp );<br>        -- 表示将当前时间的时间戳设为默认值。<br>        current_date, current_time<br><br>5. AUTO_INCREMENT 自动增长约束<br>    自动增长必须为索引（主键或unique）<br>    只能存在一个字段为自动增长。<br>    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;<br><br>6. COMMENT 注释<br>    例：create table tab ( id int ) comment &#x27;注释内容&#x27;;<br><br>7. FOREIGN KEY 外键约束<br>    用于限制主表与从表数据完整性。<br>    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);<br>        -- 将表t1的t1_id外键关联到表t2的id字段。<br>        -- 每个外键都有一个名字，可以通过 constraint 指定<br><br>    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。<br><br>    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。<br><br>    MySQL中，可以对InnoDB引擎使用外键约束：<br>    语法：<br>    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]<br>    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。<br><br>    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。<br>    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：<br>    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。<br>    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。<br>    3. restrict，拒绝父表删除和更新。<br><br>    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建表规范\"><a href=\"#建表规范\" class=\"headerlink\" title=\"建表规范\"></a>建表规范</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- Normal Format, NF<br>    - 每个表保存一个实体信息<br>    - 每个具有一个ID字段作为主键<br>    - ID主键 + 原子表<br>-- 1NF, 第一范式<br>    字段不能再分，就满足第一范式。<br>-- 2NF, 第二范式<br>    满足第一范式的前提下，不能出现部分依赖。<br>    消除符合主键就可以避免部分依赖。增加单列关键字。<br>-- 3NF, 第三范式<br>    满足第二范式的前提下，不能出现传递依赖。<br>    某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。<br>    将一个实体信息的数据放在一个表内实现。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT<br><br>a. select_expr<br>    -- 可以用 * 表示所有字段。<br>        select * from tb;<br>    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）<br>        select stu, 29+25, now() from tb;<br>    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。<br>        - 使用 as 关键字，也可省略 as.<br>        select stu+10 as add10 from tb;<br><br>b. FROM 子句<br>    用于标识查询来源。<br>    -- 可以为表起别名。使用as关键字。<br>        SELECT * FROM tb1 AS tt, tb2 AS bb;<br>    -- from子句后，可以同时出现多个表。<br>        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。<br>        SELECT * FROM tb1, tb2;<br>    -- 向优化符提示如何选择索引<br>        USE INDEX、IGNORE INDEX、FORCE INDEX<br>        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;<br>        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;<br><br>c. WHERE 子句<br>    -- 从from获得的数据源中进行筛选。<br>    -- 整型1表示真，0表示假。<br>    -- 表达式由运算符和运算数组成。<br>        -- 运算数：变量（字段）、值、函数返回值<br>        -- 运算符：<br>            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,<br>            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor<br>            is/is not 加上ture/false/unknown，检验某个值的真假<br>            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较<br><br>d. GROUP BY 子句, 分组子句<br>    GROUP BY 字段/别名 [排序方式]<br>    分组后会进行排序。升序：ASC，降序：DESC<br><br>    以下[合计函数]需配合 GROUP BY 使用：<br>    count 返回不同的非NULL值数目  count(*)、count(字段)<br>    sum 求和<br>    max 求最大值<br>    min 求最小值<br>    avg 求平均值<br>    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。<br><br>e. HAVING 子句，条件子句<br>    与 where 功能、用法相同，执行时机不同。<br>    where 在开始时执行检测数据，对原数据进行过滤。<br>    having 对筛选出的结果再次进行过滤。<br>    having 字段必须是查询出来的，where 字段必须是数据表存在的。<br>    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。<br>    where 不可以使用合计函数。一般需用合计函数才会用 having<br>    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。<br><br>f. ORDER BY 子句，排序子句<br>    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...<br>    升序：ASC，降序：DESC<br>    支持多个字段的排序。<br><br>g. LIMIT 子句，限制结果数量子句<br>    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。<br>    limit 起始位置, 获取条数<br>    省略第一个参数，表示从索引0开始。limit 获取条数<br><br>h. DISTINCT, ALL 选项<br>    distinct 去除重复记录<br>    默认为 all, 全部记录<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h3><blockquote>\n<p>将多个select查询的结果组合成一个结果集合。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT ... UNION [ALL|DISTINCT] SELECT ...<br>默认 DISTINCT 方式，即所有返回的行都是唯一的<br>建议，对每个SELECT查询加上小括号包裹。<br>ORDER BY 排序时，需加上 LIMIT 进行结合。<br>需要各select查询的字段数量一样。<br>每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><blockquote>\n<p>子查询需用括号包裹。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- from型<br>    from后要求是一个表，必须给子查询结果取个别名。<br>    - 简化每个查询内的条件。<br>    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。<br>    - 子查询返回一个表，表型子查询。<br>    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;<br>-- where型<br>    - 子查询返回一个值，标量子查询。<br>    - 不需要给子查询取别名。<br>    - where子查询内的表，不能直接用以更新。<br>    select * from tb where money = (select max(money) from tb);<br>    -- 列子查询<br>        如果子查询结果返回的是一列。<br>        使用 in 或 not in 完成查询<br>        exists 和 not exists 条件<br>            如果子查询返回数据，则返回1或0。常用于判断条件。<br>            select column1 from t1 where exists (select * from t2);<br>    -- 行子查询<br>        查询条件是一个行。<br>        select * from t1 where (id, gender) in (select id, gender from t2);<br>        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)<br>        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。<br><br>    -- 特殊运算符<br>    != all()    相当于 not in<br>    = some()    相当于 in。any 是 some 的别名<br>    != some()   不等同于 not in，不等于其中某一个。<br>    all, some 可以配合其他运算符一起使用。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"连接查询-join-96-96-96-mysql\"><a href=\"#连接查询-join-96-96-96-mysql\" class=\"headerlink\" title=\"连接查询(join)&#96;&#96;&#96;mysql\"></a>连接查询(join)&#96;&#96;&#96;mysql</h3><blockquote>\n<p>将多个表的字段进行连接，可以指定连接条件。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 内连接(inner join)<br>    - 默认就是内连接，可省略inner。<br>    - 只有数据存在时才能发送连接。即连接结果不能出现空行。<br>    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）<br>    也可用where表示连接条件。<br>    还有 using, 但需字段名相同。 using(字段名)<br><br>-- 交叉连接 cross join<br>   即，没有条件的内连接。<br>   select * from tb1 cross join tb2;<br>-- 外连接(outer join)<br>    - 如果数据不存在，也会出现在连接结果中。<br>    -- 左外连接 left join<br>        如果数据不存在，左表记录会出现，而右表为null填充<br>    -- 右外连接 right join<br>        如果数据不存在，右表记录会出现，而左表为null填充<br>-- 自然连接(natural join)<br>    自动判断连接条件完成连接。<br>    相当于省略了using，会自动查找相同字段名。<br>    natural join<br>    natural left join<br>    natural right join<br><br>select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据<br>load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据<br>    生成的数据默认的分隔符是制表符<br>    local未指定，则数据文件必须在服务器上<br>    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理<br>-- 控制格式<br>fields  控制字段格式<br>默认：fields terminated by &#x27;\\t&#x27; enclosed by &#x27;&#x27; escaped by &#x27;\\\\&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br>    enclosed by &#x27;char&#x27;      -- 包裹<br>    escaped by &#x27;char&#x27;       -- 转义<br>    -- 示例：<br>        SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27;<br>        FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;<br>        LINES TERMINATED BY &#x27;\\n&#x27;<br>        FROM test_table;<br>lines   控制行格式<br>默认：lines terminated by &#x27;\\n&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select语句获得的数据可以用insert插入。<br><br>可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。<br>    或者使用set语法。<br>    INSERT INTO tbl_name SET field=value,...；<br><br>可以一次性使用多个值，采用(), (), ();的形式。<br>    INSERT INTO tbl_name VALUES (), (), ();<br><br>可以在列值指定时，使用表达式。<br>    INSERT INTO tbl_name VALUES (field_value, 10+10, now());<br>可以使用一个特殊值 DEFAULT，表示该列使用默认值。<br>    INSERT INTO tbl_name VALUES (field_value, DEFAULT);<br><br>可以通过一个查询的结果，作为需要插入的值。<br>    INSERT INTO tbl_name SELECT ...;<br><br>可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。<br>    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]<br><br>按照条件删除。where<br><br>指定删除的最多记录数。limit<br><br>可以通过排序条件删除。order by + limit<br><br>支持多表删除，使用类似连接语法。<br>delete from 需要删除数据多表1，表2 using 表连接操作 条件。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"TRUNCATE\"><a href=\"#TRUNCATE\" class=\"headerlink\" title=\"TRUNCATE\"></a>TRUNCATE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">TRUNCATE [TABLE] tbl_name<br>清空数据<br>删除重建表<br><br>区别：<br>1，truncate 是删除表再创建，delete 是逐条删除<br>2，truncate 重置auto_increment的值。而delete不会<br>3，truncate 不知道删除了几条，而delete知道。<br>4，当被用于带分区的表时，truncate 会保留分区<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份与还原\"><a href=\"#备份与还原\" class=\"headerlink\" title=\"备份与还原\"></a>备份与还原</h3><blockquote>\n<p>备份，将数据的结构与表内数据保存起来。<br>利用 mysqldump 指令完成。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 导出<br>mysqldump [options] db_name [tables]<br>mysqldump [options] ---database DB1 [DB2 DB3...]<br>mysqldump [options] --all--database<br><br><br>1. 导出一张表<br>　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)<br>2. 导出多张表<br>　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)<br>3. 导出所有表<br>　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)<br>4. 导出一个库<br>　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)<br><br>可以-w携带WHERE条件<br><br>-- 导入<br>1. 在登录mysql的情况下：<br>　　source  备份文件<br>2. 在不登录的情况下<br>　　mysql -u用户名 -p密码 库名 &lt; 备份文件<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><blockquote>\n<p>什么是视图：<br>    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>    视图具有表结构文件，但不存在数据文件。<br>    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建视图<br>CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement<br>    - 视图名必须唯一，同时不能与表重名。<br>    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。<br>    - 可以指定视图执行的算法，通过ALGORITHM指定。<br>    - column_list如果存在，则数目必须等于SELECT语句检索的列数<br><br>-- 查看结构<br>    SHOW CREATE VIEW view_name<br><br>-- 删除视图<br>    - 删除视图后，数据依然存在。<br>    - 可同时删除多个视图。<br>    DROP VIEW [IF EXISTS] view_name ...<br><br>-- 修改视图结构<br>    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。<br>    ALTER VIEW view_name [(column_list)] AS select_statement<br><br>-- 视图作用<br>    1. 简化业务逻辑<br>    2. 对客户端隐藏真实的表结构<br><br>-- 视图算法(ALGORITHM)<br>    MERGE       合并<br>        将视图的查询语句，与外部查询需要先合并再执行！<br>    TEMPTABLE   临时表<br>        将视图执行完毕后，形成临时表，再做外层查询！<br>    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"事务-transaction\"><a href=\"#事务-transaction\" class=\"headerlink\" title=\"事务(transaction)\"></a>事务(transaction)</h3><blockquote>\n<p>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">- 支持连续SQL的集体成功或集体撤销。<br>- 事务是数据库在数据晚自习方面的一个功能。<br>- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。<br>- InnoDB被称为事务安全型引擎。<br><br>-- 事务开启<br>    START TRANSACTION; 或者 BEGIN;<br>    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。<br>-- 事务提交<br>    COMMIT;<br>-- 事务回滚<br>    ROLLBACK;<br>    如果部分操作发生问题，映射到事务开启前。<br><br>-- 事务的特性<br>    1. 原子性（Atomicity）<br>        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。<br>    2. 一致性（Consistency）<br>        事务前后数据的完整性必须保持一致。<br>        - 事务开始和结束时，外部数据一致<br>        - 在整个事务过程中，操作是连续的<br>    3. 隔离性（Isolation）<br>        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。<br>    4. 持久性（Durability）<br>        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。<br><br>-- 事务的实现<br>    1. 要求是事务支持的表类型<br>    2. 执行一组相关的操作前开启事务<br>    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。<br><br>-- 事务的原理<br>    利用InnoDB的自动提交(autocommit)特性完成。<br>    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。<br>    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。<br><br>-- 注意<br>    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。<br>    2. 事务不能被嵌套<br><br>-- 保存点<br>    SAVEPOINT 保存点名称 -- 设置一个事务保存点<br>    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点<br>    RELEASE SAVEPOINT 保存点名称 -- 删除保存点<br><br>-- InnoDB自动提交特性设置<br>    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。<br>    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。<br>    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，<br>        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)<br>        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h3><blockquote>\n<p>表锁定只用于防止其它客户端进行不正当地读取和写入<br>MyISAM 支持表锁，InnoDB 支持行锁</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 锁定<br>    LOCK TABLES tbl_name [AS alias]<br>-- 解锁<br>    UNLOCK TABLES<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><blockquote>\n<p>触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象<br>监听：记录的增加、修改、删除。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建触发器<br>CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt<br>    参数：<br>    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。<br>    trigger_event指明了激活触发程序的语句的类型<br>        INSERT：将新行插入表时激活触发程序<br>        UPDATE：更改某一行时激活触发程序<br>        DELETE：从表中删除某一行时激活触发程序<br>    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。<br>    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构<br><br>-- 删除<br>DROP TRIGGER [schema_name.]trigger_name<br><br>可以使用old和new代替旧的和新的数据<br>    更新操作，更新前是old，更新后是new.<br>    删除操作，只有old.<br>    增加操作，只有new.<br><br>-- 注意<br>    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。<br><br><br>-- 字符连接函数<br>concat(str1,str2,...])<br>concat_ws(separator,str1,str2,...)<br><br>-- 分支语句<br>if 条件 then<br>    执行语句<br>elseif 条件 then<br>    执行语句<br>else<br>    执行语句<br>end if;<br><br>-- 修改最外层语句结束符<br>delimiter 自定义结束符号<br>    SQL语句<br>自定义结束符号<br><br>delimiter ;     -- 修改回原来的分号<br><br>-- 语句块包裹<br>begin<br>    语句块<br>end<br><br>-- 特殊的执行<br>1. 只要添加记录，就会触发程序。<br>2. Insert into on duplicate key update 语法会触发：<br>    如果没有重复记录，会触发 before insert, after insert;<br>    如果有重复记录并更新，会触发 before insert, before update, after update;<br>    如果有重复记录但是没有发生更新，则触发 before insert, before update<br>3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SQL编程\"><a href=\"#SQL编程\" class=\"headerlink\" title=\"SQL编程\"></a>SQL编程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">--// 局部变量 ----------<br>-- 变量声明<br>    declare var_name[,...] type [default value]<br>    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。<br><br>-- 赋值<br>    使用 set 和 select into 语句为变量赋值。<br><br>    - 注意：在函数内是可以使用全局变量（用户自定义的变量）<br><br><br>--// 全局变量 ----------<br>-- 定义、赋值<br>set 语句可以定义并为变量赋值。<br>set @var = value;<br>也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。<br>还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。<br>select @var:=20;<br>select @v1:=id, @v2=name from t1 limit 1;<br>select * from tbl_name where @var:=30;<br><br>select into 可以将表中查询获得的数据赋给变量。<br>    -| select max(height) into @max_height from tb;<br><br>-- 自定义变量名<br>为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。<br>@var=10;<br><br>    - 变量被定义后，在整个会话周期都有效（登录到退出）<br><br><br>--// 控制结构 ----------<br>-- if语句<br>if search_condition then<br>    statement_list   <br>[elseif search_condition then<br>    statement_list]<br>...<br>[else<br>    statement_list]<br>end if;<br><br>-- case语句<br>CASE value WHEN [compare-value] THEN result<br>[WHEN [compare-value] THEN result ...]<br>[ELSE result]<br>END<br><br><br>-- while循环<br>[begin_label:] while search_condition do<br>    statement_list<br>end while [end_label];<br><br>- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。<br><br>    -- 退出循环<br>        退出整个循环 leave<br>        退出当前循环 iterate<br>        通过退出的标签决定退出哪个循环<br><br><br>--// 内置函数 ----------<br>-- 数值函数<br>abs(x)          -- 绝对值 abs(-10.9) = 10<br>format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46<br>ceil(x)         -- 向上取整 ceil(10.1) = 11<br>floor(x)        -- 向下取整 floor (10.1) = 10<br>round(x)        -- 四舍五入去整<br>mod(m, n)       -- m%n m mod n 求余 10%3=1<br>pi()            -- 获得圆周率<br>pow(m, n)       -- m^n<br>sqrt(x)         -- 算术平方根<br>rand()          -- 随机数<br>truncate(x, d)  -- 截取d位小数<br><br>-- 时间日期函数<br>now(), current_timestamp();     -- 当前日期时间<br>current_date();                 -- 当前日期<br>current_time();                 -- 当前时间<br>date(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取日期部分<br>time(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取时间部分<br>date_format(&#x27;yyyy-mm-dd hh:ii:ss&#x27;, &#x27;%d %y %a %d %m %b %j&#x27;); -- 格式化时间<br>unix_timestamp();               -- 获得unix时间戳<br>from_unixtime();                -- 从时间戳获得时间<br><br>-- 字符串函数<br>length(string)          -- string长度，字节<br>char_length(string)     -- string的字符个数<br>substring(str, position [,length])      -- 从str的position开始,取length个字符<br>replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str<br>instr(string ,substring)    -- 返回substring首次在string中出现的位置<br>concat(string [,...])   -- 连接字串<br>charset(str)            -- 返回字串字符集<br>lcase(string)           -- 转换成小写<br>left(string, length)    -- 从string2中的左边起取length个字符<br>load_file(file_name)    -- 从文件读取内容<br>locate(substring, string [,start_position]) -- 同instr,但可指定开始位置<br>lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length<br>ltrim(string)           -- 去除前端空格<br>repeat(string, count)   -- 重复count次<br>rpad(string, length, pad)   --在str后用pad补充,直到长度为length<br>rtrim(string)           -- 去除后端空格<br>strcmp(string1 ,string2)    -- 逐字符比较两字串大小<br><br>-- 流程函数<br>case when [condition] then result [when [condition] then result ...] [else result] end   多分支<br>if(expr1,expr2,expr3)  双分支。<br><br>-- 聚合函数<br>count()<br>sum();<br>max();<br>min();<br>avg();<br>group_concat()<br><br>-- 其他常用函数<br>md5();<br>default();<br><br>--// 存储函数，自定义函数 ----------<br>-- 新建<br>    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型<br>        函数体<br><br>    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。<br>    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。<br>    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。<br>    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。<br>    - 多条语句应该使用 begin...end 语句块包含。<br>    - 一定要有 return 返回值语句。<br><br>-- 删除<br>    DROP FUNCTION [IF EXISTS] function_name;<br><br>-- 查看<br>    SHOW FUNCTION STATUS LIKE &#x27;partten&#x27;<br>    SHOW CREATE FUNCTION function_name;<br><br>-- 修改<br>    ALTER FUNCTION function_name 函数选项<br><br><br>--// 存储过程，自定义功能 ----------<br>-- 定义<br>存储存储过程 是一段代码（过程），存储在数据库中的sql组成。<br>一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。<br>而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。<br><br>-- 创建<br>CREATE PROCEDURE sp_name (参数列表)<br>    过程体<br><br>参数列表：不同于函数的参数列表，需要指明参数类型<br>IN，表示输入型<br>OUT，表示输出型<br>INOUT，表示混合型<br><br>注意，没有返回值。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><blockquote>\n<p>存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。<br>调用：CALL 过程名</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 注意<br>- 没有返回值。<br>- 只能单独调用，不可夹杂在其他语句中<br><br>-- 参数<br>IN|OUT|INOUT 参数名 数据类型<br>IN      输入：在调用过程中，将数据输入到过程体内部的参数<br>OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端<br>INOUT   输入输出：既可输入，也可输出<br><br>-- 语法<br>CREATE PROCEDURE 过程名 (参数列表)<br>BEGIN<br>    过程体<br>END<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"用户和权限管理\"><a href=\"#用户和权限管理\" class=\"headerlink\" title=\"用户和权限管理\"></a>用户和权限管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- root密码重置<br>1. 停止MySQL服务<br>2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;<br>    [Windows] mysqld --skip-grant-tables<br>3. use mysql;<br>4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;<br>5. FLUSH PRIVILEGES;<br><br>用户信息表：mysql.user<br>-- 刷新权限<br>FLUSH PRIVILEGES;<br>-- 增加用户<br>CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)<br>    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。<br>    - 只能创建用户，不能赋予权限。<br>    - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;<br>    - 密码也需引号，纯数字密码也要加引号<br>    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD<br>-- 重命名用户<br>RENAME USER old_user TO new_user<br>-- 设置密码<br>SET PASSWORD = PASSWORD(&#x27;密码&#x27;)  -- 为当前用户设置密码<br>SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;) -- 为指定用户设置密码<br>-- 删除用户<br>DROP USER 用户名<br>-- 分配权限/添加用户<br>GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#x27;password&#x27;]<br>    - all privileges 表示所有权限<br>    - *.* 表示所有库的所有表<br>    - 库名.表名 表示某库下面的某表<br>    GRANT ALL PRIVILEGES ON `pms`.* TO &#x27;pms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;pms0817&#x27;;<br>-- 查看权限<br>SHOW GRANTS FOR 用户名<br>    -- 查看当前用户权限<br>    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();<br>-- 撤消权限<br>REVOKE 权限列表 ON 表名 FROM 用户名<br>REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限<br>-- 权限层级<br>-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。<br>全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user<br>    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。<br>数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host<br>    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。<br>表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv<br>    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。<br>列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv<br>    当使用REVOKE时，您必须指定与被授权列相同的列。<br>-- 权限列表<br>ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限<br>ALTER   -- 允许使用ALTER TABLE<br>ALTER ROUTINE   -- 更改或取消已存储的子程序<br>CREATE  -- 允许使用CREATE TABLE<br>CREATE ROUTINE  -- 创建已存储的子程序<br>CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE<br>CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。<br>CREATE VIEW     -- 允许使用CREATE VIEW<br>DELETE  -- 允许使用DELETE<br>DROP    -- 允许使用DROP TABLE<br>EXECUTE     -- 允许用户运行已存储的子程序<br>FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE<br>INDEX   -- 允许使用CREATE INDEX和DROP INDEX<br>INSERT  -- 允许使用INSERT<br>LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES<br>PROCESS     -- 允许使用SHOW FULL PROCESSLIST<br>REFERENCES  -- 未被实施<br>RELOAD  -- 允许使用FLUSH<br>REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址<br>REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）<br>SELECT  -- 允许使用SELECT<br>SHOW DATABASES  -- 显示所有数据库<br>SHOW VIEW   -- 允许使用SHOW CREATE VIEW<br>SHUTDOWN    -- 允许使用mysqladmin shutdown<br>SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。<br>UPDATE  -- 允许使用UPDATE<br>USAGE   -- “无权限”的同义词<br>GRANT OPTION    -- 允许授予权限<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表维护\"><a href=\"#表维护\" class=\"headerlink\" title=\"表维护\"></a>表维护</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 分析和存储表的关键字分布<br>ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...<br>-- 检查一个或多个表是否有错误<br>CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;<br>-- 整理数据文件的碎片<br>OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！<br>2. 每个库目录存在一个保存当前数据库的选项文件db.opt。<br>3. 注释：<br>    单行注释 # 注释内容<br>    多行注释 /* 注释内容 */<br>    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)<br>4. 模式通配符：<br>    _   任意单个字符<br>    %   任意多个字符，甚至包括零字符<br>    单引号需要进行转义 \\&#x27;<br>5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\\G&quot;, &quot;\\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。<br>6. SQL对大小写不敏感<br>7. 清除已有语句：\\c<br></code></pre></td></tr></table></figure>\n\n<p>原文连接：<a href=\"https://shockerli.net/post/1000-line-mysql-note/\">https://shockerli.net/post/1000-line-mysql-note/</a></p>\n"},{"title":"MySQL数据库设计规范","_content":"# MySQL数据库设计规范\n\n转载原文：[https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95](https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#目录)\n\n## 目录\n\n```\n1. 规范背景与目的\t\n\n2. 设计规范\n\n2.1 数据库设计\t\n\n2.1.1 库名\t\n2.1.2 表结构\t\n2.1.3 列数据类型优化\t\n2.1.4 索引设计\t\n2.1.5 分库分表、分区表\t\n2.1.6 字符集\t\n2.1.7 程序DAO层设计建议\t\n2.1.8 一个规范的建表语句示例\t\n\n2.2 SQL编写\t\n\n2.2.1 DML语句\t\n2.2.2 多表连接\t\n2.2.3 事务\t\n2.2.4 排序和分组\t\n2.2.5 线上禁止使用的SQL语句\n```\n\n## 1. 规范背景与目的\n\nMySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。\n\n## 2. 设计规范\n\n### 2.1 数据库设计\n\n以下所有规范会按照**【高危】**、**【强制】**、**【建议】**三个级别进行标注，遵守优先级从高到低。\n\n对于不满足**【高危】**和**【强制】**两个级别的设计，DBA会强制打回要求修改。\n\n### 2.1.1 库名\n\n1. **【强制】**库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。\n2. **【强制】**库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。\n3. **【强制】**一般分库名称命名格式是`库通配名_编号`，编号从0开始递增，比如`wenda_001`以时间进行分库的名称格式是“库通配名_时间”\n4. **【强制】**创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：`create database db1 default character set utf8;`。\n\n### 2.1.2 表结构\n\n1. **【强制】**表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。\n2. **【强制】**表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。\n3. **【强制】**创建表时必须显式指定字符集为utf8或utf8mb4。\n4. **【强制】**创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。\n5. **【强制】**建表必须有comment\n6. **【建议】**建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为`auto_increment(2)`标识表里每一行主体的字段不要设为主键，建议设为其他字段如`user_id`，`order_id`等，并建立unique key索引（可参考`cdb.teacher`表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。\n7. **【建议】**核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段`create_time`和最后更新时间字段`update_time`，便于查问题。\n8. **【建议】**表中所有字段必须都是`NOT NULL`属性，业务可以根据需要定义`DEFAULT`值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。\n9. **【建议】**建议对表里的`blob`、`text`等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。\n10. **【建议】**反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如`user_name`属性在`user_account`，`user_login_log`等表里冗余一份，减少join查询。\n11. **【强制】**中间表用于保留中间结果集，名称必须以`tmp_`开头。备份表用于备份或抓取源表快照，名称必须以`bak_`开头。中间表和备份表定期清理。\n12. **【强制】**对于超过100W行的大表进行`alter table`，必须经过DBA审核，并在业务低峰期执行。因为`alter table`会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。\n\n### 2.1.3 列数据类型优化\n\n1. **【建议】**表中的自增列（`auto_increment`属性），推荐使用`bigint`类型。因为无符号`int`存储范围为`-2147483648~2147483647`（大约21亿左右），溢出后会导致报错。\n2. **【建议】**业务中选择性很少的状态`status`、类型`type`等字段推荐使用`tinytint`或者`smallint`类型节省存储空间。\n3. **【建议】**业务中IP地址字段推荐使用`int`类型，不推荐用`char(15)`。因为`int`只占4字节，可以用如下函数相互转换，而`char(15)`占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：`select inet_aton('192.168.2.12'); select inet_ntoa(3232236044);` PHP: `ip2long(‘192.168.2.12’); long2ip(3530427185);`\n4. **【建议】**不推荐使用`enum`，`set`。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用`tinyint`或`smallint`。\n5. **【建议】**不推荐使用`blob`，`text`等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在`overflow-page`里。不幸的是在`compact`行格式下，原始`page`和`overflow-page`都会加载。\n6. **【建议】**存储金钱的字段，建议用`int`，程序端乘以100和除以100进行存取。因为`int`占用4字节，而`double`占用8字节，空间浪费。\n7. **【建议】**文本数据尽量用`varchar`存储。因为`varchar`是变长存储，比`char`更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为`mediumtext`字段。而`text`在utf8字符集下最多存21844个字符，`mediumtext`最多存2^24/3个字符，`longtext`最多存2^32个字符。一般建议用`varchar`类型，字符数不要超过2700。\n8. **【建议】**时间类型尽量选取`timestamp`。因为`datetime`占用8字节，`timestamp`仅占用4字节，但是范围为`1970-01-01 00:00:01`到`2038-01-01 00:00:00`。更为高阶的方法，选用`int`来存储时间，使用SQL函数`unix_timestamp()`和`from_unixtime()`来进行转换。\n\n详细存储大小参考原文：https://blog.csdn.net/HXNLYW/article/details/100104768\n\n\n\n#### 整数型数据类型\n\n|   类型名称   |               说明                | 存储大小 |               取值范围               |\n| :----------: | :-------------------------------: | :------: | :----------------------------------: |\n|   TINYINT    | 很小的正数（一般用于boolean存储） | 1个字节  |    -128~127<br />unsigned：0~255     |\n|   SMALLINT   |              小正数               | 2个字节  | -32768~32767<br />unsigned：0~65535  |\n|  MEDIUMINT   |          中等大小的正数           | 3个字节  | -2^23 ~2^23-1<br/>unsigned: 2^24 -1  |\n| INT(INTEGER) |          普通大小的正数           | 4个字节  | -2^31 ~2^31-1<br />unsigned: 2^32 -1 |\n|    BIGINT    |       大正数(一般用于主键)        | 8个字节  | -2^63 ~2^63-1<br/>unsigned: 2^64 -1  |\n\n#### 小数型数据类型\n\n|   类型名称   |                     说明                     | 存储大小  |          取值范围           |\n| :----------: | :------------------------------------------: | :-------: | :-------------------------: |\n|  FLOAT(M,N)  | M表示总共位数，N表示小数位数（单精度浮点数） |  4个字节  |     ±1.175494351E – 38      |\n| DOUBLE(M,N)  |                 双精度浮点数                 |  8个字节  | ±2.2250738585072014E – 308  |\n| DECIMAL(M,D) |              压缩的“严格”定点数              | M+2个字节 | 可变；其值的范围依赖于M 和D |\n\n#### 字符串数据类型\n\n|  类型名称  |   说明   |                        存储大小                         |   取值范围   |\n| :--------: | :------: | :-----------------------------------------------------: | :----------: |\n|  CHAR(N)   | 固定长度 | N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2） |  0~255字符   |\n| VARCHAR(N) | 可变长度 |                      实际存储大小                       | 0~65535字节  |\n|    TEXT    |   文本   |                      实际存储大小                       | 0~65535字节  |\n|  LONGTEXT  |  长文本  |                      实际存储大小                       | 0~2^32-1字节 |\n\n#### 日期数据类型\n\n| 类型名称  | 说明                                           | 存储大小 | 取值范围                                |\n| --------- | ---------------------------------------------- | -------- | --------------------------------------- |\n| DATE      | 存储日期值(yyyy-MM-dd)                         | 3个字节  | 1000-01-01~9999-12-31                   |\n| TIME      | 存储时分秒(HH:mm:ss)                           | 3个字节  | 00:00:00~23:59:59                       |\n| DATETIME  | 存储日期+时间(yyyy-MM-dd HH:mm:ss)             | 8个字节  | 1000-01-01 00:00:00~9999-12-31 23:59:59 |\n| TIMESTAMP | 存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss) | 4个字节  | 1970-01-01 00:00:01~2038-01-19 03:14:07 |\n\n#### 注释\n\n>  UTF-8   ： 一个英文/数字字符占1个字节，一个中文（含繁体）字符占3个字节。\n> Unicode： 一个英文/数字字符占2个字节，一个中文（含繁体）字符占2个字节。\n> 符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。\n\n> char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。\n> varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。\n>\n> 1）char的存取速度优于varchar\n> 2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间\n>    varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间\n> 3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。\n>\n>\n\n### 2.1.4 索引设计\n\n1. **【强制】**InnoDB表必须主键为`id int/bigint auto_increment`,且主键值禁止被更新。\n2. **【建议】**主键的名称以“`pk_`”开头，唯一键以“`uk_`”或“`uq_`”开头，普通索引以“`idx_`”开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。\n3. **【强制】**InnoDB和MyISAM存储引擎表，索引类型必须为`BTREE`；MEMORY表可以根据需要选择`HASH`或者`BTREE`类型索引。\n4. **【强制】**单个索引中每个索引记录的长度不能超过64KB。\n5. **【建议】**单个表上的索引个数不能超过7个。\n6. **【建议】**在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列`userid`的区分度可由`select count(distinct userid)`计算出来。\n7. **【建议】**在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。\n8. **【建议】**建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在`key(a,b)`，则`key(a)`为冗余索引，需要删除。\n\n### 2.1.5 分库分表、分区表\n\n1. **【强制】**分区表的分区字段（`partition-key`）必须有索引，或者是组合索引的首列。\n2. **【强制】**单个分区表中的分区（包括子分区）个数不能超过1024。\n3. **【强制】**上线前RD或者DBA必须指定分区表的创建、清理策略。\n4. **【强制】**访问分区表的SQL必须包含分区键。\n5. **【建议】**单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。\n6. **【强制】**对于分区表执行`alter table`操作，必须在业务低峰期执行。\n7. **【强制】**采用分库策略的，库的数量不能超过1024\n8. **【强制】**采用分表策略的，表的数量不能超过4096\n9. **【建议】**单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。\n10. **【建议】**水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。\n\n### 2.1.6 字符集\n\n1. **【强制】**数据库本身库、表、列所有字符集必须保持一致，为`utf8`或`utf8mb4`。\n2. **【强制】**前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为`utf8`。\n\n### 2.1.7 程序层DAO设计建议\n\n1. **【建议】**新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。\n2. **【建议】**前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。\n3. **【建议】**前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。\n4. **【建议】**对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。\n5. **【建议】**对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。\n6. **【建议】**在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。\n7. **【建议】**多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。\n8. **【建议】**业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。\n9. **【建议】**对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。\n\n### 2.1.8 一个规范的建表语句示例\n\n一个较为规范的建表语句为：\n\n```\nCREATE TABLE user (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT,\n  `user_id` bigint(11) NOT NULL COMMENT ‘用户id’\n  `username` varchar(45) NOT NULL COMMENT '真实姓名',\n  `email` varchar(30) NOT NULL COMMENT ‘用户邮箱’,\n  `nickname` varchar(45) NOT NULL COMMENT '昵称',\n  `avatar` int(11) NOT NULL COMMENT '头像',\n  `birthday` date NOT NULL COMMENT '生日',\n  `sex` tinyint(4) DEFAULT '0' COMMENT '性别',\n  `short_introduce` varchar(150) DEFAULT NULL COMMENT '一句话介绍自己，最多50个汉字',\n  `user_resume` varchar(300) NOT NULL COMMENT '用户提交的简历存放地址',\n  `user_register_ip` int NOT NULL COMMENT ‘用户注册时的源ip’,\n  `create_time` timestamp NOT NULL COMMENT ‘用户记录创建的时间’,\n  `update_time` timestamp NOT NULL COMMENT ‘用户资料修改的时间’,\n  `user_review_status` tinyint NOT NULL COMMENT ‘用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核’,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_user_id` (`user_id`),\n  KEY `idx_username`(`username`),\n  KEY `idx_create_time`(`create_time`,`user_review_status`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='网站用户基本信息';\n```\n\n## 2.2 SQL编写\n\n### 2.2.1 DML语句\n\n1. **【强制】**SELECT语句必须指定具体字段名称，禁止写成`*`。因为`select *`会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。\n2. **【强制】**insert语句指定具体字段名称，不要写成`insert into t1 values(…)`，道理同上。\n3. **【建议】**`insert into…values(XX),(XX),(XX)…`。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。\n4. **【建议】**SELECT语句不要使用`UNION`，推荐使用`UNION ALL`，并且`UNION`子句个数限制在5个以内。因为`union all`不需要去重，节省数据库资源，提高性能。\n5. **【建议】**in值列表限制在500以内。例如`select… where userid in(….500个以内…)`，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。\n6. **【建议】**事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。\n7. **【强制】**事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。\n8. **【强制】**写入和事务发往主库，只读SQL发往从库。\n9. **【强制】**除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。\n10. **【强制】**生产环境禁止使用`hint`，如`sql_no_cache`，`force index`，`ignore key`，`straight join`等。因为`hint`是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！\n11. **【强制】**where条件里等号左右字段类型必须一致，否则无法利用索引。\n12. **【建议】**`SELECT|UPDATE|DELETE|REPLACE`要有WHERE子句，且WHERE子句的条件必需使用索引查找。\n13. **【强制】**生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。\n14. **【强制】**WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。\n15. **【建议】**索引列不要使用函数或表达式，否则无法利用索引。如`where length(name)='Admin'`或`where user_id+2=10023`。\n16. **【建议】**减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如`where a=1 or b=2`优化为`where a=1… union …where b=2, key(a),key(b)`。\n17. **【建议】**分页查询，当limit起点较高时，可先用过滤条件进行过滤。如`select a,b,c from t1 limit 10000,20;`优化为: `select a,b,c from t1 where id>10000 limit 20;`。\n\n### 2.2.2 多表连接\n\n1. **【强制】**禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。\n2. **【强制】**禁止在业务的更新类SQL语句中使用join，比如`update t1 join t2…`。\n3. **【建议】**不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。\n4. **【建议】**线上环境，多表join不要超过3个表。\n5. **【建议】**多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如`select a from db1.table1 alias1 where …`。\n6. **【建议】**在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。\n\n### 2.2.3 事务\n\n1. **【建议】**事务中`INSERT|UPDATE|DELETE|REPLACE`语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。\n2. **【建议】**批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。\n3. **【建议】**对于有`auto_increment`属性字段的表的插入操作，并发需要控制在200以内。\n4. **【强制】**程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为`repeatable-read`。\n5. **【建议】**事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。\n6. **【建议】**事务里更新语句尽量基于主键或`unique key`，如`update … where id=XX`; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。\n7. **【建议】**尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。\n8. **【建议】**对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。\n\n### 2.2.4 排序和分组\n\n1. **【建议】**减少使用`order by`，和业务沟通能不排序就不排序，或将排序放到程序端去做。`order by`、`group by`、`distinct`这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。\n2. **【建议】**`order by`、`group by`、`distinct`这些SQL尽量利用索引直接检索出排序好的数据。如`where a=1 order by`可以利用`key(a,b)`。\n3. **【建议】**包含了`order by`、`group by`、`distinct`这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。\n\n### 2.2.5 线上禁止使用的SQL语句\n\n1. **【高危】**禁用`update|delete t1 … where a=XX limit XX;` 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上`order by PK`。\n2. **【高危】**禁止使用关联子查询，如`update t1 set … where name in(select name from user where…);`效率极其低下。\n3. **【强制】**禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。\n4. **【强制】**禁用`insert into …on duplicate key update…`在高并发环境下，会造成主从不一致。\n5. **【强制】**禁止联表更新语句，如`update t1,t2 where t1.id=t2.id…`。\n","source":"_posts/数据库/Mysql/MySQL数据库设计规范.md","raw":"---\ntitle: MySQL数据库设计规范\ntags:\n  - MySQL\ncategories:\n  - 数据库\n---\n# MySQL数据库设计规范\n\n转载原文：[https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95](https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#目录)\n\n## 目录\n\n```\n1. 规范背景与目的\t\n\n2. 设计规范\n\n2.1 数据库设计\t\n\n2.1.1 库名\t\n2.1.2 表结构\t\n2.1.3 列数据类型优化\t\n2.1.4 索引设计\t\n2.1.5 分库分表、分区表\t\n2.1.6 字符集\t\n2.1.7 程序DAO层设计建议\t\n2.1.8 一个规范的建表语句示例\t\n\n2.2 SQL编写\t\n\n2.2.1 DML语句\t\n2.2.2 多表连接\t\n2.2.3 事务\t\n2.2.4 排序和分组\t\n2.2.5 线上禁止使用的SQL语句\n```\n\n## 1. 规范背景与目的\n\nMySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。\n\n## 2. 设计规范\n\n### 2.1 数据库设计\n\n以下所有规范会按照**【高危】**、**【强制】**、**【建议】**三个级别进行标注，遵守优先级从高到低。\n\n对于不满足**【高危】**和**【强制】**两个级别的设计，DBA会强制打回要求修改。\n\n### 2.1.1 库名\n\n1. **【强制】**库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。\n2. **【强制】**库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。\n3. **【强制】**一般分库名称命名格式是`库通配名_编号`，编号从0开始递增，比如`wenda_001`以时间进行分库的名称格式是“库通配名_时间”\n4. **【强制】**创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：`create database db1 default character set utf8;`。\n\n### 2.1.2 表结构\n\n1. **【强制】**表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。\n2. **【强制】**表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。\n3. **【强制】**创建表时必须显式指定字符集为utf8或utf8mb4。\n4. **【强制】**创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。\n5. **【强制】**建表必须有comment\n6. **【建议】**建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为`auto_increment(2)`标识表里每一行主体的字段不要设为主键，建议设为其他字段如`user_id`，`order_id`等，并建立unique key索引（可参考`cdb.teacher`表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。\n7. **【建议】**核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段`create_time`和最后更新时间字段`update_time`，便于查问题。\n8. **【建议】**表中所有字段必须都是`NOT NULL`属性，业务可以根据需要定义`DEFAULT`值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。\n9. **【建议】**建议对表里的`blob`、`text`等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。\n10. **【建议】**反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如`user_name`属性在`user_account`，`user_login_log`等表里冗余一份，减少join查询。\n11. **【强制】**中间表用于保留中间结果集，名称必须以`tmp_`开头。备份表用于备份或抓取源表快照，名称必须以`bak_`开头。中间表和备份表定期清理。\n12. **【强制】**对于超过100W行的大表进行`alter table`，必须经过DBA审核，并在业务低峰期执行。因为`alter table`会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。\n\n### 2.1.3 列数据类型优化\n\n1. **【建议】**表中的自增列（`auto_increment`属性），推荐使用`bigint`类型。因为无符号`int`存储范围为`-2147483648~2147483647`（大约21亿左右），溢出后会导致报错。\n2. **【建议】**业务中选择性很少的状态`status`、类型`type`等字段推荐使用`tinytint`或者`smallint`类型节省存储空间。\n3. **【建议】**业务中IP地址字段推荐使用`int`类型，不推荐用`char(15)`。因为`int`只占4字节，可以用如下函数相互转换，而`char(15)`占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：`select inet_aton('192.168.2.12'); select inet_ntoa(3232236044);` PHP: `ip2long(‘192.168.2.12’); long2ip(3530427185);`\n4. **【建议】**不推荐使用`enum`，`set`。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用`tinyint`或`smallint`。\n5. **【建议】**不推荐使用`blob`，`text`等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在`overflow-page`里。不幸的是在`compact`行格式下，原始`page`和`overflow-page`都会加载。\n6. **【建议】**存储金钱的字段，建议用`int`，程序端乘以100和除以100进行存取。因为`int`占用4字节，而`double`占用8字节，空间浪费。\n7. **【建议】**文本数据尽量用`varchar`存储。因为`varchar`是变长存储，比`char`更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为`mediumtext`字段。而`text`在utf8字符集下最多存21844个字符，`mediumtext`最多存2^24/3个字符，`longtext`最多存2^32个字符。一般建议用`varchar`类型，字符数不要超过2700。\n8. **【建议】**时间类型尽量选取`timestamp`。因为`datetime`占用8字节，`timestamp`仅占用4字节，但是范围为`1970-01-01 00:00:01`到`2038-01-01 00:00:00`。更为高阶的方法，选用`int`来存储时间，使用SQL函数`unix_timestamp()`和`from_unixtime()`来进行转换。\n\n详细存储大小参考原文：https://blog.csdn.net/HXNLYW/article/details/100104768\n\n\n\n#### 整数型数据类型\n\n|   类型名称   |               说明                | 存储大小 |               取值范围               |\n| :----------: | :-------------------------------: | :------: | :----------------------------------: |\n|   TINYINT    | 很小的正数（一般用于boolean存储） | 1个字节  |    -128~127<br />unsigned：0~255     |\n|   SMALLINT   |              小正数               | 2个字节  | -32768~32767<br />unsigned：0~65535  |\n|  MEDIUMINT   |          中等大小的正数           | 3个字节  | -2^23 ~2^23-1<br/>unsigned: 2^24 -1  |\n| INT(INTEGER) |          普通大小的正数           | 4个字节  | -2^31 ~2^31-1<br />unsigned: 2^32 -1 |\n|    BIGINT    |       大正数(一般用于主键)        | 8个字节  | -2^63 ~2^63-1<br/>unsigned: 2^64 -1  |\n\n#### 小数型数据类型\n\n|   类型名称   |                     说明                     | 存储大小  |          取值范围           |\n| :----------: | :------------------------------------------: | :-------: | :-------------------------: |\n|  FLOAT(M,N)  | M表示总共位数，N表示小数位数（单精度浮点数） |  4个字节  |     ±1.175494351E – 38      |\n| DOUBLE(M,N)  |                 双精度浮点数                 |  8个字节  | ±2.2250738585072014E – 308  |\n| DECIMAL(M,D) |              压缩的“严格”定点数              | M+2个字节 | 可变；其值的范围依赖于M 和D |\n\n#### 字符串数据类型\n\n|  类型名称  |   说明   |                        存储大小                         |   取值范围   |\n| :--------: | :------: | :-----------------------------------------------------: | :----------: |\n|  CHAR(N)   | 固定长度 | N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2） |  0~255字符   |\n| VARCHAR(N) | 可变长度 |                      实际存储大小                       | 0~65535字节  |\n|    TEXT    |   文本   |                      实际存储大小                       | 0~65535字节  |\n|  LONGTEXT  |  长文本  |                      实际存储大小                       | 0~2^32-1字节 |\n\n#### 日期数据类型\n\n| 类型名称  | 说明                                           | 存储大小 | 取值范围                                |\n| --------- | ---------------------------------------------- | -------- | --------------------------------------- |\n| DATE      | 存储日期值(yyyy-MM-dd)                         | 3个字节  | 1000-01-01~9999-12-31                   |\n| TIME      | 存储时分秒(HH:mm:ss)                           | 3个字节  | 00:00:00~23:59:59                       |\n| DATETIME  | 存储日期+时间(yyyy-MM-dd HH:mm:ss)             | 8个字节  | 1000-01-01 00:00:00~9999-12-31 23:59:59 |\n| TIMESTAMP | 存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss) | 4个字节  | 1970-01-01 00:00:01~2038-01-19 03:14:07 |\n\n#### 注释\n\n>  UTF-8   ： 一个英文/数字字符占1个字节，一个中文（含繁体）字符占3个字节。\n> Unicode： 一个英文/数字字符占2个字节，一个中文（含繁体）字符占2个字节。\n> 符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。\n\n> char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。\n> varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。\n>\n> 1）char的存取速度优于varchar\n> 2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间\n>    varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间\n> 3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。\n>\n>\n\n### 2.1.4 索引设计\n\n1. **【强制】**InnoDB表必须主键为`id int/bigint auto_increment`,且主键值禁止被更新。\n2. **【建议】**主键的名称以“`pk_`”开头，唯一键以“`uk_`”或“`uq_`”开头，普通索引以“`idx_`”开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。\n3. **【强制】**InnoDB和MyISAM存储引擎表，索引类型必须为`BTREE`；MEMORY表可以根据需要选择`HASH`或者`BTREE`类型索引。\n4. **【强制】**单个索引中每个索引记录的长度不能超过64KB。\n5. **【建议】**单个表上的索引个数不能超过7个。\n6. **【建议】**在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列`userid`的区分度可由`select count(distinct userid)`计算出来。\n7. **【建议】**在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。\n8. **【建议】**建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在`key(a,b)`，则`key(a)`为冗余索引，需要删除。\n\n### 2.1.5 分库分表、分区表\n\n1. **【强制】**分区表的分区字段（`partition-key`）必须有索引，或者是组合索引的首列。\n2. **【强制】**单个分区表中的分区（包括子分区）个数不能超过1024。\n3. **【强制】**上线前RD或者DBA必须指定分区表的创建、清理策略。\n4. **【强制】**访问分区表的SQL必须包含分区键。\n5. **【建议】**单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。\n6. **【强制】**对于分区表执行`alter table`操作，必须在业务低峰期执行。\n7. **【强制】**采用分库策略的，库的数量不能超过1024\n8. **【强制】**采用分表策略的，表的数量不能超过4096\n9. **【建议】**单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。\n10. **【建议】**水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。\n\n### 2.1.6 字符集\n\n1. **【强制】**数据库本身库、表、列所有字符集必须保持一致，为`utf8`或`utf8mb4`。\n2. **【强制】**前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为`utf8`。\n\n### 2.1.7 程序层DAO设计建议\n\n1. **【建议】**新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。\n2. **【建议】**前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。\n3. **【建议】**前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。\n4. **【建议】**对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。\n5. **【建议】**对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。\n6. **【建议】**在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。\n7. **【建议】**多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。\n8. **【建议】**业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。\n9. **【建议】**对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。\n\n### 2.1.8 一个规范的建表语句示例\n\n一个较为规范的建表语句为：\n\n```\nCREATE TABLE user (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT,\n  `user_id` bigint(11) NOT NULL COMMENT ‘用户id’\n  `username` varchar(45) NOT NULL COMMENT '真实姓名',\n  `email` varchar(30) NOT NULL COMMENT ‘用户邮箱’,\n  `nickname` varchar(45) NOT NULL COMMENT '昵称',\n  `avatar` int(11) NOT NULL COMMENT '头像',\n  `birthday` date NOT NULL COMMENT '生日',\n  `sex` tinyint(4) DEFAULT '0' COMMENT '性别',\n  `short_introduce` varchar(150) DEFAULT NULL COMMENT '一句话介绍自己，最多50个汉字',\n  `user_resume` varchar(300) NOT NULL COMMENT '用户提交的简历存放地址',\n  `user_register_ip` int NOT NULL COMMENT ‘用户注册时的源ip’,\n  `create_time` timestamp NOT NULL COMMENT ‘用户记录创建的时间’,\n  `update_time` timestamp NOT NULL COMMENT ‘用户资料修改的时间’,\n  `user_review_status` tinyint NOT NULL COMMENT ‘用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核’,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_user_id` (`user_id`),\n  KEY `idx_username`(`username`),\n  KEY `idx_create_time`(`create_time`,`user_review_status`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='网站用户基本信息';\n```\n\n## 2.2 SQL编写\n\n### 2.2.1 DML语句\n\n1. **【强制】**SELECT语句必须指定具体字段名称，禁止写成`*`。因为`select *`会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。\n2. **【强制】**insert语句指定具体字段名称，不要写成`insert into t1 values(…)`，道理同上。\n3. **【建议】**`insert into…values(XX),(XX),(XX)…`。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。\n4. **【建议】**SELECT语句不要使用`UNION`，推荐使用`UNION ALL`，并且`UNION`子句个数限制在5个以内。因为`union all`不需要去重，节省数据库资源，提高性能。\n5. **【建议】**in值列表限制在500以内。例如`select… where userid in(….500个以内…)`，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。\n6. **【建议】**事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。\n7. **【强制】**事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。\n8. **【强制】**写入和事务发往主库，只读SQL发往从库。\n9. **【强制】**除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。\n10. **【强制】**生产环境禁止使用`hint`，如`sql_no_cache`，`force index`，`ignore key`，`straight join`等。因为`hint`是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！\n11. **【强制】**where条件里等号左右字段类型必须一致，否则无法利用索引。\n12. **【建议】**`SELECT|UPDATE|DELETE|REPLACE`要有WHERE子句，且WHERE子句的条件必需使用索引查找。\n13. **【强制】**生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。\n14. **【强制】**WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。\n15. **【建议】**索引列不要使用函数或表达式，否则无法利用索引。如`where length(name)='Admin'`或`where user_id+2=10023`。\n16. **【建议】**减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如`where a=1 or b=2`优化为`where a=1… union …where b=2, key(a),key(b)`。\n17. **【建议】**分页查询，当limit起点较高时，可先用过滤条件进行过滤。如`select a,b,c from t1 limit 10000,20;`优化为: `select a,b,c from t1 where id>10000 limit 20;`。\n\n### 2.2.2 多表连接\n\n1. **【强制】**禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。\n2. **【强制】**禁止在业务的更新类SQL语句中使用join，比如`update t1 join t2…`。\n3. **【建议】**不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。\n4. **【建议】**线上环境，多表join不要超过3个表。\n5. **【建议】**多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如`select a from db1.table1 alias1 where …`。\n6. **【建议】**在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。\n\n### 2.2.3 事务\n\n1. **【建议】**事务中`INSERT|UPDATE|DELETE|REPLACE`语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。\n2. **【建议】**批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。\n3. **【建议】**对于有`auto_increment`属性字段的表的插入操作，并发需要控制在200以内。\n4. **【强制】**程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为`repeatable-read`。\n5. **【建议】**事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。\n6. **【建议】**事务里更新语句尽量基于主键或`unique key`，如`update … where id=XX`; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。\n7. **【建议】**尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。\n8. **【建议】**对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。\n\n### 2.2.4 排序和分组\n\n1. **【建议】**减少使用`order by`，和业务沟通能不排序就不排序，或将排序放到程序端去做。`order by`、`group by`、`distinct`这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。\n2. **【建议】**`order by`、`group by`、`distinct`这些SQL尽量利用索引直接检索出排序好的数据。如`where a=1 order by`可以利用`key(a,b)`。\n3. **【建议】**包含了`order by`、`group by`、`distinct`这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。\n\n### 2.2.5 线上禁止使用的SQL语句\n\n1. **【高危】**禁用`update|delete t1 … where a=XX limit XX;` 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上`order by PK`。\n2. **【高危】**禁止使用关联子查询，如`update t1 set … where name in(select name from user where…);`效率极其低下。\n3. **【强制】**禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。\n4. **【强制】**禁用`insert into …on duplicate key update…`在高并发环境下，会造成主从不一致。\n5. **【强制】**禁止联表更新语句，如`update t1,t2 where t1.id=t2.id…`。\n","slug":"数据库/Mysql/MySQL数据库设计规范","published":1,"date":"2022-11-28T09:58:58.068Z","updated":"2022-11-28T10:57:23.998Z","_id":"clb0oel89000h6oiae51f7u88","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MySQL数据库设计规范\"><a href=\"#MySQL数据库设计规范\" class=\"headerlink\" title=\"MySQL数据库设计规范\"></a>MySQL数据库设计规范</h1><p>转载原文：<a href=\"https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95\">https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95</a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">1</span>. 规范背景与目的\t<br><br><span class=\"hljs-attribute\">2</span>. 设计规范<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span> 数据库设计\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span> 库名\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span> 表结构\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">3</span> 列数据类型优化\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">4</span> 索引设计\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">5</span> 分库分表、分区表\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">6</span> 字符集\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">7</span> 程序DAO层设计建议\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">8</span> 一个规范的建表语句示例\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span> SQL编写\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">1</span> DML语句\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">2</span> 多表连接\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span> 事务\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span> 排序和分组\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span> 线上禁止使用的SQL语句<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-规范背景与目的\"><a href=\"#1-规范背景与目的\" class=\"headerlink\" title=\"1. 规范背景与目的\"></a>1. 规范背景与目的</h2><p>MySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p>\n<h2 id=\"2-设计规范\"><a href=\"#2-设计规范\" class=\"headerlink\" title=\"2. 设计规范\"></a>2. 设计规范</h2><h3 id=\"2-1-数据库设计\"><a href=\"#2-1-数据库设计\" class=\"headerlink\" title=\"2.1 数据库设计\"></a>2.1 数据库设计</h3><p>以下所有规范会按照<strong>【高危】</strong>、<strong>【强制】</strong>、<strong>【建议】</strong>三个级别进行标注，遵守优先级从高到低。</p>\n<p>对于不满足<strong>【高危】</strong>和<strong>【强制】</strong>两个级别的设计，DBA会强制打回要求修改。</p>\n<h3 id=\"2-1-1-库名\"><a href=\"#2-1-1-库名\" class=\"headerlink\" title=\"2.1.1 库名\"></a>2.1.1 库名</h3><ol>\n<li><strong>【强制】</strong>库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</li>\n<li><strong>【强制】</strong>库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</li>\n<li><strong>【强制】</strong>一般分库名称命名格式是<code>库通配名_编号</code>，编号从0开始递增，比如<code>wenda_001</code>以时间进行分库的名称格式是“库通配名_时间”</li>\n<li><strong>【强制】</strong>创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：<code>create database db1 default character set utf8;</code>。</li>\n</ol>\n<h3 id=\"2-1-2-表结构\"><a href=\"#2-1-2-表结构\" class=\"headerlink\" title=\"2.1.2 表结构\"></a>2.1.2 表结构</h3><ol>\n<li><strong>【强制】</strong>表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</li>\n<li><strong>【强制】</strong>表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定字符集为utf8或utf8mb4。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB&#x2F;MyISAM&#x2F;Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</li>\n<li><strong>【强制】</strong>建表必须有comment</li>\n<li><strong>【建议】</strong>建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为<code>auto_increment(2)</code>标识表里每一行主体的字段不要设为主键，建议设为其他字段如<code>user_id</code>，<code>order_id</code>等，并建立unique key索引（可参考<code>cdb.teacher</code>表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I&#x2F;O，性能下降。</li>\n<li><strong>【建议】</strong>核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段<code>create_time</code>和最后更新时间字段<code>update_time</code>，便于查问题。</li>\n<li><strong>【建议】</strong>表中所有字段必须都是<code>NOT NULL</code>属性，业务可以根据需要定义<code>DEFAULT</code>值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li>\n<li><strong>【建议】</strong>建议对表里的<code>blob</code>、<code>text</code>等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</li>\n<li><strong>【建议】</strong>反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如<code>user_name</code>属性在<code>user_account</code>，<code>user_login_log</code>等表里冗余一份，减少join查询。</li>\n<li><strong>【强制】</strong>中间表用于保留中间结果集，名称必须以<code>tmp_</code>开头。备份表用于备份或抓取源表快照，名称必须以<code>bak_</code>开头。中间表和备份表定期清理。</li>\n<li><strong>【强制】</strong>对于超过100W行的大表进行<code>alter table</code>，必须经过DBA审核，并在业务低峰期执行。因为<code>alter table</code>会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li>\n</ol>\n<h3 id=\"2-1-3-列数据类型优化\"><a href=\"#2-1-3-列数据类型优化\" class=\"headerlink\" title=\"2.1.3 列数据类型优化\"></a>2.1.3 列数据类型优化</h3><ol>\n<li><strong>【建议】</strong>表中的自增列（<code>auto_increment</code>属性），推荐使用<code>bigint</code>类型。因为无符号<code>int</code>存储范围为<code>-2147483648~2147483647</code>（大约21亿左右），溢出后会导致报错。</li>\n<li><strong>【建议】</strong>业务中选择性很少的状态<code>status</code>、类型<code>type</code>等字段推荐使用<code>tinytint</code>或者<code>smallint</code>类型节省存储空间。</li>\n<li><strong>【建议】</strong>业务中IP地址字段推荐使用<code>int</code>类型，不推荐用<code>char(15)</code>。因为<code>int</code>只占4字节，可以用如下函数相互转换，而<code>char(15)</code>占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：<code>select inet_aton(&#39;192.168.2.12&#39;); select inet_ntoa(3232236044);</code> PHP: <code>ip2long(‘192.168.2.12’); long2ip(3530427185);</code></li>\n<li><strong>【建议】</strong>不推荐使用<code>enum</code>，<code>set</code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用<code>tinyint</code>或<code>smallint</code>。</li>\n<li><strong>【建议】</strong>不推荐使用<code>blob</code>，<code>text</code>等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在<code>overflow-page</code>里。不幸的是在<code>compact</code>行格式下，原始<code>page</code>和<code>overflow-page</code>都会加载。</li>\n<li><strong>【建议】</strong>存储金钱的字段，建议用<code>int</code>，程序端乘以100和除以100进行存取。因为<code>int</code>占用4字节，而<code>double</code>占用8字节，空间浪费。</li>\n<li><strong>【建议】</strong>文本数据尽量用<code>varchar</code>存储。因为<code>varchar</code>是变长存储，比<code>char</code>更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为<code>mediumtext</code>字段。而<code>text</code>在utf8字符集下最多存21844个字符，<code>mediumtext</code>最多存2^24&#x2F;3个字符，<code>longtext</code>最多存2^32个字符。一般建议用<code>varchar</code>类型，字符数不要超过2700。</li>\n<li><strong>【建议】</strong>时间类型尽量选取<code>timestamp</code>。因为<code>datetime</code>占用8字节，<code>timestamp</code>仅占用4字节，但是范围为<code>1970-01-01 00:00:01</code>到<code>2038-01-01 00:00:00</code>。更为高阶的方法，选用<code>int</code>来存储时间，使用SQL函数<code>unix_timestamp()</code>和<code>from_unixtime()</code>来进行转换。</li>\n</ol>\n<p>详细存储大小参考原文：<a href=\"https://blog.csdn.net/HXNLYW/article/details/100104768\">https://blog.csdn.net/HXNLYW/article/details/100104768</a></p>\n<h4 id=\"整数型数据类型\"><a href=\"#整数型数据类型\" class=\"headerlink\" title=\"整数型数据类型\"></a>整数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TINYINT</td>\n<td align=\"center\">很小的正数（一般用于boolean存储）</td>\n<td align=\"center\">1个字节</td>\n<td align=\"center\">-128<del>127<br />unsigned：0</del>255</td>\n</tr>\n<tr>\n<td align=\"center\">SMALLINT</td>\n<td align=\"center\">小正数</td>\n<td align=\"center\">2个字节</td>\n<td align=\"center\">-32768<del>32767<br />unsigned：0</del>65535</td>\n</tr>\n<tr>\n<td align=\"center\">MEDIUMINT</td>\n<td align=\"center\">中等大小的正数</td>\n<td align=\"center\">3个字节</td>\n<td align=\"center\">-2^23 ~2^23-1<br/>unsigned: 2^24 -1</td>\n</tr>\n<tr>\n<td align=\"center\">INT(INTEGER)</td>\n<td align=\"center\">普通大小的正数</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">-2^31 ~2^31-1<br />unsigned: 2^32 -1</td>\n</tr>\n<tr>\n<td align=\"center\">BIGINT</td>\n<td align=\"center\">大正数(一般用于主键)</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">-2^63 ~2^63-1<br/>unsigned: 2^64 -1</td>\n</tr>\n</tbody></table>\n<h4 id=\"小数型数据类型\"><a href=\"#小数型数据类型\" class=\"headerlink\" title=\"小数型数据类型\"></a>小数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">FLOAT(M,N)</td>\n<td align=\"center\">M表示总共位数，N表示小数位数（单精度浮点数）</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">±1.175494351E – 38</td>\n</tr>\n<tr>\n<td align=\"center\">DOUBLE(M,N)</td>\n<td align=\"center\">双精度浮点数</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">±2.2250738585072014E – 308</td>\n</tr>\n<tr>\n<td align=\"center\">DECIMAL(M,D)</td>\n<td align=\"center\">压缩的“严格”定点数</td>\n<td align=\"center\">M+2个字节</td>\n<td align=\"center\">可变；其值的范围依赖于M 和D</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串数据类型\"><a href=\"#字符串数据类型\" class=\"headerlink\" title=\"字符串数据类型\"></a>字符串数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CHAR(N)</td>\n<td align=\"center\">固定长度</td>\n<td align=\"center\">N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2）</td>\n<td align=\"center\">0~255字符</td>\n</tr>\n<tr>\n<td align=\"center\">VARCHAR(N)</td>\n<td align=\"center\">可变长度</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">TEXT</td>\n<td align=\"center\">文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">LONGTEXT</td>\n<td align=\"center\">长文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~2^32-1字节</td>\n</tr>\n</tbody></table>\n<h4 id=\"日期数据类型\"><a href=\"#日期数据类型\" class=\"headerlink\" title=\"日期数据类型\"></a>日期数据类型</h4><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储大小</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DATE</td>\n<td>存储日期值(yyyy-MM-dd)</td>\n<td>3个字节</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>存储时分秒(HH:mm:ss)</td>\n<td>3个字节</td>\n<td>00:00:00~23:59:59</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>存储日期+时间(yyyy-MM-dd HH:mm:ss)</td>\n<td>8个字节</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss)</td>\n<td>4个字节</td>\n<td>1970-01-01 00:00:01~2038-01-19 03:14:07</td>\n</tr>\n</tbody></table>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><blockquote>\n<p> UTF-8   ： 一个英文&#x2F;数字字符占1个字节，一个中文（含繁体）字符占3个字节。<br>Unicode： 一个英文&#x2F;数字字符占2个字节，一个中文（含繁体）字符占2个字节。<br>符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。</p>\n</blockquote>\n<blockquote>\n<p>char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。<br>varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。</p>\n<p>1）char的存取速度优于varchar<br>2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间<br>   varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间<br>3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。</p>\n</blockquote>\n<h3 id=\"2-1-4-索引设计\"><a href=\"#2-1-4-索引设计\" class=\"headerlink\" title=\"2.1.4 索引设计\"></a>2.1.4 索引设计</h3><ol>\n<li><strong>【强制】</strong>InnoDB表必须主键为<code>id int/bigint auto_increment</code>,且主键值禁止被更新。</li>\n<li><strong>【建议】</strong>主键的名称以“<code>pk_</code>”开头，唯一键以“<code>uk_</code>”或“<code>uq_</code>”开头，普通索引以“<code>idx_</code>”开头，一律使用小写格式，以表名&#x2F;字段的名称或缩写作为后缀。</li>\n<li><strong>【强制】</strong>InnoDB和MyISAM存储引擎表，索引类型必须为<code>BTREE</code>；MEMORY表可以根据需要选择<code>HASH</code>或者<code>BTREE</code>类型索引。</li>\n<li><strong>【强制】</strong>单个索引中每个索引记录的长度不能超过64KB。</li>\n<li><strong>【建议】</strong>单个表上的索引个数不能超过7个。</li>\n<li><strong>【建议】</strong>在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列<code>userid</code>的区分度可由<code>select count(distinct userid)</code>计算出来。</li>\n<li><strong>【建议】</strong>在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</li>\n<li><strong>【建议】</strong>建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在<code>key(a,b)</code>，则<code>key(a)</code>为冗余索引，需要删除。</li>\n</ol>\n<h3 id=\"2-1-5-分库分表、分区表\"><a href=\"#2-1-5-分库分表、分区表\" class=\"headerlink\" title=\"2.1.5 分库分表、分区表\"></a>2.1.5 分库分表、分区表</h3><ol>\n<li><strong>【强制】</strong>分区表的分区字段（<code>partition-key</code>）必须有索引，或者是组合索引的首列。</li>\n<li><strong>【强制】</strong>单个分区表中的分区（包括子分区）个数不能超过1024。</li>\n<li><strong>【强制】</strong>上线前RD或者DBA必须指定分区表的创建、清理策略。</li>\n<li><strong>【强制】</strong>访问分区表的SQL必须包含分区键。</li>\n<li><strong>【建议】</strong>单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</li>\n<li><strong>【强制】</strong>对于分区表执行<code>alter table</code>操作，必须在业务低峰期执行。</li>\n<li><strong>【强制】</strong>采用分库策略的，库的数量不能超过1024</li>\n<li><strong>【强制】</strong>采用分表策略的，表的数量不能超过4096</li>\n<li><strong>【建议】</strong>单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</li>\n<li><strong>【建议】</strong>水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li>\n</ol>\n<h3 id=\"2-1-6-字符集\"><a href=\"#2-1-6-字符集\" class=\"headerlink\" title=\"2.1.6 字符集\"></a>2.1.6 字符集</h3><ol>\n<li><strong>【强制】</strong>数据库本身库、表、列所有字符集必须保持一致，为<code>utf8</code>或<code>utf8mb4</code>。</li>\n<li><strong>【强制】</strong>前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为<code>utf8</code>。</li>\n</ol>\n<h3 id=\"2-1-7-程序层DAO设计建议\"><a href=\"#2-1-7-程序层DAO设计建议\" class=\"headerlink\" title=\"2.1.7 程序层DAO设计建议\"></a>2.1.7 程序层DAO设计建议</h3><ol>\n<li><strong>【建议】</strong>新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li>\n<li><strong>【建议】</strong>前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li>\n<li><strong>【建议】</strong>前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</li>\n<li><strong>【建议】</strong>对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li>\n<li><strong>【建议】</strong>对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</li>\n<li><strong>【建议】</strong>在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li>\n<li><strong>【建议】</strong>多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</li>\n<li><strong>【建议】</strong>业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li>\n<li><strong>【建议】</strong>对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</li>\n</ol>\n<h3 id=\"2-1-8-一个规范的建表语句示例\"><a href=\"#2-1-8-一个规范的建表语句示例\" class=\"headerlink\" title=\"2.1.8 一个规范的建表语句示例\"></a>2.1.8 一个规范的建表语句示例</h3><p>一个较为规范的建表语句为：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">CREATE</span> TABLE <span class=\"hljs-keyword\">user</span> (<br>  <span class=\"hljs-symbol\">`id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,<br>  <span class=\"hljs-symbol\">`user_id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户id’<br>  <span class=\"hljs-symbol\">`username`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;真实姓名&#x27;</span>,<br>  <span class=\"hljs-symbol\">`email`</span> varchar(<span class=\"hljs-number\">30</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户邮箱’,<br>  <span class=\"hljs-symbol\">`nickname`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;昵称&#x27;</span>,<br>  <span class=\"hljs-symbol\">`avatar`</span> int(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;头像&#x27;</span>,<br>  <span class=\"hljs-symbol\">`birthday`</span> date <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;生日&#x27;</span>,<br>  <span class=\"hljs-symbol\">`sex`</span> tinyint(<span class=\"hljs-number\">4</span>) DEFAULT <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;性别&#x27;</span>,<br>  <span class=\"hljs-symbol\">`short_introduce`</span> varchar(<span class=\"hljs-number\">150</span>) DEFAULT <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;一句话介绍自己，最多50个汉字&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_resume`</span> varchar(<span class=\"hljs-number\">300</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户提交的简历存放地址&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_register_ip`</span> int <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户注册时的源ip’,<br>  <span class=\"hljs-symbol\">`create_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户记录创建的时间’,<br>  <span class=\"hljs-symbol\">`update_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料修改的时间’,<br>  <span class=\"hljs-symbol\">`user_review_status`</span> tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料审核状态，<span class=\"hljs-number\">1</span>为通过，<span class=\"hljs-number\">2</span>为审核中，<span class=\"hljs-number\">3</span>为未通过，<span class=\"hljs-number\">4</span>为还未提交审核’,<br>  <span class=\"hljs-keyword\">PRIMARY</span> <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-symbol\">`id`</span>),<br>  <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_user_id`</span> (<span class=\"hljs-symbol\">`user_id`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_username`</span>(<span class=\"hljs-symbol\">`username`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_create_time`</span>(<span class=\"hljs-symbol\">`create_time`</span>,<span class=\"hljs-symbol\">`user_review_status`</span>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class=\"hljs-string\">&#x27;网站用户基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-SQL编写\"><a href=\"#2-2-SQL编写\" class=\"headerlink\" title=\"2.2 SQL编写\"></a>2.2 SQL编写</h2><h3 id=\"2-2-1-DML语句\"><a href=\"#2-2-1-DML语句\" class=\"headerlink\" title=\"2.2.1 DML语句\"></a>2.2.1 DML语句</h3><ol>\n<li><strong>【强制】</strong>SELECT语句必须指定具体字段名称，禁止写成<code>*</code>。因为<code>select *</code>会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</li>\n<li><strong>【强制】</strong>insert语句指定具体字段名称，不要写成<code>insert into t1 values(…)</code>，道理同上。</li>\n<li><strong>【建议】</strong><code>insert into…values(XX),(XX),(XX)…</code>。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。</li>\n<li><strong>【建议】</strong>SELECT语句不要使用<code>UNION</code>，推荐使用<code>UNION ALL</code>，并且<code>UNION</code>子句个数限制在5个以内。因为<code>union all</code>不需要去重，节省数据库资源，提高性能。</li>\n<li><strong>【建议】</strong>in值列表限制在500以内。例如<code>select… where userid in(….500个以内…)</code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li>\n<li><strong>【建议】</strong>事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</li>\n<li><strong>【强制】</strong>事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</li>\n<li><strong>【强制】</strong>写入和事务发往主库，只读SQL发往从库。</li>\n<li><strong>【强制】</strong>除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</li>\n<li><strong>【强制】</strong>生产环境禁止使用<code>hint</code>，如<code>sql_no_cache</code>，<code>force index</code>，<code>ignore key</code>，<code>straight join</code>等。因为<code>hint</code>是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</li>\n<li><strong>【强制】</strong>where条件里等号左右字段类型必须一致，否则无法利用索引。</li>\n<li><strong>【建议】</strong><code>SELECT|UPDATE|DELETE|REPLACE</code>要有WHERE子句，且WHERE子句的条件必需使用索引查找。</li>\n<li><strong>【强制】</strong>生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</li>\n<li><strong>【强制】</strong>WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</li>\n<li><strong>【建议】</strong>索引列不要使用函数或表达式，否则无法利用索引。如<code>where length(name)=&#39;Admin&#39;</code>或<code>where user_id+2=10023</code>。</li>\n<li><strong>【建议】</strong>减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如<code>where a=1 or b=2</code>优化为<code>where a=1… union …where b=2, key(a),key(b)</code>。</li>\n<li><strong>【建议】</strong>分页查询，当limit起点较高时，可先用过滤条件进行过滤。如<code>select a,b,c from t1 limit 10000,20;</code>优化为: <code>select a,b,c from t1 where id&gt;10000 limit 20;</code>。</li>\n</ol>\n<h3 id=\"2-2-2-多表连接\"><a href=\"#2-2-2-多表连接\" class=\"headerlink\" title=\"2.2.2 多表连接\"></a>2.2.2 多表连接</h3><ol>\n<li><strong>【强制】</strong>禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li>\n<li><strong>【强制】</strong>禁止在业务的更新类SQL语句中使用join，比如<code>update t1 join t2…</code>。</li>\n<li><strong>【建议】</strong>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</li>\n<li><strong>【建议】</strong>线上环境，多表join不要超过3个表。</li>\n<li><strong>【建议】</strong>多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如<code>select a from db1.table1 alias1 where …</code>。</li>\n<li><strong>【建议】</strong>在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</li>\n</ol>\n<h3 id=\"2-2-3-事务\"><a href=\"#2-2-3-事务\" class=\"headerlink\" title=\"2.2.3 事务\"></a>2.2.3 事务</h3><ol>\n<li><strong>【建议】</strong>事务中<code>INSERT|UPDATE|DELETE|REPLACE</code>语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</li>\n<li><strong>【建议】</strong>批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</li>\n<li><strong>【建议】</strong>对于有<code>auto_increment</code>属性字段的表的插入操作，并发需要控制在200以内。</li>\n<li><strong>【强制】</strong>程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为<code>repeatable-read</code>。</li>\n<li><strong>【建议】</strong>事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</li>\n<li><strong>【建议】</strong>事务里更新语句尽量基于主键或<code>unique key</code>，如<code>update … where id=XX</code>; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li>\n<li><strong>【建议】</strong>尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</li>\n<li><strong>【建议】</strong>对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</li>\n</ol>\n<h3 id=\"2-2-4-排序和分组\"><a href=\"#2-2-4-排序和分组\" class=\"headerlink\" title=\"2.2.4 排序和分组\"></a>2.2.4 排序和分组</h3><ol>\n<li><strong>【建议】</strong>减少使用<code>order by</code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>order by</code>、<code>group by</code>、<code>distinct</code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li>\n<li><strong>【建议】</strong><code>order by</code>、<code>group by</code>、<code>distinct</code>这些SQL尽量利用索引直接检索出排序好的数据。如<code>where a=1 order by</code>可以利用<code>key(a,b)</code>。</li>\n<li><strong>【建议】</strong>包含了<code>order by</code>、<code>group by</code>、<code>distinct</code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li>\n</ol>\n<h3 id=\"2-2-5-线上禁止使用的SQL语句\"><a href=\"#2-2-5-线上禁止使用的SQL语句\" class=\"headerlink\" title=\"2.2.5 线上禁止使用的SQL语句\"></a>2.2.5 线上禁止使用的SQL语句</h3><ol>\n<li><strong>【高危】</strong>禁用<code>update|delete t1 … where a=XX limit XX;</code> 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上<code>order by PK</code>。</li>\n<li><strong>【高危】</strong>禁止使用关联子查询，如<code>update t1 set … where name in(select name from user where…);</code>效率极其低下。</li>\n<li><strong>【强制】</strong>禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li>\n<li><strong>【强制】</strong>禁用<code>insert into …on duplicate key update…</code>在高并发环境下，会造成主从不一致。</li>\n<li><strong>【强制】</strong>禁止联表更新语句，如<code>update t1,t2 where t1.id=t2.id…</code>。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL数据库设计规范\"><a href=\"#MySQL数据库设计规范\" class=\"headerlink\" title=\"MySQL数据库设计规范\"></a>MySQL数据库设计规范</h1><p>转载原文：<a href=\"https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95\">https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95</a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">1</span>. 规范背景与目的\t<br><br><span class=\"hljs-attribute\">2</span>. 设计规范<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span> 数据库设计\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span> 库名\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span> 表结构\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">3</span> 列数据类型优化\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">4</span> 索引设计\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">5</span> 分库分表、分区表\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">6</span> 字符集\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">7</span> 程序DAO层设计建议\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">8</span> 一个规范的建表语句示例\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span> SQL编写\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">1</span> DML语句\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">2</span> 多表连接\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span> 事务\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span> 排序和分组\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span> 线上禁止使用的SQL语句<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-规范背景与目的\"><a href=\"#1-规范背景与目的\" class=\"headerlink\" title=\"1. 规范背景与目的\"></a>1. 规范背景与目的</h2><p>MySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p>\n<h2 id=\"2-设计规范\"><a href=\"#2-设计规范\" class=\"headerlink\" title=\"2. 设计规范\"></a>2. 设计规范</h2><h3 id=\"2-1-数据库设计\"><a href=\"#2-1-数据库设计\" class=\"headerlink\" title=\"2.1 数据库设计\"></a>2.1 数据库设计</h3><p>以下所有规范会按照<strong>【高危】</strong>、<strong>【强制】</strong>、<strong>【建议】</strong>三个级别进行标注，遵守优先级从高到低。</p>\n<p>对于不满足<strong>【高危】</strong>和<strong>【强制】</strong>两个级别的设计，DBA会强制打回要求修改。</p>\n<h3 id=\"2-1-1-库名\"><a href=\"#2-1-1-库名\" class=\"headerlink\" title=\"2.1.1 库名\"></a>2.1.1 库名</h3><ol>\n<li><strong>【强制】</strong>库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</li>\n<li><strong>【强制】</strong>库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</li>\n<li><strong>【强制】</strong>一般分库名称命名格式是<code>库通配名_编号</code>，编号从0开始递增，比如<code>wenda_001</code>以时间进行分库的名称格式是“库通配名_时间”</li>\n<li><strong>【强制】</strong>创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：<code>create database db1 default character set utf8;</code>。</li>\n</ol>\n<h3 id=\"2-1-2-表结构\"><a href=\"#2-1-2-表结构\" class=\"headerlink\" title=\"2.1.2 表结构\"></a>2.1.2 表结构</h3><ol>\n<li><strong>【强制】</strong>表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</li>\n<li><strong>【强制】</strong>表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定字符集为utf8或utf8mb4。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB&#x2F;MyISAM&#x2F;Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</li>\n<li><strong>【强制】</strong>建表必须有comment</li>\n<li><strong>【建议】</strong>建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为<code>auto_increment(2)</code>标识表里每一行主体的字段不要设为主键，建议设为其他字段如<code>user_id</code>，<code>order_id</code>等，并建立unique key索引（可参考<code>cdb.teacher</code>表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I&#x2F;O，性能下降。</li>\n<li><strong>【建议】</strong>核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段<code>create_time</code>和最后更新时间字段<code>update_time</code>，便于查问题。</li>\n<li><strong>【建议】</strong>表中所有字段必须都是<code>NOT NULL</code>属性，业务可以根据需要定义<code>DEFAULT</code>值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li>\n<li><strong>【建议】</strong>建议对表里的<code>blob</code>、<code>text</code>等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</li>\n<li><strong>【建议】</strong>反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如<code>user_name</code>属性在<code>user_account</code>，<code>user_login_log</code>等表里冗余一份，减少join查询。</li>\n<li><strong>【强制】</strong>中间表用于保留中间结果集，名称必须以<code>tmp_</code>开头。备份表用于备份或抓取源表快照，名称必须以<code>bak_</code>开头。中间表和备份表定期清理。</li>\n<li><strong>【强制】</strong>对于超过100W行的大表进行<code>alter table</code>，必须经过DBA审核，并在业务低峰期执行。因为<code>alter table</code>会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li>\n</ol>\n<h3 id=\"2-1-3-列数据类型优化\"><a href=\"#2-1-3-列数据类型优化\" class=\"headerlink\" title=\"2.1.3 列数据类型优化\"></a>2.1.3 列数据类型优化</h3><ol>\n<li><strong>【建议】</strong>表中的自增列（<code>auto_increment</code>属性），推荐使用<code>bigint</code>类型。因为无符号<code>int</code>存储范围为<code>-2147483648~2147483647</code>（大约21亿左右），溢出后会导致报错。</li>\n<li><strong>【建议】</strong>业务中选择性很少的状态<code>status</code>、类型<code>type</code>等字段推荐使用<code>tinytint</code>或者<code>smallint</code>类型节省存储空间。</li>\n<li><strong>【建议】</strong>业务中IP地址字段推荐使用<code>int</code>类型，不推荐用<code>char(15)</code>。因为<code>int</code>只占4字节，可以用如下函数相互转换，而<code>char(15)</code>占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：<code>select inet_aton(&#39;192.168.2.12&#39;); select inet_ntoa(3232236044);</code> PHP: <code>ip2long(‘192.168.2.12’); long2ip(3530427185);</code></li>\n<li><strong>【建议】</strong>不推荐使用<code>enum</code>，<code>set</code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用<code>tinyint</code>或<code>smallint</code>。</li>\n<li><strong>【建议】</strong>不推荐使用<code>blob</code>，<code>text</code>等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在<code>overflow-page</code>里。不幸的是在<code>compact</code>行格式下，原始<code>page</code>和<code>overflow-page</code>都会加载。</li>\n<li><strong>【建议】</strong>存储金钱的字段，建议用<code>int</code>，程序端乘以100和除以100进行存取。因为<code>int</code>占用4字节，而<code>double</code>占用8字节，空间浪费。</li>\n<li><strong>【建议】</strong>文本数据尽量用<code>varchar</code>存储。因为<code>varchar</code>是变长存储，比<code>char</code>更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为<code>mediumtext</code>字段。而<code>text</code>在utf8字符集下最多存21844个字符，<code>mediumtext</code>最多存2^24&#x2F;3个字符，<code>longtext</code>最多存2^32个字符。一般建议用<code>varchar</code>类型，字符数不要超过2700。</li>\n<li><strong>【建议】</strong>时间类型尽量选取<code>timestamp</code>。因为<code>datetime</code>占用8字节，<code>timestamp</code>仅占用4字节，但是范围为<code>1970-01-01 00:00:01</code>到<code>2038-01-01 00:00:00</code>。更为高阶的方法，选用<code>int</code>来存储时间，使用SQL函数<code>unix_timestamp()</code>和<code>from_unixtime()</code>来进行转换。</li>\n</ol>\n<p>详细存储大小参考原文：<a href=\"https://blog.csdn.net/HXNLYW/article/details/100104768\">https://blog.csdn.net/HXNLYW/article/details/100104768</a></p>\n<h4 id=\"整数型数据类型\"><a href=\"#整数型数据类型\" class=\"headerlink\" title=\"整数型数据类型\"></a>整数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TINYINT</td>\n<td align=\"center\">很小的正数（一般用于boolean存储）</td>\n<td align=\"center\">1个字节</td>\n<td align=\"center\">-128<del>127<br />unsigned：0</del>255</td>\n</tr>\n<tr>\n<td align=\"center\">SMALLINT</td>\n<td align=\"center\">小正数</td>\n<td align=\"center\">2个字节</td>\n<td align=\"center\">-32768<del>32767<br />unsigned：0</del>65535</td>\n</tr>\n<tr>\n<td align=\"center\">MEDIUMINT</td>\n<td align=\"center\">中等大小的正数</td>\n<td align=\"center\">3个字节</td>\n<td align=\"center\">-2^23 ~2^23-1<br/>unsigned: 2^24 -1</td>\n</tr>\n<tr>\n<td align=\"center\">INT(INTEGER)</td>\n<td align=\"center\">普通大小的正数</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">-2^31 ~2^31-1<br />unsigned: 2^32 -1</td>\n</tr>\n<tr>\n<td align=\"center\">BIGINT</td>\n<td align=\"center\">大正数(一般用于主键)</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">-2^63 ~2^63-1<br/>unsigned: 2^64 -1</td>\n</tr>\n</tbody></table>\n<h4 id=\"小数型数据类型\"><a href=\"#小数型数据类型\" class=\"headerlink\" title=\"小数型数据类型\"></a>小数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">FLOAT(M,N)</td>\n<td align=\"center\">M表示总共位数，N表示小数位数（单精度浮点数）</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">±1.175494351E – 38</td>\n</tr>\n<tr>\n<td align=\"center\">DOUBLE(M,N)</td>\n<td align=\"center\">双精度浮点数</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">±2.2250738585072014E – 308</td>\n</tr>\n<tr>\n<td align=\"center\">DECIMAL(M,D)</td>\n<td align=\"center\">压缩的“严格”定点数</td>\n<td align=\"center\">M+2个字节</td>\n<td align=\"center\">可变；其值的范围依赖于M 和D</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串数据类型\"><a href=\"#字符串数据类型\" class=\"headerlink\" title=\"字符串数据类型\"></a>字符串数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CHAR(N)</td>\n<td align=\"center\">固定长度</td>\n<td align=\"center\">N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2）</td>\n<td align=\"center\">0~255字符</td>\n</tr>\n<tr>\n<td align=\"center\">VARCHAR(N)</td>\n<td align=\"center\">可变长度</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">TEXT</td>\n<td align=\"center\">文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">LONGTEXT</td>\n<td align=\"center\">长文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~2^32-1字节</td>\n</tr>\n</tbody></table>\n<h4 id=\"日期数据类型\"><a href=\"#日期数据类型\" class=\"headerlink\" title=\"日期数据类型\"></a>日期数据类型</h4><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储大小</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DATE</td>\n<td>存储日期值(yyyy-MM-dd)</td>\n<td>3个字节</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>存储时分秒(HH:mm:ss)</td>\n<td>3个字节</td>\n<td>00:00:00~23:59:59</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>存储日期+时间(yyyy-MM-dd HH:mm:ss)</td>\n<td>8个字节</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss)</td>\n<td>4个字节</td>\n<td>1970-01-01 00:00:01~2038-01-19 03:14:07</td>\n</tr>\n</tbody></table>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><blockquote>\n<p> UTF-8   ： 一个英文&#x2F;数字字符占1个字节，一个中文（含繁体）字符占3个字节。<br>Unicode： 一个英文&#x2F;数字字符占2个字节，一个中文（含繁体）字符占2个字节。<br>符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。</p>\n</blockquote>\n<blockquote>\n<p>char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。<br>varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。</p>\n<p>1）char的存取速度优于varchar<br>2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间<br>   varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间<br>3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。</p>\n</blockquote>\n<h3 id=\"2-1-4-索引设计\"><a href=\"#2-1-4-索引设计\" class=\"headerlink\" title=\"2.1.4 索引设计\"></a>2.1.4 索引设计</h3><ol>\n<li><strong>【强制】</strong>InnoDB表必须主键为<code>id int/bigint auto_increment</code>,且主键值禁止被更新。</li>\n<li><strong>【建议】</strong>主键的名称以“<code>pk_</code>”开头，唯一键以“<code>uk_</code>”或“<code>uq_</code>”开头，普通索引以“<code>idx_</code>”开头，一律使用小写格式，以表名&#x2F;字段的名称或缩写作为后缀。</li>\n<li><strong>【强制】</strong>InnoDB和MyISAM存储引擎表，索引类型必须为<code>BTREE</code>；MEMORY表可以根据需要选择<code>HASH</code>或者<code>BTREE</code>类型索引。</li>\n<li><strong>【强制】</strong>单个索引中每个索引记录的长度不能超过64KB。</li>\n<li><strong>【建议】</strong>单个表上的索引个数不能超过7个。</li>\n<li><strong>【建议】</strong>在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列<code>userid</code>的区分度可由<code>select count(distinct userid)</code>计算出来。</li>\n<li><strong>【建议】</strong>在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</li>\n<li><strong>【建议】</strong>建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在<code>key(a,b)</code>，则<code>key(a)</code>为冗余索引，需要删除。</li>\n</ol>\n<h3 id=\"2-1-5-分库分表、分区表\"><a href=\"#2-1-5-分库分表、分区表\" class=\"headerlink\" title=\"2.1.5 分库分表、分区表\"></a>2.1.5 分库分表、分区表</h3><ol>\n<li><strong>【强制】</strong>分区表的分区字段（<code>partition-key</code>）必须有索引，或者是组合索引的首列。</li>\n<li><strong>【强制】</strong>单个分区表中的分区（包括子分区）个数不能超过1024。</li>\n<li><strong>【强制】</strong>上线前RD或者DBA必须指定分区表的创建、清理策略。</li>\n<li><strong>【强制】</strong>访问分区表的SQL必须包含分区键。</li>\n<li><strong>【建议】</strong>单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</li>\n<li><strong>【强制】</strong>对于分区表执行<code>alter table</code>操作，必须在业务低峰期执行。</li>\n<li><strong>【强制】</strong>采用分库策略的，库的数量不能超过1024</li>\n<li><strong>【强制】</strong>采用分表策略的，表的数量不能超过4096</li>\n<li><strong>【建议】</strong>单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</li>\n<li><strong>【建议】</strong>水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li>\n</ol>\n<h3 id=\"2-1-6-字符集\"><a href=\"#2-1-6-字符集\" class=\"headerlink\" title=\"2.1.6 字符集\"></a>2.1.6 字符集</h3><ol>\n<li><strong>【强制】</strong>数据库本身库、表、列所有字符集必须保持一致，为<code>utf8</code>或<code>utf8mb4</code>。</li>\n<li><strong>【强制】</strong>前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为<code>utf8</code>。</li>\n</ol>\n<h3 id=\"2-1-7-程序层DAO设计建议\"><a href=\"#2-1-7-程序层DAO设计建议\" class=\"headerlink\" title=\"2.1.7 程序层DAO设计建议\"></a>2.1.7 程序层DAO设计建议</h3><ol>\n<li><strong>【建议】</strong>新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li>\n<li><strong>【建议】</strong>前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li>\n<li><strong>【建议】</strong>前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</li>\n<li><strong>【建议】</strong>对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li>\n<li><strong>【建议】</strong>对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</li>\n<li><strong>【建议】</strong>在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li>\n<li><strong>【建议】</strong>多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</li>\n<li><strong>【建议】</strong>业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li>\n<li><strong>【建议】</strong>对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</li>\n</ol>\n<h3 id=\"2-1-8-一个规范的建表语句示例\"><a href=\"#2-1-8-一个规范的建表语句示例\" class=\"headerlink\" title=\"2.1.8 一个规范的建表语句示例\"></a>2.1.8 一个规范的建表语句示例</h3><p>一个较为规范的建表语句为：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">CREATE</span> TABLE <span class=\"hljs-keyword\">user</span> (<br>  <span class=\"hljs-symbol\">`id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,<br>  <span class=\"hljs-symbol\">`user_id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户id’<br>  <span class=\"hljs-symbol\">`username`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;真实姓名&#x27;</span>,<br>  <span class=\"hljs-symbol\">`email`</span> varchar(<span class=\"hljs-number\">30</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户邮箱’,<br>  <span class=\"hljs-symbol\">`nickname`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;昵称&#x27;</span>,<br>  <span class=\"hljs-symbol\">`avatar`</span> int(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;头像&#x27;</span>,<br>  <span class=\"hljs-symbol\">`birthday`</span> date <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;生日&#x27;</span>,<br>  <span class=\"hljs-symbol\">`sex`</span> tinyint(<span class=\"hljs-number\">4</span>) DEFAULT <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;性别&#x27;</span>,<br>  <span class=\"hljs-symbol\">`short_introduce`</span> varchar(<span class=\"hljs-number\">150</span>) DEFAULT <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;一句话介绍自己，最多50个汉字&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_resume`</span> varchar(<span class=\"hljs-number\">300</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户提交的简历存放地址&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_register_ip`</span> int <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户注册时的源ip’,<br>  <span class=\"hljs-symbol\">`create_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户记录创建的时间’,<br>  <span class=\"hljs-symbol\">`update_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料修改的时间’,<br>  <span class=\"hljs-symbol\">`user_review_status`</span> tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料审核状态，<span class=\"hljs-number\">1</span>为通过，<span class=\"hljs-number\">2</span>为审核中，<span class=\"hljs-number\">3</span>为未通过，<span class=\"hljs-number\">4</span>为还未提交审核’,<br>  <span class=\"hljs-keyword\">PRIMARY</span> <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-symbol\">`id`</span>),<br>  <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_user_id`</span> (<span class=\"hljs-symbol\">`user_id`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_username`</span>(<span class=\"hljs-symbol\">`username`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_create_time`</span>(<span class=\"hljs-symbol\">`create_time`</span>,<span class=\"hljs-symbol\">`user_review_status`</span>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class=\"hljs-string\">&#x27;网站用户基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-SQL编写\"><a href=\"#2-2-SQL编写\" class=\"headerlink\" title=\"2.2 SQL编写\"></a>2.2 SQL编写</h2><h3 id=\"2-2-1-DML语句\"><a href=\"#2-2-1-DML语句\" class=\"headerlink\" title=\"2.2.1 DML语句\"></a>2.2.1 DML语句</h3><ol>\n<li><strong>【强制】</strong>SELECT语句必须指定具体字段名称，禁止写成<code>*</code>。因为<code>select *</code>会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</li>\n<li><strong>【强制】</strong>insert语句指定具体字段名称，不要写成<code>insert into t1 values(…)</code>，道理同上。</li>\n<li><strong>【建议】</strong><code>insert into…values(XX),(XX),(XX)…</code>。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。</li>\n<li><strong>【建议】</strong>SELECT语句不要使用<code>UNION</code>，推荐使用<code>UNION ALL</code>，并且<code>UNION</code>子句个数限制在5个以内。因为<code>union all</code>不需要去重，节省数据库资源，提高性能。</li>\n<li><strong>【建议】</strong>in值列表限制在500以内。例如<code>select… where userid in(….500个以内…)</code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li>\n<li><strong>【建议】</strong>事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</li>\n<li><strong>【强制】</strong>事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</li>\n<li><strong>【强制】</strong>写入和事务发往主库，只读SQL发往从库。</li>\n<li><strong>【强制】</strong>除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</li>\n<li><strong>【强制】</strong>生产环境禁止使用<code>hint</code>，如<code>sql_no_cache</code>，<code>force index</code>，<code>ignore key</code>，<code>straight join</code>等。因为<code>hint</code>是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</li>\n<li><strong>【强制】</strong>where条件里等号左右字段类型必须一致，否则无法利用索引。</li>\n<li><strong>【建议】</strong><code>SELECT|UPDATE|DELETE|REPLACE</code>要有WHERE子句，且WHERE子句的条件必需使用索引查找。</li>\n<li><strong>【强制】</strong>生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</li>\n<li><strong>【强制】</strong>WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</li>\n<li><strong>【建议】</strong>索引列不要使用函数或表达式，否则无法利用索引。如<code>where length(name)=&#39;Admin&#39;</code>或<code>where user_id+2=10023</code>。</li>\n<li><strong>【建议】</strong>减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如<code>where a=1 or b=2</code>优化为<code>where a=1… union …where b=2, key(a),key(b)</code>。</li>\n<li><strong>【建议】</strong>分页查询，当limit起点较高时，可先用过滤条件进行过滤。如<code>select a,b,c from t1 limit 10000,20;</code>优化为: <code>select a,b,c from t1 where id&gt;10000 limit 20;</code>。</li>\n</ol>\n<h3 id=\"2-2-2-多表连接\"><a href=\"#2-2-2-多表连接\" class=\"headerlink\" title=\"2.2.2 多表连接\"></a>2.2.2 多表连接</h3><ol>\n<li><strong>【强制】</strong>禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li>\n<li><strong>【强制】</strong>禁止在业务的更新类SQL语句中使用join，比如<code>update t1 join t2…</code>。</li>\n<li><strong>【建议】</strong>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</li>\n<li><strong>【建议】</strong>线上环境，多表join不要超过3个表。</li>\n<li><strong>【建议】</strong>多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如<code>select a from db1.table1 alias1 where …</code>。</li>\n<li><strong>【建议】</strong>在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</li>\n</ol>\n<h3 id=\"2-2-3-事务\"><a href=\"#2-2-3-事务\" class=\"headerlink\" title=\"2.2.3 事务\"></a>2.2.3 事务</h3><ol>\n<li><strong>【建议】</strong>事务中<code>INSERT|UPDATE|DELETE|REPLACE</code>语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</li>\n<li><strong>【建议】</strong>批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</li>\n<li><strong>【建议】</strong>对于有<code>auto_increment</code>属性字段的表的插入操作，并发需要控制在200以内。</li>\n<li><strong>【强制】</strong>程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为<code>repeatable-read</code>。</li>\n<li><strong>【建议】</strong>事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</li>\n<li><strong>【建议】</strong>事务里更新语句尽量基于主键或<code>unique key</code>，如<code>update … where id=XX</code>; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li>\n<li><strong>【建议】</strong>尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</li>\n<li><strong>【建议】</strong>对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</li>\n</ol>\n<h3 id=\"2-2-4-排序和分组\"><a href=\"#2-2-4-排序和分组\" class=\"headerlink\" title=\"2.2.4 排序和分组\"></a>2.2.4 排序和分组</h3><ol>\n<li><strong>【建议】</strong>减少使用<code>order by</code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>order by</code>、<code>group by</code>、<code>distinct</code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li>\n<li><strong>【建议】</strong><code>order by</code>、<code>group by</code>、<code>distinct</code>这些SQL尽量利用索引直接检索出排序好的数据。如<code>where a=1 order by</code>可以利用<code>key(a,b)</code>。</li>\n<li><strong>【建议】</strong>包含了<code>order by</code>、<code>group by</code>、<code>distinct</code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li>\n</ol>\n<h3 id=\"2-2-5-线上禁止使用的SQL语句\"><a href=\"#2-2-5-线上禁止使用的SQL语句\" class=\"headerlink\" title=\"2.2.5 线上禁止使用的SQL语句\"></a>2.2.5 线上禁止使用的SQL语句</h3><ol>\n<li><strong>【高危】</strong>禁用<code>update|delete t1 … where a=XX limit XX;</code> 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上<code>order by PK</code>。</li>\n<li><strong>【高危】</strong>禁止使用关联子查询，如<code>update t1 set … where name in(select name from user where…);</code>效率极其低下。</li>\n<li><strong>【强制】</strong>禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li>\n<li><strong>【强制】</strong>禁用<code>insert into …on duplicate key update…</code>在高并发环境下，会造成主从不一致。</li>\n<li><strong>【强制】</strong>禁止联表更新语句，如<code>update t1,t2 where t1.id=t2.id…</code>。</li>\n</ol>\n"},{"title":"Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错","_content":"# Mysql 查询天、周，月，季度、年的数据\n\n**今天**\n\n```mysql\nselect * from 表名 where to_days(时间字段名) = to_days(now());\n```\n\n**昨天**\n\n```mysql\nSELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) <= 1\n```\n\n**近7天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(时间字段名)\n```\n\n**近30天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) <= date(时间字段名)\n```\n\n**本月**\n\n```mysql\nSELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )\n```\n\n**上一月**\n\n```mysql\nSELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( 时间字段名, '%Y%m' ) ) =1\n```\n\n**查询本季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());\n```\n\n**查询上季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));\n```\n\n**查询本年数据**\n\n```mysql\nselect * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());\n```\n\n**查询上年数据**\n\n```mysql\nselect * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));\n```\n\n**查询当前这周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now());\n```\n\n**查询上周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now())-1;\n```\n\n**查询上个月的数据**\n\n```mysql\nselect name,submittime from enterprise where date_format(submittime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')\n\nselect * from user where DATE_FORMAT(pudate,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m') ; \n\nselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = WEEKOFYEAR(now()) \n\nselect * from user where MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where YEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where pudate between  上月最后一天  and 下月第一天 \n```\n\n**查询当前月份的数据**\n\n```mysql\nselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(now(),'%Y-%m')\n```\n\n**查询距离当前现在6个月的数据**\n\n```mysql\nselect name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();\n```\n\n[参考原文](https://www.cnblogs.com/benefitworld/p/5832897.html)\n\n","source":"_posts/数据库/Mysql/Mysql 查询天、周，月，季度、年的数据.md","raw":"---\ntitle: Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错\ntags:\n  - Mysql\n  - 数据库\ncategories:\n  - 数据库\n---\n# Mysql 查询天、周，月，季度、年的数据\n\n**今天**\n\n```mysql\nselect * from 表名 where to_days(时间字段名) = to_days(now());\n```\n\n**昨天**\n\n```mysql\nSELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) <= 1\n```\n\n**近7天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(时间字段名)\n```\n\n**近30天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) <= date(时间字段名)\n```\n\n**本月**\n\n```mysql\nSELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )\n```\n\n**上一月**\n\n```mysql\nSELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( 时间字段名, '%Y%m' ) ) =1\n```\n\n**查询本季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());\n```\n\n**查询上季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));\n```\n\n**查询本年数据**\n\n```mysql\nselect * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());\n```\n\n**查询上年数据**\n\n```mysql\nselect * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));\n```\n\n**查询当前这周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now());\n```\n\n**查询上周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now())-1;\n```\n\n**查询上个月的数据**\n\n```mysql\nselect name,submittime from enterprise where date_format(submittime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')\n\nselect * from user where DATE_FORMAT(pudate,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m') ; \n\nselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = WEEKOFYEAR(now()) \n\nselect * from user where MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where YEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where pudate between  上月最后一天  and 下月第一天 \n```\n\n**查询当前月份的数据**\n\n```mysql\nselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(now(),'%Y-%m')\n```\n\n**查询距离当前现在6个月的数据**\n\n```mysql\nselect name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();\n```\n\n[参考原文](https://www.cnblogs.com/benefitworld/p/5832897.html)\n\n","slug":"数据库/Mysql/Mysql 查询天、周，月，季度、年的数据","published":1,"date":"2022-11-28T10:05:56.877Z","updated":"2022-11-28T10:57:23.998Z","_id":"clb0oel8f00156oia0fok4s5r","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql-查询天、周，月，季度、年的数据\"><a href=\"#Mysql-查询天、周，月，季度、年的数据\" class=\"headerlink\" title=\"Mysql 查询天、周，月，季度、年的数据\"></a>Mysql 查询天、周，月，季度、年的数据</h1><p><strong>今天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from 表名 where to_days(时间字段名) = to_days(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>昨天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1<br></code></pre></td></tr></table></figure>\n\n<p><strong>近7天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>近30天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>本月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, &#x27;%Y%m&#x27; ) = DATE_FORMAT( CURDATE( ) , &#x27;%Y%m&#x27; )<br></code></pre></td></tr></table></figure>\n\n<p><strong>上一月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &#x27;%Y%m&#x27; ) , date_format( 时间字段名, &#x27;%Y%m&#x27; ) ) =1<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前这周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now())-1;<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),&#x27;%Y-%m&#x27;)<br><br>select * from user where DATE_FORMAT(pudate,&#x27;%Y%m&#x27;) = DATE_FORMAT(CURDATE(),&#x27;%Y%m&#x27;) ; <br><br>select * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = WEEKOFYEAR(now()) <br><br>select * from user where MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where YEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where pudate between  上月最后一天  and 下月第一天 <br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前月份的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise   where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(now(),&#x27;%Y-%m&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询距离当前现在6个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/benefitworld/p/5832897.html\">参考原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql-查询天、周，月，季度、年的数据\"><a href=\"#Mysql-查询天、周，月，季度、年的数据\" class=\"headerlink\" title=\"Mysql 查询天、周，月，季度、年的数据\"></a>Mysql 查询天、周，月，季度、年的数据</h1><p><strong>今天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from 表名 where to_days(时间字段名) = to_days(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>昨天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1<br></code></pre></td></tr></table></figure>\n\n<p><strong>近7天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>近30天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>本月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, &#x27;%Y%m&#x27; ) = DATE_FORMAT( CURDATE( ) , &#x27;%Y%m&#x27; )<br></code></pre></td></tr></table></figure>\n\n<p><strong>上一月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &#x27;%Y%m&#x27; ) , date_format( 时间字段名, &#x27;%Y%m&#x27; ) ) =1<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前这周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now())-1;<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),&#x27;%Y-%m&#x27;)<br><br>select * from user where DATE_FORMAT(pudate,&#x27;%Y%m&#x27;) = DATE_FORMAT(CURDATE(),&#x27;%Y%m&#x27;) ; <br><br>select * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = WEEKOFYEAR(now()) <br><br>select * from user where MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where YEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where pudate between  上月最后一天  and 下月第一天 <br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前月份的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise   where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(now(),&#x27;%Y-%m&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询距离当前现在6个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/benefitworld/p/5832897.html\">参考原文</a></p>\n"},{"title":"Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错","_content":"\n> 近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。\n\n原因分析：MySQL5.7版本默认设置了 mysql sql_mode = only_full_group_by 属性，导致报错。\n\n> 其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode=only_full_group_by的数据库,在使用group by时就会报错。\n>\n> 测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。\n>\n> 一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了\n>\n> only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。\n\n**1、查看sql_mode**\n\n```mysql\nSELECT @@sql_mode;\n```\n\n查询出来的值为：\n\n```mysql\nONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**2、去掉ONLY_FULL_GROUP_BY，重新设置值。**\n\n```mysq\nSET @@global.sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n**3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行**\n\n```mysq\nSET sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n### 以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\n\n**找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:**\n\n```\nsql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:**\n\n```shell\nservice mysqld restart\n```\n\n**刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:**\n\n```mysql\nSTRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**成功**\n\n","source":"_posts/数据库/Mysql/Mysql5.7及以上版本ONLY_FULL_GROUP_BY报错.md","raw":"---\ntitle: Mysql5.7及以上版本 ONLY_FULL_GROUP_BY报错\ntags:\n  - Mysql\n  - 数据库\ncategories:\n  - 数据库\n---\n\n> 近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。\n\n原因分析：MySQL5.7版本默认设置了 mysql sql_mode = only_full_group_by 属性，导致报错。\n\n> 其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode=only_full_group_by的数据库,在使用group by时就会报错。\n>\n> 测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。\n>\n> 一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了\n>\n> only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。\n\n**1、查看sql_mode**\n\n```mysql\nSELECT @@sql_mode;\n```\n\n查询出来的值为：\n\n```mysql\nONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**2、去掉ONLY_FULL_GROUP_BY，重新设置值。**\n\n```mysq\nSET @@global.sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n**3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行**\n\n```mysq\nSET sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n### 以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\n\n**找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:**\n\n```\nsql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:**\n\n```shell\nservice mysqld restart\n```\n\n**刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:**\n\n```mysql\nSTRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**成功**\n\n","slug":"数据库/Mysql/Mysql5.7及以上版本ONLY_FULL_GROUP_BY报错","published":1,"date":"2022-11-28T10:04:36.042Z","updated":"2022-11-28T10:57:23.997Z","_id":"clb0oel8f00166oia1z55fcd4","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。</p>\n</blockquote>\n<p>原因分析：MySQL5.7版本默认设置了 mysql sql_mode &#x3D; only_full_group_by 属性，导致报错。</p>\n<blockquote>\n<p>其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode&#x3D;only_full_group_by的数据库,在使用group by时就会报错。</p>\n<p>测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。</p>\n<p>一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了</p>\n<p>only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。</p>\n</blockquote>\n<p><strong>1、查看sql_mode</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT @@sql_mode;<br></code></pre></td></tr></table></figure>\n\n<p>查询出来的值为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、去掉ONLY_FULL_GROUP_BY，重新设置值。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET @@global.sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"><a href=\"#以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\" class=\"headerlink\" title=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"></a>以上方法mysql数据库重启后依然无效，下列方式重启后依然生效</h3><p><strong>找到MySQL的配置文件,在linux系统上&#x2F;etc&#x2F;my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">sql_mode</span> = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">service mysqld restart<br></code></pre></td></tr></table></figure>\n\n<p><strong>刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>成功</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。</p>\n</blockquote>\n<p>原因分析：MySQL5.7版本默认设置了 mysql sql_mode &#x3D; only_full_group_by 属性，导致报错。</p>\n<blockquote>\n<p>其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode&#x3D;only_full_group_by的数据库,在使用group by时就会报错。</p>\n<p>测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。</p>\n<p>一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了</p>\n<p>only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。</p>\n</blockquote>\n<p><strong>1、查看sql_mode</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT @@sql_mode;<br></code></pre></td></tr></table></figure>\n\n<p>查询出来的值为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、去掉ONLY_FULL_GROUP_BY，重新设置值。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET @@global.sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"><a href=\"#以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\" class=\"headerlink\" title=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"></a>以上方法mysql数据库重启后依然无效，下列方式重启后依然生效</h3><p><strong>找到MySQL的配置文件,在linux系统上&#x2F;etc&#x2F;my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">sql_mode</span> = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">service mysqld restart<br></code></pre></td></tr></table></figure>\n\n<p><strong>刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>成功</strong></p>\n"},{"title":"MySQL数据和索引占用空间查询","_content":"# MySQL数据和索引占用空间查询\n\n## 查询所有数据库占用磁盘空间大小的SQL语句\n\n```mysql\nSELECT\n\ttable_schema, -- 数据库名称\n\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC;\n```\n\n## 查询单个库中所有表磁盘占用大小的SQL语句\n\n```mysql\nSELECT\n\ttable_name, -- 表名称\n\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nWHERE\n\ttable_schema = '数据库名称' \nORDER BY\n\tdata_length DESC;\n```\n\n","source":"_posts/数据库/Mysql/MySQL数据和索引占用空间查询.md","raw":"---\ntitle: MySQL数据和索引占用空间查询\ntags:\n  - Mysql\n  - 数据库\ncategories:\n  - 数据库\n---\n# MySQL数据和索引占用空间查询\n\n## 查询所有数据库占用磁盘空间大小的SQL语句\n\n```mysql\nSELECT\n\ttable_schema, -- 数据库名称\n\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC;\n```\n\n## 查询单个库中所有表磁盘占用大小的SQL语句\n\n```mysql\nSELECT\n\ttable_name, -- 表名称\n\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nWHERE\n\ttable_schema = '数据库名称' \nORDER BY\n\tdata_length DESC;\n```\n\n","slug":"数据库/Mysql/MySQL数据和索引占用空间查询","published":1,"date":"2022-11-28T09:57:13.912Z","updated":"2022-11-28T09:59:42.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb0oel8g00186oia8n6dh4yd","content":"<h1 id=\"MySQL数据和索引占用空间查询\"><a href=\"#MySQL数据和索引占用空间查询\" class=\"headerlink\" title=\"MySQL数据和索引占用空间查询\"></a>MySQL数据和索引占用空间查询</h1><h2 id=\"查询所有数据库占用磁盘空间大小的SQL语句\"><a href=\"#查询所有数据库占用磁盘空间大小的SQL语句\" class=\"headerlink\" title=\"查询所有数据库占用磁盘空间大小的SQL语句\"></a>查询所有数据库占用磁盘空间大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_schema, -- 数据库名称<br>\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>GROUP BY<br>\ttable_schema <br>ORDER BY<br>\tsum( data_length ) DESC;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查询单个库中所有表磁盘占用大小的SQL语句\"><a href=\"#查询单个库中所有表磁盘占用大小的SQL语句\" class=\"headerlink\" title=\"查询单个库中所有表磁盘占用大小的SQL语句\"></a>查询单个库中所有表磁盘占用大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_name, -- 表名称<br>\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>WHERE<br>\ttable_schema = &#x27;数据库名称&#x27; <br>ORDER BY<br>\tdata_length DESC;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL数据和索引占用空间查询\"><a href=\"#MySQL数据和索引占用空间查询\" class=\"headerlink\" title=\"MySQL数据和索引占用空间查询\"></a>MySQL数据和索引占用空间查询</h1><h2 id=\"查询所有数据库占用磁盘空间大小的SQL语句\"><a href=\"#查询所有数据库占用磁盘空间大小的SQL语句\" class=\"headerlink\" title=\"查询所有数据库占用磁盘空间大小的SQL语句\"></a>查询所有数据库占用磁盘空间大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_schema, -- 数据库名称<br>\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>GROUP BY<br>\ttable_schema <br>ORDER BY<br>\tsum( data_length ) DESC;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查询单个库中所有表磁盘占用大小的SQL语句\"><a href=\"#查询单个库中所有表磁盘占用大小的SQL语句\" class=\"headerlink\" title=\"查询单个库中所有表磁盘占用大小的SQL语句\"></a>查询单个库中所有表磁盘占用大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_name, -- 表名称<br>\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>WHERE<br>\ttable_schema = &#x27;数据库名称&#x27; <br>ORDER BY<br>\tdata_length DESC;<br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clatd5i1g0001ryiaelkr34w4","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5ieh0017ryia0lhqfxaq"},{"post_id":"clatd5i160000ryiaeqtp3qds","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5ieh0018ryiafqvd0znx"},{"post_id":"clatd5i1s000wryia138m5zxw","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iei0019ryiafj7o84ij"},{"post_id":"clatd5i1t000yryia313qftj5","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001aryiahdd9atm4"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001bryia9i7y0vyt"},{"post_id":"clatd5i1k0005ryia0anwhmwa","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001cryiageusgoba"},{"post_id":"clatd5i1k0004ryiad5q060oj","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iel001dryia0u6u9dau"},{"post_id":"clatd5i1r000vryia1fguhxko","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iel001eryia2fieda6v"},{"post_id":"clates4c90000fiiadchxbgky","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clates4pc0004fiiaad76azdr"},{"post_id":"clawrzu8b0000u42bcbtsgk30","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626p0000b92b7zbh6zcm"},{"post_id":"clawrzuaa0001u42bh3ap7g4f","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626r0001b92b5rcag0lu"},{"post_id":"clawrzuab0002u42bfuxx6olf","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626r0002b92bem28b7s1"},{"post_id":"clawrzuac0003u42b71f9czva","category_id":"claktn8ov001t19ia2fh650b6","_id":"claws626t0003b92baljha9jo"},{"post_id":"clawrzuah0004u42b2ba7guby","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626x0008b92bf2pp4663"},{"post_id":"clawrzuai0005u42b6wis8ywv","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626x0009b92bcwn3fm0x"},{"post_id":"claws4ivo00035u2bajkceyic","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626x000ab92b4sd119s7"},{"post_id":"clawrzuaj0007u42b6duf1b3v","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626z000bb92bc8wqay3f"},{"post_id":"clawrzuaj0006u42bhq5l6t2b","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626z000cb92b140jbvam"},{"post_id":"claws4ivq00065u2b0mk1fa15","category_id":"claktn92i002a19ia8xah0dmq","_id":"claws626z000db92ba7skfx02"},{"post_id":"clay6mz4p0000bu2bg04g7zl2","category_id":"claktn9nk002k19ia8cd0fpx2","_id":"clay6mzcq0002bu2bfc1g0aqa"},{"post_id":"clay6mz4s0001bu2b5siq4346","category_id":"claktn9nk002k19ia8cd0fpx2","_id":"clay6mzcq0003bu2bantigjr6"},{"post_id":"clay6w01p0009sx2bdzrwaajf","category_id":"claktn8p6002819iagynuahf6","_id":"clay6w0sm000osx2b9tvpgqbi"},{"post_id":"clay6w01q000bsx2b0lt5dr4t","category_id":"claktn8p6002819iagynuahf6","_id":"clay6w0sn000psx2b2wdg0303"},{"post_id":"clay6rehv0000mw2b8nsya8rf","category_id":"claktn8ov001t19ia2fh650b6","_id":"clay6w0sn000qsx2b67eedggp"},{"post_id":"clay6w01f0000sx2bcso9ahf3","category_id":"clay6w0sp000rsx2bgjyrbwha","_id":"clay6w0sq000ssx2balc670ea"},{"post_id":"clay6yjzd000tsx2b42fo9o0a","category_id":"clay6ykcj000usx2b70zsccj8","_id":"clay6ykck000vsx2b5j338cnb"},{"post_id":"clay7dbf000002r2bdxk55eyo","category_id":"clay7dca800152r2b8hlkdgcr","_id":"clay7dcab00172r2b2fci5jdl"},{"post_id":"clay7dbfl000w2r2b1cnueniu","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcad00192r2bfx8veblr"},{"post_id":"clay7dbfd00072r2bdjzt2hjh","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcae001b2r2b1l717gu6"},{"post_id":"clay7dbfb00042r2b5as8dahk","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcae001c2r2bdkkn4ykk"},{"post_id":"clay7dbfl000v2r2bhwnrhgcn","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcaf001e2r2b6jpdbbdw"},{"post_id":"clay7dbff000a2r2bfyvleifr","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcaf001f2r2bcg2k7mnt"},{"post_id":"clay7dbfe00082r2b42vdclqz","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcaf001g2r2bhlgn44qp"},{"post_id":"clay7dbfm000y2r2bepv6bglu","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcaf001h2r2b37ti69v5"},{"post_id":"clay7dbfc00062r2b5g398mf9","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcaf001j2r2b1gp33bxk"},{"post_id":"clay7dbff000b2r2b7hjv2clm","category_id":"clay7dcaa00162r2b5okn5tpq","_id":"clay7dcag001k2r2b0ens05x8"},{"post_id":"clay7oz320000cn2b9j991xqb","category_id":"clay7ozx10003cn2b8t17cvz6","_id":"clay7ozx20004cn2b0w4j3mk0"},{"post_id":"clay7wrxd0007cn2b6os5cb8u","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clay7wsdp000ccn2b3zdc9s7o"},{"post_id":"clay7y4kd0000ij2b115q9p9n","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clay7y59s000cij2bbtsh9dum"},{"post_id":"clay7y4kp0006ij2bdlm05ere","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clay7y59u000dij2be0wk9bkq"},{"post_id":"clay7y4ko0005ij2bc37a5xz8","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clay7y59u000eij2b80s59h4h"},{"post_id":"clb0oel8g00186oia8n6dh4yd","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clb0oel8j001c6oiaefv48hj6"},{"post_id":"clb0oel7l00006oiaeadhbd2j","category_id":"claktn8ov001t19ia2fh650b6","_id":"clb0oem2p001f6oiah2ggd4ys"},{"post_id":"clb0oel8500086oia58od8onn","category_id":"claktn8p6002819iagynuahf6","_id":"clb0oem2q001g6oia52xleyhs"},{"post_id":"clb0oel8300056oiah1ib8ncc","category_id":"claktn8p6002819iagynuahf6","_id":"clb0oem2q001h6oiacjbe88ha"},{"post_id":"clb0oel7s00016oia3xfo5toy","category_id":"claktn8p6002819iagynuahf6","_id":"clb0oem2r001i6oiafxqqh81z"},{"post_id":"clb0oel87000c6oia0n1k8p6u","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clb0oem2s001j6oiae783ex1o"},{"post_id":"clb0oel8200036oia0y8afc2e","category_id":"claktn8p6002819iagynuahf6","_id":"clb0oem2s001k6oiaf95p2ksh"},{"post_id":"clb0oel8f00166oia1z55fcd4","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clb0oem2s001l6oia0p4qgw5q"},{"post_id":"clb0oel89000h6oiae51f7u88","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clb0oem2y001m6oia4pqs04sh"},{"post_id":"clb0oel85000a6oiagh3b40l7","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clb0oem2z001n6oiahs4j1c8a"},{"post_id":"clb0oel8300046oia0co7aljt","category_id":"claktn8p6002819iagynuahf6","_id":"clb0oem2z001o6oiagx265yd7"},{"post_id":"clb0oel88000e6oia9vm3gsak","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clb0oem30001p6oiad0j2f6g0"},{"post_id":"clb0oel8f00156oia0fok4s5r","category_id":"clay7wsdo000bcn2b04n73lxq","_id":"clb0oem30001q6oiahgnw0ds0"}],"PostTag":[{"post_id":"clatd5i160000ryiaeqtp3qds","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1m0008ryiacvq7g2mz"},{"post_id":"clatd5i160000ryiaeqtp3qds","tag_id":"clatd5i1l0006ryia5wjbh50n","_id":"clatd5i1n0009ryia0e6v3z3t"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1o000dryia889qeb3s"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1n000aryia7ge7dhqd","_id":"clatd5i1o000eryiagngra75q"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1n000bryia6jcb1ms4","_id":"clatd5i1o000gryia1wgc0gg6"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1p000kryiagvp68xdl"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000fryiabul7gulz","_id":"clatd5i1p000lryia9iqqedrq"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000hryiadwwze9gc","_id":"clatd5i1p000nryiabvr1hl26"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000iryiaesuqf25o","_id":"clatd5i1p000oryia87vadhmg"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1q000qryia25e71rx3"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1p000jryia2d6yd94z","_id":"clatd5i1q000rryia3s1ef67a"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1p000mryia9q434pho","_id":"clatd5i1q000sryia8pbl3n7o"},{"post_id":"clatd5i1k0005ryia0anwhmwa","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1q000tryia2j94c3dd"},{"post_id":"clatd5i1k0005ryia0anwhmwa","tag_id":"clatd5i1p000pryia34cs3u23","_id":"clatd5i1q000uryia15c8fmyp"},{"post_id":"clatd5i1r000vryia1fguhxko","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1u0010ryia7yzk5xry"},{"post_id":"clatd5i1r000vryia1fguhxko","tag_id":"clatd5i1t000xryiafkvp2obn","_id":"clatd5i1u0011ryiab2l510t4"},{"post_id":"clatd5i1s000wryia138m5zxw","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1v0013ryiabtwz6rb7"},{"post_id":"clatd5i1s000wryia138m5zxw","tag_id":"clatd5i1u000zryiahn581zn3","_id":"clatd5i1v0014ryia3a0dcslv"},{"post_id":"clatd5i1t000yryia313qftj5","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1v0015ryia8ddjgeqb"},{"post_id":"clatd5i1t000yryia313qftj5","tag_id":"clatd5i1u0012ryia8t2kf6w3","_id":"clatd5i1v0016ryiahx9cfh6o"},{"post_id":"clates4c90000fiiadchxbgky","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clates4cc0002fiia9lf3akf1"},{"post_id":"clates4c90000fiiadchxbgky","tag_id":"clates4cc0001fiiahbdrd214","_id":"clates4cc0003fiiab6sx3wdj"},{"post_id":"clawrzu8b0000u42bcbtsgk30","tag_id":"claws4ivg00005u2b0t08aljz","_id":"claws4ivn00025u2bh2v6ebxl"},{"post_id":"clawrzuaa0001u42bh3ap7g4f","tag_id":"claws4ivm00015u2b1456e5w1","_id":"claws4ivr00075u2b35c3c79k"},{"post_id":"clawrzuaa0001u42bh3ap7g4f","tag_id":"claws4ivp00045u2b7uy25h22","_id":"claws4ivr00085u2b4lvxek9w"},{"post_id":"clawrzuab0002u42bfuxx6olf","tag_id":"claws4ivq00055u2b2fsrf6l4","_id":"claws4ivs000a5u2b1lsd8crs"},{"post_id":"clawrzuac0003u42b71f9czva","tag_id":"claws4ivr00095u2bapu98r13","_id":"claws4ivt000d5u2bhi8754ci"},{"post_id":"clawrzuac0003u42b71f9czva","tag_id":"claws4ivs000b5u2b3qpp726m","_id":"claws4ivt000e5u2bhz587ink"},{"post_id":"clawrzuah0004u42b2ba7guby","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivu000g5u2beusnhg5e"},{"post_id":"clawrzuai0005u42b6wis8ywv","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivu000i5u2b46vfhnpe"},{"post_id":"claws4ivo00035u2bajkceyic","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivv000m5u2b24gvevyh"},{"post_id":"claws4ivo00035u2bajkceyic","tag_id":"claws4ivu000j5u2bfvukdht6","_id":"claws4ivv000n5u2b4gem0ism"},{"post_id":"claws4ivo00035u2bajkceyic","tag_id":"claws4ivv000k5u2bekht4rfx","_id":"claws4ivv000p5u2bapm4atib"},{"post_id":"clawrzuaj0007u42b6duf1b3v","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivv000q5u2bd5fohlzb"},{"post_id":"clawrzuaj0006u42bhq5l6t2b","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivw000s5u2bb0ga40ji"},{"post_id":"claws4ivq00065u2b0mk1fa15","tag_id":"claws4ivt000c5u2b39ba99h5","_id":"claws4ivw000u5u2b1xpah4t7"},{"post_id":"clay6rehv0000mw2b8nsya8rf","tag_id":"clay6w01g0001sx2b9vccgvbc","_id":"clay6w01n0003sx2b8sug9z23"},{"post_id":"clay6w01f0000sx2bcso9ahf3","tag_id":"clay6w01m0002sx2b3olwat0n","_id":"clay6w01o0006sx2bbgld586u"},{"post_id":"clay6w01f0000sx2bcso9ahf3","tag_id":"clay6w01n0004sx2b1fl9dicj","_id":"clay6w01o0007sx2bdsaa84k5"},{"post_id":"clay6mz4s0001bu2b5siq4346","tag_id":"clay6w01n0005sx2be7jdfuzr","_id":"clay6w01o0008sx2b95qfe2q7"},{"post_id":"clay6mz4p0000bu2bg04g7zl2","tag_id":"clay6w01n0005sx2be7jdfuzr","_id":"clay6w01q000asx2b1bul1ndb"},{"post_id":"clay6w01p0009sx2bdzrwaajf","tag_id":"clay6w01r000csx2b2xp297uz","_id":"clay6w01t000gsx2bc83j82a0"},{"post_id":"clay6w01p0009sx2bdzrwaajf","tag_id":"clay6w01r000dsx2b21627mn8","_id":"clay6w01t000hsx2b5d4zh0rf"},{"post_id":"clay6w01p0009sx2bdzrwaajf","tag_id":"clay6w01r000esx2bbbdj57h5","_id":"clay6w01t000jsx2bbic02csk"},{"post_id":"clay6w01q000bsx2b0lt5dr4t","tag_id":"clay6w01r000csx2b2xp297uz","_id":"clay6w01u000lsx2b7tu3g019"},{"post_id":"clay6w01q000bsx2b0lt5dr4t","tag_id":"clay6w01t000isx2b7yc9bvsq","_id":"clay6w01u000msx2bcofc3p2s"},{"post_id":"clay6w01q000bsx2b0lt5dr4t","tag_id":"clay6w01u000ksx2bht2adkxw","_id":"clay6w01u000nsx2b8vsw2hjp"},{"post_id":"clay6yjzd000tsx2b42fo9o0a","tag_id":"clay7048u000wsx2bdl5wc8c4","_id":"clay7048v000xsx2bdt5b0vsh"},{"post_id":"clay7dbf000002r2bdxk55eyo","tag_id":"clay7dbf200012r2b9reba8rh","_id":"clay7dbfb00032r2bhzhw9ofg"},{"post_id":"clay7dbff000a2r2bfyvleifr","tag_id":"clay7dbfc00052r2b6zt7ddyn","_id":"clay7dbfg000d2r2bcibw9y8u"},{"post_id":"clay7dbff000a2r2bfyvleifr","tag_id":"clay7dbfe00092r2bfcfm23pf","_id":"clay7dbfg000e2r2bcdck5jc2"},{"post_id":"clay7dbfb00042r2b5as8dahk","tag_id":"clay7dbfg000c2r2bgd5x9s5d","_id":"clay7dbfi000j2r2b14thf2ai"},{"post_id":"clay7dbfb00042r2b5as8dahk","tag_id":"clay7dbfg000f2r2bhme242fj","_id":"clay7dbfi000k2r2b4rtr0b0u"},{"post_id":"clay7dbfc00062r2b5g398mf9","tag_id":"clay7dbfg000c2r2bgd5x9s5d","_id":"clay7dbfj000n2r2b7vk51rcw"},{"post_id":"clay7dbfc00062r2b5g398mf9","tag_id":"clay7dbfi000l2r2b7ta32i00","_id":"clay7dbfj000o2r2b36f38675"},{"post_id":"clay7dbfd00072r2bdjzt2hjh","tag_id":"clay7dbfc00052r2b6zt7ddyn","_id":"clay7dbfj000q2r2b4gny6c24"},{"post_id":"clay7dbfd00072r2bdjzt2hjh","tag_id":"clay7dbfe00092r2bfcfm23pf","_id":"clay7dbfj000r2r2bft5lhhov"},{"post_id":"clay7dbfe00082r2b42vdclqz","tag_id":"clay7dbfg000f2r2bhme242fj","_id":"clay7dbfk000t2r2b5ub5giea"},{"post_id":"clay7dbff000b2r2b7hjv2clm","tag_id":"clay7dbfj000s2r2b9e5zagv3","_id":"clay7dbfk000u2r2b32nl1hzd"},{"post_id":"clay7dbfl000v2r2bhwnrhgcn","tag_id":"clay7dbfm000x2r2bcj8o2voh","_id":"clay7dbfn00102r2bgqd29q4m"},{"post_id":"clay7dbfl000w2r2b1cnueniu","tag_id":"clay7dbfm000z2r2bhxyjc2vb","_id":"clay7dbfn00122r2b34sm6mlm"},{"post_id":"clay7dbfl000w2r2b1cnueniu","tag_id":"clay7dbf200012r2b9reba8rh","_id":"clay7dbfn00132r2beg2vahwn"},{"post_id":"clay7dbfm000y2r2bepv6bglu","tag_id":"clay7dbfn00112r2bg1g6f0gd","_id":"clay7dbfn00142r2bbsex4oa6"},{"post_id":"clay7oz320000cn2b9j991xqb","tag_id":"claws4ivw000v5u2bg5zv6ba5","_id":"clay7oz330001cn2bgx859mgi"},{"post_id":"clay7oz320000cn2b9j991xqb","tag_id":"clay7w2kk0005cn2b4qyse9fv","_id":"clay7w2kl0006cn2b7m70apn2"},{"post_id":"clay7wrxd0007cn2b6os5cb8u","tag_id":"clay7dbfc00052r2b6zt7ddyn","_id":"clay7wrxf0008cn2bdmdv489u"},{"post_id":"clay7wrxd0007cn2b6os5cb8u","tag_id":"clay7dbfe00092r2bfcfm23pf","_id":"clay7wrxf0009cn2bhm7xgl79"},{"post_id":"clay7y4kd0000ij2b115q9p9n","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"clay7y4kn0002ij2b11lqdd5k"},{"post_id":"clay7wrxd0007cn2b6os5cb8u","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clay7y4kn0004ij2be3l28swr"},{"post_id":"clay7y4ko0005ij2bc37a5xz8","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"clay7y4kp0007ij2bexy4b5zd"},{"post_id":"clay7y4kp0006ij2bdlm05ere","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"clay7y4kq0008ij2bgl991tcg"},{"post_id":"clay7y4kp0006ij2bdlm05ere","tag_id":"claws4ivm00015u2b1456e5w1","_id":"clay7y4kq000aij2b1vwnfpu7"},{"post_id":"clay7y4kd0000ij2b115q9p9n","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clay802uy000fij2b1jud4py5"},{"post_id":"clay7y4kp0006ij2bdlm05ere","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clay802uy000gij2b4vb835sa"},{"post_id":"clay7y4ko0005ij2bc37a5xz8","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clay802uz000hij2bhn03eb2e"},{"post_id":"clb0oel7l00006oiaeadhbd2j","tag_id":"clay6w01g0001sx2b9vccgvbc","_id":"clb0oel8500076oiac0r87og7"},{"post_id":"clb0oel7l00006oiaeadhbd2j","tag_id":"clb0oel7u00026oiaf3zw4p14","_id":"clb0oel8500096oia7i2m6aco"},{"post_id":"clb0oel7s00016oia3xfo5toy","tag_id":"clay6w01r000csx2b2xp297uz","_id":"clb0oel87000d6oiah89874v9"},{"post_id":"clb0oel7s00016oia3xfo5toy","tag_id":"clb0oel8400066oiah5bg3avg","_id":"clb0oel88000f6oia59xmcvqn"},{"post_id":"clb0oel7s00016oia3xfo5toy","tag_id":"clay6w01r000esx2bbbdj57h5","_id":"clb0oel89000i6oiaha5t6ygb"},{"post_id":"clb0oel85000a6oiagh3b40l7","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clb0oel8a000j6oia9xbd6uha"},{"post_id":"clb0oel85000a6oiagh3b40l7","tag_id":"clatd5i1p000pryia34cs3u23","_id":"clb0oel8b000l6oiahjr79adl"},{"post_id":"clb0oel88000e6oia9vm3gsak","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"clb0oel8b000m6oia1vum0n2s"},{"post_id":"clb0oel88000e6oia9vm3gsak","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clb0oel8b000o6oiackg8epnl"},{"post_id":"clb0oel8200036oia0y8afc2e","tag_id":"clay6w01r000csx2b2xp297uz","_id":"clb0oel8b000p6oiahzvf019w"},{"post_id":"clb0oel8200036oia0y8afc2e","tag_id":"clb0oel86000b6oiacay321zr","_id":"clb0oel8c000r6oiaa5dz4wqw"},{"post_id":"clb0oel8200036oia0y8afc2e","tag_id":"clb0oel88000g6oiaevirbkwk","_id":"clb0oel8c000s6oia70noh6lu"},{"post_id":"clb0oel8300046oia0co7aljt","tag_id":"clay6w01r000csx2b2xp297uz","_id":"clb0oel8c000u6oiabidpe4gh"},{"post_id":"clb0oel8300046oia0co7aljt","tag_id":"clb0oel86000b6oiacay321zr","_id":"clb0oel8c000v6oiaa87t8jex"},{"post_id":"clb0oel8300056oiah1ib8ncc","tag_id":"clay6w01r000csx2b2xp297uz","_id":"clb0oel8c000w6oia6z4k4qvg"},{"post_id":"clb0oel8300056oiah1ib8ncc","tag_id":"clb0oel86000b6oiacay321zr","_id":"clb0oel8d000y6oia2p2qefk3"},{"post_id":"clb0oel8500086oia58od8onn","tag_id":"clay6w01r000csx2b2xp297uz","_id":"clb0oel8d000z6oiae5zk2dq0"},{"post_id":"clb0oel8500086oia58od8onn","tag_id":"clb0oel8b000q6oia9v5445nd","_id":"clb0oel8d00106oia8yt86pol"},{"post_id":"clb0oel87000c6oia0n1k8p6u","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clb0oel8d00116oia91768wsd"},{"post_id":"clb0oel87000c6oia0n1k8p6u","tag_id":"clatd5i1p000pryia34cs3u23","_id":"clb0oel8d00126oia8n3u3t7s"},{"post_id":"clb0oel87000c6oia0n1k8p6u","tag_id":"clb0oel8c000t6oia8x55dzn2","_id":"clb0oel8d00136oiafzg52e2d"},{"post_id":"clb0oel89000h6oiae51f7u88","tag_id":"clb0oel8c000x6oiabnl5b2hm","_id":"clb0oel8d00146oia2z7n6n1o"},{"post_id":"clb0oel8f00156oia0fok4s5r","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"clb0oel8g00176oia2gan7a9a"},{"post_id":"clb0oel8f00156oia0fok4s5r","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clb0oel8h00196oiab4v3c7oe"},{"post_id":"clb0oel8f00166oia1z55fcd4","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"clb0oel8i001a6oia3zbhavs9"},{"post_id":"clb0oel8f00166oia1z55fcd4","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clb0oel8i001b6oia5fpc86hx"},{"post_id":"clb0oel8g00186oia8n6dh4yd","tag_id":"claws4ivw000t5u2bgr9zhzm6","_id":"clb0oel8j001d6oiaeaw2h43a"},{"post_id":"clb0oel8g00186oia8n6dh4yd","tag_id":"clay7y4kf0001ij2b9fu3ew17","_id":"clb0oel8j001e6oiagb61hosr"}],"Tag":[{"name":"默认","_id":"cl9qxfdah0004bz2b59t399l6"},{"name":"SpringBoot","_id":"clatd5i1i0002ryia5bf49tr2"},{"name":"Swagger2","_id":"clatd5i1l0006ryia5wjbh50n"},{"name":"序列化","_id":"clatd5i1n000aryia7ge7dhqd"},{"name":"时间格式","_id":"clatd5i1n000bryia6jcb1ms4"},{"name":"AOP","_id":"clatd5i1o000fryiabul7gulz"},{"name":"切面","_id":"clatd5i1o000hryiadwwze9gc"},{"name":"日志处理","_id":"clatd5i1o000iryiaesuqf25o"},{"name":"Druid","_id":"clatd5i1p000jryia2d6yd94z"},{"name":"Mysql连接池","_id":"clatd5i1p000mryia9q434pho"},{"name":"Redis","_id":"clatd5i1p000pryia34cs3u23"},{"name":"Shiro","_id":"clatd5i1t000xryiafkvp2obn"},{"name":"全局异常","_id":"clatd5i1u000zryiahn581zn3"},{"name":"自动配置","_id":"clatd5i1u0012ryia8t2kf6w3"},{"name":"线程池","_id":"clates4cc0001fiiahbdrd214"},{"name":"CAS","_id":"claws4ivg00005u2b0t08aljz"},{"name":"锁","_id":"claws4ivm00015u2b1456e5w1"},{"name":"Synchronized","_id":"claws4ivp00045u2b7uy25h22"},{"name":"对象内存布局","_id":"claws4ivq00055u2b2fsrf6l4"},{"name":"指令乱序","_id":"claws4ivr00095u2bapu98r13"},{"name":"指令重排序","_id":"claws4ivs000b5u2b3qpp726m"},{"name":"JVM","_id":"claws4ivt000c5u2b39ba99h5"},{"name":"垃圾收集器","_id":"claws4ivu000j5u2bfvukdht6"},{"name":"垃圾回收算法","_id":"claws4ivv000k5u2bekht4rfx"},{"name":"Mysql","_id":"claws4ivw000t5u2bgr9zhzm6"},{"name":"React","_id":"claws4ivw000v5u2bg5zv6ba5"},{"name":"JAVA","_id":"clay6w01g0001sx2b9vccgvbc"},{"name":"MAC","_id":"clay6w01m0002sx2b3olwat0n"},{"name":"Homebrew","_id":"clay6w01n0004sx2b1fl9dicj"},{"name":"PMP","_id":"clay6w01n0005sx2be7jdfuzr"},{"name":"SpringCloud","_id":"clay6w01r000csx2b2xp297uz"},{"name":"Eueka","_id":"clay6w01r000dsx2b21627mn8"},{"name":"注册中心","_id":"clay6w01r000esx2bbbdj57h5"},{"name":"Gateway","_id":"clay6w01t000isx2b7yc9bvsq"},{"name":"全局过滤器","_id":"clay6w01u000ksx2bht2adkxw"},{"name":"Github","_id":"clay7048u000wsx2bdl5wc8c4"},{"name":"Maven","_id":"clay7dbf200012r2b9reba8rh"},{"name":"ElasticSearch","_id":"clay7dbfc00052r2b6zt7ddyn"},{"name":"ES","_id":"clay7dbfe00092r2bfcfm23pf"},{"name":"Jenkins","_id":"clay7dbfg000c2r2bgd5x9s5d"},{"name":"Docker","_id":"clay7dbfg000f2r2bhme242fj"},{"name":"SonarQube","_id":"clay7dbfi000l2r2b7ta32i00"},{"name":"Kibana","_id":"clay7dbfj000s2r2b9e5zagv3"},{"name":"Logstash","_id":"clay7dbfm000x2r2bcj8o2voh"},{"name":"Nexus","_id":"clay7dbfm000z2r2bhxyjc2vb"},{"name":"Arthas","_id":"clay7dbfn00112r2bg1g6f0gd"},{"name":"前端","_id":"clay7w2kk0005cn2b4qyse9fv"},{"name":"数据库","_id":"clay7y4kf0001ij2b9fu3ew17"},{"name":"fastjson","_id":"clb0oel7u00026oiaf3zw4p14"},{"name":"Eureka","_id":"clb0oel8400066oiah5bg3avg"},{"name":"Feign","_id":"clb0oel86000b6oiacay321zr"},{"name":"okhttp","_id":"clb0oel88000g6oiaevirbkwk"},{"name":"Ribbon","_id":"clb0oel8b000q6oia9v5445nd"},{"name":"缓存","_id":"clb0oel8c000t6oia8x55dzn2"},{"name":"MySQL","_id":"clb0oel8c000x6oiabnl5b2hm"}]}}