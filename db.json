{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/bg/bg.png","path":"img/bg/bg.png","modified":0,"renderable":0},{"_id":"source/img/bg/bg1.jpg","path":"img/bg/bg1.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/the_moon.jpg","path":"img/bg/the_moon.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/公共关系学/20221027183201783077630932029440.md","hash":"4999650a2d19724156d0b7d36850ee445a6d88dc","modified":1666866733903},{"_id":"source/_posts/hello-world.md","hash":"466eae895f59911269bf4b76cbb9f57104994294","modified":1666780515166},{"_id":"source/_posts/公共关系学/20221027183201783077630944612352.md","hash":"0676927a361158981b30cd5aa1a3aa93355d8be7","modified":1666866733904},{"_id":"source/_posts/公共关系学/20221027183201783077630948806656.md","hash":"4b92f8f6908d229b6a3dd69d9b13a5bfe2c0a9fe","modified":1666866733905},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252224.md","hash":"40af35da5e0515777bfc7c6e990903dd5eefa497","modified":1666866733880},{"_id":"source/_posts/人力资源管理/20221027183201783077630898475008.md","hash":"1e69c5bb46056a60360fac1280812e0cc50dd569","modified":1666866733875},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252225.md","hash":"cecfdcf424165f74105c548b866ee32d8c3733e9","modified":1666866733881},{"_id":"source/_posts/基础会计学/20221027183201783077630919446530.md","hash":"874b43527792c6682b7aafa2bee52db7d9197c2c","modified":1666866733887},{"_id":"source/_posts/基础会计学/20221027183201783077630919446531.md","hash":"7f9698b5e433f1c876d5cba973ee8b44929188d3","modified":1666866733888},{"_id":"source/_posts/基础会计学/20221027183201783077630919446532.md","hash":"d2f397d251d3bd5dfeeb232e98568da201872808","modified":1666866733890},{"_id":"source/_posts/生产与运作管理/20221027183201783077630915252226.md","hash":"ddb7e48b0f65279d9f46fc50015023cf3f7aa1c3","modified":1666866733882},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446528.md","hash":"71977e01a37f6337f2b7c4dfe2393e776dedd607","modified":1666866733883},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446529.md","hash":"f04baa196ea84957549825d37fc3ca6ee44f516f","modified":1666866733885},{"_id":"source/_posts/电子商务/20221027183201783077630923640832.md","hash":"39fa8741dbf944b16411979cd6cf79fdd9263f22","modified":1666866733891},{"_id":"source/_posts/电子商务/20221027183201783077630923640833.md","hash":"a30749bb9a96d360c51b3a60b3beb8b04aa0cec8","modified":1666866733893},{"_id":"source/_posts/电子商务/20221027183201783077630923640834.md","hash":"6ef4d354dc3571574dee6ad9a397fcd23f95e940","modified":1666866733895},{"_id":"source/_posts/电子商务/20221027183201783077630927835136.md","hash":"0d57904d8be5db69fe687b46cc152235a86e672c","modified":1666866733900},{"_id":"source/_posts/电子商务/20221027183201783077630927835137.md","hash":"012c800e38a1f0eac9e431e01231f8af0ac1ec73","modified":1666866733902},{"_id":"source/_posts/电子商务/20221027183201783077630923640835.md","hash":"45f85df297e3fa309461a95a8af0e6e96a5c7a04","modified":1666866733897},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663049159000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1663049159000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1663049159000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663049159000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1663049159000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663049159000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1663049159000},{"_id":"themes/fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663049159000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1663049159000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663049159000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663049159000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663049159000},{"_id":"themes/fluid/_config.yml","hash":"39baa882da9b0af5178c7767306be14bcf992a55","modified":1663049159000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663049159000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663049159000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663049159000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1666780926893},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663049159000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663049159000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663049159000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663049159000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1663049159000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1663049159000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663049159000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1663049159000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663049159000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663049159000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663049159000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1663049159000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1663049159000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1663049159000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663049159000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663049159000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663049159000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663049159000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663049159000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663049159000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663049159000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663049159000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663049159000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663049159000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663049159000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663049159000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663049159000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663049159000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663049159000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663049159000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663049159000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663049159000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663049159000},{"_id":"source/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1666828158000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663049159000},{"_id":"source/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1666773579596},{"_id":"source/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1666857270158},{"_id":"public/local-search.xml","hash":"fb15cd0d0319db3f2acb2f93a286940f260675d3","modified":1666883713352},{"_id":"public/archives/index.html","hash":"9ba8406532af2a115539b2f7554b65106201fc1e","modified":1666883713352},{"_id":"public/archives/page/2/index.html","hash":"a59f47cf05762061bffbb96d5e8b8e41e9a132e8","modified":1666883713352},{"_id":"public/archives/2022/index.html","hash":"8b334b601bdadecad884d3c935ac270c045682d8","modified":1666883713352},{"_id":"public/archives/2022/page/2/index.html","hash":"2ef1a744abb089e51241b837bbe3fd29c2aed22d","modified":1666883713352},{"_id":"public/archives/2022/10/index.html","hash":"e9a01a0c26f5fba13b8dd0cb9c996382775bbd64","modified":1666883713352},{"_id":"public/archives/2022/10/page/2/index.html","hash":"3c48b4b927fe6114b9e888a7e001b2876d93e71c","modified":1666883713352},{"_id":"public/categories/公共关系学/index.html","hash":"fa944995a28ccbb26340c1959c5175d6beb975d0","modified":1666883713352},{"_id":"public/categories/人力资源管理/index.html","hash":"837d033345ce6060c5560438ddcd63a00800215c","modified":1666883713352},{"_id":"public/categories/基础会计学/index.html","hash":"db67c1e0a75cc7c9c23f8487b50fdb8f25f99c28","modified":1666883713352},{"_id":"public/categories/生产与运作管理/index.html","hash":"cb7ad07d74dbdda927b4a29698b33cd66ae43947","modified":1666883713352},{"_id":"public/categories/电子商务/index.html","hash":"7ae71c0bc4de23530459cc7581ec890dbb1c95ae","modified":1666883713352},{"_id":"public/tags/默认/index.html","hash":"56a5971a21f57b6f2ddaf8e9faa3c0c306390b00","modified":1666883713352},{"_id":"public/tags/默认/page/2/index.html","hash":"62c192f539ecfc0a79b7897f3024d4d6655a9764","modified":1666883713352},{"_id":"public/404.html","hash":"5ee0ad15e1c854e70d50cd093e7b97a33739737d","modified":1666883713352},{"_id":"public/tags/index.html","hash":"96ac11f4f0ee836e4b59f9202ec9391f7f73b602","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630932029440/index.html","hash":"e4fcf377709d96909aea004452598067886e6fa1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630944612352/index.html","hash":"eeb4623f3a8548ff69577037d388a1dbb5ba3bff","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630948806656/index.html","hash":"d271e7edfbec194fe400865e6b047e5401482128","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630898475008/index.html","hash":"adba5a524b587579133f9af3edb5878f41acb15f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252224/index.html","hash":"71331217f513fe3a35542c13f4230db22756415d","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252225/index.html","hash":"1adf686cb814d36bad0ac5a8c01f642fe2c57e4a","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446530/index.html","hash":"37160cc8999f3f1a8b2e8d4496adb8b1f7ee22a1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446531/index.html","hash":"f092a9b828386991bf1a1c6e21027943bf83b09f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446532/index.html","hash":"33162fa41055ec21894e6236c64d030063b95c0c","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252226/index.html","hash":"7ed8ab5fced6e44038f687106dd65378d4c53751","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446528/index.html","hash":"3eab15006c48f5199c6d914d09447e9181b96b27","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446529/index.html","hash":"304cac6a5311d471559240ba900bf6d657e85e4f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640832/index.html","hash":"ba67c52ce2413c628a9b4a23ffe3e7c410ff1caa","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640833/index.html","hash":"ce89a338e1c4c55e50aa98097e5fe02e4590f7ef","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640834/index.html","hash":"23f5d9652368ee3e77a9473f57eebc9eb7b94c2f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640835/index.html","hash":"7ad658895e4518b9215d39e21e7f03372548809b","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835136/index.html","hash":"a93afbed5e4c6ad24cdcd9fa4d1e94dec05a6a21","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835137/index.html","hash":"5ca081cedf0d41828523d54947a9cfa2d42dd134","modified":1666883713352},{"_id":"public/2022/10/10/123/index.html","hash":"8dcd8b21f750f2299f43ed3c1271ff402f39d1b4","modified":1666883713352},{"_id":"public/index.html","hash":"396d605f471d88ca8e1ac30804e7df948f6cfd69","modified":1666883713352},{"_id":"public/page/2/index.html","hash":"6603b607b1f4ce2362fb10345ec32148ed9ed3d7","modified":1666883713352},{"_id":"public/categories/index.html","hash":"7fb3548db852c3062699770fe0a9877b38803453","modified":1666883713352},{"_id":"public/links/index.html","hash":"7971f3f6ae9fc4a0a4215fcbf5969f170e3ea241","modified":1666883713352},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1666883713352},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1666883713352},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1666883713352},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1666883713352},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1666883713352},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1666883713352},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1666883713352},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1666883713352},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1666883713352},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1666883713352},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1666883713352},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1666883713352},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1666883713352},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1666883713352},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1666883713352},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1666883713352},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1666883713352},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1666883713352},{"_id":"public/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1666883713352},{"_id":"public/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1666883713352},{"_id":"public/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1666883713352},{"_id":"source/_posts/Untitled Folder/Github刷提交记录.md","hash":"615b2f0c2f2c906a6aed5588310ab9b3933d7375","modified":1668674385578},{"_id":"source/_posts/环境安装/ElasticSearch入门.md","hash":"35d0a32a9f57c969e65c4d36ae0804e482090fe4","modified":1668674385578},{"_id":"source/_posts/Untitled Folder/构建自己的jar包上传至Mvaen中央仓库和版本更新.md","hash":"6f7d633936b93ec7d5a1ba46885be617d06c0e53","modified":1614957892000},{"_id":"source/_posts/环境安装/Jenkins打Docker镜像推送到私有仓库.md","hash":"71665cafcc9f63af36f43b9399f1c0e7583fb10c","modified":1600869317000},{"_id":"source/_posts/环境安装/Jenkins集成SonarQube.md","hash":"6fa39767faa30693fcf4a7666f872458ee0dded3","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】CerebroKibana7ES.md","hash":"1b84e63609712d17ced5dfb3c07e973d9d0fde9f","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Docker安装.md","hash":"1581e6bf565af11e4550c81a2630645c56f19b5d","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】ElasticSearch安装.md","hash":"6254f3d782e983a9cd81857db99c6741704e74a4","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】Logstash安装.md","hash":"dd39ba2f936ecbb90ec53c28c415d77cf302aa6c","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Kibana安装.md","hash":"fcbd4185d3c2c182b9ffbc5489b5102257d54bf9","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】阿里Arthas安装.md","hash":"44d5e1730d7dff9c054cda4ac561e414e4fdea0a","modified":1668674385578},{"_id":"source/_posts/环境安装/未完成.md","hash":"7760c5f4073cdfa34845b5bace190e316ba9c4ba","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/idea插件.md","hash":"4e41f12822cc5ecdce566782f4a179d2ef380afb","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/软件工具.md","hash":"cc726c9042308217b9c60617c15612d4158a59bc","modified":1668674385578},{"_id":"source/_posts/JAVA/CAS.md","hash":"f1e525864b7398990f1be4beecb93ec3365785fc","modified":1668674385578},{"_id":"source/_posts/JAVA/Synchronized锁升级过程.md","hash":"119b0cd16e70ecba48f728509e1104d7b092e43d","modified":1668674385578},{"_id":"source/_posts/JAVA/指令乱序，指令重排序.md","hash":"df8e66724bd20aa4fc1d2fc497bf2c5bd5c1ec5a","modified":1668674385579},{"_id":"source/_posts/JAVA/对象内存布局.md","hash":"9e4b268b10fc7829f9197947db4bb89b7a394041","modified":1668674385578},{"_id":"source/_posts/DDD/领域驱动设计-DDD.md","hash":"ea4d132bdb967f61ad1db7dd1dd93a52ad494100","modified":1668674592999},{"_id":"source/_posts/JVM/1-JVM基础.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674386564},{"_id":"source/_posts/JVM/2-JVM内存模型.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674387069},{"_id":"source/_posts/JVM/3-JVM垃圾回收算法和垃圾收集器.md","hash":"37c18f124e613316f092125e135d46f97e43655b","modified":1591707730000},{"_id":"source/_posts/JVM/4-JVM 参数.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674386564},{"_id":"source/_posts/JVM/5-JVM常用的命令.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674386564},{"_id":"source/_posts/JVM/6-JVM常用工具和优化.md","hash":"25acba82017e545358cb1271c12af75f14781859","modified":1589476739000},{"_id":"source/_posts/Mysql/1、Mysql执行流程与架构.md","hash":"92dffbf7832c2c68f2bf4f179d006adb2ae38686","modified":1668674387069},{"_id":"source/_posts/Mysql/2、Mysql索引原理与使用规则.md","hash":"92dffbf7832c2c68f2bf4f179d006adb2ae38686","modified":1668674387069},{"_id":"source/_posts/Mysql/3、Mysql事务与锁详解.md","hash":"92dffbf7832c2c68f2bf4f179d006adb2ae38686","modified":1668674387069},{"_id":"source/_posts/PMP/PMP概念.md","hash":"5404941651fcb57363169f55e9094de32be547f2","modified":1668674387069},{"_id":"source/_posts/PMP/知识领域.md","hash":"5404941651fcb57363169f55e9094de32be547f2","modified":1668674387069},{"_id":"source/_posts/React/React基础.md","hash":"49fc09ce472f8e474e96ab2c8703d0743ee20dc0","modified":1668674387069},{"_id":"source/_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","hash":"1e36191e492f8ef9604794221ccb10001eedb124","modified":1668674387069},{"_id":"source/_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","hash":"1e36191e492f8ef9604794221ccb10001eedb124","modified":1668674386921},{"_id":"source/_posts/SpringCloud/【SpringCloud】Eueka注册中心.md","hash":"29b7bda7a31d48754b53ed22f58f96106e8f73a5","modified":1668674386921},{"_id":"source/_posts/SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值.md","hash":"befdfdf196eaf0418e6a06f5832c20731637f6b0","modified":1668674386098},{"_id":"source/_posts/IDEA 常用插件.md","hash":"1adbcafb49cd51e5412108030082a0001401afec","modified":1668674385579},{"_id":"source/_posts/JAVA 转换 树结构数据.md","hash":"691e65abe92fb2393c8aa1ef7f797400d1bb3eba","modified":1668674385579},{"_id":"source/_posts/MySQL数据和索引占用空间查询.md","hash":"a30f3293042051d442aa3749ac11a436d96f9567","modified":1668674386099},{"_id":"source/_posts/JSON字符串带BOM头.md","hash":"5a9b28230f0557cea5cced1cb8d4595e2f841ae4","modified":1668674386099},{"_id":"source/_posts/JAVA自定义注解.md","hash":"190f228a4e13ebc33b72204bc5bddd892e170df2","modified":1668674386099},{"_id":"source/_posts/MySQL 学习笔记.md","hash":"47ee5ee2f590858af3879364f0ca32166915f7e5","modified":1668674386099},{"_id":"source/_posts/MySQL数据库设计规范.md","hash":"330b58853cae73bcd9a62614f3cd12df7343baaf","modified":1668674386099},{"_id":"source/_posts/MAC替换Homebrew源.md","hash":"2abd747d20abd096e06fafe4b0227d9cc83de0f9","modified":1668674386099},{"_id":"source/_posts/Mycat配置.md","hash":"81c9e2958870630cdc3603b8bd823dd02a805fef","modified":1668674386099},{"_id":"source/_posts/NAS搭建黑群晖5.2稳定版本.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/Mysql ONLY_FULL_GROUP_BY.md","hash":"29d128543a36bbbd9e47d0be63b0437cbcadfbf6","modified":1668674386099},{"_id":"source/_posts/Mysql 查询天、周，月，季度、年的数据.md","hash":"4b6a174f37708cd5e80b42094126f85b0f762d30","modified":1668674386099},{"_id":"source/_posts/SSR搭建科学上网服务VPN.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/SpringBoot Druid 配置详解.md","hash":"a6f87cc0c73d7fea23c463037d92952928f51ccb","modified":1668674386099},{"_id":"source/_posts/SpringBoot AOP处理请求日志处理打印.md","hash":"1cd1a114a3b1da1203413dd676bb81dfa05b3685","modified":1668674386099},{"_id":"source/_posts/SpringBoot Redis 配置详解.md","hash":"85f0ddfa33e1317a68896a0391911963717f7590","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 整合 Swagger2.md","hash":"70ae30f9d7029a530de4e4d226dc5e6ac69ff7e5","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 线程池的定义和使用.md","hash":"67f77c607f8be47fa83f947508712c5c7191cad0","modified":1668674386099},{"_id":"source/_posts/SpringBoot 全局异常处理.md","hash":"cd14bcdb40bb964fa4f6664a5495a6c9d84f4324","modified":1668674386099},{"_id":"source/_posts/SpringBoot Shiro 配置自定义密码加密器.md","hash":"26c8a3e3bc1037e89cf8d1496cf4e30f0f65cdd7","modified":1668674386099},{"_id":"source/_posts/redis命令和RedisTemplate操作对应表.md","hash":"1d9bcce312a879eb1337dd7f880f52223e9c1bf8","modified":1668674386099}],"Category":[{"name":"公共关系学","_id":"cl9qxfdag0003bz2b3usu7bn6"},{"name":"人力资源管理","_id":"cl9qxfdar000lbz2b65jr6ibc"},{"name":"基础会计学","_id":"cl9qxfday0013bz2b8x6ah7kp"},{"name":"生产与运作管理","_id":"cl9qxfdb1001ibz2bbirqdwpc"},{"name":"电子商务","_id":"cl9qxfdb3001qbz2beosz70ge"},{"name":"环境安装","_id":"claktn8on001g19iaczrn7pwc"},{"name":"Untitled Folder","_id":"claktn8or001l19ia98kx1vom"},{"name":"开源分享","_id":"claktn8os001p19iaapni6an3"},{"name":"JAVA","_id":"claktn8ov001t19ia2fh650b6"},{"name":"DDD","_id":"claktn8p0002219ia9vejebtx"},{"name":"SpringCloud","_id":"claktn8p6002819iagynuahf6"},{"name":"JVM","_id":"claktn92i002a19ia8xah0dmq"},{"name":"SpringBoot","_id":"claktn9bh002f19ia0pub5jqs"},{"name":"React","_id":"claktn9nj002i19iah8za5g87"},{"name":"PMP","_id":"claktn9nk002k19ia8cd0fpx2"},{"name":"Mysql","_id":"claktn9nl002m19ia5h4raevy"}],"Data":[],"Page":[],"Post":[{"_content":"# Github刷提交记录\n\nhttps://github.com/tywei90/git-auto-commit\n\n00 12 * * * cd /home/github && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master \n\n\n*/5 * * * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n5 5 0/3 * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n","source":"_posts/Untitled Folder/Github刷提交记录.md","raw":"---\ncategories:\n  - Untitled Folder\n---\n# Github刷提交记录\n\nhttps://github.com/tywei90/git-auto-commit\n\n00 12 * * * cd /home/github && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master \n\n\n*/5 * * * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n5 5 0/3 * * cd /home/github/test-project && git pull && /usr/bin/node add.js && git commit -a -m 'git auto commit' && git push origin master\n\n","slug":"Untitled Folder/Github刷提交记录","published":1,"date":"2021-03-05T16:34:41.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6yj000019iago1d6sx4","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Github刷提交记录\"><a href=\"#Github刷提交记录\" class=\"headerlink\" title=\"Github刷提交记录\"></a>Github刷提交记录</h1><p><a href=\"https://github.com/tywei90/git-auto-commit\">https://github.com/tywei90/git-auto-commit</a></p>\n<p>00 12 * * * cd &#x2F;home&#x2F;github &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master </p>\n<p>*&#x2F;5 * * * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n<p>5 5 0&#x2F;3 * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Github刷提交记录\"><a href=\"#Github刷提交记录\" class=\"headerlink\" title=\"Github刷提交记录\"></a>Github刷提交记录</h1><p><a href=\"https://github.com/tywei90/git-auto-commit\">https://github.com/tywei90/git-auto-commit</a></p>\n<p>00 12 * * * cd &#x2F;home&#x2F;github &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master </p>\n<p>*&#x2F;5 * * * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n<p>5 5 0&#x2F;3 * * cd &#x2F;home&#x2F;github&#x2F;test-project &amp;&amp; git pull &amp;&amp; &#x2F;usr&#x2F;bin&#x2F;node add.js &amp;&amp; git commit -a -m ‘git auto commit’ &amp;&amp; git push origin master</p>\n"},{"_content":"# ElasticSearch入门\n\n## ElasticSearch的基本概念\n\n+ **Index**\n\n  > 类似于mysql数据库中的database（数据库）\n  >\n  > 是文档的容器，是一类文档的集合\n  >\n  > + Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型\n  > + Shard：体现了物理空间的概念，索引中的数据分散在Shard上\n\n+ **~~Type~~**\n\n  > ~~类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。~~\n  >\n  > 在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type \"_doc\"。\n\n+ **Document**\n\n  > 由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。\n  >\n  > 文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成\n\n+ **Field**\n\n  > es中一个文档中对应的多个列与mysql数据库中每一列对应。字段\n\n+ **Mapping**\n\n  > 文档字段类型\n\n+ **indexed**\n\n  > 就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。\n\n+ **Query DSL**\n\n  > 类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL\n\n+ **GET/PUT/POST/DELETE**\n\n  > 分别类似与mysql中的select/update/delete......\n\n### 类比：\n\n| 关系型数据库     | ES            |\n| ---------------- | ------------- |\n| Table            | Index（Type） |\n| Row              | Document      |\n| Column           | Field         |\n| Schema（表定义） | Mapping       |\n| SQL              | DSL           |\n\n**每个文档都会有相应的元数据**\n\n```json\n\n```\n\n元数据用于标注文档的相关信息：\n\n+ _index：文档所属索引名（库名）\n+ _type：文档所属类型名（表名）\n+ _id：唯一ID\n+ _source：原始JSON数据\n+ ~~_all：整合所有内容到该字段，7.0版本已被废除~~\n+ _version：版本号\n+ _score：相关性打分\n\n## 分布式系统的可用性和扩展性\n\n+ 高可用\n  - 服务可用性-允许所有节点停止服务\n  - 数据可用性-部分节点丢失，不会丢失数据\n+ 可扩展\n  - 请求量提升/数据不断的增长（将数据分布到所有节点上）\n\n### 分布式特性\n\n+ ElasticSearch的分布式架构好处\n  - 存储的水平扩容\n  - 提高系统的可用性，部分节点停止服务，整个集群的服务不受影响\n+ ElasticSearch分布式架构\n  - 不同的集群通过不同的名字来区分，默认为“elasticSearch”\n  - 通过配置文件可修改，或者在命令行中 ``-E cluster-name=test `` 进行设定\n  - 一个集群可以有一个或多个节点\n\n### Master-eligible nodes（Master候选者） 和 Master Node\n\n+ 每个节点启动后，默认就是一个Master-eligible节点\n  - 可以设置 ``node.master:false`` 禁止\n+ Master-eligible节点可以参加选主流程，称为Master Node节点\n+ 当第一个节点启动的时候，会将自己选举成Master Node节点\n+ 每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）\n  - 集群状态（Cluster State），维护了一个集群中，必要的信息\n    + 所有的节点信息\n    + 所有的索引和相关的Mapping和Setting信息\n    + 分片的路由信息\n\n### Date Node & Coordinating Node（数据整合节点）\n\n+ Data Node\n  + 可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用\n+ Coordinating Node\n  + 负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起\n  + 每个节点默认都起到Coordinating Node的职责\n\n### 其他节点类型\n\n+ Hot & Warm Node（冷热节点）\n  + 不同硬件配置的Data Node，用来实现Hot & Warm架构，降低就能部署的成本\n+ Machine Learning Node\n  + 负责跑机器学习的Job，用来做异常检测的\n+ ~~Tribe Node~~\n  + （5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理\n\n### 配置节点类型\n\n+ 开发环境中一个节点可以承担多种角色\n+ 生产环境中，应该设置单一的角色的节点（dedicated node）\n\n| 节点类型          | 配置参数    | 默认值                                                    |\n| ----------------- | ----------- | --------------------------------------------------------- |\n| maste eligible    | node.master | true                                                      |\n| data              | node.data   | true                                                      |\n| ingest            | node.ingest | true                                                      |\n| coordinating only | 无          | 每个节点默认都是coordinating节点，设置其他类型全部为false |\n| machine learning  | node.ml     | true（需enable x-pack）                                   |\n\n### 分片（Primary Shard & Replica Shard）\n\n+ 主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商\n  + 一个分片是一个运行的Lucene（搜索引擎）的实例\n  + 主分片数在索引创建时指定，后续不允许修改，除非Reindex\n+ 副本，用以解决数据高可用的问题。副本是主分片的拷贝\n  + 副本分片数，可以动态调整\n  + 增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）\n\n### 查看集群的健康状况\n\n![image-20210309114915854](C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png)\n\n**在Kibana的开发工具中，快捷键按下`Ctrl+/`可以直接跳到ES官方的API中**\n\n### 文档的CRUD\n\n```http\n\n#更新（先删除原数据，在新建新数据，同时版本+1）、创建\nPUT {Index}/_doc/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#创建（自动生成ID）\nPOST {Index}/_doc\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#查询 \nGET {Index}/_doc/{id}\n#更新（文档必须已经存在，更新只会对相应字段做增量修改）\nPOST {Index}/_update/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#删除\nDELETE {Index}/_doc/{id}\n```\n\n+ Type名，约定都用_doc\n+ Create：如果ID已经存在，会失败\n+ Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加\n+ Update：文档必须已经存在，更新只会对相应字段做增量修改\n\n> Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1\n\n### Bulk API\n\n+ 在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作\n+ 支持四种类型的操作\n  + Index\n  + Create\n  + Update\n  + Delete\n+ 可以在URL中指定Index，也可以在请求的Payload中进行\n+ 操作中单条操作失败，并不会影响到其他操作\n+ 返回结果包括了每一条操作执行结果\n\n```http\n\nPOST _bulk\n{\"index\":{\"_index\":\"test\",\"_id\":\"1\"}}\n{\"field1\":\"value1\"}\n{\"delete\":{\"_index\":\"test\",\"_id\":\"2\"}}\n{\"create\":{\"_index\":\"test2\",\"_id\":\"3\"}}\n{\"field1\":\"value3\"}\n{\"update\":{\"_index\":\"test3\",\"_id\":\"3\"}}\n{\"doc\":{\"field2\":\"value2\"}}\n```\n\n### 批量读取-MEGT\n\n批量操作，可以减少网络连接所产生的开销，提高性能\n\n```http\n\nGET _mget\n{\n  \"docs\":[\n      {\n        \"_index\":\"users\",\n        \"_id\":1\n      },\n      {\n        \"_index\":\"users\",\n        \"_id\":2\n      }\n    ]\n}\n```\n\n### 批量查询-MSEARCH \n\n```http\n\nPOST {index}/_msearch\n```\n\n### 索引：正排、倒排\n\n正排例如书本的目录，文档ID到文档和单词的关联\n\n倒排书本最后的索引页就是倒排索引，单词到文档ID的关系\n\n**倒排索引的核心组成**\n\n+ 倒排索引包含两个部分\n  + 单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系\n    + 单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询\n  + 倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成\n    + 倒排索引项（Posting ）\n      + 文档ID\n      + 词频TF：该单词问文档中出现的次数，用于相关性评分\n      + 位置（Position）：单词在文档中分词的文职。用于语句搜索\n      + 偏移（Offset）：记录单词的开始结束位置，实现高亮显示\n\n![image-20210309153302897](C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309153302897.png)\n\n### Analysis与Analyzer（分词器）\n\n+ Analysis：文本分析是把全文本转换一系列单词（term/token）的过程，也叫分词\n+ Analysis是通过Analyzer来实现的\n  + 可以使用Elasticsearch内置的分析器/或者按需自定义定制化分析器\n+ 除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析\n\n#### Analyzer（分词器）的组成\n\n+ 分词器是专门处理分词的组件，Analyzer由三部分组成\n  + Character Filters（针对原始文本处理，例如去除html标签）\n  + Tokenizer（按照规则切分为单词）\n  + Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）\n\n#### Elasticsearch内置分词器\n\n+ Standard Analyzer：默认分词器，按词切分，小写处理\n+ Simple Analyzer：按照非字母切分（符号被过滤），小写处理\n+ Stop Analyzer：小写处理，停用词过滤（the、a、is）\n+ Whitespace Analyzer：按照空格切分，不转小写\n+ Keyword Analyzer：不分词，直接降输入当做关键字输出\n+ Patter Analyzer：正则表达式，默认`\\W+`（非支付分隔）\n+ Language：提供了30多种常见语言分词器\n+ Customer Analyzer：自定义分词器\n\n#### 使用_analyzer API\n\n```http\n# 示例\n\n\n# standard：默认分词器，按词切分，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"standard\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# simple：按照非字母切分，非字母都被去除，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"simple\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语\nGET /_analyze\n{\n  \"analyzer\":\"stop\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# whitespace：按照空格切分\nGET /_analyze\n{\n  \"analyzer\":\"whitespace\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# keyword：关键字\nGET /_analyze\n{\n  \"analyzer\":\"keyword\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n```\n\n#### ICU Analyzer\n\n+ 需要安装plugin\n  + Elasticsearch-plugin install analysis-icu\n+ 提供了Unicode的支持，更好的支持亚洲语言\n\n#### 更多的中文分词器\n\n+ IK\n  + 支持自定义词库，支持热更新分词字典\n  + https://github.com/medcl/elasticsearch-analysis-ik\n+ THULAC\n  + 清华大学自然语言处理和社会人文计算实验室的一套中文分词器\n  + https://github.com/microbun/elasticsearch-thulac-plugin\n\n## Search 搜索API\n\n+ URL Search\n  + 在url中使用查询参数\n+ Request Body Search\n  + 使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）\n\n**指定查询索引**\n\n| 语法                   | 范围              |\n| ---------------------- | ----------------- |\n| /_search               | 集群上所有的索引  |\n| /index1/_search        | index1            |\n| /index1,index2/_search | index1和index2    |\n| /index*/_search        | 以index开头的索引 |\n\n#### URL查询\n\n`http://{ip}:{port}/{index}/_search?q={field}:{value}`\n\n#### Request Body\n\n```http\nhttp://\n```\n\n","source":"_posts/环境安装/ElasticSearch入门.md","raw":"---\ncategories:\n  - 环境安装\n---\n# ElasticSearch入门\n\n## ElasticSearch的基本概念\n\n+ **Index**\n\n  > 类似于mysql数据库中的database（数据库）\n  >\n  > 是文档的容器，是一类文档的集合\n  >\n  > + Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型\n  > + Shard：体现了物理空间的概念，索引中的数据分散在Shard上\n\n+ **~~Type~~**\n\n  > ~~类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。~~\n  >\n  > 在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type \"_doc\"。\n\n+ **Document**\n\n  > 由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。\n  >\n  > 文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成\n\n+ **Field**\n\n  > es中一个文档中对应的多个列与mysql数据库中每一列对应。字段\n\n+ **Mapping**\n\n  > 文档字段类型\n\n+ **indexed**\n\n  > 就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。\n\n+ **Query DSL**\n\n  > 类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL\n\n+ **GET/PUT/POST/DELETE**\n\n  > 分别类似与mysql中的select/update/delete......\n\n### 类比：\n\n| 关系型数据库     | ES            |\n| ---------------- | ------------- |\n| Table            | Index（Type） |\n| Row              | Document      |\n| Column           | Field         |\n| Schema（表定义） | Mapping       |\n| SQL              | DSL           |\n\n**每个文档都会有相应的元数据**\n\n```json\n\n```\n\n元数据用于标注文档的相关信息：\n\n+ _index：文档所属索引名（库名）\n+ _type：文档所属类型名（表名）\n+ _id：唯一ID\n+ _source：原始JSON数据\n+ ~~_all：整合所有内容到该字段，7.0版本已被废除~~\n+ _version：版本号\n+ _score：相关性打分\n\n## 分布式系统的可用性和扩展性\n\n+ 高可用\n  - 服务可用性-允许所有节点停止服务\n  - 数据可用性-部分节点丢失，不会丢失数据\n+ 可扩展\n  - 请求量提升/数据不断的增长（将数据分布到所有节点上）\n\n### 分布式特性\n\n+ ElasticSearch的分布式架构好处\n  - 存储的水平扩容\n  - 提高系统的可用性，部分节点停止服务，整个集群的服务不受影响\n+ ElasticSearch分布式架构\n  - 不同的集群通过不同的名字来区分，默认为“elasticSearch”\n  - 通过配置文件可修改，或者在命令行中 ``-E cluster-name=test `` 进行设定\n  - 一个集群可以有一个或多个节点\n\n### Master-eligible nodes（Master候选者） 和 Master Node\n\n+ 每个节点启动后，默认就是一个Master-eligible节点\n  - 可以设置 ``node.master:false`` 禁止\n+ Master-eligible节点可以参加选主流程，称为Master Node节点\n+ 当第一个节点启动的时候，会将自己选举成Master Node节点\n+ 每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）\n  - 集群状态（Cluster State），维护了一个集群中，必要的信息\n    + 所有的节点信息\n    + 所有的索引和相关的Mapping和Setting信息\n    + 分片的路由信息\n\n### Date Node & Coordinating Node（数据整合节点）\n\n+ Data Node\n  + 可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用\n+ Coordinating Node\n  + 负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起\n  + 每个节点默认都起到Coordinating Node的职责\n\n### 其他节点类型\n\n+ Hot & Warm Node（冷热节点）\n  + 不同硬件配置的Data Node，用来实现Hot & Warm架构，降低就能部署的成本\n+ Machine Learning Node\n  + 负责跑机器学习的Job，用来做异常检测的\n+ ~~Tribe Node~~\n  + （5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理\n\n### 配置节点类型\n\n+ 开发环境中一个节点可以承担多种角色\n+ 生产环境中，应该设置单一的角色的节点（dedicated node）\n\n| 节点类型          | 配置参数    | 默认值                                                    |\n| ----------------- | ----------- | --------------------------------------------------------- |\n| maste eligible    | node.master | true                                                      |\n| data              | node.data   | true                                                      |\n| ingest            | node.ingest | true                                                      |\n| coordinating only | 无          | 每个节点默认都是coordinating节点，设置其他类型全部为false |\n| machine learning  | node.ml     | true（需enable x-pack）                                   |\n\n### 分片（Primary Shard & Replica Shard）\n\n+ 主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商\n  + 一个分片是一个运行的Lucene（搜索引擎）的实例\n  + 主分片数在索引创建时指定，后续不允许修改，除非Reindex\n+ 副本，用以解决数据高可用的问题。副本是主分片的拷贝\n  + 副本分片数，可以动态调整\n  + 增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）\n\n### 查看集群的健康状况\n\n![image-20210309114915854](C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png)\n\n**在Kibana的开发工具中，快捷键按下`Ctrl+/`可以直接跳到ES官方的API中**\n\n### 文档的CRUD\n\n```http\n\n#更新（先删除原数据，在新建新数据，同时版本+1）、创建\nPUT {Index}/_doc/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#创建（自动生成ID）\nPOST {Index}/_doc\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#查询 \nGET {Index}/_doc/{id}\n#更新（文档必须已经存在，更新只会对相应字段做增量修改）\nPOST {Index}/_update/{id}\n{\n  \"name\":\"张三\",\n  \"age\":18,\n  \"sex\":\"男\"\n}\n#删除\nDELETE {Index}/_doc/{id}\n```\n\n+ Type名，约定都用_doc\n+ Create：如果ID已经存在，会失败\n+ Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加\n+ Update：文档必须已经存在，更新只会对相应字段做增量修改\n\n> Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1\n\n### Bulk API\n\n+ 在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作\n+ 支持四种类型的操作\n  + Index\n  + Create\n  + Update\n  + Delete\n+ 可以在URL中指定Index，也可以在请求的Payload中进行\n+ 操作中单条操作失败，并不会影响到其他操作\n+ 返回结果包括了每一条操作执行结果\n\n```http\n\nPOST _bulk\n{\"index\":{\"_index\":\"test\",\"_id\":\"1\"}}\n{\"field1\":\"value1\"}\n{\"delete\":{\"_index\":\"test\",\"_id\":\"2\"}}\n{\"create\":{\"_index\":\"test2\",\"_id\":\"3\"}}\n{\"field1\":\"value3\"}\n{\"update\":{\"_index\":\"test3\",\"_id\":\"3\"}}\n{\"doc\":{\"field2\":\"value2\"}}\n```\n\n### 批量读取-MEGT\n\n批量操作，可以减少网络连接所产生的开销，提高性能\n\n```http\n\nGET _mget\n{\n  \"docs\":[\n      {\n        \"_index\":\"users\",\n        \"_id\":1\n      },\n      {\n        \"_index\":\"users\",\n        \"_id\":2\n      }\n    ]\n}\n```\n\n### 批量查询-MSEARCH \n\n```http\n\nPOST {index}/_msearch\n```\n\n### 索引：正排、倒排\n\n正排例如书本的目录，文档ID到文档和单词的关联\n\n倒排书本最后的索引页就是倒排索引，单词到文档ID的关系\n\n**倒排索引的核心组成**\n\n+ 倒排索引包含两个部分\n  + 单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系\n    + 单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询\n  + 倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成\n    + 倒排索引项（Posting ）\n      + 文档ID\n      + 词频TF：该单词问文档中出现的次数，用于相关性评分\n      + 位置（Position）：单词在文档中分词的文职。用于语句搜索\n      + 偏移（Offset）：记录单词的开始结束位置，实现高亮显示\n\n![image-20210309153302897](C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309153302897.png)\n\n### Analysis与Analyzer（分词器）\n\n+ Analysis：文本分析是把全文本转换一系列单词（term/token）的过程，也叫分词\n+ Analysis是通过Analyzer来实现的\n  + 可以使用Elasticsearch内置的分析器/或者按需自定义定制化分析器\n+ 除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析\n\n#### Analyzer（分词器）的组成\n\n+ 分词器是专门处理分词的组件，Analyzer由三部分组成\n  + Character Filters（针对原始文本处理，例如去除html标签）\n  + Tokenizer（按照规则切分为单词）\n  + Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）\n\n#### Elasticsearch内置分词器\n\n+ Standard Analyzer：默认分词器，按词切分，小写处理\n+ Simple Analyzer：按照非字母切分（符号被过滤），小写处理\n+ Stop Analyzer：小写处理，停用词过滤（the、a、is）\n+ Whitespace Analyzer：按照空格切分，不转小写\n+ Keyword Analyzer：不分词，直接降输入当做关键字输出\n+ Patter Analyzer：正则表达式，默认`\\W+`（非支付分隔）\n+ Language：提供了30多种常见语言分词器\n+ Customer Analyzer：自定义分词器\n\n#### 使用_analyzer API\n\n```http\n# 示例\n\n\n# standard：默认分词器，按词切分，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"standard\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# simple：按照非字母切分，非字母都被去除，小写处理\nGET /_analyze\n{\n  \"analyzer\":\"simple\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语\nGET /_analyze\n{\n  \"analyzer\":\"stop\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# whitespace：按照空格切分\nGET /_analyze\n{\n  \"analyzer\":\"whitespace\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n# keyword：关键字\nGET /_analyze\n{\n  \"analyzer\":\"keyword\",\n  \"text\":\"2 Who are you, I am a big pig\"\n}\n\n```\n\n#### ICU Analyzer\n\n+ 需要安装plugin\n  + Elasticsearch-plugin install analysis-icu\n+ 提供了Unicode的支持，更好的支持亚洲语言\n\n#### 更多的中文分词器\n\n+ IK\n  + 支持自定义词库，支持热更新分词字典\n  + https://github.com/medcl/elasticsearch-analysis-ik\n+ THULAC\n  + 清华大学自然语言处理和社会人文计算实验室的一套中文分词器\n  + https://github.com/microbun/elasticsearch-thulac-plugin\n\n## Search 搜索API\n\n+ URL Search\n  + 在url中使用查询参数\n+ Request Body Search\n  + 使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）\n\n**指定查询索引**\n\n| 语法                   | 范围              |\n| ---------------------- | ----------------- |\n| /_search               | 集群上所有的索引  |\n| /index1/_search        | index1            |\n| /index1,index2/_search | index1和index2    |\n| /index*/_search        | 以index开头的索引 |\n\n#### URL查询\n\n`http://{ip}:{port}/{index}/_search?q={field}:{value}`\n\n#### Request Body\n\n```http\nhttp://\n```\n\n","slug":"环境安装/ElasticSearch入门","published":1,"date":"2021-03-10T06:58:49.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6ys000119ia7likam2n","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ElasticSearch入门\"><a href=\"#ElasticSearch入门\" class=\"headerlink\" title=\"ElasticSearch入门\"></a>ElasticSearch入门</h1><h2 id=\"ElasticSearch的基本概念\"><a href=\"#ElasticSearch的基本概念\" class=\"headerlink\" title=\"ElasticSearch的基本概念\"></a>ElasticSearch的基本概念</h2><ul>\n<li><p><strong>Index</strong></p>\n<blockquote>\n<p>类似于mysql数据库中的database（数据库）</p>\n<p>是文档的容器，是一类文档的集合</p>\n<ul>\n<li>Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型</li>\n<li>Shard：体现了物理空间的概念，索引中的数据分散在Shard上</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong><del>Type</del></strong></p>\n<blockquote>\n<p><del>类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。</del></p>\n<p>在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type “_doc”。</p>\n</blockquote>\n</li>\n<li><p><strong>Document</strong></p>\n<blockquote>\n<p>由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。</p>\n<p>文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成</p>\n</blockquote>\n</li>\n<li><p><strong>Field</strong></p>\n<blockquote>\n<p>es中一个文档中对应的多个列与mysql数据库中每一列对应。字段</p>\n</blockquote>\n</li>\n<li><p><strong>Mapping</strong></p>\n<blockquote>\n<p>文档字段类型</p>\n</blockquote>\n</li>\n<li><p><strong>indexed</strong></p>\n<blockquote>\n<p>就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。</p>\n</blockquote>\n</li>\n<li><p><strong>Query DSL</strong></p>\n<blockquote>\n<p>类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL</p>\n</blockquote>\n</li>\n<li><p><strong>GET&#x2F;PUT&#x2F;POST&#x2F;DELETE</strong></p>\n<blockquote>\n<p>分别类似与mysql中的select&#x2F;update&#x2F;delete……</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"类比：\"><a href=\"#类比：\" class=\"headerlink\" title=\"类比：\"></a>类比：</h3><table>\n<thead>\n<tr>\n<th>关系型数据库</th>\n<th>ES</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Table</td>\n<td>Index（Type）</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>Schema（表定义）</td>\n<td>Mapping</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>DSL</td>\n</tr>\n</tbody></table>\n<p><strong>每个文档都会有相应的元数据</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><br></code></pre></td></tr></table></figure>\n\n<p>元数据用于标注文档的相关信息：</p>\n<ul>\n<li>_index：文档所属索引名（库名）</li>\n<li>_type：文档所属类型名（表名）</li>\n<li>_id：唯一ID</li>\n<li>_source：原始JSON数据</li>\n<li><del>_all：整合所有内容到该字段，7.0版本已被废除</del></li>\n<li>_version：版本号</li>\n<li>_score：相关性打分</li>\n</ul>\n<h2 id=\"分布式系统的可用性和扩展性\"><a href=\"#分布式系统的可用性和扩展性\" class=\"headerlink\" title=\"分布式系统的可用性和扩展性\"></a>分布式系统的可用性和扩展性</h2><ul>\n<li>高可用<ul>\n<li>服务可用性-允许所有节点停止服务</li>\n<li>数据可用性-部分节点丢失，不会丢失数据</li>\n</ul>\n</li>\n<li>可扩展<ul>\n<li>请求量提升&#x2F;数据不断的增长（将数据分布到所有节点上）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分布式特性\"><a href=\"#分布式特性\" class=\"headerlink\" title=\"分布式特性\"></a>分布式特性</h3><ul>\n<li>ElasticSearch的分布式架构好处<ul>\n<li>存储的水平扩容</li>\n<li>提高系统的可用性，部分节点停止服务，整个集群的服务不受影响</li>\n</ul>\n</li>\n<li>ElasticSearch分布式架构<ul>\n<li>不同的集群通过不同的名字来区分，默认为“elasticSearch”</li>\n<li>通过配置文件可修改，或者在命令行中 <code>-E cluster-name=test </code> 进行设定</li>\n<li>一个集群可以有一个或多个节点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Master-eligible-nodes（Master候选者）-和-Master-Node\"><a href=\"#Master-eligible-nodes（Master候选者）-和-Master-Node\" class=\"headerlink\" title=\"Master-eligible nodes（Master候选者） 和 Master Node\"></a>Master-eligible nodes（Master候选者） 和 Master Node</h3><ul>\n<li>每个节点启动后，默认就是一个Master-eligible节点<ul>\n<li>可以设置 <code>node.master:false</code> 禁止</li>\n</ul>\n</li>\n<li>Master-eligible节点可以参加选主流程，称为Master Node节点</li>\n<li>当第一个节点启动的时候，会将自己选举成Master Node节点</li>\n<li>每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）<ul>\n<li>集群状态（Cluster State），维护了一个集群中，必要的信息<ul>\n<li>所有的节点信息</li>\n<li>所有的索引和相关的Mapping和Setting信息</li>\n<li>分片的路由信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Date-Node-amp-Coordinating-Node（数据整合节点）\"><a href=\"#Date-Node-amp-Coordinating-Node（数据整合节点）\" class=\"headerlink\" title=\"Date Node &amp; Coordinating Node（数据整合节点）\"></a>Date Node &amp; Coordinating Node（数据整合节点）</h3><ul>\n<li>Data Node<ul>\n<li>可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用</li>\n</ul>\n</li>\n<li>Coordinating Node<ul>\n<li>负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起</li>\n<li>每个节点默认都起到Coordinating Node的职责</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他节点类型\"><a href=\"#其他节点类型\" class=\"headerlink\" title=\"其他节点类型\"></a>其他节点类型</h3><ul>\n<li>Hot &amp; Warm Node（冷热节点）<ul>\n<li>不同硬件配置的Data Node，用来实现Hot &amp; Warm架构，降低就能部署的成本</li>\n</ul>\n</li>\n<li>Machine Learning Node<ul>\n<li>负责跑机器学习的Job，用来做异常检测的</li>\n</ul>\n</li>\n<li><del>Tribe Node</del><ul>\n<li>（5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置节点类型\"><a href=\"#配置节点类型\" class=\"headerlink\" title=\"配置节点类型\"></a>配置节点类型</h3><ul>\n<li>开发环境中一个节点可以承担多种角色</li>\n<li>生产环境中，应该设置单一的角色的节点（dedicated node）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>节点类型</th>\n<th>配置参数</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>maste eligible</td>\n<td>node.master</td>\n<td>true</td>\n</tr>\n<tr>\n<td>data</td>\n<td>node.data</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ingest</td>\n<td>node.ingest</td>\n<td>true</td>\n</tr>\n<tr>\n<td>coordinating only</td>\n<td>无</td>\n<td>每个节点默认都是coordinating节点，设置其他类型全部为false</td>\n</tr>\n<tr>\n<td>machine learning</td>\n<td>node.ml</td>\n<td>true（需enable x-pack）</td>\n</tr>\n</tbody></table>\n<h3 id=\"分片（Primary-Shard-amp-Replica-Shard）\"><a href=\"#分片（Primary-Shard-amp-Replica-Shard）\" class=\"headerlink\" title=\"分片（Primary Shard &amp; Replica Shard）\"></a>分片（Primary Shard &amp; Replica Shard）</h3><ul>\n<li>主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商<ul>\n<li>一个分片是一个运行的Lucene（搜索引擎）的实例</li>\n<li>主分片数在索引创建时指定，后续不允许修改，除非Reindex</li>\n</ul>\n</li>\n<li>副本，用以解决数据高可用的问题。副本是主分片的拷贝<ul>\n<li>副本分片数，可以动态调整</li>\n<li>增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看集群的健康状况\"><a href=\"#查看集群的健康状况\" class=\"headerlink\" title=\"查看集群的健康状况\"></a>查看集群的健康状况</h3><p><img src=\"C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png\" alt=\"image-20210309114915854\"></p>\n<p><strong>在Kibana的开发工具中，快捷键按下<code>Ctrl+/</code>可以直接跳到ES官方的API中</strong></p>\n<h3 id=\"文档的CRUD\"><a href=\"#文档的CRUD\" class=\"headerlink\" title=\"文档的CRUD\"></a>文档的CRUD</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>#更新（先删除原数据，在新建新数据，同时版本+1）、创建<br>PUT &#123;Index&#125;/_doc/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#创建（自动生成ID）<br>POST &#123;Index&#125;/_doc<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#查询 <br>GET &#123;Index&#125;/_doc/&#123;id&#125;<br>#更新（文档必须已经存在，更新只会对相应字段做增量修改）<br>POST &#123;Index&#125;/_update/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#删除<br>DELETE &#123;Index&#125;/_doc/&#123;id&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Type名，约定都用_doc</li>\n<li>Create：如果ID已经存在，会失败</li>\n<li>Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加</li>\n<li>Update：文档必须已经存在，更新只会对相应字段做增量修改</li>\n</ul>\n<blockquote>\n<p>Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1</p>\n</blockquote>\n<h3 id=\"Bulk-API\"><a href=\"#Bulk-API\" class=\"headerlink\" title=\"Bulk API\"></a>Bulk API</h3><ul>\n<li>在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作</li>\n<li>支持四种类型的操作<ul>\n<li>Index</li>\n<li>Create</li>\n<li>Update</li>\n<li>Delete</li>\n</ul>\n</li>\n<li>可以在URL中指定Index，也可以在请求的Payload中进行</li>\n<li>操作中单条操作失败，并不会影响到其他操作</li>\n<li>返回结果包括了每一条操作执行结果</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST _bulk<br>&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value1&quot;&#125;<br>&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;<br>&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;test2&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value3&quot;&#125;<br>&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;test3&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;doc&quot;:&#123;&quot;field2&quot;:&quot;value2&quot;&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量读取-MEGT\"><a href=\"#批量读取-MEGT\" class=\"headerlink\" title=\"批量读取-MEGT\"></a>批量读取-MEGT</h3><p>批量操作，可以减少网络连接所产生的开销，提高性能</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>GET _mget<br>&#123;<br>  &quot;docs&quot;:[<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:1<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:2<br>      &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量查询-MSEARCH\"><a href=\"#批量查询-MSEARCH\" class=\"headerlink\" title=\"批量查询-MSEARCH\"></a>批量查询-MSEARCH</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST &#123;index&#125;/_msearch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"索引：正排、倒排\"><a href=\"#索引：正排、倒排\" class=\"headerlink\" title=\"索引：正排、倒排\"></a>索引：正排、倒排</h3><p>正排例如书本的目录，文档ID到文档和单词的关联</p>\n<p>倒排书本最后的索引页就是倒排索引，单词到文档ID的关系</p>\n<p><strong>倒排索引的核心组成</strong></p>\n<ul>\n<li>倒排索引包含两个部分<ul>\n<li>单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系<ul>\n<li>单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询</li>\n</ul>\n</li>\n<li>倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成<ul>\n<li>倒排索引项（Posting ）<ul>\n<li>文档ID</li>\n<li>词频TF：该单词问文档中出现的次数，用于相关性评分</li>\n<li>位置（Position）：单词在文档中分词的文职。用于语句搜索</li>\n<li>偏移（Offset）：记录单词的开始结束位置，实现高亮显示</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309153302897.png\" alt=\"image-20210309153302897\"></p>\n<h3 id=\"Analysis与Analyzer（分词器）\"><a href=\"#Analysis与Analyzer（分词器）\" class=\"headerlink\" title=\"Analysis与Analyzer（分词器）\"></a>Analysis与Analyzer（分词器）</h3><ul>\n<li>Analysis：文本分析是把全文本转换一系列单词（term&#x2F;token）的过程，也叫分词</li>\n<li>Analysis是通过Analyzer来实现的<ul>\n<li>可以使用Elasticsearch内置的分析器&#x2F;或者按需自定义定制化分析器</li>\n</ul>\n</li>\n<li>除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析</li>\n</ul>\n<h4 id=\"Analyzer（分词器）的组成\"><a href=\"#Analyzer（分词器）的组成\" class=\"headerlink\" title=\"Analyzer（分词器）的组成\"></a>Analyzer（分词器）的组成</h4><ul>\n<li>分词器是专门处理分词的组件，Analyzer由三部分组成<ul>\n<li>Character Filters（针对原始文本处理，例如去除html标签）</li>\n<li>Tokenizer（按照规则切分为单词）</li>\n<li>Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Elasticsearch内置分词器\"><a href=\"#Elasticsearch内置分词器\" class=\"headerlink\" title=\"Elasticsearch内置分词器\"></a>Elasticsearch内置分词器</h4><ul>\n<li>Standard Analyzer：默认分词器，按词切分，小写处理</li>\n<li>Simple Analyzer：按照非字母切分（符号被过滤），小写处理</li>\n<li>Stop Analyzer：小写处理，停用词过滤（the、a、is）</li>\n<li>Whitespace Analyzer：按照空格切分，不转小写</li>\n<li>Keyword Analyzer：不分词，直接降输入当做关键字输出</li>\n<li>Patter Analyzer：正则表达式，默认<code>\\W+</code>（非支付分隔）</li>\n<li>Language：提供了30多种常见语言分词器</li>\n<li>Customer Analyzer：自定义分词器</li>\n</ul>\n<h4 id=\"使用-analyzer-API\"><a href=\"#使用-analyzer-API\" class=\"headerlink\" title=\"使用_analyzer API\"></a>使用_analyzer API</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"># 示例<br><br><br># standard：默认分词器，按词切分，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;standard&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># simple：按照非字母切分，非字母都被去除，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;simple&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;stop&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># whitespace：按照空格切分<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;whitespace&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># keyword：关键字<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;keyword&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ICU-Analyzer\"><a href=\"#ICU-Analyzer\" class=\"headerlink\" title=\"ICU Analyzer\"></a>ICU Analyzer</h4><ul>\n<li>需要安装plugin<ul>\n<li>Elasticsearch-plugin install analysis-icu</li>\n</ul>\n</li>\n<li>提供了Unicode的支持，更好的支持亚洲语言</li>\n</ul>\n<h4 id=\"更多的中文分词器\"><a href=\"#更多的中文分词器\" class=\"headerlink\" title=\"更多的中文分词器\"></a>更多的中文分词器</h4><ul>\n<li>IK<ul>\n<li>支持自定义词库，支持热更新分词字典</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\">https://github.com/medcl/elasticsearch-analysis-ik</a></li>\n</ul>\n</li>\n<li>THULAC<ul>\n<li>清华大学自然语言处理和社会人文计算实验室的一套中文分词器</li>\n<li><a href=\"https://github.com/microbun/elasticsearch-thulac-plugin\">https://github.com/microbun/elasticsearch-thulac-plugin</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Search-搜索API\"><a href=\"#Search-搜索API\" class=\"headerlink\" title=\"Search 搜索API\"></a>Search 搜索API</h2><ul>\n<li>URL Search<ul>\n<li>在url中使用查询参数</li>\n</ul>\n</li>\n<li>Request Body Search<ul>\n<li>使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）</li>\n</ul>\n</li>\n</ul>\n<p><strong>指定查询索引</strong></p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;_search</td>\n<td>集群上所有的索引</td>\n</tr>\n<tr>\n<td>&#x2F;index1&#x2F;_search</td>\n<td>index1</td>\n</tr>\n<tr>\n<td>&#x2F;index1,index2&#x2F;_search</td>\n<td>index1和index2</td>\n</tr>\n<tr>\n<td>&#x2F;index*&#x2F;_search</td>\n<td>以index开头的索引</td>\n</tr>\n</tbody></table>\n<h4 id=\"URL查询\"><a href=\"#URL查询\" class=\"headerlink\" title=\"URL查询\"></a>URL查询</h4><p><code>http://&#123;ip&#125;:&#123;port&#125;/&#123;index&#125;/_search?q=&#123;field&#125;:&#123;value&#125;</code></p>\n<h4 id=\"Request-Body\"><a href=\"#Request-Body\" class=\"headerlink\" title=\"Request Body\"></a>Request Body</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\">http://<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ElasticSearch入门\"><a href=\"#ElasticSearch入门\" class=\"headerlink\" title=\"ElasticSearch入门\"></a>ElasticSearch入门</h1><h2 id=\"ElasticSearch的基本概念\"><a href=\"#ElasticSearch的基本概念\" class=\"headerlink\" title=\"ElasticSearch的基本概念\"></a>ElasticSearch的基本概念</h2><ul>\n<li><p><strong>Index</strong></p>\n<blockquote>\n<p>类似于mysql数据库中的database（数据库）</p>\n<p>是文档的容器，是一类文档的集合</p>\n<ul>\n<li>Index：体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定于包含的文档的字段名和字段类型</li>\n<li>Shard：体现了物理空间的概念，索引中的数据分散在Shard上</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong><del>Type</del></strong></p>\n<blockquote>\n<p><del>类似于mysql数据库中的table（表），es中可以在Index中建立type（table），通过mapping进行映射。</del></p>\n<p>在7.0之前，一个Index可以设置多个Type，6.0开始Type已经被废除。7.0开始，一个索引只能创建一个Type “_doc”。</p>\n</blockquote>\n</li>\n<li><p><strong>Document</strong></p>\n<blockquote>\n<p>由于es存储的数据是文档型的，一条数据对应一篇文档即相当于mysql数据库中的一行数据row，一个文档中可以有多个字段也就是mysql数据库一行可以有多列。与MongoDB存储JSON类似。</p>\n<p>文档会被序列化成JSON格式保存在ES中、每个文档都有唯一的ID（Unique ID），可以自己指定或者ES生成</p>\n</blockquote>\n</li>\n<li><p><strong>Field</strong></p>\n<blockquote>\n<p>es中一个文档中对应的多个列与mysql数据库中每一列对应。字段</p>\n</blockquote>\n</li>\n<li><p><strong>Mapping</strong></p>\n<blockquote>\n<p>文档字段类型</p>\n</blockquote>\n</li>\n<li><p><strong>indexed</strong></p>\n<blockquote>\n<p>就是名义上的建立索引。mysql中一般会对经常使用的列增加相应的索引用于提高查询速度，而在es中默认都是会加上索引的，除非你特殊制定不建立索引只是进行存储用于展示，这个需要看你具体的需求和业务进行设定了。</p>\n</blockquote>\n</li>\n<li><p><strong>Query DSL</strong></p>\n<blockquote>\n<p>类似于mysql的sql语句，只不过在es中是使用的json格式的查询语句，专业术语就叫：QueryDSL</p>\n</blockquote>\n</li>\n<li><p><strong>GET&#x2F;PUT&#x2F;POST&#x2F;DELETE</strong></p>\n<blockquote>\n<p>分别类似与mysql中的select&#x2F;update&#x2F;delete……</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"类比：\"><a href=\"#类比：\" class=\"headerlink\" title=\"类比：\"></a>类比：</h3><table>\n<thead>\n<tr>\n<th>关系型数据库</th>\n<th>ES</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Table</td>\n<td>Index（Type）</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>Schema（表定义）</td>\n<td>Mapping</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>DSL</td>\n</tr>\n</tbody></table>\n<p><strong>每个文档都会有相应的元数据</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><br></code></pre></td></tr></table></figure>\n\n<p>元数据用于标注文档的相关信息：</p>\n<ul>\n<li>_index：文档所属索引名（库名）</li>\n<li>_type：文档所属类型名（表名）</li>\n<li>_id：唯一ID</li>\n<li>_source：原始JSON数据</li>\n<li><del>_all：整合所有内容到该字段，7.0版本已被废除</del></li>\n<li>_version：版本号</li>\n<li>_score：相关性打分</li>\n</ul>\n<h2 id=\"分布式系统的可用性和扩展性\"><a href=\"#分布式系统的可用性和扩展性\" class=\"headerlink\" title=\"分布式系统的可用性和扩展性\"></a>分布式系统的可用性和扩展性</h2><ul>\n<li>高可用<ul>\n<li>服务可用性-允许所有节点停止服务</li>\n<li>数据可用性-部分节点丢失，不会丢失数据</li>\n</ul>\n</li>\n<li>可扩展<ul>\n<li>请求量提升&#x2F;数据不断的增长（将数据分布到所有节点上）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分布式特性\"><a href=\"#分布式特性\" class=\"headerlink\" title=\"分布式特性\"></a>分布式特性</h3><ul>\n<li>ElasticSearch的分布式架构好处<ul>\n<li>存储的水平扩容</li>\n<li>提高系统的可用性，部分节点停止服务，整个集群的服务不受影响</li>\n</ul>\n</li>\n<li>ElasticSearch分布式架构<ul>\n<li>不同的集群通过不同的名字来区分，默认为“elasticSearch”</li>\n<li>通过配置文件可修改，或者在命令行中 <code>-E cluster-name=test </code> 进行设定</li>\n<li>一个集群可以有一个或多个节点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Master-eligible-nodes（Master候选者）-和-Master-Node\"><a href=\"#Master-eligible-nodes（Master候选者）-和-Master-Node\" class=\"headerlink\" title=\"Master-eligible nodes（Master候选者） 和 Master Node\"></a>Master-eligible nodes（Master候选者） 和 Master Node</h3><ul>\n<li>每个节点启动后，默认就是一个Master-eligible节点<ul>\n<li>可以设置 <code>node.master:false</code> 禁止</li>\n</ul>\n</li>\n<li>Master-eligible节点可以参加选主流程，称为Master Node节点</li>\n<li>当第一个节点启动的时候，会将自己选举成Master Node节点</li>\n<li>每个节点都保存了集群的状态，只有Master节点才能修改集群状态信息（如果任意节点都能修改信息的话，那么会造成数据不一致）<ul>\n<li>集群状态（Cluster State），维护了一个集群中，必要的信息<ul>\n<li>所有的节点信息</li>\n<li>所有的索引和相关的Mapping和Setting信息</li>\n<li>分片的路由信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Date-Node-amp-Coordinating-Node（数据整合节点）\"><a href=\"#Date-Node-amp-Coordinating-Node（数据整合节点）\" class=\"headerlink\" title=\"Date Node &amp; Coordinating Node（数据整合节点）\"></a>Date Node &amp; Coordinating Node（数据整合节点）</h3><ul>\n<li>Data Node<ul>\n<li>可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了至关重要的作用</li>\n</ul>\n</li>\n<li>Coordinating Node<ul>\n<li>负责接收Client的请求，将请求分发到合适的几点，最终把结果汇集到一起</li>\n<li>每个节点默认都起到Coordinating Node的职责</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他节点类型\"><a href=\"#其他节点类型\" class=\"headerlink\" title=\"其他节点类型\"></a>其他节点类型</h3><ul>\n<li>Hot &amp; Warm Node（冷热节点）<ul>\n<li>不同硬件配置的Data Node，用来实现Hot &amp; Warm架构，降低就能部署的成本</li>\n</ul>\n</li>\n<li>Machine Learning Node<ul>\n<li>负责跑机器学习的Job，用来做异常检测的</li>\n</ul>\n</li>\n<li><del>Tribe Node</del><ul>\n<li>（5.3开始使用Cross Cluster Serarch）Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单例的集群处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置节点类型\"><a href=\"#配置节点类型\" class=\"headerlink\" title=\"配置节点类型\"></a>配置节点类型</h3><ul>\n<li>开发环境中一个节点可以承担多种角色</li>\n<li>生产环境中，应该设置单一的角色的节点（dedicated node）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>节点类型</th>\n<th>配置参数</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>maste eligible</td>\n<td>node.master</td>\n<td>true</td>\n</tr>\n<tr>\n<td>data</td>\n<td>node.data</td>\n<td>true</td>\n</tr>\n<tr>\n<td>ingest</td>\n<td>node.ingest</td>\n<td>true</td>\n</tr>\n<tr>\n<td>coordinating only</td>\n<td>无</td>\n<td>每个节点默认都是coordinating节点，设置其他类型全部为false</td>\n</tr>\n<tr>\n<td>machine learning</td>\n<td>node.ml</td>\n<td>true（需enable x-pack）</td>\n</tr>\n</tbody></table>\n<h3 id=\"分片（Primary-Shard-amp-Replica-Shard）\"><a href=\"#分片（Primary-Shard-amp-Replica-Shard）\" class=\"headerlink\" title=\"分片（Primary Shard &amp; Replica Shard）\"></a>分片（Primary Shard &amp; Replica Shard）</h3><ul>\n<li>主分片，用以解决数据水平扩展的问题。用过主分片，可以将数据分布到集群内的所有节点智商<ul>\n<li>一个分片是一个运行的Lucene（搜索引擎）的实例</li>\n<li>主分片数在索引创建时指定，后续不允许修改，除非Reindex</li>\n</ul>\n</li>\n<li>副本，用以解决数据高可用的问题。副本是主分片的拷贝<ul>\n<li>副本分片数，可以动态调整</li>\n<li>增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查看集群的健康状况\"><a href=\"#查看集群的健康状况\" class=\"headerlink\" title=\"查看集群的健康状况\"></a>查看集群的健康状况</h3><p><img src=\"C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309114915854.png\" alt=\"image-20210309114915854\"></p>\n<p><strong>在Kibana的开发工具中，快捷键按下<code>Ctrl+/</code>可以直接跳到ES官方的API中</strong></p>\n<h3 id=\"文档的CRUD\"><a href=\"#文档的CRUD\" class=\"headerlink\" title=\"文档的CRUD\"></a>文档的CRUD</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>#更新（先删除原数据，在新建新数据，同时版本+1）、创建<br>PUT &#123;Index&#125;/_doc/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#创建（自动生成ID）<br>POST &#123;Index&#125;/_doc<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#查询 <br>GET &#123;Index&#125;/_doc/&#123;id&#125;<br>#更新（文档必须已经存在，更新只会对相应字段做增量修改）<br>POST &#123;Index&#125;/_update/&#123;id&#125;<br>&#123;<br>  &quot;name&quot;:&quot;张三&quot;,<br>  &quot;age&quot;:18,<br>  &quot;sex&quot;:&quot;男&quot;<br>&#125;<br>#删除<br>DELETE &#123;Index&#125;/_doc/&#123;id&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>Type名，约定都用_doc</li>\n<li>Create：如果ID已经存在，会失败</li>\n<li>Index：如果ID不存在，创建新的文档，否则，先删除现有文档，再创建新的文档，版本会增加</li>\n<li>Update：文档必须已经存在，更新只会对相应字段做增量修改</li>\n</ul>\n<blockquote>\n<p>Index和Create不一样的地方在于：如果文档不存在，就索引新的文档。否则现有文档会被删除，新的文档被索引。版本信息+1</p>\n</blockquote>\n<h3 id=\"Bulk-API\"><a href=\"#Bulk-API\" class=\"headerlink\" title=\"Bulk API\"></a>Bulk API</h3><ul>\n<li>在一次请求调用中，进行多次不同的操作，支持在一次API调用中，对不同的索引进行操作</li>\n<li>支持四种类型的操作<ul>\n<li>Index</li>\n<li>Create</li>\n<li>Update</li>\n<li>Delete</li>\n</ul>\n</li>\n<li>可以在URL中指定Index，也可以在请求的Payload中进行</li>\n<li>操作中单条操作失败，并不会影响到其他操作</li>\n<li>返回结果包括了每一条操作执行结果</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST _bulk<br>&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value1&quot;&#125;<br>&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;<br>&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;test2&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;field1&quot;:&quot;value3&quot;&#125;<br>&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;test3&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;<br>&#123;&quot;doc&quot;:&#123;&quot;field2&quot;:&quot;value2&quot;&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量读取-MEGT\"><a href=\"#批量读取-MEGT\" class=\"headerlink\" title=\"批量读取-MEGT\"></a>批量读取-MEGT</h3><p>批量操作，可以减少网络连接所产生的开销，提高性能</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>GET _mget<br>&#123;<br>  &quot;docs&quot;:[<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:1<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;:&quot;users&quot;,<br>        &quot;_id&quot;:2<br>      &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"批量查询-MSEARCH\"><a href=\"#批量查询-MSEARCH\" class=\"headerlink\" title=\"批量查询-MSEARCH\"></a>批量查询-MSEARCH</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br>POST &#123;index&#125;/_msearch<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"索引：正排、倒排\"><a href=\"#索引：正排、倒排\" class=\"headerlink\" title=\"索引：正排、倒排\"></a>索引：正排、倒排</h3><p>正排例如书本的目录，文档ID到文档和单词的关联</p>\n<p>倒排书本最后的索引页就是倒排索引，单词到文档ID的关系</p>\n<p><strong>倒排索引的核心组成</strong></p>\n<ul>\n<li>倒排索引包含两个部分<ul>\n<li>单词词典（Term Dictionary），记录所有文档的单词，记录单词到到倒排列表的关联关系<ul>\n<li>单词词典一般比较大，可以通过B+树或Hash拉链法实现，以满足高性能的插入与查询</li>\n</ul>\n</li>\n<li>倒排列表（Posting List）-记录了单词对应的文档结合，由倒排索引组成<ul>\n<li>倒排索引项（Posting ）<ul>\n<li>文档ID</li>\n<li>词频TF：该单词问文档中出现的次数，用于相关性评分</li>\n<li>位置（Position）：单词在文档中分词的文职。用于语句搜索</li>\n<li>偏移（Offset）：记录单词的开始结束位置，实现高亮显示</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:\\Users\\ZC\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210309153302897.png\" alt=\"image-20210309153302897\"></p>\n<h3 id=\"Analysis与Analyzer（分词器）\"><a href=\"#Analysis与Analyzer（分词器）\" class=\"headerlink\" title=\"Analysis与Analyzer（分词器）\"></a>Analysis与Analyzer（分词器）</h3><ul>\n<li>Analysis：文本分析是把全文本转换一系列单词（term&#x2F;token）的过程，也叫分词</li>\n<li>Analysis是通过Analyzer来实现的<ul>\n<li>可以使用Elasticsearch内置的分析器&#x2F;或者按需自定义定制化分析器</li>\n</ul>\n</li>\n<li>除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器对查询语句进行分析</li>\n</ul>\n<h4 id=\"Analyzer（分词器）的组成\"><a href=\"#Analyzer（分词器）的组成\" class=\"headerlink\" title=\"Analyzer（分词器）的组成\"></a>Analyzer（分词器）的组成</h4><ul>\n<li>分词器是专门处理分词的组件，Analyzer由三部分组成<ul>\n<li>Character Filters（针对原始文本处理，例如去除html标签）</li>\n<li>Tokenizer（按照规则切分为单词）</li>\n<li>Token Filter（将切分的单词进行加工，小写，删除stopwords（停用词），增加同义词）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Elasticsearch内置分词器\"><a href=\"#Elasticsearch内置分词器\" class=\"headerlink\" title=\"Elasticsearch内置分词器\"></a>Elasticsearch内置分词器</h4><ul>\n<li>Standard Analyzer：默认分词器，按词切分，小写处理</li>\n<li>Simple Analyzer：按照非字母切分（符号被过滤），小写处理</li>\n<li>Stop Analyzer：小写处理，停用词过滤（the、a、is）</li>\n<li>Whitespace Analyzer：按照空格切分，不转小写</li>\n<li>Keyword Analyzer：不分词，直接降输入当做关键字输出</li>\n<li>Patter Analyzer：正则表达式，默认<code>\\W+</code>（非支付分隔）</li>\n<li>Language：提供了30多种常见语言分词器</li>\n<li>Customer Analyzer：自定义分词器</li>\n</ul>\n<h4 id=\"使用-analyzer-API\"><a href=\"#使用-analyzer-API\" class=\"headerlink\" title=\"使用_analyzer API\"></a>使用_analyzer API</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"># 示例<br><br><br># standard：默认分词器，按词切分，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;standard&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># simple：按照非字母切分，非字母都被去除，小写处理<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;simple&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># stop：相比Simple多了stop filter，停用词过滤（the、a、is）去除修饰性词语<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;stop&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># whitespace：按照空格切分<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;whitespace&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br># keyword：关键字<br>GET /_analyze<br>&#123;<br>  &quot;analyzer&quot;:&quot;keyword&quot;,<br>  &quot;text&quot;:&quot;2 Who are you, I am a big pig&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ICU-Analyzer\"><a href=\"#ICU-Analyzer\" class=\"headerlink\" title=\"ICU Analyzer\"></a>ICU Analyzer</h4><ul>\n<li>需要安装plugin<ul>\n<li>Elasticsearch-plugin install analysis-icu</li>\n</ul>\n</li>\n<li>提供了Unicode的支持，更好的支持亚洲语言</li>\n</ul>\n<h4 id=\"更多的中文分词器\"><a href=\"#更多的中文分词器\" class=\"headerlink\" title=\"更多的中文分词器\"></a>更多的中文分词器</h4><ul>\n<li>IK<ul>\n<li>支持自定义词库，支持热更新分词字典</li>\n<li><a href=\"https://github.com/medcl/elasticsearch-analysis-ik\">https://github.com/medcl/elasticsearch-analysis-ik</a></li>\n</ul>\n</li>\n<li>THULAC<ul>\n<li>清华大学自然语言处理和社会人文计算实验室的一套中文分词器</li>\n<li><a href=\"https://github.com/microbun/elasticsearch-thulac-plugin\">https://github.com/microbun/elasticsearch-thulac-plugin</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Search-搜索API\"><a href=\"#Search-搜索API\" class=\"headerlink\" title=\"Search 搜索API\"></a>Search 搜索API</h2><ul>\n<li>URL Search<ul>\n<li>在url中使用查询参数</li>\n</ul>\n</li>\n<li>Request Body Search<ul>\n<li>使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language（DSL）</li>\n</ul>\n</li>\n</ul>\n<p><strong>指定查询索引</strong></p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;_search</td>\n<td>集群上所有的索引</td>\n</tr>\n<tr>\n<td>&#x2F;index1&#x2F;_search</td>\n<td>index1</td>\n</tr>\n<tr>\n<td>&#x2F;index1,index2&#x2F;_search</td>\n<td>index1和index2</td>\n</tr>\n<tr>\n<td>&#x2F;index*&#x2F;_search</td>\n<td>以index开头的索引</td>\n</tr>\n</tbody></table>\n<h4 id=\"URL查询\"><a href=\"#URL查询\" class=\"headerlink\" title=\"URL查询\"></a>URL查询</h4><p><code>http://&#123;ip&#125;:&#123;port&#125;/&#123;index&#125;/_search?q=&#123;field&#125;:&#123;value&#125;</code></p>\n<h4 id=\"Request-Body\"><a href=\"#Request-Body\" class=\"headerlink\" title=\"Request Body\"></a>Request Body</h4><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\">http://<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# Jenkins 集成 SonarQube Scanner\n\n## 1. 安装Jenkins\n\n下载安装包，这里我们下载war包：https://jenkins.io/download/\n\n运行**jenkins.war**的方式有两种：\n\n第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）\n\n第二种：直接执行 **java -jar jenkins.war --httpPort=8080**\n\n第三种：Docker方式部署：\n\n```shell\n#查看jenkins版本命令\ndocker search jenkins\n#拉取镜像命令(不标注表示最新的)\ndocker pull jenkins\n#本文的挂载目录是home下\nmkdir /home/jenkins\n#修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误\nchown -R 1000:1000 /home/jenkins/\n#运用镜像启动容器命令\ndocker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins\n```\n\nhttps://jenkins.io/doc/pipeline/tour/getting-started/\n\n这里我们选择第一种方式\n\n启动tomcat（bin/startup.sh）访问 http://localhost:8080/jenkins/\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png)\n\nJenkins安装完成。\n\n## 2.安装SonarQube Scanner插件\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png)\n\n安装完成后、配置SonarQube\n\n在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png)\n\n接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token\n\n在Jenkins中的系统配置中设置SonarQube servers的token\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png)\n\n在Jenkins中的全局配置中安装SonarQube servers\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png)\n\n## 3.创建任务\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png)\n\n配置SVN或者GIT的配置\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png)\n\n最最重要的是，配置SonarQube **analysis properties**\n\n可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍\n\n```properties\nsonar.projectKey=${JOB_NAME}\nsonar.sources=.\nsonar.projectName=${JOB_NAME}\nsonar.projectVersion=${BUILD_VERSION}\n\nsonar.language=java\nsonar.sourceEncoding=UTF-8\n\nsonar.sources=$WORKSPACE\nsonar.java.binaries=$WORKSPACE\n```\n\n其中，sonar.java.binaries属性至关重要，笔者也是试了好多次\n\n相关文档在这里：\n\nhttps://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\n\nhttps://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode","source":"_posts/环境安装/Jenkins集成SonarQube.md","raw":"---\ncategories:\n  - 环境安装\n---\n# Jenkins 集成 SonarQube Scanner\n\n## 1. 安装Jenkins\n\n下载安装包，这里我们下载war包：https://jenkins.io/download/\n\n运行**jenkins.war**的方式有两种：\n\n第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）\n\n第二种：直接执行 **java -jar jenkins.war --httpPort=8080**\n\n第三种：Docker方式部署：\n\n```shell\n#查看jenkins版本命令\ndocker search jenkins\n#拉取镜像命令(不标注表示最新的)\ndocker pull jenkins\n#本文的挂载目录是home下\nmkdir /home/jenkins\n#修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误\nchown -R 1000:1000 /home/jenkins/\n#运用镜像启动容器命令\ndocker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins\n```\n\nhttps://jenkins.io/doc/pipeline/tour/getting-started/\n\n这里我们选择第一种方式\n\n启动tomcat（bin/startup.sh）访问 http://localhost:8080/jenkins/\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png)\n\nJenkins安装完成。\n\n## 2.安装SonarQube Scanner插件\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png)\n\n安装完成后、配置SonarQube\n\n在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png)\n\n接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token\n\n在Jenkins中的系统配置中设置SonarQube servers的token\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png)\n\n在Jenkins中的全局配置中安装SonarQube servers\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png)\n\n## 3.创建任务\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png)\n\n配置SVN或者GIT的配置\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png)\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png)\n\n最最重要的是，配置SonarQube **analysis properties**\n\n可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍\n\n```properties\nsonar.projectKey=${JOB_NAME}\nsonar.sources=.\nsonar.projectName=${JOB_NAME}\nsonar.projectVersion=${BUILD_VERSION}\n\nsonar.language=java\nsonar.sourceEncoding=UTF-8\n\nsonar.sources=$WORKSPACE\nsonar.java.binaries=$WORKSPACE\n```\n\n其中，sonar.java.binaries属性至关重要，笔者也是试了好多次\n\n相关文档在这里：\n\nhttps://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\n\nhttps://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode","slug":"环境安装/Jenkins集成SonarQube","published":1,"date":"2020-09-22T11:49:32.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6yu000219iagjvz8u2m","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Jenkins-集成-SonarQube-Scanner\"><a href=\"#Jenkins-集成-SonarQube-Scanner\" class=\"headerlink\" title=\"Jenkins 集成 SonarQube Scanner\"></a>Jenkins 集成 SonarQube Scanner</h1><h2 id=\"1-安装Jenkins\"><a href=\"#1-安装Jenkins\" class=\"headerlink\" title=\"1. 安装Jenkins\"></a>1. 安装Jenkins</h2><p>下载安装包，这里我们下载war包：<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a></p>\n<p>运行<strong>jenkins.war</strong>的方式有两种：</p>\n<p>第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）</p>\n<p>第二种：直接执行 <strong>java -jar jenkins.war –httpPort&#x3D;8080</strong></p>\n<p>第三种：Docker方式部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看jenkins版本命令</span><br>docker search jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像命令(不标注表示最新的)</span><br>docker pull jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">本文的挂载目录是home下</span><br>mkdir /home/jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误</span><br>chown -R 1000:1000 /home/jenkins/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">运用镜像启动容器命令</span><br>docker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://jenkins.io/doc/pipeline/tour/getting-started/\">https://jenkins.io/doc/pipeline/tour/getting-started/</a></p>\n<p>这里我们选择第一种方式</p>\n<p>启动tomcat（bin&#x2F;startup.sh）访问 <a href=\"http://localhost:8080/jenkins/\">http://localhost:8080/jenkins/</a></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png\"></p>\n<p>Jenkins安装完成。</p>\n<h2 id=\"2-安装SonarQube-Scanner插件\"><a href=\"#2-安装SonarQube-Scanner插件\" class=\"headerlink\" title=\"2.安装SonarQube Scanner插件\"></a>2.安装SonarQube Scanner插件</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png\"></p>\n<p>安装完成后、配置SonarQube</p>\n<p>在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png\"></p>\n<p>接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token</p>\n<p>在Jenkins中的系统配置中设置SonarQube servers的token</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png\"></p>\n<p>在Jenkins中的全局配置中安装SonarQube servers</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png\"></p>\n<h2 id=\"3-创建任务\"><a href=\"#3-创建任务\" class=\"headerlink\" title=\"3.创建任务\"></a>3.创建任务</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png\"></p>\n<p>配置SVN或者GIT的配置</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png\"></p>\n<p>最最重要的是，配置SonarQube <strong>analysis properties</strong></p>\n<p>可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">sonar.projectKey</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">.</span><br><span class=\"hljs-attr\">sonar.projectName</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.projectVersion</span>=<span class=\"hljs-string\">$&#123;BUILD_VERSION&#125;</span><br><br><span class=\"hljs-attr\">sonar.language</span>=<span class=\"hljs-string\">java</span><br><span class=\"hljs-attr\">sonar.sourceEncoding</span>=<span class=\"hljs-string\">UTF-8</span><br><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">$WORKSPACE</span><br><span class=\"hljs-attr\">sonar.java.binaries</span>=<span class=\"hljs-string\">$WORKSPACE</span><br></code></pre></td></tr></table></figure>\n\n<p>其中，sonar.java.binaries属性至关重要，笔者也是试了好多次</p>\n<p>相关文档在这里：</p>\n<p><a href=\"https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\">https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties</a></p>\n<p><a href=\"https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode\">https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jenkins-集成-SonarQube-Scanner\"><a href=\"#Jenkins-集成-SonarQube-Scanner\" class=\"headerlink\" title=\"Jenkins 集成 SonarQube Scanner\"></a>Jenkins 集成 SonarQube Scanner</h1><h2 id=\"1-安装Jenkins\"><a href=\"#1-安装Jenkins\" class=\"headerlink\" title=\"1. 安装Jenkins\"></a>1. 安装Jenkins</h2><p>下载安装包，这里我们下载war包：<a href=\"https://jenkins.io/download/\">https://jenkins.io/download/</a></p>\n<p>运行<strong>jenkins.war</strong>的方式有两种：</p>\n<p>第一种：将其放到tomcat中运行（放到webapps目录下，启动tomcat）</p>\n<p>第二种：直接执行 <strong>java -jar jenkins.war –httpPort&#x3D;8080</strong></p>\n<p>第三种：Docker方式部署：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看jenkins版本命令</span><br>docker search jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像命令(不标注表示最新的)</span><br>docker pull jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">本文的挂载目录是home下</span><br>mkdir /home/jenkins<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改权限（1000:1000 是UID和GID）重点：此目录需要设置权限，否则启动容器报错权限错误</span><br>chown -R 1000:1000 /home/jenkins/<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">运用镜像启动容器命令</span><br>docker run -d -p 8000:8080 -p 50000:50000 -v /home/jenkins:/var/jenkins_home --name jenkins --privileged=true  -u root jenkins<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://jenkins.io/doc/pipeline/tour/getting-started/\">https://jenkins.io/doc/pipeline/tour/getting-started/</a></p>\n<p>这里我们选择第一种方式</p>\n<p>启动tomcat（bin&#x2F;startup.sh）访问 <a href=\"http://localhost:8080/jenkins/\">http://localhost:8080/jenkins/</a></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191715.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191838.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922191858.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192442.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192501.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192516.png\"></p>\n<p>Jenkins安装完成。</p>\n<h2 id=\"2-安装SonarQube-Scanner插件\"><a href=\"#2-安装SonarQube-Scanner插件\" class=\"headerlink\" title=\"2.安装SonarQube Scanner插件\"></a>2.安装SonarQube Scanner插件</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192659.png\"></p>\n<p>安装完成后、配置SonarQube</p>\n<p>在SonarQube中生成一个Token（PS：用token代替输入用户名和密码）。在用户头像下“我的账户”、“安全”下，生成token。</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922192900.png\"></p>\n<p>接着在Jenkins中配置连接sonarqube服务器的地址，这里用到的token就是刚才在sonarqube中创建的那个token</p>\n<p>在Jenkins中的系统配置中设置SonarQube servers的token</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193011.png\"></p>\n<p>在Jenkins中的全局配置中安装SonarQube servers</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193118.png\"></p>\n<h2 id=\"3-创建任务\"><a href=\"#3-创建任务\" class=\"headerlink\" title=\"3.创建任务\"></a>3.创建任务</h2><p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193619.png\"></p>\n<p>配置SVN或者GIT的配置</p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193754.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922193848.png\"></p>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200922194021.png\"></p>\n<p>最最重要的是，配置SonarQube <strong>analysis properties</strong></p>\n<p>可以将其单独写到一个配置文件（sonar-project.properties）里面，也可以像这样每次都写一遍</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">sonar.projectKey</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">.</span><br><span class=\"hljs-attr\">sonar.projectName</span>=<span class=\"hljs-string\">$&#123;JOB_NAME&#125;</span><br><span class=\"hljs-attr\">sonar.projectVersion</span>=<span class=\"hljs-string\">$&#123;BUILD_VERSION&#125;</span><br><br><span class=\"hljs-attr\">sonar.language</span>=<span class=\"hljs-string\">java</span><br><span class=\"hljs-attr\">sonar.sourceEncoding</span>=<span class=\"hljs-string\">UTF-8</span><br><br><span class=\"hljs-attr\">sonar.sources</span>=<span class=\"hljs-string\">$WORKSPACE</span><br><span class=\"hljs-attr\">sonar.java.binaries</span>=<span class=\"hljs-string\">$WORKSPACE</span><br></code></pre></td></tr></table></figure>\n\n<p>其中，sonar.java.binaries属性至关重要，笔者也是试了好多次</p>\n<p>相关文档在这里：</p>\n<p><a href=\"https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties\">https://github.com/SonarSource/sonar-scanning-examples/blob/master/sonarqube-scanner/sonar-project.properties</a></p>\n<p><a href=\"https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode\">https://docs.sonarqube.org/display/PLUG/Java+Plugin+and+Bytecode</a></p>\n"},{"_content":"# Dokcer-compose安装Cerebro/Kibana/ES\n\n```yaml\nversion: '2.2'\nservices:\n  cerebro:\n    image: lmenezes/cerebro:0.8.3\n    container_name: cerebro\n    ports:\n      - \"9000:9000\"\n    command:\n      - -Dhosts.0.host=http://elasticsearch:9200\n    networks:\n      - es7net\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.1.0\n    container_name: kibana7\n    environment:\n      - I18N_LOCALE=zh-CN\n      - XPACK_GRAPH_ENABLED=true\n      - TIMELION_ENABLED=true\n      - XPACK_MONITORING_COLLECTION_ENABLED=\"true\"\n    ports:\n      - \"5601:5601\"\n    networks:\n      - es7net\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_01\n    environment:\n      - cluster.name=test1\n      - node.name=es7_01\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data1:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - es7net\n  elasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_02\n    environment:\n      - cluster.name=geektime\n      - node.name=es7_02\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data2:/usr/share/elasticsearch/data\n    networks:\n      - es7net\n\n\nvolumes:\n  es7data1:\n    driver: local\n  es7data2:\n    driver: local\n\nnetworks:\n  es7net:\n    driver: bridge\n```\n\n","source":"_posts/环境安装/【环境安装】CerebroKibana7ES.md","raw":"---\ncategories:\n  - 环境安装\n---\n# Dokcer-compose安装Cerebro/Kibana/ES\n\n```yaml\nversion: '2.2'\nservices:\n  cerebro:\n    image: lmenezes/cerebro:0.8.3\n    container_name: cerebro\n    ports:\n      - \"9000:9000\"\n    command:\n      - -Dhosts.0.host=http://elasticsearch:9200\n    networks:\n      - es7net\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.1.0\n    container_name: kibana7\n    environment:\n      - I18N_LOCALE=zh-CN\n      - XPACK_GRAPH_ENABLED=true\n      - TIMELION_ENABLED=true\n      - XPACK_MONITORING_COLLECTION_ENABLED=\"true\"\n    ports:\n      - \"5601:5601\"\n    networks:\n      - es7net\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_01\n    environment:\n      - cluster.name=test1\n      - node.name=es7_01\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data1:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - es7net\n  elasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.1.0\n    container_name: es7_02\n    environment:\n      - cluster.name=geektime\n      - node.name=es7_02\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.seed_hosts=es7_01,es7_02\n      - cluster.initial_master_nodes=es7_01,es7_02\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - es7data2:/usr/share/elasticsearch/data\n    networks:\n      - es7net\n\n\nvolumes:\n  es7data1:\n    driver: local\n  es7data2:\n    driver: local\n\nnetworks:\n  es7net:\n    driver: bridge\n```\n\n","slug":"环境安装/【环境安装】CerebroKibana7ES","published":1,"date":"2021-02-25T15:11:38.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6yv000319ia206l2d7m","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\"><a href=\"#Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\" class=\"headerlink\" title=\"Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES\"></a>Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2.2&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">cerebro:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">lmenezes/cerebro:0.8.3</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">cerebro</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;9000:9000&quot;</span><br>    <span class=\"hljs-attr\">command:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-Dhosts.0.host=http://elasticsearch:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">kibana:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/kibana/kibana:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">kibana7</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">I18N_LOCALE=zh-CN</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_GRAPH_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">TIMELION_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_MONITORING_COLLECTION_ENABLED=&quot;true&quot;</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;5601:5601&quot;</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_01</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=test1</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_01</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data1:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">9200</span><span class=\"hljs-string\">:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch2:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_02</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=geektime</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data2:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br><br><br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-attr\">es7data1:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br>  <span class=\"hljs-attr\">es7data2:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">es7net:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\"><a href=\"#Dokcer-compose安装Cerebro-x2F-Kibana-x2F-ES\" class=\"headerlink\" title=\"Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES\"></a>Dokcer-compose安装Cerebro&#x2F;Kibana&#x2F;ES</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2.2&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">cerebro:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">lmenezes/cerebro:0.8.3</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">cerebro</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;9000:9000&quot;</span><br>    <span class=\"hljs-attr\">command:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-Dhosts.0.host=http://elasticsearch:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">kibana:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/kibana/kibana:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">kibana7</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">I18N_LOCALE=zh-CN</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_GRAPH_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">TIMELION_ENABLED=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">XPACK_MONITORING_COLLECTION_ENABLED=&quot;true&quot;</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;5601:5601&quot;</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_01</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=test1</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_01</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data1:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">9200</span><span class=\"hljs-string\">:9200</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br>  <span class=\"hljs-attr\">elasticsearch2:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">es7_02</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.name=geektime</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">node.name=es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">bootstrap.memory_lock=true</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">discovery.seed_hosts=es7_01,es7_02</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cluster.initial_master_nodes=es7_01,es7_02</span><br>    <span class=\"hljs-attr\">ulimits:</span><br>      <span class=\"hljs-attr\">memlock:</span><br>        <span class=\"hljs-attr\">soft:</span> <span class=\"hljs-number\">-1</span><br>        <span class=\"hljs-attr\">hard:</span> <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7data2:/usr/share/elasticsearch/data</span><br>    <span class=\"hljs-attr\">networks:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">es7net</span><br><br><br><span class=\"hljs-attr\">volumes:</span><br>  <span class=\"hljs-attr\">es7data1:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br>  <span class=\"hljs-attr\">es7data2:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span><br><br><span class=\"hljs-attr\">networks:</span><br>  <span class=\"hljs-attr\">es7net:</span><br>    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span><br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# 【环境安装】Docker安装\n\n## CentoOS-7\n\n### 安装步骤:\n\n**1、卸载已经安装的Docker**\n\n```shell\nsudo yum remove docker \\\n          docker-client \\\n          docker-client-latest \\\n          docker-common \\\n          docker-latest \\\n          docker-latest-logrotate \\\n          docker-logrotate \\\n          docker-selinux \\\n          docker-engine-selinux \\\n          docker-engine\n```\n\n**2、配置阿里云yum源仓库**\n\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \n# 如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令\n```\n\n**3、查看可以安装的docker版本**\n\n```shell\nyum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序\n```\n\n**4、安装最新版本Docker**\n\n```shell\nsudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装\n```\n\n**5、设Docker阿里云加速器**\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://lkq3q0he.mirror.aliyuncs.com\"]\n}\nEOF\n```\n\n**6、启动Docker**\n\n```shell\nsudo systemctl daemon-reload #重新加载服务配置文件\n\nsudo systemctl enable docker.service && systemctl restart docker.service   #设置开机启动与重启docker服务\n```\n\n**7、查看Docker版本**\n\n```shell\n~#docker version\nClient: Docker Engine - Community\n Version:           19.03.8\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        afacb8b\n Built:             Wed Mar 11 01:27:04 2020\n OS/Arch:           linux/amd64\n Experimental:      false\n...........\n~#docker info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 0\n Server Version: 19.03.8\n Storage Driver: overlay2\n  Backing Filesystem: <unknown>\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n```\n\n## Ubuntu-18\n\n**1. docker安装**\n\n- 卸载旧版本docker\n- 全新安装时，无需执行该步骤\n\n```shell\n$ sudo apt-get remove --purge docker docker-engine docker.io\n```\n\n- 安装依赖包\n\n```shell\n$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n```\n\n- 添加官方密钥\n\n```shell\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n显示OK,表示添加成功\n\n- 使用下面的命令来设置stable存储库\n\n```shell\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n- 更新一下apt包索引\n\n```shell\n$ sudo apt-get update\n```\n\n- 列出可用的版本\n\n```shell\n$ apt-cache madison docker-ce\n```\n\n- 选择你需要的版本安装，我选择的是适合rancher的\n\n```shell\n$ sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu\n```\n\n## 为Docker替换阿里镜像源\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://t44588bn.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n","source":"_posts/环境安装/【环境安装】Docker安装.md","raw":"---\ncategories:\n  - 环境安装\n---\n# 【环境安装】Docker安装\n\n## CentoOS-7\n\n### 安装步骤:\n\n**1、卸载已经安装的Docker**\n\n```shell\nsudo yum remove docker \\\n          docker-client \\\n          docker-client-latest \\\n          docker-common \\\n          docker-latest \\\n          docker-latest-logrotate \\\n          docker-logrotate \\\n          docker-selinux \\\n          docker-engine-selinux \\\n          docker-engine\n```\n\n**2、配置阿里云yum源仓库**\n\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \n# 如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令\n```\n\n**3、查看可以安装的docker版本**\n\n```shell\nyum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序\n```\n\n**4、安装最新版本Docker**\n\n```shell\nsudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装\n```\n\n**5、设Docker阿里云加速器**\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://lkq3q0he.mirror.aliyuncs.com\"]\n}\nEOF\n```\n\n**6、启动Docker**\n\n```shell\nsudo systemctl daemon-reload #重新加载服务配置文件\n\nsudo systemctl enable docker.service && systemctl restart docker.service   #设置开机启动与重启docker服务\n```\n\n**7、查看Docker版本**\n\n```shell\n~#docker version\nClient: Docker Engine - Community\n Version:           19.03.8\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        afacb8b\n Built:             Wed Mar 11 01:27:04 2020\n OS/Arch:           linux/amd64\n Experimental:      false\n...........\n~#docker info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 0\n Server Version: 19.03.8\n Storage Driver: overlay2\n  Backing Filesystem: <unknown>\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n```\n\n## Ubuntu-18\n\n**1. docker安装**\n\n- 卸载旧版本docker\n- 全新安装时，无需执行该步骤\n\n```shell\n$ sudo apt-get remove --purge docker docker-engine docker.io\n```\n\n- 安装依赖包\n\n```shell\n$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n```\n\n- 添加官方密钥\n\n```shell\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n显示OK,表示添加成功\n\n- 使用下面的命令来设置stable存储库\n\n```shell\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n- 更新一下apt包索引\n\n```shell\n$ sudo apt-get update\n```\n\n- 列出可用的版本\n\n```shell\n$ apt-cache madison docker-ce\n```\n\n- 选择你需要的版本安装，我选择的是适合rancher的\n\n```shell\n$ sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu\n```\n\n## 为Docker替换阿里镜像源\n\n```shell\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://t44588bn.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n","slug":"环境安装/【环境安装】Docker安装","published":1,"date":"2021-01-15T05:09:52.000Z","updated":"2022-11-17T08:39:45.579Z","_id":"claktn6yw000419ia2a3921nb","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境安装】Docker安装\"><a href=\"#【环境安装】Docker安装\" class=\"headerlink\" title=\"【环境安装】Docker安装\"></a>【环境安装】Docker安装</h1><h2 id=\"CentoOS-7\"><a href=\"#CentoOS-7\" class=\"headerlink\" title=\"CentoOS-7\"></a>CentoOS-7</h2><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤:\"></a>安装步骤:</h3><p><strong>1、卸载已经安装的Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum remove docker \\<br>          docker-client \\<br>          docker-client-latest \\<br>          docker-common \\<br>          docker-latest \\<br>          docker-latest-logrotate \\<br>          docker-logrotate \\<br>          docker-selinux \\<br>          docker-engine-selinux \\<br>          docker-engine<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、配置阿里云yum源仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>3、查看可以安装的docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序<br></code></pre></td></tr></table></figure>\n\n<p><strong>4、安装最新版本Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装<br></code></pre></td></tr></table></figure>\n\n<p><strong>5、设Docker阿里云加速器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://lkq3q0he.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure>\n\n<p><strong>6、启动Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl daemon-reload #重新加载服务配置文件<br><br>sudo systemctl enable docker.service &amp;&amp; systemctl restart docker.service   #设置开机启动与重启docker服务<br></code></pre></td></tr></table></figure>\n\n<p><strong>7、查看Docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker version</span><br>Client: Docker Engine - Community<br> Version:           19.03.8<br> API version:       1.40<br> Go version:        go1.12.17<br> Git commit:        afacb8b<br> Built:             Wed Mar 11 01:27:04 2020<br> OS/Arch:           linux/amd64<br> Experimental:      false<br>...........<br><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker info</span><br>Client:<br> Debug Mode: false<br><br>Server:<br> Containers: 0<br>  Running: 0<br>  Paused: 0<br>  Stopped: 0<br> Images: 0<br> Server Version: 19.03.8<br> Storage Driver: overlay2<br>  Backing Filesystem: &lt;unknown&gt;<br>  Supports d_type: true<br>  Native Overlay Diff: true<br> Logging Driver: json-file<br> Cgroup Driver: cgroupfs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu-18\"><a href=\"#Ubuntu-18\" class=\"headerlink\" title=\"Ubuntu-18\"></a>Ubuntu-18</h2><p><strong>1. docker安装</strong></p>\n<ul>\n<li>卸载旧版本docker</li>\n<li>全新安装时，无需执行该步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get remove --purge docker docker-engine docker.io</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>安装依赖包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加官方密钥</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></code></pre></td></tr></table></figure>\n\n<p>显示OK,表示添加成功</p>\n<ul>\n<li>使用下面的命令来设置stable存储库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo add-apt-repository <span class=\"hljs-string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>更新一下apt包索引</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get update</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>列出可用的版本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">apt-cache madison docker-ce</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>选择你需要的版本安装，我选择的是适合rancher的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"为Docker替换阿里镜像源\"><a href=\"#为Docker替换阿里镜像源\" class=\"headerlink\" title=\"为Docker替换阿里镜像源\"></a>为Docker替换阿里镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://t44588bn.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境安装】Docker安装\"><a href=\"#【环境安装】Docker安装\" class=\"headerlink\" title=\"【环境安装】Docker安装\"></a>【环境安装】Docker安装</h1><h2 id=\"CentoOS-7\"><a href=\"#CentoOS-7\" class=\"headerlink\" title=\"CentoOS-7\"></a>CentoOS-7</h2><h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤:\"></a>安装步骤:</h3><p><strong>1、卸载已经安装的Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum remove docker \\<br>          docker-client \\<br>          docker-client-latest \\<br>          docker-common \\<br>          docker-latest \\<br>          docker-latest-logrotate \\<br>          docker-logrotate \\<br>          docker-selinux \\<br>          docker-engine-selinux \\<br>          docker-engine<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、配置阿里云yum源仓库</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果找不到yum-config-manager就通过命令yum -y install yum-utils 安装就可以使用yum-config-manager命令</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>3、查看可以安装的docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum list docker-ce --showduplicates | sort -r #查看可以安装的版本并倒序排序<br></code></pre></td></tr></table></figure>\n\n<p><strong>4、安装最新版本Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo yum install -y docker-ce #注意：安装Docker最新版本，无需加版本号；或者选择你需要的版本安装<br></code></pre></td></tr></table></figure>\n\n<p><strong>5、设Docker阿里云加速器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://lkq3q0he.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure>\n\n<p><strong>6、启动Docker</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl daemon-reload #重新加载服务配置文件<br><br>sudo systemctl enable docker.service &amp;&amp; systemctl restart docker.service   #设置开机启动与重启docker服务<br></code></pre></td></tr></table></figure>\n\n<p><strong>7、查看Docker版本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker version</span><br>Client: Docker Engine - Community<br> Version:           19.03.8<br> API version:       1.40<br> Go version:        go1.12.17<br> Git commit:        afacb8b<br> Built:             Wed Mar 11 01:27:04 2020<br> OS/Arch:           linux/amd64<br> Experimental:      false<br>...........<br><span class=\"hljs-meta prompt_\">~#</span><span class=\"language-bash\">docker info</span><br>Client:<br> Debug Mode: false<br><br>Server:<br> Containers: 0<br>  Running: 0<br>  Paused: 0<br>  Stopped: 0<br> Images: 0<br> Server Version: 19.03.8<br> Storage Driver: overlay2<br>  Backing Filesystem: &lt;unknown&gt;<br>  Supports d_type: true<br>  Native Overlay Diff: true<br> Logging Driver: json-file<br> Cgroup Driver: cgroupfs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Ubuntu-18\"><a href=\"#Ubuntu-18\" class=\"headerlink\" title=\"Ubuntu-18\"></a>Ubuntu-18</h2><p><strong>1. docker安装</strong></p>\n<ul>\n<li>卸载旧版本docker</li>\n<li>全新安装时，无需执行该步骤</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get remove --purge docker docker-engine docker.io</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>安装依赖包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>添加官方密钥</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></code></pre></td></tr></table></figure>\n\n<p>显示OK,表示添加成功</p>\n<ul>\n<li>使用下面的命令来设置stable存储库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo add-apt-repository <span class=\"hljs-string\">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>更新一下apt包索引</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get update</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>列出可用的版本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">apt-cache madison docker-ce</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>选择你需要的版本安装，我选择的是适合rancher的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install docker-ce=18.06.3~ce~3-0~ubuntu</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"为Docker替换阿里镜像源\"><a href=\"#为Docker替换阿里镜像源\" class=\"headerlink\" title=\"为Docker替换阿里镜像源\"></a>为Docker替换阿里镜像源</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://t44588bn.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# 【环境安装】ElasticSearch安装\n\n**ElasticSearch官方下载地址：https://www.elastic.co/cn/downloads/elasticsearch**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser es #创建ES用户\nchown -R es ${es解压所在目录}\n#切换用户\nsu es\n```\n\n如需下载其他版本的点击这里：\n\n![](https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png)\n\n选择所需要下载的版本\n\n![](https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png)\n\n## ElasticSearch文件目录\n\n| 目录    | 配置文件          | 描述                                                      |\n| ------- | ----------------- | --------------------------------------------------------- |\n| bin     |                   | 脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等 |\n| config  | elasticsearch.yml | 集群配置文件，user，role based相关配置                    |\n| JDK     |                   | Java运行环境                                              |\n| data    | path.data         | 数据文件                                                  |\n| lib     |                   | Java类库                                                  |\n| logs    | path.log          | 日志文件                                                  |\n| modules |                   | 包含所有ES模块                                            |\n| plugins |                   | 包含所有已安装插件                                        |\n\n## JVM 配置\n\n+ 修改JVM - config/jvm.options\n  + 7.1 下载默认设置是 1 GB\n+ 配置的建议\n  + Xms和Xmx设置成一样大\n  + Xmx不要超过机器内存的30%\n  + 不要超过30GB\n\n## ElasticSearch插件\n\n在命令行输入：\n\n```shell\n#安装插件\nbin/elasticsearch-plugin install analysis-icu\n#查看插件\nbin/elasticsearch-plugin list\n#通过URL请求查看安装的插件\nGET http://localhost:9200/_cat/plugins?v\n```\n\n## ElasticSearch启动\n\n单实例启动\n\n配置elasticsearch.yml\n\n```yaml\ncluster.name: my-nodes \t\t\t\t\t\t#集群名称\nnode.name: node-1 \t\t\t\t\t\t\t#节点名称\npath.data: /opt/elasticsearch-7.6.2/data \t#数据\npath.logs: /opt/elasticsearch-7.6.2/logs \t#日志\nnetwork.host: 0.0.0.0 \t\t\t\t\t\t#ip访问限制\ndiscovery.seed_hosts: [\"192.168.1.70\"] \t\t#主机Host列表\ncluster.initial_master_nodes: [\"node-1\"] \t#节点名，单机版只有一个\ngeteway.recover_after_nodes: 1 \t\t\t\t#需要被发现的节点数\n```\n\n跨域访问\n\n```shell\n#跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容\nhttp.cors.enabled: true \nhttp.cors.allow-origin: \"*\"\n```\n\n利用AJAX跨域修改数据的方法如下：\n\n```javascript\nvar baseUrl = 'http://localhost:9200/',\n    putUrl = baseUrl + 'events/logon_event/2',\n    datas = {\n        \"name\": \"郭富城\",\n        \"occur_time\": \"2015-05-09\",\n        \"enabled\": false,\n        \"times\": 22\n    };\n//  提交数据内容\n$.ajax(putUrl, {\n    type : 'PUT',\n    //  一定要设置contentType，以payload方式提交\n    contentType: 'application/json',\n    //  数据一定转换为字符串\n    data : JSON.stringify(datas),\n    success : function(datas) {\n        console.log(datas)\n    }\n})\n```\n\n现在就可以用javascript来制造数据了。\n\n**结论：**ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。\n\n配置好后启动\n\n```shell\nbin/elasticsearch\n```\n\n多实例启动\n\n```shell\n#node.name ：节点名称\n#cluster.name ：集群名称\n#path.data：es数据存储目录\n#network.host：监听IP，默认127.0.0.1，只允许本地连接\n#http.port：端口，默认是9200，9201，9202三个端口\n#cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必\n./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d \n./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n```\n\n启动完成后打开地址：http://ip:port\n\n```json\n{\nname: \"node02\",\ncluster_name: \"Practice\",\ncluster_uuid: \"PqERjAFRSvqVloFf1jiqPw\",\nversion: {\nnumber: \"7.6.2\",\nbuild_flavor: \"default\",\nbuild_type: \"tar\",\nbuild_hash: \"ef48eb35cf30adf4db14086e8aabd07ef6fb113f\",\nbuild_date: \"2020-03-26T06:34:37.794943Z\",\nbuild_snapshot: false,\nlucene_version: \"8.4.0\",\nminimum_wire_compatibility_version: \"6.8.0\",\nminimum_index_compatibility_version: \"6.0.0-beta1\"\n},\ntagline: \"You Know, for Search\"\n}\n```\n\nhttp://ip:port\n\n## _cat\n\nElasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。\n\n### _cat命令\n\n通过使用_cat可以查看支持的命令：\n\n```\n$ curl localhost:9200/_cat\n=^.^=\n/_cat/allocation\n/_cat/shards\n/_cat/shards/{index}\n/_cat/master\n/_cat/nodes\n/_cat/indices\n/_cat/indices/{index}\n/_cat/segments\n/_cat/segments/{index}\n/_cat/count\n/_cat/count/{index}\n/_cat/recovery\n/_cat/recovery/{index}\n/_cat/health\n/_cat/pending_tasks\n/_cat/aliases\n/_cat/aliases/{alias}\n/_cat/thread_pool\n/_cat/plugins\n/_cat/fielddata\n/_cat/fielddata/{fields}\n/_cat/nodeattrs\n/_cat/repositories\n/_cat/snapshots/{repository}\n```\n\n### verbose \n\n每个命令都支持使用?v参数，来显示详细的信息：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### help\n\n每个命令都支持使用help参数，来输出可以显示的列：\n\n```\n$ curl localhost:9200/_cat/master?help\nid   |   | node id\nhost | h | host name\nip   |   | ip address\nnode | n | node name\n```\n\n### headers\n\n通过h参数，可以指定输出的字段：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n\n$ curl localhost:9200/_cat/master?h=host,ip,node\n127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### 数字类型的格式化\n\n很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。\n\n```\n$ curl localhost:9200/_cat/indices?v\nhealth status index pri rep docs.count docs.deleted store.size pri.store.size\nyellow open   test    5   1          3            0      9.kb          9.kb\n```","source":"_posts/环境安装/【环境安装】ElasticSearch安装.md","raw":"---\ncategories:\n  - 环境安装\n---\n# 【环境安装】ElasticSearch安装\n\n**ElasticSearch官方下载地址：https://www.elastic.co/cn/downloads/elasticsearch**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser es #创建ES用户\nchown -R es ${es解压所在目录}\n#切换用户\nsu es\n```\n\n如需下载其他版本的点击这里：\n\n![](https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png)\n\n选择所需要下载的版本\n\n![](https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png)\n\n## ElasticSearch文件目录\n\n| 目录    | 配置文件          | 描述                                                      |\n| ------- | ----------------- | --------------------------------------------------------- |\n| bin     |                   | 脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等 |\n| config  | elasticsearch.yml | 集群配置文件，user，role based相关配置                    |\n| JDK     |                   | Java运行环境                                              |\n| data    | path.data         | 数据文件                                                  |\n| lib     |                   | Java类库                                                  |\n| logs    | path.log          | 日志文件                                                  |\n| modules |                   | 包含所有ES模块                                            |\n| plugins |                   | 包含所有已安装插件                                        |\n\n## JVM 配置\n\n+ 修改JVM - config/jvm.options\n  + 7.1 下载默认设置是 1 GB\n+ 配置的建议\n  + Xms和Xmx设置成一样大\n  + Xmx不要超过机器内存的30%\n  + 不要超过30GB\n\n## ElasticSearch插件\n\n在命令行输入：\n\n```shell\n#安装插件\nbin/elasticsearch-plugin install analysis-icu\n#查看插件\nbin/elasticsearch-plugin list\n#通过URL请求查看安装的插件\nGET http://localhost:9200/_cat/plugins?v\n```\n\n## ElasticSearch启动\n\n单实例启动\n\n配置elasticsearch.yml\n\n```yaml\ncluster.name: my-nodes \t\t\t\t\t\t#集群名称\nnode.name: node-1 \t\t\t\t\t\t\t#节点名称\npath.data: /opt/elasticsearch-7.6.2/data \t#数据\npath.logs: /opt/elasticsearch-7.6.2/logs \t#日志\nnetwork.host: 0.0.0.0 \t\t\t\t\t\t#ip访问限制\ndiscovery.seed_hosts: [\"192.168.1.70\"] \t\t#主机Host列表\ncluster.initial_master_nodes: [\"node-1\"] \t#节点名，单机版只有一个\ngeteway.recover_after_nodes: 1 \t\t\t\t#需要被发现的节点数\n```\n\n跨域访问\n\n```shell\n#跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容\nhttp.cors.enabled: true \nhttp.cors.allow-origin: \"*\"\n```\n\n利用AJAX跨域修改数据的方法如下：\n\n```javascript\nvar baseUrl = 'http://localhost:9200/',\n    putUrl = baseUrl + 'events/logon_event/2',\n    datas = {\n        \"name\": \"郭富城\",\n        \"occur_time\": \"2015-05-09\",\n        \"enabled\": false,\n        \"times\": 22\n    };\n//  提交数据内容\n$.ajax(putUrl, {\n    type : 'PUT',\n    //  一定要设置contentType，以payload方式提交\n    contentType: 'application/json',\n    //  数据一定转换为字符串\n    data : JSON.stringify(datas),\n    success : function(datas) {\n        console.log(datas)\n    }\n})\n```\n\n现在就可以用javascript来制造数据了。\n\n**结论：**ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。\n\n配置好后启动\n\n```shell\nbin/elasticsearch\n```\n\n多实例启动\n\n```shell\n#node.name ：节点名称\n#cluster.name ：集群名称\n#path.data：es数据存储目录\n#network.host：监听IP，默认127.0.0.1，只允许本地连接\n#http.port：端口，默认是9200，9201，9202三个端口\n#cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必\n./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d \n./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d\n```\n\n启动完成后打开地址：http://ip:port\n\n```json\n{\nname: \"node02\",\ncluster_name: \"Practice\",\ncluster_uuid: \"PqERjAFRSvqVloFf1jiqPw\",\nversion: {\nnumber: \"7.6.2\",\nbuild_flavor: \"default\",\nbuild_type: \"tar\",\nbuild_hash: \"ef48eb35cf30adf4db14086e8aabd07ef6fb113f\",\nbuild_date: \"2020-03-26T06:34:37.794943Z\",\nbuild_snapshot: false,\nlucene_version: \"8.4.0\",\nminimum_wire_compatibility_version: \"6.8.0\",\nminimum_index_compatibility_version: \"6.0.0-beta1\"\n},\ntagline: \"You Know, for Search\"\n}\n```\n\nhttp://ip:port\n\n## _cat\n\nElasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。\n\n### _cat命令\n\n通过使用_cat可以查看支持的命令：\n\n```\n$ curl localhost:9200/_cat\n=^.^=\n/_cat/allocation\n/_cat/shards\n/_cat/shards/{index}\n/_cat/master\n/_cat/nodes\n/_cat/indices\n/_cat/indices/{index}\n/_cat/segments\n/_cat/segments/{index}\n/_cat/count\n/_cat/count/{index}\n/_cat/recovery\n/_cat/recovery/{index}\n/_cat/health\n/_cat/pending_tasks\n/_cat/aliases\n/_cat/aliases/{alias}\n/_cat/thread_pool\n/_cat/plugins\n/_cat/fielddata\n/_cat/fielddata/{fields}\n/_cat/nodeattrs\n/_cat/repositories\n/_cat/snapshots/{repository}\n```\n\n### verbose \n\n每个命令都支持使用?v参数，来显示详细的信息：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### help\n\n每个命令都支持使用help参数，来输出可以显示的列：\n\n```\n$ curl localhost:9200/_cat/master?help\nid   |   | node id\nhost | h | host name\nip   |   | ip address\nnode | n | node name\n```\n\n### headers\n\n通过h参数，可以指定输出的字段：\n\n```\n$ curl localhost:9200/_cat/master?v\nid                     host      ip        node\nQG6QrX32QSi8C3-xQmrSoA 127.0.0.1 127.0.0.1 Manslaughter\n\n$ curl localhost:9200/_cat/master?h=host,ip,node\n127.0.0.1 127.0.0.1 Manslaughter\n```\n\n### 数字类型的格式化\n\n很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。\n\n```\n$ curl localhost:9200/_cat/indices?v\nhealth status index pri rep docs.count docs.deleted store.size pri.store.size\nyellow open   test    5   1          3            0      9.kb          9.kb\n```","slug":"环境安装/【环境安装】ElasticSearch安装","published":1,"date":"2021-02-21T13:50:55.000Z","updated":"2022-11-17T08:39:45.579Z","_id":"claktn6yy000519iab4rq2wrs","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境安装】ElasticSearch安装\"><a href=\"#【环境安装】ElasticSearch安装\" class=\"headerlink\" title=\"【环境安装】ElasticSearch安装\"></a>【环境安装】ElasticSearch安装</h1><p><strong>ElasticSearch官方下载地址：<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser es #创建ES用户<br>chown -R es $&#123;es解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su es<br></code></pre></td></tr></table></figure>\n\n<p>如需下载其他版本的点击这里：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png\"></p>\n<p>选择所需要下载的版本</p>\n<p><img src=\"https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png\"></p>\n<h2 id=\"ElasticSearch文件目录\"><a href=\"#ElasticSearch文件目录\" class=\"headerlink\" title=\"ElasticSearch文件目录\"></a>ElasticSearch文件目录</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>配置文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bin</td>\n<td></td>\n<td>脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等</td>\n</tr>\n<tr>\n<td>config</td>\n<td>elasticsearch.yml</td>\n<td>集群配置文件，user，role based相关配置</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td></td>\n<td>Java运行环境</td>\n</tr>\n<tr>\n<td>data</td>\n<td>path.data</td>\n<td>数据文件</td>\n</tr>\n<tr>\n<td>lib</td>\n<td></td>\n<td>Java类库</td>\n</tr>\n<tr>\n<td>logs</td>\n<td>path.log</td>\n<td>日志文件</td>\n</tr>\n<tr>\n<td>modules</td>\n<td></td>\n<td>包含所有ES模块</td>\n</tr>\n<tr>\n<td>plugins</td>\n<td></td>\n<td>包含所有已安装插件</td>\n</tr>\n</tbody></table>\n<h2 id=\"JVM-配置\"><a href=\"#JVM-配置\" class=\"headerlink\" title=\"JVM 配置\"></a>JVM 配置</h2><ul>\n<li>修改JVM - config&#x2F;jvm.options<ul>\n<li>7.1 下载默认设置是 1 GB</li>\n</ul>\n</li>\n<li>配置的建议<ul>\n<li>Xms和Xmx设置成一样大</li>\n<li>Xmx不要超过机器内存的30%</li>\n<li>不要超过30GB</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ElasticSearch插件\"><a href=\"#ElasticSearch插件\" class=\"headerlink\" title=\"ElasticSearch插件\"></a>ElasticSearch插件</h2><p>在命令行输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装插件</span><br>bin/elasticsearch-plugin install analysis-icu<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看插件</span><br>bin/elasticsearch-plugin list<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">通过URL请求查看安装的插件</span><br>GET http://localhost:9200/_cat/plugins?v<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ElasticSearch启动\"><a href=\"#ElasticSearch启动\" class=\"headerlink\" title=\"ElasticSearch启动\"></a>ElasticSearch启动</h2><p>单实例启动</p>\n<p>配置elasticsearch.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">cluster.name:</span> <span class=\"hljs-string\">my-nodes</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#集群名称</span><br><span class=\"hljs-attr\">node.name:</span> <span class=\"hljs-string\">node-1</span> \t\t\t\t\t\t\t<span class=\"hljs-comment\">#节点名称</span><br><span class=\"hljs-attr\">path.data:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/data</span> \t<span class=\"hljs-comment\">#数据</span><br><span class=\"hljs-attr\">path.logs:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/logs</span> \t<span class=\"hljs-comment\">#日志</span><br><span class=\"hljs-attr\">network.host:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">discovery.seed_hosts:</span> [<span class=\"hljs-string\">&quot;192.168.1.70&quot;</span>] \t\t<span class=\"hljs-comment\">#主机Host列表</span><br><span class=\"hljs-attr\">cluster.initial_master_nodes:</span> [<span class=\"hljs-string\">&quot;node-1&quot;</span>] \t<span class=\"hljs-comment\">#节点名，单机版只有一个</span><br><span class=\"hljs-attr\">geteway.recover_after_nodes:</span> <span class=\"hljs-number\">1</span> \t\t\t\t<span class=\"hljs-comment\">#需要被发现的节点数</span><br></code></pre></td></tr></table></figure>\n\n<p>跨域访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容</span><br>http.cors.enabled: true <br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure>\n\n<p>利用AJAX跨域修改数据的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> baseUrl = <span class=\"hljs-string\">&#x27;http://localhost:9200/&#x27;</span>,<br>    putUrl = baseUrl + <span class=\"hljs-string\">&#x27;events/logon_event/2&#x27;</span>,<br>    datas = &#123;<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭富城&quot;</span>,<br>        <span class=\"hljs-string\">&quot;occur_time&quot;</span>: <span class=\"hljs-string\">&quot;2015-05-09&quot;</span>,<br>        <span class=\"hljs-string\">&quot;enabled&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>        <span class=\"hljs-string\">&quot;times&quot;</span>: <span class=\"hljs-number\">22</span><br>    &#125;;<br><span class=\"hljs-comment\">//  提交数据内容</span><br>$.<span class=\"hljs-title function_\">ajax</span>(putUrl, &#123;<br>    type : <span class=\"hljs-string\">&#x27;PUT&#x27;</span>,<br>    <span class=\"hljs-comment\">//  一定要设置contentType，以payload方式提交</span><br>    <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>,<br>    <span class=\"hljs-comment\">//  数据一定转换为字符串</span><br>    data : <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(datas),<br>    success : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">datas</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(datas)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>现在就可以用javascript来制造数据了。</p>\n<p><strong>结论：</strong>ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。</p>\n<p>配置好后启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/elasticsearch<br></code></pre></td></tr></table></figure>\n\n<p>多实例启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">node.name ：节点名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.name ：集群名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">path.data：es数据存储目录</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">network.host：监听IP，默认127.0.0.1，只允许本地连接</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">http.port：端口，默认是9200，9201，9202三个端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必</span><br>./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d <br>./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br>./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br></code></pre></td></tr></table></figure>\n\n<p>启动完成后打开地址：<a href=\"http://ip:port\">http://ip:port</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;node02&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Practice&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_uuid<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PqERjAFRSvqVloFf1jiqPw&quot;</span><span class=\"hljs-punctuation\">,</span><br>version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;7.6.2&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_flavor<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;default&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_type<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;tar&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_hash<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_date<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2020-03-26T06:34:37.794943Z&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_snapshot<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>lucene_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;8.4.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_wire_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.8.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_index_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.0.0-beta1&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>tagline<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;You Know, for Search&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://ip:port\">http://ip:port</a></p>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"_cat\"></a>_cat</h2><p>Elasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。</p>\n<h3 id=\"cat命令\"><a href=\"#cat命令\" class=\"headerlink\" title=\"_cat命令\"></a>_cat命令</h3><p>通过使用_cat可以查看支持的命令：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat<br>=^.^=<br><span class=\"hljs-regexp\">/_cat/</span>allocation<br><span class=\"hljs-regexp\">/_cat/</span>shards<br><span class=\"hljs-regexp\">/_cat/</span>shards/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/m</span>aster<br><span class=\"hljs-regexp\">/_cat/</span>nodes<br><span class=\"hljs-regexp\">/_cat/i</span>ndices<br><span class=\"hljs-regexp\">/_cat/i</span>ndices/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>segments<br><span class=\"hljs-regexp\">/_cat/</span>segments/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span><br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span>/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>recovery<br><span class=\"hljs-regexp\">/_cat/</span>recovery/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>health<br><span class=\"hljs-regexp\">/_cat/</span>pending_tasks<br><span class=\"hljs-regexp\">/_cat/</span>aliases<br><span class=\"hljs-regexp\">/_cat/</span>aliases/&#123;alias&#125;<br><span class=\"hljs-regexp\">/_cat/</span>thread_pool<br><span class=\"hljs-regexp\">/_cat/</span>plugins<br><span class=\"hljs-regexp\">/_cat/</span>fielddata<br><span class=\"hljs-regexp\">/_cat/</span>fielddata/&#123;fields&#125;<br><span class=\"hljs-regexp\">/_cat/</span>nodeattrs<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">repositories</span><br><span class=\"hljs-regexp\">/_cat/</span>snapshots/&#123;repository&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"verbose\"><a href=\"#verbose\" class=\"headerlink\" title=\"verbose\"></a>verbose</h3><p>每个命令都支持使用?v参数，来显示详细的信息：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><p>每个命令都支持使用help参数，来输出可以显示的列：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?help<br>id   |   | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">id</span><br>host | h | host name<br>ip   |   | ip address<br><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">| n</span> | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">name</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"headers\"><a href=\"#headers\" class=\"headerlink\" title=\"headers\"></a>headers</h3><p>通过h参数，可以指定输出的字段：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br><br>$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?h=host,ip,<span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">127</span>.<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数字类型的格式化\"><a href=\"#数字类型的格式化\" class=\"headerlink\" title=\"数字类型的格式化\"></a>数字类型的格式化</h3><p>很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/indices?v<br>health <span class=\"hljs-keyword\">status</span> <span class=\"hljs-built_in\">index</span> pri rep docs.<span class=\"hljs-built_in\">count</span> docs.deleted store.<span class=\"hljs-built_in\">size</span> pri.store.<span class=\"hljs-built_in\">size</span><br>yellow open   test    <span class=\"hljs-number\">5</span>   <span class=\"hljs-number\">1</span>          <span class=\"hljs-number\">3</span>            <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">9.</span>kb          <span class=\"hljs-number\">9.</span>kb<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境安装】ElasticSearch安装\"><a href=\"#【环境安装】ElasticSearch安装\" class=\"headerlink\" title=\"【环境安装】ElasticSearch安装\"></a>【环境安装】ElasticSearch安装</h1><p><strong>ElasticSearch官方下载地址：<a href=\"https://www.elastic.co/cn/downloads/elasticsearch\">https://www.elastic.co/cn/downloads/elasticsearch</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf elasticsearch-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser es #创建ES用户<br>chown -R es $&#123;es解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su es<br></code></pre></td></tr></table></figure>\n\n<p>如需下载其他版本的点击这里：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/7bNiQrTAcyjpLdO.png\"></p>\n<p>选择所需要下载的版本</p>\n<p><img src=\"https://i.loli.net/2020/06/06/4bvzXuQqL8deapw.png\"></p>\n<h2 id=\"ElasticSearch文件目录\"><a href=\"#ElasticSearch文件目录\" class=\"headerlink\" title=\"ElasticSearch文件目录\"></a>ElasticSearch文件目录</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>配置文件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bin</td>\n<td></td>\n<td>脚本文件，包括启动ElasticSearch，安装插件。运行统计数据等</td>\n</tr>\n<tr>\n<td>config</td>\n<td>elasticsearch.yml</td>\n<td>集群配置文件，user，role based相关配置</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td></td>\n<td>Java运行环境</td>\n</tr>\n<tr>\n<td>data</td>\n<td>path.data</td>\n<td>数据文件</td>\n</tr>\n<tr>\n<td>lib</td>\n<td></td>\n<td>Java类库</td>\n</tr>\n<tr>\n<td>logs</td>\n<td>path.log</td>\n<td>日志文件</td>\n</tr>\n<tr>\n<td>modules</td>\n<td></td>\n<td>包含所有ES模块</td>\n</tr>\n<tr>\n<td>plugins</td>\n<td></td>\n<td>包含所有已安装插件</td>\n</tr>\n</tbody></table>\n<h2 id=\"JVM-配置\"><a href=\"#JVM-配置\" class=\"headerlink\" title=\"JVM 配置\"></a>JVM 配置</h2><ul>\n<li>修改JVM - config&#x2F;jvm.options<ul>\n<li>7.1 下载默认设置是 1 GB</li>\n</ul>\n</li>\n<li>配置的建议<ul>\n<li>Xms和Xmx设置成一样大</li>\n<li>Xmx不要超过机器内存的30%</li>\n<li>不要超过30GB</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ElasticSearch插件\"><a href=\"#ElasticSearch插件\" class=\"headerlink\" title=\"ElasticSearch插件\"></a>ElasticSearch插件</h2><p>在命令行输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装插件</span><br>bin/elasticsearch-plugin install analysis-icu<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看插件</span><br>bin/elasticsearch-plugin list<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">通过URL请求查看安装的插件</span><br>GET http://localhost:9200/_cat/plugins?v<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ElasticSearch启动\"><a href=\"#ElasticSearch启动\" class=\"headerlink\" title=\"ElasticSearch启动\"></a>ElasticSearch启动</h2><p>单实例启动</p>\n<p>配置elasticsearch.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">cluster.name:</span> <span class=\"hljs-string\">my-nodes</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#集群名称</span><br><span class=\"hljs-attr\">node.name:</span> <span class=\"hljs-string\">node-1</span> \t\t\t\t\t\t\t<span class=\"hljs-comment\">#节点名称</span><br><span class=\"hljs-attr\">path.data:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/data</span> \t<span class=\"hljs-comment\">#数据</span><br><span class=\"hljs-attr\">path.logs:</span> <span class=\"hljs-string\">/opt/elasticsearch-7.6.2/logs</span> \t<span class=\"hljs-comment\">#日志</span><br><span class=\"hljs-attr\">network.host:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> \t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">discovery.seed_hosts:</span> [<span class=\"hljs-string\">&quot;192.168.1.70&quot;</span>] \t\t<span class=\"hljs-comment\">#主机Host列表</span><br><span class=\"hljs-attr\">cluster.initial_master_nodes:</span> [<span class=\"hljs-string\">&quot;node-1&quot;</span>] \t<span class=\"hljs-comment\">#节点名，单机版只有一个</span><br><span class=\"hljs-attr\">geteway.recover_after_nodes:</span> <span class=\"hljs-number\">1</span> \t\t\t\t<span class=\"hljs-comment\">#需要被发现的节点数</span><br></code></pre></td></tr></table></figure>\n\n<p>跨域访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">跨域访问的配置方法，找到config文件夹下的elasticsearch.yml，在文件的末尾添加如下内容</span><br>http.cors.enabled: true <br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure>\n\n<p>利用AJAX跨域修改数据的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> baseUrl = <span class=\"hljs-string\">&#x27;http://localhost:9200/&#x27;</span>,<br>    putUrl = baseUrl + <span class=\"hljs-string\">&#x27;events/logon_event/2&#x27;</span>,<br>    datas = &#123;<br>        <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭富城&quot;</span>,<br>        <span class=\"hljs-string\">&quot;occur_time&quot;</span>: <span class=\"hljs-string\">&quot;2015-05-09&quot;</span>,<br>        <span class=\"hljs-string\">&quot;enabled&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>        <span class=\"hljs-string\">&quot;times&quot;</span>: <span class=\"hljs-number\">22</span><br>    &#125;;<br><span class=\"hljs-comment\">//  提交数据内容</span><br>$.<span class=\"hljs-title function_\">ajax</span>(putUrl, &#123;<br>    type : <span class=\"hljs-string\">&#x27;PUT&#x27;</span>,<br>    <span class=\"hljs-comment\">//  一定要设置contentType，以payload方式提交</span><br>    <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>,<br>    <span class=\"hljs-comment\">//  数据一定转换为字符串</span><br>    data : <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(datas),<br>    success : <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">datas</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(datas)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>现在就可以用javascript来制造数据了。</p>\n<p><strong>结论：</strong>ElasticSearch以payload的方式提交数据，所以设置“Content-Type”头信息是AJAX执行成功的关键。</p>\n<p>配置好后启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/elasticsearch<br></code></pre></td></tr></table></figure>\n\n<p>多实例启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">node.name ：节点名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.name ：集群名称</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">path.data：es数据存储目录</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">network.host：监听IP，默认127.0.0.1，只允许本地连接</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">http.port：端口，默认是9200，9201，9202三个端口</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">cluster.initial_master_nodes：配置集群内可选为主节点的节点，这里设置三个节点，配置network.host后，必</span><br>./bin/elasticsearch -E node.name=node01 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node01/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d <br>./bin/elasticsearch -E node.name=node02 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node02/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br>./bin/elasticsearch -E node.name=node03 -E cluster.name=Practice -E path.data=/opt/elasticsearch-7.6.2/data/node03/ -E network.host=0.0.0.0 -E cluster.initial_master_nodes=node01,node02,node03 -d<br></code></pre></td></tr></table></figure>\n\n<p>启动完成后打开地址：<a href=\"http://ip:port\">http://ip:port</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;node02&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_name<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Practice&quot;</span><span class=\"hljs-punctuation\">,</span><br>cluster_uuid<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PqERjAFRSvqVloFf1jiqPw&quot;</span><span class=\"hljs-punctuation\">,</span><br>version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>number<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;7.6.2&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_flavor<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;default&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_type<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;tar&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_hash<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_date<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2020-03-26T06:34:37.794943Z&quot;</span><span class=\"hljs-punctuation\">,</span><br>build_snapshot<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-literal\"><span class=\"hljs-keyword\">false</span></span><span class=\"hljs-punctuation\">,</span><br>lucene_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;8.4.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_wire_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.8.0&quot;</span><span class=\"hljs-punctuation\">,</span><br>minimum_index_compatibility_version<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;6.0.0-beta1&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>tagline<span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;You Know, for Search&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"http://ip:port\">http://ip:port</a></p>\n<h2 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"_cat\"></a>_cat</h2><p>Elasticsearch中信息很多，如果单凭肉眼来寻找复杂数据之间的关系，是很困难的。因此cat命令应运而生，它帮助开发者快速查询Elasticsearch的相关信息。</p>\n<h3 id=\"cat命令\"><a href=\"#cat命令\" class=\"headerlink\" title=\"_cat命令\"></a>_cat命令</h3><p>通过使用_cat可以查看支持的命令：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat<br>=^.^=<br><span class=\"hljs-regexp\">/_cat/</span>allocation<br><span class=\"hljs-regexp\">/_cat/</span>shards<br><span class=\"hljs-regexp\">/_cat/</span>shards/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/m</span>aster<br><span class=\"hljs-regexp\">/_cat/</span>nodes<br><span class=\"hljs-regexp\">/_cat/i</span>ndices<br><span class=\"hljs-regexp\">/_cat/i</span>ndices/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>segments<br><span class=\"hljs-regexp\">/_cat/</span>segments/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span><br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">count</span>/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>recovery<br><span class=\"hljs-regexp\">/_cat/</span>recovery/&#123;index&#125;<br><span class=\"hljs-regexp\">/_cat/</span>health<br><span class=\"hljs-regexp\">/_cat/</span>pending_tasks<br><span class=\"hljs-regexp\">/_cat/</span>aliases<br><span class=\"hljs-regexp\">/_cat/</span>aliases/&#123;alias&#125;<br><span class=\"hljs-regexp\">/_cat/</span>thread_pool<br><span class=\"hljs-regexp\">/_cat/</span>plugins<br><span class=\"hljs-regexp\">/_cat/</span>fielddata<br><span class=\"hljs-regexp\">/_cat/</span>fielddata/&#123;fields&#125;<br><span class=\"hljs-regexp\">/_cat/</span>nodeattrs<br><span class=\"hljs-regexp\">/_cat/</span><span class=\"hljs-keyword\">repositories</span><br><span class=\"hljs-regexp\">/_cat/</span>snapshots/&#123;repository&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"verbose\"><a href=\"#verbose\" class=\"headerlink\" title=\"verbose\"></a>verbose</h3><p>每个命令都支持使用?v参数，来显示详细的信息：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"help\"><a href=\"#help\" class=\"headerlink\" title=\"help\"></a>help</h3><p>每个命令都支持使用help参数，来输出可以显示的列：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?help<br>id   |   | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">id</span><br>host | h | host name<br>ip   |   | ip address<br><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">| n</span> | <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">name</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"headers\"><a href=\"#headers\" class=\"headerlink\" title=\"headers\"></a>headers</h3><p>通过h参数，可以指定输出的字段：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?v<br>id                     host      ip        <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">QG6QrX32QSi8C3-xQmrSoA</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br><br>$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/<span class=\"hljs-literal\">master</span>?h=host,ip,<span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">127</span>.<span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> Manslaughter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数字类型的格式化\"><a href=\"#数字类型的格式化\" class=\"headerlink\" title=\"数字类型的格式化\"></a>数字类型的格式化</h3><p>很多的命令都支持返回可读性的大小数字，比如使用mb或者kb来表示。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">$ curl localhost:<span class=\"hljs-number\">9200</span>/_cat/indices?v<br>health <span class=\"hljs-keyword\">status</span> <span class=\"hljs-built_in\">index</span> pri rep docs.<span class=\"hljs-built_in\">count</span> docs.deleted store.<span class=\"hljs-built_in\">size</span> pri.store.<span class=\"hljs-built_in\">size</span><br>yellow open   test    <span class=\"hljs-number\">5</span>   <span class=\"hljs-number\">1</span>          <span class=\"hljs-number\">3</span>            <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">9.</span>kb          <span class=\"hljs-number\">9.</span>kb<br></code></pre></td></tr></table></figure>"},{"_content":"# 【环境安装】Kibana安装\n\n**Kibana官方下载地址：https://www.elastic.co/cn/kibana**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf kibana-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser kibana #创建kibana用户\nchown -R kibana ${kibana解压所在目录}\n#切换用户\nsu kibana\n```\n\nKibana配置文件\n\n```yaml\nserver.port: 5601 \t\t\t\t\t\t\t\t\t#启动端口号\nserver.host: \"0.0.0.0\"\t\t\t\t\t\t\t\t#ip访问限制\nelasticsearch.hosts: [\"http://192.168.1.70:9200\"]\t#配置ES连接地址\nelasticsearch.requestTimeout: 50000 \t\t\t\t#Kibana连接ES超时时，可修改\n#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加\ni18n.locale: \"zh-CN\" #就支持中文显示了。\n```\n\n进入bin目录下，启动\n\n```shell\nbin/kibana\n# 后台启动\nnohup bin/kibana &\n```\n\n插件安装\n\n```shell\nbin/kibana-plugin list\t\t\t\t\t#查看已安装插件\nbin/kibana-plugin install ${插件名称}\t  #安装插件\nbin/kibana-plugin remove\t\t\t\t#卸载插件\n```\n\n","source":"_posts/环境安装/【环境安装】Kibana安装.md","raw":"---\ncategories:\n  - 环境安装\n---\n# 【环境安装】Kibana安装\n\n**Kibana官方下载地址：https://www.elastic.co/cn/kibana**\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz\n#解压安装包\ntar -zxvf kibana-7.7.1-linux-x86_64.tar.gz\n#修改所属组和所属用户（注意：当前目录所属一定不要是root）\nadduser kibana #创建kibana用户\nchown -R kibana ${kibana解压所在目录}\n#切换用户\nsu kibana\n```\n\nKibana配置文件\n\n```yaml\nserver.port: 5601 \t\t\t\t\t\t\t\t\t#启动端口号\nserver.host: \"0.0.0.0\"\t\t\t\t\t\t\t\t#ip访问限制\nelasticsearch.hosts: [\"http://192.168.1.70:9200\"]\t#配置ES连接地址\nelasticsearch.requestTimeout: 50000 \t\t\t\t#Kibana连接ES超时时，可修改\n#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加\ni18n.locale: \"zh-CN\" #就支持中文显示了。\n```\n\n进入bin目录下，启动\n\n```shell\nbin/kibana\n# 后台启动\nnohup bin/kibana &\n```\n\n插件安装\n\n```shell\nbin/kibana-plugin list\t\t\t\t\t#查看已安装插件\nbin/kibana-plugin install ${插件名称}\t  #安装插件\nbin/kibana-plugin remove\t\t\t\t#卸载插件\n```\n\n","slug":"环境安装/【环境安装】Kibana安装","published":1,"date":"2020-06-06T08:33:53.000Z","updated":"2022-11-17T08:39:45.579Z","_id":"claktn6z0000619ia6jnkbm0m","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境安装】Kibana安装\"><a href=\"#【环境安装】Kibana安装\" class=\"headerlink\" title=\"【环境安装】Kibana安装\"></a>【环境安装】Kibana安装</h1><p><strong>Kibana官方下载地址：<a href=\"https://www.elastic.co/cn/kibana\">https://www.elastic.co/cn/kibana</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser kibana #创建kibana用户<br>chown -R kibana $&#123;kibana解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su kibana<br></code></pre></td></tr></table></figure>\n\n<p>Kibana配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">server.port:</span> <span class=\"hljs-number\">5601</span> \t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#启动端口号</span><br><span class=\"hljs-attr\">server.host:</span> <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">elasticsearch.hosts:</span> [<span class=\"hljs-string\">&quot;http://192.168.1.70:9200&quot;</span>]\t<span class=\"hljs-comment\">#配置ES连接地址</span><br><span class=\"hljs-attr\">elasticsearch.requestTimeout:</span> <span class=\"hljs-number\">50000</span> \t\t\t\t<span class=\"hljs-comment\">#Kibana连接ES超时时，可修改</span><br><span class=\"hljs-comment\">#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加</span><br><span class=\"hljs-attr\">i18n.locale:</span> <span class=\"hljs-string\">&quot;zh-CN&quot;</span> <span class=\"hljs-comment\">#就支持中文显示了。</span><br></code></pre></td></tr></table></figure>\n\n<p>进入bin目录下，启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">后台启动</span><br>nohup bin/kibana &amp;<br></code></pre></td></tr></table></figure>\n\n<p>插件安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana-plugin list\t\t\t\t\t#查看已安装插件<br>bin/kibana-plugin install $&#123;插件名称&#125;\t  #安装插件<br>bin/kibana-plugin remove\t\t\t\t#卸载插件<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境安装】Kibana安装\"><a href=\"#【环境安装】Kibana安装\" class=\"headerlink\" title=\"【环境安装】Kibana安装\"></a>【环境安装】Kibana安装</h1><p><strong>Kibana官方下载地址：<a href=\"https://www.elastic.co/cn/kibana\">https://www.elastic.co/cn/kibana</a></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/kibana/kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf kibana-7.7.1-linux-x86_64.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">修改所属组和所属用户（注意：当前目录所属一定不要是root）</span><br>adduser kibana #创建kibana用户<br>chown -R kibana $&#123;kibana解压所在目录&#125;<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">切换用户</span><br>su kibana<br></code></pre></td></tr></table></figure>\n\n<p>Kibana配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">server.port:</span> <span class=\"hljs-number\">5601</span> \t\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#启动端口号</span><br><span class=\"hljs-attr\">server.host:</span> <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">#ip访问限制</span><br><span class=\"hljs-attr\">elasticsearch.hosts:</span> [<span class=\"hljs-string\">&quot;http://192.168.1.70:9200&quot;</span>]\t<span class=\"hljs-comment\">#配置ES连接地址</span><br><span class=\"hljs-attr\">elasticsearch.requestTimeout:</span> <span class=\"hljs-number\">50000</span> \t\t\t\t<span class=\"hljs-comment\">#Kibana连接ES超时时，可修改</span><br><span class=\"hljs-comment\">#Kibana的汉化，从Kibana 6.8 和 ES 7.0开始支持。通过在 kibana.yml文件中，增加</span><br><span class=\"hljs-attr\">i18n.locale:</span> <span class=\"hljs-string\">&quot;zh-CN&quot;</span> <span class=\"hljs-comment\">#就支持中文显示了。</span><br></code></pre></td></tr></table></figure>\n\n<p>进入bin目录下，启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">后台启动</span><br>nohup bin/kibana &amp;<br></code></pre></td></tr></table></figure>\n\n<p>插件安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">bin/kibana-plugin list\t\t\t\t\t#查看已安装插件<br>bin/kibana-plugin install $&#123;插件名称&#125;\t  #安装插件<br>bin/kibana-plugin remove\t\t\t\t#卸载插件<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# Logstash安装\n\n**Logstash官方下载地址：https://www.elastic.co/cn/logstash**\n\n> 下载同ES相同的版本\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz\n#解压安装包\ntar -zxvf logstash-7.7.1.tar.gz\n```\n\n","source":"_posts/环境安装/【环境安装】Logstash安装.md","raw":"---\ncategories:\n  - 环境安装\n---\n# Logstash安装\n\n**Logstash官方下载地址：https://www.elastic.co/cn/logstash**\n\n> 下载同ES相同的版本\n\n```shell\n#下载官方安装包\nwget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz\n#解压安装包\ntar -zxvf logstash-7.7.1.tar.gz\n```\n\n","slug":"环境安装/【环境安装】Logstash安装","published":1,"date":"2021-03-01T07:47:36.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z1000719iac3ewc5bz","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Logstash安装\"><a href=\"#Logstash安装\" class=\"headerlink\" title=\"Logstash安装\"></a>Logstash安装</h1><p><strong>Logstash官方下载地址：<a href=\"https://www.elastic.co/cn/logstash\">https://www.elastic.co/cn/logstash</a></strong></p>\n<blockquote>\n<p>下载同ES相同的版本</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf logstash-7.7.1.tar.gz<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Logstash安装\"><a href=\"#Logstash安装\" class=\"headerlink\" title=\"Logstash安装\"></a>Logstash安装</h1><p><strong>Logstash官方下载地址：<a href=\"https://www.elastic.co/cn/logstash\">https://www.elastic.co/cn/logstash</a></strong></p>\n<blockquote>\n<p>下载同ES相同的版本</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">下载官方安装包</span><br>wget -b https://artifacts.elastic.co/downloads/logstash/logstash-7.7.1.tar.gz<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">解压安装包</span><br>tar -zxvf logstash-7.7.1.tar.gz<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# 【环境安装】阿里Arthas安装\n\n[arthas官方文档](https://arthas.gitee.io/index.html)\n\n本文介绍下arthas如何监控服务集群\n\n## [Web Console](https://arthas.gitee.io/web-console.html)\n\n> 先从arthas官方github上releases下载[arthas-tunnel-server](https://github.com/alibaba/arthas/releases)\n>\n> Arthas tunnel server是一个spring boot fat jar应用，直接`java -jar`启动：\n>\n> `java -jar  arthas-tunnel-server.jar`\n>\n> 默认情况下，arthas tunnel server的web端口是`8080`，arthas agent连接的端口是`7777`。\n>\n> 启动之后，可以访问 http://127.0.0.1:8080/ ，再通过`agentId`连接到已注册的arthas agent上。\n>\n> 通过Spring Boot的Endpoint，可以查看到具体的连接信息： http://127.0.0.1:8080/actuator/arthas ，登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到，比如：\n>\n> ![](https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png)\n\n**[Web页面](http://127.0.0.1:8080/ )：**\n\n![](https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png)\n\n**[Spring Boot的Endpoint查看到具体的连接信息]( http://127.0.0.1:8080/actuator/arthas )**\n\n> 登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到\n\n![](https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png)\n\n## Arthas Spring Boot Starter\n\n> 注意：目前只支持SpringBoot2\n\n**添加pom依赖**\n\n```xml\n<dependency>\n  <groupId>com.taobao.arthas</groupId>\n  <artifactId>arthas-spring-boot-starter</artifactId>\n  <version>${arthas.version}</version>\n</dependency>\n```\n\n最新版本：[查看](https://search.maven.org/search?q=arthas-spring-boot-starter)\n\n**配置属性**\n\n```properties\n# arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个\narthas.tunnel-server=ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址\n# 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。\narthas.telnetPort=-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口\narthas.httpPort=-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口\n```\n\n之后直接启动SpringBoot服务后查看\n\n![](https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png)\n\n查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。\n\n![](https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png)\n\n之后，我们就可以通过arthas的相关命令去操作该服务\n\n","source":"_posts/环境安装/【环境安装】阿里Arthas安装.md","raw":"---\ncategories:\n  - 环境安装\n---\n# 【环境安装】阿里Arthas安装\n\n[arthas官方文档](https://arthas.gitee.io/index.html)\n\n本文介绍下arthas如何监控服务集群\n\n## [Web Console](https://arthas.gitee.io/web-console.html)\n\n> 先从arthas官方github上releases下载[arthas-tunnel-server](https://github.com/alibaba/arthas/releases)\n>\n> Arthas tunnel server是一个spring boot fat jar应用，直接`java -jar`启动：\n>\n> `java -jar  arthas-tunnel-server.jar`\n>\n> 默认情况下，arthas tunnel server的web端口是`8080`，arthas agent连接的端口是`7777`。\n>\n> 启动之后，可以访问 http://127.0.0.1:8080/ ，再通过`agentId`连接到已注册的arthas agent上。\n>\n> 通过Spring Boot的Endpoint，可以查看到具体的连接信息： http://127.0.0.1:8080/actuator/arthas ，登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到，比如：\n>\n> ![](https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png)\n\n**[Web页面](http://127.0.0.1:8080/ )：**\n\n![](https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png)\n\n**[Spring Boot的Endpoint查看到具体的连接信息]( http://127.0.0.1:8080/actuator/arthas )**\n\n> 登陆用户名是`arthas`，密码在arthas tunnel server的日志里可以找到\n\n![](https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png)\n\n## Arthas Spring Boot Starter\n\n> 注意：目前只支持SpringBoot2\n\n**添加pom依赖**\n\n```xml\n<dependency>\n  <groupId>com.taobao.arthas</groupId>\n  <artifactId>arthas-spring-boot-starter</artifactId>\n  <version>${arthas.version}</version>\n</dependency>\n```\n\n最新版本：[查看](https://search.maven.org/search?q=arthas-spring-boot-starter)\n\n**配置属性**\n\n```properties\n# arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个\narthas.tunnel-server=ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址\n# 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。\narthas.telnetPort=-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口\narthas.httpPort=-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口\n```\n\n之后直接启动SpringBoot服务后查看\n\n![](https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png)\n\n查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。\n\n![](https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png)\n\n之后，我们就可以通过arthas的相关命令去操作该服务\n\n","slug":"环境安装/【环境安装】阿里Arthas安装","published":1,"date":"2021-05-25T11:55:30.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z3000819ia7jgx5axi","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境安装】阿里Arthas安装\"><a href=\"#【环境安装】阿里Arthas安装\" class=\"headerlink\" title=\"【环境安装】阿里Arthas安装\"></a>【环境安装】阿里Arthas安装</h1><p><a href=\"https://arthas.gitee.io/index.html\">arthas官方文档</a></p>\n<p>本文介绍下arthas如何监控服务集群</p>\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a><a href=\"https://arthas.gitee.io/web-console.html\">Web Console</a></h2><blockquote>\n<p>先从arthas官方github上releases下载<a href=\"https://github.com/alibaba/arthas/releases\">arthas-tunnel-server</a></p>\n<p>Arthas tunnel server是一个spring boot fat jar应用，直接<code>java -jar</code>启动：</p>\n<p><code>java -jar  arthas-tunnel-server.jar</code></p>\n<p>默认情况下，arthas tunnel server的web端口是<code>8080</code>，arthas agent连接的端口是<code>7777</code>。</p>\n<p>启动之后，可以访问 <a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a> ，再通过<code>agentId</code>连接到已注册的arthas agent上。</p>\n<p>通过Spring Boot的Endpoint，可以查看到具体的连接信息： <a href=\"http://127.0.0.1:8080/actuator/arthas\">http://127.0.0.1:8080/actuator/arthas</a> ，登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到，比如：</p>\n<p><img src=\"https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png\"></p>\n</blockquote>\n<p><strong><a href=\"http://127.0.0.1:8080/\">Web页面</a>：</strong></p>\n<p><img src=\"https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png\"></p>\n<p><strong><a href=\"http://127.0.0.1:8080/actuator/arthas\">Spring Boot的Endpoint查看到具体的连接信息</a></strong></p>\n<blockquote>\n<p>登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png\"></p>\n<h2 id=\"Arthas-Spring-Boot-Starter\"><a href=\"#Arthas-Spring-Boot-Starter\" class=\"headerlink\" title=\"Arthas Spring Boot Starter\"></a>Arthas Spring Boot Starter</h2><blockquote>\n<p>注意：目前只支持SpringBoot2</p>\n</blockquote>\n<p><strong>添加pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.taobao.arthas<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;arthas.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>最新版本：<a href=\"https://search.maven.org/search?q=arthas-spring-boot-starter\">查看</a></p>\n<p><strong>配置属性</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\"># arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个</span><br><span class=\"hljs-attr\">arthas.tunnel-server</span>=<span class=\"hljs-string\">ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址</span><br><span class=\"hljs-comment\"># 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。</span><br><span class=\"hljs-attr\">arthas.telnetPort</span>=<span class=\"hljs-string\">-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口</span><br><span class=\"hljs-attr\">arthas.httpPort</span>=<span class=\"hljs-string\">-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口</span><br></code></pre></td></tr></table></figure>\n\n<p>之后直接启动SpringBoot服务后查看</p>\n<p><img src=\"https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png\"></p>\n<p>查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。</p>\n<p><img src=\"https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png\"></p>\n<p>之后，我们就可以通过arthas的相关命令去操作该服务</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境安装】阿里Arthas安装\"><a href=\"#【环境安装】阿里Arthas安装\" class=\"headerlink\" title=\"【环境安装】阿里Arthas安装\"></a>【环境安装】阿里Arthas安装</h1><p><a href=\"https://arthas.gitee.io/index.html\">arthas官方文档</a></p>\n<p>本文介绍下arthas如何监控服务集群</p>\n<h2 id=\"Web-Console\"><a href=\"#Web-Console\" class=\"headerlink\" title=\"Web Console\"></a><a href=\"https://arthas.gitee.io/web-console.html\">Web Console</a></h2><blockquote>\n<p>先从arthas官方github上releases下载<a href=\"https://github.com/alibaba/arthas/releases\">arthas-tunnel-server</a></p>\n<p>Arthas tunnel server是一个spring boot fat jar应用，直接<code>java -jar</code>启动：</p>\n<p><code>java -jar  arthas-tunnel-server.jar</code></p>\n<p>默认情况下，arthas tunnel server的web端口是<code>8080</code>，arthas agent连接的端口是<code>7777</code>。</p>\n<p>启动之后，可以访问 <a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a> ，再通过<code>agentId</code>连接到已注册的arthas agent上。</p>\n<p>通过Spring Boot的Endpoint，可以查看到具体的连接信息： <a href=\"http://127.0.0.1:8080/actuator/arthas\">http://127.0.0.1:8080/actuator/arthas</a> ，登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到，比如：</p>\n<p><img src=\"https://i.loli.net/2021/05/24/UtBFHiCeG4K21Nj.png\"></p>\n</blockquote>\n<p><strong><a href=\"http://127.0.0.1:8080/\">Web页面</a>：</strong></p>\n<p><img src=\"https://i.loli.net/2021/05/24/BeE5tdvXsuZSlcY.png\"></p>\n<p><strong><a href=\"http://127.0.0.1:8080/actuator/arthas\">Spring Boot的Endpoint查看到具体的连接信息</a></strong></p>\n<blockquote>\n<p>登陆用户名是<code>arthas</code>，密码在arthas tunnel server的日志里可以找到</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/05/24/jAkmteLpdfwV7Tz.png\"></p>\n<h2 id=\"Arthas-Spring-Boot-Starter\"><a href=\"#Arthas-Spring-Boot-Starter\" class=\"headerlink\" title=\"Arthas Spring Boot Starter\"></a>Arthas Spring Boot Starter</h2><blockquote>\n<p>注意：目前只支持SpringBoot2</p>\n</blockquote>\n<p><strong>添加pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.taobao.arthas<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;arthas.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>最新版本：<a href=\"https://search.maven.org/search?q=arthas-spring-boot-starter\">查看</a></p>\n<p><strong>配置属性</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\"># arthas.agent-id=user\t# 指定服务名称，必须唯一。不指定的话，默认拿spring.application.name + 唯一标识Id，生成一个</span><br><span class=\"hljs-attr\">arthas.tunnel-server</span>=<span class=\"hljs-string\">ws://127.0.0.1:7777/ws\t# tunnel-server 服务地址</span><br><span class=\"hljs-comment\"># 如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口，或者配置为 -1，并且通过tunnel server来使用arthas。</span><br><span class=\"hljs-attr\">arthas.telnetPort</span>=<span class=\"hljs-string\">-1 # telnet端口，默认3658；-1：不listen telnet端口；0：则随机telnet端口</span><br><span class=\"hljs-attr\">arthas.httpPort</span>=<span class=\"hljs-string\">-1 # http端口，默认8563；-1：不listen http端口；0：则随机http端口</span><br></code></pre></td></tr></table></figure>\n\n<p>之后直接启动SpringBoot服务后查看</p>\n<p><img src=\"https://i.loli.net/2021/05/24/rHPVs4DCxfvnc5t.png\"></p>\n<p>查看agents注册上来的服务id，之后在填入web端的AgentId，再点击Connect连接。</p>\n<p><img src=\"https://i.loli.net/2021/05/24/fMmlnjwycDGIHZ9.png\"></p>\n<p>之后，我们就可以通过arthas的相关命令去操作该服务</p>\n"},{"_content":"# 【环境搭建】Nexus搭建Maven私服\n\n**Nexus官方下载地址：https://help.sonatype.com/repomanager3/download**\n\n### Docker启动\n\n```shell\n#查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3\ndocker search nexus\n#拉取镜像\ndocker pull sonatype/nexus3\n```\n\n**简单方式启动**\n\n```shell\n#指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。\ndocker run -p 8081:8081 --name nexus sonatype/nexus3\n\n#如果有容器和下面要创建的容器同名的话，先删除\ndocker rm <container_name>\n\n#指定虚拟机与容器共享的文件夹\nmkdir /usr/local/docker/nexus/nexus-data\n\n#启动容器\ndocker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3\n\n#指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限\nchmod 777 /usr/local/docker/nexus/nexus-data\n```\n\n### 利用docker-compose启动\n\n```shell\n#创建docker-compose.yml\nmkdir /usr/local/docker\ncd /usr/local/docker\nvi docker-compose.yml\n```\n\n**docker-compose.yml内容如下：**\n\n```shell\nversion: \"3.7\"\nservices:\n  nexus:\n    restart: \"no\" \n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081 \n    volumes:\n      - /usr/local/docker/nexus/nexus-data:/nexus-data\n```\n\n> version : 指定docker-compose语法版本，版本不同，支持的docker也不同\n\n> restart\n\n> services : 多种服务的根节点\n\n> nexus : 服务名随意起，代表要创建的服务\n\n> restart : 容器的重启策略，有no、always、on-failure、\n> unless-stopped四种可选值。\n\n> image : 容器依据的镜像\n\n> container_name : 容器名\n\n> ports : 端口\n\n> volumes : 数据卷\n\n启动后访问地址：http://ip:port/\n\n**默认账号：admin**\n\n**管理员登录密码在 `nexus/nexus-data` 中`admin` 开头的文件中，将其拷贝输入即可。**\n\n**登录之后会要求修改密码，按要求修改即可。**\n\n## Nexus 配置\n\n**在Maven的conf下的setting.xml文件中配置**\n\n```xml\n<server>\n  <id>releases</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n<server>\n  <id>snapshots</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n```\n\n**配置仓库地址**\n\n```xml\n<!-- 配置远程仓库、阿里云代理镜像 -->\n<mirror>\n   <!--该镜像的唯一标识符。id用来区分不同的mirror元素。 -->\n   <id>maven-public</id>\n   <!--镜像名称 -->\n   <name>maven-public</name>\n   <!--*指的是访问任何仓库都使用我们的私服-->\n   <mirrorOf>*</mirrorOf>\n   <!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->\n   <url>http://${ip}:${port}/repository/maven-public/</url>\n</mirror>\n\n<mirror>\n  <id>nexus-aliyun</id>\n  <mirrorOf>*</mirrorOf>\n  <name>Nexus aliyun</name>\n  <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror>\n\n<mirror>\n  <id>alimaven</id>\n  <mirrorOf>central</mirrorOf>\n  <name>aliyun maven</name>\n  <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n</mirror>\n```\n\n**在项目pom.xml文件里配置私服仓库地址**\n\n```xml\n<repositories>\n  <repository>\n    <id>maven-nexus</id>\n    <name>maven-nexus</name>\n    <url>http://${ip}:${port}/repository/maven-public/</url>\n    <releases>\n      <enabled>true</enabled>\n    </releases>\n    <snapshots>\n      <enabled>true</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n```\n\n**发布私有jar包**\n\n```xml\n<!-- 私服仓库地址、该id对应的是setting.xml文件里的<server>里id配置。名称必须一样 -->\n<distributionManagement>\n  <repository>\n    <id>releases</id>\n    <name>Releases</name>\n    <url>http://${ip}:${port}/repository/maven-releases/</url>\n  </repository>\n  <snapshotRepository>\n    <id>snapshots</id>\n    <name>Snapshot</name>\n    <url>http://${ip}:${port}/repository/maven-snapshots/</url>\n  </snapshotRepository>\n</distributionManagement>\n<!-- 发布私有包时的maven打包插件 -->\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-source-plugin</artifactId>\n    </plugin>\n  </plugins>\n</build>\n```\n\n#### 私服工作原理：\n\n配置Nexus之前，需要先了解一下私服的工作原理，如下图：\n\n![](https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png)\n\n找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；\n\n#### Nexus仓库类型介绍\n\n默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。\n\n- hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）\n- proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包\n- group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）\n\n#### 分组仓库的配置\n\n","source":"_posts/环境安装/未完成.md","raw":"---\ncategories:\n  - 环境安装\n---\n# 【环境搭建】Nexus搭建Maven私服\n\n**Nexus官方下载地址：https://help.sonatype.com/repomanager3/download**\n\n### Docker启动\n\n```shell\n#查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3\ndocker search nexus\n#拉取镜像\ndocker pull sonatype/nexus3\n```\n\n**简单方式启动**\n\n```shell\n#指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。\ndocker run -p 8081:8081 --name nexus sonatype/nexus3\n\n#如果有容器和下面要创建的容器同名的话，先删除\ndocker rm <container_name>\n\n#指定虚拟机与容器共享的文件夹\nmkdir /usr/local/docker/nexus/nexus-data\n\n#启动容器\ndocker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3\n\n#指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限\nchmod 777 /usr/local/docker/nexus/nexus-data\n```\n\n### 利用docker-compose启动\n\n```shell\n#创建docker-compose.yml\nmkdir /usr/local/docker\ncd /usr/local/docker\nvi docker-compose.yml\n```\n\n**docker-compose.yml内容如下：**\n\n```shell\nversion: \"3.7\"\nservices:\n  nexus:\n    restart: \"no\" \n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8081:8081 \n    volumes:\n      - /usr/local/docker/nexus/nexus-data:/nexus-data\n```\n\n> version : 指定docker-compose语法版本，版本不同，支持的docker也不同\n\n> restart\n\n> services : 多种服务的根节点\n\n> nexus : 服务名随意起，代表要创建的服务\n\n> restart : 容器的重启策略，有no、always、on-failure、\n> unless-stopped四种可选值。\n\n> image : 容器依据的镜像\n\n> container_name : 容器名\n\n> ports : 端口\n\n> volumes : 数据卷\n\n启动后访问地址：http://ip:port/\n\n**默认账号：admin**\n\n**管理员登录密码在 `nexus/nexus-data` 中`admin` 开头的文件中，将其拷贝输入即可。**\n\n**登录之后会要求修改密码，按要求修改即可。**\n\n## Nexus 配置\n\n**在Maven的conf下的setting.xml文件中配置**\n\n```xml\n<server>\n  <id>releases</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n<server>\n  <id>snapshots</id>\n  <username>admin</username>\n  <password>admin123</password>\n</server>\n```\n\n**配置仓库地址**\n\n```xml\n<!-- 配置远程仓库、阿里云代理镜像 -->\n<mirror>\n   <!--该镜像的唯一标识符。id用来区分不同的mirror元素。 -->\n   <id>maven-public</id>\n   <!--镜像名称 -->\n   <name>maven-public</name>\n   <!--*指的是访问任何仓库都使用我们的私服-->\n   <mirrorOf>*</mirrorOf>\n   <!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->\n   <url>http://${ip}:${port}/repository/maven-public/</url>\n</mirror>\n\n<mirror>\n  <id>nexus-aliyun</id>\n  <mirrorOf>*</mirrorOf>\n  <name>Nexus aliyun</name>\n  <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror>\n\n<mirror>\n  <id>alimaven</id>\n  <mirrorOf>central</mirrorOf>\n  <name>aliyun maven</name>\n  <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n</mirror>\n```\n\n**在项目pom.xml文件里配置私服仓库地址**\n\n```xml\n<repositories>\n  <repository>\n    <id>maven-nexus</id>\n    <name>maven-nexus</name>\n    <url>http://${ip}:${port}/repository/maven-public/</url>\n    <releases>\n      <enabled>true</enabled>\n    </releases>\n    <snapshots>\n      <enabled>true</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n```\n\n**发布私有jar包**\n\n```xml\n<!-- 私服仓库地址、该id对应的是setting.xml文件里的<server>里id配置。名称必须一样 -->\n<distributionManagement>\n  <repository>\n    <id>releases</id>\n    <name>Releases</name>\n    <url>http://${ip}:${port}/repository/maven-releases/</url>\n  </repository>\n  <snapshotRepository>\n    <id>snapshots</id>\n    <name>Snapshot</name>\n    <url>http://${ip}:${port}/repository/maven-snapshots/</url>\n  </snapshotRepository>\n</distributionManagement>\n<!-- 发布私有包时的maven打包插件 -->\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <encoding>UTF-8</encoding>\n      </configuration>\n    </plugin>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-source-plugin</artifactId>\n    </plugin>\n  </plugins>\n</build>\n```\n\n#### 私服工作原理：\n\n配置Nexus之前，需要先了解一下私服的工作原理，如下图：\n\n![](https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png)\n\n找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；\n\n#### Nexus仓库类型介绍\n\n默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。\n\n- hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）\n- proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包\n- group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）\n\n#### 分组仓库的配置\n\n","slug":"环境安装/未完成","published":1,"date":"2020-12-09T10:40:45.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z5000919iaf84m5rua","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【环境搭建】Nexus搭建Maven私服\"><a href=\"#【环境搭建】Nexus搭建Maven私服\" class=\"headerlink\" title=\"【环境搭建】Nexus搭建Maven私服\"></a>【环境搭建】Nexus搭建Maven私服</h1><p><strong>Nexus官方下载地址：<a href=\"https://help.sonatype.com/repomanager3/download\">https://help.sonatype.com/repomanager3/download</a></strong></p>\n<h3 id=\"Docker启动\"><a href=\"#Docker启动\" class=\"headerlink\" title=\"Docker启动\"></a>Docker启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3</span><br>docker search nexus<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像</span><br>docker pull sonatype/nexus3<br></code></pre></td></tr></table></figure>\n\n<p><strong>简单方式启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。</span><br>docker run -p 8081:8081 --name nexus sonatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">如果有容器和下面要创建的容器同名的话，先删除</span><br>docker rm &lt;container_name&gt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定虚拟机与容器共享的文件夹</span><br>mkdir /usr/local/docker/nexus/nexus-data<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动容器</span><br>docker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限</span><br>chmod 777 /usr/local/docker/nexus/nexus-data<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"利用docker-compose启动\"><a href=\"#利用docker-compose启动\" class=\"headerlink\" title=\"利用docker-compose启动\"></a>利用docker-compose启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">创建docker-compose.yml</span><br>mkdir /usr/local/docker<br>cd /usr/local/docker<br>vi docker-compose.yml<br></code></pre></td></tr></table></figure>\n\n<p><strong>docker-compose.yml内容如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">version: &quot;3.7&quot;<br>services:<br>  nexus:<br>    restart: &quot;no&quot; <br>    image: sonatype/nexus3<br>    container_name: nexus<br>    ports:<br>      - 8081:8081 <br>    volumes:<br>      - /usr/local/docker/nexus/nexus-data:/nexus-data<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>version : 指定docker-compose语法版本，版本不同，支持的docker也不同</p>\n</blockquote>\n<blockquote>\n<p>restart</p>\n</blockquote>\n<blockquote>\n<p>services : 多种服务的根节点</p>\n</blockquote>\n<blockquote>\n<p>nexus : 服务名随意起，代表要创建的服务</p>\n</blockquote>\n<blockquote>\n<p>restart : 容器的重启策略，有no、always、on-failure、<br>unless-stopped四种可选值。</p>\n</blockquote>\n<blockquote>\n<p>image : 容器依据的镜像</p>\n</blockquote>\n<blockquote>\n<p>container_name : 容器名</p>\n</blockquote>\n<blockquote>\n<p>ports : 端口</p>\n</blockquote>\n<blockquote>\n<p>volumes : 数据卷</p>\n</blockquote>\n<p>启动后访问地址：<a href=\"http://ip:port/\">http://ip:port/</a></p>\n<p><strong>默认账号：admin</strong></p>\n<p><strong>管理员登录密码在 <code>nexus/nexus-data</code> 中<code>admin</code> 开头的文件中，将其拷贝输入即可。</strong></p>\n<p><strong>登录之后会要求修改密码，按要求修改即可。</strong></p>\n<h2 id=\"Nexus-配置\"><a href=\"#Nexus-配置\" class=\"headerlink\" title=\"Nexus 配置\"></a>Nexus 配置</h2><p><strong>在Maven的conf下的setting.xml文件中配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>配置仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 配置远程仓库、阿里云代理镜像 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--镜像名称 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus-aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Nexus aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>在项目pom.xml文件里配置私服仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repositories</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releases</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releases</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshots</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshots</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>发布私有jar包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 私服仓库地址、该id对应的是setting.xml文件里的&lt;server&gt;里id配置。名称必须一样 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-releases/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Snapshot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-snapshots/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 发布私有包时的maven打包插件 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"私服工作原理：\"><a href=\"#私服工作原理：\" class=\"headerlink\" title=\"私服工作原理：\"></a>私服工作原理：</h4><p>配置Nexus之前，需要先了解一下私服的工作原理，如下图：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png\"></p>\n<p>找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；</p>\n<h4 id=\"Nexus仓库类型介绍\"><a href=\"#Nexus仓库类型介绍\" class=\"headerlink\" title=\"Nexus仓库类型介绍\"></a>Nexus仓库类型介绍</h4><p>默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。</p>\n<ul>\n<li>hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）</li>\n<li>proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包</li>\n<li>group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）</li>\n</ul>\n<h4 id=\"分组仓库的配置\"><a href=\"#分组仓库的配置\" class=\"headerlink\" title=\"分组仓库的配置\"></a>分组仓库的配置</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【环境搭建】Nexus搭建Maven私服\"><a href=\"#【环境搭建】Nexus搭建Maven私服\" class=\"headerlink\" title=\"【环境搭建】Nexus搭建Maven私服\"></a>【环境搭建】Nexus搭建Maven私服</h1><p><strong>Nexus官方下载地址：<a href=\"https://help.sonatype.com/repomanager3/download\">https://help.sonatype.com/repomanager3/download</a></strong></p>\n<h3 id=\"Docker启动\"><a href=\"#Docker启动\" class=\"headerlink\" title=\"Docker启动\"></a>Docker启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查找镜像;一般安装star数最多的版本，目前最新是sonatype/nexus3</span><br>docker search nexus<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">拉取镜像</span><br>docker pull sonatype/nexus3<br></code></pre></td></tr></table></figure>\n\n<p><strong>简单方式启动</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷，防止每次启动容器，容器里的数据丢失，实现容器和虚拟机数据共享。</span><br>docker run -p 8081:8081 --name nexus sonatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">如果有容器和下面要创建的容器同名的话，先删除</span><br>docker rm &lt;container_name&gt;<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定虚拟机与容器共享的文件夹</span><br>mkdir /usr/local/docker/nexus/nexus-data<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">启动容器</span><br>docker run -p 8081:8081 --name nexus -v /usr/local/docker/nexus/nexus-data:/nexus-data snoatype/nexus3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">指定数据卷后启动，可能会报一些权限错误，导致启动不起来。可能会需要修改文件夹权限</span><br>chmod 777 /usr/local/docker/nexus/nexus-data<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"利用docker-compose启动\"><a href=\"#利用docker-compose启动\" class=\"headerlink\" title=\"利用docker-compose启动\"></a>利用docker-compose启动</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">创建docker-compose.yml</span><br>mkdir /usr/local/docker<br>cd /usr/local/docker<br>vi docker-compose.yml<br></code></pre></td></tr></table></figure>\n\n<p><strong>docker-compose.yml内容如下：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">version: &quot;3.7&quot;<br>services:<br>  nexus:<br>    restart: &quot;no&quot; <br>    image: sonatype/nexus3<br>    container_name: nexus<br>    ports:<br>      - 8081:8081 <br>    volumes:<br>      - /usr/local/docker/nexus/nexus-data:/nexus-data<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>version : 指定docker-compose语法版本，版本不同，支持的docker也不同</p>\n</blockquote>\n<blockquote>\n<p>restart</p>\n</blockquote>\n<blockquote>\n<p>services : 多种服务的根节点</p>\n</blockquote>\n<blockquote>\n<p>nexus : 服务名随意起，代表要创建的服务</p>\n</blockquote>\n<blockquote>\n<p>restart : 容器的重启策略，有no、always、on-failure、<br>unless-stopped四种可选值。</p>\n</blockquote>\n<blockquote>\n<p>image : 容器依据的镜像</p>\n</blockquote>\n<blockquote>\n<p>container_name : 容器名</p>\n</blockquote>\n<blockquote>\n<p>ports : 端口</p>\n</blockquote>\n<blockquote>\n<p>volumes : 数据卷</p>\n</blockquote>\n<p>启动后访问地址：<a href=\"http://ip:port/\">http://ip:port/</a></p>\n<p><strong>默认账号：admin</strong></p>\n<p><strong>管理员登录密码在 <code>nexus/nexus-data</code> 中<code>admin</code> 开头的文件中，将其拷贝输入即可。</strong></p>\n<p><strong>登录之后会要求修改密码，按要求修改即可。</strong></p>\n<h2 id=\"Nexus-配置\"><a href=\"#Nexus-配置\" class=\"headerlink\" title=\"Nexus 配置\"></a>Nexus 配置</h2><p><strong>在Maven的conf下的setting.xml文件中配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">server</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">username</span>&gt;</span>admin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">username</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">password</span>&gt;</span>admin123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">password</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">server</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>配置仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 配置远程仓库、阿里云代理镜像 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--镜像名称 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>nexus-aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Nexus aliyun<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>在项目pom.xml文件里配置私服仓库地址</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repositories</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>maven-nexus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">releases</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">releases</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshots</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">enabled</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">enabled</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshots</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>发布私有jar包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 私服仓库地址、该id对应的是setting.xml文件里的&lt;server&gt;里id配置。名称必须一样 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">repository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Releases<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-releases/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">repository</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>snapshots<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>Snapshot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://$&#123;ip&#125;:$&#123;port&#125;/repository/maven-snapshots/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">snapshotRepository</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">distributionManagement</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 发布私有包时的maven打包插件 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoding</span>&gt;</span>UTF-8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoding</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"私服工作原理：\"><a href=\"#私服工作原理：\" class=\"headerlink\" title=\"私服工作原理：\"></a>私服工作原理：</h4><p>配置Nexus之前，需要先了解一下私服的工作原理，如下图：</p>\n<p><img src=\"https://i.loli.net/2020/06/06/tk479CNpxclM8D6.png\"></p>\n<p>找依赖包的流程： 首先在本地仓库中找，如果没命中，那么就找远程私服；远程私服的查找规则同样是先找host属性的私有库，然后再去找proxy属性的远程仓库；可以配置多个proxy；</p>\n<h4 id=\"Nexus仓库类型介绍\"><a href=\"#Nexus仓库类型介绍\" class=\"headerlink\" title=\"Nexus仓库类型介绍\"></a>Nexus仓库类型介绍</h4><p>默认安装有以下这几个仓库，在控制台也可以修改远程仓库的地址，第三方仓库等。</p>\n<ul>\n<li>hosted（宿主仓库库） ：存放本公司开发的jar包（正式版本、测试版本）</li>\n<li>proxy（代理仓库）：代理中央仓库、Apache下测试版本的jar包</li>\n<li>group（组仓库）：使用时连接组仓库，包含Hosted（宿主仓库）和Proxy（代理仓库）</li>\n</ul>\n<h4 id=\"分组仓库的配置\"><a href=\"#分组仓库的配置\" class=\"headerlink\" title=\"分组仓库的配置\"></a>分组仓库的配置</h4>"},{"_content":"codota：AI提示\n\n","source":"_posts/开源分享/软件工具/idea插件.md","raw":"---\ncategories:\n  - 开源分享\n---\ncodota：AI提示\n\n","slug":"开源分享/软件工具/idea插件","published":1,"date":"2021-01-01T16:30:22.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z6000a19iadp358xdz","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<p>codota：AI提示</p>\n","site":{"data":{}},"excerpt":"","more":"<p>codota：AI提示</p>\n"},{"_content":"# win10增强工具\n\nPowerToys：https://github.com/microsoft/PowerToys/tags\n\n# 数据库建模：\n\nPDMan：http://www.pdman.cn/#/downLoad\n\nEZDML：http://www.ezdml.com/\n\n","source":"_posts/开源分享/软件工具/软件工具.md","raw":"---\ncategories:\n  - 开源分享\n---\n# win10增强工具\n\nPowerToys：https://github.com/microsoft/PowerToys/tags\n\n# 数据库建模：\n\nPDMan：http://www.pdman.cn/#/downLoad\n\nEZDML：http://www.ezdml.com/\n\n","slug":"开源分享/软件工具/软件工具","published":1,"date":"2021-01-01T12:21:48.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z7000b19ia8pvw3k56","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"win10增强工具\"><a href=\"#win10增强工具\" class=\"headerlink\" title=\"win10增强工具\"></a>win10增强工具</h1><p>PowerToys：<a href=\"https://github.com/microsoft/PowerToys/tags\">https://github.com/microsoft/PowerToys/tags</a></p>\n<h1 id=\"数据库建模：\"><a href=\"#数据库建模：\" class=\"headerlink\" title=\"数据库建模：\"></a>数据库建模：</h1><p>PDMan：<a href=\"http://www.pdman.cn/#/downLoad\">http://www.pdman.cn/#/downLoad</a></p>\n<p>EZDML：<a href=\"http://www.ezdml.com/\">http://www.ezdml.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"win10增强工具\"><a href=\"#win10增强工具\" class=\"headerlink\" title=\"win10增强工具\"></a>win10增强工具</h1><p>PowerToys：<a href=\"https://github.com/microsoft/PowerToys/tags\">https://github.com/microsoft/PowerToys/tags</a></p>\n<h1 id=\"数据库建模：\"><a href=\"#数据库建模：\" class=\"headerlink\" title=\"数据库建模：\"></a>数据库建模：</h1><p>PDMan：<a href=\"http://www.pdman.cn/#/downLoad\">http://www.pdman.cn/#/downLoad</a></p>\n<p>EZDML：<a href=\"http://www.ezdml.com/\">http://www.ezdml.com/</a></p>\n"},{"_content":"# CAS\n\n**compare and swap/comparen and exchange (比较并交换)**\n\n![](https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png)\n\n![](https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png)\n\n**注意ABA问题：**\n\na=0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作=0，线程二又写回到a，此时a又=0；当线程一执行写回的时候去判断a是不是等于原来的值0。\n\n但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？\n\n那么如何解决这个问题呢？\n\nCAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。\n\n**举例说明：**\n\nJDK里提供的原子类在这个包下`java.util.concurrent.atomic`\n\n```java\n//Integer原子类\nAtomicInteger i = new AtomicInteger();\ni.incrementAndGet();\n\n//源码\n//Atomically increments by one the current value. 将当前值原子地加1。\n//Returns:the updated value 返回:更新后的值\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n\n//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。\n//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。\n//Unsafe类是\"final\"的，不允许继承。且构造函数是private的:\n//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe\npublic Unsafe getUnsafe() throws IllegalAccessException {\n    Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n    unsafeField.setAccessible(true);\n    Unsafe unsafe = (Unsafe) unsafeField.get(null);\n    return unsafe;\n}\n//Java中的Unsafe类\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n//native C++方法\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n//汇编指令，硬件直接支持 lock cmpxchg\n```\n\n","source":"_posts/JAVA/CAS.md","raw":"---\ncategories:\n  - JAVA\n---\n# CAS\n\n**compare and swap/comparen and exchange (比较并交换)**\n\n![](https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png)\n\n![](https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png)\n\n**注意ABA问题：**\n\na=0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作=0，线程二又写回到a，此时a又=0；当线程一执行写回的时候去判断a是不是等于原来的值0。\n\n但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？\n\n那么如何解决这个问题呢？\n\nCAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。\n\n**举例说明：**\n\nJDK里提供的原子类在这个包下`java.util.concurrent.atomic`\n\n```java\n//Integer原子类\nAtomicInteger i = new AtomicInteger();\ni.incrementAndGet();\n\n//源码\n//Atomically increments by one the current value. 将当前值原子地加1。\n//Returns:the updated value 返回:更新后的值\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n\n//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。\n//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。\n//Unsafe类是\"final\"的，不允许继承。且构造函数是private的:\n//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe\npublic Unsafe getUnsafe() throws IllegalAccessException {\n    Field unsafeField = Unsafe.class.getDeclaredFields()[0];\n    unsafeField.setAccessible(true);\n    Unsafe unsafe = (Unsafe) unsafeField.get(null);\n    return unsafe;\n}\n//Java中的Unsafe类\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n    int var5;\n    do {\n        var5 = this.getIntVolatile(var1, var2);\n    } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n    return var5;\n}\n//native C++方法\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n//汇编指令，硬件直接支持 lock cmpxchg\n```\n\n","slug":"JAVA/CAS","published":1,"date":"2021-02-08T10:02:05.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z8000c19iaf3utcb2q","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p><strong>compare and swap&#x2F;comparen and exchange (比较并交换)</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png\"></p>\n<p><strong>注意ABA问题：</strong></p>\n<p>a&#x3D;0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作&#x3D;0，线程二又写回到a，此时a又&#x3D;0；当线程一执行写回的时候去判断a是不是等于原来的值0。</p>\n<p>但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？</p>\n<p>那么如何解决这个问题呢？</p>\n<p>CAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。</p>\n<p><strong>举例说明：</strong></p>\n<p>JDK里提供的原子类在这个包下<code>java.util.concurrent.atomic</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Integer原子类</span><br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>i.incrementAndGet();<br><br><span class=\"hljs-comment\">//源码</span><br><span class=\"hljs-comment\">//Atomically increments by one the current value. 将当前值原子地加1。</span><br><span class=\"hljs-comment\">//Returns:the updated value 返回:更新后的值</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">incrementAndGet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> unsafe.getAndAddInt(<span class=\"hljs-built_in\">this</span>, valueOffset, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。</span><br><span class=\"hljs-comment\">//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。</span><br><span class=\"hljs-comment\">//Unsafe类是&quot;final&quot;的，不允许继承。且构造函数是private的:</span><br><span class=\"hljs-comment\">//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe</span><br><span class=\"hljs-keyword\">public</span> Unsafe <span class=\"hljs-title function_\">getUnsafe</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>    <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">unsafeField</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredFields()[<span class=\"hljs-number\">0</span>];<br>    unsafeField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-type\">Unsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> (Unsafe) unsafeField.get(<span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-keyword\">return</span> unsafe;<br>&#125;<br><span class=\"hljs-comment\">//Java中的Unsafe类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAndAddInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4)</span> &#123;<br>    <span class=\"hljs-type\">int</span> var5;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        var5 = <span class=\"hljs-built_in\">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class=\"hljs-keyword\">return</span> var5;<br>&#125;<br><span class=\"hljs-comment\">//native C++方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compareAndSwapInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4, <span class=\"hljs-type\">int</span> var5)</span>;<br><span class=\"hljs-comment\">//汇编指令，硬件直接支持 lock cmpxchg</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p><strong>compare and swap&#x2F;comparen and exchange (比较并交换)</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/07/LbyRn3SloFiBImT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/02/07/zuT3aS7b94lODKB.png\"></p>\n<p><strong>注意ABA问题：</strong></p>\n<p>a&#x3D;0，线程一读取到a执行+1操作，此时有另外一个线程，线程二也读取到了0，并且执行了+1操作，然后又执行了-1操作&#x3D;0，线程二又写回到a，此时a又&#x3D;0；当线程一执行写回的时候去判断a是不是等于原来的值0。</p>\n<p>但是此时的0已经不是原来的0了，因为过程中+1又-1才又等于0。打个比方跟女朋友分手后，她又经历过两个男人，然后又复合。那么她还是原来的她了吗？</p>\n<p>那么如何解决这个问题呢？</p>\n<p>CAS就是乐观锁，乐观的认为并不会发生改变，那么我们就用乐观锁的实现机制，加上版本号，当任何一个线程对这个值进行修改的时候，都去给这个版本号+1，然后在比较的时候不仅仅需要比较原值，还需要比较版本号是否一致。</p>\n<p><strong>举例说明：</strong></p>\n<p>JDK里提供的原子类在这个包下<code>java.util.concurrent.atomic</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Integer原子类</span><br><span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();<br>i.incrementAndGet();<br><br><span class=\"hljs-comment\">//源码</span><br><span class=\"hljs-comment\">//Atomically increments by one the current value. 将当前值原子地加1。</span><br><span class=\"hljs-comment\">//Returns:the updated value 返回:更新后的值</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">incrementAndGet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> unsafe.getAndAddInt(<span class=\"hljs-built_in\">this</span>, valueOffset, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//Java和C++语言的一个重要区别就是Java中我们无法直接操作一块内存区域，不能像C++中那样可以自己申请内存和释放内存。Java中的Unsafe类为我们提供了类似C++手动管理内存的能力。</span><br><span class=\"hljs-comment\">//Unsafe类，全限定名是sun.misc.Unsafe，从名字中我们可以看出来这个类对普通程序员来说是“危险”的，一般应用开发者不会用到这个类。</span><br><span class=\"hljs-comment\">//Unsafe类是&quot;final&quot;的，不允许继承。且构造函数是private的:</span><br><span class=\"hljs-comment\">//Unsafe无法实例化，那么怎么获取Unsafe呢？答案就是通过反射来获取Unsafe</span><br><span class=\"hljs-keyword\">public</span> Unsafe <span class=\"hljs-title function_\">getUnsafe</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>    <span class=\"hljs-type\">Field</span> <span class=\"hljs-variable\">unsafeField</span> <span class=\"hljs-operator\">=</span> Unsafe.class.getDeclaredFields()[<span class=\"hljs-number\">0</span>];<br>    unsafeField.setAccessible(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-type\">Unsafe</span> <span class=\"hljs-variable\">unsafe</span> <span class=\"hljs-operator\">=</span> (Unsafe) unsafeField.get(<span class=\"hljs-literal\">null</span>);<br>    <span class=\"hljs-keyword\">return</span> unsafe;<br>&#125;<br><span class=\"hljs-comment\">//Java中的Unsafe类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getAndAddInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4)</span> &#123;<br>    <span class=\"hljs-type\">int</span> var5;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        var5 = <span class=\"hljs-built_in\">this</span>.getIntVolatile(var1, var2);<br>    &#125; <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br>    <span class=\"hljs-keyword\">return</span> var5;<br>&#125;<br><span class=\"hljs-comment\">//native C++方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compareAndSwapInt</span><span class=\"hljs-params\">(Object var1, <span class=\"hljs-type\">long</span> var2, <span class=\"hljs-type\">int</span> var4, <span class=\"hljs-type\">int</span> var5)</span>;<br><span class=\"hljs-comment\">//汇编指令，硬件直接支持 lock cmpxchg</span><br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# Synchronized锁升级过程\n\n![](https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png)\n\n## 无锁\n\n表示刚刚new出来的对象\n\n## 偏向锁\n\n此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程\n\n## 轻量级锁（自旋锁、自适应锁、CAS）\n\n这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。\n\nJDK1.6中-XX:+UseSpinning开启；\n-XX:PreBlockSpin=10 为自旋次数；\nJDK1.7后，去掉此参数，由jvm自动控制；\n\n## 重量级锁\n\n向硬件级别CPU去申请锁资源","source":"_posts/JAVA/Synchronized锁升级过程.md","raw":"---\ncategories:\n  - JAVA\n---\n# Synchronized锁升级过程\n\n![](https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png)\n\n## 无锁\n\n表示刚刚new出来的对象\n\n## 偏向锁\n\n此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程\n\n## 轻量级锁（自旋锁、自适应锁、CAS）\n\n这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。\n\nJDK1.6中-XX:+UseSpinning开启；\n-XX:PreBlockSpin=10 为自旋次数；\nJDK1.7后，去掉此参数，由jvm自动控制；\n\n## 重量级锁\n\n向硬件级别CPU去申请锁资源","slug":"JAVA/Synchronized锁升级过程","published":1,"date":"2021-02-08T08:09:10.000Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z9000d19iadidi022v","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Synchronized锁升级过程\"><a href=\"#Synchronized锁升级过程\" class=\"headerlink\" title=\"Synchronized锁升级过程\"></a>Synchronized锁升级过程</h1><p><img src=\"https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png\"></p>\n<h2 id=\"无锁\"><a href=\"#无锁\" class=\"headerlink\" title=\"无锁\"></a>无锁</h2><p>表示刚刚new出来的对象</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程</p>\n<h2 id=\"轻量级锁（自旋锁、自适应锁、CAS）\"><a href=\"#轻量级锁（自旋锁、自适应锁、CAS）\" class=\"headerlink\" title=\"轻量级锁（自旋锁、自适应锁、CAS）\"></a>轻量级锁（自旋锁、自适应锁、CAS）</h2><p>这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。</p>\n<p>JDK1.6中-XX:+UseSpinning开启；<br>-XX:PreBlockSpin&#x3D;10 为自旋次数；<br>JDK1.7后，去掉此参数，由jvm自动控制；</p>\n<h2 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h2><p>向硬件级别CPU去申请锁资源</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Synchronized锁升级过程\"><a href=\"#Synchronized锁升级过程\" class=\"headerlink\" title=\"Synchronized锁升级过程\"></a>Synchronized锁升级过程</h1><p><img src=\"https://i.loli.net/2021/02/07/kvzPKZTwC4oYUgl.png\"></p>\n<h2 id=\"无锁\"><a href=\"#无锁\" class=\"headerlink\" title=\"无锁\"></a>无锁</h2><p>表示刚刚new出来的对象</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>此时有一个线程过来争夺锁，发现没有人用过这把锁，此时会在对象头里标记该线程ID，表示该对象锁偏爱于该线程</p>\n<h2 id=\"轻量级锁（自旋锁、自适应锁、CAS）\"><a href=\"#轻量级锁（自旋锁、自适应锁、CAS）\" class=\"headerlink\" title=\"轻量级锁（自旋锁、自适应锁、CAS）\"></a>轻量级锁（自旋锁、自适应锁、CAS）</h2><p>这时又有线程二来争夺锁资源，那么该对象锁升级为轻量级锁，也就是自旋锁，A线程在使用，B线程循环等待。</p>\n<p>JDK1.6中-XX:+UseSpinning开启；<br>-XX:PreBlockSpin&#x3D;10 为自旋次数；<br>JDK1.7后，去掉此参数，由jvm自动控制；</p>\n<h2 id=\"重量级锁\"><a href=\"#重量级锁\" class=\"headerlink\" title=\"重量级锁\"></a>重量级锁</h2><p>向硬件级别CPU去申请锁资源</p>\n"},{"_content":"# JAVA对象内存布局\n\n![](https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png)\n\n对象头：\n\n- markword：记录锁的信息、GC信息\n- 类型指针class pointer：记录对象属于哪个Class类型的\n\n实例数据instance data：成员变量\n\n对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快\n\n```pom\n<!-- 工具：JOL=JAVA Object Layout -->\n<dependency>\n    <groupId>org.openjdk.jol</groupId>\n    <artifactId>jol-core</artifactId>\n    <version>0.14</version>\n</dependency>\n```\n\n```java\npublic static void main(String[] args) {\n    Object o = new Object();\n    System.out.println(ClassLayout.parseInstance(o).toPrintable());\n}\n```\n\n```shell\njava.lang.Object object internals:\n OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE\n      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)[padding]\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n```\n\n```shell\njava -XX:+PrintCommandLineFlags -version\n-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节\n\n-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节\n\n数组的话会有一个数组长度length，占用4个字节。\n\n|  类型   | 占用字节 | 占用位数 |\n| :-----: | :------: | :------: |\n|  byte   |    1     |    8     |\n|  short  |    2     |    16    |\n|   int   |    4     |    32    |\n|  long   |    8     |    64    |\n|  float  |    4     |    32    |\n| double  |    8     |    64    |\n|  char   |    2     |    16    |\n| boolean |    1     |    8     |\n\n**示例：**\n\n```java\n@Data\npublic class Account {\n    private long id;\n    private String username;\n    private String password;\n\n    public static void main(String[] args) {\n        Object o1 = new Object();\n        System.out.println(\"空对象：\" + ClassLayout.parseInstance(o1).toPrintable());\n        Object o2 = new Account();\n        System.out.println(\"带属性对象：\" + ClassLayout.parseInstance(o2).toPrintable());\n        Object o3 = new int[1];\n        System.out.println(\"数组：\" + ClassLayout.parseInstance(o3).toPrintable());\n        Object o4 = new ArrayList<>();\n        System.out.println(\"空List：\" + ClassLayout.parseInstance(o4).toPrintable());\n    }\n}\n```\n\n**控制台输出：**\n\n```\n空对象：java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n带属性对象：cn.happyloves.example.dto.Account object internals:\n OFFSET  SIZE               TYPE DESCRIPTION                               VALUE\n      0     4                    (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                    (object header)                           54 c3 00 f8 (01010100 11000011 00000000 11111000) (-134167724)\n     12     4   java.lang.String Account.username                          null\n     16     8               long Account.id                                0\n     24     4   java.lang.String Account.password                          null\n     28     4                    (loss due to the next object alignment)\nInstance size: 32 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n数组：[I object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)\n     12     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n     16     4    int [I.<elements>                             N/A\n     20     4        (loss due to the next object alignment)\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n空List：java.util.ArrayList object internals:\n OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE\n      0     4                      (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                      (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                      (object header)                           7f 2f 00 f8 (01111111 00101111 00000000 11111000) (-134205569)\n     12     4                  int AbstractList.modCount                     0\n     16     4                  int ArrayList.size                            0\n     20     4   java.lang.Object[] ArrayList.elementData                     []\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n```\n\n","source":"_posts/JAVA/对象内存布局.md","raw":"---\ncategories:\n  - JAVA\n---\n# JAVA对象内存布局\n\n![](https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png)\n\n对象头：\n\n- markword：记录锁的信息、GC信息\n- 类型指针class pointer：记录对象属于哪个Class类型的\n\n实例数据instance data：成员变量\n\n对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快\n\n```pom\n<!-- 工具：JOL=JAVA Object Layout -->\n<dependency>\n    <groupId>org.openjdk.jol</groupId>\n    <artifactId>jol-core</artifactId>\n    <version>0.14</version>\n</dependency>\n```\n\n```java\npublic static void main(String[] args) {\n    Object o = new Object();\n    System.out.println(ClassLayout.parseInstance(o).toPrintable());\n}\n```\n\n```shell\njava.lang.Object object internals:\n OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE\n      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)[padding]\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n```\n\n```shell\njava -XX:+PrintCommandLineFlags -version\n-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节\n\n-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节\n\n数组的话会有一个数组长度length，占用4个字节。\n\n|  类型   | 占用字节 | 占用位数 |\n| :-----: | :------: | :------: |\n|  byte   |    1     |    8     |\n|  short  |    2     |    16    |\n|   int   |    4     |    32    |\n|  long   |    8     |    64    |\n|  float  |    4     |    32    |\n| double  |    8     |    64    |\n|  char   |    2     |    16    |\n| boolean |    1     |    8     |\n\n**示例：**\n\n```java\n@Data\npublic class Account {\n    private long id;\n    private String username;\n    private String password;\n\n    public static void main(String[] args) {\n        Object o1 = new Object();\n        System.out.println(\"空对象：\" + ClassLayout.parseInstance(o1).toPrintable());\n        Object o2 = new Account();\n        System.out.println(\"带属性对象：\" + ClassLayout.parseInstance(o2).toPrintable());\n        Object o3 = new int[1];\n        System.out.println(\"数组：\" + ClassLayout.parseInstance(o3).toPrintable());\n        Object o4 = new ArrayList<>();\n        System.out.println(\"空List：\" + ClassLayout.parseInstance(o4).toPrintable());\n    }\n}\n```\n\n**控制台输出：**\n\n```\n空对象：java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n带属性对象：cn.happyloves.example.dto.Account object internals:\n OFFSET  SIZE               TYPE DESCRIPTION                               VALUE\n      0     4                    (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                    (object header)                           54 c3 00 f8 (01010100 11000011 00000000 11111000) (-134167724)\n     12     4   java.lang.String Account.username                          null\n     16     8               long Account.id                                0\n     24     4   java.lang.String Account.password                          null\n     28     4                    (loss due to the next object alignment)\nInstance size: 32 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n数组：[I object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           6d 01 00 f8 (01101101 00000001 00000000 11111000) (-134217363)\n     12     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\n     16     4    int [I.<elements>                             N/A\n     20     4        (loss due to the next object alignment)\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\n空List：java.util.ArrayList object internals:\n OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE\n      0     4                      (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4                      (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4                      (object header)                           7f 2f 00 f8 (01111111 00101111 00000000 11111000) (-134205569)\n     12     4                  int AbstractList.modCount                     0\n     16     4                  int ArrayList.size                            0\n     20     4   java.lang.Object[] ArrayList.elementData                     []\nInstance size: 24 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n```\n\n","slug":"JAVA/对象内存布局","published":1,"date":"2022-07-07T08:21:10.758Z","updated":"2022-11-17T08:39:45.578Z","_id":"claktn6z9000e19ia91st95nx","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JAVA对象内存布局\"><a href=\"#JAVA对象内存布局\" class=\"headerlink\" title=\"JAVA对象内存布局\"></a>JAVA对象内存布局</h1><p><img src=\"https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png\"></p>\n<p>对象头：</p>\n<ul>\n<li>markword：记录锁的信息、GC信息</li>\n<li>类型指针class pointer：记录对象属于哪个Class类型的</li>\n</ul>\n<p>实例数据instance data：成员变量</p>\n<p>对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 工具：JOL=JAVA Object Layout --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;<br>    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;<br>    &lt;version&gt;0.14&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    System.out.println(ClassLayout.parseInstance(o).toPrintable());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java.lang.Object object internals:<br> OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE<br>      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br>      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br>      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)<br>     12     4        (loss due to the next object alignment)[padding]<br>Instance size: 16 bytes<br>Space losses: 0 bytes internal + 4 bytes external = 4 bytes total<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintCommandLineFlags -version<br>-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC<br>java version &quot;1.8.0_221&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<br></code></pre></td></tr></table></figure>\n\n<p>-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节</p>\n<p>-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节</p>\n<p>数组的话会有一个数组长度length，占用4个字节。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">占用字节</th>\n<th align=\"center\">占用位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;空对象：&quot;</span> + ClassLayout.parseInstance(o1).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;带属性对象：&quot;</span> + ClassLayout.parseInstance(o2).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">1</span>];<br>        System.out.println(<span class=\"hljs-string\">&quot;数组：&quot;</span> + ClassLayout.parseInstance(o3).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        System.out.println(<span class=\"hljs-string\">&quot;空List：&quot;</span> + ClassLayout.parseInstance(o4).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>控制台输出：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">空对象：java.lang.Object object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           e5<span class=\"hljs-number\"> 01 </span>00 f8 (11100101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217243)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 16 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>带属性对象：cn.happyloves.example.dto.Account object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 54 </span>c3<span class=\"hljs-number\"> 00 </span>f8 (01010100<span class=\"hljs-number\"> 11000011 </span>00000000 11111000) (-134167724)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.username                          null<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 8 </span>              long Account.id                                0<br>    <span class=\"hljs-number\"> 24 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.password                          null<br>    <span class=\"hljs-number\"> 28 </span>   <span class=\"hljs-number\"> 4 </span>                   (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 32 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>数组：[I object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           6d<span class=\"hljs-number\"> 01 </span>00 f8 (01101101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217363)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>   int [I.&lt;elements&gt;                             N/A<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>空List：java.util.ArrayList object internals:<br> OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                           7f 2f<span class=\"hljs-number\"> 00 </span>f8 (01111111<span class=\"hljs-number\"> 00101111 </span>00000000 11111000) (-134205569)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>                 int AbstractList.modCount                     0<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>                 int ArrayList.size                            0<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.Object[] ArrayList.elementData                     []<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 0 </span>bytes external =<span class=\"hljs-number\"> 0 </span>bytes total<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA对象内存布局\"><a href=\"#JAVA对象内存布局\" class=\"headerlink\" title=\"JAVA对象内存布局\"></a>JAVA对象内存布局</h1><p><img src=\"https://i.loli.net/2021/02/07/F1usDfdj6SnL8rm.png\"></p>\n<p>对象头：</p>\n<ul>\n<li>markword：记录锁的信息、GC信息</li>\n<li>类型指针class pointer：记录对象属于哪个Class类型的</li>\n</ul>\n<p>实例数据instance data：成员变量</p>\n<p>对齐 padding：当整个对象的字节数不能被8整除时，补齐剩余字节。因为JDK读内存时按照内存宽度读取，被8整除读取速度较快</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;!-- 工具：JOL=JAVA Object Layout --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;<br>    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;<br>    &lt;version&gt;0.14&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>    System.out.println(ClassLayout.parseInstance(o).toPrintable());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java.lang.Object object internals:<br> OFFSET(从什么位置开始)  SIZE(往后的长度)   TYPE DESCRIPTION(类型描述)                               VALUE<br>      0     4        (object header)[markword]                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)<br>      4     4        (object header)[markword]                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)<br>      8     4        (object header)[class pointer]                           e5 01 00 f8 (11100101 00000001 00000000 11111000) (-134217243)<br>     12     4        (loss due to the next object alignment)[padding]<br>Instance size: 16 bytes<br>Space losses: 0 bytes internal + 4 bytes external = 4 bytes total<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">java -XX:+PrintCommandLineFlags -version<br>-XX:InitialHeapSize=267312128 -XX:MaxHeapSize=4276994048 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC<br>java version &quot;1.8.0_221&quot;<br>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<br></code></pre></td></tr></table></figure>\n\n<p>-XX:+UseCompressedClassPointers：默认开启类型指针class pointer压缩，8个字节压缩成4个字节</p>\n<p>-XX:+UseCompressedOops：默认开启实例数据instance data压缩，比方说String类型占用8个字节，压缩成4个字节</p>\n<p>数组的话会有一个数组长度length，占用4个字节。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">类型</th>\n<th align=\"center\">占用字节</th>\n<th align=\"center\">占用位数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">4</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">8</td>\n<td align=\"center\">64</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\">2</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">8</td>\n</tr>\n</tbody></table>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;空对象：&quot;</span> + ClassLayout.parseInstance(o1).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Account</span>();<br>        System.out.println(<span class=\"hljs-string\">&quot;带属性对象：&quot;</span> + ClassLayout.parseInstance(o2).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">1</span>];<br>        System.out.println(<span class=\"hljs-string\">&quot;数组：&quot;</span> + ClassLayout.parseInstance(o3).toPrintable());<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        System.out.println(<span class=\"hljs-string\">&quot;空List：&quot;</span> + ClassLayout.parseInstance(o4).toPrintable());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>控制台输出：</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">空对象：java.lang.Object object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           e5<span class=\"hljs-number\"> 01 </span>00 f8 (11100101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217243)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 16 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>带属性对象：cn.happyloves.example.dto.Account object internals:<br> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                   (object header)                          <span class=\"hljs-number\"> 54 </span>c3<span class=\"hljs-number\"> 00 </span>f8 (01010100<span class=\"hljs-number\"> 11000011 </span>00000000 11111000) (-134167724)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.username                          null<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 8 </span>              long Account.id                                0<br>    <span class=\"hljs-number\"> 24 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.String Account.password                          null<br>    <span class=\"hljs-number\"> 28 </span>   <span class=\"hljs-number\"> 4 </span>                   (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 32 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>数组：[I object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                           6d<span class=\"hljs-number\"> 01 </span>00 f8 (01101101<span class=\"hljs-number\"> 00000001 </span>00000000 11111000) (-134217363)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>       (object header)                          <span class=\"hljs-number\"> 01 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000001<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (1)<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>   int [I.&lt;elements&gt;                             N/A<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>       (loss due to the next object alignment)<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 4 </span>bytes external =<span class=\"hljs-number\"> 4 </span>bytes total<br><br>空List：java.util.ArrayList object internals:<br> OFFSET  SIZE                 TYPE DESCRIPTION                               VALUE<br>     <span class=\"hljs-number\"> 0 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 05 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000101<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (5)<br>     <span class=\"hljs-number\"> 4 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                          <span class=\"hljs-number\"> 00 </span>00<span class=\"hljs-number\"> 00 </span>00 (00000000<span class=\"hljs-number\"> 00000000 </span>00000000 00000000) (0)<br>     <span class=\"hljs-number\"> 8 </span>   <span class=\"hljs-number\"> 4 </span>                     (object header)                           7f 2f<span class=\"hljs-number\"> 00 </span>f8 (01111111<span class=\"hljs-number\"> 00101111 </span>00000000 11111000) (-134205569)<br>    <span class=\"hljs-number\"> 12 </span>   <span class=\"hljs-number\"> 4 </span>                 int AbstractList.modCount                     0<br>    <span class=\"hljs-number\"> 16 </span>   <span class=\"hljs-number\"> 4 </span>                 int ArrayList.size                            0<br>    <span class=\"hljs-number\"> 20 </span>   <span class=\"hljs-number\"> 4 </span>  java.lang.Object[] ArrayList.elementData                     []<br>Instance size:<span class=\"hljs-number\"> 24 </span>bytes<br>Space losses:<span class=\"hljs-number\"> 0 </span>bytes internal +<span class=\"hljs-number\"> 0 </span>bytes external =<span class=\"hljs-number\"> 0 </span>bytes total<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# 指令乱序，指令重排序\n\n```java\n/**\n * 指令乱序，指令重排序\n * <p>\n * 弟2948605次（0,1)\n * 弟2948606次（0,1)\n * 弟2948607次（0,1)\n * 弟2948608次（0,0)\n *\n * @author zc\n * @date 2021/1/15 10:04\n */\npublic class Demo1 {\n    private static int x = 0, y = 0;\n    private static int a = 0, b = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        for (int i = 0; ; i++) {\n            x = 0;\n            y = 0;\n            a = 0;\n            b = 0;\n            Thread thread1 = new Thread(() -> {\n                a = 1;\n                x = b;\n            });\n            Thread thread2 = new Thread(() -> {\n                b = 1;\n                y = a;\n            });\n            thread1.start();\n            thread2.start();\n            thread1.join();\n            thread2.join();\n            String result = \"弟\" + i + \"次（\" + x + \",\" + y + \")\";\n            if (x == 0 && y == 0) {\n                System.out.println(result);\n                break;\n            } else {\n                System.out.println(result);\n            }\n        }\n    }\n}\n```\n\n定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，\n\n**第一个线程执行a=1;x=b;**\n\n**第二个线程执行b=1;y=a。**\n\n>  这段程序正常来看有3个结果：\n>\n> 1. 第一个线程执行到a=1的时候，第二个线程执行到了b=1，最后x=1，y=1；\n> 2. 第一个线程执行完，第二个线程才刚开始，最后x=0，y=1；\n> 3. 第二个线程执行完，第一个线程才开始，最后x=1，y=0；\n>\n> 理论上无论怎么样都不可能x=0,y=0;但是当程序执行到几万次之后，竟然出现了00的结果：`弟2948608次（0,0)`\n\n**因为指令被重排序了，x=b先于a=1执行，y=a先于b=1执行。**\n\n参考链接：\n\nhttps://blog.csdn.net/qq_41973594/article/details/110452849 \n\nhttps://blog.csdn.net/yjp198713/article/details/78839698\n\n","source":"_posts/JAVA/指令乱序，指令重排序.md","raw":"---\ncategories:\n  - JAVA\n---\n# 指令乱序，指令重排序\n\n```java\n/**\n * 指令乱序，指令重排序\n * <p>\n * 弟2948605次（0,1)\n * 弟2948606次（0,1)\n * 弟2948607次（0,1)\n * 弟2948608次（0,0)\n *\n * @author zc\n * @date 2021/1/15 10:04\n */\npublic class Demo1 {\n    private static int x = 0, y = 0;\n    private static int a = 0, b = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        for (int i = 0; ; i++) {\n            x = 0;\n            y = 0;\n            a = 0;\n            b = 0;\n            Thread thread1 = new Thread(() -> {\n                a = 1;\n                x = b;\n            });\n            Thread thread2 = new Thread(() -> {\n                b = 1;\n                y = a;\n            });\n            thread1.start();\n            thread2.start();\n            thread1.join();\n            thread2.join();\n            String result = \"弟\" + i + \"次（\" + x + \",\" + y + \")\";\n            if (x == 0 && y == 0) {\n                System.out.println(result);\n                break;\n            } else {\n                System.out.println(result);\n            }\n        }\n    }\n}\n```\n\n定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，\n\n**第一个线程执行a=1;x=b;**\n\n**第二个线程执行b=1;y=a。**\n\n>  这段程序正常来看有3个结果：\n>\n> 1. 第一个线程执行到a=1的时候，第二个线程执行到了b=1，最后x=1，y=1；\n> 2. 第一个线程执行完，第二个线程才刚开始，最后x=0，y=1；\n> 3. 第二个线程执行完，第一个线程才开始，最后x=1，y=0；\n>\n> 理论上无论怎么样都不可能x=0,y=0;但是当程序执行到几万次之后，竟然出现了00的结果：`弟2948608次（0,0)`\n\n**因为指令被重排序了，x=b先于a=1执行，y=a先于b=1执行。**\n\n参考链接：\n\nhttps://blog.csdn.net/qq_41973594/article/details/110452849 \n\nhttps://blog.csdn.net/yjp198713/article/details/78839698\n\n","slug":"JAVA/指令乱序，指令重排序","published":1,"date":"2021-04-01T08:34:03.000Z","updated":"2022-11-17T08:39:45.579Z","_id":"claktn6za000f19iacuwq6w7y","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"指令乱序，指令重排序\"><a href=\"#指令乱序，指令重排序\" class=\"headerlink\" title=\"指令乱序，指令重排序\"></a>指令乱序，指令重排序</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 指令乱序，指令重排序</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 弟2948605次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948606次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948607次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948608次（0,0)</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2021/1/15 10:04</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; ; i++) &#123;<br>            x = <span class=\"hljs-number\">0</span>;<br>            y = <span class=\"hljs-number\">0</span>;<br>            a = <span class=\"hljs-number\">0</span>;<br>            b = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                a = <span class=\"hljs-number\">1</span>;<br>                x = b;<br>            &#125;);<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                b = <span class=\"hljs-number\">1</span>;<br>                y = a;<br>            &#125;);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;弟&quot;</span> + i + <span class=\"hljs-string\">&quot;次（&quot;</span> + x + <span class=\"hljs-string\">&quot;,&quot;</span> + y + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span> &amp;&amp; y == <span class=\"hljs-number\">0</span>) &#123;<br>                System.out.println(result);<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，</p>\n<p><strong>第一个线程执行a&#x3D;1;x&#x3D;b;</strong></p>\n<p><strong>第二个线程执行b&#x3D;1;y&#x3D;a。</strong></p>\n<blockquote>\n<p> 这段程序正常来看有3个结果：</p>\n<ol>\n<li>第一个线程执行到a&#x3D;1的时候，第二个线程执行到了b&#x3D;1，最后x&#x3D;1，y&#x3D;1；</li>\n<li>第一个线程执行完，第二个线程才刚开始，最后x&#x3D;0，y&#x3D;1；</li>\n<li>第二个线程执行完，第一个线程才开始，最后x&#x3D;1，y&#x3D;0；</li>\n</ol>\n<p>理论上无论怎么样都不可能x&#x3D;0,y&#x3D;0;但是当程序执行到几万次之后，竟然出现了00的结果：<code>弟2948608次（0,0)</code></p>\n</blockquote>\n<p><strong>因为指令被重排序了，x&#x3D;b先于a&#x3D;1执行，y&#x3D;a先于b&#x3D;1执行。</strong></p>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41973594/article/details/110452849\">https://blog.csdn.net/qq_41973594/article/details/110452849</a> </p>\n<p><a href=\"https://blog.csdn.net/yjp198713/article/details/78839698\">https://blog.csdn.net/yjp198713/article/details/78839698</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"指令乱序，指令重排序\"><a href=\"#指令乱序，指令重排序\" class=\"headerlink\" title=\"指令乱序，指令重排序\"></a>指令乱序，指令重排序</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 指令乱序，指令重排序</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 弟2948605次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948606次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948607次（0,1)</span><br><span class=\"hljs-comment\"> * 弟2948608次（0,0)</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2021/1/15 10:04</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo1</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; ; i++) &#123;<br>            x = <span class=\"hljs-number\">0</span>;<br>            y = <span class=\"hljs-number\">0</span>;<br>            a = <span class=\"hljs-number\">0</span>;<br>            b = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                a = <span class=\"hljs-number\">1</span>;<br>                x = b;<br>            &#125;);<br>            <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">thread2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(() -&gt; &#123;<br>                b = <span class=\"hljs-number\">1</span>;<br>                y = a;<br>            &#125;);<br>            thread1.start();<br>            thread2.start();<br>            thread1.join();<br>            thread2.join();<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;弟&quot;</span> + i + <span class=\"hljs-string\">&quot;次（&quot;</span> + x + <span class=\"hljs-string\">&quot;,&quot;</span> + y + <span class=\"hljs-string\">&quot;)&quot;</span>;<br>            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span> &amp;&amp; y == <span class=\"hljs-number\">0</span>) &#123;<br>                System.out.println(result);<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(result);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>定义四个静态变量x,y,a,b，每次循环时让他们都等于0，接着用两个线程，</p>\n<p><strong>第一个线程执行a&#x3D;1;x&#x3D;b;</strong></p>\n<p><strong>第二个线程执行b&#x3D;1;y&#x3D;a。</strong></p>\n<blockquote>\n<p> 这段程序正常来看有3个结果：</p>\n<ol>\n<li>第一个线程执行到a&#x3D;1的时候，第二个线程执行到了b&#x3D;1，最后x&#x3D;1，y&#x3D;1；</li>\n<li>第一个线程执行完，第二个线程才刚开始，最后x&#x3D;0，y&#x3D;1；</li>\n<li>第二个线程执行完，第一个线程才开始，最后x&#x3D;1，y&#x3D;0；</li>\n</ol>\n<p>理论上无论怎么样都不可能x&#x3D;0,y&#x3D;0;但是当程序执行到几万次之后，竟然出现了00的结果：<code>弟2948608次（0,0)</code></p>\n</blockquote>\n<p><strong>因为指令被重排序了，x&#x3D;b先于a&#x3D;1执行，y&#x3D;a先于b&#x3D;1执行。</strong></p>\n<p>参考链接：</p>\n<p><a href=\"https://blog.csdn.net/qq_41973594/article/details/110452849\">https://blog.csdn.net/qq_41973594/article/details/110452849</a> </p>\n<p><a href=\"https://blog.csdn.net/yjp198713/article/details/78839698\">https://blog.csdn.net/yjp198713/article/details/78839698</a></p>\n"},{"title":"领域驱动设计 DDD","_content":"\n# 领域驱动设计 DDD\n\n## 设计\n\n### 战略设计\n\n> 从业务视角出发，建立业务领域模型，划分业务边界，建立通用语言，识别上下文\n\n### 战术设计\n\n> 实体\n>\n> 值对象\n>\n> 聚合\n>\n> 工厂\n>\n> 领域事件\n>\n> 分层架构\n>\n> 资源库\n\n","source":"_posts/DDD/领域驱动设计-DDD.md","raw":"---\ntitle: 领域驱动设计 DDD\n\ncategories:\n- DDD\n\ntags: [默认]\n\n---\n\n# 领域驱动设计 DDD\n\n## 设计\n\n### 战略设计\n\n> 从业务视角出发，建立业务领域模型，划分业务边界，建立通用语言，识别上下文\n\n### 战术设计\n\n> 实体\n>\n> 值对象\n>\n> 聚合\n>\n> 工厂\n>\n> 领域事件\n>\n> 分层架构\n>\n> 资源库\n\n","slug":"DDD/领域驱动设计-DDD","published":1,"date":"2021-09-01T08:51:41.000Z","updated":"2022-11-17T08:43:12.999Z","_id":"claktn6zg000g19ia29u6hauc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"领域驱动设计-DDD\"><a href=\"#领域驱动设计-DDD\" class=\"headerlink\" title=\"领域驱动设计 DDD\"></a>领域驱动设计 DDD</h1><h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><h3 id=\"战略设计\"><a href=\"#战略设计\" class=\"headerlink\" title=\"战略设计\"></a>战略设计</h3><blockquote>\n<p>从业务视角出发，建立业务领域模型，划分业务边界，建立通用语言，识别上下文</p>\n</blockquote>\n<h3 id=\"战术设计\"><a href=\"#战术设计\" class=\"headerlink\" title=\"战术设计\"></a>战术设计</h3><blockquote>\n<p>实体</p>\n<p>值对象</p>\n<p>聚合</p>\n<p>工厂</p>\n<p>领域事件</p>\n<p>分层架构</p>\n<p>资源库</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"领域驱动设计-DDD\"><a href=\"#领域驱动设计-DDD\" class=\"headerlink\" title=\"领域驱动设计 DDD\"></a>领域驱动设计 DDD</h1><h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><h3 id=\"战略设计\"><a href=\"#战略设计\" class=\"headerlink\" title=\"战略设计\"></a>战略设计</h3><blockquote>\n<p>从业务视角出发，建立业务领域模型，划分业务边界，建立通用语言，识别上下文</p>\n</blockquote>\n<h3 id=\"战术设计\"><a href=\"#战术设计\" class=\"headerlink\" title=\"战术设计\"></a>战术设计</h3><blockquote>\n<p>实体</p>\n<p>值对象</p>\n<p>聚合</p>\n<p>工厂</p>\n<p>领域事件</p>\n<p>分层架构</p>\n<p>资源库</p>\n</blockquote>\n"},{"_content":"# IDEA 常用插件\n\n### CodeGlance\n\n> 也叫起初是在SublimeText上看到这个功能，于是就在IDEA插件仓库找到了这个插件，用于快速定位到你的代码块，很方便。\n\n### Background Image (Plus)\n\n> 背景图\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200313020537.png)\n\n### Maven Helper\n\n","source":"_posts/IDEA 常用插件.md","raw":"---\ncategories: []\n---\n# IDEA 常用插件\n\n### CodeGlance\n\n> 也叫起初是在SublimeText上看到这个功能，于是就在IDEA插件仓库找到了这个插件，用于快速定位到你的代码块，很方便。\n\n### Background Image (Plus)\n\n> 背景图\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200313020537.png)\n\n### Maven Helper\n\n","slug":"IDEA 常用插件","published":1,"date":"2020-03-12T18:07:53.000Z","updated":"2022-11-17T08:39:45.579Z","_id":"claktn6zq000h19iad0ta94hu","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"IDEA-常用插件\"><a href=\"#IDEA-常用插件\" class=\"headerlink\" title=\"IDEA 常用插件\"></a>IDEA 常用插件</h1><h3 id=\"CodeGlance\"><a href=\"#CodeGlance\" class=\"headerlink\" title=\"CodeGlance\"></a>CodeGlance</h3><blockquote>\n<p>也叫起初是在SublimeText上看到这个功能，于是就在IDEA插件仓库找到了这个插件，用于快速定位到你的代码块，很方便。</p>\n</blockquote>\n<h3 id=\"Background-Image-Plus\"><a href=\"#Background-Image-Plus\" class=\"headerlink\" title=\"Background Image (Plus)\"></a>Background Image (Plus)</h3><blockquote>\n<p>背景图</p>\n</blockquote>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200313020537.png\"></p>\n<h3 id=\"Maven-Helper\"><a href=\"#Maven-Helper\" class=\"headerlink\" title=\"Maven Helper\"></a>Maven Helper</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"IDEA-常用插件\"><a href=\"#IDEA-常用插件\" class=\"headerlink\" title=\"IDEA 常用插件\"></a>IDEA 常用插件</h1><h3 id=\"CodeGlance\"><a href=\"#CodeGlance\" class=\"headerlink\" title=\"CodeGlance\"></a>CodeGlance</h3><blockquote>\n<p>也叫起初是在SublimeText上看到这个功能，于是就在IDEA插件仓库找到了这个插件，用于快速定位到你的代码块，很方便。</p>\n</blockquote>\n<h3 id=\"Background-Image-Plus\"><a href=\"#Background-Image-Plus\" class=\"headerlink\" title=\"Background Image (Plus)\"></a>Background Image (Plus)</h3><blockquote>\n<p>背景图</p>\n</blockquote>\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200313020537.png\"></p>\n<h3 id=\"Maven-Helper\"><a href=\"#Maven-Helper\" class=\"headerlink\" title=\"Maven Helper\"></a>Maven Helper</h3>"},{"_content":"# JAVA 转换 树结构数据\n\n**第一步：引入fastjson**\n\n```pom\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>${fastjson.version}</version>\n</dependency>\n```\n\n**第二步：用到了工具内的JSONPath**\n\n[JSONPath使用教程](https://blog.csdn.net/lwg_1540652358/article/details/84111339)\n\n```java\n    /**\n     * 树转换\n     *\n     * @param obj                  需要转换的对象\n     * @param parentCodeFieldName  父标识字段名\n     * @param parentCode           父标识值\n     * @param currentCodeFieldName 当前标识字段名\n     * @param childrenFiledName    子树的字段名\n     * @param c                    需要转换的Class类型\n     * @param <T>                  泛型\n     * @return 返回List<T>\n     */\n    public static <T> List<T> tree(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class<T> c) {\n        long t1 = System.currentTimeMillis();\n        String jsonStr = JSON.toJSONString(obj);\n        log.debug(\"树转换开始 >>>>>>>>>>>>>>>> {}\", JSON.toJSONString(obj));\n        //获取第一层级的数据\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            //为空的话直接返回空集合\n            return Lists.newArrayList();\n        }\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n        List<T> list = JSONArray.parseArray(jsonArray.toString(), c);\n        log.debug(\"树转换结束, 转换时间: {} ms . >>>>>>>>>>>>>>>> {}\", (System.currentTimeMillis() - t1), JSON.toJSONString(list));\n        return list;\n    }\n\n    private static void treeChildren(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName) {\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            return;\n        }\n        currentJsonObj.put(childrenFiledName, jsonArray);\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n    }\n```\n\n","source":"_posts/JAVA 转换 树结构数据.md","raw":"---\ncategories: []\n---\n# JAVA 转换 树结构数据\n\n**第一步：引入fastjson**\n\n```pom\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>${fastjson.version}</version>\n</dependency>\n```\n\n**第二步：用到了工具内的JSONPath**\n\n[JSONPath使用教程](https://blog.csdn.net/lwg_1540652358/article/details/84111339)\n\n```java\n    /**\n     * 树转换\n     *\n     * @param obj                  需要转换的对象\n     * @param parentCodeFieldName  父标识字段名\n     * @param parentCode           父标识值\n     * @param currentCodeFieldName 当前标识字段名\n     * @param childrenFiledName    子树的字段名\n     * @param c                    需要转换的Class类型\n     * @param <T>                  泛型\n     * @return 返回List<T>\n     */\n    public static <T> List<T> tree(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class<T> c) {\n        long t1 = System.currentTimeMillis();\n        String jsonStr = JSON.toJSONString(obj);\n        log.debug(\"树转换开始 >>>>>>>>>>>>>>>> {}\", JSON.toJSONString(obj));\n        //获取第一层级的数据\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            //为空的话直接返回空集合\n            return Lists.newArrayList();\n        }\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n        List<T> list = JSONArray.parseArray(jsonArray.toString(), c);\n        log.debug(\"树转换结束, 转换时间: {} ms . >>>>>>>>>>>>>>>> {}\", (System.currentTimeMillis() - t1), JSON.toJSONString(list));\n        return list;\n    }\n\n    private static void treeChildren(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName) {\n        JSONArray jsonArray = (JSONArray) JSONPath.read(jsonStr, \"$[\" + parentCodeFieldName + \"=\" + parentCode + \"]\");\n        if (CollectionUtils.isEmpty(jsonArray)) {\n            return;\n        }\n        currentJsonObj.put(childrenFiledName, jsonArray);\n        for (int i = 0; i < jsonArray.size(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String code = jsonObject.getString(currentCodeFieldName);\n            treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);\n        }\n    }\n```\n\n","slug":"JAVA 转换 树结构数据","published":1,"date":"2020-03-22T12:20:01.000Z","updated":"2022-11-17T08:39:45.579Z","_id":"claktn6zr000i19ia452uh5n6","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JAVA-转换-树结构数据\"><a href=\"#JAVA-转换-树结构数据\" class=\"headerlink\" title=\"JAVA 转换 树结构数据\"></a>JAVA 转换 树结构数据</h1><p><strong>第一步：引入fastjson</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步：用到了工具内的JSONPath</strong></p>\n<p><a href=\"https://blog.csdn.net/lwg_1540652358/article/details/84111339\">JSONPath使用教程</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 树转换</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> obj                  需要转换的对象</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCodeFieldName  父标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCode           父标识值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> currentCodeFieldName 当前标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> childrenFiledName    子树的字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> c                    需要转换的Class类型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &lt;T&gt;                  泛型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 返回List&lt;T&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"hljs-title function_\">tree</span><span class=\"hljs-params\">(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class&lt;T&gt; c)</span> &#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">t1</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> JSON.toJSONString(obj);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, JSON.toJSONString(obj));<br>    <span class=\"hljs-comment\">//获取第一层级的数据</span><br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-comment\">//为空的话直接返回空集合</span><br>        <span class=\"hljs-keyword\">return</span> Lists.newArrayList();<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>    List&lt;T&gt; list = JSONArray.parseArray(jsonArray.toString(), c);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换结束, 转换时间: &#123;&#125; ms . &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, (System.currentTimeMillis() - t1), JSON.toJSONString(list));<br>    <span class=\"hljs-keyword\">return</span> list;<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">treeChildren</span><span class=\"hljs-params\">(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName)</span> &#123;<br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    currentJsonObj.put(childrenFiledName, jsonArray);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-转换-树结构数据\"><a href=\"#JAVA-转换-树结构数据\" class=\"headerlink\" title=\"JAVA 转换 树结构数据\"></a>JAVA 转换 树结构数据</h1><p><strong>第一步：引入fastjson</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>    &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步：用到了工具内的JSONPath</strong></p>\n<p><a href=\"https://blog.csdn.net/lwg_1540652358/article/details/84111339\">JSONPath使用教程</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 树转换</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> obj                  需要转换的对象</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCodeFieldName  父标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> parentCode           父标识值</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> currentCodeFieldName 当前标识字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> childrenFiledName    子树的字段名</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> c                    需要转换的Class类型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &lt;T&gt;                  泛型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 返回List&lt;T&gt;</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; List&lt;T&gt; <span class=\"hljs-title function_\">tree</span><span class=\"hljs-params\">(Object obj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName, Class&lt;T&gt; c)</span> &#123;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">t1</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> JSON.toJSONString(obj);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换开始 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, JSON.toJSONString(obj));<br>    <span class=\"hljs-comment\">//获取第一层级的数据</span><br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-comment\">//为空的话直接返回空集合</span><br>        <span class=\"hljs-keyword\">return</span> Lists.newArrayList();<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>    List&lt;T&gt; list = JSONArray.parseArray(jsonArray.toString(), c);<br>    log.debug(<span class=\"hljs-string\">&quot;树转换结束, 转换时间: &#123;&#125; ms . &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;&quot;</span>, (System.currentTimeMillis() - t1), JSON.toJSONString(list));<br>    <span class=\"hljs-keyword\">return</span> list;<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">treeChildren</span><span class=\"hljs-params\">(String jsonStr, JSONObject currentJsonObj, String parentCodeFieldName, String parentCode, String currentCodeFieldName, String childrenFiledName)</span> &#123;<br>    <span class=\"hljs-type\">JSONArray</span> <span class=\"hljs-variable\">jsonArray</span> <span class=\"hljs-operator\">=</span> (JSONArray) JSONPath.read(jsonStr, <span class=\"hljs-string\">&quot;$[&quot;</span> + parentCodeFieldName + <span class=\"hljs-string\">&quot;=&quot;</span> + parentCode + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(jsonArray)) &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    currentJsonObj.put(childrenFiledName, jsonArray);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; jsonArray.size(); i++) &#123;<br>        <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> jsonArray.getJSONObject(i);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> jsonObject.getString(currentCodeFieldName);<br>        treeChildren(jsonStr, jsonObject, parentCodeFieldName, code, currentCodeFieldName, childrenFiledName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"","source":"_posts/JVM/1-JVM基础.md","raw":"---\ncategories:\n  - JVM\n---\n","slug":"JVM/1-JVM基础","published":1,"date":"2020-04-25T06:56:00.000Z","updated":"2022-11-17T08:39:46.564Z","_id":"claktn70g000j19iah0to51sz","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/JVM/2-JVM内存模型.md","raw":"---\ncategories:\n  - JVM\n---\n","slug":"JVM/2-JVM内存模型","published":1,"date":"2020-05-14T16:06:21.000Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn70x000k19ia6i42ec2v","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/JVM/4-JVM 参数.md","raw":"---\ncategories:\n  - JVM\n---\n","slug":"JVM/4-JVM 参数","published":1,"date":"2020-05-07T15:20:49.000Z","updated":"2022-11-17T08:39:46.564Z","_id":"claktn70y000l19ia9jc34hxo","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/JVM/5-JVM常用的命令.md","raw":"---\ncategories:\n  - JVM\n---\n","slug":"JVM/5-JVM常用的命令","published":1,"date":"2020-05-14T14:36:15.000Z","updated":"2022-11-17T08:39:46.564Z","_id":"claktn70z000m19ia61bxcuw0","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/Mysql/1、Mysql执行流程与架构.md","raw":"---\ncategories:\n  - Mysql\n---\n","slug":"Mysql/1、Mysql执行流程与架构","published":1,"date":"2022-04-07T16:55:21.000Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn710000n19ia87ea8map","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/Mysql/2、Mysql索引原理与使用规则.md","raw":"---\ncategories:\n  - Mysql\n---\n","slug":"Mysql/2、Mysql索引原理与使用规则","published":1,"date":"2022-03-01T15:19:16.000Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn710000o19iaaq7oekxe","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/Mysql/3、Mysql事务与锁详解.md","raw":"---\ncategories:\n  - Mysql\n---\n","slug":"Mysql/3、Mysql事务与锁详解","published":1,"date":"2022-07-07T08:15:57.607Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn711000p19iaff0c68rf","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/PMP/知识领域.md","raw":"---\ncategories:\n  - PMP\n---\n","slug":"PMP/知识领域","published":1,"date":"2020-12-03T07:39:45.000Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn711000q19ia4lilbsos","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/PMP/PMP概念.md","raw":"---\ncategories:\n  - PMP\n---\n","slug":"PMP/PMP概念","published":1,"date":"2020-12-03T08:18:46.000Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn712000r19iahqos007q","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/React/React基础.md","raw":"---\ncategories:\n  - React\n---\n","slug":"React/React基础","published":1,"date":"2022-04-07T17:04:24.000Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn712000s19iaeksm2gk0","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","raw":"---\ncategories:\n  - SpringBoot\n---\n","slug":"SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理","published":1,"date":"2020-07-18T07:15:39.000Z","updated":"2022-11-17T08:39:47.069Z","_id":"claktn713000t19iaa0xzhz6o","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","raw":"---\ncategories:\n  - SpringBoot\n---\n","slug":"SpringBoot/【SpringBoot】自动配置与@Enable方式配置","published":1,"date":"2020-12-21T17:18:53.000Z","updated":"2022-11-17T08:39:46.921Z","_id":"claktn714000u19iaaeh1hd5a","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/SpringCloud/【SpringCloud】Eueka注册中心.md","raw":"---\ncategories:\n  - SpringCloud\n---\n","slug":"SpringCloud/【SpringCloud】Eueka注册中心","published":1,"date":"2021-02-09T05:26:29.000Z","updated":"2022-11-17T08:39:46.921Z","_id":"claktn715000v19ia64txbatn","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"# 【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\n\n> 实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。\n\n## 获取请求参数RequestBody\n\n```java\n@Component\n@Slf4j\n@AllArgsConstructor\npublic class HttpRequestFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n\n        String method = request.getMethodValue();\n        String contentType = request.getHeaders().getFirst(\"Content-Type\");\n        if (\"POST\".equals(method)) {\n            return DataBufferUtils.join(exchange.getRequest().getBody())\n                    .flatMap(dataBuffer -> {\n                        byte[] bytes = new byte[dataBuffer.readableByteCount()];\n                        dataBuffer.read(bytes);\n                        try {\n                            String bodyString = new String(bytes, \"utf-8\");\n                            log.info(bodyString);//打印请求参数\n                            exchange.getAttributes().put(\"POST_BODY\", bodyString);\n                        } catch (UnsupportedEncodingException e) {\n                            e.printStackTrace();\n                        }\n                        DataBufferUtils.release(dataBuffer);\n                        Flux<DataBuffer> cachedFlux = Flux.defer(() -> {\n                            DataBuffer buffer = exchange.getResponse().bufferFactory()\n                                    .wrap(bytes);\n                            return Mono.just(buffer);\n                        });\n\n                        ServerHttpRequest mutatedRequest = new ServerHttpRequestDecorator(\n                                exchange.getRequest()) {\n                            @Override\n                            public Flux<DataBuffer> getBody() {\n                                return cachedFlux;\n                            }\n                        };\n                        return chain.filter(exchange.mutate().request(mutatedRequest)\n                                .build());\n                    });\n        }\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```\n\n## 获取请求响应值ResponseBody\n\n**POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取**\n\n```java\n@Slf4j\n@Component\npublic class HttpResponseFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        String path = request.getPath().toString();\n        ServerHttpResponse originalResponse = exchange.getResponse();\n        System.out.println(originalResponse.isCommitted());\n        DataBufferFactory bufferFactory = originalResponse.bufferFactory();\n\n        ServerHttpResponseDecorator decoratedResponse = new ServerHttpResponseDecorator(originalResponse) {\n            @Override\n            public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n\n                if (body instanceof Flux) {\n                    Flux<? extends DataBuffer> fluxBody = (Flux<? extends DataBuffer>) body;\n                    return super.writeWith(fluxBody.buffer().map(dataBuffer -> {\n                        DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n                        DataBuffer join = dataBufferFactory.join(dataBuffer);\n                        byte[] content = new byte[join.readableByteCount()];\n                        join.read(content);\n                        //释放掉内存\n                        DataBufferUtils.release(join);\n                        String s = new String(content, StandardCharsets.UTF_8);\n\n                        List<String> strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);\n                        if (!CollectionUtils.isEmpty(strings) && strings.contains(\"gzip\")) {\n                            GZIPInputStream gzipInputStream = null;\n                            try {\n                                gzipInputStream = new GZIPInputStream(new ByteArrayInputStream(content), content.length);\n                                StringWriter writer = new StringWriter();\n                                IOUtils.copy(gzipInputStream, writer, \"UTF-8\");\n                                s = writer.toString();\n\n                            } catch (IOException e) {\n                                log.error(\"====Gzip IO error\", e);\n                            } finally {\n                                if (gzipInputStream != null) {\n                                    try {\n                                        gzipInputStream.close();\n                                    } catch (IOException e) {\n                                        log.error(\"===Gzip IO close error\", e);\n                                    }\n                                }\n                            }\n                        } else {\n                            s = new String(content, StandardCharsets.UTF_8);\n                        }\n                        log.info(\"bodyString: {}\", s);//打印请求响应值\n                        return bufferFactory.wrap(content);\n                    }));\n                }\n                return super.writeWith(body);\n            }\n        };\n        return chain.filter(exchange.mutate().response(decoratedResponse).build());\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```","source":"_posts/SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值.md","raw":"---\ncategories:\n  - SpringCloud\n---\n# 【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\n\n> 实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。\n\n## 获取请求参数RequestBody\n\n```java\n@Component\n@Slf4j\n@AllArgsConstructor\npublic class HttpRequestFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n\n        String method = request.getMethodValue();\n        String contentType = request.getHeaders().getFirst(\"Content-Type\");\n        if (\"POST\".equals(method)) {\n            return DataBufferUtils.join(exchange.getRequest().getBody())\n                    .flatMap(dataBuffer -> {\n                        byte[] bytes = new byte[dataBuffer.readableByteCount()];\n                        dataBuffer.read(bytes);\n                        try {\n                            String bodyString = new String(bytes, \"utf-8\");\n                            log.info(bodyString);//打印请求参数\n                            exchange.getAttributes().put(\"POST_BODY\", bodyString);\n                        } catch (UnsupportedEncodingException e) {\n                            e.printStackTrace();\n                        }\n                        DataBufferUtils.release(dataBuffer);\n                        Flux<DataBuffer> cachedFlux = Flux.defer(() -> {\n                            DataBuffer buffer = exchange.getResponse().bufferFactory()\n                                    .wrap(bytes);\n                            return Mono.just(buffer);\n                        });\n\n                        ServerHttpRequest mutatedRequest = new ServerHttpRequestDecorator(\n                                exchange.getRequest()) {\n                            @Override\n                            public Flux<DataBuffer> getBody() {\n                                return cachedFlux;\n                            }\n                        };\n                        return chain.filter(exchange.mutate().request(mutatedRequest)\n                                .build());\n                    });\n        }\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```\n\n## 获取请求响应值ResponseBody\n\n**POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取**\n\n```java\n@Slf4j\n@Component\npublic class HttpResponseFilter implements GlobalFilter, Ordered {\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        String path = request.getPath().toString();\n        ServerHttpResponse originalResponse = exchange.getResponse();\n        System.out.println(originalResponse.isCommitted());\n        DataBufferFactory bufferFactory = originalResponse.bufferFactory();\n\n        ServerHttpResponseDecorator decoratedResponse = new ServerHttpResponseDecorator(originalResponse) {\n            @Override\n            public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n\n                if (body instanceof Flux) {\n                    Flux<? extends DataBuffer> fluxBody = (Flux<? extends DataBuffer>) body;\n                    return super.writeWith(fluxBody.buffer().map(dataBuffer -> {\n                        DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n                        DataBuffer join = dataBufferFactory.join(dataBuffer);\n                        byte[] content = new byte[join.readableByteCount()];\n                        join.read(content);\n                        //释放掉内存\n                        DataBufferUtils.release(join);\n                        String s = new String(content, StandardCharsets.UTF_8);\n\n                        List<String> strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);\n                        if (!CollectionUtils.isEmpty(strings) && strings.contains(\"gzip\")) {\n                            GZIPInputStream gzipInputStream = null;\n                            try {\n                                gzipInputStream = new GZIPInputStream(new ByteArrayInputStream(content), content.length);\n                                StringWriter writer = new StringWriter();\n                                IOUtils.copy(gzipInputStream, writer, \"UTF-8\");\n                                s = writer.toString();\n\n                            } catch (IOException e) {\n                                log.error(\"====Gzip IO error\", e);\n                            } finally {\n                                if (gzipInputStream != null) {\n                                    try {\n                                        gzipInputStream.close();\n                                    } catch (IOException e) {\n                                        log.error(\"===Gzip IO close error\", e);\n                                    }\n                                }\n                            }\n                        } else {\n                            s = new String(content, StandardCharsets.UTF_8);\n                        }\n                        log.info(\"bodyString: {}\", s);//打印请求响应值\n                        return bufferFactory.wrap(content);\n                    }));\n                }\n                return super.writeWith(body);\n            }\n        };\n        return chain.filter(exchange.mutate().response(decoratedResponse).build());\n    }\n\n    @Override\n    public int getOrder() {\n        return -200;\n    }\n}\n```","slug":"SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值","published":1,"date":"2020-07-02T12:50:14.000Z","updated":"2022-11-17T08:39:46.098Z","_id":"claktn716000w19iacxze1u5d","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\"><a href=\"#【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\" class=\"headerlink\" title=\"【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\"></a>【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值</h1><blockquote>\n<p>实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。</p>\n</blockquote>\n<h2 id=\"获取请求参数RequestBody\"><a href=\"#获取请求参数RequestBody\" class=\"headerlink\" title=\"获取请求参数RequestBody\"></a>获取请求参数RequestBody</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpRequestFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">method</span> <span class=\"hljs-operator\">=</span> request.getMethodValue();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">contentType</span> <span class=\"hljs-operator\">=</span> request.getHeaders().getFirst(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;POST&quot;</span>.equals(method)) &#123;<br>            <span class=\"hljs-keyword\">return</span> DataBufferUtils.join(exchange.getRequest().getBody())<br>                    .flatMap(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[dataBuffer.readableByteCount()];<br>                        dataBuffer.read(bytes);<br>                        <span class=\"hljs-keyword\">try</span> &#123;<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bodyString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>                            log.info(bodyString);<span class=\"hljs-comment\">//打印请求参数</span><br>                            exchange.getAttributes().put(<span class=\"hljs-string\">&quot;POST_BODY&quot;</span>, bodyString);<br>                        &#125; <span class=\"hljs-keyword\">catch</span> (UnsupportedEncodingException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        DataBufferUtils.release(dataBuffer);<br>                        Flux&lt;DataBuffer&gt; cachedFlux = Flux.defer(() -&gt; &#123;<br>                            <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> exchange.getResponse().bufferFactory()<br>                                    .wrap(bytes);<br>                            <span class=\"hljs-keyword\">return</span> Mono.just(buffer);<br>                        &#125;);<br><br>                        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">mutatedRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpRequestDecorator</span>(<br>                                exchange.getRequest()) &#123;<br>                            <span class=\"hljs-meta\">@Override</span><br>                            <span class=\"hljs-keyword\">public</span> Flux&lt;DataBuffer&gt; <span class=\"hljs-title function_\">getBody</span><span class=\"hljs-params\">()</span> &#123;<br>                                <span class=\"hljs-keyword\">return</span> cachedFlux;<br>                            &#125;<br>                        &#125;;<br>                        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().request(mutatedRequest)<br>                                .build());<br>                    &#125;);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"获取请求响应值ResponseBody\"><a href=\"#获取请求响应值ResponseBody\" class=\"headerlink\" title=\"获取请求响应值ResponseBody\"></a>获取请求响应值ResponseBody</h2><p><strong>POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpResponseFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> request.getPath().toString();<br>        <span class=\"hljs-type\">ServerHttpResponse</span> <span class=\"hljs-variable\">originalResponse</span> <span class=\"hljs-operator\">=</span> exchange.getResponse();<br>        System.out.println(originalResponse.isCommitted());<br>        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">bufferFactory</span> <span class=\"hljs-operator\">=</span> originalResponse.bufferFactory();<br><br>        <span class=\"hljs-type\">ServerHttpResponseDecorator</span> <span class=\"hljs-variable\">decoratedResponse</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpResponseDecorator</span>(originalResponse) &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">writeWith</span><span class=\"hljs-params\">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;<br><br>                <span class=\"hljs-keyword\">if</span> (body <span class=\"hljs-keyword\">instanceof</span> Flux) &#123;<br>                    Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt; fluxBody = (Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt;) body;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(fluxBody.buffer().map(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">dataBufferFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultDataBufferFactory</span>();<br>                        <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">join</span> <span class=\"hljs-operator\">=</span> dataBufferFactory.join(dataBuffer);<br>                        <span class=\"hljs-type\">byte</span>[] content = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[join.readableByteCount()];<br>                        join.read(content);<br>                        <span class=\"hljs-comment\">//释放掉内存</span><br>                        DataBufferUtils.release(join);<br>                        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br><br>                        List&lt;String&gt; strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);<br>                        <span class=\"hljs-keyword\">if</span> (!CollectionUtils.isEmpty(strings) &amp;&amp; strings.contains(<span class=\"hljs-string\">&quot;gzip&quot;</span>)) &#123;<br>                            <span class=\"hljs-type\">GZIPInputStream</span> <span class=\"hljs-variable\">gzipInputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">try</span> &#123;<br>                                gzipInputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GZIPInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(content), content.length);<br>                                <span class=\"hljs-type\">StringWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringWriter</span>();<br>                                IOUtils.copy(gzipInputStream, writer, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>                                s = writer.toString();<br><br>                            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                log.error(<span class=\"hljs-string\">&quot;====Gzip IO error&quot;</span>, e);<br>                            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                                <span class=\"hljs-keyword\">if</span> (gzipInputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>                                    <span class=\"hljs-keyword\">try</span> &#123;<br>                                        gzipInputStream.close();<br>                                    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                        log.error(<span class=\"hljs-string\">&quot;===Gzip IO close error&quot;</span>, e);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                            s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br>                        &#125;<br>                        log.info(<span class=\"hljs-string\">&quot;bodyString: &#123;&#125;&quot;</span>, s);<span class=\"hljs-comment\">//打印请求响应值</span><br>                        <span class=\"hljs-keyword\">return</span> bufferFactory.wrap(content);<br>                    &#125;));<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(body);<br>            &#125;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\"><a href=\"#【SpringCloud】Gateway-配置全局过滤器获取请求参数和响应值\" class=\"headerlink\" title=\"【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值\"></a>【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值</h1><blockquote>\n<p>实现Ordered接口getOrder()方法，数值越小越靠前执行，记得这一点就OK了。</p>\n</blockquote>\n<h2 id=\"获取请求参数RequestBody\"><a href=\"#获取请求参数RequestBody\" class=\"headerlink\" title=\"获取请求参数RequestBody\"></a>获取请求参数RequestBody</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpRequestFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">method</span> <span class=\"hljs-operator\">=</span> request.getMethodValue();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">contentType</span> <span class=\"hljs-operator\">=</span> request.getHeaders().getFirst(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;POST&quot;</span>.equals(method)) &#123;<br>            <span class=\"hljs-keyword\">return</span> DataBufferUtils.join(exchange.getRequest().getBody())<br>                    .flatMap(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[dataBuffer.readableByteCount()];<br>                        dataBuffer.read(bytes);<br>                        <span class=\"hljs-keyword\">try</span> &#123;<br>                            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bodyString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>                            log.info(bodyString);<span class=\"hljs-comment\">//打印请求参数</span><br>                            exchange.getAttributes().put(<span class=\"hljs-string\">&quot;POST_BODY&quot;</span>, bodyString);<br>                        &#125; <span class=\"hljs-keyword\">catch</span> (UnsupportedEncodingException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        DataBufferUtils.release(dataBuffer);<br>                        Flux&lt;DataBuffer&gt; cachedFlux = Flux.defer(() -&gt; &#123;<br>                            <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">buffer</span> <span class=\"hljs-operator\">=</span> exchange.getResponse().bufferFactory()<br>                                    .wrap(bytes);<br>                            <span class=\"hljs-keyword\">return</span> Mono.just(buffer);<br>                        &#125;);<br><br>                        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">mutatedRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpRequestDecorator</span>(<br>                                exchange.getRequest()) &#123;<br>                            <span class=\"hljs-meta\">@Override</span><br>                            <span class=\"hljs-keyword\">public</span> Flux&lt;DataBuffer&gt; <span class=\"hljs-title function_\">getBody</span><span class=\"hljs-params\">()</span> &#123;<br>                                <span class=\"hljs-keyword\">return</span> cachedFlux;<br>                            &#125;<br>                        &#125;;<br>                        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().request(mutatedRequest)<br>                                .build());<br>                    &#125;);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"获取请求响应值ResponseBody\"><a href=\"#获取请求响应值ResponseBody\" class=\"headerlink\" title=\"获取请求响应值ResponseBody\"></a>获取请求响应值ResponseBody</h2><p><strong>POSTMAN工具请求里的gzip压缩头导致获取响应值一直乱码，解决gzip压缩后响应值获取</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HttpResponseFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> request.getPath().toString();<br>        <span class=\"hljs-type\">ServerHttpResponse</span> <span class=\"hljs-variable\">originalResponse</span> <span class=\"hljs-operator\">=</span> exchange.getResponse();<br>        System.out.println(originalResponse.isCommitted());<br>        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">bufferFactory</span> <span class=\"hljs-operator\">=</span> originalResponse.bufferFactory();<br><br>        <span class=\"hljs-type\">ServerHttpResponseDecorator</span> <span class=\"hljs-variable\">decoratedResponse</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServerHttpResponseDecorator</span>(originalResponse) &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">writeWith</span><span class=\"hljs-params\">(Publisher&lt;? extends DataBuffer&gt; body)</span> &#123;<br><br>                <span class=\"hljs-keyword\">if</span> (body <span class=\"hljs-keyword\">instanceof</span> Flux) &#123;<br>                    Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt; fluxBody = (Flux&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">DataBuffer</span>&gt;) body;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(fluxBody.buffer().map(dataBuffer -&gt; &#123;<br>                        <span class=\"hljs-type\">DataBufferFactory</span> <span class=\"hljs-variable\">dataBufferFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultDataBufferFactory</span>();<br>                        <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">join</span> <span class=\"hljs-operator\">=</span> dataBufferFactory.join(dataBuffer);<br>                        <span class=\"hljs-type\">byte</span>[] content = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[join.readableByteCount()];<br>                        join.read(content);<br>                        <span class=\"hljs-comment\">//释放掉内存</span><br>                        DataBufferUtils.release(join);<br>                        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br><br>                        List&lt;String&gt; strings = exchange.getResponse().getHeaders().get(HttpHeaders.CONTENT_ENCODING);<br>                        <span class=\"hljs-keyword\">if</span> (!CollectionUtils.isEmpty(strings) &amp;&amp; strings.contains(<span class=\"hljs-string\">&quot;gzip&quot;</span>)) &#123;<br>                            <span class=\"hljs-type\">GZIPInputStream</span> <span class=\"hljs-variable\">gzipInputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">try</span> &#123;<br>                                gzipInputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GZIPInputStream</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(content), content.length);<br>                                <span class=\"hljs-type\">StringWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringWriter</span>();<br>                                IOUtils.copy(gzipInputStream, writer, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>                                s = writer.toString();<br><br>                            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                log.error(<span class=\"hljs-string\">&quot;====Gzip IO error&quot;</span>, e);<br>                            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                                <span class=\"hljs-keyword\">if</span> (gzipInputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>                                    <span class=\"hljs-keyword\">try</span> &#123;<br>                                        gzipInputStream.close();<br>                                    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                                        log.error(<span class=\"hljs-string\">&quot;===Gzip IO close error&quot;</span>, e);<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                            s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(content, StandardCharsets.UTF_8);<br>                        &#125;<br>                        log.info(<span class=\"hljs-string\">&quot;bodyString: &#123;&#125;&quot;</span>, s);<span class=\"hljs-comment\">//打印请求响应值</span><br>                        <span class=\"hljs-keyword\">return</span> bufferFactory.wrap(content);<br>                    &#125;));<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.writeWith(body);<br>            &#125;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange.mutate().response(decoratedResponse).build());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"_content":"# JAVA自定义注解\n\n---\n\n## 注解概念\n\n注解是Java SE 5.0版本开始引入的概念，它是对java源代码的说明，是一种元数据（描述数据的数据）。\n\n## 注解和注释的不同\n\n+ **注释**\n\n   注释是对代码的说明，给代码的读者看，便于帮读者梳理业务逻辑；在程序代码中经常看到的以@ 开头的大部分是注解；\n\n+ **注解**\n\n  注解也是对代码的说明，需要配合工具（解析它的代码）使用，参与代码的编译，给应用程序看的；\n\n\n\n## 注解分类\n\n注解以@开头，我们会在应用程序中见到各种各样的注解，比如 `@Autowired`，`@Service`，`@Controller`，`@Override `，`@Test`，`@Value` 等等，按照来源划分，可以分为 **JDK的注解**，**第三方的注解**，**自定义注解**。\n\n### JDK注解\n\n#### JAVA 内置注解\n\n+ @Override （标记重写方法）\n+ @Deprecated （标记过时）\n+ @SuppressWarnings （忽略警告）\n\n#### 元注解 (注解的注解)\n\n+ @Target （注解的作用目标）\n+ @Retention （注解的生命周期）\n+ @Document （注解是否被包含在JavaDoc中）\n+ @Inherited （是否允许子类集成该注解）\n\n### 第三方注解（各种框架注解）\n\n请自行百度各个框架的注解详解\n\n### 自定义注解\n\n使用元注解自己定义的注解\n\nJDK中有一些元注解，主要有@Target，@Retention,@Document,@Inherited用来修饰注解。\n\n#### @Target\n\n 表明该注解可以应用的java元素类型\n\n|         Target类型          |                             描述                             |\n| :-------------------------: | :----------------------------------------------------------: |\n|      ElementType.TYPE       |             应用于类、接口（包括注解类型）、枚举             |\n|      ElementType.FIELD      |                应用于属性（包括枚举中的常量）                |\n|     ElementType.METHOD      |                          应用于方法                          |\n|    ElementType.PARAMETER    |                       应用于方法的形参                       |\n|   ElementType.CONSTRUCTOR   |                        应用于构造函数                        |\n| ElementType.LOCAL_VARIABLE  |                        应用于局部变量                        |\n| ElementType.ANNOTATION_TYPE |                        应用于注解类型                        |\n|     ElementType.PACKAGE     |                           应用于包                           |\n| ElementType.TYPE_PARAMETER  |                1.8版本新增，应用于类型变量）                 |\n|    ElementType.TYPE_USE     | 1.8版本新增，应用于任何使用类型的语句中（例如声明语句、泛型和强制转换语句中的类型） |\n\n#### @Retention\n\n 表明该注解的生命周期\n\n|      生命周期类型       |                       描述                       |\n| :---------------------: | :----------------------------------------------: |\n| RetentionPolicy.SOURCE  |          编译时被丢弃，不包含在类文件中          |\n|  RetentionPolicy.CLASS  |     JVM加载时被丢弃，包含在类文件中，默认值      |\n| RetentionPolicy.RUNTIME | 由JVM 加载，包含在类文件中，在运行时可以被获取到 |\n\n#### @Document\n\n表明该注解标记的元素可以被Javadoc 或类似的工具文档化\n\n#### @Inherited\n\n表明使用了@Inherited注解的注解，所标记的类的子类也会拥有这个注解\n\n## 注解格式\n\n```java\n/**\n * 修饰符 @interface 注解名 {\n * 注解元素的声明1\n * 注解元素的声明2\n * }\n * 修饰符：访问修饰符必须为public,不写默认为pubic；\n * 关键字：必须为@interface；\n * 注解名： 注解名称为自定义注解的名称，使用时还会用到；\n * 注解类型元素：注解类型元素是注解中内容，可以理解成自定义接口的实现部分；\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface MyTestAnnotation {\n    /**\n     *\t注解的元素声明的两种形式\n     *\ttype elementName();\n     *\ttype elementName() default value;  \n     */\n    String value() default \"test\";\n}\n```\n\n## 注解样例\n\n接下来我们以Spring中的 `@Service` 注解为例\n\n```java\n@Target({ElementType.TYPE})// ElementType.TYPE 代表在注解上使用\n@Retention(RetentionPolicy.RUNTIME)// RetentionPolicy.RUNTIME 代表运行时使用，可以通过反射获取到\n@Documented//包含在JavaDoc中\n@Component//允许通过包扫描的方式自动检测\npublic @interface Service {\n\n\t/**\n\t * The value may indicate a suggestion for a logical component name,\n\t * to be turned into a Spring bean in case of an autodetected component.\n\t * @return the suggested component name, if any (or empty String otherwise)\n\t */\n\t@AliasFor(annotation = Component.class)\n\tString value() default \"\";\n}\n\n```\n\n## @Annotation\n\n**JDK1.5有的，在rt.jar包下 `java.lang.annotation`包下，所有的注解默认继承了Annotation接口，但是它本身不能定义注解。**\n\n```java\npackage java.lang.annotation;\n\n/**\n * 所有的注解默认继承了Annotation接口，但是它本身不能定义注解。\n * The common interface extended by all annotation types.  Note that an\n * interface that manually extends this one does <i>not</i> define\n * an annotation type.  Also note that this interface does not itself\n * define an annotation type.\n *\n * More information about annotation types can be found in section 9.6 of\n * <cite>The Java&trade; Language Specification</cite>.\n *\n * The {@link java.lang.reflect.AnnotatedElement} interface discusses\n * compatibility concerns when evolving an annotation type from being\n * non-repeatable to being repeatable.\n * \n * @author  Josh Bloch\n * @since   1.5\n */\npublic interface Annotation {\n    .\n    .\n    .\n}\n```\n\n## 实现自定义注解\n\n**第一步-定义自定义注解**\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface MyTestAnnotation {\n    String value() default \"test\";\n}\n```\n\n**第二步-配置注解**\n\n```java\n@Data\n@Builder\n@MyTestAnnotation\npublic class MyBean {\n    private String name;\n    private int age;\n}\n\n```\n\n**第三步-利用反射解析注解**\n\n```java\npublic class MyTest {\n\n    //isAnnotationPresent：判断当前元素是否被指定注解修饰\n    //getAnnotation：返回指定的注解\n    //getAnnotations：返回所有的注解\n    public static void main(String[] args) {\n        try {\n            //获取MyBean的Class对象\n            MyBean myBean = MyBean.builder().build();\n            Class clazz = myBean.getClass();\n            \n            //判断myBean对象上是否有MyTestAnnotation注解\n            if (clazz.isAnnotationPresent(MyTestAnnotation.class)) {\n                System.out.println(\"MyBean类上配置了MyTestAnnotation注解！\");\n                //获取该对象上MyTestAnnotation类型的注解\n                MyTestAnnotation myTestAnnotation = (MyTestAnnotation) clazz.getAnnotation(MyTestAnnotation.class);\n                System.out.println(myTestAnnotation.value());\n            } else {\n                System.out.println(\"MyBean类上没有配置MyTestAnnotation注解！\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n执行main方法，运行结果：\n\n```powershell\nConnected to the target VM, address: '127.0.0.1:62125', transport: 'socket'\nMyBean类上配置了MyTestAnnotation注解！\ntest\nDisconnected from the target VM, address: '127.0.0.1:62125', transport: 'socket'\n```\n\n参考链接：https://blog.csdn.net/zt15732625878/article/details/99671586\n\n参考链接：https://blog.csdn.net/zt15732625878/article/details/100061528","source":"_posts/JAVA自定义注解.md","raw":"---\ncategories: []\n---\n# JAVA自定义注解\n\n---\n\n## 注解概念\n\n注解是Java SE 5.0版本开始引入的概念，它是对java源代码的说明，是一种元数据（描述数据的数据）。\n\n## 注解和注释的不同\n\n+ **注释**\n\n   注释是对代码的说明，给代码的读者看，便于帮读者梳理业务逻辑；在程序代码中经常看到的以@ 开头的大部分是注解；\n\n+ **注解**\n\n  注解也是对代码的说明，需要配合工具（解析它的代码）使用，参与代码的编译，给应用程序看的；\n\n\n\n## 注解分类\n\n注解以@开头，我们会在应用程序中见到各种各样的注解，比如 `@Autowired`，`@Service`，`@Controller`，`@Override `，`@Test`，`@Value` 等等，按照来源划分，可以分为 **JDK的注解**，**第三方的注解**，**自定义注解**。\n\n### JDK注解\n\n#### JAVA 内置注解\n\n+ @Override （标记重写方法）\n+ @Deprecated （标记过时）\n+ @SuppressWarnings （忽略警告）\n\n#### 元注解 (注解的注解)\n\n+ @Target （注解的作用目标）\n+ @Retention （注解的生命周期）\n+ @Document （注解是否被包含在JavaDoc中）\n+ @Inherited （是否允许子类集成该注解）\n\n### 第三方注解（各种框架注解）\n\n请自行百度各个框架的注解详解\n\n### 自定义注解\n\n使用元注解自己定义的注解\n\nJDK中有一些元注解，主要有@Target，@Retention,@Document,@Inherited用来修饰注解。\n\n#### @Target\n\n 表明该注解可以应用的java元素类型\n\n|         Target类型          |                             描述                             |\n| :-------------------------: | :----------------------------------------------------------: |\n|      ElementType.TYPE       |             应用于类、接口（包括注解类型）、枚举             |\n|      ElementType.FIELD      |                应用于属性（包括枚举中的常量）                |\n|     ElementType.METHOD      |                          应用于方法                          |\n|    ElementType.PARAMETER    |                       应用于方法的形参                       |\n|   ElementType.CONSTRUCTOR   |                        应用于构造函数                        |\n| ElementType.LOCAL_VARIABLE  |                        应用于局部变量                        |\n| ElementType.ANNOTATION_TYPE |                        应用于注解类型                        |\n|     ElementType.PACKAGE     |                           应用于包                           |\n| ElementType.TYPE_PARAMETER  |                1.8版本新增，应用于类型变量）                 |\n|    ElementType.TYPE_USE     | 1.8版本新增，应用于任何使用类型的语句中（例如声明语句、泛型和强制转换语句中的类型） |\n\n#### @Retention\n\n 表明该注解的生命周期\n\n|      生命周期类型       |                       描述                       |\n| :---------------------: | :----------------------------------------------: |\n| RetentionPolicy.SOURCE  |          编译时被丢弃，不包含在类文件中          |\n|  RetentionPolicy.CLASS  |     JVM加载时被丢弃，包含在类文件中，默认值      |\n| RetentionPolicy.RUNTIME | 由JVM 加载，包含在类文件中，在运行时可以被获取到 |\n\n#### @Document\n\n表明该注解标记的元素可以被Javadoc 或类似的工具文档化\n\n#### @Inherited\n\n表明使用了@Inherited注解的注解，所标记的类的子类也会拥有这个注解\n\n## 注解格式\n\n```java\n/**\n * 修饰符 @interface 注解名 {\n * 注解元素的声明1\n * 注解元素的声明2\n * }\n * 修饰符：访问修饰符必须为public,不写默认为pubic；\n * 关键字：必须为@interface；\n * 注解名： 注解名称为自定义注解的名称，使用时还会用到；\n * 注解类型元素：注解类型元素是注解中内容，可以理解成自定义接口的实现部分；\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface MyTestAnnotation {\n    /**\n     *\t注解的元素声明的两种形式\n     *\ttype elementName();\n     *\ttype elementName() default value;  \n     */\n    String value() default \"test\";\n}\n```\n\n## 注解样例\n\n接下来我们以Spring中的 `@Service` 注解为例\n\n```java\n@Target({ElementType.TYPE})// ElementType.TYPE 代表在注解上使用\n@Retention(RetentionPolicy.RUNTIME)// RetentionPolicy.RUNTIME 代表运行时使用，可以通过反射获取到\n@Documented//包含在JavaDoc中\n@Component//允许通过包扫描的方式自动检测\npublic @interface Service {\n\n\t/**\n\t * The value may indicate a suggestion for a logical component name,\n\t * to be turned into a Spring bean in case of an autodetected component.\n\t * @return the suggested component name, if any (or empty String otherwise)\n\t */\n\t@AliasFor(annotation = Component.class)\n\tString value() default \"\";\n}\n\n```\n\n## @Annotation\n\n**JDK1.5有的，在rt.jar包下 `java.lang.annotation`包下，所有的注解默认继承了Annotation接口，但是它本身不能定义注解。**\n\n```java\npackage java.lang.annotation;\n\n/**\n * 所有的注解默认继承了Annotation接口，但是它本身不能定义注解。\n * The common interface extended by all annotation types.  Note that an\n * interface that manually extends this one does <i>not</i> define\n * an annotation type.  Also note that this interface does not itself\n * define an annotation type.\n *\n * More information about annotation types can be found in section 9.6 of\n * <cite>The Java&trade; Language Specification</cite>.\n *\n * The {@link java.lang.reflect.AnnotatedElement} interface discusses\n * compatibility concerns when evolving an annotation type from being\n * non-repeatable to being repeatable.\n * \n * @author  Josh Bloch\n * @since   1.5\n */\npublic interface Annotation {\n    .\n    .\n    .\n}\n```\n\n## 实现自定义注解\n\n**第一步-定义自定义注解**\n\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface MyTestAnnotation {\n    String value() default \"test\";\n}\n```\n\n**第二步-配置注解**\n\n```java\n@Data\n@Builder\n@MyTestAnnotation\npublic class MyBean {\n    private String name;\n    private int age;\n}\n\n```\n\n**第三步-利用反射解析注解**\n\n```java\npublic class MyTest {\n\n    //isAnnotationPresent：判断当前元素是否被指定注解修饰\n    //getAnnotation：返回指定的注解\n    //getAnnotations：返回所有的注解\n    public static void main(String[] args) {\n        try {\n            //获取MyBean的Class对象\n            MyBean myBean = MyBean.builder().build();\n            Class clazz = myBean.getClass();\n            \n            //判断myBean对象上是否有MyTestAnnotation注解\n            if (clazz.isAnnotationPresent(MyTestAnnotation.class)) {\n                System.out.println(\"MyBean类上配置了MyTestAnnotation注解！\");\n                //获取该对象上MyTestAnnotation类型的注解\n                MyTestAnnotation myTestAnnotation = (MyTestAnnotation) clazz.getAnnotation(MyTestAnnotation.class);\n                System.out.println(myTestAnnotation.value());\n            } else {\n                System.out.println(\"MyBean类上没有配置MyTestAnnotation注解！\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n执行main方法，运行结果：\n\n```powershell\nConnected to the target VM, address: '127.0.0.1:62125', transport: 'socket'\nMyBean类上配置了MyTestAnnotation注解！\ntest\nDisconnected from the target VM, address: '127.0.0.1:62125', transport: 'socket'\n```\n\n参考链接：https://blog.csdn.net/zt15732625878/article/details/99671586\n\n参考链接：https://blog.csdn.net/zt15732625878/article/details/100061528","slug":"JAVA自定义注解","published":1,"date":"2020-07-30T16:37:50.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ad000x19iabv0o63t9","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JAVA自定义注解\"><a href=\"#JAVA自定义注解\" class=\"headerlink\" title=\"JAVA自定义注解\"></a>JAVA自定义注解</h1><hr>\n<h2 id=\"注解概念\"><a href=\"#注解概念\" class=\"headerlink\" title=\"注解概念\"></a>注解概念</h2><p>注解是Java SE 5.0版本开始引入的概念，它是对java源代码的说明，是一种元数据（描述数据的数据）。</p>\n<h2 id=\"注解和注释的不同\"><a href=\"#注解和注释的不同\" class=\"headerlink\" title=\"注解和注释的不同\"></a>注解和注释的不同</h2><ul>\n<li><p><strong>注释</strong></p>\n<p> 注释是对代码的说明，给代码的读者看，便于帮读者梳理业务逻辑；在程序代码中经常看到的以@ 开头的大部分是注解；</p>\n</li>\n<li><p><strong>注解</strong></p>\n<p>注解也是对代码的说明，需要配合工具（解析它的代码）使用，参与代码的编译，给应用程序看的；</p>\n</li>\n</ul>\n<h2 id=\"注解分类\"><a href=\"#注解分类\" class=\"headerlink\" title=\"注解分类\"></a>注解分类</h2><p>注解以@开头，我们会在应用程序中见到各种各样的注解，比如 <code>@Autowired</code>，<code>@Service</code>，<code>@Controller</code>，<code>@Override </code>，<code>@Test</code>，<code>@Value</code> 等等，按照来源划分，可以分为 <strong>JDK的注解</strong>，<strong>第三方的注解</strong>，<strong>自定义注解</strong>。</p>\n<h3 id=\"JDK注解\"><a href=\"#JDK注解\" class=\"headerlink\" title=\"JDK注解\"></a>JDK注解</h3><h4 id=\"JAVA-内置注解\"><a href=\"#JAVA-内置注解\" class=\"headerlink\" title=\"JAVA 内置注解\"></a>JAVA 内置注解</h4><ul>\n<li>@Override （标记重写方法）</li>\n<li>@Deprecated （标记过时）</li>\n<li>@SuppressWarnings （忽略警告）</li>\n</ul>\n<h4 id=\"元注解-注解的注解\"><a href=\"#元注解-注解的注解\" class=\"headerlink\" title=\"元注解 (注解的注解)\"></a>元注解 (注解的注解)</h4><ul>\n<li>@Target （注解的作用目标）</li>\n<li>@Retention （注解的生命周期）</li>\n<li>@Document （注解是否被包含在JavaDoc中）</li>\n<li>@Inherited （是否允许子类集成该注解）</li>\n</ul>\n<h3 id=\"第三方注解（各种框架注解）\"><a href=\"#第三方注解（各种框架注解）\" class=\"headerlink\" title=\"第三方注解（各种框架注解）\"></a>第三方注解（各种框架注解）</h3><p>请自行百度各个框架的注解详解</p>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><p>使用元注解自己定义的注解</p>\n<p>JDK中有一些元注解，主要有@Target，@Retention,@Document,@Inherited用来修饰注解。</p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h4><p> 表明该注解可以应用的java元素类型</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Target类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ElementType.TYPE</td>\n<td align=\"center\">应用于类、接口（包括注解类型）、枚举</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.FIELD</td>\n<td align=\"center\">应用于属性（包括枚举中的常量）</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.METHOD</td>\n<td align=\"center\">应用于方法</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.PARAMETER</td>\n<td align=\"center\">应用于方法的形参</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.CONSTRUCTOR</td>\n<td align=\"center\">应用于构造函数</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.LOCAL_VARIABLE</td>\n<td align=\"center\">应用于局部变量</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.ANNOTATION_TYPE</td>\n<td align=\"center\">应用于注解类型</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.PACKAGE</td>\n<td align=\"center\">应用于包</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.TYPE_PARAMETER</td>\n<td align=\"center\">1.8版本新增，应用于类型变量）</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.TYPE_USE</td>\n<td align=\"center\">1.8版本新增，应用于任何使用类型的语句中（例如声明语句、泛型和强制转换语句中的类型）</td>\n</tr>\n</tbody></table>\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h4><p> 表明该注解的生命周期</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">生命周期类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">RetentionPolicy.SOURCE</td>\n<td align=\"center\">编译时被丢弃，不包含在类文件中</td>\n</tr>\n<tr>\n<td align=\"center\">RetentionPolicy.CLASS</td>\n<td align=\"center\">JVM加载时被丢弃，包含在类文件中，默认值</td>\n</tr>\n<tr>\n<td align=\"center\">RetentionPolicy.RUNTIME</td>\n<td align=\"center\">由JVM 加载，包含在类文件中，在运行时可以被获取到</td>\n</tr>\n</tbody></table>\n<h4 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"@Document\"></a>@Document</h4><p>表明该注解标记的元素可以被Javadoc 或类似的工具文档化</p>\n<h4 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h4><p>表明使用了@Inherited注解的注解，所标记的类的子类也会拥有这个注解</p>\n<h2 id=\"注解格式\"><a href=\"#注解格式\" class=\"headerlink\" title=\"注解格式\"></a>注解格式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 修饰符 <span class=\"hljs-doctag\">@interface</span> 注解名 &#123;</span><br><span class=\"hljs-comment\"> * 注解元素的声明1</span><br><span class=\"hljs-comment\"> * 注解元素的声明2</span><br><span class=\"hljs-comment\"> * &#125;</span><br><span class=\"hljs-comment\"> * 修饰符：访问修饰符必须为public,不写默认为pubic；</span><br><span class=\"hljs-comment\"> * 关键字：必须为<span class=\"hljs-doctag\">@interface</span>；</span><br><span class=\"hljs-comment\"> * 注解名： 注解名称为自定义注解的名称，使用时还会用到；</span><br><span class=\"hljs-comment\"> * 注解类型元素：注解类型元素是注解中内容，可以理解成自定义接口的实现部分；</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> MyTestAnnotation &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *\t注解的元素声明的两种形式</span><br><span class=\"hljs-comment\">     *\ttype elementName();</span><br><span class=\"hljs-comment\">     *\ttype elementName() default value;  </span><br><span class=\"hljs-comment\">     */</span><br>    String <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"注解样例\"><a href=\"#注解样例\" class=\"headerlink\" title=\"注解样例\"></a>注解样例</h2><p>接下来我们以Spring中的 <code>@Service</code> 注解为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><span class=\"hljs-comment\">// ElementType.TYPE 代表在注解上使用</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><span class=\"hljs-comment\">// RetentionPolicy.RUNTIME 代表运行时使用，可以通过反射获取到</span><br><span class=\"hljs-meta\">@Documented</span><span class=\"hljs-comment\">//包含在JavaDoc中</span><br><span class=\"hljs-meta\">@Component</span><span class=\"hljs-comment\">//允许通过包扫描的方式自动检测</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Service &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * The value may indicate a suggestion for a logical component name,</span><br><span class=\"hljs-comment\">\t * to be turned into a Spring bean in case of an autodetected component.</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> the suggested component name, if any (or empty String otherwise)</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-meta\">@AliasFor(annotation = Component.class)</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"@Annotation\"></a>@Annotation</h2><p><strong>JDK1.5有的，在rt.jar包下 <code>java.lang.annotation</code>包下，所有的注解默认继承了Annotation接口，但是它本身不能定义注解。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> java.lang.annotation;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 所有的注解默认继承了Annotation接口，但是它本身不能定义注解。</span><br><span class=\"hljs-comment\"> * The common interface extended by all annotation types.  Note that an</span><br><span class=\"hljs-comment\"> * interface that manually extends this one does &lt;i&gt;not&lt;/i&gt; define</span><br><span class=\"hljs-comment\"> * an annotation type.  Also note that this interface does not itself</span><br><span class=\"hljs-comment\"> * define an annotation type.</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * More information about annotation types can be found in section 9.6 of</span><br><span class=\"hljs-comment\"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * The &#123;<span class=\"hljs-doctag\">@link</span> java.lang.reflect.AnnotatedElement&#125; interface discusses</span><br><span class=\"hljs-comment\"> * compatibility concerns when evolving an annotation type from being</span><br><span class=\"hljs-comment\"> * non-repeatable to being repeatable.</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>  Josh Bloch</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span>   1.5</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Annotation</span> &#123;<br>    .<br>    .<br>    .<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实现自定义注解\"><a href=\"#实现自定义注解\" class=\"headerlink\" title=\"实现自定义注解\"></a>实现自定义注解</h2><p><strong>第一步-定义自定义注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> MyTestAnnotation &#123;<br>    String <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步-配置注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-meta\">@MyTestAnnotation</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBean</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>第三步-利用反射解析注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyTest</span> &#123;<br><br>    <span class=\"hljs-comment\">//isAnnotationPresent：判断当前元素是否被指定注解修饰</span><br>    <span class=\"hljs-comment\">//getAnnotation：返回指定的注解</span><br>    <span class=\"hljs-comment\">//getAnnotations：返回所有的注解</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">//获取MyBean的Class对象</span><br>            <span class=\"hljs-type\">MyBean</span> <span class=\"hljs-variable\">myBean</span> <span class=\"hljs-operator\">=</span> MyBean.builder().build();<br>            <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz</span> <span class=\"hljs-operator\">=</span> myBean.getClass();<br>            <br>            <span class=\"hljs-comment\">//判断myBean对象上是否有MyTestAnnotation注解</span><br>            <span class=\"hljs-keyword\">if</span> (clazz.isAnnotationPresent(MyTestAnnotation.class)) &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;MyBean类上配置了MyTestAnnotation注解！&quot;</span>);<br>                <span class=\"hljs-comment\">//获取该对象上MyTestAnnotation类型的注解</span><br>                <span class=\"hljs-type\">MyTestAnnotation</span> <span class=\"hljs-variable\">myTestAnnotation</span> <span class=\"hljs-operator\">=</span> (MyTestAnnotation) clazz.getAnnotation(MyTestAnnotation.class);<br>                System.out.println(myTestAnnotation.value());<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;MyBean类上没有配置MyTestAnnotation注解！&quot;</span>);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>执行main方法，运行结果：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">Connected to the target VM, address: <span class=\"hljs-string\">&#x27;127.0.0.1:62125&#x27;</span>, transport: <span class=\"hljs-string\">&#x27;socket&#x27;</span><br>MyBean类上配置了MyTestAnnotation注解！<br>test<br>Disconnected from the target VM, address: <span class=\"hljs-string\">&#x27;127.0.0.1:62125&#x27;</span>, transport: <span class=\"hljs-string\">&#x27;socket&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>参考链接：<a href=\"https://blog.csdn.net/zt15732625878/article/details/99671586\">https://blog.csdn.net/zt15732625878/article/details/99671586</a></p>\n<p>参考链接：<a href=\"https://blog.csdn.net/zt15732625878/article/details/100061528\">https://blog.csdn.net/zt15732625878/article/details/100061528</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA自定义注解\"><a href=\"#JAVA自定义注解\" class=\"headerlink\" title=\"JAVA自定义注解\"></a>JAVA自定义注解</h1><hr>\n<h2 id=\"注解概念\"><a href=\"#注解概念\" class=\"headerlink\" title=\"注解概念\"></a>注解概念</h2><p>注解是Java SE 5.0版本开始引入的概念，它是对java源代码的说明，是一种元数据（描述数据的数据）。</p>\n<h2 id=\"注解和注释的不同\"><a href=\"#注解和注释的不同\" class=\"headerlink\" title=\"注解和注释的不同\"></a>注解和注释的不同</h2><ul>\n<li><p><strong>注释</strong></p>\n<p> 注释是对代码的说明，给代码的读者看，便于帮读者梳理业务逻辑；在程序代码中经常看到的以@ 开头的大部分是注解；</p>\n</li>\n<li><p><strong>注解</strong></p>\n<p>注解也是对代码的说明，需要配合工具（解析它的代码）使用，参与代码的编译，给应用程序看的；</p>\n</li>\n</ul>\n<h2 id=\"注解分类\"><a href=\"#注解分类\" class=\"headerlink\" title=\"注解分类\"></a>注解分类</h2><p>注解以@开头，我们会在应用程序中见到各种各样的注解，比如 <code>@Autowired</code>，<code>@Service</code>，<code>@Controller</code>，<code>@Override </code>，<code>@Test</code>，<code>@Value</code> 等等，按照来源划分，可以分为 <strong>JDK的注解</strong>，<strong>第三方的注解</strong>，<strong>自定义注解</strong>。</p>\n<h3 id=\"JDK注解\"><a href=\"#JDK注解\" class=\"headerlink\" title=\"JDK注解\"></a>JDK注解</h3><h4 id=\"JAVA-内置注解\"><a href=\"#JAVA-内置注解\" class=\"headerlink\" title=\"JAVA 内置注解\"></a>JAVA 内置注解</h4><ul>\n<li>@Override （标记重写方法）</li>\n<li>@Deprecated （标记过时）</li>\n<li>@SuppressWarnings （忽略警告）</li>\n</ul>\n<h4 id=\"元注解-注解的注解\"><a href=\"#元注解-注解的注解\" class=\"headerlink\" title=\"元注解 (注解的注解)\"></a>元注解 (注解的注解)</h4><ul>\n<li>@Target （注解的作用目标）</li>\n<li>@Retention （注解的生命周期）</li>\n<li>@Document （注解是否被包含在JavaDoc中）</li>\n<li>@Inherited （是否允许子类集成该注解）</li>\n</ul>\n<h3 id=\"第三方注解（各种框架注解）\"><a href=\"#第三方注解（各种框架注解）\" class=\"headerlink\" title=\"第三方注解（各种框架注解）\"></a>第三方注解（各种框架注解）</h3><p>请自行百度各个框架的注解详解</p>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><p>使用元注解自己定义的注解</p>\n<p>JDK中有一些元注解，主要有@Target，@Retention,@Document,@Inherited用来修饰注解。</p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h4><p> 表明该注解可以应用的java元素类型</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Target类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ElementType.TYPE</td>\n<td align=\"center\">应用于类、接口（包括注解类型）、枚举</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.FIELD</td>\n<td align=\"center\">应用于属性（包括枚举中的常量）</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.METHOD</td>\n<td align=\"center\">应用于方法</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.PARAMETER</td>\n<td align=\"center\">应用于方法的形参</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.CONSTRUCTOR</td>\n<td align=\"center\">应用于构造函数</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.LOCAL_VARIABLE</td>\n<td align=\"center\">应用于局部变量</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.ANNOTATION_TYPE</td>\n<td align=\"center\">应用于注解类型</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.PACKAGE</td>\n<td align=\"center\">应用于包</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.TYPE_PARAMETER</td>\n<td align=\"center\">1.8版本新增，应用于类型变量）</td>\n</tr>\n<tr>\n<td align=\"center\">ElementType.TYPE_USE</td>\n<td align=\"center\">1.8版本新增，应用于任何使用类型的语句中（例如声明语句、泛型和强制转换语句中的类型）</td>\n</tr>\n</tbody></table>\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h4><p> 表明该注解的生命周期</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">生命周期类型</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">RetentionPolicy.SOURCE</td>\n<td align=\"center\">编译时被丢弃，不包含在类文件中</td>\n</tr>\n<tr>\n<td align=\"center\">RetentionPolicy.CLASS</td>\n<td align=\"center\">JVM加载时被丢弃，包含在类文件中，默认值</td>\n</tr>\n<tr>\n<td align=\"center\">RetentionPolicy.RUNTIME</td>\n<td align=\"center\">由JVM 加载，包含在类文件中，在运行时可以被获取到</td>\n</tr>\n</tbody></table>\n<h4 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"@Document\"></a>@Document</h4><p>表明该注解标记的元素可以被Javadoc 或类似的工具文档化</p>\n<h4 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h4><p>表明使用了@Inherited注解的注解，所标记的类的子类也会拥有这个注解</p>\n<h2 id=\"注解格式\"><a href=\"#注解格式\" class=\"headerlink\" title=\"注解格式\"></a>注解格式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 修饰符 <span class=\"hljs-doctag\">@interface</span> 注解名 &#123;</span><br><span class=\"hljs-comment\"> * 注解元素的声明1</span><br><span class=\"hljs-comment\"> * 注解元素的声明2</span><br><span class=\"hljs-comment\"> * &#125;</span><br><span class=\"hljs-comment\"> * 修饰符：访问修饰符必须为public,不写默认为pubic；</span><br><span class=\"hljs-comment\"> * 关键字：必须为<span class=\"hljs-doctag\">@interface</span>；</span><br><span class=\"hljs-comment\"> * 注解名： 注解名称为自定义注解的名称，使用时还会用到；</span><br><span class=\"hljs-comment\"> * 注解类型元素：注解类型元素是注解中内容，可以理解成自定义接口的实现部分；</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> MyTestAnnotation &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *\t注解的元素声明的两种形式</span><br><span class=\"hljs-comment\">     *\ttype elementName();</span><br><span class=\"hljs-comment\">     *\ttype elementName() default value;  </span><br><span class=\"hljs-comment\">     */</span><br>    String <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"注解样例\"><a href=\"#注解样例\" class=\"headerlink\" title=\"注解样例\"></a>注解样例</h2><p>接下来我们以Spring中的 <code>@Service</code> 注解为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><span class=\"hljs-comment\">// ElementType.TYPE 代表在注解上使用</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><span class=\"hljs-comment\">// RetentionPolicy.RUNTIME 代表运行时使用，可以通过反射获取到</span><br><span class=\"hljs-meta\">@Documented</span><span class=\"hljs-comment\">//包含在JavaDoc中</span><br><span class=\"hljs-meta\">@Component</span><span class=\"hljs-comment\">//允许通过包扫描的方式自动检测</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Service &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * The value may indicate a suggestion for a logical component name,</span><br><span class=\"hljs-comment\">\t * to be turned into a Spring bean in case of an autodetected component.</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> the suggested component name, if any (or empty String otherwise)</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-meta\">@AliasFor(annotation = Component.class)</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Annotation\"><a href=\"#Annotation\" class=\"headerlink\" title=\"@Annotation\"></a>@Annotation</h2><p><strong>JDK1.5有的，在rt.jar包下 <code>java.lang.annotation</code>包下，所有的注解默认继承了Annotation接口，但是它本身不能定义注解。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> java.lang.annotation;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 所有的注解默认继承了Annotation接口，但是它本身不能定义注解。</span><br><span class=\"hljs-comment\"> * The common interface extended by all annotation types.  Note that an</span><br><span class=\"hljs-comment\"> * interface that manually extends this one does &lt;i&gt;not&lt;/i&gt; define</span><br><span class=\"hljs-comment\"> * an annotation type.  Also note that this interface does not itself</span><br><span class=\"hljs-comment\"> * define an annotation type.</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * More information about annotation types can be found in section 9.6 of</span><br><span class=\"hljs-comment\"> * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * The &#123;<span class=\"hljs-doctag\">@link</span> java.lang.reflect.AnnotatedElement&#125; interface discusses</span><br><span class=\"hljs-comment\"> * compatibility concerns when evolving an annotation type from being</span><br><span class=\"hljs-comment\"> * non-repeatable to being repeatable.</span><br><span class=\"hljs-comment\"> * </span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span>  Josh Bloch</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span>   1.5</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Annotation</span> &#123;<br>    .<br>    .<br>    .<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实现自定义注解\"><a href=\"#实现自定义注解\" class=\"headerlink\" title=\"实现自定义注解\"></a>实现自定义注解</h2><p><strong>第一步-定义自定义注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> MyTestAnnotation &#123;<br>    String <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>第二步-配置注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-meta\">@MyTestAnnotation</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBean</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>第三步-利用反射解析注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyTest</span> &#123;<br><br>    <span class=\"hljs-comment\">//isAnnotationPresent：判断当前元素是否被指定注解修饰</span><br>    <span class=\"hljs-comment\">//getAnnotation：返回指定的注解</span><br>    <span class=\"hljs-comment\">//getAnnotations：返回所有的注解</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-comment\">//获取MyBean的Class对象</span><br>            <span class=\"hljs-type\">MyBean</span> <span class=\"hljs-variable\">myBean</span> <span class=\"hljs-operator\">=</span> MyBean.builder().build();<br>            <span class=\"hljs-type\">Class</span> <span class=\"hljs-variable\">clazz</span> <span class=\"hljs-operator\">=</span> myBean.getClass();<br>            <br>            <span class=\"hljs-comment\">//判断myBean对象上是否有MyTestAnnotation注解</span><br>            <span class=\"hljs-keyword\">if</span> (clazz.isAnnotationPresent(MyTestAnnotation.class)) &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;MyBean类上配置了MyTestAnnotation注解！&quot;</span>);<br>                <span class=\"hljs-comment\">//获取该对象上MyTestAnnotation类型的注解</span><br>                <span class=\"hljs-type\">MyTestAnnotation</span> <span class=\"hljs-variable\">myTestAnnotation</span> <span class=\"hljs-operator\">=</span> (MyTestAnnotation) clazz.getAnnotation(MyTestAnnotation.class);<br>                System.out.println(myTestAnnotation.value());<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;MyBean类上没有配置MyTestAnnotation注解！&quot;</span>);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>执行main方法，运行结果：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">Connected to the target VM, address: <span class=\"hljs-string\">&#x27;127.0.0.1:62125&#x27;</span>, transport: <span class=\"hljs-string\">&#x27;socket&#x27;</span><br>MyBean类上配置了MyTestAnnotation注解！<br>test<br>Disconnected from the target VM, address: <span class=\"hljs-string\">&#x27;127.0.0.1:62125&#x27;</span>, transport: <span class=\"hljs-string\">&#x27;socket&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>参考链接：<a href=\"https://blog.csdn.net/zt15732625878/article/details/99671586\">https://blog.csdn.net/zt15732625878/article/details/99671586</a></p>\n<p>参考链接：<a href=\"https://blog.csdn.net/zt15732625878/article/details/100061528\">https://blog.csdn.net/zt15732625878/article/details/100061528</a></p>\n"},{"_content":"**调用三方接口返回值JSON字符串带BOM头\"\\ufeff\"，JSON解析死活报错。**\n\n> 我是用SpringBoot的`RestTemplate`调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是`RestTemplate`的接收转换有问题，就将返回值换成了`String`类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。\n\n接口返回值日志如下：\n\n```\n2020-03-25 13:18:55.687 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Response 200 OK\n2020-03-25 13:18:55.688 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as \"application/json;charset=UTF-8\"\n2020-03-25 13:19:57.370 DEBUG 8595 --- [           main] com.hopefun.scm.open.api.EyuanApi        : 返回值：﻿{\"message\":\"成功\",\"code\":\"1\"}\n```\n\n> 在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。\n\n> 一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着\"\\ufeff\"，导致JSON字符串解析报错，原来罪魁祸首是这个玩意\"\\ufeff\"。Debug还是个好玩意啊。\n\n> 终于发现问题所在解决就轻松多了。\n\n```java\npublic static final String BOM = \"\\ufeff\";\n/**\n * 去除BOM\n *\n * @param bomStr JSON字符串\n * @return 去除BOM后的JSON字符串\n */\nprivate String recursiveBom(String bomStr) {\n    String str = \"\";\n    if (bomStr.startsWith(BOM)) {\n        str = bomStr.substring(1);\n        if (str.startsWith(BOM)) {\n            recursiveBom(str);\n        }\n    }\n    return str;\n}\n\n//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。\nrecursiveBom(bomStr.trim());\n```\n\n","source":"_posts/JSON字符串带BOM头.md","raw":"---\ncategories: []\n---\n**调用三方接口返回值JSON字符串带BOM头\"\\ufeff\"，JSON解析死活报错。**\n\n> 我是用SpringBoot的`RestTemplate`调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是`RestTemplate`的接收转换有问题，就将返回值换成了`String`类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。\n\n接口返回值日志如下：\n\n```\n2020-03-25 13:18:55.687 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Response 200 OK\n2020-03-25 13:18:55.688 DEBUG 8595 --- [           main] o.s.web.client.RestTemplate              : Reading to [java.lang.String] as \"application/json;charset=UTF-8\"\n2020-03-25 13:19:57.370 DEBUG 8595 --- [           main] com.hopefun.scm.open.api.EyuanApi        : 返回值：﻿{\"message\":\"成功\",\"code\":\"1\"}\n```\n\n> 在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。\n\n> 一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着\"\\ufeff\"，导致JSON字符串解析报错，原来罪魁祸首是这个玩意\"\\ufeff\"。Debug还是个好玩意啊。\n\n> 终于发现问题所在解决就轻松多了。\n\n```java\npublic static final String BOM = \"\\ufeff\";\n/**\n * 去除BOM\n *\n * @param bomStr JSON字符串\n * @return 去除BOM后的JSON字符串\n */\nprivate String recursiveBom(String bomStr) {\n    String str = \"\";\n    if (bomStr.startsWith(BOM)) {\n        str = bomStr.substring(1);\n        if (str.startsWith(BOM)) {\n            recursiveBom(str);\n        }\n    }\n    return str;\n}\n\n//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。\nrecursiveBom(bomStr.trim());\n```\n\n","slug":"JSON字符串带BOM头","published":1,"date":"2020-03-25T05:40:15.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8af000y19iadbuffsg5","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>调用三方接口返回值JSON字符串带BOM头”\\ufeff”，JSON解析死活报错。</strong></p>\n<blockquote>\n<p>我是用SpringBoot的<code>RestTemplate</code>调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是<code>RestTemplate</code>的接收转换有问题，就将返回值换成了<code>String</code>类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。</p>\n</blockquote>\n<p>接口返回值日志如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.687</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Response <span class=\"hljs-number\">200</span> OK<br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.688</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Reading to <span class=\"hljs-selector-attr\">[java.lang.String]</span> as <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span><br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.370</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> com<span class=\"hljs-selector-class\">.hopefun</span><span class=\"hljs-selector-class\">.scm</span><span class=\"hljs-selector-class\">.open</span><span class=\"hljs-selector-class\">.api</span><span class=\"hljs-selector-class\">.EyuanApi</span>        : 返回值：﻿&#123;<span class=\"hljs-string\">&quot;message&quot;</span>:<span class=\"hljs-string\">&quot;成功&quot;</span>,<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。</p>\n</blockquote>\n<blockquote>\n<p>一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着”\\ufeff”，导致JSON字符串解析报错，原来罪魁祸首是这个玩意”\\ufeff”。Debug还是个好玩意啊。</p>\n</blockquote>\n<blockquote>\n<p>终于发现问题所在解决就轻松多了。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">BOM</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;\\ufeff&quot;</span>;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 去除BOM</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> bomStr JSON字符串</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 去除BOM后的JSON字符串</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">recursiveBom</span><span class=\"hljs-params\">(String bomStr)</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">if</span> (bomStr.startsWith(BOM)) &#123;<br>        str = bomStr.substring(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">if</span> (str.startsWith(BOM)) &#123;<br>            recursiveBom(str);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> str;<br>&#125;<br><br><span class=\"hljs-comment\">//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。</span><br>recursiveBom(bomStr.trim());<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>调用三方接口返回值JSON字符串带BOM头”\\ufeff”，JSON解析死活报错。</strong></p>\n<blockquote>\n<p>我是用SpringBoot的<code>RestTemplate</code>调用三方接口的，一开始返回值我是用对象接收返回值，发现一直报错，我以为是<code>RestTemplate</code>的接收转换有问题，就将返回值换成了<code>String</code>类型去接收。接收到字符串后再转JSON、JSON字符串解析死活报错。</p>\n</blockquote>\n<p>接口返回值日志如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.687</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Response <span class=\"hljs-number\">200</span> OK<br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">55.688</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> o<span class=\"hljs-selector-class\">.s</span><span class=\"hljs-selector-class\">.web</span><span class=\"hljs-selector-class\">.client</span><span class=\"hljs-selector-class\">.RestTemplate</span>              : Reading to <span class=\"hljs-selector-attr\">[java.lang.String]</span> as <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span><br><span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">25</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">57.370</span> DEBUG <span class=\"hljs-number\">8595</span> --- <span class=\"hljs-selector-attr\">[           main]</span> com<span class=\"hljs-selector-class\">.hopefun</span><span class=\"hljs-selector-class\">.scm</span><span class=\"hljs-selector-class\">.open</span><span class=\"hljs-selector-class\">.api</span><span class=\"hljs-selector-class\">.EyuanApi</span>        : 返回值：﻿&#123;<span class=\"hljs-string\">&quot;message&quot;</span>:<span class=\"hljs-string\">&quot;成功&quot;</span>,<span class=\"hljs-string\">&quot;code&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在IDEA开发过程中，一开始光看返回值打印的日志是看不出来任何毛病的，并且我将这个返回值的JSON字符串复制到Sublime编辑器中也看不出问题所在。</p>\n</blockquote>\n<blockquote>\n<p>一开始很自信没有Debug查看返回值，后来当我开启了Debug模式后终于发现了问题所在。原来在JSON字符串前面还带着”\\ufeff”，导致JSON字符串解析报错，原来罪魁祸首是这个玩意”\\ufeff”。Debug还是个好玩意啊。</p>\n</blockquote>\n<blockquote>\n<p>终于发现问题所在解决就轻松多了。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">BOM</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;\\ufeff&quot;</span>;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 去除BOM</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> bomStr JSON字符串</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 去除BOM后的JSON字符串</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">recursiveBom</span><span class=\"hljs-params\">(String bomStr)</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    <span class=\"hljs-keyword\">if</span> (bomStr.startsWith(BOM)) &#123;<br>        str = bomStr.substring(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">if</span> (str.startsWith(BOM)) &#123;<br>            recursiveBom(str);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> str;<br>&#125;<br><br><span class=\"hljs-comment\">//使用，如此得出来的字符串就是纯正的JSON字符串啦。妈妈再也不怕解析报错啦。。。</span><br>recursiveBom(bomStr.trim());<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# homebrew长时间停在Updating Homebrew 这个步骤\n\n在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。\n\n例：执行 brew install composer 命令\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法\n```\n\n \n\n## 方法 1：按住 control + c 取消本次更新操作\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C\n```\n\n按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作\n\n大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C==> Satisfying dependencies\n==> Downloading https://getcomposer.org/download/1.7.2/composer.phar\n...\n```\n\n这个方法是临时的、一次性的\n\n \n\n## 方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\n\n平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：\n\n1. brew.git\n2. homebrew-core.git\n3. homebrew-bottles\n\n通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址\n\n \n\n### 1. 替换 / 还原 brew.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 brew.git 仓库地址:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n \n\n### 2. 替换 / 还原 homebrew-core.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n \n\n### 3. 替换 / 还原 homebrew-bottles 访问地址\n\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系\n\n所以，先来查看当前使用的 shell 版本\n\n```shell\necho $SHELL\n\n# 如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式\n# 如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式\n```\n\n \n\n#### 3.1 zsh 终端操作方式\n\n```shell\n# 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc\n```\n\n \n\n#### 3.2 bash 终端操作方式\n\n```shell\n# 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile\n```\n\n\n\n","source":"_posts/MAC替换Homebrew源.md","raw":"---\ncategories: []\n---\n# homebrew长时间停在Updating Homebrew 这个步骤\n\n在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。\n\n例：执行 brew install composer 命令\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法\n```\n\n \n\n## 方法 1：按住 control + c 取消本次更新操作\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C\n```\n\n按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作\n\n大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了\n\n```shell\n➜  ~ brew install composer\nUpdating Homebrew...\n^C==> Satisfying dependencies\n==> Downloading https://getcomposer.org/download/1.7.2/composer.phar\n...\n```\n\n这个方法是临时的、一次性的\n\n \n\n## 方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\n\n平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：\n\n1. brew.git\n2. homebrew-core.git\n3. homebrew-bottles\n\n通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址\n\n \n\n### 1. 替换 / 还原 brew.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 brew.git 仓库地址:\ncd \"$(brew --repo)\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\n\n#=======================================================\n\n# 还原为官方提供的 brew.git 仓库地址\ncd \"$(brew --repo)\"\ngit remote set-url origin https://github.com/Homebrew/brew.git\n```\n\n \n\n### 2. 替换 / 还原 homebrew-core.git 仓库地址\n\n```shell\n# 替换成阿里巴巴的 homebrew-core.git 仓库地址:\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-core.git 仓库地址\ncd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"\ngit remote set-url origin https://github.com/Homebrew/homebrew-core.git\n```\n\n \n\n### 3. 替换 / 还原 homebrew-bottles 访问地址\n\n这个步骤跟你的 macOS 系统使用的 shell 版本有关系\n\n所以，先来查看当前使用的 shell 版本\n\n```shell\necho $SHELL\n\n# 如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式\n# 如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式\n```\n\n \n\n#### 3.1 zsh 终端操作方式\n\n```shell\n# 替换成阿里巴巴的 homebrew-bottles 访问地址:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.zshrc\nsource ~/.zshrc\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.zshrc\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.zshrc\n```\n\n \n\n#### 3.2 bash 终端操作方式\n\n```shell\n# 替换 homebrew-bottles 访问 URL:\necho 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' >> ~/.bash_profile\nsource ~/.bash_profile\n\n#=======================================================\n\n# 还原为官方提供的 homebrew-bottles 访问地址\nvi ~/.bash_profile\n# 然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置\nsource ~/.bash_profile\n```\n\n\n\n","slug":"MAC替换Homebrew源","published":1,"date":"2020-11-19T03:59:59.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ag000z19ia44h8hl5v","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"homebrew长时间停在Updating-Homebrew-这个步骤\"><a href=\"#homebrew长时间停在Updating-Homebrew-这个步骤\" class=\"headerlink\" title=\"homebrew长时间停在Updating Homebrew 这个步骤\"></a>homebrew长时间停在Updating Homebrew 这个步骤</h1><p>在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。</p>\n<p>例：执行 brew install composer 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方法-1：按住-control-c-取消本次更新操作\"><a href=\"#方法-1：按住-control-c-取消本次更新操作\" class=\"headerlink\" title=\"方法 1：按住 control + c 取消本次更新操作\"></a>方法 1：按住 control + c 取消本次更新操作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C<br></code></pre></td></tr></table></figure>\n\n<p>按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作</p>\n<p>大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C==&gt; Satisfying dependencies<br>==&gt; Downloading https://getcomposer.org/download/1.7.2/composer.phar<br>...<br></code></pre></td></tr></table></figure>\n\n<p>这个方法是临时的、一次性的</p>\n<h2 id=\"方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\"><a href=\"#方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\" class=\"headerlink\" title=\"方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\"></a>方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速</h2><p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：</p>\n<ol>\n<li>brew.git</li>\n<li>homebrew-core.git</li>\n<li>homebrew-bottles</li>\n</ol>\n<p>通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址</p>\n<h3 id=\"1-替换-x2F-还原-brew-git-仓库地址\"><a href=\"#1-替换-x2F-还原-brew-git-仓库地址\" class=\"headerlink\" title=\"1. 替换 &#x2F; 还原 brew.git 仓库地址\"></a>1. 替换 &#x2F; 还原 brew.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 brew.git 仓库地址:</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 brew.git 仓库地址</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://github.com/Homebrew/brew.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-替换-x2F-还原-homebrew-core-git-仓库地址\"><a href=\"#2-替换-x2F-还原-homebrew-core-git-仓库地址\" class=\"headerlink\" title=\"2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址\"></a>2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-core.git 仓库地址:</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-core.git 仓库地址</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://github.com/Homebrew/homebrew-core.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-替换-x2F-还原-homebrew-bottles-访问地址\"><a href=\"#3-替换-x2F-还原-homebrew-bottles-访问地址\" class=\"headerlink\" title=\"3. 替换 &#x2F; 还原 homebrew-bottles 访问地址\"></a>3. 替换 &#x2F; 还原 homebrew-bottles 访问地址</h3><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p>\n<p>所以，先来查看当前使用的 shell 版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo $SHELL<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-zsh-终端操作方式\"><a href=\"#3-1-zsh-终端操作方式\" class=\"headerlink\" title=\"3.1 zsh 终端操作方式\"></a>3.1 zsh 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-bottles 访问地址:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.zshrc<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-bash-终端操作方式\"><a href=\"#3-2-bash-终端操作方式\" class=\"headerlink\" title=\"3.2 bash 终端操作方式\"></a>3.2 bash 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换 homebrew-bottles 访问 URL:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.bash_profile<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.bash_profile<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"homebrew长时间停在Updating-Homebrew-这个步骤\"><a href=\"#homebrew长时间停在Updating-Homebrew-这个步骤\" class=\"headerlink\" title=\"homebrew长时间停在Updating Homebrew 这个步骤\"></a>homebrew长时间停在Updating Homebrew 这个步骤</h1><p>在国内的网络环境下使用 Homebrew 安装软件的过程中可能会长时间卡在 Updating Homebrew 这个步骤。</p>\n<p>例：执行 brew install composer 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew... # 如果碰到长时间卡在这里，参考以下 2 种处理方法<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方法-1：按住-control-c-取消本次更新操作\"><a href=\"#方法-1：按住-control-c-取消本次更新操作\" class=\"headerlink\" title=\"方法 1：按住 control + c 取消本次更新操作\"></a>方法 1：按住 control + c 取消本次更新操作</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C<br></code></pre></td></tr></table></figure>\n\n<p>按住 control + c 之后命令行会显示 ^C，就代表已经取消了 Updating Homebrew 操作</p>\n<p>大概不到 1 秒钟之后就会去执行我们真正需要的安装操作了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">➜  ~ brew install composer<br>Updating Homebrew...<br>^C==&gt; Satisfying dependencies<br>==&gt; Downloading https://getcomposer.org/download/1.7.2/composer.phar<br>...<br></code></pre></td></tr></table></figure>\n\n<p>这个方法是临时的、一次性的</p>\n<h2 id=\"方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\"><a href=\"#方法-2：使用-Alibaba-的-Homebrew-镜像源进行加速\" class=\"headerlink\" title=\"方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速\"></a>方法 2：使用 Alibaba 的 Homebrew 镜像源进行加速</h2><p>平时我们执行 brew 命令安装软件的时候，跟以下 3 个仓库地址有关：</p>\n<ol>\n<li>brew.git</li>\n<li>homebrew-core.git</li>\n<li>homebrew-bottles</li>\n</ol>\n<p>通过以下操作将这 3 个仓库地址全部替换为 Alibaba 提供的地址</p>\n<h3 id=\"1-替换-x2F-还原-brew-git-仓库地址\"><a href=\"#1-替换-x2F-还原-brew-git-仓库地址\" class=\"headerlink\" title=\"1. 替换 &#x2F; 还原 brew.git 仓库地址\"></a>1. 替换 &#x2F; 还原 brew.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 brew.git 仓库地址:</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 brew.git 仓库地址</span><br>cd &quot;$(brew --repo)&quot;<br>git remote set-url origin https://github.com/Homebrew/brew.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-替换-x2F-还原-homebrew-core-git-仓库地址\"><a href=\"#2-替换-x2F-还原-homebrew-core-git-仓库地址\" class=\"headerlink\" title=\"2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址\"></a>2. 替换 &#x2F; 还原 homebrew-core.git 仓库地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-core.git 仓库地址:</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-core.git 仓库地址</span><br>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;<br>git remote set-url origin https://github.com/Homebrew/homebrew-core.git<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-替换-x2F-还原-homebrew-bottles-访问地址\"><a href=\"#3-替换-x2F-还原-homebrew-bottles-访问地址\" class=\"headerlink\" title=\"3. 替换 &#x2F; 还原 homebrew-bottles 访问地址\"></a>3. 替换 &#x2F; 还原 homebrew-bottles 访问地址</h3><p>这个步骤跟你的 macOS 系统使用的 shell 版本有关系</p>\n<p>所以，先来查看当前使用的 shell 版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">echo $SHELL<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/zsh，参考?的 zsh 终端操作方式</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果你的输出结果是 /bin/bash，参考?的 bash 终端操作方式</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-zsh-终端操作方式\"><a href=\"#3-1-zsh-终端操作方式\" class=\"headerlink\" title=\"3.1 zsh 终端操作方式\"></a>3.1 zsh 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换成阿里巴巴的 homebrew-bottles 访问地址:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.zshrc<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-bash-终端操作方式\"><a href=\"#3-2-bash-终端操作方式\" class=\"headerlink\" title=\"3.2 bash 终端操作方式\"></a>3.2 bash 终端操作方式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">替换 homebrew-bottles 访问 URL:</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">=======================================================</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">还原为官方提供的 homebrew-bottles 访问地址</span><br>vi ~/.bash_profile<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">然后，删除 HOMEBREW_BOTTLE_DOMAIN 这一行配置</span><br>source ~/.bash_profile<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"_content":"参考：\n\nhttps://blog.csdn.net/weixin_45446068/article/details/105278653\n\n\n\n## 读写分离配置\n\n参考：https://www.cnblogs.com/happy4java/p/11206030.html\n\n### 在 server.xml 文件中配置Mycat的读写账号密码\n\n```xml\n\t<user name=\"root\" defaultAccount=\"true\">\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"schemas\">TESTDB</property>\n\t\t<!-- <property name=\"defaultSchema\">mycat_db</property> -->\n\t\t<!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\t\t\n\t\t<!-- 表级 DML 权限设置 -->\n\t\t<!-- \t\t\n\t\t<privileges check=\"false\">\n\t\t\t<schema name=\"TESTDB\" dml=\"0110\" >\n\t\t\t\t<table name=\"tb01\" dml=\"0000\"></table>\n\t\t\t\t<table name=\"tb02\" dml=\"1111\"></table>\n\t\t\t</schema>\n\t\t</privileges>\t\t\n\t\t -->\n\t</user>\n\n\t<user name=\"user\">\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"schemas\">TESTDB</property>\n\t\t<property name=\"readOnly\">true</property>\n\t\t<!-- <property name=\"defaultSchema\">mycat_db</property> -->\n\t</user>\n```\n\n### 在 schema.xml 文件中配置读写分离\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE mycat:schema SYSTEM \"schema.dtd\">\n<mycat:schema xmlns:mycat=\"http://io.mycat/\">\n\t<!-- Mycat 逻辑表 -->\n\t<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"></schema>\n\t<!-- Mycat 节点，database：物理数据库中的实际数据库名 -->\n\t<dataNode name=\"dn1\" dataHost=\"node1\" database=\"mycat_db\" />\n\t<!-- Mycat Host，balance=\"0\", 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上 -->\n\t<dataHost name=\"node1\" maxCon=\"1000\" minCon=\"10\" balance=\"1\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"jdbc\" switchType=\"1\"  slaveThreshold=\"100\">\n\t\t<heartbeat>select user()</heartbeat>\n\t\t<writeHost host=\"192.168.1.70\" url=\"jdbc:mysql://192.168.1.70:3306\" user=\"shuma\" password=\"shuma@123\">\n\t\t\t<readHost host=\"192.168.1.32\" url=\"jdbc:mysql://192.168.1.32:3306\" user=\"root\" password=\"Root@123\"></readHost>\n\t\t</writeHost>\n\t\t<!-- <writeHost host=\"hostM2\" url=\"localhost:3316\" user=\"root\" password=\"123456\"/> -->\n\t</dataHost>\n\n</mycat:schema>\n```\n\n### 这里有几个配置需要说明下：\n\n```xml\nsqlMaxLimit配置默认查询数量\ndatabase为真实数据库名\nbalance=\"0\", 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上。\nbalance=\"1\"，全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡，简单的说，当双主双从模式(M1 ->S1 ， M2->S2，并且 M1 与 M2 互为主备)，正常情况下， M2,S1,S2 都参与 select 语句的负载均衡。\nbalance=\"2\"，所有读操作都随机的在 writeHost、 readhost 上分发。\nbalance=\"3\"， 所有读请求随机的分发到 wiriterHost 对应的 readhost 执行,writerHost 不负担读压力，注意 balance=3 只在 1.4 及其以后版本有， 1.3 没有。\nwriteType=\"0\", 所有写操作发送到配置的第一个 writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties .\nwriteType=\"1\"，所有写操作都随机的发送到配置的 writeHost。\nwriteType=\"2\"，没实现。\n-1 表示不自动切换\n1 默认值，自动切换\n2 基于MySQL 主从同步的状态决定是否切换\n```\n\n","source":"_posts/Mycat配置.md","raw":"---\ncategories: []\n---\n参考：\n\nhttps://blog.csdn.net/weixin_45446068/article/details/105278653\n\n\n\n## 读写分离配置\n\n参考：https://www.cnblogs.com/happy4java/p/11206030.html\n\n### 在 server.xml 文件中配置Mycat的读写账号密码\n\n```xml\n\t<user name=\"root\" defaultAccount=\"true\">\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"schemas\">TESTDB</property>\n\t\t<!-- <property name=\"defaultSchema\">mycat_db</property> -->\n\t\t<!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 -->\n\t\t\n\t\t<!-- 表级 DML 权限设置 -->\n\t\t<!-- \t\t\n\t\t<privileges check=\"false\">\n\t\t\t<schema name=\"TESTDB\" dml=\"0110\" >\n\t\t\t\t<table name=\"tb01\" dml=\"0000\"></table>\n\t\t\t\t<table name=\"tb02\" dml=\"1111\"></table>\n\t\t\t</schema>\n\t\t</privileges>\t\t\n\t\t -->\n\t</user>\n\n\t<user name=\"user\">\n\t\t<property name=\"password\">123456</property>\n\t\t<property name=\"schemas\">TESTDB</property>\n\t\t<property name=\"readOnly\">true</property>\n\t\t<!-- <property name=\"defaultSchema\">mycat_db</property> -->\n\t</user>\n```\n\n### 在 schema.xml 文件中配置读写分离\n\n```xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE mycat:schema SYSTEM \"schema.dtd\">\n<mycat:schema xmlns:mycat=\"http://io.mycat/\">\n\t<!-- Mycat 逻辑表 -->\n\t<schema name=\"TESTDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn1\"></schema>\n\t<!-- Mycat 节点，database：物理数据库中的实际数据库名 -->\n\t<dataNode name=\"dn1\" dataHost=\"node1\" database=\"mycat_db\" />\n\t<!-- Mycat Host，balance=\"0\", 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上 -->\n\t<dataHost name=\"node1\" maxCon=\"1000\" minCon=\"10\" balance=\"1\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"jdbc\" switchType=\"1\"  slaveThreshold=\"100\">\n\t\t<heartbeat>select user()</heartbeat>\n\t\t<writeHost host=\"192.168.1.70\" url=\"jdbc:mysql://192.168.1.70:3306\" user=\"shuma\" password=\"shuma@123\">\n\t\t\t<readHost host=\"192.168.1.32\" url=\"jdbc:mysql://192.168.1.32:3306\" user=\"root\" password=\"Root@123\"></readHost>\n\t\t</writeHost>\n\t\t<!-- <writeHost host=\"hostM2\" url=\"localhost:3316\" user=\"root\" password=\"123456\"/> -->\n\t</dataHost>\n\n</mycat:schema>\n```\n\n### 这里有几个配置需要说明下：\n\n```xml\nsqlMaxLimit配置默认查询数量\ndatabase为真实数据库名\nbalance=\"0\", 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上。\nbalance=\"1\"，全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡，简单的说，当双主双从模式(M1 ->S1 ， M2->S2，并且 M1 与 M2 互为主备)，正常情况下， M2,S1,S2 都参与 select 语句的负载均衡。\nbalance=\"2\"，所有读操作都随机的在 writeHost、 readhost 上分发。\nbalance=\"3\"， 所有读请求随机的分发到 wiriterHost 对应的 readhost 执行,writerHost 不负担读压力，注意 balance=3 只在 1.4 及其以后版本有， 1.3 没有。\nwriteType=\"0\", 所有写操作发送到配置的第一个 writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties .\nwriteType=\"1\"，所有写操作都随机的发送到配置的 writeHost。\nwriteType=\"2\"，没实现。\n-1 表示不自动切换\n1 默认值，自动切换\n2 基于MySQL 主从同步的状态决定是否切换\n```\n\n","slug":"Mycat配置","published":1,"date":"2020-09-16T17:25:52.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ai001019iabx7z8g0z","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/weixin_45446068/article/details/105278653\">https://blog.csdn.net/weixin_45446068/article/details/105278653</a></p>\n<h2 id=\"读写分离配置\"><a href=\"#读写分离配置\" class=\"headerlink\" title=\"读写分离配置\"></a>读写分离配置</h2><p>参考：<a href=\"https://www.cnblogs.com/happy4java/p/11206030.html\">https://www.cnblogs.com/happy4java/p/11206030.html</a></p>\n<h3 id=\"在-server-xml-文件中配置Mycat的读写账号密码\"><a href=\"#在-server-xml-文件中配置Mycat的读写账号密码\" class=\"headerlink\" title=\"在 server.xml 文件中配置Mycat的读写账号密码\"></a>在 server.xml 文件中配置Mycat的读写账号密码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;root&quot;</span> <span class=\"hljs-attr\">defaultAccount</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- &lt;property name=&quot;defaultSchema&quot;&gt;mycat_db&lt;/property&gt; --&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span><br>\t<br>\t<span class=\"hljs-comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- \t\t</span><br><span class=\"hljs-comment\">\t&lt;privileges check=&quot;false&quot;&gt;</span><br><span class=\"hljs-comment\">\t\t&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span><br><span class=\"hljs-comment\">\t\t\t&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span><br><span class=\"hljs-comment\">\t\t\t&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span><br><span class=\"hljs-comment\">\t\t&lt;/schema&gt;</span><br><span class=\"hljs-comment\">\t&lt;/privileges&gt;\t\t</span><br><span class=\"hljs-comment\">\t --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">user</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- &lt;property name=&quot;defaultSchema&quot;&gt;mycat_db&lt;/property&gt; --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">user</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在-schema-xml-文件中配置读写分离\"><a href=\"#在-schema-xml-文件中配置读写分离\" class=\"headerlink\" title=\"在 schema.xml 文件中配置读写分离\"></a>在 schema.xml 文件中配置读写分离</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">mycat</span>:schema <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;schema.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mycat:schema</span> <span class=\"hljs-attr\">xmlns:mycat</span>=<span class=\"hljs-string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- Mycat 逻辑表 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">schema</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;TESTDB&quot;</span> <span class=\"hljs-attr\">checkSQLschema</span>=<span class=\"hljs-string\">&quot;false&quot;</span> <span class=\"hljs-attr\">sqlMaxLimit</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">dataNode</span>=<span class=\"hljs-string\">&quot;dn1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">schema</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- Mycat 节点，database：物理数据库中的实际数据库名 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dataNode</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dn1&quot;</span> <span class=\"hljs-attr\">dataHost</span>=<span class=\"hljs-string\">&quot;node1&quot;</span> <span class=\"hljs-attr\">database</span>=<span class=\"hljs-string\">&quot;mycat_db&quot;</span> /&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- Mycat Host，balance=&quot;0&quot;, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dataHost</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;node1&quot;</span> <span class=\"hljs-attr\">maxCon</span>=<span class=\"hljs-string\">&quot;1000&quot;</span> <span class=\"hljs-attr\">minCon</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">balance</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">writeType</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">dbType</span>=<span class=\"hljs-string\">&quot;mysql&quot;</span> <span class=\"hljs-attr\">dbDriver</span>=<span class=\"hljs-string\">&quot;jdbc&quot;</span> <span class=\"hljs-attr\">switchType</span>=<span class=\"hljs-string\">&quot;1&quot;</span>  <span class=\"hljs-attr\">slaveThreshold</span>=<span class=\"hljs-string\">&quot;100&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heartbeat</span>&gt;</span>select user()<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heartbeat</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">writeHost</span> <span class=\"hljs-attr\">host</span>=<span class=\"hljs-string\">&quot;192.168.1.70&quot;</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://192.168.1.70:3306&quot;</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">&quot;shuma&quot;</span> <span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">&quot;shuma@123&quot;</span>&gt;</span><br>\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">readHost</span> <span class=\"hljs-attr\">host</span>=<span class=\"hljs-string\">&quot;192.168.1.32&quot;</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://192.168.1.32:3306&quot;</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">&quot;root&quot;</span> <span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">&quot;Root@123&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">readHost</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">writeHost</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dataHost</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"这里有几个配置需要说明下：\"><a href=\"#这里有几个配置需要说明下：\" class=\"headerlink\" title=\"这里有几个配置需要说明下：\"></a>这里有几个配置需要说明下：</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">sqlMaxLimit配置默认查询数量<br>database为真实数据库名<br>balance=&quot;0&quot;, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上。<br>balance=&quot;1&quot;，全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡，简单的说，当双主双从模式(M1 -&gt;S1 ， M2-&gt;S2，并且 M1 与 M2 互为主备)，正常情况下， M2,S1,S2 都参与 select 语句的负载均衡。<br>balance=&quot;2&quot;，所有读操作都随机的在 writeHost、 readhost 上分发。<br>balance=&quot;3&quot;， 所有读请求随机的分发到 wiriterHost 对应的 readhost 执行,writerHost 不负担读压力，注意 balance=3 只在 1.4 及其以后版本有， 1.3 没有。<br>writeType=&quot;0&quot;, 所有写操作发送到配置的第一个 writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties .<br>writeType=&quot;1&quot;，所有写操作都随机的发送到配置的 writeHost。<br>writeType=&quot;2&quot;，没实现。<br>-1 表示不自动切换<br>1 默认值，自动切换<br>2 基于MySQL 主从同步的状态决定是否切换<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/weixin_45446068/article/details/105278653\">https://blog.csdn.net/weixin_45446068/article/details/105278653</a></p>\n<h2 id=\"读写分离配置\"><a href=\"#读写分离配置\" class=\"headerlink\" title=\"读写分离配置\"></a>读写分离配置</h2><p>参考：<a href=\"https://www.cnblogs.com/happy4java/p/11206030.html\">https://www.cnblogs.com/happy4java/p/11206030.html</a></p>\n<h3 id=\"在-server-xml-文件中配置Mycat的读写账号密码\"><a href=\"#在-server-xml-文件中配置Mycat的读写账号密码\" class=\"headerlink\" title=\"在 server.xml 文件中配置Mycat的读写账号密码\"></a>在 server.xml 文件中配置Mycat的读写账号密码</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;root&quot;</span> <span class=\"hljs-attr\">defaultAccount</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- &lt;property name=&quot;defaultSchema&quot;&gt;mycat_db&lt;/property&gt; --&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span><br>\t<br>\t<span class=\"hljs-comment\">&lt;!-- 表级 DML 权限设置 --&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- \t\t</span><br><span class=\"hljs-comment\">\t&lt;privileges check=&quot;false&quot;&gt;</span><br><span class=\"hljs-comment\">\t\t&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span><br><span class=\"hljs-comment\">\t\t\t&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span><br><span class=\"hljs-comment\">\t\t\t&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span><br><span class=\"hljs-comment\">\t\t&lt;/schema&gt;</span><br><span class=\"hljs-comment\">\t&lt;/privileges&gt;\t\t</span><br><span class=\"hljs-comment\">\t --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">user</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;readOnly&quot;</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- &lt;property name=&quot;defaultSchema&quot;&gt;mycat_db&lt;/property&gt; --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">user</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"在-schema-xml-文件中配置读写分离\"><a href=\"#在-schema-xml-文件中配置读写分离\" class=\"headerlink\" title=\"在 schema.xml 文件中配置读写分离\"></a>在 schema.xml 文件中配置读写分离</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span>?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">mycat</span>:schema <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;schema.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mycat:schema</span> <span class=\"hljs-attr\">xmlns:mycat</span>=<span class=\"hljs-string\">&quot;http://io.mycat/&quot;</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- Mycat 逻辑表 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">schema</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;TESTDB&quot;</span> <span class=\"hljs-attr\">checkSQLschema</span>=<span class=\"hljs-string\">&quot;false&quot;</span> <span class=\"hljs-attr\">sqlMaxLimit</span>=<span class=\"hljs-string\">&quot;100&quot;</span> <span class=\"hljs-attr\">dataNode</span>=<span class=\"hljs-string\">&quot;dn1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">schema</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- Mycat 节点，database：物理数据库中的实际数据库名 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dataNode</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dn1&quot;</span> <span class=\"hljs-attr\">dataHost</span>=<span class=\"hljs-string\">&quot;node1&quot;</span> <span class=\"hljs-attr\">database</span>=<span class=\"hljs-string\">&quot;mycat_db&quot;</span> /&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!-- Mycat Host，balance=&quot;0&quot;, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上 --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dataHost</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;node1&quot;</span> <span class=\"hljs-attr\">maxCon</span>=<span class=\"hljs-string\">&quot;1000&quot;</span> <span class=\"hljs-attr\">minCon</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">balance</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">writeType</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">dbType</span>=<span class=\"hljs-string\">&quot;mysql&quot;</span> <span class=\"hljs-attr\">dbDriver</span>=<span class=\"hljs-string\">&quot;jdbc&quot;</span> <span class=\"hljs-attr\">switchType</span>=<span class=\"hljs-string\">&quot;1&quot;</span>  <span class=\"hljs-attr\">slaveThreshold</span>=<span class=\"hljs-string\">&quot;100&quot;</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heartbeat</span>&gt;</span>select user()<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heartbeat</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">writeHost</span> <span class=\"hljs-attr\">host</span>=<span class=\"hljs-string\">&quot;192.168.1.70&quot;</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://192.168.1.70:3306&quot;</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">&quot;shuma&quot;</span> <span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">&quot;shuma@123&quot;</span>&gt;</span><br>\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">readHost</span> <span class=\"hljs-attr\">host</span>=<span class=\"hljs-string\">&quot;192.168.1.32&quot;</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://192.168.1.32:3306&quot;</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">&quot;root&quot;</span> <span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">&quot;Root@123&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">readHost</span>&gt;</span><br>\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">writeHost</span>&gt;</span><br>\t\t<span class=\"hljs-comment\">&lt;!-- &lt;writeHost host=&quot;hostM2&quot; url=&quot;localhost:3316&quot; user=&quot;root&quot; password=&quot;123456&quot;/&gt; --&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dataHost</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"这里有几个配置需要说明下：\"><a href=\"#这里有几个配置需要说明下：\" class=\"headerlink\" title=\"这里有几个配置需要说明下：\"></a>这里有几个配置需要说明下：</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">sqlMaxLimit配置默认查询数量<br>database为真实数据库名<br>balance=&quot;0&quot;, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost 上。<br>balance=&quot;1&quot;，全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡，简单的说，当双主双从模式(M1 -&gt;S1 ， M2-&gt;S2，并且 M1 与 M2 互为主备)，正常情况下， M2,S1,S2 都参与 select 语句的负载均衡。<br>balance=&quot;2&quot;，所有读操作都随机的在 writeHost、 readhost 上分发。<br>balance=&quot;3&quot;， 所有读请求随机的分发到 wiriterHost 对应的 readhost 执行,writerHost 不负担读压力，注意 balance=3 只在 1.4 及其以后版本有， 1.3 没有。<br>writeType=&quot;0&quot;, 所有写操作发送到配置的第一个 writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties .<br>writeType=&quot;1&quot;，所有写操作都随机的发送到配置的 writeHost。<br>writeType=&quot;2&quot;，没实现。<br>-1 表示不自动切换<br>1 默认值，自动切换<br>2 基于MySQL 主从同步的状态决定是否切换<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# Mysql 查询天、周，月，季度、年的数据\n\n**今天**\n\n```mysql\nselect * from 表名 where to_days(时间字段名) = to_days(now());\n```\n\n**昨天**\n\n```mysql\nSELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) <= 1\n```\n\n**近7天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(时间字段名)\n```\n\n**近30天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) <= date(时间字段名)\n```\n\n**本月**\n\n```mysql\nSELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )\n```\n\n**上一月**\n\n```mysql\nSELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( 时间字段名, '%Y%m' ) ) =1\n```\n\n**查询本季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());\n```\n\n**查询上季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));\n```\n\n**查询本年数据**\n\n```mysql\nselect * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());\n```\n\n**查询上年数据**\n\n```mysql\nselect * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));\n```\n\n**查询当前这周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now());\n```\n\n**查询上周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now())-1;\n```\n\n**查询上个月的数据**\n\n```mysql\nselect name,submittime from enterprise where date_format(submittime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')\n\nselect * from user where DATE_FORMAT(pudate,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m') ; \n\nselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = WEEKOFYEAR(now()) \n\nselect * from user where MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where YEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where pudate between  上月最后一天  and 下月第一天 \n```\n\n**查询当前月份的数据** \n\n```mysql\nselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(now(),'%Y-%m')\n```\n\n**查询距离当前现在6个月的数据**\n\n```mysql\nselect name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();\n```\n\n[参考原文](https://www.cnblogs.com/benefitworld/p/5832897.html)\n\n","source":"_posts/Mysql 查询天、周，月，季度、年的数据.md","raw":"---\ncategories: []\n---\n# Mysql 查询天、周，月，季度、年的数据\n\n**今天**\n\n```mysql\nselect * from 表名 where to_days(时间字段名) = to_days(now());\n```\n\n**昨天**\n\n```mysql\nSELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) <= 1\n```\n\n**近7天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(时间字段名)\n```\n\n**近30天**\n\n```mysql\nSELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) <= date(时间字段名)\n```\n\n**本月**\n\n```mysql\nSELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )\n```\n\n**上一月**\n\n```mysql\nSELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , '%Y%m' ) , date_format( 时间字段名, '%Y%m' ) ) =1\n```\n\n**查询本季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());\n```\n\n**查询上季度数据**\n\n```mysql\nselect * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));\n```\n\n**查询本年数据**\n\n```mysql\nselect * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());\n```\n\n**查询上年数据**\n\n```mysql\nselect * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));\n```\n\n**查询当前这周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now());\n```\n\n**查询上周的数据**\n\n```mysql\nSELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,'%Y-%m-%d')) = YEARWEEK(now())-1;\n```\n\n**查询上个月的数据**\n\n```mysql\nselect name,submittime from enterprise where date_format(submittime,'%Y-%m')=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),'%Y-%m')\n\nselect * from user where DATE_FORMAT(pudate,'%Y%m') = DATE_FORMAT(CURDATE(),'%Y%m') ; \n\nselect * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = WEEKOFYEAR(now()) \n\nselect * from user where MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where YEAR(FROM_UNIXTIME(pudate,'%y-%m-%d')) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,'%y-%m-%d')) = MONTH(now()) \n\nselect * from user where pudate between  上月最后一天  and 下月第一天 \n```\n\n**查询当前月份的数据** \n\n```mysql\nselect name,submittime from enterprise   where date_format(submittime,'%Y-%m')=date_format(now(),'%Y-%m')\n```\n\n**查询距离当前现在6个月的数据**\n\n```mysql\nselect name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();\n```\n\n[参考原文](https://www.cnblogs.com/benefitworld/p/5832897.html)\n\n","slug":"Mysql 查询天、周，月，季度、年的数据","published":1,"date":"2020-03-18T16:39:51.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ak001119iabkxg08up","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mysql-查询天、周，月，季度、年的数据\"><a href=\"#Mysql-查询天、周，月，季度、年的数据\" class=\"headerlink\" title=\"Mysql 查询天、周，月，季度、年的数据\"></a>Mysql 查询天、周，月，季度、年的数据</h1><p><strong>今天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from 表名 where to_days(时间字段名) = to_days(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>昨天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1<br></code></pre></td></tr></table></figure>\n\n<p><strong>近7天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>近30天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>本月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, &#x27;%Y%m&#x27; ) = DATE_FORMAT( CURDATE( ) , &#x27;%Y%m&#x27; )<br></code></pre></td></tr></table></figure>\n\n<p><strong>上一月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &#x27;%Y%m&#x27; ) , date_format( 时间字段名, &#x27;%Y%m&#x27; ) ) =1<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前这周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now())-1;<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),&#x27;%Y-%m&#x27;)<br><br>select * from user where DATE_FORMAT(pudate,&#x27;%Y%m&#x27;) = DATE_FORMAT(CURDATE(),&#x27;%Y%m&#x27;) ; <br><br>select * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = WEEKOFYEAR(now()) <br><br>select * from user where MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where YEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where pudate between  上月最后一天  and 下月第一天 <br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前月份的数据</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise   where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(now(),&#x27;%Y-%m&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询距离当前现在6个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/benefitworld/p/5832897.html\">参考原文</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Mysql-查询天、周，月，季度、年的数据\"><a href=\"#Mysql-查询天、周，月，季度、年的数据\" class=\"headerlink\" title=\"Mysql 查询天、周，月，季度、年的数据\"></a>Mysql 查询天、周，月，季度、年的数据</h1><p><strong>今天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from 表名 where to_days(时间字段名) = to_days(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>昨天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1<br></code></pre></td></tr></table></figure>\n\n<p><strong>近7天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>近30天</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)<br></code></pre></td></tr></table></figure>\n\n<p><strong>本月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, &#x27;%Y%m&#x27; ) = DATE_FORMAT( CURDATE( ) , &#x27;%Y%m&#x27; )<br></code></pre></td></tr></table></figure>\n\n<p><strong>上一月</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &#x27;%Y%m&#x27; ) , date_format( 时间字段名, &#x27;%Y%m&#x27; ) ) =1<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上季度数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询本年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where YEAR(create_date)=YEAR(NOW());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上年数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from `ht_invoice_information` where year(create_date)=year(date_sub(now(),interval 1 year));<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前这周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now());<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上周的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT name,submittime FROM enterprise WHERE YEARWEEK(date_format(submittime,&#x27;%Y-%m-%d&#x27;)) = YEARWEEK(now())-1;<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询上个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(DATE_SUB(curdate(), INTERVAL 1 MONTH),&#x27;%Y-%m&#x27;)<br><br>select * from user where DATE_FORMAT(pudate,&#x27;%Y%m&#x27;) = DATE_FORMAT(CURDATE(),&#x27;%Y%m&#x27;) ; <br><br>select * from user where WEEKOFYEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = WEEKOFYEAR(now()) <br><br>select * from user where MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where YEAR(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = YEAR(now()) and MONTH(FROM_UNIXTIME(pudate,&#x27;%y-%m-%d&#x27;)) = MONTH(now()) <br><br>select * from user where pudate between  上月最后一天  and 下月第一天 <br></code></pre></td></tr></table></figure>\n\n<p><strong>查询当前月份的数据</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise   where date_format(submittime,&#x27;%Y-%m&#x27;)=date_format(now(),&#x27;%Y-%m&#x27;)<br></code></pre></td></tr></table></figure>\n\n<p><strong>查询距离当前现在6个月的数据</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select name,submittime from enterprise where submittime between date_sub(now(),interval 6 month) and now();<br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/benefitworld/p/5832897.html\">参考原文</a></p>\n"},{"_content":"> 近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。\n\n原因分析：MySQL5.7版本默认设置了 mysql sql_mode = only_full_group_by 属性，导致报错。\n\n> 其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode=only_full_group_by的数据库,在使用group by时就会报错。\n>\n> 测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。\n>\n> 一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了\n>\n> only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。\n\n**1、查看sql_mode**\n\n```mysql\nSELECT @@sql_mode;\n```\n\n查询出来的值为：\n\n```mysql\nONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**2、去掉ONLY_FULL_GROUP_BY，重新设置值。**\n\n```mysq\nSET @@global.sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n**3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行**\n\n```mysq\nSET sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n### 以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\n\n**找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:**\n\n```\nsql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:**\n\n```shell\nservice mysqld restart\n```\n\n**刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:**\n\n```mysql\nSTRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**成功**\n\n","source":"_posts/Mysql ONLY_FULL_GROUP_BY.md","raw":"---\ncategories: []\n---\n> 近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。\n\n原因分析：MySQL5.7版本默认设置了 mysql sql_mode = only_full_group_by 属性，导致报错。\n\n> 其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode=only_full_group_by的数据库,在使用group by时就会报错。\n>\n> 测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。\n>\n> 一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了\n>\n> only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。\n\n**1、查看sql_mode**\n\n```mysql\nSELECT @@sql_mode;\n```\n\n查询出来的值为：\n\n```mysql\nONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**2、去掉ONLY_FULL_GROUP_BY，重新设置值。**\n\n```mysq\nSET @@global.sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n**3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行**\n\n```mysq\nSET sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';\n```\n\n### 以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\n\n**找到MySQL的配置文件,在linux系统上/etc/my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:**\n\n```\nsql_mode = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:**\n\n```shell\nservice mysqld restart\n```\n\n**刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:**\n\n```mysql\nSTRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n```\n\n**成功**\n\n","slug":"Mysql ONLY_FULL_GROUP_BY","published":1,"date":"2020-03-23T14:50:03.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8al001219iaeup85voh","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。</p>\n</blockquote>\n<p>原因分析：MySQL5.7版本默认设置了 mysql sql_mode &#x3D; only_full_group_by 属性，导致报错。</p>\n<blockquote>\n<p>其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode&#x3D;only_full_group_by的数据库,在使用group by时就会报错。</p>\n<p>测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。</p>\n<p>一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了</p>\n<p>only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。</p>\n</blockquote>\n<p><strong>1、查看sql_mode</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT @@sql_mode;<br></code></pre></td></tr></table></figure>\n\n<p>查询出来的值为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、去掉ONLY_FULL_GROUP_BY，重新设置值。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET @@global.sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"><a href=\"#以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\" class=\"headerlink\" title=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"></a>以上方法mysql数据库重启后依然无效，下列方式重启后依然生效</h3><p><strong>找到MySQL的配置文件,在linux系统上&#x2F;etc&#x2F;my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">sql_mode</span> = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">service mysqld restart<br></code></pre></td></tr></table></figure>\n\n<p><strong>刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>成功</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>近期在开发过程中，因为项目开发环境连接的mysql数据库是阿里云的数据库，而阿里云的数据库版本是5.6的。而测试环境的mysql是自己安装的5.7。因此在开发过程中有小伙伴不注意写了有关group by的sql语句。在开发环境中运行是正常的，而到了测试环境中就发现了异常。</p>\n</blockquote>\n<p>原因分析：MySQL5.7版本默认设置了 mysql sql_mode &#x3D; only_full_group_by 属性，导致报错。</p>\n<blockquote>\n<p>其中ONLY_FULL_GROUP_BY就是造成这个错误的罪魁祸首了,对于group by聚合操作,如果在select中的列没有在group by中出现,那么这个SQL是不合法的,因为列不在group by从句中,所以设置了sql_mode&#x3D;only_full_group_by的数据库,在使用group by时就会报错。</p>\n<p>测试环境下载安装的是最新版的mysql5.7.x版本，默认是开启了 only_full_group_by 模式的，但开启这个模式后，原先的 group by 语句就报错，然后又把它移除了。</p>\n<p>一旦开启 only_full_group_by ，感觉，group by 将变成和 distinct 一样，只能获取受到其影响的字段信息，无法和其他未受其影响的字段共存，这样，group by 的功能将变得十分狭窄了</p>\n<p>only_full_group_by 模式开启比较好。因为在 mysql 中有一个函数： any_value(field) 允许，非分组字段的出现（和关闭 only_full_group_by 模式有相同效果）。</p>\n</blockquote>\n<p><strong>1、查看sql_mode</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT @@sql_mode;<br></code></pre></td></tr></table></figure>\n\n<p>查询出来的值为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>2、去掉ONLY_FULL_GROUP_BY，重新设置值。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET @@global.sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>3、上面是改变了全局sql_mode，对于新建的数据库有效。对于已存在的数据库，则需要在对应的数据下执行</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysq\">SET sql_mode =&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"><a href=\"#以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\" class=\"headerlink\" title=\"以上方法mysql数据库重启后依然无效，下列方式重启后依然生效\"></a>以上方法mysql数据库重启后依然无效，下列方式重启后依然生效</h3><p><strong>找到MySQL的配置文件,在linux系统上&#x2F;etc&#x2F;my.cnf文件,查询sql_mode字段,我并没有在配置文件中找到这个关键字,所以我手动添加进去:</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">sql_mode</span> = STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>需要注意的一点是一定要添加在[mysqld]配置内,这样添加完后重启mysql才会生效,退出数据库:exit,重启命令:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">service mysqld restart<br></code></pre></td></tr></table></figure>\n\n<p><strong>刷新页面报错信息消失成功解决,再次连接上数据库查看sql_mode配置select @@sql_mode:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br></code></pre></td></tr></table></figure>\n\n<p><strong>成功</strong></p>\n"},{"_content":"","source":"_posts/NAS搭建黑群晖5.2稳定版本.md","raw":"---\ncategories: []\n---\n","slug":"NAS搭建黑群晖5.2稳定版本","published":1,"date":"2020-07-30T16:38:50.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8an001319ia2tq872wg","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"# MySQL数据和索引占用空间查询\n\n## 查询所有数据库占用磁盘空间大小的SQL语句\n\n```mysql\nSELECT\n\ttable_schema, -- 数据库名称\n\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC;\n```\n\n## 查询单个库中所有表磁盘占用大小的SQL语句\n\n```mysql\nSELECT\n\ttable_name, -- 表名称\n\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nWHERE\n\ttable_schema = '数据库名称' \nORDER BY\n\tdata_length DESC;\n```\n\n","source":"_posts/MySQL数据和索引占用空间查询.md","raw":"---\ncategories: []\n---\n# MySQL数据和索引占用空间查询\n\n## 查询所有数据库占用磁盘空间大小的SQL语句\n\n```mysql\nSELECT\n\ttable_schema, -- 数据库名称\n\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC;\n```\n\n## 查询单个库中所有表磁盘占用大小的SQL语句\n\n```mysql\nSELECT\n\ttable_name, -- 表名称\n\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), 'MB' ) AS data_size, -- 数据占用空间\n\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), 'MB' ) AS index_size -- 索引占用空间\nFROM\n\tinformation_schema.TABLES \nWHERE\n\ttable_schema = '数据库名称' \nORDER BY\n\tdata_length DESC;\n```\n\n","slug":"MySQL数据和索引占用空间查询","published":1,"date":"2020-07-30T16:36:58.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ao001419iaeqsy9pah","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MySQL数据和索引占用空间查询\"><a href=\"#MySQL数据和索引占用空间查询\" class=\"headerlink\" title=\"MySQL数据和索引占用空间查询\"></a>MySQL数据和索引占用空间查询</h1><h2 id=\"查询所有数据库占用磁盘空间大小的SQL语句\"><a href=\"#查询所有数据库占用磁盘空间大小的SQL语句\" class=\"headerlink\" title=\"查询所有数据库占用磁盘空间大小的SQL语句\"></a>查询所有数据库占用磁盘空间大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_schema, -- 数据库名称<br>\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>GROUP BY<br>\ttable_schema <br>ORDER BY<br>\tsum( data_length ) DESC;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查询单个库中所有表磁盘占用大小的SQL语句\"><a href=\"#查询单个库中所有表磁盘占用大小的SQL语句\" class=\"headerlink\" title=\"查询单个库中所有表磁盘占用大小的SQL语句\"></a>查询单个库中所有表磁盘占用大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_name, -- 表名称<br>\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>WHERE<br>\ttable_schema = &#x27;数据库名称&#x27; <br>ORDER BY<br>\tdata_length DESC;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL数据和索引占用空间查询\"><a href=\"#MySQL数据和索引占用空间查询\" class=\"headerlink\" title=\"MySQL数据和索引占用空间查询\"></a>MySQL数据和索引占用空间查询</h1><h2 id=\"查询所有数据库占用磁盘空间大小的SQL语句\"><a href=\"#查询所有数据库占用磁盘空间大小的SQL语句\" class=\"headerlink\" title=\"查询所有数据库占用磁盘空间大小的SQL语句\"></a>查询所有数据库占用磁盘空间大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_schema, -- 数据库名称<br>\tconcat( TRUNCATE ( sum( data_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( sum( index_length ) / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>GROUP BY<br>\ttable_schema <br>ORDER BY<br>\tsum( data_length ) DESC;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查询单个库中所有表磁盘占用大小的SQL语句\"><a href=\"#查询单个库中所有表磁盘占用大小的SQL语句\" class=\"headerlink\" title=\"查询单个库中所有表磁盘占用大小的SQL语句\"></a>查询单个库中所有表磁盘占用大小的SQL语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT<br>\ttable_name, -- 表名称<br>\tconcat( TRUNCATE ( data_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS data_size, -- 数据占用空间<br>\tconcat( TRUNCATE ( index_length / 1024 / 1024, 2 ), &#x27;MB&#x27; ) AS index_size -- 索引占用空间<br>FROM<br>\tinformation_schema.TABLES <br>WHERE<br>\ttable_schema = &#x27;数据库名称&#x27; <br>ORDER BY<br>\tdata_length DESC;<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# MySQL 学习笔记\n\n### 数据库操作\n\n```mysql\n-- 查看当前数据库\n    SELECT DATABASE();\n-- 显示当前时间、用户名、数据库版本\n    SELECT now(), user(), version();\n-- 创建库\n    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项\n    数据库选项：\n        CHARACTER SET charset_name\n        COLLATE collation_name\n-- 查看已有库\n    SHOW DATABASES[ LIKE 'PATTERN']\n-- 查看当前库信息\n    SHOW CREATE DATABASE 数据库名\n-- 修改库的选项信息\n    ALTER DATABASE 库名 选项信息\n-- 删除库\n    DROP DATABASE[ IF EXISTS] 数据库名\n        同时删除该数据库相关的目录及其目录内容\n```\n\n### 表的操作\n\n```mysql\n-- 创建表\n    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]\n        每个字段必须有数据类型\n        最后一个字段后不能有逗号\n        TEMPORARY 临时表，会话结束时表自动消失\n        对于字段的定义：\n            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']\n-- 表选项\n    -- 字符集\n        CHARSET = charset_name\n        如果表没有设定，则使用数据库字符集\n    -- 存储引擎\n        ENGINE = engine_name\n        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同\n        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive\n        不同的引擎在保存表的结构和数据时采用不同的方式\n        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引\n        InnoDB表文件含义：.frm表定义，表空间数据和日志文件\n        SHOW ENGINES -- 显示存储引擎的状态信息\n        SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息\n    -- 自增起始数\n    \tAUTO_INCREMENT = 行数\n    -- 数据文件目录\n        DATA DIRECTORY = '目录'\n    -- 索引文件目录\n        INDEX DIRECTORY = '目录'\n    -- 表注释\n        COMMENT = 'string'\n    -- 分区选项\n        PARTITION BY ... (详细见手册)\n-- 查看所有表\n    SHOW TABLES[ LIKE 'pattern']\n    SHOW TABLES FROM 表名\n-- 查看表机构\n    SHOW CREATE TABLE 表名 （信息更详细）\n    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']\n    SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']\n-- 修改表\n    -- 修改表本身的选项\n        ALTER TABLE 表名 表的选项\n        eg: ALTER TABLE 表名 ENGINE=MYISAM;\n    -- 对表进行重命名\n        RENAME TABLE 原表名 TO 新表名\n        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）\n        -- RENAME可以交换两个表名\n    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）\n        ALTER TABLE 表名 操作名\n        -- 操作名\n            ADD[ COLUMN] 字段定义       -- 增加字段\n                AFTER 字段名          -- 表示增加在该字段名后面\n                FIRST               -- 表示增加在第一个\n            ADD PRIMARY KEY(字段名)   -- 创建主键\n            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引\n            ADD INDEX [索引名] (字段名) -- 创建普通索引\n            DROP[ COLUMN] 字段名      -- 删除字段\n            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)\n            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改\n            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)\n            DROP INDEX 索引名 -- 删除索引\n            DROP FOREIGN KEY 外键    -- 删除外键\n\n-- 删除表\n    DROP TABLE[ IF EXISTS] 表名 ...\n-- 清空表数据\n    TRUNCATE [TABLE] 表名\n-- 复制表结构\n    CREATE TABLE 表名 LIKE 要复制的表名\n-- 复制表结构和数据\n    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名\n-- 检查表是否有错误\n    CHECK TABLE tbl_name [, tbl_name] ... [option] ...\n-- 优化表\n    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n-- 修复表\n    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]\n-- 分析表\n    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n\n### 数据操作\n\n```mysql\n-- 增\n    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]\n        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。\n        -- 可同时插入多条数据记录！\n        REPLACE 与 INSERT 完全一样，可互换。\n    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]\n-- 查\n    SELECT 字段列表 FROM 表名[ 其他子句]\n        -- 可来自多个表的多个字段\n        -- 其他子句可以不使用\n        -- 字段列表可以用*代替，表示所有字段\n-- 删\n    DELETE FROM 表名[ 删除条件子句]\n        没有条件子句，则会删除全部\n-- 改\n    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]\n```\n\n### 字符集编码\n\n```mysql\n-- MySQL、数据库、表、字段均可设置编码\n-- 数据编码与客户端编码不需一致\nSHOW VARIABLES LIKE 'character_set_%'   -- 查看所有字符集编码项\n    character_set_client        客户端向服务器发送数据时使用的编码\n    character_set_results       服务器端将结果返回给客户端所使用的编码\n    character_set_connection    连接层编码\nSET 变量名 = 变量值\n    SET character_set_client = gbk;\n    SET character_set_results = gbk;\n    SET character_set_connection = gbk;\nSET NAMES GBK;  -- 相当于完成以上三个设置\n-- 校对集\n    校对集用以排序\n    SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern']   查看所有字符集\n    SHOW COLLATION [LIKE 'pattern']     查看所有校对集\n    CHARSET 字符集编码     设置字符集编码\n    COLLATE 校对集编码     设置校对集编码\n```\n\n### 数据类型（列类型）\n\n**1. 数值类型**\n\n```mysql\n-- a. 整型 ----------\n    类型         字节     范围（有符号位）\n    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255\n    smallint    2字节    -32768 ~ 32767\n    mediumint   3字节    -8388608 ~ 8388607\n    int         4字节\n    bigint      8字节\n\n    int(M)  M表示总位数\n    - 默认存在符号位，unsigned 属性修改\n    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改\n        例：int(5)   插入一个数'123'，补填后为'00123'\n    - 在满足要求的情况下，越小越好。\n    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。\n\n-- b. 浮点型 ----------\n    类型             字节     范围\n    float(单精度)     4字节\n    double(双精度)    8字节\n    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。\n        不同于整型，前后均会补填0.\n    定义浮点型时，需指定总位数和小数位数。\n        float(M, D)     double(M, D)\n        M表示总位数，D表示小数位数。\n        M和D的大小会决定浮点数的范围。不同于整型的固定范围。\n        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。\n        支持科学计数法表示。\n        浮点数表示近似值。\n\n-- c. 定点数 ----------\n    decimal -- 可变长度\n    decimal(M, D)   M也表示总位数，D表示小数位数。\n    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。\n    将浮点数转换为字符串来保存，每9位数字保存为4个字节。\n```\n\n**2. 字符串类型**\n\n```mysql\n-- a. char, varchar ----------\n    char    定长字符串，速度快，但浪费空间\n    varchar 变长字符串，速度慢，但节省空间\n    M表示能存储的最大长度，此长度是字符数，非字节数。\n    不同的编码，所占用的空间不同。\n    char,最多255个字符，与编码无关。\n    varchar,最多65535字符，与编码有关。\n    一条有效记录最大不能超过65535个字节。\n        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符\n    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。\n    varchar 的最大有效长度由最大行大小和使用的字符集确定。\n    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。\n    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3\n\n-- b. blob, text ----------\n    blob 二进制字符串（字节字符串）\n        tinyblob, blob, mediumblob, longblob\n    text 非二进制字符串（字符字符串）\n        tinytext, text, mediumtext, longtext\n    text 在定义时，不需要定义长度，也不会计算总长度。\n    text 类型在定义时，不可给default值\n\n-- c. binary, varbinary ----------\n    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。\n    char, varchar, text 对应 binary, varbinary, blob.\n```\n\n**3. 日期时间类型**\n\n```mysql\n一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。\ndatetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59\ndate        3字节    日期         1000-01-01 到 9999-12-31\ntimestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07\ntime        3字节    时间         -838:59:59 到 838:59:59\nyear        1字节    年份         1901 - 2155\n\ndatetime    YYYY-MM-DD hh:mm:ss\ntimestamp   YY-MM-DD hh:mm:ss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\ndate        YYYY-MM-DD\n            YY-MM-DD\n            YYYYMMDD\n            YYMMDD\n            YYYYMMDD\n            YYMMDD\ntime        hh:mm:ss\n            hhmmss\n            hhmmss\nyear        YYYY\n            YY\n            YYYY\n            YY\n```\n\n**4. 枚举和集合**\n\n```mysql\n-- 枚举(enum) ----------\nenum(val1, val2, val3...)\n    在已知的值中进行单选。最大数量为65535.\n    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。\n    表现为字符串类型，存储却是整型。\n    NULL值的索引是NULL。\n    空字符串错误值的索引值是0。\n\n-- 集合（set） ----------\nset(val1, val2, val3...)\n    create table tab ( gender set('男', '女', '无') );\n    insert into tab values ('男, 女');\n    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。\n    当创建表时，SET成员值的尾部空格将自动被删除。\n\n/* 选择类型 */\n-- PHP角度\n1. 功能满足\n2. 存储空间尽量小，处理效率更高\n3. 考虑兼容问题\n```\n\n**IP存储**\n\n```mysql\n1. 只需存储，可用字符串\n2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned\n    1) PHP函数转换\n        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。\n        利用sprintf函数格式化字符串\n        sprintf(\"%u\", ip2long('192.168.3.134'));\n        然后用long2ip将整型转回IP字符串\n    2) MySQL函数转换(无符号整型，UNSIGNED)\n        INET_ATON('127.0.0.1') 将IP转为整型\n        INET_NTOA(2130706433) 将整型转为IP\n```\n\n### 列属性（列约束）\n\n```mysql\n1. PRIMARY 主键\n    - 能唯一标识记录的字段，可以作为主键。\n    - 一个表只能有一个主键。\n    - 主键具有唯一性。\n    - 声明字段时，用 primary key 标识。\n        也可以在字段列表之后声明\n            例：create table tab ( id int, stu varchar(10), primary key (id));\n    - 主键字段的值不能为null。\n    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。\n        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));\n\n2. UNIQUE 唯一索引（唯一约束）\n    使得某字段的值也不能重复。\n\n3. NULL 约束\n    null不是数据类型，是列的一个属性。\n    表示当前列是否可以为null，表示什么都没有。\n    null, 允许为空。默认。\n    not null, 不允许为空。\n    insert into tab values (null, 'val');\n        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n\n4. DEFAULT 默认值属性\n    当前字段的默认值。\n    insert into tab values (default, 'val');    -- 此时表示强制使用默认值。\n    create table tab ( add_time timestamp default current_timestamp );\n        -- 表示将当前时间的时间戳设为默认值。\n        current_date, current_time\n\n5. AUTO_INCREMENT 自动增长约束\n    自动增长必须为索引（主键或unique）\n    只能存在一个字段为自动增长。\n    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;\n\n6. COMMENT 注释\n    例：create table tab ( id int ) comment '注释内容';\n\n7. FOREIGN KEY 外键约束\n    用于限制主表与从表数据完整性。\n    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);\n        -- 将表t1的t1_id外键关联到表t2的id字段。\n        -- 每个外键都有一个名字，可以通过 constraint 指定\n\n    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n\n    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。\n\n    MySQL中，可以对InnoDB引擎使用外键约束：\n    语法：\n    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]\n    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。\n\n    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。\n    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：\n    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。\n    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。\n    3. restrict，拒绝父表删除和更新。\n\n    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。\n```\n\n### 建表规范\n\n```mysql\n    -- Normal Format, NF\n        - 每个表保存一个实体信息\n        - 每个具有一个ID字段作为主键\n        - ID主键 + 原子表\n    -- 1NF, 第一范式\n        字段不能再分，就满足第一范式。\n    -- 2NF, 第二范式\n        满足第一范式的前提下，不能出现部分依赖。\n        消除符合主键就可以避免部分依赖。增加单列关键字。\n    -- 3NF, 第三范式\n        满足第二范式的前提下，不能出现传递依赖。\n        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。\n        将一个实体信息的数据放在一个表内实现。\n```\n\n### SELECT\n\n```mysql\nSELECT [ALL|DISTINCT] select_expr FROM -> WHERE -> GROUP BY [合计函数] -> HAVING -> ORDER BY -> LIMIT\n\na. select_expr\n    -- 可以用 * 表示所有字段。\n        select * from tb;\n    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）\n        select stu, 29+25, now() from tb;\n    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。\n        - 使用 as 关键字，也可省略 as.\n        select stu+10 as add10 from tb;\n\nb. FROM 子句\n    用于标识查询来源。\n    -- 可以为表起别名。使用as关键字。\n        SELECT * FROM tb1 AS tt, tb2 AS bb;\n    -- from子句后，可以同时出现多个表。\n        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。\n        SELECT * FROM tb1, tb2;\n    -- 向优化符提示如何选择索引\n        USE INDEX、IGNORE INDEX、FORCE INDEX\n        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;\n        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;\n\nc. WHERE 子句\n    -- 从from获得的数据源中进行筛选。\n    -- 整型1表示真，0表示假。\n    -- 表达式由运算符和运算数组成。\n        -- 运算数：变量（字段）、值、函数返回值\n        -- 运算符：\n            =, <=>, <>, !=, <=, <, >=, >, !, &&, ||,\n            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor\n            is/is not 加上ture/false/unknown，检验某个值的真假\n            <=>与<>功能相同，<=>可用于null比较\n\nd. GROUP BY 子句, 分组子句\n    GROUP BY 字段/别名 [排序方式]\n    分组后会进行排序。升序：ASC，降序：DESC\n\n    以下[合计函数]需配合 GROUP BY 使用：\n    count 返回不同的非NULL值数目  count(*)、count(字段)\n    sum 求和\n    max 求最大值\n    min 求最小值\n    avg 求平均值\n    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。\n\ne. HAVING 子句，条件子句\n    与 where 功能、用法相同，执行时机不同。\n    where 在开始时执行检测数据，对原数据进行过滤。\n    having 对筛选出的结果再次进行过滤。\n    having 字段必须是查询出来的，where 字段必须是数据表存在的。\n    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。\n    where 不可以使用合计函数。一般需用合计函数才会用 having\n    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。\n\nf. ORDER BY 子句，排序子句\n    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...\n    升序：ASC，降序：DESC\n    支持多个字段的排序。\n\ng. LIMIT 子句，限制结果数量子句\n    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。\n    limit 起始位置, 获取条数\n    省略第一个参数，表示从索引0开始。limit 获取条数\n\nh. DISTINCT, ALL 选项\n    distinct 去除重复记录\n    默认为 all, 全部记录\n```\n\n### UNION\n\n> 将多个select查询的结果组合成一个结果集合。\n\n```mysql\nSELECT ... UNION [ALL|DISTINCT] SELECT ...\n默认 DISTINCT 方式，即所有返回的行都是唯一的\n建议，对每个SELECT查询加上小括号包裹。\nORDER BY 排序时，需加上 LIMIT 进行结合。\n需要各select查询的字段数量一样。\n每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。\n```\n\n### 子查询\n\n> 子查询需用括号包裹。\n\n```mysql\n-- from型\n    from后要求是一个表，必须给子查询结果取个别名。\n    - 简化每个查询内的条件。\n    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。\n    - 子查询返回一个表，表型子查询。\n    select * from (select * from tb where id>0) as subfrom where id>1;\n-- where型\n    - 子查询返回一个值，标量子查询。\n    - 不需要给子查询取别名。\n    - where子查询内的表，不能直接用以更新。\n    select * from tb where money = (select max(money) from tb);\n    -- 列子查询\n        如果子查询结果返回的是一列。\n        使用 in 或 not in 完成查询\n        exists 和 not exists 条件\n            如果子查询返回数据，则返回1或0。常用于判断条件。\n            select column1 from t1 where exists (select * from t2);\n    -- 行子查询\n        查询条件是一个行。\n        select * from t1 where (id, gender) in (select id, gender from t2);\n        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)\n        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。\n\n    -- 特殊运算符\n    != all()    相当于 not in\n    = some()    相当于 in。any 是 some 的别名\n    != some()   不等同于 not in，不等于其中某一个。\n    all, some 可以配合其他运算符一起使用。\n```\n\n### 连接查询(join)```mysql\n\n> 将多个表的字段进行连接，可以指定连接条件。\n\n```mysql\n-- 内连接(inner join)\n    - 默认就是内连接，可省略inner。\n    - 只有数据存在时才能发送连接。即连接结果不能出现空行。\n    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）\n    也可用where表示连接条件。\n    还有 using, 但需字段名相同。 using(字段名)\n\n-- 交叉连接 cross join\n   即，没有条件的内连接。\n   select * from tb1 cross join tb2;\n-- 外连接(outer join)\n    - 如果数据不存在，也会出现在连接结果中。\n    -- 左外连接 left join\n        如果数据不存在，左表记录会出现，而右表为null填充\n    -- 右外连接 right join\n        如果数据不存在，右表记录会出现，而左表为null填充\n-- 自然连接(natural join)\n    自动判断连接条件完成连接。\n    相当于省略了using，会自动查找相同字段名。\n    natural join\n    natural left join\n    natural right join\n\nselect info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;\n```\n\n### 导入导出\n\n```mysql\nselect * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据\nload data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据\n    生成的数据默认的分隔符是制表符\n    local未指定，则数据文件必须在服务器上\n    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理\n-- 控制格式\nfields  控制字段格式\n默认：fields terminated by '\\t' enclosed by '' escaped by '\\\\'\n    terminated by 'string'  -- 终止\n    enclosed by 'char'      -- 包裹\n    escaped by 'char'       -- 转义\n    -- 示例：\n        SELECT a,b,a+b INTO OUTFILE '/tmp/result.text'\n        FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n        LINES TERMINATED BY '\\n'\n        FROM test_table;\nlines   控制行格式\n默认：lines terminated by '\\n'\n    terminated by 'string'  -- 终止\n```\n\n### INSERT\n\n```mysql\nselect语句获得的数据可以用insert插入。\n\n可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。\n    或者使用set语法。\n    INSERT INTO tbl_name SET field=value,...；\n\n可以一次性使用多个值，采用(), (), ();的形式。\n    INSERT INTO tbl_name VALUES (), (), ();\n\n可以在列值指定时，使用表达式。\n    INSERT INTO tbl_name VALUES (field_value, 10+10, now());\n可以使用一个特殊值 DEFAULT，表示该列使用默认值。\n    INSERT INTO tbl_name VALUES (field_value, DEFAULT);\n\n可以通过一个查询的结果，作为需要插入的值。\n    INSERT INTO tbl_name SELECT ...;\n\n可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。\n    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;\n```\n\n### DELETE\n\n```mysql\nDELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]\n\n按照条件删除。where\n\n指定删除的最多记录数。limit\n\n可以通过排序条件删除。order by + limit\n\n支持多表删除，使用类似连接语法。\ndelete from 需要删除数据多表1，表2 using 表连接操作 条件。\n```\n\n### TRUNCATE\n\n```mysql\nTRUNCATE [TABLE] tbl_name\n清空数据\n删除重建表\n\n区别：\n1，truncate 是删除表再创建，delete 是逐条删除\n2，truncate 重置auto_increment的值。而delete不会\n3，truncate 不知道删除了几条，而delete知道。\n4，当被用于带分区的表时，truncate 会保留分区\n```\n\n### 备份与还原\n\n> 备份，将数据的结构与表内数据保存起来。\n> 利用 mysqldump 指令完成。\n\n```mysql\n-- 导出\nmysqldump [options] db_name [tables]\nmysqldump [options] ---database DB1 [DB2 DB3...]\nmysqldump [options] --all--database\n\n\n1. 导出一张表\n　　mysqldump -u用户名 -p密码 库名 表名 > 文件名(D:/a.sql)\n2. 导出多张表\n　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 > 文件名(D:/a.sql)\n3. 导出所有表\n　　mysqldump -u用户名 -p密码 库名 > 文件名(D:/a.sql)\n4. 导出一个库\n　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 > 文件名(D:/a.sql)\n\n可以-w携带WHERE条件\n\n-- 导入\n1. 在登录mysql的情况下：\n　　source  备份文件\n2. 在不登录的情况下\n　　mysql -u用户名 -p密码 库名 < 备份文件\n```\n\n### 视图\n\n> 什么是视图：\n>     视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。\n>     视图具有表结构文件，但不存在数据文件。\n>     对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。\n>     视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。\n\n```mysql\n-- 创建视图\nCREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] VIEW view_name [(column_list)] AS select_statement\n    - 视图名必须唯一，同时不能与表重名。\n    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。\n    - 可以指定视图执行的算法，通过ALGORITHM指定。\n    - column_list如果存在，则数目必须等于SELECT语句检索的列数\n\n-- 查看结构\n    SHOW CREATE VIEW view_name\n\n-- 删除视图\n    - 删除视图后，数据依然存在。\n    - 可同时删除多个视图。\n    DROP VIEW [IF EXISTS] view_name ...\n\n-- 修改视图结构\n    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。\n    ALTER VIEW view_name [(column_list)] AS select_statement\n\n-- 视图作用\n    1. 简化业务逻辑\n    2. 对客户端隐藏真实的表结构\n\n-- 视图算法(ALGORITHM)\n    MERGE       合并\n        将视图的查询语句，与外部查询需要先合并再执行！\n    TEMPTABLE   临时表\n        将视图执行完毕后，形成临时表，再做外层查询！\n    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。\n```\n\n### 事务(transaction)\n\n> 事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。\n\n```mysql\n- 支持连续SQL的集体成功或集体撤销。\n- 事务是数据库在数据晚自习方面的一个功能。\n- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。\n- InnoDB被称为事务安全型引擎。\n\n-- 事务开启\n    START TRANSACTION; 或者 BEGIN;\n    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。\n-- 事务提交\n    COMMIT;\n-- 事务回滚\n    ROLLBACK;\n    如果部分操作发生问题，映射到事务开启前。\n\n-- 事务的特性\n    1. 原子性（Atomicity）\n        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。\n    2. 一致性（Consistency）\n        事务前后数据的完整性必须保持一致。\n        - 事务开始和结束时，外部数据一致\n        - 在整个事务过程中，操作是连续的\n    3. 隔离性（Isolation）\n        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。\n    4. 持久性（Durability）\n        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。\n\n-- 事务的实现\n    1. 要求是事务支持的表类型\n    2. 执行一组相关的操作前开启事务\n    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。\n\n-- 事务的原理\n    利用InnoDB的自动提交(autocommit)特性完成。\n    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。\n    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。\n\n-- 注意\n    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。\n    2. 事务不能被嵌套\n\n-- 保存点\n    SAVEPOINT 保存点名称 -- 设置一个事务保存点\n    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点\n    RELEASE SAVEPOINT 保存点名称 -- 删除保存点\n\n-- InnoDB自动提交特性设置\n    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。\n    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。\n    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，\n        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)\n        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)\n```\n\n### 锁表\n\n> 表锁定只用于防止其它客户端进行不正当地读取和写入\n> MyISAM 支持表锁，InnoDB 支持行锁\n\n```mysql\n-- 锁定\n    LOCK TABLES tbl_name [AS alias]\n-- 解锁\n    UNLOCK TABLES\n```\n\n### 触发器\n\n> 触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象\n> 监听：记录的增加、修改、删除。\n\n```mysql\n-- 创建触发器\nCREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt\n    参数：\n    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。\n    trigger_event指明了激活触发程序的语句的类型\n        INSERT：将新行插入表时激活触发程序\n        UPDATE：更改某一行时激活触发程序\n        DELETE：从表中删除某一行时激活触发程序\n    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。\n    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构\n\n-- 删除\nDROP TRIGGER [schema_name.]trigger_name\n\n可以使用old和new代替旧的和新的数据\n    更新操作，更新前是old，更新后是new.\n    删除操作，只有old.\n    增加操作，只有new.\n\n-- 注意\n    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。\n\n\n-- 字符连接函数\nconcat(str1,str2,...])\nconcat_ws(separator,str1,str2,...)\n\n-- 分支语句\nif 条件 then\n    执行语句\nelseif 条件 then\n    执行语句\nelse\n    执行语句\nend if;\n\n-- 修改最外层语句结束符\ndelimiter 自定义结束符号\n    SQL语句\n自定义结束符号\n\ndelimiter ;     -- 修改回原来的分号\n\n-- 语句块包裹\nbegin\n    语句块\nend\n\n-- 特殊的执行\n1. 只要添加记录，就会触发程序。\n2. Insert into on duplicate key update 语法会触发：\n    如果没有重复记录，会触发 before insert, after insert;\n    如果有重复记录并更新，会触发 before insert, before update, after update;\n    如果有重复记录但是没有发生更新，则触发 before insert, before update\n3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert\n```\n\n### SQL编程\n\n```mysql\n--// 局部变量 ----------\n-- 变量声明\n    declare var_name[,...] type [default value]\n    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。\n\n-- 赋值\n    使用 set 和 select into 语句为变量赋值。\n\n    - 注意：在函数内是可以使用全局变量（用户自定义的变量）\n\n\n--// 全局变量 ----------\n-- 定义、赋值\nset 语句可以定义并为变量赋值。\nset @var = value;\n也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。\n还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。\nselect @var:=20;\nselect @v1:=id, @v2=name from t1 limit 1;\nselect * from tbl_name where @var:=30;\n\nselect into 可以将表中查询获得的数据赋给变量。\n    -| select max(height) into @max_height from tb;\n\n-- 自定义变量名\n为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。\n@var=10;\n\n    - 变量被定义后，在整个会话周期都有效（登录到退出）\n\n\n--// 控制结构 ----------\n-- if语句\nif search_condition then\n    statement_list   \n[elseif search_condition then\n    statement_list]\n...\n[else\n    statement_list]\nend if;\n\n-- case语句\nCASE value WHEN [compare-value] THEN result\n[WHEN [compare-value] THEN result ...]\n[ELSE result]\nEND\n\n\n-- while循环\n[begin_label:] while search_condition do\n    statement_list\nend while [end_label];\n\n- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。\n\n    -- 退出循环\n        退出整个循环 leave\n        退出当前循环 iterate\n        通过退出的标签决定退出哪个循环\n\n\n--// 内置函数 ----------\n-- 数值函数\nabs(x)          -- 绝对值 abs(-10.9) = 10\nformat(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46\nceil(x)         -- 向上取整 ceil(10.1) = 11\nfloor(x)        -- 向下取整 floor (10.1) = 10\nround(x)        -- 四舍五入去整\nmod(m, n)       -- m%n m mod n 求余 10%3=1\npi()            -- 获得圆周率\npow(m, n)       -- m^n\nsqrt(x)         -- 算术平方根\nrand()          -- 随机数\ntruncate(x, d)  -- 截取d位小数\n\n-- 时间日期函数\nnow(), current_timestamp();     -- 当前日期时间\ncurrent_date();                 -- 当前日期\ncurrent_time();                 -- 当前时间\ndate('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分\ntime('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分\ndate_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j'); -- 格式化时间\nunix_timestamp();               -- 获得unix时间戳\nfrom_unixtime();                -- 从时间戳获得时间\n\n-- 字符串函数\nlength(string)          -- string长度，字节\nchar_length(string)     -- string的字符个数\nsubstring(str, position [,length])      -- 从str的position开始,取length个字符\nreplace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str\ninstr(string ,substring)    -- 返回substring首次在string中出现的位置\nconcat(string [,...])   -- 连接字串\ncharset(str)            -- 返回字串字符集\nlcase(string)           -- 转换成小写\nleft(string, length)    -- 从string2中的左边起取length个字符\nload_file(file_name)    -- 从文件读取内容\nlocate(substring, string [,start_position]) -- 同instr,但可指定开始位置\nlpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length\nltrim(string)           -- 去除前端空格\nrepeat(string, count)   -- 重复count次\nrpad(string, length, pad)   --在str后用pad补充,直到长度为length\nrtrim(string)           -- 去除后端空格\nstrcmp(string1 ,string2)    -- 逐字符比较两字串大小\n\n-- 流程函数\ncase when [condition] then result [when [condition] then result ...] [else result] end   多分支\nif(expr1,expr2,expr3)  双分支。\n\n-- 聚合函数\ncount()\nsum();\nmax();\nmin();\navg();\ngroup_concat()\n\n-- 其他常用函数\nmd5();\ndefault();\n\n--// 存储函数，自定义函数 ----------\n-- 新建\n    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型\n        函数体\n\n    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。\n    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。\n    - 参数部分，由\"参数名\"和\"参数类型\"组成。多个参数用逗号隔开。\n    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。\n    - 多条语句应该使用 begin...end 语句块包含。\n    - 一定要有 return 返回值语句。\n\n-- 删除\n    DROP FUNCTION [IF EXISTS] function_name;\n\n-- 查看\n    SHOW FUNCTION STATUS LIKE 'partten'\n    SHOW CREATE FUNCTION function_name;\n\n-- 修改\n    ALTER FUNCTION function_name 函数选项\n\n\n--// 存储过程，自定义功能 ----------\n-- 定义\n存储存储过程 是一段代码（过程），存储在数据库中的sql组成。\n一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。\n而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。\n\n-- 创建\nCREATE PROCEDURE sp_name (参数列表)\n    过程体\n\n参数列表：不同于函数的参数列表，需要指明参数类型\nIN，表示输入型\nOUT，表示输出型\nINOUT，表示混合型\n\n注意，没有返回值。\n```\n\n### 存储过程\n\n> 存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。\n> 调用：CALL 过程名\n\n```mysql\n-- 注意\n- 没有返回值。\n- 只能单独调用，不可夹杂在其他语句中\n\n-- 参数\nIN|OUT|INOUT 参数名 数据类型\nIN      输入：在调用过程中，将数据输入到过程体内部的参数\nOUT     输出：在调用过程中，将过程体处理完的结果返回到客户端\nINOUT   输入输出：既可输入，也可输出\n\n-- 语法\nCREATE PROCEDURE 过程名 (参数列表)\nBEGIN\n    过程体\nEND\n```\n\n### 用户和权限管理\n\n```mysql\n-- root密码重置\n1. 停止MySQL服务\n2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &\n    [Windows] mysqld --skip-grant-tables\n3. use mysql;\n4. UPDATE `user` SET PASSWORD=PASSWORD(\"密码\") WHERE `user` = \"root\";\n5. FLUSH PRIVILEGES;\n\n用户信息表：mysql.user\n-- 刷新权限\nFLUSH PRIVILEGES;\n-- 增加用户\nCREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)\n    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。\n    - 只能创建用户，不能赋予权限。\n    - 用户名，注意引号：如 'user_name'@'192.168.1.1'\n    - 密码也需引号，纯数字密码也要加引号\n    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD\n-- 重命名用户\nRENAME USER old_user TO new_user\n-- 设置密码\nSET PASSWORD = PASSWORD('密码')  -- 为当前用户设置密码\nSET PASSWORD FOR 用户名 = PASSWORD('密码') -- 为指定用户设置密码\n-- 删除用户\nDROP USER 用户名\n-- 分配权限/添加用户\nGRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password']\n    - all privileges 表示所有权限\n    - *.* 表示所有库的所有表\n    - 库名.表名 表示某库下面的某表\n    GRANT ALL PRIVILEGES ON `pms`.* TO 'pms'@'%' IDENTIFIED BY 'pms0817';\n-- 查看权限\nSHOW GRANTS FOR 用户名\n    -- 查看当前用户权限\n    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();\n-- 撤消权限\nREVOKE 权限列表 ON 表名 FROM 用户名\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限\n-- 权限层级\n-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。\n全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user\n    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。\n数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host\n    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。\n表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv\n    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。\n列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv\n    当使用REVOKE时，您必须指定与被授权列相同的列。\n-- 权限列表\nALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限\nALTER   -- 允许使用ALTER TABLE\nALTER ROUTINE   -- 更改或取消已存储的子程序\nCREATE  -- 允许使用CREATE TABLE\nCREATE ROUTINE  -- 创建已存储的子程序\nCREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE\nCREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。\nCREATE VIEW     -- 允许使用CREATE VIEW\nDELETE  -- 允许使用DELETE\nDROP    -- 允许使用DROP TABLE\nEXECUTE     -- 允许用户运行已存储的子程序\nFILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE\nINDEX   -- 允许使用CREATE INDEX和DROP INDEX\nINSERT  -- 允许使用INSERT\nLOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES\nPROCESS     -- 允许使用SHOW FULL PROCESSLIST\nREFERENCES  -- 未被实施\nRELOAD  -- 允许使用FLUSH\nREPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址\nREPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）\nSELECT  -- 允许使用SELECT\nSHOW DATABASES  -- 显示所有数据库\nSHOW VIEW   -- 允许使用SHOW CREATE VIEW\nSHUTDOWN    -- 允许使用mysqladmin shutdown\nSUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。\nUPDATE  -- 允许使用UPDATE\nUSAGE   -- “无权限”的同义词\nGRANT OPTION    -- 允许授予权限\n```\n\n### 表维护\n\n```mysql\n-- 分析和存储表的关键字分布\nANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...\n-- 检查一个或多个表是否有错误\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\noption = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}\n-- 整理数据文件的碎片\nOPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n### 杂项\n\n```mysql\n1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！\n2. 每个库目录存在一个保存当前数据库的选项文件db.opt。\n3. 注释：\n    单行注释 # 注释内容\n    多行注释 /* 注释内容 */\n    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)\n4. 模式通配符：\n    _   任意单个字符\n    %   任意多个字符，甚至包括零字符\n    单引号需要进行转义 \\'\n5. CMD命令行内的语句结束符可以为 \";\", \"\\G\", \"\\g\"，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。\n6. SQL对大小写不敏感\n7. 清除已有语句：\\c\n```\n\n原文连接：https://shockerli.net/post/1000-line-mysql-note/","source":"_posts/MySQL 学习笔记.md","raw":"---\ncategories: []\n---\n# MySQL 学习笔记\n\n### 数据库操作\n\n```mysql\n-- 查看当前数据库\n    SELECT DATABASE();\n-- 显示当前时间、用户名、数据库版本\n    SELECT now(), user(), version();\n-- 创建库\n    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项\n    数据库选项：\n        CHARACTER SET charset_name\n        COLLATE collation_name\n-- 查看已有库\n    SHOW DATABASES[ LIKE 'PATTERN']\n-- 查看当前库信息\n    SHOW CREATE DATABASE 数据库名\n-- 修改库的选项信息\n    ALTER DATABASE 库名 选项信息\n-- 删除库\n    DROP DATABASE[ IF EXISTS] 数据库名\n        同时删除该数据库相关的目录及其目录内容\n```\n\n### 表的操作\n\n```mysql\n-- 创建表\n    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]\n        每个字段必须有数据类型\n        最后一个字段后不能有逗号\n        TEMPORARY 临时表，会话结束时表自动消失\n        对于字段的定义：\n            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']\n-- 表选项\n    -- 字符集\n        CHARSET = charset_name\n        如果表没有设定，则使用数据库字符集\n    -- 存储引擎\n        ENGINE = engine_name\n        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同\n        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive\n        不同的引擎在保存表的结构和数据时采用不同的方式\n        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引\n        InnoDB表文件含义：.frm表定义，表空间数据和日志文件\n        SHOW ENGINES -- 显示存储引擎的状态信息\n        SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息\n    -- 自增起始数\n    \tAUTO_INCREMENT = 行数\n    -- 数据文件目录\n        DATA DIRECTORY = '目录'\n    -- 索引文件目录\n        INDEX DIRECTORY = '目录'\n    -- 表注释\n        COMMENT = 'string'\n    -- 分区选项\n        PARTITION BY ... (详细见手册)\n-- 查看所有表\n    SHOW TABLES[ LIKE 'pattern']\n    SHOW TABLES FROM 表名\n-- 查看表机构\n    SHOW CREATE TABLE 表名 （信息更详细）\n    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']\n    SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']\n-- 修改表\n    -- 修改表本身的选项\n        ALTER TABLE 表名 表的选项\n        eg: ALTER TABLE 表名 ENGINE=MYISAM;\n    -- 对表进行重命名\n        RENAME TABLE 原表名 TO 新表名\n        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）\n        -- RENAME可以交换两个表名\n    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）\n        ALTER TABLE 表名 操作名\n        -- 操作名\n            ADD[ COLUMN] 字段定义       -- 增加字段\n                AFTER 字段名          -- 表示增加在该字段名后面\n                FIRST               -- 表示增加在第一个\n            ADD PRIMARY KEY(字段名)   -- 创建主键\n            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引\n            ADD INDEX [索引名] (字段名) -- 创建普通索引\n            DROP[ COLUMN] 字段名      -- 删除字段\n            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)\n            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改\n            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)\n            DROP INDEX 索引名 -- 删除索引\n            DROP FOREIGN KEY 外键    -- 删除外键\n\n-- 删除表\n    DROP TABLE[ IF EXISTS] 表名 ...\n-- 清空表数据\n    TRUNCATE [TABLE] 表名\n-- 复制表结构\n    CREATE TABLE 表名 LIKE 要复制的表名\n-- 复制表结构和数据\n    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名\n-- 检查表是否有错误\n    CHECK TABLE tbl_name [, tbl_name] ... [option] ...\n-- 优化表\n    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n-- 修复表\n    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]\n-- 分析表\n    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n\n### 数据操作\n\n```mysql\n-- 增\n    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]\n        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。\n        -- 可同时插入多条数据记录！\n        REPLACE 与 INSERT 完全一样，可互换。\n    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]\n-- 查\n    SELECT 字段列表 FROM 表名[ 其他子句]\n        -- 可来自多个表的多个字段\n        -- 其他子句可以不使用\n        -- 字段列表可以用*代替，表示所有字段\n-- 删\n    DELETE FROM 表名[ 删除条件子句]\n        没有条件子句，则会删除全部\n-- 改\n    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]\n```\n\n### 字符集编码\n\n```mysql\n-- MySQL、数据库、表、字段均可设置编码\n-- 数据编码与客户端编码不需一致\nSHOW VARIABLES LIKE 'character_set_%'   -- 查看所有字符集编码项\n    character_set_client        客户端向服务器发送数据时使用的编码\n    character_set_results       服务器端将结果返回给客户端所使用的编码\n    character_set_connection    连接层编码\nSET 变量名 = 变量值\n    SET character_set_client = gbk;\n    SET character_set_results = gbk;\n    SET character_set_connection = gbk;\nSET NAMES GBK;  -- 相当于完成以上三个设置\n-- 校对集\n    校对集用以排序\n    SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern']   查看所有字符集\n    SHOW COLLATION [LIKE 'pattern']     查看所有校对集\n    CHARSET 字符集编码     设置字符集编码\n    COLLATE 校对集编码     设置校对集编码\n```\n\n### 数据类型（列类型）\n\n**1. 数值类型**\n\n```mysql\n-- a. 整型 ----------\n    类型         字节     范围（有符号位）\n    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255\n    smallint    2字节    -32768 ~ 32767\n    mediumint   3字节    -8388608 ~ 8388607\n    int         4字节\n    bigint      8字节\n\n    int(M)  M表示总位数\n    - 默认存在符号位，unsigned 属性修改\n    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改\n        例：int(5)   插入一个数'123'，补填后为'00123'\n    - 在满足要求的情况下，越小越好。\n    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。\n\n-- b. 浮点型 ----------\n    类型             字节     范围\n    float(单精度)     4字节\n    double(双精度)    8字节\n    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。\n        不同于整型，前后均会补填0.\n    定义浮点型时，需指定总位数和小数位数。\n        float(M, D)     double(M, D)\n        M表示总位数，D表示小数位数。\n        M和D的大小会决定浮点数的范围。不同于整型的固定范围。\n        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。\n        支持科学计数法表示。\n        浮点数表示近似值。\n\n-- c. 定点数 ----------\n    decimal -- 可变长度\n    decimal(M, D)   M也表示总位数，D表示小数位数。\n    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。\n    将浮点数转换为字符串来保存，每9位数字保存为4个字节。\n```\n\n**2. 字符串类型**\n\n```mysql\n-- a. char, varchar ----------\n    char    定长字符串，速度快，但浪费空间\n    varchar 变长字符串，速度慢，但节省空间\n    M表示能存储的最大长度，此长度是字符数，非字节数。\n    不同的编码，所占用的空间不同。\n    char,最多255个字符，与编码无关。\n    varchar,最多65535字符，与编码有关。\n    一条有效记录最大不能超过65535个字节。\n        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符\n    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。\n    varchar 的最大有效长度由最大行大小和使用的字符集确定。\n    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。\n    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3\n\n-- b. blob, text ----------\n    blob 二进制字符串（字节字符串）\n        tinyblob, blob, mediumblob, longblob\n    text 非二进制字符串（字符字符串）\n        tinytext, text, mediumtext, longtext\n    text 在定义时，不需要定义长度，也不会计算总长度。\n    text 类型在定义时，不可给default值\n\n-- c. binary, varbinary ----------\n    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。\n    char, varchar, text 对应 binary, varbinary, blob.\n```\n\n**3. 日期时间类型**\n\n```mysql\n一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。\ndatetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59\ndate        3字节    日期         1000-01-01 到 9999-12-31\ntimestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07\ntime        3字节    时间         -838:59:59 到 838:59:59\nyear        1字节    年份         1901 - 2155\n\ndatetime    YYYY-MM-DD hh:mm:ss\ntimestamp   YY-MM-DD hh:mm:ss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\ndate        YYYY-MM-DD\n            YY-MM-DD\n            YYYYMMDD\n            YYMMDD\n            YYYYMMDD\n            YYMMDD\ntime        hh:mm:ss\n            hhmmss\n            hhmmss\nyear        YYYY\n            YY\n            YYYY\n            YY\n```\n\n**4. 枚举和集合**\n\n```mysql\n-- 枚举(enum) ----------\nenum(val1, val2, val3...)\n    在已知的值中进行单选。最大数量为65535.\n    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。\n    表现为字符串类型，存储却是整型。\n    NULL值的索引是NULL。\n    空字符串错误值的索引值是0。\n\n-- 集合（set） ----------\nset(val1, val2, val3...)\n    create table tab ( gender set('男', '女', '无') );\n    insert into tab values ('男, 女');\n    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。\n    当创建表时，SET成员值的尾部空格将自动被删除。\n\n/* 选择类型 */\n-- PHP角度\n1. 功能满足\n2. 存储空间尽量小，处理效率更高\n3. 考虑兼容问题\n```\n\n**IP存储**\n\n```mysql\n1. 只需存储，可用字符串\n2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned\n    1) PHP函数转换\n        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。\n        利用sprintf函数格式化字符串\n        sprintf(\"%u\", ip2long('192.168.3.134'));\n        然后用long2ip将整型转回IP字符串\n    2) MySQL函数转换(无符号整型，UNSIGNED)\n        INET_ATON('127.0.0.1') 将IP转为整型\n        INET_NTOA(2130706433) 将整型转为IP\n```\n\n### 列属性（列约束）\n\n```mysql\n1. PRIMARY 主键\n    - 能唯一标识记录的字段，可以作为主键。\n    - 一个表只能有一个主键。\n    - 主键具有唯一性。\n    - 声明字段时，用 primary key 标识。\n        也可以在字段列表之后声明\n            例：create table tab ( id int, stu varchar(10), primary key (id));\n    - 主键字段的值不能为null。\n    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。\n        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));\n\n2. UNIQUE 唯一索引（唯一约束）\n    使得某字段的值也不能重复。\n\n3. NULL 约束\n    null不是数据类型，是列的一个属性。\n    表示当前列是否可以为null，表示什么都没有。\n    null, 允许为空。默认。\n    not null, 不允许为空。\n    insert into tab values (null, 'val');\n        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n\n4. DEFAULT 默认值属性\n    当前字段的默认值。\n    insert into tab values (default, 'val');    -- 此时表示强制使用默认值。\n    create table tab ( add_time timestamp default current_timestamp );\n        -- 表示将当前时间的时间戳设为默认值。\n        current_date, current_time\n\n5. AUTO_INCREMENT 自动增长约束\n    自动增长必须为索引（主键或unique）\n    只能存在一个字段为自动增长。\n    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;\n\n6. COMMENT 注释\n    例：create table tab ( id int ) comment '注释内容';\n\n7. FOREIGN KEY 外键约束\n    用于限制主表与从表数据完整性。\n    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);\n        -- 将表t1的t1_id外键关联到表t2的id字段。\n        -- 每个外键都有一个名字，可以通过 constraint 指定\n\n    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n\n    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。\n\n    MySQL中，可以对InnoDB引擎使用外键约束：\n    语法：\n    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]\n    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。\n\n    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。\n    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：\n    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。\n    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。\n    3. restrict，拒绝父表删除和更新。\n\n    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。\n```\n\n### 建表规范\n\n```mysql\n    -- Normal Format, NF\n        - 每个表保存一个实体信息\n        - 每个具有一个ID字段作为主键\n        - ID主键 + 原子表\n    -- 1NF, 第一范式\n        字段不能再分，就满足第一范式。\n    -- 2NF, 第二范式\n        满足第一范式的前提下，不能出现部分依赖。\n        消除符合主键就可以避免部分依赖。增加单列关键字。\n    -- 3NF, 第三范式\n        满足第二范式的前提下，不能出现传递依赖。\n        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。\n        将一个实体信息的数据放在一个表内实现。\n```\n\n### SELECT\n\n```mysql\nSELECT [ALL|DISTINCT] select_expr FROM -> WHERE -> GROUP BY [合计函数] -> HAVING -> ORDER BY -> LIMIT\n\na. select_expr\n    -- 可以用 * 表示所有字段。\n        select * from tb;\n    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）\n        select stu, 29+25, now() from tb;\n    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。\n        - 使用 as 关键字，也可省略 as.\n        select stu+10 as add10 from tb;\n\nb. FROM 子句\n    用于标识查询来源。\n    -- 可以为表起别名。使用as关键字。\n        SELECT * FROM tb1 AS tt, tb2 AS bb;\n    -- from子句后，可以同时出现多个表。\n        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。\n        SELECT * FROM tb1, tb2;\n    -- 向优化符提示如何选择索引\n        USE INDEX、IGNORE INDEX、FORCE INDEX\n        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;\n        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;\n\nc. WHERE 子句\n    -- 从from获得的数据源中进行筛选。\n    -- 整型1表示真，0表示假。\n    -- 表达式由运算符和运算数组成。\n        -- 运算数：变量（字段）、值、函数返回值\n        -- 运算符：\n            =, <=>, <>, !=, <=, <, >=, >, !, &&, ||,\n            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor\n            is/is not 加上ture/false/unknown，检验某个值的真假\n            <=>与<>功能相同，<=>可用于null比较\n\nd. GROUP BY 子句, 分组子句\n    GROUP BY 字段/别名 [排序方式]\n    分组后会进行排序。升序：ASC，降序：DESC\n\n    以下[合计函数]需配合 GROUP BY 使用：\n    count 返回不同的非NULL值数目  count(*)、count(字段)\n    sum 求和\n    max 求最大值\n    min 求最小值\n    avg 求平均值\n    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。\n\ne. HAVING 子句，条件子句\n    与 where 功能、用法相同，执行时机不同。\n    where 在开始时执行检测数据，对原数据进行过滤。\n    having 对筛选出的结果再次进行过滤。\n    having 字段必须是查询出来的，where 字段必须是数据表存在的。\n    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。\n    where 不可以使用合计函数。一般需用合计函数才会用 having\n    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。\n\nf. ORDER BY 子句，排序子句\n    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...\n    升序：ASC，降序：DESC\n    支持多个字段的排序。\n\ng. LIMIT 子句，限制结果数量子句\n    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。\n    limit 起始位置, 获取条数\n    省略第一个参数，表示从索引0开始。limit 获取条数\n\nh. DISTINCT, ALL 选项\n    distinct 去除重复记录\n    默认为 all, 全部记录\n```\n\n### UNION\n\n> 将多个select查询的结果组合成一个结果集合。\n\n```mysql\nSELECT ... UNION [ALL|DISTINCT] SELECT ...\n默认 DISTINCT 方式，即所有返回的行都是唯一的\n建议，对每个SELECT查询加上小括号包裹。\nORDER BY 排序时，需加上 LIMIT 进行结合。\n需要各select查询的字段数量一样。\n每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。\n```\n\n### 子查询\n\n> 子查询需用括号包裹。\n\n```mysql\n-- from型\n    from后要求是一个表，必须给子查询结果取个别名。\n    - 简化每个查询内的条件。\n    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。\n    - 子查询返回一个表，表型子查询。\n    select * from (select * from tb where id>0) as subfrom where id>1;\n-- where型\n    - 子查询返回一个值，标量子查询。\n    - 不需要给子查询取别名。\n    - where子查询内的表，不能直接用以更新。\n    select * from tb where money = (select max(money) from tb);\n    -- 列子查询\n        如果子查询结果返回的是一列。\n        使用 in 或 not in 完成查询\n        exists 和 not exists 条件\n            如果子查询返回数据，则返回1或0。常用于判断条件。\n            select column1 from t1 where exists (select * from t2);\n    -- 行子查询\n        查询条件是一个行。\n        select * from t1 where (id, gender) in (select id, gender from t2);\n        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)\n        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。\n\n    -- 特殊运算符\n    != all()    相当于 not in\n    = some()    相当于 in。any 是 some 的别名\n    != some()   不等同于 not in，不等于其中某一个。\n    all, some 可以配合其他运算符一起使用。\n```\n\n### 连接查询(join)```mysql\n\n> 将多个表的字段进行连接，可以指定连接条件。\n\n```mysql\n-- 内连接(inner join)\n    - 默认就是内连接，可省略inner。\n    - 只有数据存在时才能发送连接。即连接结果不能出现空行。\n    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）\n    也可用where表示连接条件。\n    还有 using, 但需字段名相同。 using(字段名)\n\n-- 交叉连接 cross join\n   即，没有条件的内连接。\n   select * from tb1 cross join tb2;\n-- 外连接(outer join)\n    - 如果数据不存在，也会出现在连接结果中。\n    -- 左外连接 left join\n        如果数据不存在，左表记录会出现，而右表为null填充\n    -- 右外连接 right join\n        如果数据不存在，右表记录会出现，而左表为null填充\n-- 自然连接(natural join)\n    自动判断连接条件完成连接。\n    相当于省略了using，会自动查找相同字段名。\n    natural join\n    natural left join\n    natural right join\n\nselect info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;\n```\n\n### 导入导出\n\n```mysql\nselect * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据\nload data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据\n    生成的数据默认的分隔符是制表符\n    local未指定，则数据文件必须在服务器上\n    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理\n-- 控制格式\nfields  控制字段格式\n默认：fields terminated by '\\t' enclosed by '' escaped by '\\\\'\n    terminated by 'string'  -- 终止\n    enclosed by 'char'      -- 包裹\n    escaped by 'char'       -- 转义\n    -- 示例：\n        SELECT a,b,a+b INTO OUTFILE '/tmp/result.text'\n        FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n        LINES TERMINATED BY '\\n'\n        FROM test_table;\nlines   控制行格式\n默认：lines terminated by '\\n'\n    terminated by 'string'  -- 终止\n```\n\n### INSERT\n\n```mysql\nselect语句获得的数据可以用insert插入。\n\n可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。\n    或者使用set语法。\n    INSERT INTO tbl_name SET field=value,...；\n\n可以一次性使用多个值，采用(), (), ();的形式。\n    INSERT INTO tbl_name VALUES (), (), ();\n\n可以在列值指定时，使用表达式。\n    INSERT INTO tbl_name VALUES (field_value, 10+10, now());\n可以使用一个特殊值 DEFAULT，表示该列使用默认值。\n    INSERT INTO tbl_name VALUES (field_value, DEFAULT);\n\n可以通过一个查询的结果，作为需要插入的值。\n    INSERT INTO tbl_name SELECT ...;\n\n可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。\n    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;\n```\n\n### DELETE\n\n```mysql\nDELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]\n\n按照条件删除。where\n\n指定删除的最多记录数。limit\n\n可以通过排序条件删除。order by + limit\n\n支持多表删除，使用类似连接语法。\ndelete from 需要删除数据多表1，表2 using 表连接操作 条件。\n```\n\n### TRUNCATE\n\n```mysql\nTRUNCATE [TABLE] tbl_name\n清空数据\n删除重建表\n\n区别：\n1，truncate 是删除表再创建，delete 是逐条删除\n2，truncate 重置auto_increment的值。而delete不会\n3，truncate 不知道删除了几条，而delete知道。\n4，当被用于带分区的表时，truncate 会保留分区\n```\n\n### 备份与还原\n\n> 备份，将数据的结构与表内数据保存起来。\n> 利用 mysqldump 指令完成。\n\n```mysql\n-- 导出\nmysqldump [options] db_name [tables]\nmysqldump [options] ---database DB1 [DB2 DB3...]\nmysqldump [options] --all--database\n\n\n1. 导出一张表\n　　mysqldump -u用户名 -p密码 库名 表名 > 文件名(D:/a.sql)\n2. 导出多张表\n　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 > 文件名(D:/a.sql)\n3. 导出所有表\n　　mysqldump -u用户名 -p密码 库名 > 文件名(D:/a.sql)\n4. 导出一个库\n　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 > 文件名(D:/a.sql)\n\n可以-w携带WHERE条件\n\n-- 导入\n1. 在登录mysql的情况下：\n　　source  备份文件\n2. 在不登录的情况下\n　　mysql -u用户名 -p密码 库名 < 备份文件\n```\n\n### 视图\n\n> 什么是视图：\n>     视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。\n>     视图具有表结构文件，但不存在数据文件。\n>     对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。\n>     视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。\n\n```mysql\n-- 创建视图\nCREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] VIEW view_name [(column_list)] AS select_statement\n    - 视图名必须唯一，同时不能与表重名。\n    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。\n    - 可以指定视图执行的算法，通过ALGORITHM指定。\n    - column_list如果存在，则数目必须等于SELECT语句检索的列数\n\n-- 查看结构\n    SHOW CREATE VIEW view_name\n\n-- 删除视图\n    - 删除视图后，数据依然存在。\n    - 可同时删除多个视图。\n    DROP VIEW [IF EXISTS] view_name ...\n\n-- 修改视图结构\n    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。\n    ALTER VIEW view_name [(column_list)] AS select_statement\n\n-- 视图作用\n    1. 简化业务逻辑\n    2. 对客户端隐藏真实的表结构\n\n-- 视图算法(ALGORITHM)\n    MERGE       合并\n        将视图的查询语句，与外部查询需要先合并再执行！\n    TEMPTABLE   临时表\n        将视图执行完毕后，形成临时表，再做外层查询！\n    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。\n```\n\n### 事务(transaction)\n\n> 事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。\n\n```mysql\n- 支持连续SQL的集体成功或集体撤销。\n- 事务是数据库在数据晚自习方面的一个功能。\n- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。\n- InnoDB被称为事务安全型引擎。\n\n-- 事务开启\n    START TRANSACTION; 或者 BEGIN;\n    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。\n-- 事务提交\n    COMMIT;\n-- 事务回滚\n    ROLLBACK;\n    如果部分操作发生问题，映射到事务开启前。\n\n-- 事务的特性\n    1. 原子性（Atomicity）\n        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。\n    2. 一致性（Consistency）\n        事务前后数据的完整性必须保持一致。\n        - 事务开始和结束时，外部数据一致\n        - 在整个事务过程中，操作是连续的\n    3. 隔离性（Isolation）\n        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。\n    4. 持久性（Durability）\n        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。\n\n-- 事务的实现\n    1. 要求是事务支持的表类型\n    2. 执行一组相关的操作前开启事务\n    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。\n\n-- 事务的原理\n    利用InnoDB的自动提交(autocommit)特性完成。\n    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。\n    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。\n\n-- 注意\n    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。\n    2. 事务不能被嵌套\n\n-- 保存点\n    SAVEPOINT 保存点名称 -- 设置一个事务保存点\n    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点\n    RELEASE SAVEPOINT 保存点名称 -- 删除保存点\n\n-- InnoDB自动提交特性设置\n    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。\n    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。\n    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，\n        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)\n        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)\n```\n\n### 锁表\n\n> 表锁定只用于防止其它客户端进行不正当地读取和写入\n> MyISAM 支持表锁，InnoDB 支持行锁\n\n```mysql\n-- 锁定\n    LOCK TABLES tbl_name [AS alias]\n-- 解锁\n    UNLOCK TABLES\n```\n\n### 触发器\n\n> 触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象\n> 监听：记录的增加、修改、删除。\n\n```mysql\n-- 创建触发器\nCREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt\n    参数：\n    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。\n    trigger_event指明了激活触发程序的语句的类型\n        INSERT：将新行插入表时激活触发程序\n        UPDATE：更改某一行时激活触发程序\n        DELETE：从表中删除某一行时激活触发程序\n    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。\n    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构\n\n-- 删除\nDROP TRIGGER [schema_name.]trigger_name\n\n可以使用old和new代替旧的和新的数据\n    更新操作，更新前是old，更新后是new.\n    删除操作，只有old.\n    增加操作，只有new.\n\n-- 注意\n    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。\n\n\n-- 字符连接函数\nconcat(str1,str2,...])\nconcat_ws(separator,str1,str2,...)\n\n-- 分支语句\nif 条件 then\n    执行语句\nelseif 条件 then\n    执行语句\nelse\n    执行语句\nend if;\n\n-- 修改最外层语句结束符\ndelimiter 自定义结束符号\n    SQL语句\n自定义结束符号\n\ndelimiter ;     -- 修改回原来的分号\n\n-- 语句块包裹\nbegin\n    语句块\nend\n\n-- 特殊的执行\n1. 只要添加记录，就会触发程序。\n2. Insert into on duplicate key update 语法会触发：\n    如果没有重复记录，会触发 before insert, after insert;\n    如果有重复记录并更新，会触发 before insert, before update, after update;\n    如果有重复记录但是没有发生更新，则触发 before insert, before update\n3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert\n```\n\n### SQL编程\n\n```mysql\n--// 局部变量 ----------\n-- 变量声明\n    declare var_name[,...] type [default value]\n    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。\n\n-- 赋值\n    使用 set 和 select into 语句为变量赋值。\n\n    - 注意：在函数内是可以使用全局变量（用户自定义的变量）\n\n\n--// 全局变量 ----------\n-- 定义、赋值\nset 语句可以定义并为变量赋值。\nset @var = value;\n也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。\n还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。\nselect @var:=20;\nselect @v1:=id, @v2=name from t1 limit 1;\nselect * from tbl_name where @var:=30;\n\nselect into 可以将表中查询获得的数据赋给变量。\n    -| select max(height) into @max_height from tb;\n\n-- 自定义变量名\n为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。\n@var=10;\n\n    - 变量被定义后，在整个会话周期都有效（登录到退出）\n\n\n--// 控制结构 ----------\n-- if语句\nif search_condition then\n    statement_list   \n[elseif search_condition then\n    statement_list]\n...\n[else\n    statement_list]\nend if;\n\n-- case语句\nCASE value WHEN [compare-value] THEN result\n[WHEN [compare-value] THEN result ...]\n[ELSE result]\nEND\n\n\n-- while循环\n[begin_label:] while search_condition do\n    statement_list\nend while [end_label];\n\n- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。\n\n    -- 退出循环\n        退出整个循环 leave\n        退出当前循环 iterate\n        通过退出的标签决定退出哪个循环\n\n\n--// 内置函数 ----------\n-- 数值函数\nabs(x)          -- 绝对值 abs(-10.9) = 10\nformat(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46\nceil(x)         -- 向上取整 ceil(10.1) = 11\nfloor(x)        -- 向下取整 floor (10.1) = 10\nround(x)        -- 四舍五入去整\nmod(m, n)       -- m%n m mod n 求余 10%3=1\npi()            -- 获得圆周率\npow(m, n)       -- m^n\nsqrt(x)         -- 算术平方根\nrand()          -- 随机数\ntruncate(x, d)  -- 截取d位小数\n\n-- 时间日期函数\nnow(), current_timestamp();     -- 当前日期时间\ncurrent_date();                 -- 当前日期\ncurrent_time();                 -- 当前时间\ndate('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分\ntime('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分\ndate_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j'); -- 格式化时间\nunix_timestamp();               -- 获得unix时间戳\nfrom_unixtime();                -- 从时间戳获得时间\n\n-- 字符串函数\nlength(string)          -- string长度，字节\nchar_length(string)     -- string的字符个数\nsubstring(str, position [,length])      -- 从str的position开始,取length个字符\nreplace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str\ninstr(string ,substring)    -- 返回substring首次在string中出现的位置\nconcat(string [,...])   -- 连接字串\ncharset(str)            -- 返回字串字符集\nlcase(string)           -- 转换成小写\nleft(string, length)    -- 从string2中的左边起取length个字符\nload_file(file_name)    -- 从文件读取内容\nlocate(substring, string [,start_position]) -- 同instr,但可指定开始位置\nlpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length\nltrim(string)           -- 去除前端空格\nrepeat(string, count)   -- 重复count次\nrpad(string, length, pad)   --在str后用pad补充,直到长度为length\nrtrim(string)           -- 去除后端空格\nstrcmp(string1 ,string2)    -- 逐字符比较两字串大小\n\n-- 流程函数\ncase when [condition] then result [when [condition] then result ...] [else result] end   多分支\nif(expr1,expr2,expr3)  双分支。\n\n-- 聚合函数\ncount()\nsum();\nmax();\nmin();\navg();\ngroup_concat()\n\n-- 其他常用函数\nmd5();\ndefault();\n\n--// 存储函数，自定义函数 ----------\n-- 新建\n    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型\n        函数体\n\n    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。\n    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。\n    - 参数部分，由\"参数名\"和\"参数类型\"组成。多个参数用逗号隔开。\n    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。\n    - 多条语句应该使用 begin...end 语句块包含。\n    - 一定要有 return 返回值语句。\n\n-- 删除\n    DROP FUNCTION [IF EXISTS] function_name;\n\n-- 查看\n    SHOW FUNCTION STATUS LIKE 'partten'\n    SHOW CREATE FUNCTION function_name;\n\n-- 修改\n    ALTER FUNCTION function_name 函数选项\n\n\n--// 存储过程，自定义功能 ----------\n-- 定义\n存储存储过程 是一段代码（过程），存储在数据库中的sql组成。\n一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。\n而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。\n\n-- 创建\nCREATE PROCEDURE sp_name (参数列表)\n    过程体\n\n参数列表：不同于函数的参数列表，需要指明参数类型\nIN，表示输入型\nOUT，表示输出型\nINOUT，表示混合型\n\n注意，没有返回值。\n```\n\n### 存储过程\n\n> 存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。\n> 调用：CALL 过程名\n\n```mysql\n-- 注意\n- 没有返回值。\n- 只能单独调用，不可夹杂在其他语句中\n\n-- 参数\nIN|OUT|INOUT 参数名 数据类型\nIN      输入：在调用过程中，将数据输入到过程体内部的参数\nOUT     输出：在调用过程中，将过程体处理完的结果返回到客户端\nINOUT   输入输出：既可输入，也可输出\n\n-- 语法\nCREATE PROCEDURE 过程名 (参数列表)\nBEGIN\n    过程体\nEND\n```\n\n### 用户和权限管理\n\n```mysql\n-- root密码重置\n1. 停止MySQL服务\n2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &\n    [Windows] mysqld --skip-grant-tables\n3. use mysql;\n4. UPDATE `user` SET PASSWORD=PASSWORD(\"密码\") WHERE `user` = \"root\";\n5. FLUSH PRIVILEGES;\n\n用户信息表：mysql.user\n-- 刷新权限\nFLUSH PRIVILEGES;\n-- 增加用户\nCREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)\n    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。\n    - 只能创建用户，不能赋予权限。\n    - 用户名，注意引号：如 'user_name'@'192.168.1.1'\n    - 密码也需引号，纯数字密码也要加引号\n    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD\n-- 重命名用户\nRENAME USER old_user TO new_user\n-- 设置密码\nSET PASSWORD = PASSWORD('密码')  -- 为当前用户设置密码\nSET PASSWORD FOR 用户名 = PASSWORD('密码') -- 为指定用户设置密码\n-- 删除用户\nDROP USER 用户名\n-- 分配权限/添加用户\nGRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password']\n    - all privileges 表示所有权限\n    - *.* 表示所有库的所有表\n    - 库名.表名 表示某库下面的某表\n    GRANT ALL PRIVILEGES ON `pms`.* TO 'pms'@'%' IDENTIFIED BY 'pms0817';\n-- 查看权限\nSHOW GRANTS FOR 用户名\n    -- 查看当前用户权限\n    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();\n-- 撤消权限\nREVOKE 权限列表 ON 表名 FROM 用户名\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限\n-- 权限层级\n-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。\n全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user\n    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。\n数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host\n    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。\n表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv\n    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。\n列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv\n    当使用REVOKE时，您必须指定与被授权列相同的列。\n-- 权限列表\nALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限\nALTER   -- 允许使用ALTER TABLE\nALTER ROUTINE   -- 更改或取消已存储的子程序\nCREATE  -- 允许使用CREATE TABLE\nCREATE ROUTINE  -- 创建已存储的子程序\nCREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE\nCREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。\nCREATE VIEW     -- 允许使用CREATE VIEW\nDELETE  -- 允许使用DELETE\nDROP    -- 允许使用DROP TABLE\nEXECUTE     -- 允许用户运行已存储的子程序\nFILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE\nINDEX   -- 允许使用CREATE INDEX和DROP INDEX\nINSERT  -- 允许使用INSERT\nLOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES\nPROCESS     -- 允许使用SHOW FULL PROCESSLIST\nREFERENCES  -- 未被实施\nRELOAD  -- 允许使用FLUSH\nREPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址\nREPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）\nSELECT  -- 允许使用SELECT\nSHOW DATABASES  -- 显示所有数据库\nSHOW VIEW   -- 允许使用SHOW CREATE VIEW\nSHUTDOWN    -- 允许使用mysqladmin shutdown\nSUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。\nUPDATE  -- 允许使用UPDATE\nUSAGE   -- “无权限”的同义词\nGRANT OPTION    -- 允许授予权限\n```\n\n### 表维护\n\n```mysql\n-- 分析和存储表的关键字分布\nANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...\n-- 检查一个或多个表是否有错误\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\noption = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}\n-- 整理数据文件的碎片\nOPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n### 杂项\n\n```mysql\n1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！\n2. 每个库目录存在一个保存当前数据库的选项文件db.opt。\n3. 注释：\n    单行注释 # 注释内容\n    多行注释 /* 注释内容 */\n    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)\n4. 模式通配符：\n    _   任意单个字符\n    %   任意多个字符，甚至包括零字符\n    单引号需要进行转义 \\'\n5. CMD命令行内的语句结束符可以为 \";\", \"\\G\", \"\\g\"，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。\n6. SQL对大小写不敏感\n7. 清除已有语句：\\c\n```\n\n原文连接：https://shockerli.net/post/1000-line-mysql-note/","slug":"MySQL 学习笔记","published":1,"date":"2020-03-27T08:14:24.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ao001519ia3knu28r8","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MySQL-学习笔记\"><a href=\"#MySQL-学习笔记\" class=\"headerlink\" title=\"MySQL 学习笔记\"></a>MySQL 学习笔记</h1><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 查看当前数据库<br>    SELECT DATABASE();<br>-- 显示当前时间、用户名、数据库版本<br>    SELECT now(), user(), version();<br>-- 创建库<br>    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项<br>    数据库选项：<br>        CHARACTER SET charset_name<br>        COLLATE collation_name<br>-- 查看已有库<br>    SHOW DATABASES[ LIKE &#x27;PATTERN&#x27;]<br>-- 查看当前库信息<br>    SHOW CREATE DATABASE 数据库名<br>-- 修改库的选项信息<br>    ALTER DATABASE 库名 选项信息<br>-- 删除库<br>    DROP DATABASE[ IF EXISTS] 数据库名<br>        同时删除该数据库相关的目录及其目录内容<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表的操作\"><a href=\"#表的操作\" class=\"headerlink\" title=\"表的操作\"></a>表的操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建表<br>    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]<br>        每个字段必须有数据类型<br>        最后一个字段后不能有逗号<br>        TEMPORARY 临时表，会话结束时表自动消失<br>        对于字段的定义：<br>            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &#x27;string&#x27;]<br>-- 表选项<br>    -- 字符集<br>        CHARSET = charset_name<br>        如果表没有设定，则使用数据库字符集<br>    -- 存储引擎<br>        ENGINE = engine_name<br>        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同<br>        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive<br>        不同的引擎在保存表的结构和数据时采用不同的方式<br>        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引<br>        InnoDB表文件含义：.frm表定义，表空间数据和日志文件<br>        SHOW ENGINES -- 显示存储引擎的状态信息<br>        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息<br>    -- 自增起始数<br>    \tAUTO_INCREMENT = 行数<br>    -- 数据文件目录<br>        DATA DIRECTORY = &#x27;目录&#x27;<br>    -- 索引文件目录<br>        INDEX DIRECTORY = &#x27;目录&#x27;<br>    -- 表注释<br>        COMMENT = &#x27;string&#x27;<br>    -- 分区选项<br>        PARTITION BY ... (详细见手册)<br>-- 查看所有表<br>    SHOW TABLES[ LIKE &#x27;pattern&#x27;]<br>    SHOW TABLES FROM 表名<br>-- 查看表机构<br>    SHOW CREATE TABLE 表名 （信息更详细）<br>    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &#x27;PATTERN&#x27;]<br>    SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;]<br>-- 修改表<br>    -- 修改表本身的选项<br>        ALTER TABLE 表名 表的选项<br>        eg: ALTER TABLE 表名 ENGINE=MYISAM;<br>    -- 对表进行重命名<br>        RENAME TABLE 原表名 TO 新表名<br>        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）<br>        -- RENAME可以交换两个表名<br>    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）<br>        ALTER TABLE 表名 操作名<br>        -- 操作名<br>            ADD[ COLUMN] 字段定义       -- 增加字段<br>                AFTER 字段名          -- 表示增加在该字段名后面<br>                FIRST               -- 表示增加在第一个<br>            ADD PRIMARY KEY(字段名)   -- 创建主键<br>            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引<br>            ADD INDEX [索引名] (字段名) -- 创建普通索引<br>            DROP[ COLUMN] 字段名      -- 删除字段<br>            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)<br>            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改<br>            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)<br>            DROP INDEX 索引名 -- 删除索引<br>            DROP FOREIGN KEY 外键    -- 删除外键<br><br>-- 删除表<br>    DROP TABLE[ IF EXISTS] 表名 ...<br>-- 清空表数据<br>    TRUNCATE [TABLE] 表名<br>-- 复制表结构<br>    CREATE TABLE 表名 LIKE 要复制的表名<br>-- 复制表结构和数据<br>    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名<br>-- 检查表是否有错误<br>    CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>-- 优化表<br>    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br>-- 修复表<br>    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]<br>-- 分析表<br>    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 增<br>    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]<br>        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。<br>        -- 可同时插入多条数据记录！<br>        REPLACE 与 INSERT 完全一样，可互换。<br>    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]<br>-- 查<br>    SELECT 字段列表 FROM 表名[ 其他子句]<br>        -- 可来自多个表的多个字段<br>        -- 其他子句可以不使用<br>        -- 字段列表可以用*代替，表示所有字段<br>-- 删<br>    DELETE FROM 表名[ 删除条件子句]<br>        没有条件子句，则会删除全部<br>-- 改<br>    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符集编码\"><a href=\"#字符集编码\" class=\"headerlink\" title=\"字符集编码\"></a>字符集编码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- MySQL、数据库、表、字段均可设置编码<br>-- 数据编码与客户端编码不需一致<br>SHOW VARIABLES LIKE &#x27;character_set_%&#x27;   -- 查看所有字符集编码项<br>    character_set_client        客户端向服务器发送数据时使用的编码<br>    character_set_results       服务器端将结果返回给客户端所使用的编码<br>    character_set_connection    连接层编码<br>SET 变量名 = 变量值<br>    SET character_set_client = gbk;<br>    SET character_set_results = gbk;<br>    SET character_set_connection = gbk;<br>SET NAMES GBK;  -- 相当于完成以上三个设置<br>-- 校对集<br>    校对集用以排序<br>    SHOW CHARACTER SET [LIKE &#x27;pattern&#x27;]/SHOW CHARSET [LIKE &#x27;pattern&#x27;]   查看所有字符集<br>    SHOW COLLATION [LIKE &#x27;pattern&#x27;]     查看所有校对集<br>    CHARSET 字符集编码     设置字符集编码<br>    COLLATE 校对集编码     设置校对集编码<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数据类型（列类型）\"><a href=\"#数据类型（列类型）\" class=\"headerlink\" title=\"数据类型（列类型）\"></a>数据类型（列类型）</h3><p><strong>1. 数值类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. 整型 ----------<br>    类型         字节     范围（有符号位）<br>    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255<br>    smallint    2字节    -32768 ~ 32767<br>    mediumint   3字节    -8388608 ~ 8388607<br>    int         4字节<br>    bigint      8字节<br><br>    int(M)  M表示总位数<br>    - 默认存在符号位，unsigned 属性修改<br>    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改<br>        例：int(5)   插入一个数&#x27;123&#x27;，补填后为&#x27;00123&#x27;<br>    - 在满足要求的情况下，越小越好。<br>    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。<br><br>-- b. 浮点型 ----------<br>    类型             字节     范围<br>    float(单精度)     4字节<br>    double(双精度)    8字节<br>    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。<br>        不同于整型，前后均会补填0.<br>    定义浮点型时，需指定总位数和小数位数。<br>        float(M, D)     double(M, D)<br>        M表示总位数，D表示小数位数。<br>        M和D的大小会决定浮点数的范围。不同于整型的固定范围。<br>        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。<br>        支持科学计数法表示。<br>        浮点数表示近似值。<br><br>-- c. 定点数 ----------<br>    decimal -- 可变长度<br>    decimal(M, D)   M也表示总位数，D表示小数位数。<br>    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。<br>    将浮点数转换为字符串来保存，每9位数字保存为4个字节。<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. 字符串类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. char, varchar ----------<br>    char    定长字符串，速度快，但浪费空间<br>    varchar 变长字符串，速度慢，但节省空间<br>    M表示能存储的最大长度，此长度是字符数，非字节数。<br>    不同的编码，所占用的空间不同。<br>    char,最多255个字符，与编码无关。<br>    varchar,最多65535字符，与编码有关。<br>    一条有效记录最大不能超过65535个字节。<br>        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符<br>    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。<br>    varchar 的最大有效长度由最大行大小和使用的字符集确定。<br>    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。<br>    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3<br><br>-- b. blob, text ----------<br>    blob 二进制字符串（字节字符串）<br>        tinyblob, blob, mediumblob, longblob<br>    text 非二进制字符串（字符字符串）<br>        tinytext, text, mediumtext, longtext<br>    text 在定义时，不需要定义长度，也不会计算总长度。<br>    text 类型在定义时，不可给default值<br><br>-- c. binary, varbinary ----------<br>    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。<br>    char, varchar, text 对应 binary, varbinary, blob.<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. 日期时间类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。<br>datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59<br>date        3字节    日期         1000-01-01 到 9999-12-31<br>timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07<br>time        3字节    时间         -838:59:59 到 838:59:59<br>year        1字节    年份         1901 - 2155<br><br>datetime    YYYY-MM-DD hh:mm:ss<br>timestamp   YY-MM-DD hh:mm:ss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>date        YYYY-MM-DD<br>            YY-MM-DD<br>            YYYYMMDD<br>            YYMMDD<br>            YYYYMMDD<br>            YYMMDD<br>time        hh:mm:ss<br>            hhmmss<br>            hhmmss<br>year        YYYY<br>            YY<br>            YYYY<br>            YY<br></code></pre></td></tr></table></figure>\n\n<p><strong>4. 枚举和集合</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 枚举(enum) ----------<br>enum(val1, val2, val3...)<br>    在已知的值中进行单选。最大数量为65535.<br>    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。<br>    表现为字符串类型，存储却是整型。<br>    NULL值的索引是NULL。<br>    空字符串错误值的索引值是0。<br><br>-- 集合（set） ----------<br>set(val1, val2, val3...)<br>    create table tab ( gender set(&#x27;男&#x27;, &#x27;女&#x27;, &#x27;无&#x27;) );<br>    insert into tab values (&#x27;男, 女&#x27;);<br>    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。<br>    当创建表时，SET成员值的尾部空格将自动被删除。<br><br>/* 选择类型 */<br>-- PHP角度<br>1. 功能满足<br>2. 存储空间尽量小，处理效率更高<br>3. 考虑兼容问题<br></code></pre></td></tr></table></figure>\n\n<p><strong>IP存储</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 只需存储，可用字符串<br>2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned<br>    1) PHP函数转换<br>        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。<br>        利用sprintf函数格式化字符串<br>        sprintf(&quot;%u&quot;, ip2long(&#x27;192.168.3.134&#x27;));<br>        然后用long2ip将整型转回IP字符串<br>    2) MySQL函数转换(无符号整型，UNSIGNED)<br>        INET_ATON(&#x27;127.0.0.1&#x27;) 将IP转为整型<br>        INET_NTOA(2130706433) 将整型转为IP<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列属性（列约束）\"><a href=\"#列属性（列约束）\" class=\"headerlink\" title=\"列属性（列约束）\"></a>列属性（列约束）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. PRIMARY 主键<br>    - 能唯一标识记录的字段，可以作为主键。<br>    - 一个表只能有一个主键。<br>    - 主键具有唯一性。<br>    - 声明字段时，用 primary key 标识。<br>        也可以在字段列表之后声明<br>            例：create table tab ( id int, stu varchar(10), primary key (id));<br>    - 主键字段的值不能为null。<br>    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。<br>        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));<br><br>2. UNIQUE 唯一索引（唯一约束）<br>    使得某字段的值也不能重复。<br><br>3. NULL 约束<br>    null不是数据类型，是列的一个属性。<br>    表示当前列是否可以为null，表示什么都没有。<br>    null, 允许为空。默认。<br>    not null, 不允许为空。<br>    insert into tab values (null, &#x27;val&#x27;);<br>        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null<br><br>4. DEFAULT 默认值属性<br>    当前字段的默认值。<br>    insert into tab values (default, &#x27;val&#x27;);    -- 此时表示强制使用默认值。<br>    create table tab ( add_time timestamp default current_timestamp );<br>        -- 表示将当前时间的时间戳设为默认值。<br>        current_date, current_time<br><br>5. AUTO_INCREMENT 自动增长约束<br>    自动增长必须为索引（主键或unique）<br>    只能存在一个字段为自动增长。<br>    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;<br><br>6. COMMENT 注释<br>    例：create table tab ( id int ) comment &#x27;注释内容&#x27;;<br><br>7. FOREIGN KEY 外键约束<br>    用于限制主表与从表数据完整性。<br>    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);<br>        -- 将表t1的t1_id外键关联到表t2的id字段。<br>        -- 每个外键都有一个名字，可以通过 constraint 指定<br><br>    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。<br><br>    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。<br><br>    MySQL中，可以对InnoDB引擎使用外键约束：<br>    语法：<br>    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]<br>    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。<br><br>    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。<br>    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：<br>    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。<br>    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。<br>    3. restrict，拒绝父表删除和更新。<br><br>    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建表规范\"><a href=\"#建表规范\" class=\"headerlink\" title=\"建表规范\"></a>建表规范</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- Normal Format, NF<br>    - 每个表保存一个实体信息<br>    - 每个具有一个ID字段作为主键<br>    - ID主键 + 原子表<br>-- 1NF, 第一范式<br>    字段不能再分，就满足第一范式。<br>-- 2NF, 第二范式<br>    满足第一范式的前提下，不能出现部分依赖。<br>    消除符合主键就可以避免部分依赖。增加单列关键字。<br>-- 3NF, 第三范式<br>    满足第二范式的前提下，不能出现传递依赖。<br>    某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。<br>    将一个实体信息的数据放在一个表内实现。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT<br><br>a. select_expr<br>    -- 可以用 * 表示所有字段。<br>        select * from tb;<br>    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）<br>        select stu, 29+25, now() from tb;<br>    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。<br>        - 使用 as 关键字，也可省略 as.<br>        select stu+10 as add10 from tb;<br><br>b. FROM 子句<br>    用于标识查询来源。<br>    -- 可以为表起别名。使用as关键字。<br>        SELECT * FROM tb1 AS tt, tb2 AS bb;<br>    -- from子句后，可以同时出现多个表。<br>        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。<br>        SELECT * FROM tb1, tb2;<br>    -- 向优化符提示如何选择索引<br>        USE INDEX、IGNORE INDEX、FORCE INDEX<br>        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;<br>        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;<br><br>c. WHERE 子句<br>    -- 从from获得的数据源中进行筛选。<br>    -- 整型1表示真，0表示假。<br>    -- 表达式由运算符和运算数组成。<br>        -- 运算数：变量（字段）、值、函数返回值<br>        -- 运算符：<br>            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,<br>            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor<br>            is/is not 加上ture/false/unknown，检验某个值的真假<br>            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较<br><br>d. GROUP BY 子句, 分组子句<br>    GROUP BY 字段/别名 [排序方式]<br>    分组后会进行排序。升序：ASC，降序：DESC<br><br>    以下[合计函数]需配合 GROUP BY 使用：<br>    count 返回不同的非NULL值数目  count(*)、count(字段)<br>    sum 求和<br>    max 求最大值<br>    min 求最小值<br>    avg 求平均值<br>    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。<br><br>e. HAVING 子句，条件子句<br>    与 where 功能、用法相同，执行时机不同。<br>    where 在开始时执行检测数据，对原数据进行过滤。<br>    having 对筛选出的结果再次进行过滤。<br>    having 字段必须是查询出来的，where 字段必须是数据表存在的。<br>    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。<br>    where 不可以使用合计函数。一般需用合计函数才会用 having<br>    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。<br><br>f. ORDER BY 子句，排序子句<br>    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...<br>    升序：ASC，降序：DESC<br>    支持多个字段的排序。<br><br>g. LIMIT 子句，限制结果数量子句<br>    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。<br>    limit 起始位置, 获取条数<br>    省略第一个参数，表示从索引0开始。limit 获取条数<br><br>h. DISTINCT, ALL 选项<br>    distinct 去除重复记录<br>    默认为 all, 全部记录<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h3><blockquote>\n<p>将多个select查询的结果组合成一个结果集合。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT ... UNION [ALL|DISTINCT] SELECT ...<br>默认 DISTINCT 方式，即所有返回的行都是唯一的<br>建议，对每个SELECT查询加上小括号包裹。<br>ORDER BY 排序时，需加上 LIMIT 进行结合。<br>需要各select查询的字段数量一样。<br>每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><blockquote>\n<p>子查询需用括号包裹。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- from型<br>    from后要求是一个表，必须给子查询结果取个别名。<br>    - 简化每个查询内的条件。<br>    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。<br>    - 子查询返回一个表，表型子查询。<br>    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;<br>-- where型<br>    - 子查询返回一个值，标量子查询。<br>    - 不需要给子查询取别名。<br>    - where子查询内的表，不能直接用以更新。<br>    select * from tb where money = (select max(money) from tb);<br>    -- 列子查询<br>        如果子查询结果返回的是一列。<br>        使用 in 或 not in 完成查询<br>        exists 和 not exists 条件<br>            如果子查询返回数据，则返回1或0。常用于判断条件。<br>            select column1 from t1 where exists (select * from t2);<br>    -- 行子查询<br>        查询条件是一个行。<br>        select * from t1 where (id, gender) in (select id, gender from t2);<br>        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)<br>        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。<br><br>    -- 特殊运算符<br>    != all()    相当于 not in<br>    = some()    相当于 in。any 是 some 的别名<br>    != some()   不等同于 not in，不等于其中某一个。<br>    all, some 可以配合其他运算符一起使用。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"连接查询-join-96-96-96-mysql\"><a href=\"#连接查询-join-96-96-96-mysql\" class=\"headerlink\" title=\"连接查询(join)&#96;&#96;&#96;mysql\"></a>连接查询(join)&#96;&#96;&#96;mysql</h3><blockquote>\n<p>将多个表的字段进行连接，可以指定连接条件。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 内连接(inner join)<br>    - 默认就是内连接，可省略inner。<br>    - 只有数据存在时才能发送连接。即连接结果不能出现空行。<br>    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）<br>    也可用where表示连接条件。<br>    还有 using, 但需字段名相同。 using(字段名)<br><br>-- 交叉连接 cross join<br>   即，没有条件的内连接。<br>   select * from tb1 cross join tb2;<br>-- 外连接(outer join)<br>    - 如果数据不存在，也会出现在连接结果中。<br>    -- 左外连接 left join<br>        如果数据不存在，左表记录会出现，而右表为null填充<br>    -- 右外连接 right join<br>        如果数据不存在，右表记录会出现，而左表为null填充<br>-- 自然连接(natural join)<br>    自动判断连接条件完成连接。<br>    相当于省略了using，会自动查找相同字段名。<br>    natural join<br>    natural left join<br>    natural right join<br><br>select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据<br>load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据<br>    生成的数据默认的分隔符是制表符<br>    local未指定，则数据文件必须在服务器上<br>    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理<br>-- 控制格式<br>fields  控制字段格式<br>默认：fields terminated by &#x27;\\t&#x27; enclosed by &#x27;&#x27; escaped by &#x27;\\\\&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br>    enclosed by &#x27;char&#x27;      -- 包裹<br>    escaped by &#x27;char&#x27;       -- 转义<br>    -- 示例：<br>        SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27;<br>        FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;<br>        LINES TERMINATED BY &#x27;\\n&#x27;<br>        FROM test_table;<br>lines   控制行格式<br>默认：lines terminated by &#x27;\\n&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select语句获得的数据可以用insert插入。<br><br>可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。<br>    或者使用set语法。<br>    INSERT INTO tbl_name SET field=value,...；<br><br>可以一次性使用多个值，采用(), (), ();的形式。<br>    INSERT INTO tbl_name VALUES (), (), ();<br><br>可以在列值指定时，使用表达式。<br>    INSERT INTO tbl_name VALUES (field_value, 10+10, now());<br>可以使用一个特殊值 DEFAULT，表示该列使用默认值。<br>    INSERT INTO tbl_name VALUES (field_value, DEFAULT);<br><br>可以通过一个查询的结果，作为需要插入的值。<br>    INSERT INTO tbl_name SELECT ...;<br><br>可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。<br>    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]<br><br>按照条件删除。where<br><br>指定删除的最多记录数。limit<br><br>可以通过排序条件删除。order by + limit<br><br>支持多表删除，使用类似连接语法。<br>delete from 需要删除数据多表1，表2 using 表连接操作 条件。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"TRUNCATE\"><a href=\"#TRUNCATE\" class=\"headerlink\" title=\"TRUNCATE\"></a>TRUNCATE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">TRUNCATE [TABLE] tbl_name<br>清空数据<br>删除重建表<br><br>区别：<br>1，truncate 是删除表再创建，delete 是逐条删除<br>2，truncate 重置auto_increment的值。而delete不会<br>3，truncate 不知道删除了几条，而delete知道。<br>4，当被用于带分区的表时，truncate 会保留分区<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份与还原\"><a href=\"#备份与还原\" class=\"headerlink\" title=\"备份与还原\"></a>备份与还原</h3><blockquote>\n<p>备份，将数据的结构与表内数据保存起来。<br>利用 mysqldump 指令完成。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 导出<br>mysqldump [options] db_name [tables]<br>mysqldump [options] ---database DB1 [DB2 DB3...]<br>mysqldump [options] --all--database<br><br><br>1. 导出一张表<br>　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)<br>2. 导出多张表<br>　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)<br>3. 导出所有表<br>　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)<br>4. 导出一个库<br>　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)<br><br>可以-w携带WHERE条件<br><br>-- 导入<br>1. 在登录mysql的情况下：<br>　　source  备份文件<br>2. 在不登录的情况下<br>　　mysql -u用户名 -p密码 库名 &lt; 备份文件<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><blockquote>\n<p>什么是视图：<br>    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>    视图具有表结构文件，但不存在数据文件。<br>    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建视图<br>CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement<br>    - 视图名必须唯一，同时不能与表重名。<br>    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。<br>    - 可以指定视图执行的算法，通过ALGORITHM指定。<br>    - column_list如果存在，则数目必须等于SELECT语句检索的列数<br><br>-- 查看结构<br>    SHOW CREATE VIEW view_name<br><br>-- 删除视图<br>    - 删除视图后，数据依然存在。<br>    - 可同时删除多个视图。<br>    DROP VIEW [IF EXISTS] view_name ...<br><br>-- 修改视图结构<br>    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。<br>    ALTER VIEW view_name [(column_list)] AS select_statement<br><br>-- 视图作用<br>    1. 简化业务逻辑<br>    2. 对客户端隐藏真实的表结构<br><br>-- 视图算法(ALGORITHM)<br>    MERGE       合并<br>        将视图的查询语句，与外部查询需要先合并再执行！<br>    TEMPTABLE   临时表<br>        将视图执行完毕后，形成临时表，再做外层查询！<br>    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"事务-transaction\"><a href=\"#事务-transaction\" class=\"headerlink\" title=\"事务(transaction)\"></a>事务(transaction)</h3><blockquote>\n<p>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">- 支持连续SQL的集体成功或集体撤销。<br>- 事务是数据库在数据晚自习方面的一个功能。<br>- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。<br>- InnoDB被称为事务安全型引擎。<br><br>-- 事务开启<br>    START TRANSACTION; 或者 BEGIN;<br>    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。<br>-- 事务提交<br>    COMMIT;<br>-- 事务回滚<br>    ROLLBACK;<br>    如果部分操作发生问题，映射到事务开启前。<br><br>-- 事务的特性<br>    1. 原子性（Atomicity）<br>        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。<br>    2. 一致性（Consistency）<br>        事务前后数据的完整性必须保持一致。<br>        - 事务开始和结束时，外部数据一致<br>        - 在整个事务过程中，操作是连续的<br>    3. 隔离性（Isolation）<br>        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。<br>    4. 持久性（Durability）<br>        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。<br><br>-- 事务的实现<br>    1. 要求是事务支持的表类型<br>    2. 执行一组相关的操作前开启事务<br>    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。<br><br>-- 事务的原理<br>    利用InnoDB的自动提交(autocommit)特性完成。<br>    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。<br>    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。<br><br>-- 注意<br>    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。<br>    2. 事务不能被嵌套<br><br>-- 保存点<br>    SAVEPOINT 保存点名称 -- 设置一个事务保存点<br>    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点<br>    RELEASE SAVEPOINT 保存点名称 -- 删除保存点<br><br>-- InnoDB自动提交特性设置<br>    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。<br>    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。<br>    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，<br>        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)<br>        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h3><blockquote>\n<p>表锁定只用于防止其它客户端进行不正当地读取和写入<br>MyISAM 支持表锁，InnoDB 支持行锁</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 锁定<br>    LOCK TABLES tbl_name [AS alias]<br>-- 解锁<br>    UNLOCK TABLES<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><blockquote>\n<p>触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象<br>监听：记录的增加、修改、删除。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建触发器<br>CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt<br>    参数：<br>    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。<br>    trigger_event指明了激活触发程序的语句的类型<br>        INSERT：将新行插入表时激活触发程序<br>        UPDATE：更改某一行时激活触发程序<br>        DELETE：从表中删除某一行时激活触发程序<br>    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。<br>    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构<br><br>-- 删除<br>DROP TRIGGER [schema_name.]trigger_name<br><br>可以使用old和new代替旧的和新的数据<br>    更新操作，更新前是old，更新后是new.<br>    删除操作，只有old.<br>    增加操作，只有new.<br><br>-- 注意<br>    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。<br><br><br>-- 字符连接函数<br>concat(str1,str2,...])<br>concat_ws(separator,str1,str2,...)<br><br>-- 分支语句<br>if 条件 then<br>    执行语句<br>elseif 条件 then<br>    执行语句<br>else<br>    执行语句<br>end if;<br><br>-- 修改最外层语句结束符<br>delimiter 自定义结束符号<br>    SQL语句<br>自定义结束符号<br><br>delimiter ;     -- 修改回原来的分号<br><br>-- 语句块包裹<br>begin<br>    语句块<br>end<br><br>-- 特殊的执行<br>1. 只要添加记录，就会触发程序。<br>2. Insert into on duplicate key update 语法会触发：<br>    如果没有重复记录，会触发 before insert, after insert;<br>    如果有重复记录并更新，会触发 before insert, before update, after update;<br>    如果有重复记录但是没有发生更新，则触发 before insert, before update<br>3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SQL编程\"><a href=\"#SQL编程\" class=\"headerlink\" title=\"SQL编程\"></a>SQL编程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">--// 局部变量 ----------<br>-- 变量声明<br>    declare var_name[,...] type [default value]<br>    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。<br><br>-- 赋值<br>    使用 set 和 select into 语句为变量赋值。<br><br>    - 注意：在函数内是可以使用全局变量（用户自定义的变量）<br><br><br>--// 全局变量 ----------<br>-- 定义、赋值<br>set 语句可以定义并为变量赋值。<br>set @var = value;<br>也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。<br>还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。<br>select @var:=20;<br>select @v1:=id, @v2=name from t1 limit 1;<br>select * from tbl_name where @var:=30;<br><br>select into 可以将表中查询获得的数据赋给变量。<br>    -| select max(height) into @max_height from tb;<br><br>-- 自定义变量名<br>为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。<br>@var=10;<br><br>    - 变量被定义后，在整个会话周期都有效（登录到退出）<br><br><br>--// 控制结构 ----------<br>-- if语句<br>if search_condition then<br>    statement_list   <br>[elseif search_condition then<br>    statement_list]<br>...<br>[else<br>    statement_list]<br>end if;<br><br>-- case语句<br>CASE value WHEN [compare-value] THEN result<br>[WHEN [compare-value] THEN result ...]<br>[ELSE result]<br>END<br><br><br>-- while循环<br>[begin_label:] while search_condition do<br>    statement_list<br>end while [end_label];<br><br>- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。<br><br>    -- 退出循环<br>        退出整个循环 leave<br>        退出当前循环 iterate<br>        通过退出的标签决定退出哪个循环<br><br><br>--// 内置函数 ----------<br>-- 数值函数<br>abs(x)          -- 绝对值 abs(-10.9) = 10<br>format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46<br>ceil(x)         -- 向上取整 ceil(10.1) = 11<br>floor(x)        -- 向下取整 floor (10.1) = 10<br>round(x)        -- 四舍五入去整<br>mod(m, n)       -- m%n m mod n 求余 10%3=1<br>pi()            -- 获得圆周率<br>pow(m, n)       -- m^n<br>sqrt(x)         -- 算术平方根<br>rand()          -- 随机数<br>truncate(x, d)  -- 截取d位小数<br><br>-- 时间日期函数<br>now(), current_timestamp();     -- 当前日期时间<br>current_date();                 -- 当前日期<br>current_time();                 -- 当前时间<br>date(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取日期部分<br>time(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取时间部分<br>date_format(&#x27;yyyy-mm-dd hh:ii:ss&#x27;, &#x27;%d %y %a %d %m %b %j&#x27;); -- 格式化时间<br>unix_timestamp();               -- 获得unix时间戳<br>from_unixtime();                -- 从时间戳获得时间<br><br>-- 字符串函数<br>length(string)          -- string长度，字节<br>char_length(string)     -- string的字符个数<br>substring(str, position [,length])      -- 从str的position开始,取length个字符<br>replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str<br>instr(string ,substring)    -- 返回substring首次在string中出现的位置<br>concat(string [,...])   -- 连接字串<br>charset(str)            -- 返回字串字符集<br>lcase(string)           -- 转换成小写<br>left(string, length)    -- 从string2中的左边起取length个字符<br>load_file(file_name)    -- 从文件读取内容<br>locate(substring, string [,start_position]) -- 同instr,但可指定开始位置<br>lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length<br>ltrim(string)           -- 去除前端空格<br>repeat(string, count)   -- 重复count次<br>rpad(string, length, pad)   --在str后用pad补充,直到长度为length<br>rtrim(string)           -- 去除后端空格<br>strcmp(string1 ,string2)    -- 逐字符比较两字串大小<br><br>-- 流程函数<br>case when [condition] then result [when [condition] then result ...] [else result] end   多分支<br>if(expr1,expr2,expr3)  双分支。<br><br>-- 聚合函数<br>count()<br>sum();<br>max();<br>min();<br>avg();<br>group_concat()<br><br>-- 其他常用函数<br>md5();<br>default();<br><br>--// 存储函数，自定义函数 ----------<br>-- 新建<br>    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型<br>        函数体<br><br>    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。<br>    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。<br>    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。<br>    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。<br>    - 多条语句应该使用 begin...end 语句块包含。<br>    - 一定要有 return 返回值语句。<br><br>-- 删除<br>    DROP FUNCTION [IF EXISTS] function_name;<br><br>-- 查看<br>    SHOW FUNCTION STATUS LIKE &#x27;partten&#x27;<br>    SHOW CREATE FUNCTION function_name;<br><br>-- 修改<br>    ALTER FUNCTION function_name 函数选项<br><br><br>--// 存储过程，自定义功能 ----------<br>-- 定义<br>存储存储过程 是一段代码（过程），存储在数据库中的sql组成。<br>一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。<br>而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。<br><br>-- 创建<br>CREATE PROCEDURE sp_name (参数列表)<br>    过程体<br><br>参数列表：不同于函数的参数列表，需要指明参数类型<br>IN，表示输入型<br>OUT，表示输出型<br>INOUT，表示混合型<br><br>注意，没有返回值。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><blockquote>\n<p>存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。<br>调用：CALL 过程名</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 注意<br>- 没有返回值。<br>- 只能单独调用，不可夹杂在其他语句中<br><br>-- 参数<br>IN|OUT|INOUT 参数名 数据类型<br>IN      输入：在调用过程中，将数据输入到过程体内部的参数<br>OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端<br>INOUT   输入输出：既可输入，也可输出<br><br>-- 语法<br>CREATE PROCEDURE 过程名 (参数列表)<br>BEGIN<br>    过程体<br>END<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"用户和权限管理\"><a href=\"#用户和权限管理\" class=\"headerlink\" title=\"用户和权限管理\"></a>用户和权限管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- root密码重置<br>1. 停止MySQL服务<br>2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;<br>    [Windows] mysqld --skip-grant-tables<br>3. use mysql;<br>4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;<br>5. FLUSH PRIVILEGES;<br><br>用户信息表：mysql.user<br>-- 刷新权限<br>FLUSH PRIVILEGES;<br>-- 增加用户<br>CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)<br>    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。<br>    - 只能创建用户，不能赋予权限。<br>    - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;<br>    - 密码也需引号，纯数字密码也要加引号<br>    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD<br>-- 重命名用户<br>RENAME USER old_user TO new_user<br>-- 设置密码<br>SET PASSWORD = PASSWORD(&#x27;密码&#x27;)  -- 为当前用户设置密码<br>SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;) -- 为指定用户设置密码<br>-- 删除用户<br>DROP USER 用户名<br>-- 分配权限/添加用户<br>GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#x27;password&#x27;]<br>    - all privileges 表示所有权限<br>    - *.* 表示所有库的所有表<br>    - 库名.表名 表示某库下面的某表<br>    GRANT ALL PRIVILEGES ON `pms`.* TO &#x27;pms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;pms0817&#x27;;<br>-- 查看权限<br>SHOW GRANTS FOR 用户名<br>    -- 查看当前用户权限<br>    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();<br>-- 撤消权限<br>REVOKE 权限列表 ON 表名 FROM 用户名<br>REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限<br>-- 权限层级<br>-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。<br>全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user<br>    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。<br>数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host<br>    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。<br>表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv<br>    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。<br>列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv<br>    当使用REVOKE时，您必须指定与被授权列相同的列。<br>-- 权限列表<br>ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限<br>ALTER   -- 允许使用ALTER TABLE<br>ALTER ROUTINE   -- 更改或取消已存储的子程序<br>CREATE  -- 允许使用CREATE TABLE<br>CREATE ROUTINE  -- 创建已存储的子程序<br>CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE<br>CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。<br>CREATE VIEW     -- 允许使用CREATE VIEW<br>DELETE  -- 允许使用DELETE<br>DROP    -- 允许使用DROP TABLE<br>EXECUTE     -- 允许用户运行已存储的子程序<br>FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE<br>INDEX   -- 允许使用CREATE INDEX和DROP INDEX<br>INSERT  -- 允许使用INSERT<br>LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES<br>PROCESS     -- 允许使用SHOW FULL PROCESSLIST<br>REFERENCES  -- 未被实施<br>RELOAD  -- 允许使用FLUSH<br>REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址<br>REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）<br>SELECT  -- 允许使用SELECT<br>SHOW DATABASES  -- 显示所有数据库<br>SHOW VIEW   -- 允许使用SHOW CREATE VIEW<br>SHUTDOWN    -- 允许使用mysqladmin shutdown<br>SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。<br>UPDATE  -- 允许使用UPDATE<br>USAGE   -- “无权限”的同义词<br>GRANT OPTION    -- 允许授予权限<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表维护\"><a href=\"#表维护\" class=\"headerlink\" title=\"表维护\"></a>表维护</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 分析和存储表的关键字分布<br>ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...<br>-- 检查一个或多个表是否有错误<br>CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;<br>-- 整理数据文件的碎片<br>OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！<br>2. 每个库目录存在一个保存当前数据库的选项文件db.opt。<br>3. 注释：<br>    单行注释 # 注释内容<br>    多行注释 /* 注释内容 */<br>    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)<br>4. 模式通配符：<br>    _   任意单个字符<br>    %   任意多个字符，甚至包括零字符<br>    单引号需要进行转义 \\&#x27;<br>5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\\G&quot;, &quot;\\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。<br>6. SQL对大小写不敏感<br>7. 清除已有语句：\\c<br></code></pre></td></tr></table></figure>\n\n<p>原文连接：<a href=\"https://shockerli.net/post/1000-line-mysql-note/\">https://shockerli.net/post/1000-line-mysql-note/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL-学习笔记\"><a href=\"#MySQL-学习笔记\" class=\"headerlink\" title=\"MySQL 学习笔记\"></a>MySQL 学习笔记</h1><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 查看当前数据库<br>    SELECT DATABASE();<br>-- 显示当前时间、用户名、数据库版本<br>    SELECT now(), user(), version();<br>-- 创建库<br>    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项<br>    数据库选项：<br>        CHARACTER SET charset_name<br>        COLLATE collation_name<br>-- 查看已有库<br>    SHOW DATABASES[ LIKE &#x27;PATTERN&#x27;]<br>-- 查看当前库信息<br>    SHOW CREATE DATABASE 数据库名<br>-- 修改库的选项信息<br>    ALTER DATABASE 库名 选项信息<br>-- 删除库<br>    DROP DATABASE[ IF EXISTS] 数据库名<br>        同时删除该数据库相关的目录及其目录内容<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表的操作\"><a href=\"#表的操作\" class=\"headerlink\" title=\"表的操作\"></a>表的操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建表<br>    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]<br>        每个字段必须有数据类型<br>        最后一个字段后不能有逗号<br>        TEMPORARY 临时表，会话结束时表自动消失<br>        对于字段的定义：<br>            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &#x27;string&#x27;]<br>-- 表选项<br>    -- 字符集<br>        CHARSET = charset_name<br>        如果表没有设定，则使用数据库字符集<br>    -- 存储引擎<br>        ENGINE = engine_name<br>        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同<br>        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive<br>        不同的引擎在保存表的结构和数据时采用不同的方式<br>        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引<br>        InnoDB表文件含义：.frm表定义，表空间数据和日志文件<br>        SHOW ENGINES -- 显示存储引擎的状态信息<br>        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息<br>    -- 自增起始数<br>    \tAUTO_INCREMENT = 行数<br>    -- 数据文件目录<br>        DATA DIRECTORY = &#x27;目录&#x27;<br>    -- 索引文件目录<br>        INDEX DIRECTORY = &#x27;目录&#x27;<br>    -- 表注释<br>        COMMENT = &#x27;string&#x27;<br>    -- 分区选项<br>        PARTITION BY ... (详细见手册)<br>-- 查看所有表<br>    SHOW TABLES[ LIKE &#x27;pattern&#x27;]<br>    SHOW TABLES FROM 表名<br>-- 查看表机构<br>    SHOW CREATE TABLE 表名 （信息更详细）<br>    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &#x27;PATTERN&#x27;]<br>    SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;]<br>-- 修改表<br>    -- 修改表本身的选项<br>        ALTER TABLE 表名 表的选项<br>        eg: ALTER TABLE 表名 ENGINE=MYISAM;<br>    -- 对表进行重命名<br>        RENAME TABLE 原表名 TO 新表名<br>        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）<br>        -- RENAME可以交换两个表名<br>    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）<br>        ALTER TABLE 表名 操作名<br>        -- 操作名<br>            ADD[ COLUMN] 字段定义       -- 增加字段<br>                AFTER 字段名          -- 表示增加在该字段名后面<br>                FIRST               -- 表示增加在第一个<br>            ADD PRIMARY KEY(字段名)   -- 创建主键<br>            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引<br>            ADD INDEX [索引名] (字段名) -- 创建普通索引<br>            DROP[ COLUMN] 字段名      -- 删除字段<br>            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)<br>            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改<br>            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)<br>            DROP INDEX 索引名 -- 删除索引<br>            DROP FOREIGN KEY 外键    -- 删除外键<br><br>-- 删除表<br>    DROP TABLE[ IF EXISTS] 表名 ...<br>-- 清空表数据<br>    TRUNCATE [TABLE] 表名<br>-- 复制表结构<br>    CREATE TABLE 表名 LIKE 要复制的表名<br>-- 复制表结构和数据<br>    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名<br>-- 检查表是否有错误<br>    CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>-- 优化表<br>    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br>-- 修复表<br>    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]<br>-- 分析表<br>    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 增<br>    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]<br>        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。<br>        -- 可同时插入多条数据记录！<br>        REPLACE 与 INSERT 完全一样，可互换。<br>    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]<br>-- 查<br>    SELECT 字段列表 FROM 表名[ 其他子句]<br>        -- 可来自多个表的多个字段<br>        -- 其他子句可以不使用<br>        -- 字段列表可以用*代替，表示所有字段<br>-- 删<br>    DELETE FROM 表名[ 删除条件子句]<br>        没有条件子句，则会删除全部<br>-- 改<br>    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符集编码\"><a href=\"#字符集编码\" class=\"headerlink\" title=\"字符集编码\"></a>字符集编码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- MySQL、数据库、表、字段均可设置编码<br>-- 数据编码与客户端编码不需一致<br>SHOW VARIABLES LIKE &#x27;character_set_%&#x27;   -- 查看所有字符集编码项<br>    character_set_client        客户端向服务器发送数据时使用的编码<br>    character_set_results       服务器端将结果返回给客户端所使用的编码<br>    character_set_connection    连接层编码<br>SET 变量名 = 变量值<br>    SET character_set_client = gbk;<br>    SET character_set_results = gbk;<br>    SET character_set_connection = gbk;<br>SET NAMES GBK;  -- 相当于完成以上三个设置<br>-- 校对集<br>    校对集用以排序<br>    SHOW CHARACTER SET [LIKE &#x27;pattern&#x27;]/SHOW CHARSET [LIKE &#x27;pattern&#x27;]   查看所有字符集<br>    SHOW COLLATION [LIKE &#x27;pattern&#x27;]     查看所有校对集<br>    CHARSET 字符集编码     设置字符集编码<br>    COLLATE 校对集编码     设置校对集编码<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数据类型（列类型）\"><a href=\"#数据类型（列类型）\" class=\"headerlink\" title=\"数据类型（列类型）\"></a>数据类型（列类型）</h3><p><strong>1. 数值类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. 整型 ----------<br>    类型         字节     范围（有符号位）<br>    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255<br>    smallint    2字节    -32768 ~ 32767<br>    mediumint   3字节    -8388608 ~ 8388607<br>    int         4字节<br>    bigint      8字节<br><br>    int(M)  M表示总位数<br>    - 默认存在符号位，unsigned 属性修改<br>    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改<br>        例：int(5)   插入一个数&#x27;123&#x27;，补填后为&#x27;00123&#x27;<br>    - 在满足要求的情况下，越小越好。<br>    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。<br><br>-- b. 浮点型 ----------<br>    类型             字节     范围<br>    float(单精度)     4字节<br>    double(双精度)    8字节<br>    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。<br>        不同于整型，前后均会补填0.<br>    定义浮点型时，需指定总位数和小数位数。<br>        float(M, D)     double(M, D)<br>        M表示总位数，D表示小数位数。<br>        M和D的大小会决定浮点数的范围。不同于整型的固定范围。<br>        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。<br>        支持科学计数法表示。<br>        浮点数表示近似值。<br><br>-- c. 定点数 ----------<br>    decimal -- 可变长度<br>    decimal(M, D)   M也表示总位数，D表示小数位数。<br>    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。<br>    将浮点数转换为字符串来保存，每9位数字保存为4个字节。<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. 字符串类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- a. char, varchar ----------<br>    char    定长字符串，速度快，但浪费空间<br>    varchar 变长字符串，速度慢，但节省空间<br>    M表示能存储的最大长度，此长度是字符数，非字节数。<br>    不同的编码，所占用的空间不同。<br>    char,最多255个字符，与编码无关。<br>    varchar,最多65535字符，与编码有关。<br>    一条有效记录最大不能超过65535个字节。<br>        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符<br>    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。<br>    varchar 的最大有效长度由最大行大小和使用的字符集确定。<br>    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。<br>    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3<br><br>-- b. blob, text ----------<br>    blob 二进制字符串（字节字符串）<br>        tinyblob, blob, mediumblob, longblob<br>    text 非二进制字符串（字符字符串）<br>        tinytext, text, mediumtext, longtext<br>    text 在定义时，不需要定义长度，也不会计算总长度。<br>    text 类型在定义时，不可给default值<br><br>-- c. binary, varbinary ----------<br>    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。<br>    char, varchar, text 对应 binary, varbinary, blob.<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. 日期时间类型</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。<br>datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59<br>date        3字节    日期         1000-01-01 到 9999-12-31<br>timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07<br>time        3字节    时间         -838:59:59 到 838:59:59<br>year        1字节    年份         1901 - 2155<br><br>datetime    YYYY-MM-DD hh:mm:ss<br>timestamp   YY-MM-DD hh:mm:ss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>            YYYYMMDDhhmmss<br>            YYMMDDhhmmss<br>date        YYYY-MM-DD<br>            YY-MM-DD<br>            YYYYMMDD<br>            YYMMDD<br>            YYYYMMDD<br>            YYMMDD<br>time        hh:mm:ss<br>            hhmmss<br>            hhmmss<br>year        YYYY<br>            YY<br>            YYYY<br>            YY<br></code></pre></td></tr></table></figure>\n\n<p><strong>4. 枚举和集合</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 枚举(enum) ----------<br>enum(val1, val2, val3...)<br>    在已知的值中进行单选。最大数量为65535.<br>    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。<br>    表现为字符串类型，存储却是整型。<br>    NULL值的索引是NULL。<br>    空字符串错误值的索引值是0。<br><br>-- 集合（set） ----------<br>set(val1, val2, val3...)<br>    create table tab ( gender set(&#x27;男&#x27;, &#x27;女&#x27;, &#x27;无&#x27;) );<br>    insert into tab values (&#x27;男, 女&#x27;);<br>    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。<br>    当创建表时，SET成员值的尾部空格将自动被删除。<br><br>/* 选择类型 */<br>-- PHP角度<br>1. 功能满足<br>2. 存储空间尽量小，处理效率更高<br>3. 考虑兼容问题<br></code></pre></td></tr></table></figure>\n\n<p><strong>IP存储</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 只需存储，可用字符串<br>2. 如果需计算，查找等，可存储为4个字节的无符号int，即unsigned<br>    1) PHP函数转换<br>        ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。<br>        利用sprintf函数格式化字符串<br>        sprintf(&quot;%u&quot;, ip2long(&#x27;192.168.3.134&#x27;));<br>        然后用long2ip将整型转回IP字符串<br>    2) MySQL函数转换(无符号整型，UNSIGNED)<br>        INET_ATON(&#x27;127.0.0.1&#x27;) 将IP转为整型<br>        INET_NTOA(2130706433) 将整型转为IP<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列属性（列约束）\"><a href=\"#列属性（列约束）\" class=\"headerlink\" title=\"列属性（列约束）\"></a>列属性（列约束）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. PRIMARY 主键<br>    - 能唯一标识记录的字段，可以作为主键。<br>    - 一个表只能有一个主键。<br>    - 主键具有唯一性。<br>    - 声明字段时，用 primary key 标识。<br>        也可以在字段列表之后声明<br>            例：create table tab ( id int, stu varchar(10), primary key (id));<br>    - 主键字段的值不能为null。<br>    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。<br>        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));<br><br>2. UNIQUE 唯一索引（唯一约束）<br>    使得某字段的值也不能重复。<br><br>3. NULL 约束<br>    null不是数据类型，是列的一个属性。<br>    表示当前列是否可以为null，表示什么都没有。<br>    null, 允许为空。默认。<br>    not null, 不允许为空。<br>    insert into tab values (null, &#x27;val&#x27;);<br>        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null<br><br>4. DEFAULT 默认值属性<br>    当前字段的默认值。<br>    insert into tab values (default, &#x27;val&#x27;);    -- 此时表示强制使用默认值。<br>    create table tab ( add_time timestamp default current_timestamp );<br>        -- 表示将当前时间的时间戳设为默认值。<br>        current_date, current_time<br><br>5. AUTO_INCREMENT 自动增长约束<br>    自动增长必须为索引（主键或unique）<br>    只能存在一个字段为自动增长。<br>    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;<br><br>6. COMMENT 注释<br>    例：create table tab ( id int ) comment &#x27;注释内容&#x27;;<br><br>7. FOREIGN KEY 外键约束<br>    用于限制主表与从表数据完整性。<br>    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);<br>        -- 将表t1的t1_id外键关联到表t2的id字段。<br>        -- 每个外键都有一个名字，可以通过 constraint 指定<br><br>    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。<br><br>    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。<br><br>    MySQL中，可以对InnoDB引擎使用外键约束：<br>    语法：<br>    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]<br>    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。<br><br>    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。<br>    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：<br>    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。<br>    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。<br>    3. restrict，拒绝父表删除和更新。<br><br>    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"建表规范\"><a href=\"#建表规范\" class=\"headerlink\" title=\"建表规范\"></a>建表规范</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- Normal Format, NF<br>    - 每个表保存一个实体信息<br>    - 每个具有一个ID字段作为主键<br>    - ID主键 + 原子表<br>-- 1NF, 第一范式<br>    字段不能再分，就满足第一范式。<br>-- 2NF, 第二范式<br>    满足第一范式的前提下，不能出现部分依赖。<br>    消除符合主键就可以避免部分依赖。增加单列关键字。<br>-- 3NF, 第三范式<br>    满足第二范式的前提下，不能出现传递依赖。<br>    某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。<br>    将一个实体信息的数据放在一个表内实现。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT<br><br>a. select_expr<br>    -- 可以用 * 表示所有字段。<br>        select * from tb;<br>    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）<br>        select stu, 29+25, now() from tb;<br>    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。<br>        - 使用 as 关键字，也可省略 as.<br>        select stu+10 as add10 from tb;<br><br>b. FROM 子句<br>    用于标识查询来源。<br>    -- 可以为表起别名。使用as关键字。<br>        SELECT * FROM tb1 AS tt, tb2 AS bb;<br>    -- from子句后，可以同时出现多个表。<br>        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。<br>        SELECT * FROM tb1, tb2;<br>    -- 向优化符提示如何选择索引<br>        USE INDEX、IGNORE INDEX、FORCE INDEX<br>        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;<br>        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;<br><br>c. WHERE 子句<br>    -- 从from获得的数据源中进行筛选。<br>    -- 整型1表示真，0表示假。<br>    -- 表达式由运算符和运算数组成。<br>        -- 运算数：变量（字段）、值、函数返回值<br>        -- 运算符：<br>            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,<br>            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor<br>            is/is not 加上ture/false/unknown，检验某个值的真假<br>            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较<br><br>d. GROUP BY 子句, 分组子句<br>    GROUP BY 字段/别名 [排序方式]<br>    分组后会进行排序。升序：ASC，降序：DESC<br><br>    以下[合计函数]需配合 GROUP BY 使用：<br>    count 返回不同的非NULL值数目  count(*)、count(字段)<br>    sum 求和<br>    max 求最大值<br>    min 求最小值<br>    avg 求平均值<br>    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。<br><br>e. HAVING 子句，条件子句<br>    与 where 功能、用法相同，执行时机不同。<br>    where 在开始时执行检测数据，对原数据进行过滤。<br>    having 对筛选出的结果再次进行过滤。<br>    having 字段必须是查询出来的，where 字段必须是数据表存在的。<br>    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。<br>    where 不可以使用合计函数。一般需用合计函数才会用 having<br>    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。<br><br>f. ORDER BY 子句，排序子句<br>    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...<br>    升序：ASC，降序：DESC<br>    支持多个字段的排序。<br><br>g. LIMIT 子句，限制结果数量子句<br>    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。<br>    limit 起始位置, 获取条数<br>    省略第一个参数，表示从索引0开始。limit 获取条数<br><br>h. DISTINCT, ALL 选项<br>    distinct 去除重复记录<br>    默认为 all, 全部记录<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"UNION\"><a href=\"#UNION\" class=\"headerlink\" title=\"UNION\"></a>UNION</h3><blockquote>\n<p>将多个select查询的结果组合成一个结果集合。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SELECT ... UNION [ALL|DISTINCT] SELECT ...<br>默认 DISTINCT 方式，即所有返回的行都是唯一的<br>建议，对每个SELECT查询加上小括号包裹。<br>ORDER BY 排序时，需加上 LIMIT 进行结合。<br>需要各select查询的字段数量一样。<br>每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><blockquote>\n<p>子查询需用括号包裹。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- from型<br>    from后要求是一个表，必须给子查询结果取个别名。<br>    - 简化每个查询内的条件。<br>    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。<br>    - 子查询返回一个表，表型子查询。<br>    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;<br>-- where型<br>    - 子查询返回一个值，标量子查询。<br>    - 不需要给子查询取别名。<br>    - where子查询内的表，不能直接用以更新。<br>    select * from tb where money = (select max(money) from tb);<br>    -- 列子查询<br>        如果子查询结果返回的是一列。<br>        使用 in 或 not in 完成查询<br>        exists 和 not exists 条件<br>            如果子查询返回数据，则返回1或0。常用于判断条件。<br>            select column1 from t1 where exists (select * from t2);<br>    -- 行子查询<br>        查询条件是一个行。<br>        select * from t1 where (id, gender) in (select id, gender from t2);<br>        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)<br>        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。<br><br>    -- 特殊运算符<br>    != all()    相当于 not in<br>    = some()    相当于 in。any 是 some 的别名<br>    != some()   不等同于 not in，不等于其中某一个。<br>    all, some 可以配合其他运算符一起使用。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"连接查询-join-96-96-96-mysql\"><a href=\"#连接查询-join-96-96-96-mysql\" class=\"headerlink\" title=\"连接查询(join)&#96;&#96;&#96;mysql\"></a>连接查询(join)&#96;&#96;&#96;mysql</h3><blockquote>\n<p>将多个表的字段进行连接，可以指定连接条件。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 内连接(inner join)<br>    - 默认就是内连接，可省略inner。<br>    - 只有数据存在时才能发送连接。即连接结果不能出现空行。<br>    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）<br>    也可用where表示连接条件。<br>    还有 using, 但需字段名相同。 using(字段名)<br><br>-- 交叉连接 cross join<br>   即，没有条件的内连接。<br>   select * from tb1 cross join tb2;<br>-- 外连接(outer join)<br>    - 如果数据不存在，也会出现在连接结果中。<br>    -- 左外连接 left join<br>        如果数据不存在，左表记录会出现，而右表为null填充<br>    -- 右外连接 right join<br>        如果数据不存在，右表记录会出现，而左表为null填充<br>-- 自然连接(natural join)<br>    自动判断连接条件完成连接。<br>    相当于省略了using，会自动查找相同字段名。<br>    natural join<br>    natural left join<br>    natural right join<br><br>select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * into outfile 文件地址 [控制格式] from 表名;   -- 导出表数据<br>load data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式]; -- 导入数据<br>    生成的数据默认的分隔符是制表符<br>    local未指定，则数据文件必须在服务器上<br>    replace 和 ignore 关键词控制对现有的唯一键记录的重复的处理<br>-- 控制格式<br>fields  控制字段格式<br>默认：fields terminated by &#x27;\\t&#x27; enclosed by &#x27;&#x27; escaped by &#x27;\\\\&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br>    enclosed by &#x27;char&#x27;      -- 包裹<br>    escaped by &#x27;char&#x27;       -- 转义<br>    -- 示例：<br>        SELECT a,b,a+b INTO OUTFILE &#x27;/tmp/result.text&#x27;<br>        FIELDS TERMINATED BY &#x27;,&#x27; OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;<br>        LINES TERMINATED BY &#x27;\\n&#x27;<br>        FROM test_table;<br>lines   控制行格式<br>默认：lines terminated by &#x27;\\n&#x27;<br>    terminated by &#x27;string&#x27;  -- 终止<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select语句获得的数据可以用insert插入。<br><br>可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。<br>    或者使用set语法。<br>    INSERT INTO tbl_name SET field=value,...；<br><br>可以一次性使用多个值，采用(), (), ();的形式。<br>    INSERT INTO tbl_name VALUES (), (), ();<br><br>可以在列值指定时，使用表达式。<br>    INSERT INTO tbl_name VALUES (field_value, 10+10, now());<br>可以使用一个特殊值 DEFAULT，表示该列使用默认值。<br>    INSERT INTO tbl_name VALUES (field_value, DEFAULT);<br><br>可以通过一个查询的结果，作为需要插入的值。<br>    INSERT INTO tbl_name SELECT ...;<br><br>可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。<br>    INSERT INTO tbl_name VALUES/SET/SELECT ON DUPLICATE KEY UPDATE 字段=值, …;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">DELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]<br><br>按照条件删除。where<br><br>指定删除的最多记录数。limit<br><br>可以通过排序条件删除。order by + limit<br><br>支持多表删除，使用类似连接语法。<br>delete from 需要删除数据多表1，表2 using 表连接操作 条件。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"TRUNCATE\"><a href=\"#TRUNCATE\" class=\"headerlink\" title=\"TRUNCATE\"></a>TRUNCATE</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">TRUNCATE [TABLE] tbl_name<br>清空数据<br>删除重建表<br><br>区别：<br>1，truncate 是删除表再创建，delete 是逐条删除<br>2，truncate 重置auto_increment的值。而delete不会<br>3，truncate 不知道删除了几条，而delete知道。<br>4，当被用于带分区的表时，truncate 会保留分区<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"备份与还原\"><a href=\"#备份与还原\" class=\"headerlink\" title=\"备份与还原\"></a>备份与还原</h3><blockquote>\n<p>备份，将数据的结构与表内数据保存起来。<br>利用 mysqldump 指令完成。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 导出<br>mysqldump [options] db_name [tables]<br>mysqldump [options] ---database DB1 [DB2 DB3...]<br>mysqldump [options] --all--database<br><br><br>1. 导出一张表<br>　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)<br>2. 导出多张表<br>　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)<br>3. 导出所有表<br>　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)<br>4. 导出一个库<br>　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)<br><br>可以-w携带WHERE条件<br><br>-- 导入<br>1. 在登录mysql的情况下：<br>　　source  备份文件<br>2. 在不登录的情况下<br>　　mysql -u用户名 -p密码 库名 &lt; 备份文件<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><blockquote>\n<p>什么是视图：<br>    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>    视图具有表结构文件，但不存在数据文件。<br>    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建视图<br>CREATE [OR REPLACE] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] VIEW view_name [(column_list)] AS select_statement<br>    - 视图名必须唯一，同时不能与表重名。<br>    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。<br>    - 可以指定视图执行的算法，通过ALGORITHM指定。<br>    - column_list如果存在，则数目必须等于SELECT语句检索的列数<br><br>-- 查看结构<br>    SHOW CREATE VIEW view_name<br><br>-- 删除视图<br>    - 删除视图后，数据依然存在。<br>    - 可同时删除多个视图。<br>    DROP VIEW [IF EXISTS] view_name ...<br><br>-- 修改视图结构<br>    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。<br>    ALTER VIEW view_name [(column_list)] AS select_statement<br><br>-- 视图作用<br>    1. 简化业务逻辑<br>    2. 对客户端隐藏真实的表结构<br><br>-- 视图算法(ALGORITHM)<br>    MERGE       合并<br>        将视图的查询语句，与外部查询需要先合并再执行！<br>    TEMPTABLE   临时表<br>        将视图执行完毕后，形成临时表，再做外层查询！<br>    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"事务-transaction\"><a href=\"#事务-transaction\" class=\"headerlink\" title=\"事务(transaction)\"></a>事务(transaction)</h3><blockquote>\n<p>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">- 支持连续SQL的集体成功或集体撤销。<br>- 事务是数据库在数据晚自习方面的一个功能。<br>- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。<br>- InnoDB被称为事务安全型引擎。<br><br>-- 事务开启<br>    START TRANSACTION; 或者 BEGIN;<br>    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。<br>-- 事务提交<br>    COMMIT;<br>-- 事务回滚<br>    ROLLBACK;<br>    如果部分操作发生问题，映射到事务开启前。<br><br>-- 事务的特性<br>    1. 原子性（Atomicity）<br>        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。<br>    2. 一致性（Consistency）<br>        事务前后数据的完整性必须保持一致。<br>        - 事务开始和结束时，外部数据一致<br>        - 在整个事务过程中，操作是连续的<br>    3. 隔离性（Isolation）<br>        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。<br>    4. 持久性（Durability）<br>        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。<br><br>-- 事务的实现<br>    1. 要求是事务支持的表类型<br>    2. 执行一组相关的操作前开启事务<br>    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。<br><br>-- 事务的原理<br>    利用InnoDB的自动提交(autocommit)特性完成。<br>    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。<br>    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。<br><br>-- 注意<br>    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。<br>    2. 事务不能被嵌套<br><br>-- 保存点<br>    SAVEPOINT 保存点名称 -- 设置一个事务保存点<br>    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点<br>    RELEASE SAVEPOINT 保存点名称 -- 删除保存点<br><br>-- InnoDB自动提交特性设置<br>    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。<br>    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。<br>    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，<br>        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)<br>        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h3><blockquote>\n<p>表锁定只用于防止其它客户端进行不正当地读取和写入<br>MyISAM 支持表锁，InnoDB 支持行锁</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 锁定<br>    LOCK TABLES tbl_name [AS alias]<br>-- 解锁<br>    UNLOCK TABLES<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h3><blockquote>\n<p>触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象<br>监听：记录的增加、修改、删除。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 创建触发器<br>CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt<br>    参数：<br>    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。<br>    trigger_event指明了激活触发程序的语句的类型<br>        INSERT：将新行插入表时激活触发程序<br>        UPDATE：更改某一行时激活触发程序<br>        DELETE：从表中删除某一行时激活触发程序<br>    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。<br>    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构<br><br>-- 删除<br>DROP TRIGGER [schema_name.]trigger_name<br><br>可以使用old和new代替旧的和新的数据<br>    更新操作，更新前是old，更新后是new.<br>    删除操作，只有old.<br>    增加操作，只有new.<br><br>-- 注意<br>    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。<br><br><br>-- 字符连接函数<br>concat(str1,str2,...])<br>concat_ws(separator,str1,str2,...)<br><br>-- 分支语句<br>if 条件 then<br>    执行语句<br>elseif 条件 then<br>    执行语句<br>else<br>    执行语句<br>end if;<br><br>-- 修改最外层语句结束符<br>delimiter 自定义结束符号<br>    SQL语句<br>自定义结束符号<br><br>delimiter ;     -- 修改回原来的分号<br><br>-- 语句块包裹<br>begin<br>    语句块<br>end<br><br>-- 特殊的执行<br>1. 只要添加记录，就会触发程序。<br>2. Insert into on duplicate key update 语法会触发：<br>    如果没有重复记录，会触发 before insert, after insert;<br>    如果有重复记录并更新，会触发 before insert, before update, after update;<br>    如果有重复记录但是没有发生更新，则触发 before insert, before update<br>3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"SQL编程\"><a href=\"#SQL编程\" class=\"headerlink\" title=\"SQL编程\"></a>SQL编程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">--// 局部变量 ----------<br>-- 变量声明<br>    declare var_name[,...] type [default value]<br>    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。<br><br>-- 赋值<br>    使用 set 和 select into 语句为变量赋值。<br><br>    - 注意：在函数内是可以使用全局变量（用户自定义的变量）<br><br><br>--// 全局变量 ----------<br>-- 定义、赋值<br>set 语句可以定义并为变量赋值。<br>set @var = value;<br>也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。<br>还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。<br>select @var:=20;<br>select @v1:=id, @v2=name from t1 limit 1;<br>select * from tbl_name where @var:=30;<br><br>select into 可以将表中查询获得的数据赋给变量。<br>    -| select max(height) into @max_height from tb;<br><br>-- 自定义变量名<br>为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。<br>@var=10;<br><br>    - 变量被定义后，在整个会话周期都有效（登录到退出）<br><br><br>--// 控制结构 ----------<br>-- if语句<br>if search_condition then<br>    statement_list   <br>[elseif search_condition then<br>    statement_list]<br>...<br>[else<br>    statement_list]<br>end if;<br><br>-- case语句<br>CASE value WHEN [compare-value] THEN result<br>[WHEN [compare-value] THEN result ...]<br>[ELSE result]<br>END<br><br><br>-- while循环<br>[begin_label:] while search_condition do<br>    statement_list<br>end while [end_label];<br><br>- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。<br><br>    -- 退出循环<br>        退出整个循环 leave<br>        退出当前循环 iterate<br>        通过退出的标签决定退出哪个循环<br><br><br>--// 内置函数 ----------<br>-- 数值函数<br>abs(x)          -- 绝对值 abs(-10.9) = 10<br>format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46<br>ceil(x)         -- 向上取整 ceil(10.1) = 11<br>floor(x)        -- 向下取整 floor (10.1) = 10<br>round(x)        -- 四舍五入去整<br>mod(m, n)       -- m%n m mod n 求余 10%3=1<br>pi()            -- 获得圆周率<br>pow(m, n)       -- m^n<br>sqrt(x)         -- 算术平方根<br>rand()          -- 随机数<br>truncate(x, d)  -- 截取d位小数<br><br>-- 时间日期函数<br>now(), current_timestamp();     -- 当前日期时间<br>current_date();                 -- 当前日期<br>current_time();                 -- 当前时间<br>date(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取日期部分<br>time(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取时间部分<br>date_format(&#x27;yyyy-mm-dd hh:ii:ss&#x27;, &#x27;%d %y %a %d %m %b %j&#x27;); -- 格式化时间<br>unix_timestamp();               -- 获得unix时间戳<br>from_unixtime();                -- 从时间戳获得时间<br><br>-- 字符串函数<br>length(string)          -- string长度，字节<br>char_length(string)     -- string的字符个数<br>substring(str, position [,length])      -- 从str的position开始,取length个字符<br>replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str<br>instr(string ,substring)    -- 返回substring首次在string中出现的位置<br>concat(string [,...])   -- 连接字串<br>charset(str)            -- 返回字串字符集<br>lcase(string)           -- 转换成小写<br>left(string, length)    -- 从string2中的左边起取length个字符<br>load_file(file_name)    -- 从文件读取内容<br>locate(substring, string [,start_position]) -- 同instr,但可指定开始位置<br>lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length<br>ltrim(string)           -- 去除前端空格<br>repeat(string, count)   -- 重复count次<br>rpad(string, length, pad)   --在str后用pad补充,直到长度为length<br>rtrim(string)           -- 去除后端空格<br>strcmp(string1 ,string2)    -- 逐字符比较两字串大小<br><br>-- 流程函数<br>case when [condition] then result [when [condition] then result ...] [else result] end   多分支<br>if(expr1,expr2,expr3)  双分支。<br><br>-- 聚合函数<br>count()<br>sum();<br>max();<br>min();<br>avg();<br>group_concat()<br><br>-- 其他常用函数<br>md5();<br>default();<br><br>--// 存储函数，自定义函数 ----------<br>-- 新建<br>    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型<br>        函数体<br><br>    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。<br>    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。<br>    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。<br>    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。<br>    - 多条语句应该使用 begin...end 语句块包含。<br>    - 一定要有 return 返回值语句。<br><br>-- 删除<br>    DROP FUNCTION [IF EXISTS] function_name;<br><br>-- 查看<br>    SHOW FUNCTION STATUS LIKE &#x27;partten&#x27;<br>    SHOW CREATE FUNCTION function_name;<br><br>-- 修改<br>    ALTER FUNCTION function_name 函数选项<br><br><br>--// 存储过程，自定义功能 ----------<br>-- 定义<br>存储存储过程 是一段代码（过程），存储在数据库中的sql组成。<br>一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。<br>而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。<br><br>-- 创建<br>CREATE PROCEDURE sp_name (参数列表)<br>    过程体<br><br>参数列表：不同于函数的参数列表，需要指明参数类型<br>IN，表示输入型<br>OUT，表示输出型<br>INOUT，表示混合型<br><br>注意，没有返回值。<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><blockquote>\n<p>存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。<br>调用：CALL 过程名</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 注意<br>- 没有返回值。<br>- 只能单独调用，不可夹杂在其他语句中<br><br>-- 参数<br>IN|OUT|INOUT 参数名 数据类型<br>IN      输入：在调用过程中，将数据输入到过程体内部的参数<br>OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端<br>INOUT   输入输出：既可输入，也可输出<br><br>-- 语法<br>CREATE PROCEDURE 过程名 (参数列表)<br>BEGIN<br>    过程体<br>END<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"用户和权限管理\"><a href=\"#用户和权限管理\" class=\"headerlink\" title=\"用户和权限管理\"></a>用户和权限管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- root密码重置<br>1. 停止MySQL服务<br>2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;<br>    [Windows] mysqld --skip-grant-tables<br>3. use mysql;<br>4. UPDATE `user` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE `user` = &quot;root&quot;;<br>5. FLUSH PRIVILEGES;<br><br>用户信息表：mysql.user<br>-- 刷新权限<br>FLUSH PRIVILEGES;<br>-- 增加用户<br>CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)<br>    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。<br>    - 只能创建用户，不能赋予权限。<br>    - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;<br>    - 密码也需引号，纯数字密码也要加引号<br>    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD<br>-- 重命名用户<br>RENAME USER old_user TO new_user<br>-- 设置密码<br>SET PASSWORD = PASSWORD(&#x27;密码&#x27;)  -- 为当前用户设置密码<br>SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;) -- 为指定用户设置密码<br>-- 删除用户<br>DROP USER 用户名<br>-- 分配权限/添加用户<br>GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#x27;password&#x27;]<br>    - all privileges 表示所有权限<br>    - *.* 表示所有库的所有表<br>    - 库名.表名 表示某库下面的某表<br>    GRANT ALL PRIVILEGES ON `pms`.* TO &#x27;pms&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;pms0817&#x27;;<br>-- 查看权限<br>SHOW GRANTS FOR 用户名<br>    -- 查看当前用户权限<br>    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();<br>-- 撤消权限<br>REVOKE 权限列表 ON 表名 FROM 用户名<br>REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限<br>-- 权限层级<br>-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。<br>全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user<br>    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。<br>数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host<br>    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。<br>表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv<br>    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。<br>列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv<br>    当使用REVOKE时，您必须指定与被授权列相同的列。<br>-- 权限列表<br>ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限<br>ALTER   -- 允许使用ALTER TABLE<br>ALTER ROUTINE   -- 更改或取消已存储的子程序<br>CREATE  -- 允许使用CREATE TABLE<br>CREATE ROUTINE  -- 创建已存储的子程序<br>CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE<br>CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。<br>CREATE VIEW     -- 允许使用CREATE VIEW<br>DELETE  -- 允许使用DELETE<br>DROP    -- 允许使用DROP TABLE<br>EXECUTE     -- 允许用户运行已存储的子程序<br>FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE<br>INDEX   -- 允许使用CREATE INDEX和DROP INDEX<br>INSERT  -- 允许使用INSERT<br>LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES<br>PROCESS     -- 允许使用SHOW FULL PROCESSLIST<br>REFERENCES  -- 未被实施<br>RELOAD  -- 允许使用FLUSH<br>REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址<br>REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）<br>SELECT  -- 允许使用SELECT<br>SHOW DATABASES  -- 显示所有数据库<br>SHOW VIEW   -- 允许使用SHOW CREATE VIEW<br>SHUTDOWN    -- 允许使用mysqladmin shutdown<br>SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。<br>UPDATE  -- 允许使用UPDATE<br>USAGE   -- “无权限”的同义词<br>GRANT OPTION    -- 允许授予权限<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表维护\"><a href=\"#表维护\" class=\"headerlink\" title=\"表维护\"></a>表维护</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- 分析和存储表的关键字分布<br>ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...<br>-- 检查一个或多个表是否有错误<br>CHECK TABLE tbl_name [, tbl_name] ... [option] ...<br>option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;<br>-- 整理数据文件的碎片<br>OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！<br>2. 每个库目录存在一个保存当前数据库的选项文件db.opt。<br>3. 注释：<br>    单行注释 # 注释内容<br>    多行注释 /* 注释内容 */<br>    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)<br>4. 模式通配符：<br>    _   任意单个字符<br>    %   任意多个字符，甚至包括零字符<br>    单引号需要进行转义 \\&#x27;<br>5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\\G&quot;, &quot;\\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。<br>6. SQL对大小写不敏感<br>7. 清除已有语句：\\c<br></code></pre></td></tr></table></figure>\n\n<p>原文连接：<a href=\"https://shockerli.net/post/1000-line-mysql-note/\">https://shockerli.net/post/1000-line-mysql-note/</a></p>\n"},{"_content":"# redis命令和RedisTemplate操作对应表\n\n\n\n+ <a herf=\"#string\">redisTemplate.opsForValue();//操作字符串</a>\n+ <a herf=\"#hash\">redisTemplate.opsForHash();//操作hash</a>\n+ <a herf=\"#set\">redisTemplate.opsForedisTemplateet();//操作set</a>\n+ <a herf=\"#list\">redisTemplate.opsForList();//操作list</a>\n+ redisTemplate.opsForZSet();//操作有序set\n\n## Key相关的\n\n| Redis命令                                      | RedisTemplate redisTemplate                                  |                     说明                     |\n| :--------------------------------------------- | :----------------------------------------------------------- | :------------------------------------------: |\n| `KEYS *、KEYS *key*、KEYS *key、KEYS key*`     | `redisTemplate.keys(key);`                                   |  获取所有key，模糊查询*key*（支持通配符*）   |\n| `EXPIRE key 10`<br />`EXPIREAT key 1293840000` | `redisTemplate.expire(key, time, TimeUnit.SECONDS);`<br />`redisTemplate.expireAt(key, date);` | 指定key缓存失效时间<br />指定key缓存到期时间 |\n| `TTL key`                                      | `redisTemplate.getExpire(key, TimeUnit.SECONDS);`            |             根据key获取过期时间              |\n| `EXISTS key`<br />`EXISTS key1 key2 key3`      | `redisTemplate.hasKey(key);`<br />`redisTemplate.countExistingKeys(Arrays.asList(key));` |    判断key是否存在<br />检查key存在的数量    |\n| `DEL key`<br />`DEL key1 key2 key3`            | `redisTemplate.delete(key);`<br />`redisTemplate.delete(Arrays.asList(keys));` |       删除指定key缓存<br />批量删除key       |\n\n<h2 id=\"string\">String相关的</h2>\n\n**redisTemplate.opsForValue();//操作字符串**\n\n| Redis命令                                 | RedisTemplate redisTemplate                                  | 说明                                                         |\n| ----------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `SET key value`<br />`SET key value time` | `redisTemplate.opsForValue().set(key,value);`<br />`redisTemplate.opsForValue().set(key,value,time);` | 设置普通缓存<br />设置普通缓存过期时间                       |\n| `GET key`                                 | `redisTemplate.opsForValue().get(key);`                      | 获取普通缓存                                                 |\n| `INCE key`                                | `redisTemplate.opsForValue().increment(key, delta);`         | 递增                                                         |\n| `DECR key`                                | `redisTemplate.opsForValue().increment(key, -delta);`        | 递减                                                         |\n| `SETNX key value`                         | `redisTemplate.opsForValue().setIfAbsent(key,value);`        | 将 key 的值设为 value ，当且仅当 key 不存在                  |\n| `SETEX key value`                         | `redisTemplate.opsForValue().setIfPresent(key,value);`       | 判断当前的键的值是否为v，是的话不作操作，不实的话进行替换。如果没有这个键也不会做任何操作。 |\n| `GETSET key value`                        | `redisTemplate.opsForValue().getAndSet(key, value);`         | key存在设置新值，并返回旧值                                  |\n\n<h2 id=\"hash\">Hash相关的</h2>\n\n**redisTemplate.opsForHash();//操作字符串**\n\n| Redis命令                           | RedisTemplate redisTemplate                             | 说明                                                |\n| ----------------------------------- | ------------------------------------------------------- | --------------------------------------------------- |\n| `HMSET key key1 value1 key2 value2` | `redisTemplate.opsForHash().putAll(key, map);`          | 设置缓存                                            |\n| `HSET key item value`               | `redisTemplate.opsForHash().put(key, item, value);`     | 向一张hash表中放入数据,如果不存在将创建             |\n| `HGET key item`                     | `redisTemplate..opsForHash().get(key, item);`           | 获取缓存，字段值                                    |\n| `HMGET key`                         | `redisTemplate.opsForHash().entries(key);`              | 获取hashKey对应的所有键值                           |\n| `DELETE key item1 item2 item3`      | `redisTemplate.opsForHash().delete(key, item);`         | 将 key 的值设为 value ，当且仅当 key 不存在         |\n| `HEXISTS key item`                  | `redisTemplate.opsForHash().hasKey(key, item);`         | 判断hash表中是否有该项的值                          |\n| `HINCRBY key item by`               | `redisTemplate.opsForHash().increment(key, item, by);`  | hash递增 如果不存在,就会创建一个 并把新增后的值返回 |\n| `HDEL key item by`                  | `redisTemplate.opsForHash().increment(key, item, -by);` | hash递减                                            |\n\n<h2 id=\"set\">Set相关的</h2>\n\n**redisTemplate.opsForedisTemplateet();//操作字符串**\n\n| Redis命令                 | RedisTemplate redisTemplate                                  | 说明                              |\n| ------------------------- | ------------------------------------------------------------ | --------------------------------- |\n| `SMEMBEredisTemplate key` | `redisTemplate.opsForedisTemplateet().memberedisTemplate(key)` | 根据key获取Set中的所有值          |\n| `SISMEMBER key value`     | `redisTemplate.opsForedisTemplateet().isMember(key, value);` | 根据value从一个set中查询,是否存在 |\n| `SADD key value1 value2`  | `redisTemplate.opsForedisTemplateet().add(key, values);`     | 将数据放入set缓存                 |\n| `SCARD key`               | `redisTemplate.opsForedisTemplateet().size(key);`            | 获取set缓存的长度                 |\n| `SREM key value1 value2`  | `redisTemplate.opsForedisTemplateet().remove(key, values);`  | 移除值为value的                   |\n\n<h2 id=\"list\">List相关的</h2>\n\n**redisTemplate.opsForList();//操作字符串**\n\n| Redis命令              | RedisTemplate redisTemplate                             | 说明                         |\n| ---------------------- | ------------------------------------------------------- | ---------------------------- |\n| `RPUSH key value``     | `redisTemplate.opsForList().rightPush(key, value);`     | 将list放入缓存,从右边添加    |\n| `LPUSH key value`      | `redisTemplate.opsForList().leftPush(key, value);`      | 将list放入缓存,从左边添加    |\n| `LRANGE key 0 -1`      | `redisTemplate.opsForList().range(key, start, end);`    | 获取list缓存的内容           |\n| `LLEN key`             | `redisTemplate.opsForList().size(key);`                 | 获取list缓存的长度           |\n| `LINDEX key index`     | `redisTemplate.opsForList().index(key, index);`         | 通过索引 获取list中的值      |\n| `LSET key index value` | `redisTemplate.opsForList().set(key, index, value);`    | 根据索引修改list中的某条数据 |\n| `LREM key count value` | `redisTemplate.opsForList().remove(key, count, value);` | 移除N个值为value             |\n\n","source":"_posts/redis命令和RedisTemplate操作对应表.md","raw":"---\ncategories: []\n---\n# redis命令和RedisTemplate操作对应表\n\n\n\n+ <a herf=\"#string\">redisTemplate.opsForValue();//操作字符串</a>\n+ <a herf=\"#hash\">redisTemplate.opsForHash();//操作hash</a>\n+ <a herf=\"#set\">redisTemplate.opsForedisTemplateet();//操作set</a>\n+ <a herf=\"#list\">redisTemplate.opsForList();//操作list</a>\n+ redisTemplate.opsForZSet();//操作有序set\n\n## Key相关的\n\n| Redis命令                                      | RedisTemplate redisTemplate                                  |                     说明                     |\n| :--------------------------------------------- | :----------------------------------------------------------- | :------------------------------------------: |\n| `KEYS *、KEYS *key*、KEYS *key、KEYS key*`     | `redisTemplate.keys(key);`                                   |  获取所有key，模糊查询*key*（支持通配符*）   |\n| `EXPIRE key 10`<br />`EXPIREAT key 1293840000` | `redisTemplate.expire(key, time, TimeUnit.SECONDS);`<br />`redisTemplate.expireAt(key, date);` | 指定key缓存失效时间<br />指定key缓存到期时间 |\n| `TTL key`                                      | `redisTemplate.getExpire(key, TimeUnit.SECONDS);`            |             根据key获取过期时间              |\n| `EXISTS key`<br />`EXISTS key1 key2 key3`      | `redisTemplate.hasKey(key);`<br />`redisTemplate.countExistingKeys(Arrays.asList(key));` |    判断key是否存在<br />检查key存在的数量    |\n| `DEL key`<br />`DEL key1 key2 key3`            | `redisTemplate.delete(key);`<br />`redisTemplate.delete(Arrays.asList(keys));` |       删除指定key缓存<br />批量删除key       |\n\n<h2 id=\"string\">String相关的</h2>\n\n**redisTemplate.opsForValue();//操作字符串**\n\n| Redis命令                                 | RedisTemplate redisTemplate                                  | 说明                                                         |\n| ----------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `SET key value`<br />`SET key value time` | `redisTemplate.opsForValue().set(key,value);`<br />`redisTemplate.opsForValue().set(key,value,time);` | 设置普通缓存<br />设置普通缓存过期时间                       |\n| `GET key`                                 | `redisTemplate.opsForValue().get(key);`                      | 获取普通缓存                                                 |\n| `INCE key`                                | `redisTemplate.opsForValue().increment(key, delta);`         | 递增                                                         |\n| `DECR key`                                | `redisTemplate.opsForValue().increment(key, -delta);`        | 递减                                                         |\n| `SETNX key value`                         | `redisTemplate.opsForValue().setIfAbsent(key,value);`        | 将 key 的值设为 value ，当且仅当 key 不存在                  |\n| `SETEX key value`                         | `redisTemplate.opsForValue().setIfPresent(key,value);`       | 判断当前的键的值是否为v，是的话不作操作，不实的话进行替换。如果没有这个键也不会做任何操作。 |\n| `GETSET key value`                        | `redisTemplate.opsForValue().getAndSet(key, value);`         | key存在设置新值，并返回旧值                                  |\n\n<h2 id=\"hash\">Hash相关的</h2>\n\n**redisTemplate.opsForHash();//操作字符串**\n\n| Redis命令                           | RedisTemplate redisTemplate                             | 说明                                                |\n| ----------------------------------- | ------------------------------------------------------- | --------------------------------------------------- |\n| `HMSET key key1 value1 key2 value2` | `redisTemplate.opsForHash().putAll(key, map);`          | 设置缓存                                            |\n| `HSET key item value`               | `redisTemplate.opsForHash().put(key, item, value);`     | 向一张hash表中放入数据,如果不存在将创建             |\n| `HGET key item`                     | `redisTemplate..opsForHash().get(key, item);`           | 获取缓存，字段值                                    |\n| `HMGET key`                         | `redisTemplate.opsForHash().entries(key);`              | 获取hashKey对应的所有键值                           |\n| `DELETE key item1 item2 item3`      | `redisTemplate.opsForHash().delete(key, item);`         | 将 key 的值设为 value ，当且仅当 key 不存在         |\n| `HEXISTS key item`                  | `redisTemplate.opsForHash().hasKey(key, item);`         | 判断hash表中是否有该项的值                          |\n| `HINCRBY key item by`               | `redisTemplate.opsForHash().increment(key, item, by);`  | hash递增 如果不存在,就会创建一个 并把新增后的值返回 |\n| `HDEL key item by`                  | `redisTemplate.opsForHash().increment(key, item, -by);` | hash递减                                            |\n\n<h2 id=\"set\">Set相关的</h2>\n\n**redisTemplate.opsForedisTemplateet();//操作字符串**\n\n| Redis命令                 | RedisTemplate redisTemplate                                  | 说明                              |\n| ------------------------- | ------------------------------------------------------------ | --------------------------------- |\n| `SMEMBEredisTemplate key` | `redisTemplate.opsForedisTemplateet().memberedisTemplate(key)` | 根据key获取Set中的所有值          |\n| `SISMEMBER key value`     | `redisTemplate.opsForedisTemplateet().isMember(key, value);` | 根据value从一个set中查询,是否存在 |\n| `SADD key value1 value2`  | `redisTemplate.opsForedisTemplateet().add(key, values);`     | 将数据放入set缓存                 |\n| `SCARD key`               | `redisTemplate.opsForedisTemplateet().size(key);`            | 获取set缓存的长度                 |\n| `SREM key value1 value2`  | `redisTemplate.opsForedisTemplateet().remove(key, values);`  | 移除值为value的                   |\n\n<h2 id=\"list\">List相关的</h2>\n\n**redisTemplate.opsForList();//操作字符串**\n\n| Redis命令              | RedisTemplate redisTemplate                             | 说明                         |\n| ---------------------- | ------------------------------------------------------- | ---------------------------- |\n| `RPUSH key value``     | `redisTemplate.opsForList().rightPush(key, value);`     | 将list放入缓存,从右边添加    |\n| `LPUSH key value`      | `redisTemplate.opsForList().leftPush(key, value);`      | 将list放入缓存,从左边添加    |\n| `LRANGE key 0 -1`      | `redisTemplate.opsForList().range(key, start, end);`    | 获取list缓存的内容           |\n| `LLEN key`             | `redisTemplate.opsForList().size(key);`                 | 获取list缓存的长度           |\n| `LINDEX key index`     | `redisTemplate.opsForList().index(key, index);`         | 通过索引 获取list中的值      |\n| `LSET key index value` | `redisTemplate.opsForList().set(key, index, value);`    | 根据索引修改list中的某条数据 |\n| `LREM key count value` | `redisTemplate.opsForList().remove(key, count, value);` | 移除N个值为value             |\n\n","slug":"redis命令和RedisTemplate操作对应表","published":1,"date":"2020-09-14T11:45:52.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ap001619ia9tag4qmj","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"redis命令和RedisTemplate操作对应表\"><a href=\"#redis命令和RedisTemplate操作对应表\" class=\"headerlink\" title=\"redis命令和RedisTemplate操作对应表\"></a>redis命令和RedisTemplate操作对应表</h1><ul>\n<li><a herf=\"#string\">redisTemplate.opsForValue();&#x2F;&#x2F;操作字符串</a></li>\n<li><a herf=\"#hash\">redisTemplate.opsForHash();&#x2F;&#x2F;操作hash</a></li>\n<li><a herf=\"#set\">redisTemplate.opsForedisTemplateet();&#x2F;&#x2F;操作set</a></li>\n<li><a herf=\"#list\">redisTemplate.opsForList();&#x2F;&#x2F;操作list</a></li>\n<li>redisTemplate.opsForZSet();&#x2F;&#x2F;操作有序set</li>\n</ul>\n<h2 id=\"Key相关的\"><a href=\"#Key相关的\" class=\"headerlink\" title=\"Key相关的\"></a>Key相关的</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Redis命令</th>\n<th align=\"left\">RedisTemplate redisTemplate</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>KEYS *、KEYS *key*、KEYS *key、KEYS key*</code></td>\n<td align=\"left\"><code>redisTemplate.keys(key);</code></td>\n<td align=\"center\">获取所有key，模糊查询<em>key</em>（支持通配符*）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>EXPIRE key 10</code><br /><code>EXPIREAT key 1293840000</code></td>\n<td align=\"left\"><code>redisTemplate.expire(key, time, TimeUnit.SECONDS);</code><br /><code>redisTemplate.expireAt(key, date);</code></td>\n<td align=\"center\">指定key缓存失效时间<br />指定key缓存到期时间</td>\n</tr>\n<tr>\n<td align=\"left\"><code>TTL key</code></td>\n<td align=\"left\"><code>redisTemplate.getExpire(key, TimeUnit.SECONDS);</code></td>\n<td align=\"center\">根据key获取过期时间</td>\n</tr>\n<tr>\n<td align=\"left\"><code>EXISTS key</code><br /><code>EXISTS key1 key2 key3</code></td>\n<td align=\"left\"><code>redisTemplate.hasKey(key);</code><br /><code>redisTemplate.countExistingKeys(Arrays.asList(key));</code></td>\n<td align=\"center\">判断key是否存在<br />检查key存在的数量</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DEL key</code><br /><code>DEL key1 key2 key3</code></td>\n<td align=\"left\"><code>redisTemplate.delete(key);</code><br /><code>redisTemplate.delete(Arrays.asList(keys));</code></td>\n<td align=\"center\">删除指定key缓存<br />批量删除key</td>\n</tr>\n</tbody></table>\n<h2 id=\"string\">String相关的</h2>\n\n<p><strong>redisTemplate.opsForValue();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SET key value</code><br /><code>SET key value time</code></td>\n<td><code>redisTemplate.opsForValue().set(key,value);</code><br /><code>redisTemplate.opsForValue().set(key,value,time);</code></td>\n<td>设置普通缓存<br />设置普通缓存过期时间</td>\n</tr>\n<tr>\n<td><code>GET key</code></td>\n<td><code>redisTemplate.opsForValue().get(key);</code></td>\n<td>获取普通缓存</td>\n</tr>\n<tr>\n<td><code>INCE key</code></td>\n<td><code>redisTemplate.opsForValue().increment(key, delta);</code></td>\n<td>递增</td>\n</tr>\n<tr>\n<td><code>DECR key</code></td>\n<td><code>redisTemplate.opsForValue().increment(key, -delta);</code></td>\n<td>递减</td>\n</tr>\n<tr>\n<td><code>SETNX key value</code></td>\n<td><code>redisTemplate.opsForValue().setIfAbsent(key,value);</code></td>\n<td>将 key 的值设为 value ，当且仅当 key 不存在</td>\n</tr>\n<tr>\n<td><code>SETEX key value</code></td>\n<td><code>redisTemplate.opsForValue().setIfPresent(key,value);</code></td>\n<td>判断当前的键的值是否为v，是的话不作操作，不实的话进行替换。如果没有这个键也不会做任何操作。</td>\n</tr>\n<tr>\n<td><code>GETSET key value</code></td>\n<td><code>redisTemplate.opsForValue().getAndSet(key, value);</code></td>\n<td>key存在设置新值，并返回旧值</td>\n</tr>\n</tbody></table>\n<h2 id=\"hash\">Hash相关的</h2>\n\n<p><strong>redisTemplate.opsForHash();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>HMSET key key1 value1 key2 value2</code></td>\n<td><code>redisTemplate.opsForHash().putAll(key, map);</code></td>\n<td>设置缓存</td>\n</tr>\n<tr>\n<td><code>HSET key item value</code></td>\n<td><code>redisTemplate.opsForHash().put(key, item, value);</code></td>\n<td>向一张hash表中放入数据,如果不存在将创建</td>\n</tr>\n<tr>\n<td><code>HGET key item</code></td>\n<td><code>redisTemplate..opsForHash().get(key, item);</code></td>\n<td>获取缓存，字段值</td>\n</tr>\n<tr>\n<td><code>HMGET key</code></td>\n<td><code>redisTemplate.opsForHash().entries(key);</code></td>\n<td>获取hashKey对应的所有键值</td>\n</tr>\n<tr>\n<td><code>DELETE key item1 item2 item3</code></td>\n<td><code>redisTemplate.opsForHash().delete(key, item);</code></td>\n<td>将 key 的值设为 value ，当且仅当 key 不存在</td>\n</tr>\n<tr>\n<td><code>HEXISTS key item</code></td>\n<td><code>redisTemplate.opsForHash().hasKey(key, item);</code></td>\n<td>判断hash表中是否有该项的值</td>\n</tr>\n<tr>\n<td><code>HINCRBY key item by</code></td>\n<td><code>redisTemplate.opsForHash().increment(key, item, by);</code></td>\n<td>hash递增 如果不存在,就会创建一个 并把新增后的值返回</td>\n</tr>\n<tr>\n<td><code>HDEL key item by</code></td>\n<td><code>redisTemplate.opsForHash().increment(key, item, -by);</code></td>\n<td>hash递减</td>\n</tr>\n</tbody></table>\n<h2 id=\"set\">Set相关的</h2>\n\n<p><strong>redisTemplate.opsForedisTemplateet();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SMEMBEredisTemplate key</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().memberedisTemplate(key)</code></td>\n<td>根据key获取Set中的所有值</td>\n</tr>\n<tr>\n<td><code>SISMEMBER key value</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().isMember(key, value);</code></td>\n<td>根据value从一个set中查询,是否存在</td>\n</tr>\n<tr>\n<td><code>SADD key value1 value2</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().add(key, values);</code></td>\n<td>将数据放入set缓存</td>\n</tr>\n<tr>\n<td><code>SCARD key</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().size(key);</code></td>\n<td>获取set缓存的长度</td>\n</tr>\n<tr>\n<td><code>SREM key value1 value2</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().remove(key, values);</code></td>\n<td>移除值为value的</td>\n</tr>\n</tbody></table>\n<h2 id=\"list\">List相关的</h2>\n\n<p><strong>redisTemplate.opsForList();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#96;RPUSH key value&#96;&#96;</td>\n<td><code>redisTemplate.opsForList().rightPush(key, value);</code></td>\n<td>将list放入缓存,从右边添加</td>\n</tr>\n<tr>\n<td><code>LPUSH key value</code></td>\n<td><code>redisTemplate.opsForList().leftPush(key, value);</code></td>\n<td>将list放入缓存,从左边添加</td>\n</tr>\n<tr>\n<td><code>LRANGE key 0 -1</code></td>\n<td><code>redisTemplate.opsForList().range(key, start, end);</code></td>\n<td>获取list缓存的内容</td>\n</tr>\n<tr>\n<td><code>LLEN key</code></td>\n<td><code>redisTemplate.opsForList().size(key);</code></td>\n<td>获取list缓存的长度</td>\n</tr>\n<tr>\n<td><code>LINDEX key index</code></td>\n<td><code>redisTemplate.opsForList().index(key, index);</code></td>\n<td>通过索引 获取list中的值</td>\n</tr>\n<tr>\n<td><code>LSET key index value</code></td>\n<td><code>redisTemplate.opsForList().set(key, index, value);</code></td>\n<td>根据索引修改list中的某条数据</td>\n</tr>\n<tr>\n<td><code>LREM key count value</code></td>\n<td><code>redisTemplate.opsForList().remove(key, count, value);</code></td>\n<td>移除N个值为value</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redis命令和RedisTemplate操作对应表\"><a href=\"#redis命令和RedisTemplate操作对应表\" class=\"headerlink\" title=\"redis命令和RedisTemplate操作对应表\"></a>redis命令和RedisTemplate操作对应表</h1><ul>\n<li><a herf=\"#string\">redisTemplate.opsForValue();&#x2F;&#x2F;操作字符串</a></li>\n<li><a herf=\"#hash\">redisTemplate.opsForHash();&#x2F;&#x2F;操作hash</a></li>\n<li><a herf=\"#set\">redisTemplate.opsForedisTemplateet();&#x2F;&#x2F;操作set</a></li>\n<li><a herf=\"#list\">redisTemplate.opsForList();&#x2F;&#x2F;操作list</a></li>\n<li>redisTemplate.opsForZSet();&#x2F;&#x2F;操作有序set</li>\n</ul>\n<h2 id=\"Key相关的\"><a href=\"#Key相关的\" class=\"headerlink\" title=\"Key相关的\"></a>Key相关的</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Redis命令</th>\n<th align=\"left\">RedisTemplate redisTemplate</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>KEYS *、KEYS *key*、KEYS *key、KEYS key*</code></td>\n<td align=\"left\"><code>redisTemplate.keys(key);</code></td>\n<td align=\"center\">获取所有key，模糊查询<em>key</em>（支持通配符*）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>EXPIRE key 10</code><br /><code>EXPIREAT key 1293840000</code></td>\n<td align=\"left\"><code>redisTemplate.expire(key, time, TimeUnit.SECONDS);</code><br /><code>redisTemplate.expireAt(key, date);</code></td>\n<td align=\"center\">指定key缓存失效时间<br />指定key缓存到期时间</td>\n</tr>\n<tr>\n<td align=\"left\"><code>TTL key</code></td>\n<td align=\"left\"><code>redisTemplate.getExpire(key, TimeUnit.SECONDS);</code></td>\n<td align=\"center\">根据key获取过期时间</td>\n</tr>\n<tr>\n<td align=\"left\"><code>EXISTS key</code><br /><code>EXISTS key1 key2 key3</code></td>\n<td align=\"left\"><code>redisTemplate.hasKey(key);</code><br /><code>redisTemplate.countExistingKeys(Arrays.asList(key));</code></td>\n<td align=\"center\">判断key是否存在<br />检查key存在的数量</td>\n</tr>\n<tr>\n<td align=\"left\"><code>DEL key</code><br /><code>DEL key1 key2 key3</code></td>\n<td align=\"left\"><code>redisTemplate.delete(key);</code><br /><code>redisTemplate.delete(Arrays.asList(keys));</code></td>\n<td align=\"center\">删除指定key缓存<br />批量删除key</td>\n</tr>\n</tbody></table>\n<h2 id=\"string\">String相关的</h2>\n\n<p><strong>redisTemplate.opsForValue();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SET key value</code><br /><code>SET key value time</code></td>\n<td><code>redisTemplate.opsForValue().set(key,value);</code><br /><code>redisTemplate.opsForValue().set(key,value,time);</code></td>\n<td>设置普通缓存<br />设置普通缓存过期时间</td>\n</tr>\n<tr>\n<td><code>GET key</code></td>\n<td><code>redisTemplate.opsForValue().get(key);</code></td>\n<td>获取普通缓存</td>\n</tr>\n<tr>\n<td><code>INCE key</code></td>\n<td><code>redisTemplate.opsForValue().increment(key, delta);</code></td>\n<td>递增</td>\n</tr>\n<tr>\n<td><code>DECR key</code></td>\n<td><code>redisTemplate.opsForValue().increment(key, -delta);</code></td>\n<td>递减</td>\n</tr>\n<tr>\n<td><code>SETNX key value</code></td>\n<td><code>redisTemplate.opsForValue().setIfAbsent(key,value);</code></td>\n<td>将 key 的值设为 value ，当且仅当 key 不存在</td>\n</tr>\n<tr>\n<td><code>SETEX key value</code></td>\n<td><code>redisTemplate.opsForValue().setIfPresent(key,value);</code></td>\n<td>判断当前的键的值是否为v，是的话不作操作，不实的话进行替换。如果没有这个键也不会做任何操作。</td>\n</tr>\n<tr>\n<td><code>GETSET key value</code></td>\n<td><code>redisTemplate.opsForValue().getAndSet(key, value);</code></td>\n<td>key存在设置新值，并返回旧值</td>\n</tr>\n</tbody></table>\n<h2 id=\"hash\">Hash相关的</h2>\n\n<p><strong>redisTemplate.opsForHash();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>HMSET key key1 value1 key2 value2</code></td>\n<td><code>redisTemplate.opsForHash().putAll(key, map);</code></td>\n<td>设置缓存</td>\n</tr>\n<tr>\n<td><code>HSET key item value</code></td>\n<td><code>redisTemplate.opsForHash().put(key, item, value);</code></td>\n<td>向一张hash表中放入数据,如果不存在将创建</td>\n</tr>\n<tr>\n<td><code>HGET key item</code></td>\n<td><code>redisTemplate..opsForHash().get(key, item);</code></td>\n<td>获取缓存，字段值</td>\n</tr>\n<tr>\n<td><code>HMGET key</code></td>\n<td><code>redisTemplate.opsForHash().entries(key);</code></td>\n<td>获取hashKey对应的所有键值</td>\n</tr>\n<tr>\n<td><code>DELETE key item1 item2 item3</code></td>\n<td><code>redisTemplate.opsForHash().delete(key, item);</code></td>\n<td>将 key 的值设为 value ，当且仅当 key 不存在</td>\n</tr>\n<tr>\n<td><code>HEXISTS key item</code></td>\n<td><code>redisTemplate.opsForHash().hasKey(key, item);</code></td>\n<td>判断hash表中是否有该项的值</td>\n</tr>\n<tr>\n<td><code>HINCRBY key item by</code></td>\n<td><code>redisTemplate.opsForHash().increment(key, item, by);</code></td>\n<td>hash递增 如果不存在,就会创建一个 并把新增后的值返回</td>\n</tr>\n<tr>\n<td><code>HDEL key item by</code></td>\n<td><code>redisTemplate.opsForHash().increment(key, item, -by);</code></td>\n<td>hash递减</td>\n</tr>\n</tbody></table>\n<h2 id=\"set\">Set相关的</h2>\n\n<p><strong>redisTemplate.opsForedisTemplateet();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SMEMBEredisTemplate key</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().memberedisTemplate(key)</code></td>\n<td>根据key获取Set中的所有值</td>\n</tr>\n<tr>\n<td><code>SISMEMBER key value</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().isMember(key, value);</code></td>\n<td>根据value从一个set中查询,是否存在</td>\n</tr>\n<tr>\n<td><code>SADD key value1 value2</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().add(key, values);</code></td>\n<td>将数据放入set缓存</td>\n</tr>\n<tr>\n<td><code>SCARD key</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().size(key);</code></td>\n<td>获取set缓存的长度</td>\n</tr>\n<tr>\n<td><code>SREM key value1 value2</code></td>\n<td><code>redisTemplate.opsForedisTemplateet().remove(key, values);</code></td>\n<td>移除值为value的</td>\n</tr>\n</tbody></table>\n<h2 id=\"list\">List相关的</h2>\n\n<p><strong>redisTemplate.opsForList();&#x2F;&#x2F;操作字符串</strong></p>\n<table>\n<thead>\n<tr>\n<th>Redis命令</th>\n<th>RedisTemplate redisTemplate</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#96;RPUSH key value&#96;&#96;</td>\n<td><code>redisTemplate.opsForList().rightPush(key, value);</code></td>\n<td>将list放入缓存,从右边添加</td>\n</tr>\n<tr>\n<td><code>LPUSH key value</code></td>\n<td><code>redisTemplate.opsForList().leftPush(key, value);</code></td>\n<td>将list放入缓存,从左边添加</td>\n</tr>\n<tr>\n<td><code>LRANGE key 0 -1</code></td>\n<td><code>redisTemplate.opsForList().range(key, start, end);</code></td>\n<td>获取list缓存的内容</td>\n</tr>\n<tr>\n<td><code>LLEN key</code></td>\n<td><code>redisTemplate.opsForList().size(key);</code></td>\n<td>获取list缓存的长度</td>\n</tr>\n<tr>\n<td><code>LINDEX key index</code></td>\n<td><code>redisTemplate.opsForList().index(key, index);</code></td>\n<td>通过索引 获取list中的值</td>\n</tr>\n<tr>\n<td><code>LSET key index value</code></td>\n<td><code>redisTemplate.opsForList().set(key, index, value);</code></td>\n<td>根据索引修改list中的某条数据</td>\n</tr>\n<tr>\n<td><code>LREM key count value</code></td>\n<td><code>redisTemplate.opsForList().remove(key, count, value);</code></td>\n<td>移除N个值为value</td>\n</tr>\n</tbody></table>\n"},{"_content":"# MySQL数据库设计规范\n\n转载原文：[https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95](https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#目录)\n\n## 目录\n\n```\n1. 规范背景与目的\t\n\n2. 设计规范\n\n2.1 数据库设计\t\n\n2.1.1 库名\t\n2.1.2 表结构\t\n2.1.3 列数据类型优化\t\n2.1.4 索引设计\t\n2.1.5 分库分表、分区表\t\n2.1.6 字符集\t\n2.1.7 程序DAO层设计建议\t\n2.1.8 一个规范的建表语句示例\t\n\n2.2 SQL编写\t\n\n2.2.1 DML语句\t\n2.2.2 多表连接\t\n2.2.3 事务\t\n2.2.4 排序和分组\t\n2.2.5 线上禁止使用的SQL语句\n```\n\n## 1. 规范背景与目的\n\nMySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。\n\n## 2. 设计规范\n\n### 2.1 数据库设计\n\n以下所有规范会按照**【高危】**、**【强制】**、**【建议】**三个级别进行标注，遵守优先级从高到低。\n\n对于不满足**【高危】**和**【强制】**两个级别的设计，DBA会强制打回要求修改。\n\n### 2.1.1 库名\n\n1. **【强制】**库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。\n2. **【强制】**库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。\n3. **【强制】**一般分库名称命名格式是`库通配名_编号`，编号从0开始递增，比如`wenda_001`以时间进行分库的名称格式是“库通配名_时间”\n4. **【强制】**创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：`create database db1 default character set utf8;`。\n\n### 2.1.2 表结构\n\n1. **【强制】**表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。\n2. **【强制】**表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。\n3. **【强制】**创建表时必须显式指定字符集为utf8或utf8mb4。\n4. **【强制】**创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。\n5. **【强制】**建表必须有comment\n6. **【建议】**建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为`auto_increment(2)`标识表里每一行主体的字段不要设为主键，建议设为其他字段如`user_id`，`order_id`等，并建立unique key索引（可参考`cdb.teacher`表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。\n7. **【建议】**核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段`create_time`和最后更新时间字段`update_time`，便于查问题。\n8. **【建议】**表中所有字段必须都是`NOT NULL`属性，业务可以根据需要定义`DEFAULT`值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。\n9. **【建议】**建议对表里的`blob`、`text`等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。\n10. **【建议】**反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如`user_name`属性在`user_account`，`user_login_log`等表里冗余一份，减少join查询。\n11. **【强制】**中间表用于保留中间结果集，名称必须以`tmp_`开头。备份表用于备份或抓取源表快照，名称必须以`bak_`开头。中间表和备份表定期清理。\n12. **【强制】**对于超过100W行的大表进行`alter table`，必须经过DBA审核，并在业务低峰期执行。因为`alter table`会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。\n\n### 2.1.3 列数据类型优化\n\n1. **【建议】**表中的自增列（`auto_increment`属性），推荐使用`bigint`类型。因为无符号`int`存储范围为`-2147483648~2147483647`（大约21亿左右），溢出后会导致报错。\n2. **【建议】**业务中选择性很少的状态`status`、类型`type`等字段推荐使用`tinytint`或者`smallint`类型节省存储空间。\n3. **【建议】**业务中IP地址字段推荐使用`int`类型，不推荐用`char(15)`。因为`int`只占4字节，可以用如下函数相互转换，而`char(15)`占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：`select inet_aton('192.168.2.12'); select inet_ntoa(3232236044);` PHP: `ip2long(‘192.168.2.12’); long2ip(3530427185);`\n4. **【建议】**不推荐使用`enum`，`set`。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用`tinyint`或`smallint`。\n5. **【建议】**不推荐使用`blob`，`text`等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在`overflow-page`里。不幸的是在`compact`行格式下，原始`page`和`overflow-page`都会加载。\n6. **【建议】**存储金钱的字段，建议用`int`，程序端乘以100和除以100进行存取。因为`int`占用4字节，而`double`占用8字节，空间浪费。\n7. **【建议】**文本数据尽量用`varchar`存储。因为`varchar`是变长存储，比`char`更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为`mediumtext`字段。而`text`在utf8字符集下最多存21844个字符，`mediumtext`最多存2^24/3个字符，`longtext`最多存2^32个字符。一般建议用`varchar`类型，字符数不要超过2700。\n8. **【建议】**时间类型尽量选取`timestamp`。因为`datetime`占用8字节，`timestamp`仅占用4字节，但是范围为`1970-01-01 00:00:01`到`2038-01-01 00:00:00`。更为高阶的方法，选用`int`来存储时间，使用SQL函数`unix_timestamp()`和`from_unixtime()`来进行转换。\n\n详细存储大小参考原文：https://blog.csdn.net/HXNLYW/article/details/100104768\n\n\n\n#### 整数型数据类型\n\n|   类型名称   |               说明                | 存储大小 |               取值范围               |\n| :----------: | :-------------------------------: | :------: | :----------------------------------: |\n|   TINYINT    | 很小的正数（一般用于boolean存储） | 1个字节  |    -128~127<br />unsigned：0~255     |\n|   SMALLINT   |              小正数               | 2个字节  | -32768~32767<br />unsigned：0~65535  |\n|  MEDIUMINT   |          中等大小的正数           | 3个字节  | -2^23 ~2^23-1<br/>unsigned: 2^24 -1  |\n| INT(INTEGER) |          普通大小的正数           | 4个字节  | -2^31 ~2^31-1<br />unsigned: 2^32 -1 |\n|    BIGINT    |       大正数(一般用于主键)        | 8个字节  | -2^63 ~2^63-1<br/>unsigned: 2^64 -1  |\n\n#### 小数型数据类型\n\n|   类型名称   |                     说明                     | 存储大小  |          取值范围           |\n| :----------: | :------------------------------------------: | :-------: | :-------------------------: |\n|  FLOAT(M,N)  | M表示总共位数，N表示小数位数（单精度浮点数） |  4个字节  |     ±1.175494351E – 38      |\n| DOUBLE(M,N)  |                 双精度浮点数                 |  8个字节  | ±2.2250738585072014E – 308  |\n| DECIMAL(M,D) |              压缩的“严格”定点数              | M+2个字节 | 可变；其值的范围依赖于M 和D |\n\n#### 字符串数据类型\n\n|  类型名称  |   说明   |                        存储大小                         |   取值范围   |\n| :--------: | :------: | :-----------------------------------------------------: | :----------: |\n|  CHAR(N)   | 固定长度 | N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2） |  0~255字符   |\n| VARCHAR(N) | 可变长度 |                      实际存储大小                       | 0~65535字节  |\n|    TEXT    |   文本   |                      实际存储大小                       | 0~65535字节  |\n|  LONGTEXT  |  长文本  |                      实际存储大小                       | 0~2^32-1字节 |\n\n#### 日期数据类型\n\n| 类型名称  | 说明                                           | 存储大小 | 取值范围                                |\n| --------- | ---------------------------------------------- | -------- | --------------------------------------- |\n| DATE      | 存储日期值(yyyy-MM-dd)                         | 3个字节  | 1000-01-01~9999-12-31                   |\n| TIME      | 存储时分秒(HH:mm:ss)                           | 3个字节  | 00:00:00~23:59:59                       |\n| DATETIME  | 存储日期+时间(yyyy-MM-dd HH:mm:ss)             | 8个字节  | 1000-01-01 00:00:00~9999-12-31 23:59:59 |\n| TIMESTAMP | 存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss) | 4个字节  | 1970-01-01 00:00:01~2038-01-19 03:14:07 |\n\n#### 注释\n\n>  UTF-8   ： 一个英文/数字字符占1个字节，一个中文（含繁体）字符占3个字节。\n> Unicode： 一个英文/数字字符占2个字节，一个中文（含繁体）字符占2个字节。\n> 符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。\n\n> char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。 \n> varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。\n>       \n> 1）char的存取速度优于varchar\n> 2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间\n>    varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间\n> 3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。\n>\n\n### 2.1.4 索引设计\n\n1. **【强制】**InnoDB表必须主键为`id int/bigint auto_increment`,且主键值禁止被更新。\n2. **【建议】**主键的名称以“`pk_`”开头，唯一键以“`uk_`”或“`uq_`”开头，普通索引以“`idx_`”开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。\n3. **【强制】**InnoDB和MyISAM存储引擎表，索引类型必须为`BTREE`；MEMORY表可以根据需要选择`HASH`或者`BTREE`类型索引。\n4. **【强制】**单个索引中每个索引记录的长度不能超过64KB。\n5. **【建议】**单个表上的索引个数不能超过7个。\n6. **【建议】**在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列`userid`的区分度可由`select count(distinct userid)`计算出来。\n7. **【建议】**在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。\n8. **【建议】**建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在`key(a,b)`，则`key(a)`为冗余索引，需要删除。\n\n### 2.1.5 分库分表、分区表\n\n1. **【强制】**分区表的分区字段（`partition-key`）必须有索引，或者是组合索引的首列。\n2. **【强制】**单个分区表中的分区（包括子分区）个数不能超过1024。\n3. **【强制】**上线前RD或者DBA必须指定分区表的创建、清理策略。\n4. **【强制】**访问分区表的SQL必须包含分区键。\n5. **【建议】**单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。\n6. **【强制】**对于分区表执行`alter table`操作，必须在业务低峰期执行。\n7. **【强制】**采用分库策略的，库的数量不能超过1024\n8. **【强制】**采用分表策略的，表的数量不能超过4096\n9. **【建议】**单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。\n10. **【建议】**水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。\n\n### 2.1.6 字符集\n\n1. **【强制】**数据库本身库、表、列所有字符集必须保持一致，为`utf8`或`utf8mb4`。\n2. **【强制】**前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为`utf8`。\n\n### 2.1.7 程序层DAO设计建议\n\n1. **【建议】**新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。\n2. **【建议】**前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。\n3. **【建议】**前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。\n4. **【建议】**对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。\n5. **【建议】**对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。\n6. **【建议】**在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。\n7. **【建议】**多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。\n8. **【建议】**业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。\n9. **【建议】**对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。\n\n### 2.1.8 一个规范的建表语句示例\n\n一个较为规范的建表语句为：\n\n```\nCREATE TABLE user (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT,\n  `user_id` bigint(11) NOT NULL COMMENT ‘用户id’\n  `username` varchar(45) NOT NULL COMMENT '真实姓名',\n  `email` varchar(30) NOT NULL COMMENT ‘用户邮箱’,\n  `nickname` varchar(45) NOT NULL COMMENT '昵称',\n  `avatar` int(11) NOT NULL COMMENT '头像',\n  `birthday` date NOT NULL COMMENT '生日',\n  `sex` tinyint(4) DEFAULT '0' COMMENT '性别',\n  `short_introduce` varchar(150) DEFAULT NULL COMMENT '一句话介绍自己，最多50个汉字',\n  `user_resume` varchar(300) NOT NULL COMMENT '用户提交的简历存放地址',\n  `user_register_ip` int NOT NULL COMMENT ‘用户注册时的源ip’,\n  `create_time` timestamp NOT NULL COMMENT ‘用户记录创建的时间’,\n  `update_time` timestamp NOT NULL COMMENT ‘用户资料修改的时间’,\n  `user_review_status` tinyint NOT NULL COMMENT ‘用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核’,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_user_id` (`user_id`),\n  KEY `idx_username`(`username`),\n  KEY `idx_create_time`(`create_time`,`user_review_status`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='网站用户基本信息';\n```\n\n## 2.2 SQL编写\n\n### 2.2.1 DML语句\n\n1. **【强制】**SELECT语句必须指定具体字段名称，禁止写成`*`。因为`select *`会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。\n2. **【强制】**insert语句指定具体字段名称，不要写成`insert into t1 values(…)`，道理同上。\n3. **【建议】**`insert into…values(XX),(XX),(XX)…`。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。\n4. **【建议】**SELECT语句不要使用`UNION`，推荐使用`UNION ALL`，并且`UNION`子句个数限制在5个以内。因为`union all`不需要去重，节省数据库资源，提高性能。\n5. **【建议】**in值列表限制在500以内。例如`select… where userid in(….500个以内…)`，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。\n6. **【建议】**事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。\n7. **【强制】**事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。\n8. **【强制】**写入和事务发往主库，只读SQL发往从库。\n9. **【强制】**除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。\n10. **【强制】**生产环境禁止使用`hint`，如`sql_no_cache`，`force index`，`ignore key`，`straight join`等。因为`hint`是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！\n11. **【强制】**where条件里等号左右字段类型必须一致，否则无法利用索引。\n12. **【建议】**`SELECT|UPDATE|DELETE|REPLACE`要有WHERE子句，且WHERE子句的条件必需使用索引查找。\n13. **【强制】**生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。\n14. **【强制】**WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。\n15. **【建议】**索引列不要使用函数或表达式，否则无法利用索引。如`where length(name)='Admin'`或`where user_id+2=10023`。\n16. **【建议】**减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如`where a=1 or b=2`优化为`where a=1… union …where b=2, key(a),key(b)`。\n17. **【建议】**分页查询，当limit起点较高时，可先用过滤条件进行过滤。如`select a,b,c from t1 limit 10000,20;`优化为: `select a,b,c from t1 where id>10000 limit 20;`。\n\n### 2.2.2 多表连接\n\n1. **【强制】**禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。\n2. **【强制】**禁止在业务的更新类SQL语句中使用join，比如`update t1 join t2…`。\n3. **【建议】**不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。\n4. **【建议】**线上环境，多表join不要超过3个表。\n5. **【建议】**多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如`select a from db1.table1 alias1 where …`。\n6. **【建议】**在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。\n\n### 2.2.3 事务\n\n1. **【建议】**事务中`INSERT|UPDATE|DELETE|REPLACE`语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。\n2. **【建议】**批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。\n3. **【建议】**对于有`auto_increment`属性字段的表的插入操作，并发需要控制在200以内。\n4. **【强制】**程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为`repeatable-read`。\n5. **【建议】**事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。\n6. **【建议】**事务里更新语句尽量基于主键或`unique key`，如`update … where id=XX`; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。\n7. **【建议】**尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。\n8. **【建议】**对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。\n\n### 2.2.4 排序和分组\n\n1. **【建议】**减少使用`order by`，和业务沟通能不排序就不排序，或将排序放到程序端去做。`order by`、`group by`、`distinct`这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。\n2. **【建议】**`order by`、`group by`、`distinct`这些SQL尽量利用索引直接检索出排序好的数据。如`where a=1 order by`可以利用`key(a,b)`。\n3. **【建议】**包含了`order by`、`group by`、`distinct`这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。\n\n### 2.2.5 线上禁止使用的SQL语句\n\n1. **【高危】**禁用`update|delete t1 … where a=XX limit XX;` 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上`order by PK`。\n2. **【高危】**禁止使用关联子查询，如`update t1 set … where name in(select name from user where…);`效率极其低下。\n3. **【强制】**禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。\n4. **【强制】**禁用`insert into …on duplicate key update…`在高并发环境下，会造成主从不一致。\n5. **【强制】**禁止联表更新语句，如`update t1,t2 where t1.id=t2.id…`。","source":"_posts/MySQL数据库设计规范.md","raw":"---\ncategories: []\n---\n# MySQL数据库设计规范\n\n转载原文：[https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95](https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#目录)\n\n## 目录\n\n```\n1. 规范背景与目的\t\n\n2. 设计规范\n\n2.1 数据库设计\t\n\n2.1.1 库名\t\n2.1.2 表结构\t\n2.1.3 列数据类型优化\t\n2.1.4 索引设计\t\n2.1.5 分库分表、分区表\t\n2.1.6 字符集\t\n2.1.7 程序DAO层设计建议\t\n2.1.8 一个规范的建表语句示例\t\n\n2.2 SQL编写\t\n\n2.2.1 DML语句\t\n2.2.2 多表连接\t\n2.2.3 事务\t\n2.2.4 排序和分组\t\n2.2.5 线上禁止使用的SQL语句\n```\n\n## 1. 规范背景与目的\n\nMySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。\n\n## 2. 设计规范\n\n### 2.1 数据库设计\n\n以下所有规范会按照**【高危】**、**【强制】**、**【建议】**三个级别进行标注，遵守优先级从高到低。\n\n对于不满足**【高危】**和**【强制】**两个级别的设计，DBA会强制打回要求修改。\n\n### 2.1.1 库名\n\n1. **【强制】**库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。\n2. **【强制】**库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。\n3. **【强制】**一般分库名称命名格式是`库通配名_编号`，编号从0开始递增，比如`wenda_001`以时间进行分库的名称格式是“库通配名_时间”\n4. **【强制】**创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：`create database db1 default character set utf8;`。\n\n### 2.1.2 表结构\n\n1. **【强制】**表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。\n2. **【强制】**表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。\n3. **【强制】**创建表时必须显式指定字符集为utf8或utf8mb4。\n4. **【强制】**创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。\n5. **【强制】**建表必须有comment\n6. **【建议】**建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为`auto_increment(2)`标识表里每一行主体的字段不要设为主键，建议设为其他字段如`user_id`，`order_id`等，并建立unique key索引（可参考`cdb.teacher`表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。\n7. **【建议】**核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段`create_time`和最后更新时间字段`update_time`，便于查问题。\n8. **【建议】**表中所有字段必须都是`NOT NULL`属性，业务可以根据需要定义`DEFAULT`值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。\n9. **【建议】**建议对表里的`blob`、`text`等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。\n10. **【建议】**反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如`user_name`属性在`user_account`，`user_login_log`等表里冗余一份，减少join查询。\n11. **【强制】**中间表用于保留中间结果集，名称必须以`tmp_`开头。备份表用于备份或抓取源表快照，名称必须以`bak_`开头。中间表和备份表定期清理。\n12. **【强制】**对于超过100W行的大表进行`alter table`，必须经过DBA审核，并在业务低峰期执行。因为`alter table`会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。\n\n### 2.1.3 列数据类型优化\n\n1. **【建议】**表中的自增列（`auto_increment`属性），推荐使用`bigint`类型。因为无符号`int`存储范围为`-2147483648~2147483647`（大约21亿左右），溢出后会导致报错。\n2. **【建议】**业务中选择性很少的状态`status`、类型`type`等字段推荐使用`tinytint`或者`smallint`类型节省存储空间。\n3. **【建议】**业务中IP地址字段推荐使用`int`类型，不推荐用`char(15)`。因为`int`只占4字节，可以用如下函数相互转换，而`char(15)`占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：`select inet_aton('192.168.2.12'); select inet_ntoa(3232236044);` PHP: `ip2long(‘192.168.2.12’); long2ip(3530427185);`\n4. **【建议】**不推荐使用`enum`，`set`。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用`tinyint`或`smallint`。\n5. **【建议】**不推荐使用`blob`，`text`等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在`overflow-page`里。不幸的是在`compact`行格式下，原始`page`和`overflow-page`都会加载。\n6. **【建议】**存储金钱的字段，建议用`int`，程序端乘以100和除以100进行存取。因为`int`占用4字节，而`double`占用8字节，空间浪费。\n7. **【建议】**文本数据尽量用`varchar`存储。因为`varchar`是变长存储，比`char`更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为`mediumtext`字段。而`text`在utf8字符集下最多存21844个字符，`mediumtext`最多存2^24/3个字符，`longtext`最多存2^32个字符。一般建议用`varchar`类型，字符数不要超过2700。\n8. **【建议】**时间类型尽量选取`timestamp`。因为`datetime`占用8字节，`timestamp`仅占用4字节，但是范围为`1970-01-01 00:00:01`到`2038-01-01 00:00:00`。更为高阶的方法，选用`int`来存储时间，使用SQL函数`unix_timestamp()`和`from_unixtime()`来进行转换。\n\n详细存储大小参考原文：https://blog.csdn.net/HXNLYW/article/details/100104768\n\n\n\n#### 整数型数据类型\n\n|   类型名称   |               说明                | 存储大小 |               取值范围               |\n| :----------: | :-------------------------------: | :------: | :----------------------------------: |\n|   TINYINT    | 很小的正数（一般用于boolean存储） | 1个字节  |    -128~127<br />unsigned：0~255     |\n|   SMALLINT   |              小正数               | 2个字节  | -32768~32767<br />unsigned：0~65535  |\n|  MEDIUMINT   |          中等大小的正数           | 3个字节  | -2^23 ~2^23-1<br/>unsigned: 2^24 -1  |\n| INT(INTEGER) |          普通大小的正数           | 4个字节  | -2^31 ~2^31-1<br />unsigned: 2^32 -1 |\n|    BIGINT    |       大正数(一般用于主键)        | 8个字节  | -2^63 ~2^63-1<br/>unsigned: 2^64 -1  |\n\n#### 小数型数据类型\n\n|   类型名称   |                     说明                     | 存储大小  |          取值范围           |\n| :----------: | :------------------------------------------: | :-------: | :-------------------------: |\n|  FLOAT(M,N)  | M表示总共位数，N表示小数位数（单精度浮点数） |  4个字节  |     ±1.175494351E – 38      |\n| DOUBLE(M,N)  |                 双精度浮点数                 |  8个字节  | ±2.2250738585072014E – 308  |\n| DECIMAL(M,D) |              压缩的“严格”定点数              | M+2个字节 | 可变；其值的范围依赖于M 和D |\n\n#### 字符串数据类型\n\n|  类型名称  |   说明   |                        存储大小                         |   取值范围   |\n| :--------: | :------: | :-----------------------------------------------------: | :----------: |\n|  CHAR(N)   | 固定长度 | N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2） |  0~255字符   |\n| VARCHAR(N) | 可变长度 |                      实际存储大小                       | 0~65535字节  |\n|    TEXT    |   文本   |                      实际存储大小                       | 0~65535字节  |\n|  LONGTEXT  |  长文本  |                      实际存储大小                       | 0~2^32-1字节 |\n\n#### 日期数据类型\n\n| 类型名称  | 说明                                           | 存储大小 | 取值范围                                |\n| --------- | ---------------------------------------------- | -------- | --------------------------------------- |\n| DATE      | 存储日期值(yyyy-MM-dd)                         | 3个字节  | 1000-01-01~9999-12-31                   |\n| TIME      | 存储时分秒(HH:mm:ss)                           | 3个字节  | 00:00:00~23:59:59                       |\n| DATETIME  | 存储日期+时间(yyyy-MM-dd HH:mm:ss)             | 8个字节  | 1000-01-01 00:00:00~9999-12-31 23:59:59 |\n| TIMESTAMP | 存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss) | 4个字节  | 1970-01-01 00:00:01~2038-01-19 03:14:07 |\n\n#### 注释\n\n>  UTF-8   ： 一个英文/数字字符占1个字节，一个中文（含繁体）字符占3个字节。\n> Unicode： 一个英文/数字字符占2个字节，一个中文（含繁体）字符占2个字节。\n> 符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。\n\n> char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。 \n> varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。\n>       \n> 1）char的存取速度优于varchar\n> 2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间\n>    varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间\n> 3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。\n>\n\n### 2.1.4 索引设计\n\n1. **【强制】**InnoDB表必须主键为`id int/bigint auto_increment`,且主键值禁止被更新。\n2. **【建议】**主键的名称以“`pk_`”开头，唯一键以“`uk_`”或“`uq_`”开头，普通索引以“`idx_`”开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。\n3. **【强制】**InnoDB和MyISAM存储引擎表，索引类型必须为`BTREE`；MEMORY表可以根据需要选择`HASH`或者`BTREE`类型索引。\n4. **【强制】**单个索引中每个索引记录的长度不能超过64KB。\n5. **【建议】**单个表上的索引个数不能超过7个。\n6. **【建议】**在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列`userid`的区分度可由`select count(distinct userid)`计算出来。\n7. **【建议】**在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。\n8. **【建议】**建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在`key(a,b)`，则`key(a)`为冗余索引，需要删除。\n\n### 2.1.5 分库分表、分区表\n\n1. **【强制】**分区表的分区字段（`partition-key`）必须有索引，或者是组合索引的首列。\n2. **【强制】**单个分区表中的分区（包括子分区）个数不能超过1024。\n3. **【强制】**上线前RD或者DBA必须指定分区表的创建、清理策略。\n4. **【强制】**访问分区表的SQL必须包含分区键。\n5. **【建议】**单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。\n6. **【强制】**对于分区表执行`alter table`操作，必须在业务低峰期执行。\n7. **【强制】**采用分库策略的，库的数量不能超过1024\n8. **【强制】**采用分表策略的，表的数量不能超过4096\n9. **【建议】**单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。\n10. **【建议】**水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。\n\n### 2.1.6 字符集\n\n1. **【强制】**数据库本身库、表、列所有字符集必须保持一致，为`utf8`或`utf8mb4`。\n2. **【强制】**前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为`utf8`。\n\n### 2.1.7 程序层DAO设计建议\n\n1. **【建议】**新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。\n2. **【建议】**前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。\n3. **【建议】**前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。\n4. **【建议】**对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。\n5. **【建议】**对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。\n6. **【建议】**在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。\n7. **【建议】**多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。\n8. **【建议】**业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。\n9. **【建议】**对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。\n\n### 2.1.8 一个规范的建表语句示例\n\n一个较为规范的建表语句为：\n\n```\nCREATE TABLE user (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT,\n  `user_id` bigint(11) NOT NULL COMMENT ‘用户id’\n  `username` varchar(45) NOT NULL COMMENT '真实姓名',\n  `email` varchar(30) NOT NULL COMMENT ‘用户邮箱’,\n  `nickname` varchar(45) NOT NULL COMMENT '昵称',\n  `avatar` int(11) NOT NULL COMMENT '头像',\n  `birthday` date NOT NULL COMMENT '生日',\n  `sex` tinyint(4) DEFAULT '0' COMMENT '性别',\n  `short_introduce` varchar(150) DEFAULT NULL COMMENT '一句话介绍自己，最多50个汉字',\n  `user_resume` varchar(300) NOT NULL COMMENT '用户提交的简历存放地址',\n  `user_register_ip` int NOT NULL COMMENT ‘用户注册时的源ip’,\n  `create_time` timestamp NOT NULL COMMENT ‘用户记录创建的时间’,\n  `update_time` timestamp NOT NULL COMMENT ‘用户资料修改的时间’,\n  `user_review_status` tinyint NOT NULL COMMENT ‘用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核’,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `idx_user_id` (`user_id`),\n  KEY `idx_username`(`username`),\n  KEY `idx_create_time`(`create_time`,`user_review_status`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='网站用户基本信息';\n```\n\n## 2.2 SQL编写\n\n### 2.2.1 DML语句\n\n1. **【强制】**SELECT语句必须指定具体字段名称，禁止写成`*`。因为`select *`会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。\n2. **【强制】**insert语句指定具体字段名称，不要写成`insert into t1 values(…)`，道理同上。\n3. **【建议】**`insert into…values(XX),(XX),(XX)…`。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。\n4. **【建议】**SELECT语句不要使用`UNION`，推荐使用`UNION ALL`，并且`UNION`子句个数限制在5个以内。因为`union all`不需要去重，节省数据库资源，提高性能。\n5. **【建议】**in值列表限制在500以内。例如`select… where userid in(….500个以内…)`，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。\n6. **【建议】**事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。\n7. **【强制】**事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。\n8. **【强制】**写入和事务发往主库，只读SQL发往从库。\n9. **【强制】**除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。\n10. **【强制】**生产环境禁止使用`hint`，如`sql_no_cache`，`force index`，`ignore key`，`straight join`等。因为`hint`是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！\n11. **【强制】**where条件里等号左右字段类型必须一致，否则无法利用索引。\n12. **【建议】**`SELECT|UPDATE|DELETE|REPLACE`要有WHERE子句，且WHERE子句的条件必需使用索引查找。\n13. **【强制】**生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。\n14. **【强制】**WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。\n15. **【建议】**索引列不要使用函数或表达式，否则无法利用索引。如`where length(name)='Admin'`或`where user_id+2=10023`。\n16. **【建议】**减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如`where a=1 or b=2`优化为`where a=1… union …where b=2, key(a),key(b)`。\n17. **【建议】**分页查询，当limit起点较高时，可先用过滤条件进行过滤。如`select a,b,c from t1 limit 10000,20;`优化为: `select a,b,c from t1 where id>10000 limit 20;`。\n\n### 2.2.2 多表连接\n\n1. **【强制】**禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。\n2. **【强制】**禁止在业务的更新类SQL语句中使用join，比如`update t1 join t2…`。\n3. **【建议】**不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。\n4. **【建议】**线上环境，多表join不要超过3个表。\n5. **【建议】**多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如`select a from db1.table1 alias1 where …`。\n6. **【建议】**在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。\n\n### 2.2.3 事务\n\n1. **【建议】**事务中`INSERT|UPDATE|DELETE|REPLACE`语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。\n2. **【建议】**批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。\n3. **【建议】**对于有`auto_increment`属性字段的表的插入操作，并发需要控制在200以内。\n4. **【强制】**程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为`repeatable-read`。\n5. **【建议】**事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。\n6. **【建议】**事务里更新语句尽量基于主键或`unique key`，如`update … where id=XX`; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。\n7. **【建议】**尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。\n8. **【建议】**对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。\n\n### 2.2.4 排序和分组\n\n1. **【建议】**减少使用`order by`，和业务沟通能不排序就不排序，或将排序放到程序端去做。`order by`、`group by`、`distinct`这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。\n2. **【建议】**`order by`、`group by`、`distinct`这些SQL尽量利用索引直接检索出排序好的数据。如`where a=1 order by`可以利用`key(a,b)`。\n3. **【建议】**包含了`order by`、`group by`、`distinct`这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。\n\n### 2.2.5 线上禁止使用的SQL语句\n\n1. **【高危】**禁用`update|delete t1 … where a=XX limit XX;` 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上`order by PK`。\n2. **【高危】**禁止使用关联子查询，如`update t1 set … where name in(select name from user where…);`效率极其低下。\n3. **【强制】**禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。\n4. **【强制】**禁用`insert into …on duplicate key update…`在高并发环境下，会造成主从不一致。\n5. **【强制】**禁止联表更新语句，如`update t1,t2 where t1.id=t2.id…`。","slug":"MySQL数据库设计规范","published":1,"date":"2020-04-16T09:31:43.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ap001719ia0cyq1cjh","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MySQL数据库设计规范\"><a href=\"#MySQL数据库设计规范\" class=\"headerlink\" title=\"MySQL数据库设计规范\"></a>MySQL数据库设计规范</h1><p>转载原文：<a href=\"https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95\">https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95</a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">1</span>. 规范背景与目的\t<br><br><span class=\"hljs-attribute\">2</span>. 设计规范<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span> 数据库设计\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span> 库名\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span> 表结构\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">3</span> 列数据类型优化\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">4</span> 索引设计\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">5</span> 分库分表、分区表\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">6</span> 字符集\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">7</span> 程序DAO层设计建议\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">8</span> 一个规范的建表语句示例\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span> SQL编写\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">1</span> DML语句\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">2</span> 多表连接\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span> 事务\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span> 排序和分组\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span> 线上禁止使用的SQL语句<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-规范背景与目的\"><a href=\"#1-规范背景与目的\" class=\"headerlink\" title=\"1. 规范背景与目的\"></a>1. 规范背景与目的</h2><p>MySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p>\n<h2 id=\"2-设计规范\"><a href=\"#2-设计规范\" class=\"headerlink\" title=\"2. 设计规范\"></a>2. 设计规范</h2><h3 id=\"2-1-数据库设计\"><a href=\"#2-1-数据库设计\" class=\"headerlink\" title=\"2.1 数据库设计\"></a>2.1 数据库设计</h3><p>以下所有规范会按照<strong>【高危】</strong>、<strong>【强制】</strong>、<strong>【建议】</strong>三个级别进行标注，遵守优先级从高到低。</p>\n<p>对于不满足<strong>【高危】</strong>和<strong>【强制】</strong>两个级别的设计，DBA会强制打回要求修改。</p>\n<h3 id=\"2-1-1-库名\"><a href=\"#2-1-1-库名\" class=\"headerlink\" title=\"2.1.1 库名\"></a>2.1.1 库名</h3><ol>\n<li><strong>【强制】</strong>库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</li>\n<li><strong>【强制】</strong>库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</li>\n<li><strong>【强制】</strong>一般分库名称命名格式是<code>库通配名_编号</code>，编号从0开始递增，比如<code>wenda_001</code>以时间进行分库的名称格式是“库通配名_时间”</li>\n<li><strong>【强制】</strong>创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：<code>create database db1 default character set utf8;</code>。</li>\n</ol>\n<h3 id=\"2-1-2-表结构\"><a href=\"#2-1-2-表结构\" class=\"headerlink\" title=\"2.1.2 表结构\"></a>2.1.2 表结构</h3><ol>\n<li><strong>【强制】</strong>表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</li>\n<li><strong>【强制】</strong>表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定字符集为utf8或utf8mb4。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB&#x2F;MyISAM&#x2F;Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</li>\n<li><strong>【强制】</strong>建表必须有comment</li>\n<li><strong>【建议】</strong>建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为<code>auto_increment(2)</code>标识表里每一行主体的字段不要设为主键，建议设为其他字段如<code>user_id</code>，<code>order_id</code>等，并建立unique key索引（可参考<code>cdb.teacher</code>表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I&#x2F;O，性能下降。</li>\n<li><strong>【建议】</strong>核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段<code>create_time</code>和最后更新时间字段<code>update_time</code>，便于查问题。</li>\n<li><strong>【建议】</strong>表中所有字段必须都是<code>NOT NULL</code>属性，业务可以根据需要定义<code>DEFAULT</code>值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li>\n<li><strong>【建议】</strong>建议对表里的<code>blob</code>、<code>text</code>等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</li>\n<li><strong>【建议】</strong>反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如<code>user_name</code>属性在<code>user_account</code>，<code>user_login_log</code>等表里冗余一份，减少join查询。</li>\n<li><strong>【强制】</strong>中间表用于保留中间结果集，名称必须以<code>tmp_</code>开头。备份表用于备份或抓取源表快照，名称必须以<code>bak_</code>开头。中间表和备份表定期清理。</li>\n<li><strong>【强制】</strong>对于超过100W行的大表进行<code>alter table</code>，必须经过DBA审核，并在业务低峰期执行。因为<code>alter table</code>会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li>\n</ol>\n<h3 id=\"2-1-3-列数据类型优化\"><a href=\"#2-1-3-列数据类型优化\" class=\"headerlink\" title=\"2.1.3 列数据类型优化\"></a>2.1.3 列数据类型优化</h3><ol>\n<li><strong>【建议】</strong>表中的自增列（<code>auto_increment</code>属性），推荐使用<code>bigint</code>类型。因为无符号<code>int</code>存储范围为<code>-2147483648~2147483647</code>（大约21亿左右），溢出后会导致报错。</li>\n<li><strong>【建议】</strong>业务中选择性很少的状态<code>status</code>、类型<code>type</code>等字段推荐使用<code>tinytint</code>或者<code>smallint</code>类型节省存储空间。</li>\n<li><strong>【建议】</strong>业务中IP地址字段推荐使用<code>int</code>类型，不推荐用<code>char(15)</code>。因为<code>int</code>只占4字节，可以用如下函数相互转换，而<code>char(15)</code>占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：<code>select inet_aton(&#39;192.168.2.12&#39;); select inet_ntoa(3232236044);</code> PHP: <code>ip2long(‘192.168.2.12’); long2ip(3530427185);</code></li>\n<li><strong>【建议】</strong>不推荐使用<code>enum</code>，<code>set</code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用<code>tinyint</code>或<code>smallint</code>。</li>\n<li><strong>【建议】</strong>不推荐使用<code>blob</code>，<code>text</code>等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在<code>overflow-page</code>里。不幸的是在<code>compact</code>行格式下，原始<code>page</code>和<code>overflow-page</code>都会加载。</li>\n<li><strong>【建议】</strong>存储金钱的字段，建议用<code>int</code>，程序端乘以100和除以100进行存取。因为<code>int</code>占用4字节，而<code>double</code>占用8字节，空间浪费。</li>\n<li><strong>【建议】</strong>文本数据尽量用<code>varchar</code>存储。因为<code>varchar</code>是变长存储，比<code>char</code>更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为<code>mediumtext</code>字段。而<code>text</code>在utf8字符集下最多存21844个字符，<code>mediumtext</code>最多存2^24&#x2F;3个字符，<code>longtext</code>最多存2^32个字符。一般建议用<code>varchar</code>类型，字符数不要超过2700。</li>\n<li><strong>【建议】</strong>时间类型尽量选取<code>timestamp</code>。因为<code>datetime</code>占用8字节，<code>timestamp</code>仅占用4字节，但是范围为<code>1970-01-01 00:00:01</code>到<code>2038-01-01 00:00:00</code>。更为高阶的方法，选用<code>int</code>来存储时间，使用SQL函数<code>unix_timestamp()</code>和<code>from_unixtime()</code>来进行转换。</li>\n</ol>\n<p>详细存储大小参考原文：<a href=\"https://blog.csdn.net/HXNLYW/article/details/100104768\">https://blog.csdn.net/HXNLYW/article/details/100104768</a></p>\n<h4 id=\"整数型数据类型\"><a href=\"#整数型数据类型\" class=\"headerlink\" title=\"整数型数据类型\"></a>整数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TINYINT</td>\n<td align=\"center\">很小的正数（一般用于boolean存储）</td>\n<td align=\"center\">1个字节</td>\n<td align=\"center\">-128<del>127<br />unsigned：0</del>255</td>\n</tr>\n<tr>\n<td align=\"center\">SMALLINT</td>\n<td align=\"center\">小正数</td>\n<td align=\"center\">2个字节</td>\n<td align=\"center\">-32768<del>32767<br />unsigned：0</del>65535</td>\n</tr>\n<tr>\n<td align=\"center\">MEDIUMINT</td>\n<td align=\"center\">中等大小的正数</td>\n<td align=\"center\">3个字节</td>\n<td align=\"center\">-2^23 ~2^23-1<br/>unsigned: 2^24 -1</td>\n</tr>\n<tr>\n<td align=\"center\">INT(INTEGER)</td>\n<td align=\"center\">普通大小的正数</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">-2^31 ~2^31-1<br />unsigned: 2^32 -1</td>\n</tr>\n<tr>\n<td align=\"center\">BIGINT</td>\n<td align=\"center\">大正数(一般用于主键)</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">-2^63 ~2^63-1<br/>unsigned: 2^64 -1</td>\n</tr>\n</tbody></table>\n<h4 id=\"小数型数据类型\"><a href=\"#小数型数据类型\" class=\"headerlink\" title=\"小数型数据类型\"></a>小数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">FLOAT(M,N)</td>\n<td align=\"center\">M表示总共位数，N表示小数位数（单精度浮点数）</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">±1.175494351E – 38</td>\n</tr>\n<tr>\n<td align=\"center\">DOUBLE(M,N)</td>\n<td align=\"center\">双精度浮点数</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">±2.2250738585072014E – 308</td>\n</tr>\n<tr>\n<td align=\"center\">DECIMAL(M,D)</td>\n<td align=\"center\">压缩的“严格”定点数</td>\n<td align=\"center\">M+2个字节</td>\n<td align=\"center\">可变；其值的范围依赖于M 和D</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串数据类型\"><a href=\"#字符串数据类型\" class=\"headerlink\" title=\"字符串数据类型\"></a>字符串数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CHAR(N)</td>\n<td align=\"center\">固定长度</td>\n<td align=\"center\">N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2）</td>\n<td align=\"center\">0~255字符</td>\n</tr>\n<tr>\n<td align=\"center\">VARCHAR(N)</td>\n<td align=\"center\">可变长度</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">TEXT</td>\n<td align=\"center\">文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">LONGTEXT</td>\n<td align=\"center\">长文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~2^32-1字节</td>\n</tr>\n</tbody></table>\n<h4 id=\"日期数据类型\"><a href=\"#日期数据类型\" class=\"headerlink\" title=\"日期数据类型\"></a>日期数据类型</h4><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储大小</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DATE</td>\n<td>存储日期值(yyyy-MM-dd)</td>\n<td>3个字节</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>存储时分秒(HH:mm:ss)</td>\n<td>3个字节</td>\n<td>00:00:00~23:59:59</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>存储日期+时间(yyyy-MM-dd HH:mm:ss)</td>\n<td>8个字节</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss)</td>\n<td>4个字节</td>\n<td>1970-01-01 00:00:01~2038-01-19 03:14:07</td>\n</tr>\n</tbody></table>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><blockquote>\n<p> UTF-8   ： 一个英文&#x2F;数字字符占1个字节，一个中文（含繁体）字符占3个字节。<br>Unicode： 一个英文&#x2F;数字字符占2个字节，一个中文（含繁体）字符占2个字节。<br>符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。</p>\n</blockquote>\n<blockquote>\n<p>char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。<br>varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。</p>\n<p>1）char的存取速度优于varchar<br>2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间<br>   varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间<br>3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。</p>\n</blockquote>\n<h3 id=\"2-1-4-索引设计\"><a href=\"#2-1-4-索引设计\" class=\"headerlink\" title=\"2.1.4 索引设计\"></a>2.1.4 索引设计</h3><ol>\n<li><strong>【强制】</strong>InnoDB表必须主键为<code>id int/bigint auto_increment</code>,且主键值禁止被更新。</li>\n<li><strong>【建议】</strong>主键的名称以“<code>pk_</code>”开头，唯一键以“<code>uk_</code>”或“<code>uq_</code>”开头，普通索引以“<code>idx_</code>”开头，一律使用小写格式，以表名&#x2F;字段的名称或缩写作为后缀。</li>\n<li><strong>【强制】</strong>InnoDB和MyISAM存储引擎表，索引类型必须为<code>BTREE</code>；MEMORY表可以根据需要选择<code>HASH</code>或者<code>BTREE</code>类型索引。</li>\n<li><strong>【强制】</strong>单个索引中每个索引记录的长度不能超过64KB。</li>\n<li><strong>【建议】</strong>单个表上的索引个数不能超过7个。</li>\n<li><strong>【建议】</strong>在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列<code>userid</code>的区分度可由<code>select count(distinct userid)</code>计算出来。</li>\n<li><strong>【建议】</strong>在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</li>\n<li><strong>【建议】</strong>建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在<code>key(a,b)</code>，则<code>key(a)</code>为冗余索引，需要删除。</li>\n</ol>\n<h3 id=\"2-1-5-分库分表、分区表\"><a href=\"#2-1-5-分库分表、分区表\" class=\"headerlink\" title=\"2.1.5 分库分表、分区表\"></a>2.1.5 分库分表、分区表</h3><ol>\n<li><strong>【强制】</strong>分区表的分区字段（<code>partition-key</code>）必须有索引，或者是组合索引的首列。</li>\n<li><strong>【强制】</strong>单个分区表中的分区（包括子分区）个数不能超过1024。</li>\n<li><strong>【强制】</strong>上线前RD或者DBA必须指定分区表的创建、清理策略。</li>\n<li><strong>【强制】</strong>访问分区表的SQL必须包含分区键。</li>\n<li><strong>【建议】</strong>单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</li>\n<li><strong>【强制】</strong>对于分区表执行<code>alter table</code>操作，必须在业务低峰期执行。</li>\n<li><strong>【强制】</strong>采用分库策略的，库的数量不能超过1024</li>\n<li><strong>【强制】</strong>采用分表策略的，表的数量不能超过4096</li>\n<li><strong>【建议】</strong>单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</li>\n<li><strong>【建议】</strong>水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li>\n</ol>\n<h3 id=\"2-1-6-字符集\"><a href=\"#2-1-6-字符集\" class=\"headerlink\" title=\"2.1.6 字符集\"></a>2.1.6 字符集</h3><ol>\n<li><strong>【强制】</strong>数据库本身库、表、列所有字符集必须保持一致，为<code>utf8</code>或<code>utf8mb4</code>。</li>\n<li><strong>【强制】</strong>前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为<code>utf8</code>。</li>\n</ol>\n<h3 id=\"2-1-7-程序层DAO设计建议\"><a href=\"#2-1-7-程序层DAO设计建议\" class=\"headerlink\" title=\"2.1.7 程序层DAO设计建议\"></a>2.1.7 程序层DAO设计建议</h3><ol>\n<li><strong>【建议】</strong>新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li>\n<li><strong>【建议】</strong>前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li>\n<li><strong>【建议】</strong>前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</li>\n<li><strong>【建议】</strong>对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li>\n<li><strong>【建议】</strong>对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</li>\n<li><strong>【建议】</strong>在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li>\n<li><strong>【建议】</strong>多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</li>\n<li><strong>【建议】</strong>业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li>\n<li><strong>【建议】</strong>对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</li>\n</ol>\n<h3 id=\"2-1-8-一个规范的建表语句示例\"><a href=\"#2-1-8-一个规范的建表语句示例\" class=\"headerlink\" title=\"2.1.8 一个规范的建表语句示例\"></a>2.1.8 一个规范的建表语句示例</h3><p>一个较为规范的建表语句为：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">CREATE</span> TABLE <span class=\"hljs-keyword\">user</span> (<br>  <span class=\"hljs-symbol\">`id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,<br>  <span class=\"hljs-symbol\">`user_id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户id’<br>  <span class=\"hljs-symbol\">`username`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;真实姓名&#x27;</span>,<br>  <span class=\"hljs-symbol\">`email`</span> varchar(<span class=\"hljs-number\">30</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户邮箱’,<br>  <span class=\"hljs-symbol\">`nickname`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;昵称&#x27;</span>,<br>  <span class=\"hljs-symbol\">`avatar`</span> int(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;头像&#x27;</span>,<br>  <span class=\"hljs-symbol\">`birthday`</span> date <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;生日&#x27;</span>,<br>  <span class=\"hljs-symbol\">`sex`</span> tinyint(<span class=\"hljs-number\">4</span>) DEFAULT <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;性别&#x27;</span>,<br>  <span class=\"hljs-symbol\">`short_introduce`</span> varchar(<span class=\"hljs-number\">150</span>) DEFAULT <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;一句话介绍自己，最多50个汉字&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_resume`</span> varchar(<span class=\"hljs-number\">300</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户提交的简历存放地址&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_register_ip`</span> int <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户注册时的源ip’,<br>  <span class=\"hljs-symbol\">`create_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户记录创建的时间’,<br>  <span class=\"hljs-symbol\">`update_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料修改的时间’,<br>  <span class=\"hljs-symbol\">`user_review_status`</span> tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料审核状态，<span class=\"hljs-number\">1</span>为通过，<span class=\"hljs-number\">2</span>为审核中，<span class=\"hljs-number\">3</span>为未通过，<span class=\"hljs-number\">4</span>为还未提交审核’,<br>  <span class=\"hljs-keyword\">PRIMARY</span> <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-symbol\">`id`</span>),<br>  <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_user_id`</span> (<span class=\"hljs-symbol\">`user_id`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_username`</span>(<span class=\"hljs-symbol\">`username`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_create_time`</span>(<span class=\"hljs-symbol\">`create_time`</span>,<span class=\"hljs-symbol\">`user_review_status`</span>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class=\"hljs-string\">&#x27;网站用户基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-SQL编写\"><a href=\"#2-2-SQL编写\" class=\"headerlink\" title=\"2.2 SQL编写\"></a>2.2 SQL编写</h2><h3 id=\"2-2-1-DML语句\"><a href=\"#2-2-1-DML语句\" class=\"headerlink\" title=\"2.2.1 DML语句\"></a>2.2.1 DML语句</h3><ol>\n<li><strong>【强制】</strong>SELECT语句必须指定具体字段名称，禁止写成<code>*</code>。因为<code>select *</code>会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</li>\n<li><strong>【强制】</strong>insert语句指定具体字段名称，不要写成<code>insert into t1 values(…)</code>，道理同上。</li>\n<li><strong>【建议】</strong><code>insert into…values(XX),(XX),(XX)…</code>。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。</li>\n<li><strong>【建议】</strong>SELECT语句不要使用<code>UNION</code>，推荐使用<code>UNION ALL</code>，并且<code>UNION</code>子句个数限制在5个以内。因为<code>union all</code>不需要去重，节省数据库资源，提高性能。</li>\n<li><strong>【建议】</strong>in值列表限制在500以内。例如<code>select… where userid in(….500个以内…)</code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li>\n<li><strong>【建议】</strong>事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</li>\n<li><strong>【强制】</strong>事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</li>\n<li><strong>【强制】</strong>写入和事务发往主库，只读SQL发往从库。</li>\n<li><strong>【强制】</strong>除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</li>\n<li><strong>【强制】</strong>生产环境禁止使用<code>hint</code>，如<code>sql_no_cache</code>，<code>force index</code>，<code>ignore key</code>，<code>straight join</code>等。因为<code>hint</code>是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</li>\n<li><strong>【强制】</strong>where条件里等号左右字段类型必须一致，否则无法利用索引。</li>\n<li><strong>【建议】</strong><code>SELECT|UPDATE|DELETE|REPLACE</code>要有WHERE子句，且WHERE子句的条件必需使用索引查找。</li>\n<li><strong>【强制】</strong>生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</li>\n<li><strong>【强制】</strong>WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</li>\n<li><strong>【建议】</strong>索引列不要使用函数或表达式，否则无法利用索引。如<code>where length(name)=&#39;Admin&#39;</code>或<code>where user_id+2=10023</code>。</li>\n<li><strong>【建议】</strong>减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如<code>where a=1 or b=2</code>优化为<code>where a=1… union …where b=2, key(a),key(b)</code>。</li>\n<li><strong>【建议】</strong>分页查询，当limit起点较高时，可先用过滤条件进行过滤。如<code>select a,b,c from t1 limit 10000,20;</code>优化为: <code>select a,b,c from t1 where id&gt;10000 limit 20;</code>。</li>\n</ol>\n<h3 id=\"2-2-2-多表连接\"><a href=\"#2-2-2-多表连接\" class=\"headerlink\" title=\"2.2.2 多表连接\"></a>2.2.2 多表连接</h3><ol>\n<li><strong>【强制】</strong>禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li>\n<li><strong>【强制】</strong>禁止在业务的更新类SQL语句中使用join，比如<code>update t1 join t2…</code>。</li>\n<li><strong>【建议】</strong>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</li>\n<li><strong>【建议】</strong>线上环境，多表join不要超过3个表。</li>\n<li><strong>【建议】</strong>多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如<code>select a from db1.table1 alias1 where …</code>。</li>\n<li><strong>【建议】</strong>在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</li>\n</ol>\n<h3 id=\"2-2-3-事务\"><a href=\"#2-2-3-事务\" class=\"headerlink\" title=\"2.2.3 事务\"></a>2.2.3 事务</h3><ol>\n<li><strong>【建议】</strong>事务中<code>INSERT|UPDATE|DELETE|REPLACE</code>语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</li>\n<li><strong>【建议】</strong>批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</li>\n<li><strong>【建议】</strong>对于有<code>auto_increment</code>属性字段的表的插入操作，并发需要控制在200以内。</li>\n<li><strong>【强制】</strong>程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为<code>repeatable-read</code>。</li>\n<li><strong>【建议】</strong>事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</li>\n<li><strong>【建议】</strong>事务里更新语句尽量基于主键或<code>unique key</code>，如<code>update … where id=XX</code>; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li>\n<li><strong>【建议】</strong>尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</li>\n<li><strong>【建议】</strong>对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</li>\n</ol>\n<h3 id=\"2-2-4-排序和分组\"><a href=\"#2-2-4-排序和分组\" class=\"headerlink\" title=\"2.2.4 排序和分组\"></a>2.2.4 排序和分组</h3><ol>\n<li><strong>【建议】</strong>减少使用<code>order by</code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>order by</code>、<code>group by</code>、<code>distinct</code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li>\n<li><strong>【建议】</strong><code>order by</code>、<code>group by</code>、<code>distinct</code>这些SQL尽量利用索引直接检索出排序好的数据。如<code>where a=1 order by</code>可以利用<code>key(a,b)</code>。</li>\n<li><strong>【建议】</strong>包含了<code>order by</code>、<code>group by</code>、<code>distinct</code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li>\n</ol>\n<h3 id=\"2-2-5-线上禁止使用的SQL语句\"><a href=\"#2-2-5-线上禁止使用的SQL语句\" class=\"headerlink\" title=\"2.2.5 线上禁止使用的SQL语句\"></a>2.2.5 线上禁止使用的SQL语句</h3><ol>\n<li><strong>【高危】</strong>禁用<code>update|delete t1 … where a=XX limit XX;</code> 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上<code>order by PK</code>。</li>\n<li><strong>【高危】</strong>禁止使用关联子查询，如<code>update t1 set … where name in(select name from user where…);</code>效率极其低下。</li>\n<li><strong>【强制】</strong>禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li>\n<li><strong>【强制】</strong>禁用<code>insert into …on duplicate key update…</code>在高并发环境下，会造成主从不一致。</li>\n<li><strong>【强制】</strong>禁止联表更新语句，如<code>update t1,t2 where t1.id=t2.id…</code>。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL数据库设计规范\"><a href=\"#MySQL数据库设计规范\" class=\"headerlink\" title=\"MySQL数据库设计规范\"></a>MySQL数据库设计规范</h1><p>转载原文：<a href=\"https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95\">https://github.com/jly8866/archer/blob/master/src/docs/mysql_db_design_guide.md#%E7%9B%AE%E5%BD%95</a></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">1</span>. 规范背景与目的\t<br><br><span class=\"hljs-attribute\">2</span>. 设计规范<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span> 数据库设计\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span> 库名\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">2</span> 表结构\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">3</span> 列数据类型优化\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">4</span> 索引设计\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">5</span> 分库分表、分区表\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">6</span> 字符集\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">7</span> 程序DAO层设计建议\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">8</span> 一个规范的建表语句示例\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span> SQL编写\t<br><br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">1</span> DML语句\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">2</span> 多表连接\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">3</span> 事务\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">4</span> 排序和分组\t<br><span class=\"hljs-attribute\">2</span>.<span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">5</span> 线上禁止使用的SQL语句<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-规范背景与目的\"><a href=\"#1-规范背景与目的\" class=\"headerlink\" title=\"1. 规范背景与目的\"></a>1. 规范背景与目的</h2><p>MySQL数据库与 Oracle、 SQL Server 等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p>\n<h2 id=\"2-设计规范\"><a href=\"#2-设计规范\" class=\"headerlink\" title=\"2. 设计规范\"></a>2. 设计规范</h2><h3 id=\"2-1-数据库设计\"><a href=\"#2-1-数据库设计\" class=\"headerlink\" title=\"2.1 数据库设计\"></a>2.1 数据库设计</h3><p>以下所有规范会按照<strong>【高危】</strong>、<strong>【强制】</strong>、<strong>【建议】</strong>三个级别进行标注，遵守优先级从高到低。</p>\n<p>对于不满足<strong>【高危】</strong>和<strong>【强制】</strong>两个级别的设计，DBA会强制打回要求修改。</p>\n<h3 id=\"2-1-1-库名\"><a href=\"#2-1-1-库名\" class=\"headerlink\" title=\"2.1.1 库名\"></a>2.1.1 库名</h3><ol>\n<li><strong>【强制】</strong>库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</li>\n<li><strong>【强制】</strong>库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</li>\n<li><strong>【强制】</strong>一般分库名称命名格式是<code>库通配名_编号</code>，编号从0开始递增，比如<code>wenda_001</code>以时间进行分库的名称格式是“库通配名_时间”</li>\n<li><strong>【强制】</strong>创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4。创建数据库SQL举例：<code>create database db1 default character set utf8;</code>。</li>\n</ol>\n<h3 id=\"2-1-2-表结构\"><a href=\"#2-1-2-表结构\" class=\"headerlink\" title=\"2.1.2 表结构\"></a>2.1.2 表结构</h3><ol>\n<li><strong>【强制】</strong>表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</li>\n<li><strong>【强制】</strong>表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定字符集为utf8或utf8mb4。</li>\n<li><strong>【强制】</strong>创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB&#x2F;MyISAM&#x2F;Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</li>\n<li><strong>【强制】</strong>建表必须有comment</li>\n<li><strong>【建议】</strong>建表时关于主键：(1)强制要求主键为id，类型为int或bigint，且为<code>auto_increment(2)</code>标识表里每一行主体的字段不要设为主键，建议设为其他字段如<code>user_id</code>，<code>order_id</code>等，并建立unique key索引（可参考<code>cdb.teacher</code>表设计）。因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I&#x2F;O，性能下降。</li>\n<li><strong>【建议】</strong>核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段<code>create_time</code>和最后更新时间字段<code>update_time</code>，便于查问题。</li>\n<li><strong>【建议】</strong>表中所有字段必须都是<code>NOT NULL</code>属性，业务可以根据需要定义<code>DEFAULT</code>值。因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</li>\n<li><strong>【建议】</strong>建议对表里的<code>blob</code>、<code>text</code>等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</li>\n<li><strong>【建议】</strong>反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如<code>user_name</code>属性在<code>user_account</code>，<code>user_login_log</code>等表里冗余一份，减少join查询。</li>\n<li><strong>【强制】</strong>中间表用于保留中间结果集，名称必须以<code>tmp_</code>开头。备份表用于备份或抓取源表快照，名称必须以<code>bak_</code>开头。中间表和备份表定期清理。</li>\n<li><strong>【强制】</strong>对于超过100W行的大表进行<code>alter table</code>，必须经过DBA审核，并在业务低峰期执行。因为<code>alter table</code>会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</li>\n</ol>\n<h3 id=\"2-1-3-列数据类型优化\"><a href=\"#2-1-3-列数据类型优化\" class=\"headerlink\" title=\"2.1.3 列数据类型优化\"></a>2.1.3 列数据类型优化</h3><ol>\n<li><strong>【建议】</strong>表中的自增列（<code>auto_increment</code>属性），推荐使用<code>bigint</code>类型。因为无符号<code>int</code>存储范围为<code>-2147483648~2147483647</code>（大约21亿左右），溢出后会导致报错。</li>\n<li><strong>【建议】</strong>业务中选择性很少的状态<code>status</code>、类型<code>type</code>等字段推荐使用<code>tinytint</code>或者<code>smallint</code>类型节省存储空间。</li>\n<li><strong>【建议】</strong>业务中IP地址字段推荐使用<code>int</code>类型，不推荐用<code>char(15)</code>。因为<code>int</code>只占4字节，可以用如下函数相互转换，而<code>char(15)</code>占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间。 SQL：<code>select inet_aton(&#39;192.168.2.12&#39;); select inet_ntoa(3232236044);</code> PHP: <code>ip2long(‘192.168.2.12’); long2ip(3530427185);</code></li>\n<li><strong>【建议】</strong>不推荐使用<code>enum</code>，<code>set</code>。 因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用<code>tinyint</code>或<code>smallint</code>。</li>\n<li><strong>【建议】</strong>不推荐使用<code>blob</code>，<code>text</code>等类型。它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段。Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在<code>overflow-page</code>里。不幸的是在<code>compact</code>行格式下，原始<code>page</code>和<code>overflow-page</code>都会加载。</li>\n<li><strong>【建议】</strong>存储金钱的字段，建议用<code>int</code>，程序端乘以100和除以100进行存取。因为<code>int</code>占用4字节，而<code>double</code>占用8字节，空间浪费。</li>\n<li><strong>【建议】</strong>文本数据尽量用<code>varchar</code>存储。因为<code>varchar</code>是变长存储，比<code>char</code>更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为<code>mediumtext</code>字段。而<code>text</code>在utf8字符集下最多存21844个字符，<code>mediumtext</code>最多存2^24&#x2F;3个字符，<code>longtext</code>最多存2^32个字符。一般建议用<code>varchar</code>类型，字符数不要超过2700。</li>\n<li><strong>【建议】</strong>时间类型尽量选取<code>timestamp</code>。因为<code>datetime</code>占用8字节，<code>timestamp</code>仅占用4字节，但是范围为<code>1970-01-01 00:00:01</code>到<code>2038-01-01 00:00:00</code>。更为高阶的方法，选用<code>int</code>来存储时间，使用SQL函数<code>unix_timestamp()</code>和<code>from_unixtime()</code>来进行转换。</li>\n</ol>\n<p>详细存储大小参考原文：<a href=\"https://blog.csdn.net/HXNLYW/article/details/100104768\">https://blog.csdn.net/HXNLYW/article/details/100104768</a></p>\n<h4 id=\"整数型数据类型\"><a href=\"#整数型数据类型\" class=\"headerlink\" title=\"整数型数据类型\"></a>整数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TINYINT</td>\n<td align=\"center\">很小的正数（一般用于boolean存储）</td>\n<td align=\"center\">1个字节</td>\n<td align=\"center\">-128<del>127<br />unsigned：0</del>255</td>\n</tr>\n<tr>\n<td align=\"center\">SMALLINT</td>\n<td align=\"center\">小正数</td>\n<td align=\"center\">2个字节</td>\n<td align=\"center\">-32768<del>32767<br />unsigned：0</del>65535</td>\n</tr>\n<tr>\n<td align=\"center\">MEDIUMINT</td>\n<td align=\"center\">中等大小的正数</td>\n<td align=\"center\">3个字节</td>\n<td align=\"center\">-2^23 ~2^23-1<br/>unsigned: 2^24 -1</td>\n</tr>\n<tr>\n<td align=\"center\">INT(INTEGER)</td>\n<td align=\"center\">普通大小的正数</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">-2^31 ~2^31-1<br />unsigned: 2^32 -1</td>\n</tr>\n<tr>\n<td align=\"center\">BIGINT</td>\n<td align=\"center\">大正数(一般用于主键)</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">-2^63 ~2^63-1<br/>unsigned: 2^64 -1</td>\n</tr>\n</tbody></table>\n<h4 id=\"小数型数据类型\"><a href=\"#小数型数据类型\" class=\"headerlink\" title=\"小数型数据类型\"></a>小数型数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">FLOAT(M,N)</td>\n<td align=\"center\">M表示总共位数，N表示小数位数（单精度浮点数）</td>\n<td align=\"center\">4个字节</td>\n<td align=\"center\">±1.175494351E – 38</td>\n</tr>\n<tr>\n<td align=\"center\">DOUBLE(M,N)</td>\n<td align=\"center\">双精度浮点数</td>\n<td align=\"center\">8个字节</td>\n<td align=\"center\">±2.2250738585072014E – 308</td>\n</tr>\n<tr>\n<td align=\"center\">DECIMAL(M,D)</td>\n<td align=\"center\">压缩的“严格”定点数</td>\n<td align=\"center\">M+2个字节</td>\n<td align=\"center\">可变；其值的范围依赖于M 和D</td>\n</tr>\n</tbody></table>\n<h4 id=\"字符串数据类型\"><a href=\"#字符串数据类型\" class=\"headerlink\" title=\"字符串数据类型\"></a>字符串数据类型</h4><table>\n<thead>\n<tr>\n<th align=\"center\">类型名称</th>\n<th align=\"center\">说明</th>\n<th align=\"center\">存储大小</th>\n<th align=\"center\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CHAR(N)</td>\n<td align=\"center\">固定长度</td>\n<td align=\"center\">N * C(字符存储大小见文末注释1)（与CHAR区别见文末注释2）</td>\n<td align=\"center\">0~255字符</td>\n</tr>\n<tr>\n<td align=\"center\">VARCHAR(N)</td>\n<td align=\"center\">可变长度</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">TEXT</td>\n<td align=\"center\">文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~65535字节</td>\n</tr>\n<tr>\n<td align=\"center\">LONGTEXT</td>\n<td align=\"center\">长文本</td>\n<td align=\"center\">实际存储大小</td>\n<td align=\"center\">0~2^32-1字节</td>\n</tr>\n</tbody></table>\n<h4 id=\"日期数据类型\"><a href=\"#日期数据类型\" class=\"headerlink\" title=\"日期数据类型\"></a>日期数据类型</h4><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储大小</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DATE</td>\n<td>存储日期值(yyyy-MM-dd)</td>\n<td>3个字节</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>存储时分秒(HH:mm:ss)</td>\n<td>3个字节</td>\n<td>00:00:00~23:59:59</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>存储日期+时间(yyyy-MM-dd HH:mm:ss)</td>\n<td>8个字节</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>存储日期+时间，可作时间戳(yyyy-MM-dd HH:mm:ss)</td>\n<td>4个字节</td>\n<td>1970-01-01 00:00:01~2038-01-19 03:14:07</td>\n</tr>\n</tbody></table>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><blockquote>\n<p> UTF-8   ： 一个英文&#x2F;数字字符占1个字节，一个中文（含繁体）字符占3个字节。<br>Unicode： 一个英文&#x2F;数字字符占2个字节，一个中文（含繁体）字符占2个字节。<br>符号      ： 英文标点占1个字节，中文标点占2个字节。举例：英文句号“.”占1个字节的大小，中文句号“。”占2个字节的大小。</p>\n</blockquote>\n<blockquote>\n<p>char：固定长度，最大长度是255字符。适合用在身份证号码、手机号码等定、等长的加密密码等。<br>varchar：可变长度，最大长度65535字节，其实最多只能存储65532个字节，还有3个字节用于存储长度。</p>\n<p>1）char的存取速度优于varchar<br>2）char(20)表示这个字段最多存20个字符，如果只存了16个字符，那么也会占用20个字符的空间<br>   varchar(20)表示这个字段最多存20个字符，如果只存了16个字符，那么只占用16个字符的空间<br>3）即使使用Varchar数据类型，也不能够太过于慷慨！比如你只使用到90个字符，VARCHAR(100)与VARCHAR(200)，虽然他们用来存储90个字符的数据，其存储空间相同。但是对于内存的消耗是不同的。</p>\n</blockquote>\n<h3 id=\"2-1-4-索引设计\"><a href=\"#2-1-4-索引设计\" class=\"headerlink\" title=\"2.1.4 索引设计\"></a>2.1.4 索引设计</h3><ol>\n<li><strong>【强制】</strong>InnoDB表必须主键为<code>id int/bigint auto_increment</code>,且主键值禁止被更新。</li>\n<li><strong>【建议】</strong>主键的名称以“<code>pk_</code>”开头，唯一键以“<code>uk_</code>”或“<code>uq_</code>”开头，普通索引以“<code>idx_</code>”开头，一律使用小写格式，以表名&#x2F;字段的名称或缩写作为后缀。</li>\n<li><strong>【强制】</strong>InnoDB和MyISAM存储引擎表，索引类型必须为<code>BTREE</code>；MEMORY表可以根据需要选择<code>HASH</code>或者<code>BTREE</code>类型索引。</li>\n<li><strong>【强制】</strong>单个索引中每个索引记录的长度不能超过64KB。</li>\n<li><strong>【建议】</strong>单个表上的索引个数不能超过7个。</li>\n<li><strong>【建议】</strong>在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列<code>userid</code>的区分度可由<code>select count(distinct userid)</code>计算出来。</li>\n<li><strong>【建议】</strong>在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</li>\n<li><strong>【建议】</strong>建表或加索引时，保证表里互相不存在冗余索引。对于MySQL来说，如果表里已经存在<code>key(a,b)</code>，则<code>key(a)</code>为冗余索引，需要删除。</li>\n</ol>\n<h3 id=\"2-1-5-分库分表、分区表\"><a href=\"#2-1-5-分库分表、分区表\" class=\"headerlink\" title=\"2.1.5 分库分表、分区表\"></a>2.1.5 分库分表、分区表</h3><ol>\n<li><strong>【强制】</strong>分区表的分区字段（<code>partition-key</code>）必须有索引，或者是组合索引的首列。</li>\n<li><strong>【强制】</strong>单个分区表中的分区（包括子分区）个数不能超过1024。</li>\n<li><strong>【强制】</strong>上线前RD或者DBA必须指定分区表的创建、清理策略。</li>\n<li><strong>【强制】</strong>访问分区表的SQL必须包含分区键。</li>\n<li><strong>【建议】</strong>单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</li>\n<li><strong>【强制】</strong>对于分区表执行<code>alter table</code>操作，必须在业务低峰期执行。</li>\n<li><strong>【强制】</strong>采用分库策略的，库的数量不能超过1024</li>\n<li><strong>【强制】</strong>采用分表策略的，表的数量不能超过4096</li>\n<li><strong>【建议】</strong>单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</li>\n<li><strong>【建议】</strong>水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</li>\n</ol>\n<h3 id=\"2-1-6-字符集\"><a href=\"#2-1-6-字符集\" class=\"headerlink\" title=\"2.1.6 字符集\"></a>2.1.6 字符集</h3><ol>\n<li><strong>【强制】</strong>数据库本身库、表、列所有字符集必须保持一致，为<code>utf8</code>或<code>utf8mb4</code>。</li>\n<li><strong>【强制】</strong>前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为<code>utf8</code>。</li>\n</ol>\n<h3 id=\"2-1-7-程序层DAO设计建议\"><a href=\"#2-1-7-程序层DAO设计建议\" class=\"headerlink\" title=\"2.1.7 程序层DAO设计建议\"></a>2.1.7 程序层DAO设计建议</h3><ol>\n<li><strong>【建议】</strong>新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</li>\n<li><strong>【建议】</strong>前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</li>\n<li><strong>【建议】</strong>前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</li>\n<li><strong>【建议】</strong>对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</li>\n<li><strong>【建议】</strong>对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</li>\n<li><strong>【建议】</strong>在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</li>\n<li><strong>【建议】</strong>多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</li>\n<li><strong>【建议】</strong>业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</li>\n<li><strong>【建议】</strong>对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</li>\n</ol>\n<h3 id=\"2-1-8-一个规范的建表语句示例\"><a href=\"#2-1-8-一个规范的建表语句示例\" class=\"headerlink\" title=\"2.1.8 一个规范的建表语句示例\"></a>2.1.8 一个规范的建表语句示例</h3><p>一个较为规范的建表语句为：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">CREATE</span> TABLE <span class=\"hljs-keyword\">user</span> (<br>  <span class=\"hljs-symbol\">`id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT,<br>  <span class=\"hljs-symbol\">`user_id`</span> bigint(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户id’<br>  <span class=\"hljs-symbol\">`username`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;真实姓名&#x27;</span>,<br>  <span class=\"hljs-symbol\">`email`</span> varchar(<span class=\"hljs-number\">30</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户邮箱’,<br>  <span class=\"hljs-symbol\">`nickname`</span> varchar(<span class=\"hljs-number\">45</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;昵称&#x27;</span>,<br>  <span class=\"hljs-symbol\">`avatar`</span> int(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;头像&#x27;</span>,<br>  <span class=\"hljs-symbol\">`birthday`</span> date <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;生日&#x27;</span>,<br>  <span class=\"hljs-symbol\">`sex`</span> tinyint(<span class=\"hljs-number\">4</span>) DEFAULT <span class=\"hljs-string\">&#x27;0&#x27;</span> COMMENT <span class=\"hljs-string\">&#x27;性别&#x27;</span>,<br>  <span class=\"hljs-symbol\">`short_introduce`</span> varchar(<span class=\"hljs-number\">150</span>) DEFAULT <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;一句话介绍自己，最多50个汉字&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_resume`</span> varchar(<span class=\"hljs-number\">300</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT <span class=\"hljs-string\">&#x27;用户提交的简历存放地址&#x27;</span>,<br>  <span class=\"hljs-symbol\">`user_register_ip`</span> int <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户注册时的源ip’,<br>  <span class=\"hljs-symbol\">`create_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户记录创建的时间’,<br>  <span class=\"hljs-symbol\">`update_time`</span> timestamp <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料修改的时间’,<br>  <span class=\"hljs-symbol\">`user_review_status`</span> tinyint <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> COMMENT ‘用户资料审核状态，<span class=\"hljs-number\">1</span>为通过，<span class=\"hljs-number\">2</span>为审核中，<span class=\"hljs-number\">3</span>为未通过，<span class=\"hljs-number\">4</span>为还未提交审核’,<br>  <span class=\"hljs-keyword\">PRIMARY</span> <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-symbol\">`id`</span>),<br>  <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_user_id`</span> (<span class=\"hljs-symbol\">`user_id`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_username`</span>(<span class=\"hljs-symbol\">`username`</span>),<br>  <span class=\"hljs-keyword\">KEY</span> <span class=\"hljs-symbol\">`idx_create_time`</span>(<span class=\"hljs-symbol\">`create_time`</span>,<span class=\"hljs-symbol\">`user_review_status`</span>)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=<span class=\"hljs-string\">&#x27;网站用户基本信息&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-SQL编写\"><a href=\"#2-2-SQL编写\" class=\"headerlink\" title=\"2.2 SQL编写\"></a>2.2 SQL编写</h2><h3 id=\"2-2-1-DML语句\"><a href=\"#2-2-1-DML语句\" class=\"headerlink\" title=\"2.2.1 DML语句\"></a>2.2.1 DML语句</h3><ol>\n<li><strong>【强制】</strong>SELECT语句必须指定具体字段名称，禁止写成<code>*</code>。因为<code>select *</code>会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</li>\n<li><strong>【强制】</strong>insert语句指定具体字段名称，不要写成<code>insert into t1 values(…)</code>，道理同上。</li>\n<li><strong>【建议】</strong><code>insert into…values(XX),(XX),(XX)…</code>。这里XX的值不要超过5000个。值过多虽然上线很很快，但会引起主从同步延迟。</li>\n<li><strong>【建议】</strong>SELECT语句不要使用<code>UNION</code>，推荐使用<code>UNION ALL</code>，并且<code>UNION</code>子句个数限制在5个以内。因为<code>union all</code>不需要去重，节省数据库资源，提高性能。</li>\n<li><strong>【建议】</strong>in值列表限制在500以内。例如<code>select… where userid in(….500个以内…)</code>，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</li>\n<li><strong>【建议】</strong>事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</li>\n<li><strong>【强制】</strong>事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</li>\n<li><strong>【强制】</strong>写入和事务发往主库，只读SQL发往从库。</li>\n<li><strong>【强制】</strong>除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</li>\n<li><strong>【强制】</strong>生产环境禁止使用<code>hint</code>，如<code>sql_no_cache</code>，<code>force index</code>，<code>ignore key</code>，<code>straight join</code>等。因为<code>hint</code>是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</li>\n<li><strong>【强制】</strong>where条件里等号左右字段类型必须一致，否则无法利用索引。</li>\n<li><strong>【建议】</strong><code>SELECT|UPDATE|DELETE|REPLACE</code>要有WHERE子句，且WHERE子句的条件必需使用索引查找。</li>\n<li><strong>【强制】</strong>生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</li>\n<li><strong>【强制】</strong>WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</li>\n<li><strong>【建议】</strong>索引列不要使用函数或表达式，否则无法利用索引。如<code>where length(name)=&#39;Admin&#39;</code>或<code>where user_id+2=10023</code>。</li>\n<li><strong>【建议】</strong>减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如<code>where a=1 or b=2</code>优化为<code>where a=1… union …where b=2, key(a),key(b)</code>。</li>\n<li><strong>【建议】</strong>分页查询，当limit起点较高时，可先用过滤条件进行过滤。如<code>select a,b,c from t1 limit 10000,20;</code>优化为: <code>select a,b,c from t1 where id&gt;10000 limit 20;</code>。</li>\n</ol>\n<h3 id=\"2-2-2-多表连接\"><a href=\"#2-2-2-多表连接\" class=\"headerlink\" title=\"2.2.2 多表连接\"></a>2.2.2 多表连接</h3><ol>\n<li><strong>【强制】</strong>禁止跨db的join语句。因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</li>\n<li><strong>【强制】</strong>禁止在业务的更新类SQL语句中使用join，比如<code>update t1 join t2…</code>。</li>\n<li><strong>【建议】</strong>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</li>\n<li><strong>【建议】</strong>线上环境，多表join不要超过3个表。</li>\n<li><strong>【建议】</strong>多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如<code>select a from db1.table1 alias1 where …</code>。</li>\n<li><strong>【建议】</strong>在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</li>\n</ol>\n<h3 id=\"2-2-3-事务\"><a href=\"#2-2-3-事务\" class=\"headerlink\" title=\"2.2.3 事务\"></a>2.2.3 事务</h3><ol>\n<li><strong>【建议】</strong>事务中<code>INSERT|UPDATE|DELETE|REPLACE</code>语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</li>\n<li><strong>【建议】</strong>批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</li>\n<li><strong>【建议】</strong>对于有<code>auto_increment</code>属性字段的表的插入操作，并发需要控制在200以内。</li>\n<li><strong>【强制】</strong>程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为<code>repeatable-read</code>。</li>\n<li><strong>【建议】</strong>事务里包含SQL不超过5个（支付业务除外）。因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</li>\n<li><strong>【建议】</strong>事务里更新语句尽量基于主键或<code>unique key</code>，如<code>update … where id=XX</code>; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li>\n<li><strong>【建议】</strong>尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</li>\n<li><strong>【建议】</strong>对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</li>\n</ol>\n<h3 id=\"2-2-4-排序和分组\"><a href=\"#2-2-4-排序和分组\" class=\"headerlink\" title=\"2.2.4 排序和分组\"></a>2.2.4 排序和分组</h3><ol>\n<li><strong>【建议】</strong>减少使用<code>order by</code>，和业务沟通能不排序就不排序，或将排序放到程序端去做。<code>order by</code>、<code>group by</code>、<code>distinct</code>这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</li>\n<li><strong>【建议】</strong><code>order by</code>、<code>group by</code>、<code>distinct</code>这些SQL尽量利用索引直接检索出排序好的数据。如<code>where a=1 order by</code>可以利用<code>key(a,b)</code>。</li>\n<li><strong>【建议】</strong>包含了<code>order by</code>、<code>group by</code>、<code>distinct</code>这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li>\n</ol>\n<h3 id=\"2-2-5-线上禁止使用的SQL语句\"><a href=\"#2-2-5-线上禁止使用的SQL语句\" class=\"headerlink\" title=\"2.2.5 线上禁止使用的SQL语句\"></a>2.2.5 线上禁止使用的SQL语句</h3><ol>\n<li><strong>【高危】</strong>禁用<code>update|delete t1 … where a=XX limit XX;</code> 这种带limit的更新语句。因为会导致主从不一致，导致数据错乱。建议加上<code>order by PK</code>。</li>\n<li><strong>【高危】</strong>禁止使用关联子查询，如<code>update t1 set … where name in(select name from user where…);</code>效率极其低下。</li>\n<li><strong>【强制】</strong>禁用procedure、function、trigger、views、event、外键约束。因为他们消耗数据库资源，降低数据库实例可扩展性。推荐都在程序端实现。</li>\n<li><strong>【强制】</strong>禁用<code>insert into …on duplicate key update…</code>在高并发环境下，会造成主从不一致。</li>\n<li><strong>【强制】</strong>禁止联表更新语句，如<code>update t1,t2 where t1.id=t2.id…</code>。</li>\n</ol>\n"},{"_content":"# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","source":"_posts/SpringBoot 全局异常处理.md","raw":"---\ncategories: []\n---\n# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","slug":"SpringBoot 全局异常处理","published":1,"date":"2020-03-22T12:22:44.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8ar001819ia1gm5759d","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","source":"_posts/SpringBoot AOP处理请求日志处理打印.md","raw":"---\ncategories: []\n---\n# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","slug":"SpringBoot AOP处理请求日志处理打印","published":1,"date":"2020-03-05T17:58:59.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8as001919ia17x48nvv","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)","source":"_posts/SpringBoot Redis 配置详解.md","raw":"---\ncategories: []\n---\n# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)","slug":"SpringBoot Redis 配置详解","published":1,"date":"2020-03-22T12:24:41.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8at001a19ia6dly963t","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n"},{"_content":"# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","source":"_posts/SpringBoot Druid 配置详解.md","raw":"---\ncategories: []\n---\n# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","slug":"SpringBoot Druid 配置详解","published":1,"date":"2020-03-17T16:35:09.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8at001b19iaadob86qc","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n"},{"_content":"# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","source":"_posts/SpringBoot2 线程池的定义和使用.md","raw":"---\ncategories: []\n---\n# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","slug":"SpringBoot2 线程池的定义和使用","published":1,"date":"2020-03-05T17:55:52.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8au001c19ia8sxsewxy","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html","source":"_posts/SpringBoot2 整合 Swagger2.md","raw":"---\ncategories: []\n---\n# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html","slug":"SpringBoot2 整合 Swagger2","published":1,"date":"2020-03-24T12:16:43.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8av001d19ia9430adib","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n"},{"_content":"# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","source":"_posts/SpringBoot Shiro 配置自定义密码加密器.md","raw":"---\ncategories: []\n---\n# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","slug":"SpringBoot Shiro 配置自定义密码加密器","published":1,"date":"2020-03-12T17:34:28.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8av001e19iahvgicpwj","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"_content":"","source":"_posts/SSR搭建科学上网服务VPN.md","raw":"---\ncategories: []\n---\n","slug":"SSR搭建科学上网服务VPN","published":1,"date":"2020-03-24T12:19:22.000Z","updated":"2022-11-17T08:39:46.099Z","_id":"claktn8aw001f19ia8k1i6cac","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"claktn6ys000119ia7likam2n","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8oq001j19ia25libkxv"},{"post_id":"claktn6yu000219iagjvz8u2m","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8or001k19iaafk99fak"},{"post_id":"claktn6z1000719iac3ewc5bz","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8or001m19ia90xj7eub"},{"post_id":"claktn6z3000819ia7jgx5axi","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8os001n19iafgea5qx0"},{"post_id":"claktn6yv000319ia206l2d7m","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8os001o19iaejctcpoc"},{"post_id":"claktn6z5000919iaf84m5rua","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8ot001q19ia24sj5ir0"},{"post_id":"claktn6yj000019iago1d6sx4","category_id":"claktn8or001l19ia98kx1vom","_id":"claktn8ot001r19iaaeyubk8e"},{"post_id":"claktn6z7000b19ia8pvw3k56","category_id":"claktn8os001p19iaapni6an3","_id":"claktn8ov001u19ia0rk53svf"},{"post_id":"claktn6z6000a19iadp358xdz","category_id":"claktn8os001p19iaapni6an3","_id":"claktn8ow001v19ia5vebfkd0"},{"post_id":"claktn6z9000e19ia91st95nx","category_id":"claktn8ov001t19ia2fh650b6","_id":"claktn8ox001y19ia9h8y1rrz"},{"post_id":"claktn6z9000d19iadidi022v","category_id":"claktn8ov001t19ia2fh650b6","_id":"claktn8oy002019ia08vz4dkp"},{"post_id":"claktn6z0000619ia6jnkbm0m","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8oz002119iadc6o140p"},{"post_id":"claktn6yy000519iab4rq2wrs","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8p0002319iaan7ud7ol"},{"post_id":"claktn6z8000c19iaf3utcb2q","category_id":"claktn8ov001t19ia2fh650b6","_id":"claktn8p2002419iaanyi1ubj"},{"post_id":"claktn6za000f19iacuwq6w7y","category_id":"claktn8ov001t19ia2fh650b6","_id":"claktn8p3002519iacpk31f8n"},{"post_id":"claktn6yw000419ia2a3921nb","category_id":"claktn8on001g19iaczrn7pwc","_id":"claktn8p4002619iafsd7ejd1"},{"post_id":"claktn6zg000g19ia29u6hauc","category_id":"claktn8p0002219ia9vejebtx","_id":"claktn8p4002719ia4xwqgcrm"},{"post_id":"claktn716000w19iacxze1u5d","category_id":"claktn8p6002819iagynuahf6","_id":"claktn8p6002919iab9dt1lzv"},{"post_id":"claktn70y000l19ia9jc34hxo","category_id":"claktn92i002a19ia8xah0dmq","_id":"claktn92i002c19iag2n73d4t"},{"post_id":"claktn70g000j19iah0to51sz","category_id":"claktn92i002a19ia8xah0dmq","_id":"claktn92i002d19iac1vi5al3"},{"post_id":"claktn70z000m19ia61bxcuw0","category_id":"claktn92i002a19ia8xah0dmq","_id":"claktn92j002e19iaasuqeale"},{"post_id":"claktn715000v19ia64txbatn","category_id":"claktn8p6002819iagynuahf6","_id":"claktn9bi002g19ia88rca0mg"},{"post_id":"claktn714000u19iaaeh1hd5a","category_id":"claktn9bh002f19ia0pub5jqs","_id":"claktn9bi002h19ia2w2r4hup"},{"post_id":"claktn70x000k19ia6i42ec2v","category_id":"claktn92i002a19ia8xah0dmq","_id":"claktn9nk002j19ia1f4h4cvm"},{"post_id":"claktn712000s19iaeksm2gk0","category_id":"claktn9nj002i19iah8za5g87","_id":"claktn9nl002l19ia38a3bvtc"},{"post_id":"claktn713000t19iaa0xzhz6o","category_id":"claktn9bh002f19ia0pub5jqs","_id":"claktn9nl002n19iadejn98ps"},{"post_id":"claktn711000q19ia4lilbsos","category_id":"claktn9nk002k19ia8cd0fpx2","_id":"claktn9nm002p19ia0u98g2d7"},{"post_id":"claktn712000r19iahqos007q","category_id":"claktn9nk002k19ia8cd0fpx2","_id":"claktn9nm002q19ia437fccxc"},{"post_id":"claktn710000o19iaaq7oekxe","category_id":"claktn9nl002m19ia5h4raevy","_id":"claktn9nm002s19ia7b91hdjx"},{"post_id":"claktn711000p19iaff0c68rf","category_id":"claktn9nl002m19ia5h4raevy","_id":"claktn9nm002t19ia51g60xwy"},{"post_id":"claktn710000n19ia87ea8map","category_id":"claktn9nl002m19ia5h4raevy","_id":"claktn9nm002u19iab10z28qa"}],"PostTag":[{"post_id":"claktn6zg000g19ia29u6hauc","tag_id":"cl9qxfdah0004bz2b59t399l6","_id":"claktroou002v19iaemlhb3cm"}],"Tag":[{"name":"默认","_id":"cl9qxfdah0004bz2b59t399l6"}]}}