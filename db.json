{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/bg/bg.png","path":"img/bg/bg.png","modified":0,"renderable":0},{"_id":"source/img/bg/bg1.jpg","path":"img/bg/bg1.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/the_moon.jpg","path":"img/bg/the_moon.jpg","modified":0,"renderable":0},{"_id":"source/img/icon.png","path":"img/icon.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/公共关系学/20221027183201783077630932029440.md","hash":"4999650a2d19724156d0b7d36850ee445a6d88dc","modified":1666866733903},{"_id":"source/_posts/hello-world.md","hash":"466eae895f59911269bf4b76cbb9f57104994294","modified":1666780515166},{"_id":"source/_posts/公共关系学/20221027183201783077630944612352.md","hash":"0676927a361158981b30cd5aa1a3aa93355d8be7","modified":1666866733904},{"_id":"source/_posts/公共关系学/20221027183201783077630948806656.md","hash":"4b92f8f6908d229b6a3dd69d9b13a5bfe2c0a9fe","modified":1666866733905},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252224.md","hash":"40af35da5e0515777bfc7c6e990903dd5eefa497","modified":1666866733880},{"_id":"source/_posts/人力资源管理/20221027183201783077630898475008.md","hash":"1e69c5bb46056a60360fac1280812e0cc50dd569","modified":1666866733875},{"_id":"source/_posts/人力资源管理/20221027183201783077630915252225.md","hash":"cecfdcf424165f74105c548b866ee32d8c3733e9","modified":1666866733881},{"_id":"source/_posts/基础会计学/20221027183201783077630919446530.md","hash":"874b43527792c6682b7aafa2bee52db7d9197c2c","modified":1666866733887},{"_id":"source/_posts/基础会计学/20221027183201783077630919446531.md","hash":"7f9698b5e433f1c876d5cba973ee8b44929188d3","modified":1666866733888},{"_id":"source/_posts/基础会计学/20221027183201783077630919446532.md","hash":"d2f397d251d3bd5dfeeb232e98568da201872808","modified":1666866733890},{"_id":"source/_posts/生产与运作管理/20221027183201783077630915252226.md","hash":"ddb7e48b0f65279d9f46fc50015023cf3f7aa1c3","modified":1666866733882},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446528.md","hash":"71977e01a37f6337f2b7c4dfe2393e776dedd607","modified":1666866733883},{"_id":"source/_posts/生产与运作管理/20221027183201783077630919446529.md","hash":"f04baa196ea84957549825d37fc3ca6ee44f516f","modified":1666866733885},{"_id":"source/_posts/电子商务/20221027183201783077630923640832.md","hash":"39fa8741dbf944b16411979cd6cf79fdd9263f22","modified":1666866733891},{"_id":"source/_posts/电子商务/20221027183201783077630923640833.md","hash":"a30749bb9a96d360c51b3a60b3beb8b04aa0cec8","modified":1666866733893},{"_id":"source/_posts/电子商务/20221027183201783077630923640834.md","hash":"6ef4d354dc3571574dee6ad9a397fcd23f95e940","modified":1666866733895},{"_id":"source/_posts/电子商务/20221027183201783077630927835136.md","hash":"0d57904d8be5db69fe687b46cc152235a86e672c","modified":1666866733900},{"_id":"source/_posts/电子商务/20221027183201783077630927835137.md","hash":"012c800e38a1f0eac9e431e01231f8af0ac1ec73","modified":1666866733902},{"_id":"source/_posts/电子商务/20221027183201783077630923640835.md","hash":"45f85df297e3fa309461a95a8af0e6e96a5c7a04","modified":1666866733897},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663049159000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1663049159000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1663049159000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663049159000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1663049159000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663049159000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1663049159000},{"_id":"themes/fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663049159000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1663049159000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663049159000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663049159000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663049159000},{"_id":"themes/fluid/_config.yml","hash":"39baa882da9b0af5178c7767306be14bcf992a55","modified":1663049159000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663049159000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663049159000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663049159000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1666780926893},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663049159000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663049159000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663049159000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663049159000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1663049159000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1663049159000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663049159000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1663049159000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663049159000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663049159000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663049159000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1663049159000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1663049159000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1663049159000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663049159000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663049159000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663049159000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663049159000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663049159000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663049159000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663049159000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663049159000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663049159000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663049159000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663049159000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663049159000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663049159000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663049159000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663049159000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663049159000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663049159000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663049159000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663049159000},{"_id":"source/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1666828158000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663049159000},{"_id":"source/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1666773579596},{"_id":"source/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1666857270158},{"_id":"public/local-search.xml","hash":"13da193fa94677267774d86ca186fca01e578a55","modified":1669197431443},{"_id":"public/archives/index.html","hash":"d854384ae749dda52d31ab9804807778bfaefd54","modified":1669197431443},{"_id":"public/archives/page/2/index.html","hash":"a59f47cf05762061bffbb96d5e8b8e41e9a132e8","modified":1666883713352},{"_id":"public/archives/2022/index.html","hash":"40ec7f65bd8ab9dc5de7fd9d7b71a2532e5fb08e","modified":1669197431443},{"_id":"public/archives/2022/page/2/index.html","hash":"2ef1a744abb089e51241b837bbe3fd29c2aed22d","modified":1666883713352},{"_id":"public/archives/2022/10/index.html","hash":"e9a01a0c26f5fba13b8dd0cb9c996382775bbd64","modified":1666883713352},{"_id":"public/archives/2022/10/page/2/index.html","hash":"3c48b4b927fe6114b9e888a7e001b2876d93e71c","modified":1666883713352},{"_id":"public/categories/公共关系学/index.html","hash":"fa944995a28ccbb26340c1959c5175d6beb975d0","modified":1666883713352},{"_id":"public/categories/人力资源管理/index.html","hash":"837d033345ce6060c5560438ddcd63a00800215c","modified":1666883713352},{"_id":"public/categories/基础会计学/index.html","hash":"db67c1e0a75cc7c9c23f8487b50fdb8f25f99c28","modified":1666883713352},{"_id":"public/categories/生产与运作管理/index.html","hash":"cb7ad07d74dbdda927b4a29698b33cd66ae43947","modified":1666883713352},{"_id":"public/categories/电子商务/index.html","hash":"7ae71c0bc4de23530459cc7581ec890dbb1c95ae","modified":1666883713352},{"_id":"public/tags/默认/index.html","hash":"b58bbf01a69a9e25ed8edf69ac0e644eca0958e8","modified":1669114060060},{"_id":"public/tags/默认/page/2/index.html","hash":"62c192f539ecfc0a79b7897f3024d4d6655a9764","modified":1666883713352},{"_id":"public/404.html","hash":"3bbbe569f2ebed12e556ef756a98c1d08bea7dc1","modified":1669114060060},{"_id":"public/tags/index.html","hash":"06c8f67b564ec9aee369d01ff1992dcfd1a61912","modified":1669197431443},{"_id":"public/2022/10/27/20221027183201783077630932029440/index.html","hash":"e4fcf377709d96909aea004452598067886e6fa1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630944612352/index.html","hash":"eeb4623f3a8548ff69577037d388a1dbb5ba3bff","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630948806656/index.html","hash":"d271e7edfbec194fe400865e6b047e5401482128","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630898475008/index.html","hash":"adba5a524b587579133f9af3edb5878f41acb15f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252224/index.html","hash":"71331217f513fe3a35542c13f4230db22756415d","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252225/index.html","hash":"1adf686cb814d36bad0ac5a8c01f642fe2c57e4a","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446530/index.html","hash":"37160cc8999f3f1a8b2e8d4496adb8b1f7ee22a1","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446531/index.html","hash":"f092a9b828386991bf1a1c6e21027943bf83b09f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446532/index.html","hash":"33162fa41055ec21894e6236c64d030063b95c0c","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630915252226/index.html","hash":"7ed8ab5fced6e44038f687106dd65378d4c53751","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446528/index.html","hash":"3eab15006c48f5199c6d914d09447e9181b96b27","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630919446529/index.html","hash":"304cac6a5311d471559240ba900bf6d657e85e4f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640832/index.html","hash":"ba67c52ce2413c628a9b4a23ffe3e7c410ff1caa","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640833/index.html","hash":"ce89a338e1c4c55e50aa98097e5fe02e4590f7ef","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640834/index.html","hash":"23f5d9652368ee3e77a9473f57eebc9eb7b94c2f","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630923640835/index.html","hash":"7ad658895e4518b9215d39e21e7f03372548809b","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835136/index.html","hash":"a93afbed5e4c6ad24cdcd9fa4d1e94dec05a6a21","modified":1666883713352},{"_id":"public/2022/10/27/20221027183201783077630927835137/index.html","hash":"5ca081cedf0d41828523d54947a9cfa2d42dd134","modified":1666883713352},{"_id":"public/2022/10/10/123/index.html","hash":"8dcd8b21f750f2299f43ed3c1271ff402f39d1b4","modified":1666883713352},{"_id":"public/index.html","hash":"37c8fed47d68f94ec97c42daf73cb85b3e54a71e","modified":1669197431443},{"_id":"public/page/2/index.html","hash":"6603b607b1f4ce2362fb10345ec32148ed9ed3d7","modified":1666883713352},{"_id":"public/categories/index.html","hash":"1dcf3a2d7ade8101a4812aedc9d3226b3ee81665","modified":1669197431443},{"_id":"public/links/index.html","hash":"8c587e53c2ec8d8de81ea2476aa43108d78cad7d","modified":1669114060060},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1669001603819},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1669001603819},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1669001603819},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1669001603819},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1669001603819},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1669001603819},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1669001603819},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1669001603819},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1669001603819},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1669001603819},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1669001603819},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1669001603819},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1669001603819},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1669001603819},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1669001603819},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1669001603819},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1669001603819},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669001603819},{"_id":"public/img/bg/bg1.jpg","hash":"9b6948067aa3476077f9fc9926abd58b77d997f5","modified":1669001603819},{"_id":"public/img/bg/the_moon.jpg","hash":"174319de29aa8d13bfee6654c9a04f6e1a398954","modified":1669001603819},{"_id":"public/img/bg/bg.png","hash":"884644613f15cbac13d4b7eb4876269bf58800d9","modified":1669001603819},{"_id":"source/_posts/Untitled Folder/Github刷提交记录.md","hash":"615b2f0c2f2c906a6aed5588310ab9b3933d7375","modified":1668674385578},{"_id":"source/_posts/环境安装/ElasticSearch入门.md","hash":"35d0a32a9f57c969e65c4d36ae0804e482090fe4","modified":1668674385578},{"_id":"source/_posts/Untitled Folder/构建自己的jar包上传至Mvaen中央仓库和版本更新.md","hash":"6f7d633936b93ec7d5a1ba46885be617d06c0e53","modified":1614957892000},{"_id":"source/_posts/环境安装/Jenkins打Docker镜像推送到私有仓库.md","hash":"71665cafcc9f63af36f43b9399f1c0e7583fb10c","modified":1600869317000},{"_id":"source/_posts/环境安装/Jenkins集成SonarQube.md","hash":"6fa39767faa30693fcf4a7666f872458ee0dded3","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】CerebroKibana7ES.md","hash":"1b84e63609712d17ced5dfb3c07e973d9d0fde9f","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Docker安装.md","hash":"1581e6bf565af11e4550c81a2630645c56f19b5d","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】ElasticSearch安装.md","hash":"6254f3d782e983a9cd81857db99c6741704e74a4","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】Logstash安装.md","hash":"dd39ba2f936ecbb90ec53c28c415d77cf302aa6c","modified":1668674385578},{"_id":"source/_posts/环境安装/【环境安装】Kibana安装.md","hash":"fcbd4185d3c2c182b9ffbc5489b5102257d54bf9","modified":1668674385579},{"_id":"source/_posts/环境安装/【环境安装】阿里Arthas安装.md","hash":"44d5e1730d7dff9c054cda4ac561e414e4fdea0a","modified":1668674385578},{"_id":"source/_posts/环境安装/未完成.md","hash":"7760c5f4073cdfa34845b5bace190e316ba9c4ba","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/idea插件.md","hash":"4e41f12822cc5ecdce566782f4a179d2ef380afb","modified":1668674385578},{"_id":"source/_posts/开源分享/软件工具/软件工具.md","hash":"cc726c9042308217b9c60617c15612d4158a59bc","modified":1668674385578},{"_id":"source/_posts/JAVA/CAS.md","hash":"f1e525864b7398990f1be4beecb93ec3365785fc","modified":1668674385578},{"_id":"source/_posts/JAVA/Synchronized锁升级过程.md","hash":"119b0cd16e70ecba48f728509e1104d7b092e43d","modified":1668674385578},{"_id":"source/_posts/JAVA/指令乱序，指令重排序.md","hash":"df8e66724bd20aa4fc1d2fc497bf2c5bd5c1ec5a","modified":1668674385579},{"_id":"source/_posts/JAVA/对象内存布局.md","hash":"9e4b268b10fc7829f9197947db4bb89b7a394041","modified":1668674385578},{"_id":"source/_posts/DDD/领域驱动设计-DDD.md","hash":"ea4d132bdb967f61ad1db7dd1dd93a52ad494100","modified":1668674592999},{"_id":"source/_posts/JVM/1-JVM基础.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674386564},{"_id":"source/_posts/JVM/2-JVM内存模型.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674387069},{"_id":"source/_posts/JVM/3-JVM垃圾回收算法和垃圾收集器.md","hash":"37c18f124e613316f092125e135d46f97e43655b","modified":1591707730000},{"_id":"source/_posts/JVM/4-JVM 参数.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674386564},{"_id":"source/_posts/JVM/5-JVM常用的命令.md","hash":"ce1a18f59c9e4bf4f99a896ad6c668801a0d42d3","modified":1668674386564},{"_id":"source/_posts/JVM/6-JVM常用工具和优化.md","hash":"25acba82017e545358cb1271c12af75f14781859","modified":1589476739000},{"_id":"source/_posts/Mysql/1、Mysql执行流程与架构.md","hash":"92dffbf7832c2c68f2bf4f179d006adb2ae38686","modified":1668674387069},{"_id":"source/_posts/Mysql/2、Mysql索引原理与使用规则.md","hash":"92dffbf7832c2c68f2bf4f179d006adb2ae38686","modified":1668674387069},{"_id":"source/_posts/Mysql/3、Mysql事务与锁详解.md","hash":"92dffbf7832c2c68f2bf4f179d006adb2ae38686","modified":1668674387069},{"_id":"source/_posts/PMP/PMP概念.md","hash":"5404941651fcb57363169f55e9094de32be547f2","modified":1668674387069},{"_id":"source/_posts/PMP/知识领域.md","hash":"5404941651fcb57363169f55e9094de32be547f2","modified":1668674387069},{"_id":"source/_posts/React/React基础.md","hash":"49fc09ce472f8e474e96ab2c8703d0743ee20dc0","modified":1668674387069},{"_id":"source/_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","hash":"e4f4cd2b595536e755e661a90d1a97dd585452c6","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","hash":"4b097c1c339a8a4f71c6f6b511e609e5ad6ce90d","modified":1669190880308},{"_id":"source/_posts/SpringCloud/【SpringCloud】Eueka注册中心.md","hash":"29b7bda7a31d48754b53ed22f58f96106e8f73a5","modified":1668674386921},{"_id":"source/_posts/SpringCloud/【SpringCloud】Gateway 配置全局过滤器获取请求参数和响应值.md","hash":"befdfdf196eaf0418e6a06f5832c20731637f6b0","modified":1668674386098},{"_id":"source/_posts/IDEA 常用插件.md","hash":"1adbcafb49cd51e5412108030082a0001401afec","modified":1668674385579},{"_id":"source/_posts/JAVA 转换 树结构数据.md","hash":"691e65abe92fb2393c8aa1ef7f797400d1bb3eba","modified":1668674385579},{"_id":"source/_posts/MySQL数据和索引占用空间查询.md","hash":"a30f3293042051d442aa3749ac11a436d96f9567","modified":1668674386099},{"_id":"source/_posts/JSON字符串带BOM头.md","hash":"5a9b28230f0557cea5cced1cb8d4595e2f841ae4","modified":1668674386099},{"_id":"source/_posts/JAVA自定义注解.md","hash":"190f228a4e13ebc33b72204bc5bddd892e170df2","modified":1668674386099},{"_id":"source/_posts/MySQL 学习笔记.md","hash":"47ee5ee2f590858af3879364f0ca32166915f7e5","modified":1668674386099},{"_id":"source/_posts/MySQL数据库设计规范.md","hash":"330b58853cae73bcd9a62614f3cd12df7343baaf","modified":1668674386099},{"_id":"source/_posts/MAC替换Homebrew源.md","hash":"2abd747d20abd096e06fafe4b0227d9cc83de0f9","modified":1668674386099},{"_id":"source/_posts/Mycat配置.md","hash":"81c9e2958870630cdc3603b8bd823dd02a805fef","modified":1668674386099},{"_id":"source/_posts/NAS搭建黑群晖5.2稳定版本.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/Mysql ONLY_FULL_GROUP_BY.md","hash":"29d128543a36bbbd9e47d0be63b0437cbcadfbf6","modified":1668674386099},{"_id":"source/_posts/Mysql 查询天、周，月，季度、年的数据.md","hash":"4b6a174f37708cd5e80b42094126f85b0f762d30","modified":1668674386099},{"_id":"source/_posts/SSR搭建科学上网服务VPN.md","hash":"f5fd820096d73f371fe6425801f16e23856f892e","modified":1668674386099},{"_id":"source/_posts/SpringBoot Druid 配置详解.md","hash":"a6f87cc0c73d7fea23c463037d92952928f51ccb","modified":1668674386099},{"_id":"source/_posts/SpringBoot AOP处理请求日志处理打印.md","hash":"1cd1a114a3b1da1203413dd676bb81dfa05b3685","modified":1668674386099},{"_id":"source/_posts/SpringBoot Redis 配置详解.md","hash":"85f0ddfa33e1317a68896a0391911963717f7590","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 整合 Swagger2.md","hash":"70ae30f9d7029a530de4e4d226dc5e6ac69ff7e5","modified":1668674386099},{"_id":"source/_posts/SpringBoot2 线程池的定义和使用.md","hash":"67f77c607f8be47fa83f947508712c5c7191cad0","modified":1668674386099},{"_id":"source/_posts/SpringBoot 全局异常处理.md","hash":"cd14bcdb40bb964fa4f6664a5495a6c9d84f4324","modified":1668674386099},{"_id":"source/_posts/SpringBoot Shiro 配置自定义密码加密器.md","hash":"26c8a3e3bc1037e89cf8d1496cf4e30f0f65cdd7","modified":1668674386099},{"_id":"source/_posts/redis命令和RedisTemplate操作对应表.md","hash":"1d9bcce312a879eb1337dd7f880f52223e9c1bf8","modified":1668674386099},{"_id":"public/categories/DDD/index.html","hash":"390e8b764225aa4a32b3702a773b24c489d5a415","modified":1669114060060},{"_id":"public/archives/2021/index.html","hash":"e9246c1b4b43d847656e648beb29078291b5d753","modified":1669114060060},{"_id":"public/archives/2021/09/index.html","hash":"5f133a2319cadf1423730df3e87063000aa8d772","modified":1669114060060},{"_id":"public/2021/09/01/DDD/领域驱动设计-DDD/index.html","hash":"0ce2e39e078950f93240679ded1a1ff9d3183749","modified":1669114060060},{"_id":"source/img/bg/icon.png","hash":"f29760ef646e0f9648a2b8bce601f0e4cb599a56","modified":1669112972476},{"_id":"public/img/bg/icon.png","hash":"f29760ef646e0f9648a2b8bce601f0e4cb599a56","modified":1669113050201},{"_id":"source/img/icon.png","hash":"552f90d7db4846ad4da6d97bf85a004185a0ff4b","modified":1669115067299},{"_id":"public/img/icon.png","hash":"f29760ef646e0f9648a2b8bce601f0e4cb599a56","modified":1669113238361},{"_id":"source/_posts/SpringBoot/【SpringBoot2】整合 Swagger2.md","hash":"7a44b9880de44e5da5357726d2f45fd0c9d839f3","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot2】线程池的定义和使用.md","hash":"9199670fad5693c03d48d4c03f5f409345680b0d","modified":1669193615681},{"_id":"source/_posts/SpringBoot/【SpringBoot】AOP处理请求日志处理打印.md","hash":"b157ce4c7f091c8dee1e44076c57a7096f85504e","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Druid 配置详解.md","hash":"b5b8b1560bac4ad0eb34072b4abdb635a8d2c779","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Redis 配置详解.md","hash":"812f97602fbd74b345e79f9f80957ab877cae742","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器.md","hash":"5bf83989c9fbe9c2d3dbd9097bddaa2bf5ee23f6","modified":1669190880308},{"_id":"source/_posts/SpringBoot/【SpringBoot】全局异常处理.md","hash":"3ca38fb10fff347cc40d9e97ad7f450d8d15334b","modified":1669190880308},{"_id":"public/archives/2020/index.html","hash":"957d1ebe8541510eed573c4745db3dd21ec961a8","modified":1669197431443},{"_id":"public/archives/2020/03/index.html","hash":"093c74d64bceb19f5e6e5b323295af196960a09d","modified":1669197431443},{"_id":"public/archives/2022/11/index.html","hash":"ca2666aa379ba7b0a3ab9ad4f5e91b70736fb348","modified":1669197431443},{"_id":"public/categories/SpringBoot/index.html","hash":"d1f342140c48ad096be5a28200205b531a900eda","modified":1669197431443},{"_id":"public/tags/SpringBoot/index.html","hash":"8bde71d0cdbdf2500f83299d2a1b8ced542ab571","modified":1669197431443},{"_id":"public/tags/Swagger2/index.html","hash":"5d0984e52e3f89d249738adba2a04d4568fced12","modified":1669197431443},{"_id":"public/tags/序列化/index.html","hash":"b6190861a936ac6e765ac0fc51aa6e29e1c3f75a","modified":1669197431443},{"_id":"public/tags/时间格式/index.html","hash":"9c355d64cf36f931cc1dd641d6efe01f27b79778","modified":1669197431443},{"_id":"public/tags/AOP/index.html","hash":"b89551af7bc28558643e860b178b08f306ac10a5","modified":1669197431443},{"_id":"public/tags/切面/index.html","hash":"54e0509c271e6823527d0635ab7fb379ba9ce7a8","modified":1669197431443},{"_id":"public/tags/日志处理/index.html","hash":"2d4262321862f7653cee466528a264a2f85605c0","modified":1669197431443},{"_id":"public/tags/Druid/index.html","hash":"2e39b129023e139972b33db870bcf7b932ae027b","modified":1669197431443},{"_id":"public/tags/Mysql连接池/index.html","hash":"f90a23775d78e8bf7b5f493f5ae83896034c68f1","modified":1669197431443},{"_id":"public/tags/Redis/index.html","hash":"0b53a87e514b45d4287ec2f5cca44e7d87f7a66a","modified":1669197431443},{"_id":"public/tags/Shiro/index.html","hash":"ebc8235273ec27593eb390f3f5f367c537a10a70","modified":1669197431443},{"_id":"public/tags/自动配置/index.html","hash":"8ede22d5b53a1ac0c3eba45dde739b0f0700f34f","modified":1669197431443},{"_id":"public/tags/全局异常/index.html","hash":"bdf3eb713c57d0929facc3af9ef20336fda9fff9","modified":1669197431443},{"_id":"public/tags/线程池/index.html","hash":"35bf3e1d8bb739307b317d8101c6492b2e9d441e","modified":1669197431443},{"_id":"public/20221123/a71082abf1bd.html","hash":"9b2e527ca16da6d4a972459934b2bcb695f0784b","modified":1669197431443},{"_id":"public/20221123/ede4d722a64c.html","hash":"0281c53a22f9c372aa9e31fe456183254a5aa06f","modified":1669197431443},{"_id":"public/20221123/40dba990c09b.html","hash":"7fa4db4d9adbf2f837542441fafe48b0923797a0","modified":1669197431443},{"_id":"public/20221123/af4853386d96.html","hash":"f05ca36f1ac69e14dca4ac7b82a98067b75e876c","modified":1669197431443},{"_id":"public/20221123/e91f888d1c7e.html","hash":"29fe35a01226c2f9a96aa5357cdcf0afcde07805","modified":1669197431443},{"_id":"public/20221123/f2126e09480c.html","hash":"45939dc3162dfac039db9b106c15441adf03b12b","modified":1669197431443},{"_id":"public/20200322/e17c6e837cd0.html","hash":"b47d3a104484f34949461fab7fa0064df8005175","modified":1669197431443},{"_id":"public/20200318/04561bfb9fbe.html","hash":"5408e9f5dd129558f8311ce06d50b3cb91e5f843","modified":1669197431443},{"_id":"public/20200313/00267f611c07.html","hash":"7edcf577c724fec357e1c02b768e66452479dd94","modified":1669197431443}],"Category":[{"name":"公共关系学","_id":"cl9qxfdag0003bz2b3usu7bn6"},{"name":"人力资源管理","_id":"cl9qxfdar000lbz2b65jr6ibc"},{"name":"基础会计学","_id":"cl9qxfday0013bz2b8x6ah7kp"},{"name":"生产与运作管理","_id":"cl9qxfdb1001ibz2bbirqdwpc"},{"name":"电子商务","_id":"cl9qxfdb3001qbz2beosz70ge"},{"name":"环境安装","_id":"claktn8on001g19iaczrn7pwc"},{"name":"Untitled Folder","_id":"claktn8or001l19ia98kx1vom"},{"name":"开源分享","_id":"claktn8os001p19iaapni6an3"},{"name":"JAVA","_id":"claktn8ov001t19ia2fh650b6"},{"name":"DDD","_id":"claktn8p0002219ia9vejebtx"},{"name":"SpringCloud","_id":"claktn8p6002819iagynuahf6"},{"name":"JVM","_id":"claktn92i002a19ia8xah0dmq"},{"name":"SpringBoot","_id":"claktn9bh002f19ia0pub5jqs"},{"name":"React","_id":"claktn9nj002i19iah8za5g87"},{"name":"PMP","_id":"claktn9nk002k19ia8cd0fpx2"},{"name":"Mysql","_id":"claktn9nl002m19ia5h4raevy"}],"Data":[],"Page":[],"Post":[{"title":"SpringBoot2 整合 Swagger2","_content":"\n# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html\n","source":"_posts/SpringBoot/【SpringBoot2】整合 Swagger2.md","raw":"---\ntitle: SpringBoot2 整合 Swagger2\ntags:\n  - SpringBoot\n  - Swagger2\ncategories:\n  - SpringBoot\n---\n\n# SpringBoot2 整合 Swagger2\n\n**SpringBoot整合三板斧**\n\n### 第一步、引入pom\n\n```pom\n<dependency>\n  <groupId>com.spring4all</groupId>\n  <artifactId>swagger-spring-boot-starter</artifactId>\n  <version>1.9.0.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>com.github.xiaoymin</groupId>\n  <artifactId>swagger-bootstrap-ui</artifactId>\n  <version>1.9.6</version>\n</dependency>\n\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-annotations</artifactId>\n  <version>1.5.22</version>\n</dependency>\n<dependency>\n  <groupId>io.swagger</groupId>\n  <artifactId>swagger-models</artifactId>\n  <version>1.5.22</version>\n</dependency>\n```\n\n**`swagger-spring-boot-starter`该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。**\n\n**`swagger-bootstrap-ui`是`springfox-swagger`的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验**\n\n**`swagger-annotations`,`swagger-models`是因为`springfox-swagger2`包里有`swagger-models-1.5.20.jar`报错。所以替换成1.5.22版本**\n\n```java\njava.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Long.parseLong(Long.java:601)\n\tat java.lang.Long.valueOf(Long.java:803)\n\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:412)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat......\n```\n\n**看下1.5.20版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example == null) {\n        return null;\n    } else {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n        \n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    }\n}\n```\n\n**这里只判断了this.example == null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：**\n\n```java\npublic Object getExample() {\n    if (this.example != null && !this.example.isEmpty()) {\n        try {\n            if (\"integer\".equals(this.type)) {\n                return Long.valueOf(this.example);\n            }\n\n            if (\"number\".equals(this.type)) {\n                return Double.valueOf(this.example);\n            }\n\n            if (\"boolean\".equals(this.type) && (\"true\".equalsIgnoreCase(this.example) || \"false\".equalsIgnoreCase(this.defaultValue))) {\n                return Boolean.valueOf(this.example);\n            }\n        } catch (NumberFormatException var2) {\n            LOGGER.warn(String.format(\"Illegal DefaultValue %s for parameter type %s\", this.defaultValue, this.type), var2);\n        }\n\n        return this.example;\n    } else {\n        return this.example;\n    } \n}\n```\n\n**对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可**\n\n### 第二部、配置\n\n**`swagger-spring-boot-starter`相关配置信息可参考如下地址:**\n\n- 源码地址\n  - GitHub：https://github.com/dyc87112/spring-boot-starter-swagger\n  - 码云：https://gitee.com/didispace/spring-boot-starter-swagger\n- 使用样例：https://github.com/dyc87112/swagger-starter-demo\n- 博客：[http://blog.didispace.com](http://blog.didispace.com/)\n- 社区：[http://www.spring4all.com](http://www.spring4all.com/)\n\n**`swagger-bootstrap-ui`相关配置信息可参考如下地址:**\n\n官方地址：https://doc.xiaominfo.com/guide/\n\n> `swagger-bootstrap-ui`目前已改名了`knife4j-spring-boot-starter`\n>\n> 项目正式更名为**knife4j**,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.\n>\n> swagger-bootstrap-ui的所有特性都会集中在`knife4j-spring-ui`包中,并且后续也会满足开发者更多的个性化需求.\n\n```yaml\nswagger:\n  version: 1.0v # 版本号\n  authorization: # 全局参数\n    name: Authorization # 鉴权策略ID，对应 SecurityReferences ID\n    type: ApiKey # 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey\n    key-name: X-Token # 鉴权传递的Header参数\n  #    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL\n  ui-config: # 排序规则\n    operations-sorter: method # 按方法定义顺序排序\n    tags-sorter: alpha # 按字母表排序\n  docket: # 分组配置\n    common:\n      base-package: com.xxxx.a\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://cn.bing.com/\n    hq:\n      base-package: com.xxxx.b\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn:4443/wordpress/\n    shop:\n      base-package: com.xxxx.c\n      description: API接口文档\n      title: xxx接口\n      contact:\n        name: xxx\n        url: https://zc.happyloves.cn\n```\n\n### 第三步、注解\n\n```java\n@EnableSwagger2Doc // 启用Swagger2\n@EnableSwaggerBootstrapUI //启用swagger-bootstrap-ui\n@SpringBootApplication\npublic class WebApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WebApplication.class, args);\n    }\n}\n```\n\n**编写代码**\n\n```java\n@Api(value = \"DemoOne-DemoOne服务~~~~~~~~\", tags = {\"1-DemoOne-DemoOne服务\"})\n@Slf4j\n@Validated\n@RestController\n@RequestMapping(\"/common/DemoOne\")\npublic class DemoOneController {\n    private final DemoOneService service;\n\n    @Autowired\n    public DemoOneController(DemoOneService service) {\n        this.service = service;\n    }\n\n    //=====================================================================================DELETE=====================================================================================\n    @ApiOperation(value = \"根据主键ID删除\", notes = \"根据主键ID删除~~~~~~~~~~~~~\")\n    @DeleteMapping(\"/{id}\")\n    public ApiMessage deleteById(@PathVariable @Min(1) int id) throws Exception {\n        return service.deleteById(id);\n    }\n\n    //=====================================================================================GET========================================================================================\n\n    @ApiOperation(value = \"获取所有数据\", notes = \"获取所有数据~~~~~~~~~~~~~\")\n    @GetMapping(\"/\")\n    public ApiMessage<List<DemoOneResponse>> getAllList() {\n        return service.getAllList();\n    }\n\n    @ApiOperation(value = \"根据主键ID获取数据\", notes = \"根据主键ID获取数据~~~~~~~~~~~~~\")\n    @ApiImplicitParams(value = {\n            @ApiImplicitParam(name = \"id\", required = true, value = \"主键ID\", paramType = \"path\", dataType = \"string\"),\n    })\n    @GetMapping(\"/{id}/{name}\")\n    public ApiMessage<DemoOneResponse> getById(@PathVariable @Min(1) int id, @PathVariable @AssertFalse boolean name) {\n        return service.getById(id);\n    }\n\n    //=====================================================================================POST=======================================================================================\n    @ApiOperation(value = \"新增DemoOne数据\", notes = \"新增DemoOne数据~~~~~~~~~~~~~\")\n    @PostMapping(\"/\")\n    public ApiMessage<DemoOneResponse> save(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.addDemoOne(parameter);\n    }\n\n    //=====================================================================================PUT========================================================================================\n    @ApiOperation(value = \"更新DemoOne数据\", notes = \"更新DemoOne数据~~~~~~~~~~~~~\")\n    @PutMapping(\"/\")\n    public ApiMessage<DemoOneResponse> update(@RequestBody @Valid DemoOneRequest parameter) {\n        return service.update(parameter);\n    }\n```\n\n\n\n#### 大功告成！！！启动访问如下地址：\n\n**Swagger2地址：**\n\nhttp://${ip地址}:${端口}/swagger-ui.html\n\n**swagger-bootstrap-ui地址：**\n\nhttp://${ip地址}:${端口}/doc.html\n","slug":"SpringBoot/【SpringBoot2】整合 Swagger2","published":1,"date":"2022-11-23T07:56:45.740Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i160000ryiaeqtp3qds","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-整合-Swagger2\"><a href=\"#SpringBoot2-整合-Swagger2\" class=\"headerlink\" title=\"SpringBoot2 整合 Swagger2\"></a>SpringBoot2 整合 Swagger2</h1><p><strong>SpringBoot整合三板斧</strong></p>\n<h3 id=\"第一步、引入pom\"><a href=\"#第一步、引入pom\" class=\"headerlink\" title=\"第一步、引入pom\"></a>第一步、引入pom</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pom\">&lt;dependency&gt;<br>  &lt;groupId&gt;com.spring4all&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-spring-boot-starter&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.0.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;<br>  &lt;version&gt;1.9.6&lt;/version&gt;<br>&lt;/dependency&gt;<br><br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;io.swagger&lt;/groupId&gt;<br>  &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;<br>  &lt;version&gt;1.5.22&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong><code>swagger-spring-boot-starter</code>该项目主要利用Spring Boot的自动化配置特性来实现快速的将swagger2引入spring boot应用来生成API文档，简化原生使用swagger2的整合代码。</strong></p>\n<p><strong><code>swagger-bootstrap-ui</code>是<code>springfox-swagger</code>的增强UI实现，为Java开发者在使用Swagger的时候，能拥有一份简洁、强大的接口文档体验</strong></p>\n<p><strong><code>swagger-annotations</code>,<code>swagger-models</code>是因为<code>springfox-swagger2</code>包里有<code>swagger-models-1.5.20.jar</code>报错。所以替换成1.5.22版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">601</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat io.swagger.models.parameters.AbstractSerializableParameter.getExample(AbstractSerializableParameter.java:<span class=\"hljs-number\">412</span>)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"hljs-number\">62</span>)<br>\tat......<br></code></pre></td></tr></table></figure>\n\n<p><strong>看下1.5.20版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        <br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>这里只判断了this.example &#x3D;&#x3D; null才返回null，其余会去进行转换，而空字符串也会进行转换，导致格式抛出格式化转换异常.再来看下1.5.22版本里AbstractSerializableParameter.java源码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getExample</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.example != <span class=\"hljs-literal\">null</span> &amp;&amp; !<span class=\"hljs-built_in\">this</span>.example.isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;integer&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Long.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;number&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type)) &#123;<br>                <span class=\"hljs-keyword\">return</span> Double.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;boolean&quot;</span>.equals(<span class=\"hljs-built_in\">this</span>.type) &amp;&amp; (<span class=\"hljs-string\">&quot;true&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.example) || <span class=\"hljs-string\">&quot;false&quot;</span>.equalsIgnoreCase(<span class=\"hljs-built_in\">this</span>.defaultValue))) &#123;<br>                <span class=\"hljs-keyword\">return</span> Boolean.valueOf(<span class=\"hljs-built_in\">this</span>.example);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException var2) &#123;<br>            LOGGER.warn(String.format(<span class=\"hljs-string\">&quot;Illegal DefaultValue %s for parameter type %s&quot;</span>, <span class=\"hljs-built_in\">this</span>.defaultValue, <span class=\"hljs-built_in\">this</span>.type), var2);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.example;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>对example同时进行了null和空值的判断，官方也发现了自己的这个问题，我们进行相应的替换即可</strong></p>\n<h3 id=\"第二部、配置\"><a href=\"#第二部、配置\" class=\"headerlink\" title=\"第二部、配置\"></a>第二部、配置</h3><p><strong><code>swagger-spring-boot-starter</code>相关配置信息可参考如下地址:</strong></p>\n<ul>\n<li>源码地址<ul>\n<li>GitHub：<a href=\"https://github.com/dyc87112/spring-boot-starter-swagger\">https://github.com/dyc87112/spring-boot-starter-swagger</a></li>\n<li>码云：<a href=\"https://gitee.com/didispace/spring-boot-starter-swagger\">https://gitee.com/didispace/spring-boot-starter-swagger</a></li>\n</ul>\n</li>\n<li>使用样例：<a href=\"https://github.com/dyc87112/swagger-starter-demo\">https://github.com/dyc87112/swagger-starter-demo</a></li>\n<li>博客：<a href=\"http://blog.didispace.com/\">http://blog.didispace.com</a></li>\n<li>社区：<a href=\"http://www.spring4all.com/\">http://www.spring4all.com</a></li>\n</ul>\n<p><strong><code>swagger-bootstrap-ui</code>相关配置信息可参考如下地址:</strong></p>\n<p>官方地址：<a href=\"https://doc.xiaominfo.com/guide/\">https://doc.xiaominfo.com/guide/</a></p>\n<blockquote>\n<p><code>swagger-bootstrap-ui</code>目前已改名了<code>knife4j-spring-boot-starter</code></p>\n<p>项目正式更名为<strong>knife4j</strong>,取名knife4j是希望她能像一把匕首一样小巧,轻量,并且功能强悍,更名也是希望把她做成一个为Swagger接口文档服务的通用性解决方案,不仅仅只是专注于前端Ui前端.</p>\n<p>swagger-bootstrap-ui的所有特性都会集中在<code>knife4j-spring-ui</code>包中,并且后续也会满足开发者更多的个性化需求.</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">swagger:</span><br>  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.</span><span class=\"hljs-string\">0v</span> <span class=\"hljs-comment\"># 版本号</span><br>  <span class=\"hljs-attr\">authorization:</span> <span class=\"hljs-comment\"># 全局参数</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Authorization</span> <span class=\"hljs-comment\"># 鉴权策略ID，对应 SecurityReferences ID</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">ApiKey</span> <span class=\"hljs-comment\"># 鉴权策略，可选 ApiKey | BasicAuth | None，默认ApiKey</span><br>    <span class=\"hljs-attr\">key-name:</span> <span class=\"hljs-string\">X-Token</span> <span class=\"hljs-comment\"># 鉴权传递的Header参数</span><br>  <span class=\"hljs-comment\">#    auth-regex: ^.*$ # 需要开启鉴权URL的正则, 默认^.*$匹配所有URL</span><br>  <span class=\"hljs-attr\">ui-config:</span> <span class=\"hljs-comment\"># 排序规则</span><br>    <span class=\"hljs-attr\">operations-sorter:</span> <span class=\"hljs-string\">method</span> <span class=\"hljs-comment\"># 按方法定义顺序排序</span><br>    <span class=\"hljs-attr\">tags-sorter:</span> <span class=\"hljs-string\">alpha</span> <span class=\"hljs-comment\"># 按字母表排序</span><br>  <span class=\"hljs-attr\">docket:</span> <span class=\"hljs-comment\"># 分组配置</span><br>    <span class=\"hljs-attr\">common:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.a</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://cn.bing.com/</span><br>    <span class=\"hljs-attr\">hq:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.b</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn:4443/wordpress/</span><br>    <span class=\"hljs-attr\">shop:</span><br>      <span class=\"hljs-attr\">base-package:</span> <span class=\"hljs-string\">com.xxxx.c</span><br>      <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">API接口文档</span><br>      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">xxx接口</span><br>      <span class=\"hljs-attr\">contact:</span><br>        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span><br>        <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://zc.happyloves.cn</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第三步、注解\"><a href=\"#第三步、注解\" class=\"headerlink\" title=\"第三步、注解\"></a>第三步、注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableSwagger2Doc</span> <span class=\"hljs-comment\">// 启用Swagger2</span><br><span class=\"hljs-meta\">@EnableSwaggerBootstrapUI</span> <span class=\"hljs-comment\">//启用swagger-bootstrap-ui</span><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebApplication</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(WebApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>编写代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Api(value = &quot;DemoOne-DemoOne服务~~~~~~~~&quot;, tags = &#123;&quot;1-DemoOne-DemoOne服务&quot;&#125;)</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Validated</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/common/DemoOne&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DemoOneController</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> DemoOneService service;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DemoOneController</span><span class=\"hljs-params\">(DemoOneService service)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.service = service;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================DELETE=====================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID删除&quot;, notes = &quot;根据主键ID删除~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage <span class=\"hljs-title function_\">deleteById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> service.deleteById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================GET========================================================================================</span><br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;获取所有数据&quot;, notes = &quot;获取所有数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;List&lt;DemoOneResponse&gt;&gt; <span class=\"hljs-title function_\">getAllList</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getAllList();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;根据主键ID获取数据&quot;, notes = &quot;根据主键ID获取数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@ApiImplicitParams(value = &#123;</span><br><span class=\"hljs-meta\">            @ApiImplicitParam(name = &quot;id&quot;, required = true, value = &quot;主键ID&quot;, paramType = &quot;path&quot;, dataType = &quot;string&quot;),</span><br><span class=\"hljs-meta\">    &#125;)</span><br>    <span class=\"hljs-meta\">@GetMapping(&quot;/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@Min(1)</span> <span class=\"hljs-type\">int</span> id, <span class=\"hljs-meta\">@PathVariable</span> <span class=\"hljs-meta\">@AssertFalse</span> <span class=\"hljs-type\">boolean</span> name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.getById(id);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================POST=======================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;新增DemoOne数据&quot;, notes = &quot;新增DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">save</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.addDemoOne(parameter);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//=====================================================================================PUT========================================================================================</span><br>    <span class=\"hljs-meta\">@ApiOperation(value = &quot;更新DemoOne数据&quot;, notes = &quot;更新DemoOne数据~~~~~~~~~~~~~&quot;)</span><br>    <span class=\"hljs-meta\">@PutMapping(&quot;/&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;DemoOneResponse&gt; <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> <span class=\"hljs-meta\">@Valid</span> DemoOneRequest parameter)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> service.update(parameter);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"大功告成！！！启动访问如下地址：\"><a href=\"#大功告成！！！启动访问如下地址：\" class=\"headerlink\" title=\"大功告成！！！启动访问如下地址：\"></a>大功告成！！！启动访问如下地址：</h4><p><strong>Swagger2地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;swagger-ui.html</p>\n<p><strong>swagger-bootstrap-ui地址：</strong></p>\n<p>http:&#x2F;&#x2F;${ip地址}:${端口}&#x2F;doc.html</p>\n"},{"title":"SpringBoot中时间类型 序列化、反序列化、格式处理","_content":"# SpringBoot中时间类型 序列化、反序列化、格式处理\n\n## Date\n\n**yml全局配置**\n\n```yaml\nspring:  \n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss #配置POST请求Body中Date时间类型序列化格式处理，并返回\n```\n\n**请求参数类型转换**\n\n```java\n/**\n * 时间Date转换\n * 配置GET请求，Query查询Date时间类型参数转换\n */\n@Component\npublic class DateConverter implements Converter<String, Date> {\n  @Override\n  public Date convert(String source) {\n    if (StringUtils.isBlank(source)) {\n      return null;\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd\");\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd HH:mm:ss\");\n    }\n    throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n  }\n\n  public Date parseDate(String dateStr, String format) {\n    Date date = null;\n    try {\n      date = new SimpleDateFormat(format).parse(dateStr);\n    } catch (ParseException e) {\n      log.warn(\"转换{}为日期(pattern={})错误！\", dateStr, format);\n    }\n    return date;\n  }\n}\n```\n\n## JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\n\n```java\n/**\n * 序列化,反序列化,格式处理\n *\n * @author zc\n * @date 2020/7/9 01:42\n */\n@Slf4j\n@Configuration\npublic class JacksonCustomizerConfig {\n\n    @Value(\"${spring.jackson.date-format:yyyy-MM-dd HH:mm:ss}\")\n    private String localDateTimePattern;\n\n    @Value(\"${spring.jackson.local-date-format:yyyy-MM-dd}\")\n    private String localDatePattern;\n\n    @Value(\"${spring.jackson.local-time-format:HH:mm:ss}\")\n    private String localTimePattern;\n\n    @Bean\n    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {\n        return builder -> {\n            builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.serializerByType(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.serializerByType(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(localTimePattern)));\n            builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.deserializerByType(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.deserializerByType(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(localTimePattern)));\n        };\n    }\n  \n  \t/**\n     * 时间LocalDateTime转换\n     */\n    @Component\n    public static class LocalDateTimeConverter implements Converter<String, LocalDateTime> {\n        @Override\n        public LocalDateTime convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n                return LocalDateTime.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n\n    /**\n     * 时间LocalDate转换\n     */\n    @Component\n    public static class LocalDateConverter implements Converter<String, LocalDate> {\n        @Override\n        public LocalDate convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n                return LocalDate.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n  \n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理.md","raw":"---\ntitle: SpringBoot中时间类型 序列化、反序列化、格式处理\ntags:\n  - SpringBoot\n  - 序列化\n  - 时间格式\ncategories:\n  - SpringBoot\n---\n# SpringBoot中时间类型 序列化、反序列化、格式处理\n\n## Date\n\n**yml全局配置**\n\n```yaml\nspring:  \n  jackson:\n    time-zone: GMT+8\n    date-format: yyyy-MM-dd HH:mm:ss #配置POST请求Body中Date时间类型序列化格式处理，并返回\n```\n\n**请求参数类型转换**\n\n```java\n/**\n * 时间Date转换\n * 配置GET请求，Query查询Date时间类型参数转换\n */\n@Component\npublic class DateConverter implements Converter<String, Date> {\n  @Override\n  public Date convert(String source) {\n    if (StringUtils.isBlank(source)) {\n      return null;\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd\");\n    }\n    if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n      return parseDate(source.trim(), \"yyyy-MM-dd HH:mm:ss\");\n    }\n    throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n  }\n\n  public Date parseDate(String dateStr, String format) {\n    Date date = null;\n    try {\n      date = new SimpleDateFormat(format).parse(dateStr);\n    } catch (ParseException e) {\n      log.warn(\"转换{}为日期(pattern={})错误！\", dateStr, format);\n    }\n    return date;\n  }\n}\n```\n\n## JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\n\n```java\n/**\n * 序列化,反序列化,格式处理\n *\n * @author zc\n * @date 2020/7/9 01:42\n */\n@Slf4j\n@Configuration\npublic class JacksonCustomizerConfig {\n\n    @Value(\"${spring.jackson.date-format:yyyy-MM-dd HH:mm:ss}\")\n    private String localDateTimePattern;\n\n    @Value(\"${spring.jackson.local-date-format:yyyy-MM-dd}\")\n    private String localDatePattern;\n\n    @Value(\"${spring.jackson.local-time-format:HH:mm:ss}\")\n    private String localTimePattern;\n\n    @Bean\n    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() {\n        return builder -> {\n            builder.serializerByType(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.serializerByType(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.serializerByType(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(localTimePattern)));\n            builder.deserializerByType(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(localDateTimePattern)));\n            builder.deserializerByType(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(localDatePattern)));\n            builder.deserializerByType(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(localTimePattern)));\n        };\n    }\n  \n  \t/**\n     * 时间LocalDateTime转换\n     */\n    @Component\n    public static class LocalDateTimeConverter implements Converter<String, LocalDateTime> {\n        @Override\n        public LocalDateTime convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2} {1}\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")) {\n                return LocalDateTime.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n\n    /**\n     * 时间LocalDate转换\n     */\n    @Component\n    public static class LocalDateConverter implements Converter<String, LocalDate> {\n        @Override\n        public LocalDate convert(String source) {\n            if (StringUtils.isBlank(source)) {\n                return null;\n            }\n            if (source.matches(\"^\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}$\")) {\n                return LocalDate.parse(source, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n            }\n            throw new IllegalArgumentException(\"Invalid value '\" + source + \"'\");\n        }\n    }\n  \n}\n```\n\n","slug":"SpringBoot/【SpringBoot】 中时间类型 序列化、反序列化、格式处理","published":1,"date":"2022-11-23T07:34:20.580Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1g0001ryiaelkr34w4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot中时间类型-序列化、反序列化、格式处理\"><a href=\"#SpringBoot中时间类型-序列化、反序列化、格式处理\" class=\"headerlink\" title=\"SpringBoot中时间类型 序列化、反序列化、格式处理\"></a>SpringBoot中时间类型 序列化、反序列化、格式处理</h1><h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><p><strong>yml全局配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>  <br>  <span class=\"hljs-attr\">jackson:</span><br>    <span class=\"hljs-attr\">time-zone:</span> <span class=\"hljs-string\">GMT+8</span><br>    <span class=\"hljs-attr\">date-format:</span> <span class=\"hljs-string\">yyyy-MM-dd</span> <span class=\"hljs-string\">HH:mm:ss</span> <span class=\"hljs-comment\">#配置POST请求Body中Date时间类型序列化格式处理，并返回</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请求参数类型转换</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 时间Date转换</span><br><span class=\"hljs-comment\"> * 配置GET请求，Query查询Date时间类型参数转换</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">parseDate</span><span class=\"hljs-params\">(String dateStr, String format)</span> &#123;<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(format).parse(dateStr);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (ParseException e) &#123;<br>      log.warn(<span class=\"hljs-string\">&quot;转换&#123;&#125;为日期(pattern=&#123;&#125;)错误！&quot;</span>, dateStr, format);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"><a href=\"#JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\" class=\"headerlink\" title=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"></a>JDK8-时间类型-LocalDateTime、LocalDate、LocalTime</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 序列化,反序列化,格式处理</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/7/9 01:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JacksonCustomizerConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDateTimePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-date-format:yyyy-MM-dd&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDatePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-time-format:HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localTimePattern;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"hljs-title function_\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> builder -&gt; &#123;<br>            builder.serializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.serializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.serializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>            builder.deserializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.deserializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.deserializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>        &#125;;<br>    &#125;<br>  <br>  \t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDateTime转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateTimeConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDateTime <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDate转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDate&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDate <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot中时间类型-序列化、反序列化、格式处理\"><a href=\"#SpringBoot中时间类型-序列化、反序列化、格式处理\" class=\"headerlink\" title=\"SpringBoot中时间类型 序列化、反序列化、格式处理\"></a>SpringBoot中时间类型 序列化、反序列化、格式处理</h1><h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><p><strong>yml全局配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span>  <br>  <span class=\"hljs-attr\">jackson:</span><br>    <span class=\"hljs-attr\">time-zone:</span> <span class=\"hljs-string\">GMT+8</span><br>    <span class=\"hljs-attr\">date-format:</span> <span class=\"hljs-string\">yyyy-MM-dd</span> <span class=\"hljs-string\">HH:mm:ss</span> <span class=\"hljs-comment\">#配置POST请求Body中Date时间类型序列化格式处理，并返回</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请求参数类型转换</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 时间Date转换</span><br><span class=\"hljs-comment\"> * 配置GET请求，Query查询Date时间类型参数转换</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>      <span class=\"hljs-keyword\">return</span> parseDate(source.trim(), <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">parseDate</span><span class=\"hljs-params\">(String dateStr, String format)</span> &#123;<br>    <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(format).parse(dateStr);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (ParseException e) &#123;<br>      log.warn(<span class=\"hljs-string\">&quot;转换&#123;&#125;为日期(pattern=&#123;&#125;)错误！&quot;</span>, dateStr, format);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"><a href=\"#JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\" class=\"headerlink\" title=\"JDK8-时间类型-LocalDateTime、LocalDate、LocalTime\"></a>JDK8-时间类型-LocalDateTime、LocalDate、LocalTime</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 序列化,反序列化,格式处理</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/7/9 01:42</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JacksonCustomizerConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDateTimePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-date-format:yyyy-MM-dd&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localDatePattern;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;spring.jackson.local-time-format:HH:mm:ss&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String localTimePattern;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Jackson2ObjectMapperBuilderCustomizer <span class=\"hljs-title function_\">jackson2ObjectMapperBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> builder -&gt; &#123;<br>            builder.serializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.serializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.serializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>            builder.deserializerByType(LocalDateTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(localDateTimePattern)));<br>            builder.deserializerByType(LocalDate.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(localDatePattern)));<br>            builder.deserializerByType(LocalTime.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(localTimePattern)));<br>        &#125;;<br>    &#125;<br>  <br>  \t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDateTime转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateTimeConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDateTime&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDateTime <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125; &#123;1&#125;\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;:\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDateTime.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 时间LocalDate转换</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Component</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalDateConverter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Converter</span>&lt;String, LocalDate&gt; &#123;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> LocalDate <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String source)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (StringUtils.isBlank(source)) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (source.matches(<span class=\"hljs-string\">&quot;^\\\\d&#123;4&#125;-\\\\d&#123;1,2&#125;-\\\\d&#123;1,2&#125;$&quot;</span>)) &#123;<br>                <span class=\"hljs-keyword\">return</span> LocalDate.parse(source, DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>));<br>            &#125;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid value &#x27;&quot;</span> + source + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);<br>        &#125;<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot AOP处理请求日志处理打印","_content":"# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】AOP处理请求日志处理打印.md","raw":"---\ntitle: SpringBoot AOP处理请求日志处理打印\ntags:\n  - SpringBoot\n  - AOP\n  - 切面\n  - 日志处理\ncategories:\n  - SpringBoot\n---\n# SpringBoot AOP处理请求日志处理打印\n\n```java\n@Slf4j\n@Aspect\n@Configuration\npublic class RequestAopConfig {\n\n    @Autowired\n    private HttpServletRequest request;\n\n    private static final ThreadLocal<Long> START_TIME_MILLIS = new ThreadLocal<>();\n\n    @Pointcut(\"execution(* com.xxx.xxx.xxx..*(..)) \" +\n            \"&&(@annotation(org.springframework.web.bind.annotation.PostMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.GetMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.PutMapping)\" +\n            \"||@annotation(org.springframework.web.bind.annotation.DeleteMapping))\")\n    public void controllerMethodPointcut() {\n    }\n\n    /**\n     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n     *\n     * @param joinPoint 参数\n     */\n    @Before(\"controllerMethodPointcut()\")\n    public void before(JoinPoint joinPoint) {\n        START_TIME_MILLIS.set(System.currentTimeMillis());\n    }\n\n    /**\n     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterReturning(value = \"controllerMethodPointcut()\", returning = \"result\")\n    public void afterReturning(JoinPoint joinPoint, Object result) {\n        String logTemplate = \"--------------- 执行成功 ---------------\\n请求开始---Send Request URL: {}, Method: {}, Params: {} \\n请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n请求结束---Send Response Result: {}\";\n        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 异常通知:在方法抛出异常退出时执行的通知。\n     *\n     * @param joinPoint 参数\n     */\n    @AfterThrowing(value = \"controllerMethodPointcut()\", throwing = \"ex\")\n    public void afterThrowing(JoinPoint joinPoint, Throwable ex) {\n        String logTemplate = \"--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: {}, Method: {}, Params: {} \\n异常请求方法---ClassName: {}, [Method]: {}, execution time: {}ms \\n异常请求结束---Exception Message: {}\";\n        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());\n        START_TIME_MILLIS.remove();\n    }\n\n    /**\n     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n     *\n     * @param joinPoint\n     */\n    @After(\"controllerMethodPointcut()\")\n    public void after(JoinPoint joinPoint) {\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】AOP处理请求日志处理打印","published":1,"date":"2022-11-23T07:34:50.506Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1j0003ryia8p9n5h2c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-AOP处理请求日志处理打印\"><a href=\"#SpringBoot-AOP处理请求日志处理打印\" class=\"headerlink\" title=\"SpringBoot AOP处理请求日志处理打印\"></a>SpringBoot AOP处理请求日志处理打印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RequestAopConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> HttpServletRequest request;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;Long&gt; START_TIME_MILLIS = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xxx.xxx.xxx..*(..)) &quot; +</span><br><span class=\"hljs-meta\">            &quot;&amp;&amp;(@annotation(org.springframework.web.bind.annotation.PostMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.GetMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.PutMapping)&quot; +</span><br><span class=\"hljs-meta\">            &quot;||@annotation(org.springframework.web.bind.annotation.DeleteMapping))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">controllerMethodPointcut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 前置通知:在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Before(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        START_TIME_MILLIS.set(System.currentTimeMillis());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 后置通知:在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterReturning(value = &quot;controllerMethodPointcut()&quot;, returning = &quot;result&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint, Object result)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行成功 ---------------\\n请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n请求结束---Send Response Result: &#123;&#125;&quot;</span>;<br>        log.info(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), JSON.toJSONString(result));<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 异常通知:在方法抛出异常退出时执行的通知。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint 参数</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@AfterThrowing(value = &quot;controllerMethodPointcut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logTemplate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;--------------- 执行失败 ---------------\\n异常请求开始---Send Request URL: &#123;&#125;, Method: &#123;&#125;, Params: &#123;&#125; \\n异常请求方法---ClassName: &#123;&#125;, [Method]: &#123;&#125;, execution time: &#123;&#125;ms \\n异常请求结束---Exception Message: &#123;&#125;&quot;</span>;<br>        log.error(logTemplate, request.getRequestURL(), request.getMethod(), JSON.toJSONString(joinPoint.getArgs()), joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName(), (System.currentTimeMillis() - START_TIME_MILLIS.get()), ex.getMessage());<br>        START_TIME_MILLIS.remove();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> joinPoint</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@After(&quot;controllerMethodPointcut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot Druid 配置详解","_content":"# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","source":"_posts/SpringBoot/【SpringBoot】Druid 配置详解.md","raw":"---\ntitle: SpringBoot Druid 配置详解\ntags:\n  - SpringBoot\n  - Druid\n  - Mysql连接池\ncategories:\n  - SpringBoot\n---\n# SpringBoot Druid 配置详解\n\n```yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://${url}:${port}/${数据库名}?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false&allowMultiQueries=true&useAffectedRows=true\n    username: ${username}\n    password: ${password}\n  druid:\n      initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n      min-idle: 10 # 最小连接池数量\n      maxActive: 200 # 最大连接池数量\n      maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置\n      timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。\n      minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间\n      validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL\n      testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun\n      testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n      poolPreparedStatements: true # 开启PSCache\n      maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值\n      connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次\n      breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制\n      timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔\n      asyncInit: true # 异步初始化策略\n      remove-abandoned: true # 是否自动回收超时连接\n      remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)\n      transaction-query-timeout: 6000 # 事务超时时间\n      filters: stat,wall,log4j2\n      connectionProperties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000\n      web-stat-filter:\n        enabled: true\n        url-pattern: \"/*\"\n        exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\"\n      stat-view-servlet:\n        url-pattern: \"/druid/*\"\n        allow:\n        deny:\n        reset-enable: false\n        login-username: admin\n        login-password: admin\n```\n\n### druid监控数据的外部化调用\n\n```java\n@RestController\npublic class DruidStatController {\n    @GetMapping(\"/stat\")\n    public Object druidStat() {\n        // DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据\n        return DruidStatManagerFacade.getInstance().getDataSourceStatDataList();\n    }\n}\n```\n\n![](https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png)\n\n","slug":"SpringBoot/【SpringBoot】Druid 配置详解","published":1,"date":"2020-03-17T16:35:09.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1k0004ryiad5q060oj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Druid-配置详解\"><a href=\"#SpringBoot-Druid-配置详解\" class=\"headerlink\" title=\"SpringBoot Druid 配置详解\"></a>SpringBoot Druid 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">datasource:</span><br>    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class=\"hljs-attr\">driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span><br>    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://$&#123;url&#125;:$&#123;port&#125;/$&#123;数据库名&#125;?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;allowMultiQueries=true&amp;useAffectedRows=true</span><br>    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">$&#123;username&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>  <span class=\"hljs-attr\">druid:</span><br>      <span class=\"hljs-attr\">initial-size:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># 最小连接池数量</span><br>      <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 最大连接池数量</span><br>      <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置</span><br>      <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span> <span class=\"hljs-comment\"># 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。</span><br>      <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间</span><br>      <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span> <span class=\"hljs-comment\"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 开启PSCache</span><br>      <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">#设置PSCache值</span><br>      <span class=\"hljs-attr\">connectionErrorRetryAttempts:</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\"># 连接出错后再尝试连接三次</span><br>      <span class=\"hljs-attr\">breakAfterAcquireFailure:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 数据库服务宕机自动重连机制</span><br>      <span class=\"hljs-attr\">timeBetweenConnectErrorMillis:</span> <span class=\"hljs-number\">300000</span> <span class=\"hljs-comment\"># 连接出错后重试时间间隔</span><br>      <span class=\"hljs-attr\">asyncInit:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 异步初始化策略</span><br>      <span class=\"hljs-attr\">remove-abandoned:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># 是否自动回收超时连接</span><br>      <span class=\"hljs-attr\">remove-abandoned-timeout:</span> <span class=\"hljs-number\">1800</span> <span class=\"hljs-comment\"># 超时时间(以秒数为单位)</span><br>      <span class=\"hljs-attr\">transaction-query-timeout:</span> <span class=\"hljs-number\">6000</span> <span class=\"hljs-comment\"># 事务超时时间</span><br>      <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span><br>      <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000</span><br>      <span class=\"hljs-attr\">web-stat-filter:</span><br>        <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/*&quot;</span><br>        <span class=\"hljs-attr\">exclusions:</span> <span class=\"hljs-string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>      <span class=\"hljs-attr\">stat-view-servlet:</span><br>        <span class=\"hljs-attr\">url-pattern:</span> <span class=\"hljs-string\">&quot;/druid/*&quot;</span><br>        <span class=\"hljs-attr\">allow:</span><br>        <span class=\"hljs-attr\">deny:</span><br>        <span class=\"hljs-attr\">reset-enable:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">login-username:</span> <span class=\"hljs-string\">admin</span><br>        <span class=\"hljs-attr\">login-password:</span> <span class=\"hljs-string\">admin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"druid监控数据的外部化调用\"><a href=\"#druid监控数据的外部化调用\" class=\"headerlink\" title=\"druid监控数据的外部化调用\"></a>druid监控数据的外部化调用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidStatController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping(&quot;/stat&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">druidStat</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// DruidStatManagerFacade#getDataSourceStatDataList 该方法可以获取所有数据源的监控数据</span><br>        <span class=\"hljs-keyword\">return</span> DruidStatManagerFacade.getInstance().getDataSourceStatDataList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://happyloves.oss-cn-hangzhou.aliyuncs.com/img/20200318003416.png\"></p>\n"},{"title":"SpringBoot Redis 配置详解","_content":"# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)\n","source":"_posts/SpringBoot/【SpringBoot】Redis 配置详解.md","raw":"---\ntitle: SpringBoot Redis 配置详解\ntags:\n  - SpringBoot\n  - Redis\ncategories:\n  - SpringBoot\n---\n# SpringBoot Redis 配置详解\n\n```yaml\nspring:\n  redis:\n    database: 1\n    host: ${host}\n    port: ${port}\n    password: ${password}\n    timeout: 10000\n    lettuce:\n      pool:\n        max-active: 200 # 连接池最大连接数（使用负值表示没有限制）\n        max-wait: -1ms # 连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-idle: 200 # 连接池中的最大空闲连接\n        min-idle: 50 # 连接池中的最小空闲连接\n        #驱逐时间 初始化延迟时间 默认-1\n        #if (delay > 0L) 必须>时才初始化\n        #(这句很重要，这个参数默认为-1,不>0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)\n        time-between-eviction-runs: 1s\n```\n\n[原文连接](https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage)\n","slug":"SpringBoot/【SpringBoot】Redis 配置详解","published":1,"date":"2020-03-22T12:24:41.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1k0005ryia0anwhmwa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Redis-配置详解\"><a href=\"#SpringBoot-Redis-配置详解\" class=\"headerlink\" title=\"SpringBoot Redis 配置详解\"></a>SpringBoot Redis 配置详解</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">$&#123;host&#125;</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">$&#123;port&#125;</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">$&#123;password&#125;</span><br>    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-number\">10000</span><br>    <span class=\"hljs-attr\">lettuce:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池最大连接数（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-wait:</span> <span class=\"hljs-string\">-1ms</span> <span class=\"hljs-comment\"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-comment\"># 连接池中的最大空闲连接</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-comment\"># 连接池中的最小空闲连接</span><br>        <span class=\"hljs-comment\">#驱逐时间 初始化延迟时间 默认-1</span><br>        <span class=\"hljs-comment\">#if (delay &gt; 0L) 必须&gt;时才初始化</span><br>        <span class=\"hljs-comment\">#(这句很重要，这个参数默认为-1,不&gt;0L则驱逐任务不会生成，池中的idel max 等参数等于没配置，不会生效。第二，如果是默认配置，即使生效也不会读池中链接，更浪费资源！！！代码见下边引用)</span><br>        <span class=\"hljs-attr\">time-between-eviction-runs:</span> <span class=\"hljs-string\">1s</span><br></code></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/ac6abfaeebbc?from=groupmessage\">原文连接</a></p>\n"},{"title":"SpringBoot Shiro 配置自定义密码加密器","_content":"# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器.md","raw":"---\ntitle: SpringBoot Shiro 配置自定义密码加密器\ntags:\n  - SpringBoot\n  - Shiro\ncategories:\n  - SpringBoot\n---\n# SpringBoot Shiro 配置自定义密码加密器\n\n**自定义认证加密方式**\n\n```java\n/**\n * 自定义认证加密方式\n */\npublic static class CustomCredentialsMatcher extends SimpleCredentialsMatcher {\n    @Override\n    public boolean doCredentialsMatch(AuthenticationToken authcToken, AuthenticationInfo info) {\n        UsernamePasswordToken token = (UsernamePasswordToken) authcToken;\n        //加密类型，密码，盐值，迭代次数\n        Object tokenCredentials = new SimpleHash(\"md5\", password, username, 2).toHex();\n        //数据库存储密码\n        Object accountCredentials = getCredentials(info);\n        //将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false\n        return equals(tokenCredentials, accountCredentials);\n    }\n}\n```\n\n### 第一种方式：配置Bean\n\n```java\n/**\n * Shiro自带密码管理器\n *\n * @return HashedCredentialsMatcher\n */\n@Bean\npublic HashedCredentialsMatcher hashedCredentialsMatcher() {\n  //Shiro自带加密\n  HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();\n  //散列算法使用md5\n  credentialsMatcher.setHashAlgorithmName(\"md5\");\n  //散列次数，2表示md5加密两次\n  credentialsMatcher.setHashIterations(2);\n  credentialsMatcher.setStoredCredentialsHexEncoded(true);\n  return credentialsMatcher;\n}\n\n/**\n * 将自己的身份验证器验证方式加入容器\n *\n * @return CustomRealm\n */\n@Bean\npublic CustomRealm shiroRealm() {\n  CustomRealm shiroRealm = new CustomRealm();\n  //shiroRealm.setCacheManager(cacheManager());\n  //加入密码管理\n  //shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器\n  shiroRealm.setCredentialsMatcher(new CustomCredentialsMatcher());//自定义密码管理器\n  return shiroRealm;\n}\n```\n\n### 第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\n\n```java\npublic class CustomRealm extends AuthorizingRealm {\n  ...\n  ...\n  ...\n    /**\n     * 设置自定义认证加密方式\n     *\n     * @param credentialsMatcher 默认加密方式\n     */\n    @Override\n    public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher) {\n    \t\t//自定义认证加密方式\n        CustomCredentialsMatcher customCredentialsMatcher = new CustomCredentialsMatcher();\n        // 设置自定义认证加密方式\n        super.setCredentialsMatcher(customCredentialsMatcher);\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】Shiro 配置自定义密码加密器","published":1,"date":"2020-03-12T17:34:28.000Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1r000vryia1fguhxko","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-Shiro-配置自定义密码加密器\"><a href=\"#SpringBoot-Shiro-配置自定义密码加密器\" class=\"headerlink\" title=\"SpringBoot Shiro 配置自定义密码加密器\"></a>SpringBoot Shiro 配置自定义密码加密器</h1><p><strong>自定义认证加密方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义认证加密方式</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SimpleCredentialsMatcher</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">doCredentialsMatch</span><span class=\"hljs-params\">(AuthenticationToken authcToken, AuthenticationInfo info)</span> &#123;<br>        <span class=\"hljs-type\">UsernamePasswordToken</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> (UsernamePasswordToken) authcToken;<br>        <span class=\"hljs-comment\">//加密类型，密码，盐值，迭代次数</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">tokenCredentials</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleHash</span>(<span class=\"hljs-string\">&quot;md5&quot;</span>, password, username, <span class=\"hljs-number\">2</span>).toHex();<br>        <span class=\"hljs-comment\">//数据库存储密码</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">accountCredentials</span> <span class=\"hljs-operator\">=</span> getCredentials(info);<br>        <span class=\"hljs-comment\">//将密码加密与系统加密后的密码校验，内容一致就返回true,不一致就返回false</span><br>        <span class=\"hljs-keyword\">return</span> equals(tokenCredentials, accountCredentials);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第一种方式：配置Bean\"><a href=\"#第一种方式：配置Bean\" class=\"headerlink\" title=\"第一种方式：配置Bean\"></a>第一种方式：配置Bean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Shiro自带密码管理器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> HashedCredentialsMatcher</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> HashedCredentialsMatcher <span class=\"hljs-title function_\">hashedCredentialsMatcher</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-comment\">//Shiro自带加密</span><br>  <span class=\"hljs-type\">HashedCredentialsMatcher</span> <span class=\"hljs-variable\">credentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedCredentialsMatcher</span>();<br>  <span class=\"hljs-comment\">//散列算法使用md5</span><br>  credentialsMatcher.setHashAlgorithmName(<span class=\"hljs-string\">&quot;md5&quot;</span>);<br>  <span class=\"hljs-comment\">//散列次数，2表示md5加密两次</span><br>  credentialsMatcher.setHashIterations(<span class=\"hljs-number\">2</span>);<br>  credentialsMatcher.setStoredCredentialsHexEncoded(<span class=\"hljs-literal\">true</span>);<br>  <span class=\"hljs-keyword\">return</span> credentialsMatcher;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 将自己的身份验证器验证方式加入容器</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> CustomRealm</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-keyword\">public</span> CustomRealm <span class=\"hljs-title function_\">shiroRealm</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">CustomRealm</span> <span class=\"hljs-variable\">shiroRealm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomRealm</span>();<br>  <span class=\"hljs-comment\">//shiroRealm.setCacheManager(cacheManager());</span><br>  <span class=\"hljs-comment\">//加入密码管理</span><br>  <span class=\"hljs-comment\">//shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());//Shiro自带密码管理器</span><br>  shiroRealm.setCredentialsMatcher(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>());<span class=\"hljs-comment\">//自定义密码管理器</span><br>  <span class=\"hljs-keyword\">return</span> shiroRealm;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"><a href=\"#第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\" class=\"headerlink\" title=\"第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法\"></a>第二种方式：实现AuthorizingRealm类setCredentialsMatcher方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AuthorizingRealm</span> &#123;<br>  ...<br>  ...<br>  ...<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 设置自定义认证加密方式</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> credentialsMatcher 默认加密方式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCredentialsMatcher</span><span class=\"hljs-params\">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>    \t\t<span class=\"hljs-comment\">//自定义认证加密方式</span><br>        <span class=\"hljs-type\">CustomCredentialsMatcher</span> <span class=\"hljs-variable\">customCredentialsMatcher</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCredentialsMatcher</span>();<br>        <span class=\"hljs-comment\">// 设置自定义认证加密方式</span><br>        <span class=\"hljs-built_in\">super</span>.setCredentialsMatcher(customCredentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot 全局异常处理","_content":"# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot】全局异常处理.md","raw":"---\ntitle: SpringBoot 全局异常处理\ntags:\n  - SpringBoot\n  - 全局异常\ncategories:\n  - SpringBoot\n---\n# SpringBoot 全局异常处理\n\n```java\n@Slf4j\n@RestControllerAdvice\npublic class ExceptionController {\n\n    /**\n     * 校验错误拦截处理\n     *\n     * @param ex 异常\n     * @return 返回值\n     * StringBuilder sb = new StringBuilder();\n     * for (FieldError error : ex.getBindingResult().getFieldErrors()) {\n     * sb.append(error.getDefaultMessage()).append(\";\");\n     * }\n     */\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public ApiMessage<Object> methodArgumentNotValidHandler(MethodArgumentNotValidException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n  \n    @ExceptionHandler(value = BindException.class)\n    public ApiMessage<Object> bindExceptionHandler(BindException ex) {\n        //按需重新封装需要返回的错误信息\n        List<ArgumentInvalid> invalidArguments = new ArrayList<>();\n        //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息\n        ex.getBindingResult().getFieldErrors().forEach(fieldError -> invalidArguments.add(new ArgumentInvalid(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));\n        return new ApiMessage<>(ExceptionCode.PARAMETER_ERROR, invalidArguments);\n    }\n\n    /**\n     * HTTP请求方式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)\n    public ApiMessage<Object> httpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException ex) {\n        log.error(\"HTTP请求方式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数不全\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = MissingServletRequestParameterException.class)\n    public ApiMessage<Object> missingServletRequestParameterException(MissingServletRequestParameterException ex) {\n        log.error(\"请求参数不全：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数类型不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = TypeMismatchException.class)\n    public ApiMessage<Object> typeMismatchException(TypeMismatchException ex) {\n        log.error(\"请求参数类型不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 数据格式不正确\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataFormatException.class)\n    public ApiMessage<Object> dataFormatException(DataFormatException ex) {\n        log.error(\"数据格式不正确：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 非法输入或断言错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = IllegalArgumentException.class)\n    public ApiMessage<Object> illegalArgumentException(IllegalArgumentException ex) {\n        log.error(\"非法输入或断言错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 请求参数错误\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = ConstraintViolationException.class)\n    public ApiMessage<Object> constraintViolationException(ConstraintViolationException ex) {\n        log.error(\"请求参数错误：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 操作数据库出现异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(value = DataAccessException.class)\n    public ApiMessage<Object> dataDoException(DataAccessException ex) {\n        log.error(\"操作数据库出现异常：【{}】\", ex.getMessage());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 系统异常\n     *\n     * @param ex 异常\n     * @return 返回值\n     */\n    @ExceptionHandler(Exception.class)\n    public ApiMessage<Object> apiExceptionHandler(Exception ex) {\n        //只打印15行的错误堆栈\n        int count = 1;\n        StringBuilder sb = new StringBuilder();\n        for (StackTraceElement stackTraceElement : ex.getStackTrace()) {\n            sb.append(stackTraceElement.toString());\n//            if (count++ >= 30) {\n//                break;\n//            }\n            sb.append(\"\\n\");\n        }\n        log.error(\"系统异常：【{}】\", sb.toString());\n        return new ApiMessage<>(ex);\n    }\n\n    /**\n     * 自定义异常\n     *\n     * @param apiException 自定义异常\n     * @return 返回值\n     */\n    @ExceptionHandler(ApiException.class)\n    public ApiMessage<Object> apiException(ApiException apiException) {\n        return new ApiMessage<>(apiException);\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    @EqualsAndHashCode(callSuper = false)\n    static class ArgumentInvalid {\n        /**\n         * 字段\n         */\n        private String field;\n        /**\n         * 字段值\n         */\n        private Object rejectedValue;\n        /**\n         * 默认值\n         */\n        private String defaultMessage;\n    }\n}\n```\n\n","slug":"SpringBoot/【SpringBoot】全局异常处理","published":1,"date":"2022-11-23T07:33:47.331Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1s000wryia138m5zxw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot-全局异常处理\"><a href=\"#SpringBoot-全局异常处理\" class=\"headerlink\" title=\"SpringBoot 全局异常处理\"></a>SpringBoot 全局异常处理</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionController</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 校验错误拦截处理</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     * StringBuilder sb = new StringBuilder();</span><br><span class=\"hljs-comment\">     * for (FieldError error : ex.getBindingResult().getFieldErrors()) &#123;</span><br><span class=\"hljs-comment\">     * sb.append(error.getDefaultMessage()).append(&quot;;&quot;);</span><br><span class=\"hljs-comment\">     * &#125;</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">methodArgumentNotValidHandler</span><span class=\"hljs-params\">(MethodArgumentNotValidException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br>  <br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BindException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">bindExceptionHandler</span><span class=\"hljs-params\">(BindException ex)</span> &#123;<br>        <span class=\"hljs-comment\">//按需重新封装需要返回的错误信息</span><br>        List&lt;ArgumentInvalid&gt; invalidArguments = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-comment\">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span><br>        ex.getBindingResult().getFieldErrors().forEach(fieldError -&gt; invalidArguments.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentInvalid</span>(fieldError.getField(), fieldError.getRejectedValue(), fieldError.getDefaultMessage())));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ExceptionCode.PARAMETER_ERROR, invalidArguments);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * HTTP请求方式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = HttpRequestMethodNotSupportedException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">httpRequestMethodNotSupportedException</span><span class=\"hljs-params\">(HttpRequestMethodNotSupportedException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;HTTP请求方式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数不全</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = MissingServletRequestParameterException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">missingServletRequestParameterException</span><span class=\"hljs-params\">(MissingServletRequestParameterException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数不全：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数类型不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = TypeMismatchException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">typeMismatchException</span><span class=\"hljs-params\">(TypeMismatchException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数类型不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数据格式不正确</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataFormatException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataFormatException</span><span class=\"hljs-params\">(DataFormatException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数据格式不正确：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 非法输入或断言错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = IllegalArgumentException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">illegalArgumentException</span><span class=\"hljs-params\">(IllegalArgumentException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法输入或断言错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 请求参数错误</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = ConstraintViolationException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">constraintViolationException</span><span class=\"hljs-params\">(ConstraintViolationException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;请求参数错误：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 操作数据库出现异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = DataAccessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">dataDoException</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;操作数据库出现异常：【&#123;&#125;】&quot;</span>, ex.getMessage());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 系统异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> ex 异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiExceptionHandler</span><span class=\"hljs-params\">(Exception ex)</span> &#123;<br>        <span class=\"hljs-comment\">//只打印15行的错误堆栈</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : ex.getStackTrace()) &#123;<br>            sb.append(stackTraceElement.toString());<br><span class=\"hljs-comment\">//            if (count++ &gt;= 30) &#123;</span><br><span class=\"hljs-comment\">//                break;</span><br><span class=\"hljs-comment\">//            &#125;</span><br>            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>        log.error(<span class=\"hljs-string\">&quot;系统异常：【&#123;&#125;】&quot;</span>, sb.toString());<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(ex);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 自定义异常</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> apiException 自定义异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span> 返回值</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExceptionHandler(ApiException.class)</span><br>    <span class=\"hljs-keyword\">public</span> ApiMessage&lt;Object&gt; <span class=\"hljs-title function_\">apiException</span><span class=\"hljs-params\">(ApiException apiException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ApiMessage</span>&lt;&gt;(apiException);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@NoArgsConstructor</span><br>    <span class=\"hljs-meta\">@AllArgsConstructor</span><br>    <span class=\"hljs-meta\">@EqualsAndHashCode(callSuper = false)</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArgumentInvalid</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String field;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 字段值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> Object rejectedValue;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 默认值</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-keyword\">private</span> String defaultMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot自动配置与@Enable方式配置","_content":"# SpringBoot自动配置与@Enable方式配置\n\n## SpringBoot自动配置：\n\n在`resources`目录下新建`META-INF`目录，创建`spring.factories`文件。\n\n```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig\n```\n\n```java\n/**\n * @author zc\n * @date 2020/12/22 00:53\n */\n@Slf4j\n@Configuration\npublic class TestAutoConfig {\n\n    @Data\n    public class Test {\n\n    }\n\n    @Bean\n    public Test user() {\n        log.error(\"=======\");\n        return new Test();\n    }\n}\n```\n\n此种方式就可以实现SpringBoot的自动配置加载。\n\n## 通过`@Enable`注解方式实现自动配置\n\n```java\n/**\n * 启用注解：@EnableTest\n *\n * @author ZC\n * @date 2020/6/8-22:05\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import({TestAutoConfig.class})\npublic @interface EnableTest {\n}\n```\n\n**不要在`spring.factories`文件里配置加载类，不然SpringBoot就自动加载配置了**\n\n此时只需要在启动类上加上`@EnableTest`就可以实现加载配置类了\n\n","source":"_posts/SpringBoot/【SpringBoot】自动配置与@Enable方式配置.md","raw":"---\ntitle: SpringBoot自动配置与@Enable方式配置\ntags:\n  - SpringBoot\n  - 自动配置\ncategories:\n  - SpringBoot\n---\n# SpringBoot自动配置与@Enable方式配置\n\n## SpringBoot自动配置：\n\n在`resources`目录下新建`META-INF`目录，创建`spring.factories`文件。\n\n```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig\n```\n\n```java\n/**\n * @author zc\n * @date 2020/12/22 00:53\n */\n@Slf4j\n@Configuration\npublic class TestAutoConfig {\n\n    @Data\n    public class Test {\n\n    }\n\n    @Bean\n    public Test user() {\n        log.error(\"=======\");\n        return new Test();\n    }\n}\n```\n\n此种方式就可以实现SpringBoot的自动配置加载。\n\n## 通过`@Enable`注解方式实现自动配置\n\n```java\n/**\n * 启用注解：@EnableTest\n *\n * @author ZC\n * @date 2020/6/8-22:05\n */\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@Import({TestAutoConfig.class})\npublic @interface EnableTest {\n}\n```\n\n**不要在`spring.factories`文件里配置加载类，不然SpringBoot就自动加载配置了**\n\n此时只需要在启动类上加上`@EnableTest`就可以实现加载配置类了\n\n","slug":"SpringBoot/【SpringBoot】自动配置与@Enable方式配置","published":1,"date":"2022-11-23T07:34:27.960Z","updated":"2022-11-23T08:08:00.308Z","_id":"clatd5i1t000yryia313qftj5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot自动配置与-Enable方式配置\"><a href=\"#SpringBoot自动配置与-Enable方式配置\" class=\"headerlink\" title=\"SpringBoot自动配置与@Enable方式配置\"></a>SpringBoot自动配置与@Enable方式配置</h1><h2 id=\"SpringBoot自动配置：\"><a href=\"#SpringBoot自动配置：\" class=\"headerlink\" title=\"SpringBoot自动配置：\"></a>SpringBoot自动配置：</h2><p>在<code>resources</code>目录下新建<code>META-INF</code>目录，创建<code>spring.factories</code>文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/12/22 00:53</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestAutoConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Test <span class=\"hljs-title function_\">user</span><span class=\"hljs-params\">()</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;=======&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Test</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此种方式就可以实现SpringBoot的自动配置加载。</p>\n<h2 id=\"通过-Enable注解方式实现自动配置\"><a href=\"#通过-Enable注解方式实现自动配置\" class=\"headerlink\" title=\"通过@Enable注解方式实现自动配置\"></a>通过<code>@Enable</code>注解方式实现自动配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 启用注解：<span class=\"hljs-doctag\">@EnableTest</span></span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> ZC</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/6/8-22:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(&#123;TestAutoConfig.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>不要在<code>spring.factories</code>文件里配置加载类，不然SpringBoot就自动加载配置了</strong></p>\n<p>此时只需要在启动类上加上<code>@EnableTest</code>就可以实现加载配置类了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot自动配置与-Enable方式配置\"><a href=\"#SpringBoot自动配置与-Enable方式配置\" class=\"headerlink\" title=\"SpringBoot自动配置与@Enable方式配置\"></a>SpringBoot自动配置与@Enable方式配置</h1><h2 id=\"SpringBoot自动配置：\"><a href=\"#SpringBoot自动配置：\" class=\"headerlink\" title=\"SpringBoot自动配置：\"></a>SpringBoot自动配置：</h2><p>在<code>resources</code>目录下新建<code>META-INF</code>目录，创建<code>spring.factories</code>文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=xx.xx.xx.TestAutoConfig<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> zc</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/12/22 00:53</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestAutoConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> Test <span class=\"hljs-title function_\">user</span><span class=\"hljs-params\">()</span> &#123;<br>        log.error(<span class=\"hljs-string\">&quot;=======&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Test</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此种方式就可以实现SpringBoot的自动配置加载。</p>\n<h2 id=\"通过-Enable注解方式实现自动配置\"><a href=\"#通过-Enable注解方式实现自动配置\" class=\"headerlink\" title=\"通过@Enable注解方式实现自动配置\"></a>通过<code>@Enable</code>注解方式实现自动配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 启用注解：<span class=\"hljs-doctag\">@EnableTest</span></span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> ZC</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@date</span> 2020/6/8-22:05</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(&#123;TestAutoConfig.class&#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableTest &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>不要在<code>spring.factories</code>文件里配置加载类，不然SpringBoot就自动加载配置了</strong></p>\n<p>此时只需要在启动类上加上<code>@EnableTest</code>就可以实现加载配置类了</p>\n"},{"title":"SpringBoot2 线程池的定义和使用","abbrlink":"8a11e15c","_content":"\n# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","source":"_posts/SpringBoot/【SpringBoot2】线程池的定义和使用.md","raw":"---\ntitle: SpringBoot2 线程池的定义和使用\ntags:\n  - SpringBoot\n  - 线程池\ncategories:\n  - SpringBoot\nabbrlink: 8a11e15c\n---\n\n# SpringBoot2 线程池的定义和使用\n\n**定义线程池**\n\n```java\n@Slf4j\n@EnableAsync\n@Configuration\npublic class AsyncExecutorConfig implements AsyncConfigurer {\n\n    @Bean\n    public ThreadPoolTaskExecutor asyncServiceExecutor() {\n        //返回可用处理器的虚拟机的最大数量不小于1\n        int cpu = Runtime.getRuntime().availableProcessors();\n        log.info(\"start asyncServiceExecutor cpu : {}\", cpu);\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        //配置核心线程数\n        executor.setCorePoolSize(cpu);\n        //配置最大线程数\n        executor.setMaxPoolSize(cpu);\n        //配置队列大小\n        executor.setQueueCapacity(50);\n        //用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean\n        executor.setWaitForTasksToCompleteOnShutdown(true);\n        //设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住\n        executor.setAwaitTerminationSeconds(60);\n        //配置线程池中的线程的名称前缀\n        executor.setThreadNamePrefix(\"async-service-\");\n        // rejection-policy：当pool已经达到max size的时候，如何处理新任务\n        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行\n        // 使用预定义的异常处理类\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        //执行初始化\n        executor.initialize();\n        return executor;\n    }\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return asyncServiceExecutor();\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (throwable, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n            for (Object param : objects) {\n                sb.append(param).append(\",\");\n            }\n            log.error(\"Exception message - {}，Method name - {}，Parameter value - {}\", throwable.getMessage(), method.getName(), sb.toString());\n        };\n\n    }\n}\n```\n\n**如何使用**\n\n```java\n@Autowired    \nprivate ThreadPoolTaskExecutor threadPoolTaskExecutor;\n\npublic void test(){\n  CompletableFuture<Void> userFuture = CompletableFuture.runAsync(() ->  System.out.println(111), threadPoolTaskExecutor);\n}\n```\n\n","slug":"SpringBoot/【SpringBoot2】线程池的定义和使用","published":1,"date":"2022-11-23T07:56:35.069Z","updated":"2022-11-23T08:53:35.681Z","_id":"clates4c90000fiiadchxbgky","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot2-线程池的定义和使用\"><a href=\"#SpringBoot2-线程池的定义和使用\" class=\"headerlink\" title=\"SpringBoot2 线程池的定义和使用\"></a>SpringBoot2 线程池的定义和使用</h1><p><strong>定义线程池</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Slf4j</span><br><span class=\"hljs-meta\">@EnableAsync</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AsyncExecutorConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AsyncConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> ThreadPoolTaskExecutor <span class=\"hljs-title function_\">asyncServiceExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//返回可用处理器的虚拟机的最大数量不小于1</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cpu</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime().availableProcessors();<br>        log.info(<span class=\"hljs-string\">&quot;start asyncServiceExecutor cpu : &#123;&#125;&quot;</span>, cpu);<br>        <span class=\"hljs-type\">ThreadPoolTaskExecutor</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolTaskExecutor</span>();<br>        <span class=\"hljs-comment\">//配置核心线程数</span><br>        executor.setCorePoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置最大线程数</span><br>        executor.setMaxPoolSize(cpu);<br>        <span class=\"hljs-comment\">//配置队列大小</span><br>        executor.setQueueCapacity(<span class=\"hljs-number\">50</span>);<br>        <span class=\"hljs-comment\">//用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class=\"hljs-literal\">true</span>);<br>        <span class=\"hljs-comment\">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span><br>        executor.setAwaitTerminationSeconds(<span class=\"hljs-number\">60</span>);<br>        <span class=\"hljs-comment\">//配置线程池中的线程的名称前缀</span><br>        executor.setThreadNamePrefix(<span class=\"hljs-string\">&quot;async-service-&quot;</span>);<br>        <span class=\"hljs-comment\">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br>        <span class=\"hljs-comment\">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br>        <span class=\"hljs-comment\">// 使用预定义的异常处理类</span><br>        executor.setRejectedExecutionHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class=\"hljs-comment\">//执行初始化</span><br>        executor.initialize();<br>        <span class=\"hljs-keyword\">return</span> executor;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Executor <span class=\"hljs-title function_\">getAsyncExecutor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> asyncServiceExecutor();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"hljs-title function_\">getAsyncUncaughtExceptionHandler</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (throwable, method, objects) -&gt; &#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>            <span class=\"hljs-keyword\">for</span> (Object param : objects) &#123;<br>                sb.append(param).append(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>            &#125;<br>            log.error(<span class=\"hljs-string\">&quot;Exception message - &#123;&#125;，Method name - &#123;&#125;，Parameter value - &#123;&#125;&quot;</span>, throwable.getMessage(), method.getName(), sb.toString());<br>        &#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>如何使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span>    <br><span class=\"hljs-keyword\">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>&#123;<br>  CompletableFuture&lt;Void&gt; userFuture = CompletableFuture.runAsync(() -&gt;  System.out.println(<span class=\"hljs-number\">111</span>), threadPoolTaskExecutor);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clatd5i1g0001ryiaelkr34w4","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5ieh0017ryia0lhqfxaq"},{"post_id":"clatd5i160000ryiaeqtp3qds","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5ieh0018ryiafqvd0znx"},{"post_id":"clatd5i1s000wryia138m5zxw","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iei0019ryiafj7o84ij"},{"post_id":"clatd5i1t000yryia313qftj5","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001aryiahdd9atm4"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001bryia9i7y0vyt"},{"post_id":"clatd5i1k0005ryia0anwhmwa","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iej001cryiageusgoba"},{"post_id":"clatd5i1k0004ryiad5q060oj","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iel001dryia0u6u9dau"},{"post_id":"clatd5i1r000vryia1fguhxko","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clatd5iel001eryia2fieda6v"},{"post_id":"clates4c90000fiiadchxbgky","category_id":"claktn9bh002f19ia0pub5jqs","_id":"clates4pc0004fiiaad76azdr"}],"PostTag":[{"post_id":"clatd5i160000ryiaeqtp3qds","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1m0008ryiacvq7g2mz"},{"post_id":"clatd5i160000ryiaeqtp3qds","tag_id":"clatd5i1l0006ryia5wjbh50n","_id":"clatd5i1n0009ryia0e6v3z3t"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1o000dryia889qeb3s"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1n000aryia7ge7dhqd","_id":"clatd5i1o000eryiagngra75q"},{"post_id":"clatd5i1g0001ryiaelkr34w4","tag_id":"clatd5i1n000bryia6jcb1ms4","_id":"clatd5i1o000gryia1wgc0gg6"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1p000kryiagvp68xdl"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000fryiabul7gulz","_id":"clatd5i1p000lryia9iqqedrq"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000hryiadwwze9gc","_id":"clatd5i1p000nryiabvr1hl26"},{"post_id":"clatd5i1j0003ryia8p9n5h2c","tag_id":"clatd5i1o000iryiaesuqf25o","_id":"clatd5i1p000oryia87vadhmg"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1q000qryia25e71rx3"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1p000jryia2d6yd94z","_id":"clatd5i1q000rryia3s1ef67a"},{"post_id":"clatd5i1k0004ryiad5q060oj","tag_id":"clatd5i1p000mryia9q434pho","_id":"clatd5i1q000sryia8pbl3n7o"},{"post_id":"clatd5i1k0005ryia0anwhmwa","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1q000tryia2j94c3dd"},{"post_id":"clatd5i1k0005ryia0anwhmwa","tag_id":"clatd5i1p000pryia34cs3u23","_id":"clatd5i1q000uryia15c8fmyp"},{"post_id":"clatd5i1r000vryia1fguhxko","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1u0010ryia7yzk5xry"},{"post_id":"clatd5i1r000vryia1fguhxko","tag_id":"clatd5i1t000xryiafkvp2obn","_id":"clatd5i1u0011ryiab2l510t4"},{"post_id":"clatd5i1s000wryia138m5zxw","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1v0013ryiabtwz6rb7"},{"post_id":"clatd5i1s000wryia138m5zxw","tag_id":"clatd5i1u000zryiahn581zn3","_id":"clatd5i1v0014ryia3a0dcslv"},{"post_id":"clatd5i1t000yryia313qftj5","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clatd5i1v0015ryia8ddjgeqb"},{"post_id":"clatd5i1t000yryia313qftj5","tag_id":"clatd5i1u0012ryia8t2kf6w3","_id":"clatd5i1v0016ryiahx9cfh6o"},{"post_id":"clates4c90000fiiadchxbgky","tag_id":"clatd5i1i0002ryia5bf49tr2","_id":"clates4cc0002fiia9lf3akf1"},{"post_id":"clates4c90000fiiadchxbgky","tag_id":"clates4cc0001fiiahbdrd214","_id":"clates4cc0003fiiab6sx3wdj"}],"Tag":[{"name":"默认","_id":"cl9qxfdah0004bz2b59t399l6"},{"name":"SpringBoot","_id":"clatd5i1i0002ryia5bf49tr2"},{"name":"Swagger2","_id":"clatd5i1l0006ryia5wjbh50n"},{"name":"序列化","_id":"clatd5i1n000aryia7ge7dhqd"},{"name":"时间格式","_id":"clatd5i1n000bryia6jcb1ms4"},{"name":"AOP","_id":"clatd5i1o000fryiabul7gulz"},{"name":"切面","_id":"clatd5i1o000hryiadwwze9gc"},{"name":"日志处理","_id":"clatd5i1o000iryiaesuqf25o"},{"name":"Druid","_id":"clatd5i1p000jryia2d6yd94z"},{"name":"Mysql连接池","_id":"clatd5i1p000mryia9q434pho"},{"name":"Redis","_id":"clatd5i1p000pryia34cs3u23"},{"name":"Shiro","_id":"clatd5i1t000xryiafkvp2obn"},{"name":"全局异常","_id":"clatd5i1u000zryiahn581zn3"},{"name":"自动配置","_id":"clatd5i1u0012ryia8t2kf6w3"},{"name":"线程池","_id":"clates4cc0001fiiahbdrd214"}]}}